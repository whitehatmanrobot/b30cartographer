hod. </param>
      <param name=" callingConvention">The method's calling convention. </param>
      <param name=" returnType">The method's return type. </param>
      <param name=" parameterTypes">The types of the method's parameters.</param>
      <param name=" nativeCallConv">The native calling convention. </param>
      <param name=" nativeCharSet">The method's native character set. </param>
      <returns>
        <para> The defined <see langword="PInvoke" /> method.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>
        <para> Defines a <see langword="PInvoke " />method given its name,
   the name of the DLL in which the method is defined, the attributes of the
   method, the calling convention of the method, the return type of the method, the
   types of the parameters of the method, and the <see langword="PInvoke " />
   
   flags.
   </para>
      </summary>
      <param name="name">The name of the <see langword="PInvoke" /> method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name=" dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name=" entryName">The name of the entry point in the DLL. </param>
      <param name=" attributes">The attributes of the method. </param>
      <param name=" callingConvention">The method's calling convention. </param>
      <param name=" returnType">The method's return type. </param>
      <param name=" parameterTypes">The types of the method's parameters. </param>
      <param name=" nativeCallConv">The native calling convention. </param>
      <param name=" nativeCharSet">The method's native character set.</param>
      <returns>
        <para> The defined PInvoke method.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary>
        <para> Defines the initializer for this type.
      </para>
      </summary>
      <returns>
        <para> Returns a type initializer.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary>
        <para> Adds a new constructor to the class, with the given attributes and
      signature.
      </para>
      </summary>
      <param name="attributes">The attributes of the constructor. </param>
      <param name="callingConvention">The calling convention of the constructor. </param>
      <param name="parameterTypes">The types of the parameters of the constructor. </param>
      <returns>
        <para> The defined constructor.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary>
        <para> Defines the default constructor. The constructor
      defined here will simply call the default constructor of the parent.
      </para>
      </summary>
      <param name="attributes">A <see langword="MethodAttributes" /> object representing the attributes to be applied to the constructor. </param>
      <returns>
        <para>Returns the constructor.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary>
        <para> Creates a <see cref="T:System.Type" /> object for the
   class. After defining fields and methods on the class, <see langword="CreateType " />is called in order to load its <see langword="Type " />
   object.
   </para>
      </summary>
      <returns>
        <para> Returns the new <see cref="T:System.Type" /> object for this
   class.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>
        <para> Specifies a given method body that implements a given
      method declaration.
      </para>
      </summary>
      <param name="methodInfoBody">The method body to be used. This should be a <see langword="MethodBuilder" /> object. </param>
      <param name="methodInfoDeclaration">The method whose declaration is to be used. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary>
        <para> Adds a new field to the class, with the given name, attributes and field
      type.
      </para>
      </summary>
      <param name="fieldName">The name of the field. <paramref name="fieldName " />cannot contain embedded nulls. </param>
      <param name="type">The type of the field </param>
      <param name="attributes">The attributes of the field. </param>
      <returns>
        <para> The defined field.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>
        <para> Defines initialized data field in the .sdata section of
      the portable executable (PE) file.
      </para>
      </summary>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name=" data">The blob of data. </param>
      <param name=" attributes">The attributes for the field. </param>
      <returns>
        <para> A field to reference the data.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>
        <para> Defines uninitialized data field in the .sdata section of
      the portable executable (PE) file.
      </para>
      </summary>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="size">The blob of data. </param>
      <param name="attributes">The attributes for the field. </param>
      <returns>
        <para> A field to reference the data.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary>
        <para> Defines a nested type given its name.
      </para>
      </summary>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <returns>
        <para> The defined nested type.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>
        <para> Defines a nested type given its name, attributes, the
      type that it extends, and the interfaces
      that
      it implements.
      </para>
      </summary>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <param name="interfaces">The interfaces that the nested type implements. </param>
      <returns>
        <para> The defined nested type.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>
        <para> Defines a nested type
      given its name, attributes, and the type
      that
      it extends.
      </para>
      </summary>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <returns>
        <para> The defined nested type.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary>
        <para> Defines a nested type given its
      name
      and attributes.
      </para>
      </summary>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <returns>
        <para> The defined nested type.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>
        <para> Defines a nested type given its
      name, attributes, the total
      size of the type, and the type
      that
      it extends.
      </para>
      </summary>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <param name=" typeSize">The total size of the type. </param>
      <returns>
        <para> The defined nested type.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>
        <para> Defines a nested type given its
      name, attributes, the total
      size of the type, and the type
      that
      it extends.
      </para>
      </summary>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <param name="packSize">The packing size of the type. </param>
      <returns>
        <para> The defined nested type.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
      <summary>
        <para> Adds
      declarative security to this type.
      </para>
      </summary>
      <param name="action">The security action to be taken such as Demand, Assert, and so on. </param>
      <param name="pset">The set of permissions the action applies to. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
        <para> Invokes the specified member. The method that is to be invoked
      must be accessible and provide the most specific match with the specified
      argument list, under the contraints of the specified binder and invocation
      attributes.
      </para>
      </summary>
      <param name="name">The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from <see langword="BindingFlags" /> . </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection. If binder is <see langword="null" />, the default binder is used. See <see cref="T:System.Reflection.Binder" /> . </param>
      <param name="target">The object on which to invoke the specified member. If the member is static, this parameter is ignored. </param>
      <param name="args">An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null. </param>
      <param name="modifiers"> An array of the same length as args with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details. </param>
      <param name="culture">An instance of <see langword="CultureInfo" /> used to govern the coercion of types. If this is null, the <see langword="CultureInfo" /> for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.) </param>
      <param name="namedParameters">Each parameter in the <paramref name="namedParameters" /> array gets the value in the corresponding element in the <paramref name="args" /> array. If the length of <paramref name="args" /> is greater than the length of <paramref name="namedParameters" /> , the remaining argument values are passed in order. </param>
      <returns>
        <para> Returns the return value of the invoked member.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary>
        <para>Returns the name of the type excluding the
      namespace.</para>
      </summary>
      <returns>
        <para>Read-only. The name of the type
      excluding the namespace.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para> Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</para>
      </summary>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to conduct a case-sensitive search for public methods.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>
        <para> Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing
   the public and non-public constructors defined for this class, as specified.
   </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para> Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing
   the specified constructors defined for this class. If no constructors are
   defined, an empty array is returned.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para> Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to conduct a case-sensitive search for public methods.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>
        <para> Returns all the public and non-public methods declared or
      inherited by this type, as specified.
      </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para> Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing the
   public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para> Returns the field specified by the given name.
      </para>
      </summary>
      <param name="name">The name of the field to get. </param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para> Returns the <see cref="T:System.Reflection.FieldInfo" /> object representing the
   field declared or inherited by this type with the specified name and public or
   non-public modifier. If there are no matches then <see langword="null" />
   is returned.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>
        <para> Returns the public and non-public fields that are
      declared by this type.
      </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para> Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the
   public and non-public fields declared or inherited by this type. An empty array
   is returned if there are no fields, as specified.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary>
        <para> Returns the interface implemented (directly or indirectly) by
      this class with the fully-qualified name matching the given interface name.
      </para>
      </summary>
      <param name="name">The name of the interface. </param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive. </param>
      <returns>
        <para> Returns a <see cref="T:System.Type" /> object representing the
   implemented interface. Returns null if no interface matching name is found.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary>
        <para> Returns an array of all the interfaces implemented on this
      a class and its base classes.
      </para>
      </summary>
      <returns>
        <para> Returns an array of <see cref="T:System.Type" /> objects
   representing the implemented interfaces. If none are defined, an empty array is
   returned.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para> Returns the event with the specified name.
      </para>
      </summary>
      <param name="name">The name of the event to get. </param>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para> Returns an <see cref="T:System.Reflection.EventInfo" /> object representing
   the event declared or inherited by this type with the specified name. If there
   are no matches, then an empty array is returned.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary>
        <para> Returns the events for the public events declared or inherited by
      this type.
      </para>
      </summary>
      <returns>
        <para> Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the
   public events declared or inherited by this type. An empty array is returned if
   there are no public events.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para> Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to conduct a case-sensitive search for public properties.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>
        <para> Returns all the public and non-public properties declared or
      inherited by this type, as specified.
      </para>
      </summary>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para> Returns an array of <see langword="PropertyInfo" /> objects representing the
   public and non-public properties defined on this type if <paramref name="nonPublic" /> is
   used; otherwise, only the public properties are returned.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>
        <para> Returns the public and non-public nested
      types that are declared or inherited by this type.
      </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para>An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the
nested types match the binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para> Returns the public and non-public nested types that are
      declared by this type.
      </para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the nested type to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to conduct a case-sensitive search for public methods.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>
        <para> Returns all the public and non-public members declared or
      inherited by this type, as specified.
      </para>
      </summary>
      <param name=" name">The name of the member. </param>
      <param name=" type">The type of the member to return.</param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para> Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the
   public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary>
        <para>Returns an interface mapping for the
      requested interface.</para>
      </summary>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface for which the mapping is to be retrieved. </param>
      <returns>
        <para>Returns the requested interface
      mapping.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>
        <para> Returns the public and non-public events that are declared by this type.
      </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para> Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>
        <para> Returns the members for the public and non-public members
      declared or inherited by this type.
      </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para> Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the
   public and non-public members declared or inherited by this type. An empty
   array is returned if there are no matching members.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary>
        <para>Determines whether an instance of the 
      current <see cref="T:System.Type" /> can be assigned from an instance of the specified
   <see langword="Type" />.</para>
      </summary>
      <param name="c">The <see langword="Type" /> to compare with the current <see langword="Type" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <paramref name="c" /> parameter and the 
   current <see cref="T:System.Type" /> represent the same type, or if the current
<see langword="Type" /> is in the inheritance hierarchy of <paramref name="c" />, or if the 
   current <see langword="Type" /> is an interface that <paramref name="c" /> supports.
<see langword="false" /> if none of these conditions are the case, or if 
<paramref name="c" /> is a null reference (<see langword="Nothing" /> in Visual Basic). </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl">
      <summary>
        <para>
       Returns the implementation attribute flags.
    </para>
      </summary>
      <returns>
        <para>
       Returns the implementation attribute flags.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsArrayImpl">
      <summary>
        <para> Always returns <see langword="false" /> .
   </para>
      </summary>
      <returns>
        <para> Returns <see langword="false" /> .
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsByRefImpl">
      <summary>
        <para>Always returns <see langword="false " /> .</para>
      </summary>
      <returns>
        <para>Always <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsPointerImpl">
      <summary>
        <para>Always returns <see langword="false " /> .</para>
      </summary>
      <returns>
        <para>Always <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl">
      <summary>
        <para> Always returns <see langword="false" /> .
   </para>
      </summary>
      <returns>
        <para> Returns <see langword="false" /> .
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl">
      <summary>
        <para> Checks if this type imports a COM type.
      </para>
      </summary>
      <returns>
        <para> Returns <see langword="true" /> if
   this type imports a COM type;
   otherwise, <see langword="false" /> .
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary>
        <para> Calling this method always throws <see cref="T:System.NotSupportedException" /> .
   </para>
      </summary>
      <returns>
        <para>This method is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.HasElementTypeImpl">
      <summary>
        <para> Calling this method always throws <see cref="T:System.NotSupportedException" />.
   </para>
      </summary>
      <returns>
        <para>This method is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary>
        <para>Checks if this type is a derived class of the given type
   <paramref name="c" /> .</para>
      </summary>
      <param name="c">A <see cref="T:System.Type" /> that is to be checked</param>
      <returns>
        <para>Read-only. Returns <see langword="true" /> if this type is
   the same as the type <paramref name="c" />, or is a subtype of type <paramref name="c" /> ; otherwise,
<see langword="false" /> 
.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary>
        <para> Returns all the custom attributes defined for this type.
      </para>
      </summary>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para> Returns an array of objects representing all the custom
      attributes of this
      type.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para> Checks if the specified custom attribute type is defined.
      </para>
      </summary>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para>
          <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is defined on this member; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para> Set a custom attribute using a custom attribute builder.
      </para>
      </summary>
      <param name="attributeType">The <see langword="Type" /> object to which the custom attributes are applied.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para>
          <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is defined on this member; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
        <para>Sets a custom attribute using a specified custom attribute blob. </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
        <para>Set a custom attribute using a custom attribute builder. </para>
      </summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary>
        <para>
       Retrieves the total size of a type.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary>
        <para>
       Retrieves the packing size of this type.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary>
        <para> Returns the type that
      declared
      this type.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary>
    Returns the type that was used to obtain
    this type.
 </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeToken">
      <summary>
        <para> Returns the type token of this type.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary>
        <para> Retrieves the name of this type.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary>
        <para> Retrieves
      the GUID of this type.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary>
        <para> Retrieves
      the dynamic module that contains this type definition.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary>
        <para>Retrieves the dynamic assembly that contains this type definition.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary>
        <para> Not supported in dynamic modules.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary>
        <para> 
      Retrieves the full path of this type.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary>
        <para> Retrieves the namespace where this <see langword="TypeBuilder " /> 
is defined.
</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary>
        <para>
       Returns the full name of this type qualified by the display
       name
       of
       the assembly.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary>
        <para> Retrieves
      the base type of this type.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary>
        <para>Returns the underlying system type for this
   <see langword="TypeBuilder" /> .</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary>
        <para> Describes
      and represents an enumeration type.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary>
        <para>
       Defines the named static field in an
       enumeration type with the specified constant value.
    </para>
      </summary>
      <param name="literalName">
    The name of the static field.
 </param>
      <param name=" literalValue">
    The constant value of the literal.
 </param>
      <returns>
        <para>
       The defined field.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateType">
      <summary>
        <para> Creates a <see cref="T:System.Type" /> object for this enum.
   </para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Type" /> object for this
   enum.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
        <para>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes. </para>
      </summary>
      <param name="name">The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from <see langword="BindingFlags" /> . </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection. If binder is <see langword="null" />, the default binder is used. See <see cref="T:System.Reflection.Binder" /> . </param>
      <param name="target">The object on which to invoke the specified member. If the member is static, this parameter is ignored. </param>
      <param name="args">An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null. </param>
      <param name="modifiers">An array of the same length as <paramref name="args" /> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this. </param>
      <param name="culture">An instance of <see langword="CultureInfo" /> used to govern the coercion of types. If this is null, the <see langword="CultureInfo" /> for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.) </param>
      <param name="namedParameters">Each parameter in the <paramref name="namedParameters" /> array gets the value in the corresponding element in the <paramref name="args" /> array. If the length of <paramref name="args" /> is greater than the length of <paramref name="namedParameters" /> , the remaining argument values are passed in order. </param>
      <returns>
        <para>Returns the return value of the invoked member. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</para>
      </summary>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to conduct a case-sensitive search for public methods.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the public and non-public constructors defined for this class, as specified. </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to conduct a case-sensitive search for public methods.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns all the public and non-public methods declared or inherited by this type, as specified. </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> , such as <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para>Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the field specified by the given name. </para>
      </summary>
      <param name="name">The name of the field to get. </param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para>Returns the <see cref="T:System.Reflection.FieldInfo" /> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the public and non-public fields that are declared by this type. </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> , such as InvokeMethod, NonPublic, and so on. </param>
      <returns>
        <para>Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary>
        <para> Returns the interface implemented (directly or indirectly) by
      this class with the fully-qualified name matching the given interface name.
      </para>
      </summary>
      <param name="name">The name of the interface. </param>
      <param name="ignoreCase">If <see langword="true" />, the search is case-insensitive. If <see langword="false" /> , the search is case-sensitive. </param>
      <returns>
        <para> Returns a <see cref="T:System.Type" /> object representing the
   implemented interface. Returns null if no interface matching name is found.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary>
        <para> Returns an array of all the interfaces implemented on this a
      class and its base classes.
      </para>
      </summary>
      <returns>
        <para>Returns an array of <see cref="T:System.Type" /> objects representing the implemented interfaces. If none are defined, an empty array is returned. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the event with the specified name. </para>
      </summary>
      <param name="name">The name of the event to get. </param>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para>Returns an <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name. If there are no matches, then an empty array is returned. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary>
        <para>Returns the events for the public events declared or inherited by this type. </para>
      </summary>
      <returns>
        <para>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to conduct a case-sensitive search for public properties.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns all the public and non-public properties declared or inherited by this type, as specified. </para>
      </summary>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para>Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing the public and non-public properties defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public properties are returned. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the public and non-public nested types that are declared or inherited by this type. </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> , such as <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para>An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the public and non-public nested types that are declared by this type. </para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the nested type to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to conduct a case-sensitive search for public methods.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>
        <para>Returns all the public and non-public members declared or inherited by this type, as specified. </para>
      </summary>
      <param name="name">The name of the member. </param>
      <param name=" type">The type of member that is to be returned.</param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para>Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns all the public and non-public members declared or inherited by this type, as specified. </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para>Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary>
        <para> Returns an interface mapping
      for the interface requested.</para>
      </summary>
      <param name="interfaceType">The type of the interface for which the interface mapping is to be retrieved. </param>
      <returns>
        <para>The requested interface mapping.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the public and non-public events that are declared by this type. </para>
      </summary>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> , such as <see langword="InvokeMethod" />, <see langword="NonPublic" /> , and so on. </param>
      <returns>
        <para>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl">
      <summary>
        <para> Gets the implementation attribute flags.
      </para>
      </summary>
      <returns>
        <para>The implementation attribute flags.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsArrayImpl">
      <summary>
    Returns <see langword="false" />.
 </summary>
      <returns>
        <see langword="false" />
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl">
      <summary>
    Returns <see langword="false" />.
 </summary>
      <returns>
        <see langword="false" />
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsValueTypeImpl">
      <summary>
    Returns <see langword="true" />.
 </summary>
      <returns>
        <see langword="true" />
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsByRefImpl">
      <summary>
        <para>Returns <see langword="false" />.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" />
        </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsPointerImpl">
      <summary>
        <para>Returns <see langword="false" />.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" />
        </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl">
      <summary>
    Returns <see langword="false" />.
 </summary>
      <returns>
        <see langword="false" />
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary>
        <para>Calling this method always throws <see cref="T:System.NotSupportedException" /> .</para>
      </summary>
      <returns>
        <para>This method is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.HasElementTypeImpl">
      <summary>
        <para>Calling this method always throws <see cref="T:System.NotSupportedException" /> .</para>
      </summary>
      <returns>
        <para>This method is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary>
        <para>Returns all the custom attributes defined
      for this constructor.</para>
      </summary>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para> Returns an array of objects representing all the custom
      attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder" />
      instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para>Returns the custom attributes identified by
      the given type.</para>
      </summary>
      <param name="attributeType">The <see langword="Type" /> object to which the custom attributes are applied.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para>Returns an array of objects
      representing the attributes of this constructor that are of <see cref="T:System.Type" /><paramref name="attributeType" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
        <para> Sets a custom attribute using a specified custom attribute blob.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
        <para> Sets a custom attribute using a custom attribute builder.
      </para>
      </summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para>Checks if the specified custom attribute type is defined. </para>
      </summary>
      <param name="attributeType">The <see langword="Type" /> object to which the custom attributes are applied.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para>
          <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is defined on this member; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeToken">
      <summary>
        <para>
       Returns the internal metadata type token of this
       enum.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary>
        <para>
       Returns the underlying field for
       this enum.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary>
        <para>
       Returns the name of this enum.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary>
        <para> Returns the GUID of this enum.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary>
        <para> Retrieves the dynamic module that contains this <see cref="T:System.Reflection.Emit.EnumBuilder" /> definition.
   </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary>
        <para> Retrieves the dynamic assembly that contains this enum definition.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary>
        <para> Retrieves the internal handle for this enum.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary>
        <para> Returns the full path of this enum.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary>
        <para> Returns the full path of this enum
      qualified by the display name of the parent assembly.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary>
    Returns the namespace of this enum.
 </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary>
        <para>Returns the parent <see cref="T:System.Type" /> of this type which is always <see cref="T:System.Enum" /> .</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary>
        <para>Returns the underlying system type for this
      enum.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary>
        <para> Returns the type that declared this <see cref="T:System.Reflection.Emit.EnumBuilder" />.
   </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary>
        <para>Returns the type that was used to obtain this <see cref="T:System.Reflection.Emit.EnumBuilder" /> 
.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.TypeToken">
      <summary>
        <para>Represents the <see langword="Token" />
returned by the metadata to represent a type.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.TypeToken.Empty">
      <summary>
        <para> The default <see langword="TypeToken" /> with <see cref="P:System.Reflection.Emit.TypeToken.Token" />
value 0.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.GetHashCode">
      <summary>
        <para>
       Generates the hash code for this
       type.
    </para>
      </summary>
      <returns>
        <para>
       Returns the hash
       code for this type.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.Equals(System.Object)">
      <summary>
        <para> Checks if the given object is an instance of 
   <see langword="TypeToken " /> 
   and is equal to this instance.
   </para>
      </summary>
      <param name="obj">The object to compare with this TypeToken. </param>
      <returns>
        <para>
          <see langword="true " />if <paramref name="obj" /> is an instance of <see langword="TypeToken " /> and is equal
   to this object; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeToken.Token">
      <summary>
        <para>
       Retrieves the metadata token for this class.
    </para>
      </summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyHash">
      <summary>
        <para>Represents a hash of an assembly manifest's contents.</para>
      </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHash.Empty">
      <summary>
        <para>An empty <see cref="T:System.Configuration.Assemblies.AssemblyHash" /> object.</para>
      </summary>
    </member>
    <member name="M:System.Configuration.Assemblies.AssemblyHash.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Configuration.Assemblies.AssemblyHash" /> structure with the specified hash value. The
    hash algorithm defaults to <see cref="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1" />
    .</para>
      </summary>
      <param name="value">The hash value.</param>
    </member>
    <member name="M:System.Configuration.Assemblies.AssemblyHash.#ctor(System.Configuration.Assemblies.AssemblyHashAlgorithm,System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Configuration.Assemblies.AssemblyHash" /> structure with the specified
    hash algorithm and the hash value.</para>
      </summary>
      <param name="algorithm"> The algorithm used to generate the hash. Values for this parameter come from the <see cref="T:System.Configuration.Assemblies.AssemblyHashAlgorithm" /> enumeration.</param>
      <param name="value">The hash value.</param>
    </member>
    <member name="M:System.Configuration.Assemblies.AssemblyHash.GetValue">
      <summary>
        <para>Gets the hash value.</para>
      </summary>
      <returns>
        <para>The hash value.</para>
      </returns>
    </member>
    <member name="M:System.Configuration.Assemblies.AssemblyHash.SetValue(System.Byte[])">
      <summary>
        <para>
       Sets the hash value.
    </para>
      </summary>
      <param name="value">
    The hash value.
 </param>
    </member>
    <member name="M:System.Configuration.Assemblies.AssemblyHash.Clone">
      <summary>
    Clones this object.
 </summary>
      <returns>
    An exact copy of this object.
 </returns>
    </member>
    <member name="P:System.Configuration.Assemblies.AssemblyHash.Algorithm">
      <summary>
        <para> Gets or sets the hash algorithm.</para>
      </summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
      <summary>
        <para> Specifies all the hash algorithms used for hashing files
      and for generating the strong name.</para>
      </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.None">
      <summary>
        <para>A mask indicating that there is no hash algorithm. If 
      you specify <see langword="None " />for a multi-module assembly, the common
      language runtime defaults to the SHA1 algorithm, since multi-module assemblies need to generate a hash.</para>
      </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
      <summary>
        <para> Retrieves the MD5 message-digest algorithm. MD5 was developed by Rivest in 1991. It is basically MD4 with safety-belts and while it is slightly slower than MD4, it is more secure. The algorithm consists of four distinct rounds, which has a slightly different design from that of MD4. Message-digest size, as well as padding requirements, remain the same.</para>
      </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1">
      <summary>
        <para>A mask used to retrieve a revision of the Secure Hash Algorithm that corrects an unpublished flaw in SHA.</para>
      </summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyVersionCompatibility">
      <summary>
        <para> Defines the different types of assembly version
      compatibility.</para>
      </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine">
      <summary>
 The assembly cannot execute with other versions if they are executing in the same process.
 </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameProcess">
      <summary>
 The assembly cannot execute with other versions if they are executing in the same process.
 </summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameDomain">
      <summary>
 The assembly cannot execute with other versions if they executing in the same application domain.
 </summary>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>
        <para>Represents assembly binding information that can be added
      to an instance of <see cref="T:System.AppDomain" />.</para>
      </summary>
    </member>
    <member name="M:System.AppDomainSetup.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.AppDomainSetup" /> class.</para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
      <summary>
        <para>Gets or sets the name of the directory containing the
      application.</para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.ConfigurationFile">
      <summary>
        <para> Gets or sets the name of the
      configuration file for an application domain.</para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.DynamicBase">
      <summary>
        <para> Gets or sets the directory where dynamically
      generated files are stored and accessed.</para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.DisallowPublisherPolicy">
      <summary>
        <para>Gets or sets a value indicating whether the publisher policy section of the configuration file
      is applied to an application domain.</para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationName">
      <summary>
        <para>Gets or sets the name of the application.</para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.PrivateBinPath">
      <summary>
        <para> Gets or sets the list of directories that is combined
      with the <see cref="P:System.AppDomainSetup.ApplicationBase" />
      directory to
      probe for private assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.PrivateBinPathProbe">
      <summary>
        <para>      Gets or sets the private binary directory
      path used to locate an application.</para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.ShadowCopyDirectories">
      <summary>
        <para> Gets or sets the names of the
      directories containing assemblies to be shadow copied.</para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.ShadowCopyFiles">
      <summary>
        <para> Gets or sets a
      
      string that indicates whether shadow
      copying is turned on or off.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.CachePath">
      <summary>
        <para> Gets or
      sets the name of an area specific to
      the application where files are shadow copied.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.LicenseFile">
      <summary>
        <para>Gets or sets the location of the license file associated with this
      domain.</para>
      </summary>
    </member>
    <member name="P:System.AppDomainSetup.LoaderOptimization">
      <summary>
        <para>Specifies the optimization policy used to load an executable.</para>
      </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\tools\x86\managed\urt\v1.0.3705\_networkingperfcounters.ini ===
 
 [ i n f o ] 
 
 d r i v e r n a m e = . N E T   C L R   N e t w o r k i n g 
 
 s y m b o l f i l e = _ N e t w o r k i n g P e r f C o u n t e r s . h 
 
 
 
 [ l a n g u a g e s ] 
 
 0 0 9 = l a n g u a g e 0 0 9 
 
 
 
 [ o b j e c t s ] 
 
 O B J E C T _ 1 _ 0 0 9 _ N A M E = . N E T   C L R   N e t w o r k i n g 
 
 
 
 [ t e x t ] 
 
 O B J E C T _ 1 _ 0 0 9 _ N A M E = . N E T   C L R   N e t w o r k i n g 
 
 O B J E C T _ 1 _ 0 0 9 _ H E L P = H e l p   n o t   a v a i l a b l e . 
 
 
 
 D E V I C E _ C O U N T E R _ 1 _ 0 0 9 _ N A M E = C o n n e c t i o n s   E s t a b l i s h e d 
 
 D E V I C E _ C O U N T E R _ 1 _ 0 0 9 _ H E L P = T h e   c u m u l a t i v e   t o t a l   n u m b e r   o f   s o c k e t   c o n n e c t i o n s   e s t a b l i s h e d   f o r   t h i s   p r o c e s s   s i n c e   t h e   p r o c e s s   w a s   s t a r t e d . 
 
 
 
 D E V I C E _ C O U N T E R _ 2 _ 0 0 9 _ N A M E = B y t e s   R e c e i v e d 
 
 D E V I C E _ C O U N T E R _ 2 _ 0 0 9 _ H E L P = T h e   c u m u l a t i v e   t o t a l   n u m b e r   o f   b y t e s   r e c e i v e d   o v e r   a l l   o p e n   s o c k e t   c o n n e c t i o n s   s i n c e   t h e   p r o c e s s   w a s   s t a r t e d .   T h i s   n u m b e r   i n c l u d e s   d a t a   a n d   a n y   p r o t o c o l   i n f o r m a t i o n   t h a t   i s   n o t   d e f i n e d   b y   t h e   T C P / I P   p r o t o c o l . 
 
 
 
 D E V I C E _ C O U N T E R _ 3 _ 0 0 9 _ N A M E = B y t e s   S e n t 
 
 D E V I C E _ C O U N T E R _ 3 _ 0 0 9 _ H E L P = T h e   c u m u l a t i v e   t o t a l   n u m b e r   o f   b y t e s   s e n t   o v e r   a l l   o p e n   s o c k e t   c o n n e c t i o n s   s i n c e   t h e   p r o c e s s   w a s   s t a r t e d .   T h i s   n u m b e r   i n c l u d e s   d a t a   a n d   a n y   p r o t o c o l   i n f o r m a t i o n   t h a t   i s   n o t   d e f i n e d   b y   t h e   T C P / I P   p r o t o c o l . 
 
 
 
 D E V I C E _ C O U N T E R _ 4 _ 0 0 9 _ N A M E = D a t a g r a m s   R e c e i v e d 
 
 D E V I C E _ C O U N T E R _ 4 _ 0 0 9 _ H E L P = T h e   c u m u l a t i v e   t o t a l   n u m b e r   o f   d a t a g r a m   p a c k e t s   r e c e i v e d   s i n c e   t h e   p r o c e s s   w a s   s t a r t e d . 
 
 
 
 D E V I C E _ C O U N T E R _ 5 _ 0 0 9 _ N A M E = D a t a g r a m s   S e n t 
 
 D E V I C E _ C O U N T E R _ 5 _ 0 0 9 _ H E L P = T h e   c u m u l a t i v e   t o t a l   n u m b e r   o f   d a t a g r a m   p a c k e t s   s e n t   s i n c e   t h e   p r o c e s s   w a s   s t a r t e d . 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\tools\x86\managed\urt\v1.0.3705\system.xml ===
<?xml version="1.0"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>
        <para>Specifies a description for a property
      or event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DescriptionAttribute" /> class with no 
    parameters.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DescriptionAttribute" /> class with a 
    description.</para>
      </summary>
      <param name="description">The description text.</param>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>
        <para>Gets the description stored in this attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>
        <para>Gets or sets the string stored as the description.</para>
      </summary>
    </member>
    <member name="M:System.SRDescriptionAttribute.#ctor(System.String)">
      <summary>
                Constructs a new sys description.
            </summary>
      <param name="description">
                description text.
            </param>
    </member>
    <member name="P:System.SRDescriptionAttribute.Description">
      <summary>
                Retrieves the description text.
            </summary>
      <returns>
                description
            </returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>
        <para>Specifies the category in which the property or event will be displayed in a
      visual designer.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.CategoryAttribute" /> 
 class with the default category.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.CategoryAttribute" /> class with
    the specified category name.</para>
      </summary>
      <param name="category">The name of the category.</param>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>
        <para>Looks up the localized name of a given category.</para>
      </summary>
      <param name="value">The name of the category to look up.</param>
      <returns>
        <para>The localized name of the category, or <see langword="null " />if a localized name does not exist.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>
        <para>Gets the action category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>
        <para>Gets the appearance category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>
        <para>Gets the behavior category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>
        <para>Gets the data category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>
        <para>Gets the default category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>
        <para>Gets the design category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>
        <para> Gets the drag-and-drop category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>
        <para>Gets the focus category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>
        <para>Gets the format category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>
        <para>Gets the keyboard category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>
        <para>Gets the layout category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>
        <para>Gets the mouse category attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>
        <para> Gets the window style category
      attribute.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>
        <para>Gets the name of the category for the property or event 
       that this attribute is bound to.</para>
      </summary>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>
        <para> Represents an immutable regular expression.</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class with
   no parameters.</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>
        <para> Initializes and compiles an instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular
   expression.
   </para>
      </summary>
      <param name="pattern">The regular expression pattern to match. </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
        <para> Initializes and compiles an instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the
   specified regular expression,
   with options that modify the pattern.
   </para>
      </summary>
      <param name="pattern">The regular expression pattern to match. </param>
      <param name="options">A bitwise OR combination of <see langword="RegexOption" /> enumeration values. </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Finalize">
      <summary>
        <para>Forces a <see langword="Regex " />object to free resources 
   before the object is destroyed by the Garbage Collector.</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>
        <para> Escapes a minimal set of metacharacters (\, *, +, ?, |,
      {, [, (, ), ^, $, ., #, and white space) by replacing them with their escape codes.</para>
      </summary>
      <param name="str">The input string containing the text to convert. </param>
      <returns>
        <para> A string of characters with any metacharacters converted to their
      escaped form.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>
        <para> Unescapes any escaped characters in the input string.
      </para>
      </summary>
      <param name="str">The input string containing the text to convert. </param>
      <returns>
        <para> A string of characters with any escaped characters converted to their
      unescaped form.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>
        <para> Returns the regular expression pattern that was passed 
      into the <see langword="Regex " /> constructor.
      </para>
      </summary>
      <returns>
        <para> The <paramref name="pattern " />parameter that was passed into the
<see langword="Regex " /> constructor.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>
        <para>Returns an array of capturing group names for the regular
      expression.</para>
      </summary>
      <returns>
        <para> A string array of group names.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>
        <para> Returns an array of capturing group
      numbers that correspond to group names in an array.</para>
      </summary>
      <returns>
        <para> An integer array of group numbers.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>
        <para> Gets the group name that corresponds to the specified group number.
      </para>
      </summary>
      <param name="i"> The group number to convert to the corresponding group name. </param>
      <returns>
        <para> The string containing the group name associated with the specified group number.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>
        <para>Returns the group number that corresponds to the specified group name.</para>
      </summary>
      <param name="name"> The group name to convert to the corresponding group number.</param>
      <returns>
        <para> The group number that corresponds to the specified group name.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>
        <para>Indicates whether the regular expression finds a match 
      in the input string using the regular expression specified in the
   <paramref name="pattern" /> parameter.
      </para>
      </summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <returns>
        <para>
          <see langword="true " />if the regular 
   expression finds
   a match; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
        <para> Indicates whether the regular expression finds a match 
      in the input string, using the regular expression specified in the
   <paramref name="pattern" /> parameter and the matching options supplied in the 
   <paramref name="options" />
   parameter.</para>
      </summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise OR combination of <see langword="RegexOption" /> enumeration values.</param>
      <returns>
        <para>
          <see langword="true " />if the regular expression 
   finds a match; otherwise, <see langword="false " /> .</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>
        <para> Indicates whether the regular expression specified in 
      the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in the input string.</para>
      </summary>
      <param name="input">The string to search for a match.</param>
      <returns>
        <para>
          <see langword="true " />if the regular expression 
   finds a match; otherwise, <see langword="false " /> .</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>
        <para> Indicates whether the regular expression specified 
      in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in the input string
      beginning at the specified starting position in the string.</para>
      </summary>
      <param name="input">The string to search for a match.</param>
      <param name="startat">The character position at which to start the search.</param>
      <returns>
        <para>
          <see langword="true " />if the 
   regular expression finds a match; otherwise,
<see langword="false " /> .</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>
        <para> Searches the specified input string for an occurrence of
      the regular expression supplied in the <paramref name="pattern " />
      parameter.
      </para>
      </summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <returns>
        <para>A regular expression <see cref="T:System.Text.RegularExpressions.Match" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
        <para> Searches the input string for an occurrence
      of the regular expression supplied in a <paramref name="pattern " />parameter with matching options supplied in an <paramref name="options&#xD;&#xA;      " />
      
      parameter.
      </para>
      </summary>
      <param name="input">The string to be tested for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise OR combination of <see langword="RegexOption" /> enumeration values. </param>
      <returns>
        <para>A regular expression <see cref="T:System.Text.RegularExpressions.Match" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>
        <para> Searches the specified input string for an occurrence of 
      the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" />
      
      constructor. </para>
      </summary>
      <param name="input">The string to search for a match. </param>
      <returns>
        <para>A regular expression <see cref="T:System.Text.RegularExpressions.Match" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>
        <para> Searches the input
      string for an occurrence of a regular expression with a specified input string
      starting
      position.</para>
      </summary>
      <param name="input">The string to search for a match. </param>
      <param name="startat">The character position at which to start the search.</param>
      <returns>
        <para>A Regular Expression <see cref="T:System.Text.RegularExpressions.Match" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>
        <para> Searches the input string for an occurrence
      of a regular expression with a specified input string starting position and input
      string length.</para>
      </summary>
      <param name="input">The string to be tested for a match. </param>
      <param name="beginning">The character position in the input string at which to begin the search.</param>
      <param name="length">The number of characters in the substring to include in the search.</param>
      <returns>
        <para>A regular expression <see cref="T:System.Text.RegularExpressions.Match" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>
        <para> Searches the specified input string for all occurrences of the
      regular expression specified in the <paramref name="pattern " />
      parameter.
      </para>
      </summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <returns>
        <para>The <see cref="T:System.Text.RegularExpressions.MatchCollection" /> of <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
        <para> Searches the specified input string for all occurrences of
      the regular expression supplied in a <paramref name="pattern " /> parameter with
      matching options supplied in an <paramref name="options " />
      parameter.
      </para>
      </summary>
      <param name="input">The string to search for a match.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="options">A bitwise OR combination of <see langword="RegexOption" /> enumeration values. </param>
      <returns>
        <para>The <see cref="T:System.Text.RegularExpressions.MatchCollection" /> of <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>
        <para> Searches the specified input string for all occurrences of a regular expression.</para>
      </summary>
      <param name="input">The string to search for a match.</param>
      <returns>
        <para>A <see cref="T:System.Text.RegularExpressions.MatchCollection" /> of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>
        <para> Searches the specified
      input string for all occurrences of a regular expression, beginning at the specified starting position in the string.</para>
      </summary>
      <param name="input">The string to search for a match.</param>
      <param name="startat">The character position in the input string at which to start the search.</param>
      <returns>
        <para>A <see cref="T:System.Text.RegularExpressions.MatchCollection" /> of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>
        <para> Replaces all occurrences of matches defined by the regular
      expression with a replacement string, starting at
      the first character in the input string.
      </para>
      </summary>
      <param name="input">The string to modify.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="replacement">The replacement string.</param>
      <returns>
        <para>The modified character string.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
        <para>Replaces all occurrences of a pattern defined by a specified regular expression
      with a specified replacement character string, starting at the first
      character in the input string. Options can be specified to modify matching
      behavior.</para>
      </summary>
      <param name="input">The string to modify.</param>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="replacement">The replacement string.</param>
      <param name=" options">A bitwise OR combination of <see langword="RegexOption" /> enumeration values. </param>
      <returns>
        <para> The modified string.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>
        <para> Replaces all occurrences of
      a specified regular expression pattern with a replacement
      string, starting at the first character in the input string.
      </para>
      </summary>
      <param name="input">The string to modify. </param>
      <param name=" replacement">The replacement string. </param>
      <returns>
        <para> The modified character string.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>
        <para> Replaces up to a specified number of occurrences of a 
      pattern defined by the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" />
      constructor with a specified replacement string,
      starting at the first character in the input string.</para>
      </summary>
      <param name="input">String to modify. </param>
      <param name=" replacement">The replacement string. </param>
      <param name=" count">The maximum number of times the replacement can occur. </param>
      <returns>
        <para> The modified character string.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>
        <para> Replaces up to a specified number of occurrences of a
      pattern in the input string defined by the regular expression specified in the
   <see cref="T:System.Text.RegularExpressions.Regex" />
   constructor with a specified replacement string, starting at a specified
   character position in the input string.</para>
      </summary>
      <param name="input">The string to modify.</param>
      <param name="replacement">The replacement string. </param>
      <param name="count">Maximum number of times the replacement can occur.</param>
      <param name="startat">The character position in the input string where the search will begin.</param>
      <returns>
        <para>The modified character string.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>
        <para>Replaces all occurrences of a character pattern defined
      by a regular expression with a replacement character string starting at the
      first character<paramref name="." />
      A <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate is called at each match
      to evaluate the replacement.</para>
      </summary>
      <param name="input">The string to modify.</param>
      <param name="pattern">The regular expression pattern to match. </param>
      <param name="evaluator">The <see langword="MatchEvaluator" /> which evaluates replacement at each step.</param>
      <returns>
        <para>The modified character string.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>
        <para> Replaces all occurrences of a character pattern defined by
      a specified regular expression with a replacement character string starting at the
      first character<paramref name="." /> Options can be specified to modify
      matching behavior and a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate is called at each match
      to evaluate the replacement.
      </para>
      </summary>
      <param name="input">The string to modify.</param>
      <param name="pattern">The regular expression pattern to match. </param>
      <param name="evaluator">The <see langword="MatchEvaluator" /> which evaluates replacement at each step. </param>
      <param name="options">A bitwise OR combination of <see langword="RegexOption" /> enumeration values. </param>
      <returns>
        <para>The modified character string.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>
        <para> Replaces all occurrences of a character pattern defined
      by the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" />
      constructor<paramref name="." /> A <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate is
      called at each match to evaluate the replacement.
      </para>
      </summary>
      <param name="input">The string to modify. </param>
      <param name=" evaluator">The <see langword="MatchEvaluator" /> which evaluates replacement at each step. </param>
      <returns>
        <para> The modified character string.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>
        <para> Replaces up to a specified number of occurrences of a
      pattern defined by the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" />
      constructor with a replacement
      string, starting at the first character in the input string. A <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      delegate is called at each match to
      evaluate the replacement.
      </para>
      </summary>
      <param name="input">The string to be modified. </param>
      <param name=" evaluator">The <see langword="MatchEvaluator" /> which evaluates replacement at each step. </param>
      <param name=" count">The maximum number of times the replacement will occur. </param>
      <returns>
        <para> The modified character string.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>
        <para> Replaces up to a specified number of occurrences of a
      pattern specified in the <see cref="T:System.Text.RegularExpressions.Regex" />
      constructor with a replacement string,
      starting at a specified character position in the input string. A <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      delegate is called at each match to evaluate the replacement.
      </para>
      </summary>
      <param name=" input">The string to be modified. </param>
      <param name=" evaluator">The <see langword="MatchEvaluator" /> which evaluates replacement at each step. </param>
      <param name=" count">The maximum number of times the replacement will occur. </param>
      <param name="startat">The character position in the input string where the search will begin. </param>
      <returns>
        <para> The modified character string.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>
        <para> Splits the input string at the positions defined by a
 regular expression pattern.
 </para>
      </summary>
      <param name="input">The string to split. </param>
      <param name=" pattern">The regular expression to match. </param>
      <returns>
        <para> An array of strings.
 </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
        <para> Splits the input string at the positions defined by a specified
 regular expression pattern. Options can be
 specified to modify matching behavior.
 </para>
      </summary>
      <param name="input">The string to split. </param>
      <param name=" pattern">The regular expression defining to match. </param>
      <param name=" options">A bitwise OR combination of <see langword="RegexOption" /> enumeration values. </param>
      <returns>
        <para> An array of strings.
 </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>
        <para> Splits the specified input string at the positions
 defined by a regular expression pattern specified in the <see cref="T:System.Text.RegularExpressions.Regex" />
 constructor..
 </para>
      </summary>
      <param name="input">The string to split. </param>
      <returns>
        <para> An array of strings.
 </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>
        <para> Splits the specified input string a specified maximum
 number of times at the positions defined by a regular expression specified in
 the <see cref="T:System.Text.RegularExpressions.Regex" />
 constructor.
 </para>
      </summary>
      <param name="input">The string to be split. </param>
      <param name=" count">The maximum number of array elements to return. </param>
      <returns>
        <para> An array of strings.
 </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>
        <para> Splits the specified input string a specified maximum
 number of times at the positions defined by a regular expression specified in
 the <see cref="T:System.Text.RegularExpressions.Regex" />
 constructor,
 starting at a specified character position in the input string
 </para>
      </summary>
      <param name="input">The string to be split. </param>
      <param name=" count">The maximum number of array elements to return. </param>
      <param name=" startat">The character position in the input string where the search will begin. </param>
      <returns>
        <para> An array of strings.
 </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)">
      <summary>
        <para>Compiles one or more specified
   <see langword="Regex" /> objects to a named file.</para>
      </summary>
      <param name=" regexinfos">An array of <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> objects describing the regular expressions to compile.</param>
      <param name="assemblyname">The file name of the assembly.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
      <summary>
        <para>Compiles one or more specified <see langword="Regex" /> objects to a named file with specified
   attributes.</para>
      </summary>
      <param name=" regexinfos">An array of <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> objects describing the regular expressions to compile.</param>
      <param name=" assemblyname">The file name of the assembly.</param>
      <param name=" attributes">An array of <see cref="T:System.Reflection.Emit.CustomAttributeBuilder" /> objects describing the attributes of the assembly.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)">
      <summary>
        <para>Compiles one or more specified
   <see langword="Regex" /> objects
      and a specified resource file to a named assembly with specified attributes.</para>
      </summary>
      <param name=" regexinfos">An array of <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> objects describing the regular expressions to compile.</param>
      <param name=" assemblyname">The file name of the assembly.</param>
      <param name=" attributes">An array of <see cref="T:System.Reflection.Emit.CustomAttributeBuilder" />objects describing the attributes of the assembly.</param>
      <param name="resourceFile">The name of the Win32 resource file to include in the assembly.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>
        <para> Gets a value indicating whether the regular expression searches from right to
      left.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>
        <para> Returns the options passed into the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</para>
      </summary>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>
        <para> The delegate that is called each time a regular
      expression match is found during a <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)" /> operation.</para>
      </summary>
      <param name="match">The <see cref="T:System.Text.RegularExpressions.Match" />resulting from a single regular expression match during a <see langword="Replace" />.</param>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>
        <para> Represents the results from a single subexpression
      capture. <see langword="Capture " /> represents
      one substring for a single successful capture.</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>
        <para> Gets the captured
      substring from the input string.
      </para>
      </summary>
      <returns>
        <para> The actual substring that was captured by the match.
      </para>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>
        <para> The position in the original string where the first character of the
      captured substring was found.</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>
        <para> The length of the captured substring.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>
        <para>Gets the captured substring from the input string.</para>
      </summary>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>
        <para> Represents a sequence of capture substrings.
   <see langword="CaptureCollection " />
   returns the set of captures done by a single capturing group.
   </para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para> Copies all the elements of the collection to the given array
      beginning at the given index.
      </para>
      </summary>
      <param name="array">The array the collection is to be copied into. </param>
      <param name="arrayIndex">The position in the destination array where copying is to begin. </param>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>
        <para> Provides an enumerator in the same order as Item[i].
      </para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Collections.IEnumerator" /> object that contains all <see langword="Capture " />objects within the <see langword="CaptureCollection" />.</para>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the collection.</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the collection is synchronized
 (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>
        <para>Gets a value that indicates whether the collection is read only.</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>
        <para> Gets the number of substrings captured by the group.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>
        <para> Gets an individual member of the collection.
 </para>
      </summary>
      <param name="i">Index into the capture collection. </param>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexCompilationInfo">
      <summary>
        <para> Provides information that the compiler uses to
      compile a regular expression to a stand-alone assembly.
      </para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)">
      <summary>
        <para> Creates a <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> object containing the
   information the compiler needs to create the assembly.
   </para>
      </summary>
      <param name="pattern">The regular expression to compile.</param>
      <param name="options">The compiler options to use when compiling the regular expression.</param>
      <param name="name">The name of the type to use for the compiled regular expression.</param>
      <param name="fullnamespace">The namespace to add to the new type to. </param>
      <param name="ispublic">
        <see langword="true" /> to make the compiled regular expression publicly visible; otherwise, <see langword="false" /> .</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern">
      <summary>
        <para> Gets or sets the regular expression to compile.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Options">
      <summary>
        <para> Gets or sets the compiler options to
      use when compiling the regular expression.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Name">
      <summary>
        <para> Gets or sets the name of the type to
      use for the compiled regular expression.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace">
      <summary>
        <para> Gets or sets the namespace
      to add the new type to.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic">
      <summary>
        <para> Gets or sets a
      value indicating whether the compiled regular expression has public
      visibility.
      </para>
      </summary>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>
        <para>
          <see langword="Group " />represents the results from a
   single capturing group. A capturing group can capture zero, one, or more strings
   in a single match because of quantifiers, so <see langword="Group " />supplies a
   collection of <see cref="T:System.Text.RegularExpressions.Capture" />
   
   objects.</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>
        <para>Returns a <see langword="Group " />
object equivalent to the one supplied that is safe to share between
multiple threads.</para>
      </summary>
      <param name="inner">The input <see langword="Group" /> object.</param>
      <returns>
        <para>A regular expression <see langword="Group " /> object.</para>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>
        <para>Gets a value indicating whether the match is successful.</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>
        <para>Gets a collection of all the captures matched by the
      capturing group, in innermost-leftmost-first order (or innermost-rightmost-first
      order if the regular expression is modified with the <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" qualify="true" />
      option). The collection may have zero or more items.</para>
      </summary>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>
        <para> Represents a collection of captured groups. 
   <see langword="GroupCollection" /> 
   returns the set of captured groups in a single match.
   </para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>
       Copies all the elements of the collection to the given array
       beginning at the given index.
    </para>
      </summary>
      <param name="array">
    The array the collection is to be copied into.
 </param>
      <param name="arrayIndex">
    The position in the destination array where the copying is to begin.
 </param>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>
        <para> Returns an enumerator that can iterate through the
      Collection.
      </para>
      </summary>
      <returns>
        <para>An IEnumerator object that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the <see cref="T:System.Text.RegularExpressions.GroupCollection" /> .</para>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to
      the <see langword="GroupCollection" /> .</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the 
   <see langword="GroupCollection " />is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the collection is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>
        <para> Returns the number of groups in the collection.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>
        <para>Enables access to a member of the collection
      by integer index.</para>
      </summary>
      <param name="groupnum">Key of the collection member to be retrieved.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>
        <para>Enables access to a member of the collection
      by string index.</para>
      </summary>
      <param name="groupname">Key of the collection member to be retrieved. </param>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>
        <para> Represents
      the results from a single regular expression match.
      </para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>
        <para>Returns a new <see langword="Match " /> with the results for the next match, starting
   at the position at which the last match ended (at the character beyond the last
   matched character).</para>
      </summary>
      <returns>
        <para>The next regular expression <see langword="Match " /> object.</para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>
        <para> Returns the expansion of the passed replacement pattern.
 For example, if the replacement pattern is $1$2, <see langword="Result " />returns the concatenation of
 <see langword="Groups[1].Value and Groups[2].Value" />
 (<see langword="Groups(1).Value and Groups(2).Value " />in Visual
 Basic).
 </para>
      </summary>
      <param name="replacement">The replacement pattern to be used by the function. </param>
      <returns>
        <para> The expanded version of <paramref name="replacement" /> .
 </para>
      </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>
        <para> Returns a <see langword="Match " /> instance equivalent to the one supplied that is safe to share
   between multiple threads.
   </para>
      </summary>
      <param name="inner">A <see langword="Match" /> instance equivalent to the one expected. </param>
      <returns>
        <para> A <see langword="Match " /> instance equivalent to the one supplied that is safe to share
   between multiple threads.
   </para>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>
        <para> Gets the empty group. All failed matches
      return this empty match.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>
        <para>Gets a collection of groups matched by the regular expression.</para>
      </summary>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>
        <para> Represents the set of successful matches found by iteratively applying a regular expression
      pattern to the input string.
      </para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>
       Copies all the elements of the collection to the given array
       starting at the given index.
    </para>
      </summary>
      <param name="array">
    The array the collection is to be copied into.
 </param>
      <param name="arrayIndex">
    The position in the array where copying is to begin.
 </param>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>
        <para> Provides an enumerator in the same order as Item[i].
      </para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> object that contains all <see langword="Match " />objects within the <see langword="MatchCollection" />.</para>
      </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>
        <para> Gets the number of captures.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the collection.</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the collection
 is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>
        <para>Gets a value that indicates whether the collection is read only.</para>
      </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>
        <para> Gets an individual member of the collection.
 </para>
      </summary>
      <param name="i">Index into the Match collection. </param>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>
        <para> Provides enumerated values to use to
      set regular expression options.</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>
        <para>Specifies that no options are set.</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>
        <para> Specifies case-insensitive matching.</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>
        <para> Multiline mode. Changes the meaning of ^ and $ so
      they match at the beginning and end, respectively, of any line, and not just
      the beginning and end of the entire string.</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>
        <para> Specifies that the only valid captures are
      explicitly named or numbered groups of the form (?&lt;name&gt;…). This allows unnamed parentheses
      to act as noncapturing groups without the syntactic clumsiness of the expression (?:…).</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>
        <para> Specifies that the regular expression is
      compiled to an assembly. This yields faster execution but increases startup time.</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>
        <para> Specifies single-line mode. Changes the meaning of the
      dot (.) so it matches every character (instead of every character except \n).</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>
        <para>Eliminates unescaped white space from the pattern and enables comments
      marked with #.</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>
        <para>Specifies that the search will be from right to left
      instead of from left to right.</para>
      </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>
        <para>
 Enables ECMAScript-compliant behavior for the expression.
					This flag can be 
 used only in conjunction with the <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />, <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" />, and <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> flags.
					The use of this flag with any other flags results in an
exception.
			</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>
        <para>Represents a reference to an argument.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>
        <para>Represents a code expression. This is a base class for
      other code expression objects that is never instantiated.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>
        <para>Provides a common base class for most Code Document Object
 Model (CodeDOM) objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeObject" /> class.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>
        <para> Gets or sets the user-definable data for the current object.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> class using the specified parameter name.</para>
      </summary>
      <param name="parameterName">The name of the parameter the argument is referencing.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>
        <para>Gets or sets the name of the parameter that the expression references.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>
        <para> Represents an expression that creates an array.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 
class using the specified array data
type and initialization expressions.</para>
      </summary>
      <param name="createType">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the data type of the array to create.</param>
      <param name=" initializers"> An array of expressions to use to initialize the array.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> class using the specified array data type
   name and initializers.</para>
      </summary>
      <param name="createType">The name of the data type of the array to create.</param>
      <param name=" initializers">An array of expressions to use to initialize the array.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> class using the specified array data type and initializers.</para>
      </summary>
      <param name="createType">The data type of the array to create.</param>
      <param name=" initializers">An array of expressions to use to initialize the array.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> class using the 
   specified array data type and number of indices
   for the array.</para>
      </summary>
      <param name="createType">A <see cref="T:System.CodeDom.CodeTypeReference" /> indicating the data type of the array to create.</param>
      <param name=" size">The number of indices of the array to create.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> class using the 
   specified array data type name
   and number of indices for the array.</para>
      </summary>
      <param name="createType">The name of the data type of the array to create.</param>
      <param name=" size">The number of indices of the array to create.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> class using the 
   specified array data type and number of indicies for the array.</para>
      </summary>
      <param name="createType">The data type of the array to create.</param>
      <param name=" size">The number of indices of the array to create.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> class using the 
   specified array data type and
   code expression indicating the number of indices
   for the array.</para>
      </summary>
      <param name="createType">A <see cref="T:System.CodeDom.CodeTypeReference" /> indicating the data type of the array to create.</param>
      <param name="size">An expression that indicates the number of indices of the array to create.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> class using 
   the specified array data type name and code expression indicating the number of indices for
   the array.</para>
      </summary>
      <param name="createType">The name of the data type of the array to create.</param>
      <param name=" size">An expression that indicates the number of indices of the array to create.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> class using the specified 
   array data type and code expression indicating the number of indices for the
   array.</para>
      </summary>
      <param name="createType">The data type of the array to create.</param>
      <param name=" size">An expression that indicates the number of indices of the array to create.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>
        <para> 
       Gets or sets the type of array to create.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>
        <para> 
      Gets the initializers with which to initialize the array.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>
        <para> Gets or sets the number of indices in the array.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>
        <para>Gets or sets the expression that indicates the size of the array.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>
        <para>Represents an expression that indicates an array and a specific index or indices.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>
    Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> class.
 </summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> class using the specified target object and 
    indices.</para>
      </summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the array the indexer targets.</param>
      <param name=" indices">The index or indices of the indexer expression. </param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>
        <para>Gets or sets the target object of this array indexer.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>
        <para>Gets or sets the index or indices of the indexer expression.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>
        <para>Represents a simple assignment statement.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>
        <para>Represents a statement. This is a base class for other 
      code statement objects that is never instantiated.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>
        <para> Gets or sets the line the statement occurs on.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAssignStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAssignStatement" /> class that represents the
   specified assignment expressions.</para>
      </summary>
      <param name="left">The variable to assign to.</param>
      <param name=" right">The value to assign.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>
        <para> Gets or
      sets the expression to be assigned to.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>
        <para> Gets or
      sets the expression to assign.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>
        <para>Represents a statement that attaches an event handler.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttachEventStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttachEventStatement" /> class using the specified event reference and listener.</para>
      </summary>
      <param name=" eventRef">A <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> that indicates the event to attach a handler to.</param>
      <param name=" listener">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the new listener.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttachEventStatement" /> class using the 
   specified object containing the event, event name, and listener.</para>
      </summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the object that contains the event.</param>
      <param name=" eventName">The name of the event to attach a handler to.</param>
      <param name=" listener">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the new listener.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>
        <para> Gets or sets the event to attach a listener to.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>
        <para>Gets or sets the new listener to attach to the event.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>
        <para> Represents an argument used in a metadata custom attribute declaration.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgument" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgument" /> class using the specified value.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeExpression" /> that represents the value of the argument.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgument" /> class using the specified name and
   value.</para>
      </summary>
      <param name="name">The name of the attribute property the argument applies to.</param>
      <param name=" value">A <see cref="T:System.CodeDom.CodeExpression" /> that represents the value of the argument.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>
        <para>Gets or sets the name of the attribute.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>
        <para>Gets or sets the value for the attribute argument.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.CodeDom.CodeAttributeArgument" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> class containing the 
    elements of the specified source collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> class 
    containing the specified array of <see cref="T:System.CodeDom.CodeAttributeArgument" /> objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeAttributeArgument" /> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.CodeAttributeArgument" /> 
 to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeArgument" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>
        <para>Copies the elements of the specified <see cref="T:System.CodeDom.CodeAttributeArgument" /> array to the end of the 
    collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeAttributeArgument" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>
        <para>Adds the contents of another <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>
        <para> Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeAttributeArgument" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeAttributeArgument" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the collection contains the specified object; 
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>
        <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array" /> instance 
    beginning at the specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name=" index">The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>
        <para>Gets the index in the collection of the specified 
    <see cref="T:System.CodeDom.CodeAttributeArgument" />, if it exists in the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeArgument" /> to locate in the collection.</param>
      <returns>
        <para>The index in the collection of the specified object, if found; otherwise, 
       -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>
        <para>Inserts the specified <see cref="T:System.CodeDom.CodeAttributeArgument" /> into the collection 
    at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the specified object should be inserted. </param>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeArgument" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>
        <para> Removes the specified <see cref="T:System.CodeDom.CodeAttributeArgument" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeArgument" /> to remove from the collection.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>
        <para> Gets or sets the <see cref="T:System.CodeDom.CodeAttributeArgument" /> at the specified
   index in the
   collection.</para>
      </summary>
      <param name="index">The index of the collection to access.</param>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>
        <para> Represents an attribute declaration.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> class using the specified name.</para>
      </summary>
      <param name="name">The name of the attribute.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> class using the specified name and
    arguments.</para>
      </summary>
      <param name=" name">The name of the attribute.</param>
      <param name="arguments">The arguments for the attribute.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>
        <para> Gets or sets the name of the attribute being declared.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>
        <para> Gets the arguments for the attribute.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>
        <para> Represents a collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> class containing the 
    elements of the specified source collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> class using the 
    specified array of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>
        <para>Adds a <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> with the specified 
    value to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>
        <para>Copies the elements of the specified <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> array to the end of the collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>
        <para>Adds the contents of another <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>
        <para>Gets or sets a value indicating whether the collection 
       contains the specified <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
    collection contains the specified object;
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>
        <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array" /> instance beginning at the 
    specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name="index">The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>
        <para>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeAttributeDeclaration" />, if it exists in the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> to locate in the collection.</param>
      <returns>
        <para>The index in the collection of the specified object, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>
        <para>Inserts the specified <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> into the collection 
    at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>
        <para> Removes the specified <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> from the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> to remove from the collection.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>
        <para> Indicates the <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> at the specified index.</para>
      </summary>
      <param name="index">The index of the collection to access.</param>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>
        <para>Represents a reference to the base
      class.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>
        <para>Represents an expression that consists of a binary operation between two expressions.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> class 
    using the specified
    parameters.</para>
      </summary>
      <param name="left"> The <see cref="T:System.CodeDom.CodeExpression" /> on the left of the operator.</param>
      <param name=" op">The operator.</param>
      <param name=" right"> The <see cref="T:System.CodeDom.CodeExpression" /> on the right of the operator.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>
        <para> 
       Gets or
       sets the code expression on the right of the operator.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>
        <para> Gets or sets
       the code expression on the left of the operator.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>
        <para> Gets or sets
       the operator in the binary operator expression.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>
        <para> Specifies identifiers for supported binary operators.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>
        <para> Addition operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>
        <para> Subtraction operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>
        <para> Multiplication operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>
        <para> Division operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>
        <para> Modulus operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>
        <para> Assignment operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>
        <para> Identity not equal operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>
        <para> Identity equal operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>
        <para> Value equal operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>
        <para> Bitwise or operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>
        <para> Bitwise and operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>
        <para> Boolean or operator. This represents a short circuiting 
      operator. A short circuiting operator will evaluate only as many
      expressions as necessary before returning a correct value.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>
        <para> Boolean and operator. This represents a short circuiting 
      operator. A short circuiting operator will evaluate only as many
      expressions as necessary before returning a correct value.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>
        <para> Less than operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>
        <para> Less than or equal operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>
        <para> Greater than operator.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>
        <para> Greater than or equal operator.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>
        <para>Represents an expression that is to be cast to a data
      type or interface.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCastExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCastExpression" /> class using the specified cast destination type and
   expression.</para>
      </summary>
      <param name="targetType">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the destination type of the cast.</param>
      <param name=" expression">The <see cref="T:System.CodeDom.CodeExpression" /> to cast.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCastExpression" /> class using the specified cast destination type
   and expression.</para>
      </summary>
      <param name="targetType">The name of the destination type of the cast.</param>
      <param name=" expression">The <see cref="T:System.CodeDom.CodeExpression" /> to cast.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCastExpression" /> class using the specified cast destination type
   and expression.</para>
      </summary>
      <param name="targetType">The destination data type of the cast.</param>
      <param name=" expression">The <see cref="T:System.CodeDom.CodeExpression" /> to cast.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>
        <para>Gets or sets the destination type of the cast.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>
        <para> Gets or sets the expression to cast.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>
        <para>Represents a catch exception block.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClause" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClause" /> class using the specified local variable name for the
   exception.</para>
      </summary>
      <param name="localName">The name of the local variable declared in the catch clause for the exception. This is optional.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClause" /> class using the specified local 
   variable name for the exception and exception
   type.</para>
      </summary>
      <param name="localName">The name of the local variable declared in the catch clause for the exception. This is optional.</param>
      <param name=" catchExceptionType">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type of exception to catch.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClause" /> class using the specified local variable name for the
   exception, exception type and statement collection.</para>
      </summary>
      <param name="localName">The name of the local variable declared in the catch clause for the exception. This is optional.</param>
      <param name=" catchExceptionType">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type of exception to catch.</param>
      <param name=" statements">An array of <see cref="T:System.CodeDom.CodeStatement" /> objects that represent the contents of the catch block.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>
        <para> Gets or sets the variable name of the
      exception that the catch clause handles.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>
        <para>Gets or sets the exception type to test for.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>
        <para> Gets the statements within the clause.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.CodeDom.CodeCatchClause" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> class 
    containing the elements of the specified source collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> class 
    containing the specified array of <see cref="T:System.CodeDom.CodeCatchClause" /> objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeCatchClause" /> objects with which to intialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.CodeCatchClause" /> to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCatchClause" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>
        <para>Copies the elements of the specified <see cref="T:System.CodeDom.CodeCatchClause" /> 
 array to the end of the collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeCatchClause" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>
        <para>Adds the contents of another <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>
        <para> Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeCatchClause" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCatchClause" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.CodeDom.CodeCatchClause" /> is contained in the collection; 
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>
        <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array" /> instance beginning at the 
    specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name="index">The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>
        <para>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeCatchClause" />, if it exists in the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCatchClause" /> to locate in the collection.</param>
      <returns>
        <para>The index in the collection of the specified object, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>
        <para>Inserts the specified <see cref="T:System.CodeDom.CodeCatchClause" /> into the collection at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.CodeCatchClause" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>
        <para> Removes the specified <see cref="T:System.CodeDom.CodeCatchClause" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCatchClause" /> to remove from the collection.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>
        <para> Gets or sets the <see cref="T:System.CodeDom.CodeCatchClause" /> at the specified index in the collection.</para>
      </summary>
      <param name="index">The index of the collection to access.</param>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>
        <para> Represents a comment.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeComment" /> 
 class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeComment" /> class with the specified text as
   contents.</para>
      </summary>
      <param name="text">The contents of the comment.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeComment" /> class using the specified text
 and documentation comment flag.</para>
      </summary>
      <param name="text">The contents of the comment.</param>
      <param name=" docComment">
        <see langword="true" /> if the comment is a documentation comment; otherwise, <see langword="false" />. </param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>
        <para>Gets or sets a value that indicates whether the comment is a documentation comment.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>
        <para> Gets or sets
      the text of the comment.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>
        <para> Represents a statement consisting of a single comment.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatement" /> class using the specified 
    comment.</para>
      </summary>
      <param name="comment">A <see cref="T:System.CodeDom.CodeComment" /> that indicates the comment.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatement" /> class using the specified text as
    contents.</para>
      </summary>
      <param name="text">The contents of the comment.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatement" /> class using the specified text 
    and documentation comment flag.</para>
      </summary>
      <param name="text">The contents of the comment.</param>
      <param name=" docComment">
        <see langword="true" /> if the comment is a documentation comment; otherwise, <see langword="false" /> .</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>
        <para>Gets or sets the contents of the comment.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.CodeDom.CodeCommentStatement" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> class using the 
    elements of the specified source collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> class containing 
    the specified array of <see cref="T:System.CodeDom.CodeCommentStatement" /> objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeCommentStatement" /> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.CodeCommentStatement" /> 
 to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCommentStatement" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>
        <para>Adds the elements of the specified <see cref="T:System.CodeDom.CodeCommentStatement" /> array to the end of the collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeCommentStatement" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>
        <para>Adds the contents of the specified <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>
        <para>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeCommentStatement" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCommentStatement" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.CodeDom.CodeCommentStatement" /> is contained in the collection; 
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>
        <para>Copies the collection objects to the specified one-dimensional <see cref="T:System.Array" /> beginning at the 
    specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name="index">The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>
        <para>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeCommentStatement" />, if it exists in the
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCommentStatement" /> to locate.</param>
      <returns>
        <para>The index of the specified <see cref="T:System.CodeDom.CodeCommentStatement" /> in the collection if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>
        <para>Inserts a <see cref="T:System.CodeDom.CodeCommentStatement" /> into the collection 
    at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the item should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.CodeCommentStatement" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>
        <para> Removes the specified <see cref="T:System.CodeDom.CodeCommentStatement" /> from the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeCommentStatement" /> to remove from the collection.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the <see cref="T:System.CodeDom.CodeCommentStatement" /> at the specified
   index in the collection.</para>
      </summary>
      <param name="index">
        <para> The index of the collection to access.</para>
      </param>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>
        <para> Provides a top-level object to use for compilation.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeCompileUnit" /> class.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>
        <para> Gets the collection of namespaces.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>
        <para> Gets the referenced assemblies.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>
        <para> Gets a collection of custom attributes for the
      collection of assemblies.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>
        <para>Represents a conditional branch statement, typically 
      represented as an <see langword="if" /> statement.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeConditionStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeConditionStatement" /> class using the specified condition and 
    statements.</para>
      </summary>
      <param name="condition">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the condition to test for.</param>
      <param name=" trueStatements">An array of type <see cref="T:System.CodeDom.CodeStatement" /> containing the statements to execute if the condition is <see langword="true" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeConditionStatement" /> class using the specified condition
    and statements.</para>
      </summary>
      <param name="condition">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the condition to test for.</param>
      <param name=" trueStatements">An array of type <see cref="T:System.CodeDom.CodeStatement" /> containing the statements to execute if the condition is <see langword="true" />.</param>
      <param name=" falseStatements">An array of type <see cref="T:System.CodeDom.CodeStatement" /> containing the statements to execute if the condition is <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>
        <para> Gets or sets the conditional expression to 
      test.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>
        <para> Gets the collection of statements
      to execute if the conditional expression evaluates to <see langword="true" />.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>
        <para> Gets the collection of
      statements to execute
      if the conditional expression evaluates to <see langword="false" />
      .</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>
        <para>Represents the declaration of an instance constructor for a 
      type.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>
        <para>Represents a declaration for a method of a class.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>
        <para>Represents the declaration for a member of a 
      type. Type members include fields, methods, properties, constructors and nested types.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>
        <para> Gets or sets
       the name of the member.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>
        <para> Gets or sets
      the attributes of the member.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>
        <para> Gets or
      sets the custom attributes of the
      member.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>
        <para>Gets or sets the line the statement occurs on.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>
        <para> Gets the comment collection for the type member.</para>
      </summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>
        <para> An event that will be raised the first time 
      the <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> collection is accessed.
      </para>
      </summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>
        <para> An event that will be raised the first time
      the <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> collection is accessed.
      </para>
      </summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>
        <para> An event that will be raised the first time the <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> collection is accessed.
   </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>
        <para> Gets or sets the data type of the return value of the method.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>
        <para> Gets the statements within the method.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>
        <para> Gets the parameter declarations for the method.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>
        <para> Gets or sets the data type of the interface this method, if private, implements a method of, if any.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>
        <para>Gets the data types of the interfaces implemented by this
      method, unless it is a private method implementation, which is indicated by
      the <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" /> property.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>
        <para> Gets the custom attributes of the return type of the method.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeConstructor" /> class.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>
        <para> Gets the collection of base constructor arguments.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>
        <para> Gets the collection of chained constructor arguments.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>
        <para>Represents an expression that creates a delegate.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> class.</para>
      </summary>
      <param name="delegateType">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the data type of the delegate.</param>
      <param name=" targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the target object.</param>
      <param name=" methodName">The name of the method.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>
        <para> Gets or sets the data type of the delegate.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>
        <para> Gets or sets the target object.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>
        <para> Gets or sets the method name.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>
        <para>Represents an
       expression that invokes a delegate.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> class using the 
    specified target object.</para>
      </summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the target object.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> class using the 
    specified target object and parameters.</para>
      </summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the target object.</param>
      <param name=" parameters"> An array of <see cref="T:System.CodeDom.CodeExpression" /> objects that indicate the parameters.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>
        <para> Gets or sets the target object
       of the delegate.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>
        <para> Gets or sets the parameters for the delegate.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>
        <para> Represents an expression that indicates the 
       direction type of the reference. </para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDirectionExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeDirectionExpression" /> class using the specified field direction and 
    expression.</para>
      </summary>
      <param name="direction">A <see cref="T:System.CodeDom.FieldDirection" /> that indicates the field direction of the expression.</param>
      <param name=" expression">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the code expression to represent.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>
        <para> Gets or sets the code expression to represent.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>
        <para>Gets or sets the field direction for this direction expression.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>
        <para> Represents the entry point of an executable.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeEntryPointMethod" /> class.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>
        <para>Represents an expression that references an event.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> class using the specified target object and 
    event name.</para>
      </summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the target object of the reference.</param>
      <param name=" eventName">The name of the event to reference.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>
        <para> Gets or sets the object that contains the event.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>
        <para>Gets or sets the name of the event.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.CodeDom.CodeExpression" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionCollection" /> class containing the 
    elements of the specified source collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeExpressionCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionCollection" /> class containing the specified array of <see cref="T:System.CodeDom.CodeExpression" /> objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeExpression" /> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.CodeExpression" /> to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>
        <para>Copies the elements of the specified array to the 
       end of the collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeExpression" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>
        <para>Adds the contents of another <see cref="T:System.CodeDom.CodeExpressionCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeExpressionCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>
        <para>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeExpression" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
    collection contains the specified object;
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>
        <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array" /> instance beginning at the 
    specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name="index">The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>
        <para>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeExpression" />, if it exists in the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression" /> to locate in the collection.</param>
      <returns>
        <para>The index in the collection of the specified object, if found; otherwise, 
       -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>
        <para>Inserts the specified <see cref="T:System.CodeDom.CodeExpression" /> into the collection at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.CodeExpression" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>
        <para> Removes the specified <see cref="T:System.CodeDom.CodeExpression" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression" /> to remove from the collection.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the <see cref="T:System.CodeDom.CodeExpression" /> at the specified index in the collection.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the collection to access.</para>
      </param>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>
        <para> Represents a statement that consists of a single expression.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeExpressionStatement" /> class using the specified expression.</para>
      </summary>
      <param name="expression">A <see cref="T:System.CodeDom.CodeExpression" /> for the statement.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>
        <para>Gets or sets the expression for the statement.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>
        <para>Represents a reference to a field.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> class using the 
    specified target object and field name.</para>
      </summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the target object.</param>
      <param name=" fieldName">The name of the field.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>
        <para> Gets or sets
       the target object.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>
        <para>Gets or sets the name of the
       field to reference.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>
        <para>Represents a <see langword="goto" /> statement.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeGotoStatement" /> class using the specified
   label.</para>
      </summary>
      <param name="label">The name of the label at which to continue program execution.</param>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>
        <para>Gets or sets the label to continue program execution at.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>
        <para>Represents a reference to an indexer property of an object.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeIndexerExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeIndexerExpression" /> class using the specified target
    object and index.</para>
      </summary>
      <param name="targetObject">The target object.</param>
      <param name=" indices">The index or indices of the indexer expression.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>
        <para> Gets or sets the target object that can be indexed.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>
        <para> Gets the collection of indices of the indexer expression.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>
        <para>Represents a for statement, or a simple 
      loop through a block of statements, using a test expression as a
      condition for continuing to loop.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class using the
 specified parameters.</para>
      </summary>
      <param name="initStatement">A <see cref="T:System.CodeDom.CodeStatement" /> containing the loop initialization statement.</param>
      <param name="testExpression">A <see cref="T:System.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</param>
      <param name="incrementStatement">A <see cref="T:System.CodeDom.CodeStatement" /> containing the per-cycle increment statement.</param>
      <param name="statements">An array of type <see cref="T:System.CodeDom.CodeStatement" /> containing the statements within the loop.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>
        <para> Gets or sets
       the loop initialization statement.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>
        <para> Gets or sets the expression to test as the
      condition that continues the loop.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>
        <para> Gets or sets the statement that
       is called after each loop cycle.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>
        <para> Gets the collection
      of statements to be executed within the loop.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>
        <para>Represents a labeled statement or a stand-alone label.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLabeledStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLabeledStatement" /> class using the specified 
    label.</para>
      </summary>
      <param name="label">The label for the statement.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLabeledStatement" /> class using the specified 
    label and statement.</para>
      </summary>
      <param name="label">The label for the statement.</param>
      <param name=" statement">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the statement.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>
        <para>Gets or sets the label for the statement.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>
        <para>Gets or sets the statement.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>
        <para> Represents a specific location within a specific file.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeLinePragma" /> class.</para>
      </summary>
      <param name="fileName">The file name of the associated file.</param>
      <param name=" lineNumber">The line number to store a reference to.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>
        <para> Gets or sets
       the name of
       the associated file.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>
        <para> Gets or sets the line number of
       the associated reference.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>
        <para>Represents an event member of a class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberEvent" /> class.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>
        <para> Gets or sets the data type of the member field.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>
        <para> Gets or sets the privately implemented data type, if
       any.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>
        <para> Gets or sets the data type that the member event
       implements.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>
        <para> Represents a field class member declaration.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberField" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberField" /> class using the specified field member type and field
   name.</para>
      </summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type of the field member.</param>
      <param name="name">The name of the field member.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberField" /> class using the specified field
   member type and field name.</para>
      </summary>
      <param name="type">The data type of the field member.</param>
      <param name=" name">The name of the field member.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMemberField" /> class using the specified
   field member type and field name.</para>
      </summary>
      <param name="type">The data type of the field member.</param>
      <param name=" name">The name of the field member.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>
        <para> Gets or sets the data type of the field member.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>
        <para> Gets or sets the initialization expression for the field member.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>
        <para>Represents a declaration for a property of a class.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>
        <para>Gets or sets the data type of the interface, if any, this property, if private, implements.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>
        <para> Gets the data types of any interfaces that the property implements.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>
        <para>Gets or sets the data type of the property.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>
        <para> 
       Gets or sets a value indicating whether the property has
       a <see langword="get" />
       method accessor.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>
        <para> 
       Gets or sets a value indicating whether the property has
       a <see langword="set" />
       method accessor.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>
        <para> Gets the collection of <see langword="get" /> statements for the
   property.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>
        <para> Gets the collection of <see langword="set" /> statements for the property.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>
        <para> Gets the collection of declaration expressions
      for
      the property.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>
        <para> 
       Represents an expression that invokes a method.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> class using the specified method
    and parameters.</para>
      </summary>
      <param name=" method">A <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> that indicates the method to invoke.</param>
      <param name=" parameters">An array of <see cref="T:System.CodeDom.CodeExpression" /> objects that indicate the parameters with which to invoke the method.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> class using the 
    specified target object, method name, and parameters.</para>
      </summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the target object with the method to invoke.</param>
      <param name=" methodName">The name of the method to invoke.</param>
      <param name=" parameters">An array of <see cref="T:System.CodeDom.CodeExpression" /> objects that indicate the parameters to call the method with. </param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>
        <para> Gets or sets the method to invoke.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>
        <para> Gets
      the parameters to invoke the method with.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>
        <para> Represents an expression that references a method on a specific object.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> class using the specified
    target object and method name.</para>
      </summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the object to target.</param>
      <param name=" methodName">The name of the method to call.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>
        <para> Gets or sets the target object.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>
        <para> Gets or sets the name of the method to invoke.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>
        <para>Represents a return statement.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> class using the specified expression.</para>
      </summary>
      <param name="expression">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the return statement.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>
        <para> Gets or sets the return statement.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>
        <para>Represents a
      namespace declaration.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespace" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespace" /> class using the specified name.</para>
      </summary>
      <param name="name">The name of the namespace being declared.</param>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>
        <para> An event that will be raised the first time 
      the <see cref="P:System.CodeDom.CodeNamespace.Comments" /> collection is accessed.
      </para>
      </summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>
        <para> An event that will be raised the first time 
      the <see cref="P:System.CodeDom.CodeNamespace.Imports" /> collection is accessed.
      </para>
      </summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>
        <para> An event that will be raised the first time 
      the <see cref="P:System.CodeDom.CodeNamespace.Types" /> collection is accessed.
      </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>
        <para>Gets the collection of types that the represented namespace contains.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>
        <para> Gets or sets the collection of namespace import directives used by the represented namespace.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>
        <para> Gets or sets the name of the namespace.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>
        <para> Gets or sets the member comment collection members.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.CodeDom.CodeNamespace" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 
 class containing the elements of the specified source collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespaceCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceCollection" /> class containing the specified array of <see cref="T:System.CodeDom.CodeNamespace" /> objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeNamespace" /> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.CodeNamespace" /> to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespace" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>
        <para>Copies the elements of the specified <see cref="T:System.CodeDom.CodeNamespace" /> array to the end 
    of the collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeNamespace" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>
        <para>Adds the contents of the specified <see cref="T:System.CodeDom.CodeNamespaceCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeNamespaceCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>
        <para>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeNamespace" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespace" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.CodeDom.CodeNamespace" /> is contained in the collection; 
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>
        <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array" /> instance beginning at the 
    specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name="index">The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>
        <para>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeNamespace" />, if it exists in the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespace" /> to locate.</param>
      <returns>
        <para>The index of the specified <see cref="T:System.CodeDom.CodeNamespace" /> in the collection if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>
        <para>Inserts the specified <see cref="T:System.CodeDom.CodeNamespace" /> into the collection at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the new item should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.CodeNamespace" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>
        <para> Removes the specified <see cref="T:System.CodeDom.CodeNamespace" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespace" /> to remove from the collection.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>
        <para> Gets or sets the <see cref="T:System.CodeDom.CodeNamespaceCollection" /> at the specified
   index in the collection.</para>
      </summary>
      <param name="index">The index of the collection to access.</param>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>
        <para>Represents a namespace import directive that indicates a namespace to use.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceImport" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeNamespaceImport" /> class using the specified namespace
    to import.</para>
      </summary>
      <param name="nameSpace">The name of the namespace to import.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>
        <para>Gets or sets the line and file the statement occurs on.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>
        <para> Gets or sets the namespace to import.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>
        <para>
       Represents a collection of <see cref="T:System.CodeDom.CodeNamespaceImport" /> objects.
    </para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>
        <para>Adds a <see cref="T:System.CodeDom.CodeNamespaceImport" /> to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeNamespaceImport" /> to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>
        <para>
       Adds a set of <see cref="T:System.CodeDom.CodeNamespaceImport" /> objects to the collection.
    </para>
      </summary>
      <param name="value">
    An array of type <see cref="T:System.CodeDom.CodeNamespaceImport" /> objects to add to the collection.
 </param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>
        <para>
       Clears the collection of members.
    </para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>
        <para>
       Gets an enumerator that enumerates the collection members.
    </para>
      </summary>
      <returns>
        <para>
       An <see cref="T:System.Collections.IEnumerator" /> that indicates the collection members.
    </para>
      </returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the <see cref="T:System.CodeDom.CodeNamespaceImport" /> at the specified 
    index in the collection.</para>
      </summary>
      <param name="index">The index of the collection to access.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>
        <para> Gets the number of namespaces in the collection.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>
        <para>Represents an expression that creates a new instance of an object.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> class using the specified type and
    parameters.</para>
      </summary>
      <param name="createType">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the data type of the object to create.</param>
      <param name=" parameters">An array of <see cref="T:System.CodeDom.CodeExpression" /> objects that indicates the parameters to use to create the object.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> class using the specified type and 
    parameters.</para>
      </summary>
      <param name="createType">The name of the data type of object to create.</param>
      <param name=" parameters">An array of <see cref="T:System.CodeDom.CodeExpression" /> objects that indicates the parameters to use to create the object.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> class using the specified type and 
    parameters.</para>
      </summary>
      <param name="createType">The data type of the object to create.</param>
      <param name=" parameters">An array of <see cref="T:System.CodeDom.CodeExpression" /> objects that indicates the parameters to use to create the object.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>
        <para> Gets or sets the data type of the object to create.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>
        <para> Gets or sets the parameters to use in creating the
       object.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>
        <para> Represents a parameter declaration for a method, property, or constructor.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> class using the specified parameter type and name.</para>
      </summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type of the parameter to declare.</param>
      <param name="name">The name of the parameter to declare.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> class using the specified 
    parameter type and name.</para>
      </summary>
      <param name="type">The name of the type of the parameter to declare.</param>
      <param name=" name">The name of the parameter to declare.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> class using the 
    specified parameter type and name.</para>
      </summary>
      <param name="type">The data type of the parameter to declare.</param>
      <param name=" name">The name of the parameter to declare.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>
        <para> Gets or sets the custom attributes for the parameter declaration.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>
        <para> Gets or sets
       the direction of the field.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>
        <para> Gets or sets
       the type of the parameter.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>
        <para> Gets or sets
       the name of the parameter.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> class 
    containing the elements of the specified source collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> class containing the specified array of <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> objects with which to intialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> to the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>
        <para>Copies the elements of the specified array to the end of the 
       collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>
        <para>Adds the contents of another <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>
        <para>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if 
    the collection contains the specified object;
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>
        <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array" /> instance beginning at the 
    specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name="index">The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>
        <para>Gets the index in the collection of the specified 
    <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, if it exists in the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> to locate in the collection.</param>
      <returns>
        <para>The index in the collection of the specified object, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>
        <para>Inserts the specified <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> into 
    the collection at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>
        <para> Removes the specified <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> from the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> to remove from the collection.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> at the specified index in the collection.</para>
      </summary>
      <param name="index">
        <para> The index of the collection to access.</para>
      </param>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>
        <para>Represents a primitive data type value.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodePrimitiveExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodePrimitiveExpression" /> class using the specified
    object.</para>
      </summary>
      <param name="value">The object to represent.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>
        <para> Gets or sets the object to represent.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>
        <para>Represents a reference to a property.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> class using the specified target object and property
    name.</para>
      </summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the object which has the referenced property.</param>
      <param name=" propertyName">The name of the property to reference.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>
        <para> Gets or sets the target object containing the property that this <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> references.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>
        <para> Gets or sets the name of the property to reference.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>
        <para>Represents an expression that represents the value 
      argument of a property set method call within a property set method declaration.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>
        <para>Represents a statement that removes an event handler.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> class using the specified arguments.</para>
      </summary>
      <param name="eventRef">A <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> that indicates the event to detach the listener from.</param>
      <param name="listener">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the new listener.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> class using the
 specified target object, event name, and new listener.</para>
      </summary>
      <param name="targetObject">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the target object.</param>
      <param name=" eventName">The name of the event to remove a listener from.</param>
      <param name=" listener">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the new listener.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>
        <para> Gets or sets the event to remove a listener from.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>
        <para> Gets or sets the listener to remove.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>
        <para>Represents a literal code fragment that can be compiled.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> class.</para>
      </summary>
      <param name="value">The literal code fragment to represent.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>
        <para> Gets or sets the literal code fragment to represent.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>
        <para>Gets or sets the line and file information about where the code is located in a source code document.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>
        <para>Represents a literal expression.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression" /> class using the specified literal
    expression.</para>
      </summary>
      <param name="value">The literal expression to represent.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>
        <para> Gets or sets the literal string of code.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>
        <para>Represents a statement using a literal code fragment.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetStatement" /> class using the specified
   code fragment.</para>
      </summary>
      <param name="value">The literal code fragment of the statement to represent.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>
        <para> Gets or sets the literal code fragment statement.
      </para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>
        <para>Represents a member of a class using a literal code fragment.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> class using the
   specified text.</para>
      </summary>
      <param name="text">The literal code fragment for the class member.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>
        <para>Gets or sets the literal code fragment for the class member.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.CodeDom.CodeStatement" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeStatementCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeStatementCollection" /> class containing the 
    elements of the specified source collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeStatementCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeStatementCollection" /> class containing the 
    specified array of <see cref="T:System.CodeDom.CodeStatement" />
    objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeStatement" /> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.CodeStatement" /> to the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeStatement" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.CodeExpression" /> to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeExpression" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>
        <para>Adds a set of <see cref="T:System.CodeDom.CodeStatement" /> objects to the collection.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeStatement" /> objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>
        <para>Adds the contents of another <see cref="T:System.CodeDom.CodeStatementCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeStatementCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>
        <para>Gets a value indicating whether the collection contains 
       the specified <see cref="T:System.CodeDom.CodeStatement" /> .</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeStatement" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the collection contains the 
    specified object; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>
        <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array" /> instance beginning at the 
    specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name="index">The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>
        <para>Gets the index in the collection of the specified 
    <see cref="T:System.CodeDom.CodeStatement" />, if it exists in the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeStatement" /> to locate in the collection.</param>
      <returns>
        <para>The index in the collection of the specified object, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>
        <para>Inserts the specified <see cref="T:System.CodeDom.CodeStatement" /> into the collection at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.CodeStatement" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>
        <para> Removes the specified <see cref="T:System.CodeDom.CodeStatement" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeStatement" /> to remove from the collection.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>
        <para> Gets or sets the <see cref="T:System.CodeDom.CodeStatement" /> at the specified index in the collection.</para>
      </summary>
      <param name="index">
        <para> The index of the collection to access.</para>
      </param>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>
        <para>Represents a reference to the current local class instance.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>
        <para>Represents
       a statement that throws an exception.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> class using the specified statement.</para>
      </summary>
      <param name="toThrow">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the exception to throw.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>
        <para> Gets or sets
       the expression to throw.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>
        <para>Represents a try block, with any number of catch clauses and optionally,
      a finally block.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> class using the specified statements for try and catch
    clauses.</para>
      </summary>
      <param name="tryStatements">An array of <see cref="T:System.CodeDom.CodeStatement" /> objects that indicate the statements to try.</param>
      <param name=" catchClauses">An array of <see cref="T:System.CodeDom.CodeCatchClause" /> objects that indicate the clauses to catch.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> class using the specified statements for
    try, catch clauses, and finally statements.</para>
      </summary>
      <param name="tryStatements">An array of <see cref="T:System.CodeDom.CodeStatement" /> objects that indicate the statements to try.</param>
      <param name=" catchClauses">An array of <see cref="T:System.CodeDom.CodeCatchClause" /> objects that indicate the clauses to catch.</param>
      <param name=" finallyStatements">An array of <see cref="T:System.CodeDom.CodeStatement" /> objects that indicate the finally statements to use.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>
        <para> 
      Gets the statements to try.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>
        <para> Gets the catch clauses to use.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>
        <para> Gets
      the finally statements to use.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>
        <para>Represents a static constructor for a class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeConstructor" /> class.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>
        <para>Represents a type declaration for a class,
      structure, interface or enumeration.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class with the specified name.</para>
      </summary>
      <param name="name">The name for the new type.</param>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>
        <para> Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> collection is accessed for the first time.
 </para>
      </summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>
        <para> Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> collection is accessed for the first time.
 </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>
        <para> Gets or sets the attributes of the type.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>
        <para> Gets
      the base types of the types.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>
        <para> Gets or
      sets a value indicating whether
      the type is a class or reference type.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>
        <para> Gets or
      sets a value indicating whether
      the types is a value type (struct).</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>
        <para> Gets or sets a
      value indicating whether the type is an enumeration.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>
        <para> Gets or sets a
      value indicating whether the type is an interface.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>
        <para> Gets the collection of class members for the represented type.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>
        <para> Represents a collection of <see cref="T:System.CodeDom.CodeTypeDeclaration" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> class containing the elements of the specified 
    source collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> class containing the 
    specified array of <see cref="T:System.CodeDom.CodeTypeDeclaration" /> objects. </para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeTypeDeclaration" /> objects with which to intialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>
        <para>Copies the elements of the specified array to the 
       end of the collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeTypeDeclaration" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>
        <para>Adds the contents of another <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> 
 if collection contains the specified object;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>
        <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array" /> instance beginning at the
 specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name="index">The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeTypeDeclaration" />, if it exists in the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to locate in the collection.</param>
      <returns>
        <para>The index in the collection of the specified object, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para>Inserts the specified <see cref="T:System.CodeDom.CodeTypeDeclaration" /> into the collection 
    at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para>Removes the specified <see cref="T:System.CodeDom.CodeTypeDeclaration" /> from the
 collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to remove from the collection.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>
        <para> Gets or sets the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> at the specified
   index in the collection.</para>
      </summary>
      <param name="index">
        <para> The index of the collection to access.</para>
      </param>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>
        <para> Represents a delegate declaration.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDelegate" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDelegate" /> class.</para>
      </summary>
      <param name="name">The name of the delegate.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>
        <para> Gets or sets the return type of the delegate.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>
        <para> Gets the parameters of the delegate.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.CodeDom.CodeTypeMember" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> class containing the 
    elements of the specified source collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> class 
    containing the specified array of <see cref="T:System.CodeDom.CodeTypeMember" /> objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeTypeMember" /> objects with which to intialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>
        <para>Adds a <see cref="T:System.CodeDom.CodeTypeMember" /> with the specified value to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeMember" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>
        <para>Copies the elements of the specified <see cref="T:System.CodeDom.CodeTypeMember" /> array to the end of the 
    collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeTypeMember" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>
        <para>Adds the contents of another <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>
        <para>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeTypeMember" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeMember" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
    collection contains the specified object;
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>
        <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array" /> instance, beginning at the 
    specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name="index">The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>
        <para>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeTypeMember" />, if it exists in the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeMember" /> to locate in the collection.</param>
      <returns>
        <para>The index in the collection of the specified object, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>
        <para>Inserts the specified <see cref="T:System.CodeDom.CodeTypeMember" /> into the collection at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the specified object should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.CodeTypeMember" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>
        <para> Removes a specific <see cref="T:System.CodeDom.CodeTypeMember" /> from the collection.</para>
      </summary>
      <param name="value">
        <para>The <see cref="T:System.CodeDom.CodeTypeMember" /> to remove from the collection.</para>
      </param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>
        <para> Gets or sets the <see cref="T:System.CodeDom.CodeTypeMember" /> at the specified index in the collection.</para>
      </summary>
      <param name="index">
        <para> The index of the collection to access.</para>
      </param>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>
        <para>Represents a <see langword="typeof" /> expression, an expression that returns a 
   specified runtime type.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeOfExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeOfExpression" /> class.</para>
      </summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the data type for the <see langword="typeof" /> expression.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeOfExpression" /> class using the specified 
    type.</para>
      </summary>
      <param name="type">The name of the data type for the <see langword="typeof" /> expression.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeOfExpression" /> class using the specified 
    type.</para>
      </summary>
      <param name="type">The data type of the data type of the <see langword="typeof" /> expression.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>
        <para> Gets or sets the data type referenced by the <see langword="typeof" /> expression.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>
        <para>Represents a data type to CodeDOM objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified data 
    type.</para>
      </summary>
      <param name="type">The data type to reference.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified data 
    type name.</para>
      </summary>
      <param name="typeName">The name of the type to reference.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified array data
   type and array rank.</para>
      </summary>
      <param name="baseType">The data type of the elements of the array.</param>
      <param name=" rank">The number of dimensions of the array.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified
   array data type and array rank.</para>
      </summary>
      <param name="arrayType">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type of the array.</param>
      <param name=" rank">The number of dimensions in the array.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>
        <para>Gets or sets the data type of the elements in the array.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>
        <para>Gets or sets the array rank of the array.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>
        <para> Gets or sets the name of the data type being referenced.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.CodeDom.CodeTypeReference" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> class containing the 
    elements of the
    specified source collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> class containing the specified array of <see cref="T:System.CodeDom.CodeTypeReference" /> objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.CodeTypeReference" /> objects with which to initialize the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.CodeTypeReference" /> to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeReference" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>
        <para>Adds a <see cref="T:System.CodeDom.CodeTypeReference" /> to the collection using the specified data type
 name.</para>
      </summary>
      <param name="value">The name of a data type for which to add a <see cref="T:System.CodeDom.CodeTypeReference" /> to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>
        <para>Adds a <see cref="T:System.CodeDom.CodeTypeReference" /> to the collection using the specified data type.</para>
      </summary>
      <param name="value">The data type for which to add a <see cref="T:System.CodeDom.CodeTypeReference" /> to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>
        <para>Copies the elements of the specified <see cref="T:System.CodeDom.CodeTypeReference" /> array to the end of the 
    collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.CodeTypeReference" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>
        <para>Adds the contents of the specified <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> to the end of the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>
        <para>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.CodeTypeReference" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeReference" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.CodeDom.CodeTypeReference" /> is contained in the collection; 
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>
        <para>Copies the items in the collection to the specified one-dimensional <see cref="T:System.Array" /> at the 
    specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the collection.</para>
      </param>
      <param name="index"> The index of the array at which to begin inserting.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>
        <para>Gets the index in the collection of the specified <see cref="T:System.CodeDom.CodeTypeReference" />, if it exists in the 
    collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeReference" /> to locate in the collection.</param>
      <returns>
        <para>The index of the specified <see cref="T:System.CodeDom.CodeTypeReference" /> in the collection if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>
        <para>Inserts a <see cref="T:System.CodeDom.CodeTypeReference" /> into the collection 
    at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the item should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.CodeTypeReference" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>
        <para> Removes the specified <see cref="T:System.CodeDom.CodeTypeReference" /> from the
 collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.CodeTypeReference" /> to remove from the collection.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>
        <para> Gets or sets the <see cref="T:System.CodeDom.CodeTypeReference" /> at the specified
   index in the collection.</para>
      </summary>
      <param name="index">
        <para> The index of the collection to access.</para>
      </param>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>
        <para>Represents a reference to a data type.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> class using the specified type.</para>
      </summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the data type to reference.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> class using the specified data type name.</para>
      </summary>
      <param name="type">The name of the data type to reference.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> class using the specified data type.</para>
      </summary>
      <param name="type">An instance of the data type to reference.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>
        <para> Gets or sets the data type to reference.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>
        <para>Represents a declaration of a variable.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> class using the specified type and name.</para>
      </summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type of the variable.</param>
      <param name="name">The name of the variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> class using the specified data type name and variable 
    name.</para>
      </summary>
      <param name="type">The name of the data type of the variable.</param>
      <param name=" name">The name of the variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> class using the specified data type and variable 
    name.</para>
      </summary>
      <param name="type">The data type for the variable.</param>
      <param name=" name">The name of the variable. </param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> class using the specified data type, variable name, and
    initialization expression.</para>
      </summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type of the variable.</param>
      <param name=" name">The name of the variable.</param>
      <param name=" initExpression">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the initialization expression for the variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> class using the specified data type, variable 
    name, and initialization expression.</para>
      </summary>
      <param name="type">The name of the data type of the variable.</param>
      <param name=" name">The name of the variable.</param>
      <param name=" initExpression">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the initialization expression for the variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> class using the specified data type, variable 
    name, and initialization expression.</para>
      </summary>
      <param name="type">The data type of the variable.</param>
      <param name=" name">The name of the variable.</param>
      <param name=" initExpression">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the initialization expression for the variable.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>
        <para> Gets or sets the initialization expression for the variable.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>
        <para> Gets or sets the name of the variable.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>
        <para> Gets or sets the type of the variable.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>
        <para>Represents an expression that references a local variable.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> class using the specified 
   local variable name.</para>
      </summary>
      <param name="variableName">The name of the local variable to reference.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>
        <para>Gets or sets the name of the local variable to reference.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>
        <para>Specifies identifiers used to indicate the direction of parameter and argument declarations.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>
        <para> An incoming field.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>
        <para> An outgoing field.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>
        <para> A field by reference.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>
        <para>Specifies member attribute identifiers for class members.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>
        <para> An abstract member.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>
        <para> A final member.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>
        <para> A static member.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>
        <para> An override member.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>
        <para> A constant member.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>
        <para> A new member.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>
        <para>An overloaded member. Some languages, such as 
      VB, require overloaded members to be explicitly indicated.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>
        <para> An assembly.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>
        <para> A family and assembly.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>
        <para> A family.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>
        <para> A family or assembly.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>
        <para> A private member.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>
        <para> A public member.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>
        <para> An access mask.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>
        <para> A scope mask.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>
        <para> A VTable mask.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>
        <para> Specifies the value to pass to a property to
 cause the property
 to get its value from another source. This is known as ambience. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class, given 
   the value and its type.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the <paramref name="value" /> parameter.</param>
      <param name=" value">The value for this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class, given a Unicode
 character for its value.</para>
      </summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class, given
   an 8-bit
   unsigned integer for its value.</para>
      </summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class, given 
   a 16-bit
   signed integer for its value.</para>
      </summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class, given 
   a 32-bit
   signed integer for its value.</para>
      </summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class, given 
   a 64-bit signed integer for its value.</para>
      </summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class, given 
   a single-precision floating point number for its value.</para>
      </summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class,
   given a double-precision floating-point number for its value.</para>
      </summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class, given 
   a Boolean value for its value.</para>
      </summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class, given 
   a string for its value.</para>
      </summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AmbientValueAttribute" /> class, given 
   an object for its value.</para>
      </summary>
      <param name="value">The value of this attribute.</param>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>
        <para>Gets the object that is the value of this <see cref="T:System.ComponentModel.AmbientValueAttribute" /> .</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>
        <para>Provides a type converter to convert <see cref="T:System.Array" />
objects to and from various other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>
        <para>Provides a type converter to convert
      collection objects to and from various other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>
        <para> Provides a unified way of converting types of values to
      other types, as well as for accessing standard values and sub-properties.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>
        <para> Returns whether this converter can
      convert an object of the given type to the type of this converter.</para>
      </summary>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>
        <para>
          <see langword="true " />if this converter can perform the
   conversion; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para> Returns
      whether this converter can convert an object of the given type to the type of this converter, using
      the specified context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>
        <para>
          <see langword="true " />if this converter can perform the conversion; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>
        <para> Returns whether this converter can convert the object to the specified
      type.</para>
      </summary>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>
        <para>
          <see langword="true " />if this converter can perform the conversion; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para> Returns whether this converter
      can convert the object to the specified type, using the specified context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>
        <para>
          <see langword="true " />if this converter can perform the conversion; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>
        <para> Converts the given
      value to the type of this converter.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the converted value.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para> Converts the given object to the type of this converter, using the specified context and culture information.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the converted value.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>
        <para> Converts the given string to the type of this converter, using the invariant culture.</para>
      </summary>
      <param name="text">The <see cref="T:System.String" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the converted text.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        <para> Converts the given string to the type of this converter, using the invariant culture.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="text">The <see cref="T:System.String" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the converted text.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>
        <para>Converts the specified text to an object.</para>
      </summary>
      <param name="text">The text representation of the object to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents the converted text.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        <para>Converts the given text to an object, using the specified context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="text">The <see cref="T:System.String" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the converted text.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>
        <para>Converts the given text to an object, using the
      specified context and culture information.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object. If <see langword="null" /> is passed, the current culture is assumed. </param>
      <param name="text">The <see cref="T:System.String" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the converted text.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>
        <para> Converts
      the given value object to the specified type, using the arguments.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the converted value.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para> Converts the given value object
      to the specified type, using the specified context and culture information.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object. If <see langword="null" /> is passed, the current culture is assumed. </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the converted value.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>
        <para>Converts the specified value to a culture-invariant string representation.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.String" /> that represents the converted value.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
        <para>Converts the specified value to a culture-invariant string representation, using the specified context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.String" /> that represents
   the converted value.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>
        <para>Converts the specified value to a string representation.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
 the converted value.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
        <para>Converts the given value to a string representation, using the given context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the converted value.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts the given value to a string representation, using the specified context and culture information.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object. If <see langword="null" /> is passed, the current culture is assumed. </param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the converted value.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>
        <para>Re-creates an <see cref="T:System.Object" /> given a set of property values for the object.</para>
      </summary>
      <param name="propertyValues">
        <para>An <see cref="T:System.Collections.IDictionary" /> that represents a dictionary of new property values.</para>
      </param>
      <returns>
        <para>An <see cref="T:System.Object" />
representing the given <see cref="T:System.Collections.IDictionary" />, or <see langword="null" /> if the object cannot be created. This method
always returns <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>
        <para>Creates an instance of the Type that this <see cref="T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the
 object.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="propertyValues">
        <para>An <see cref="T:System.Collections.IDictionary" /> of new property values.</para>
      </param>
      <returns>
        <para>An <see cref="T:System.Object" />
representing the given <see cref="T:System.Collections.IDictionary" />, or <see langword="null" /> if
the object cannot be created. This method always returns <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>
        <para> Returns an exception to throw when a conversion cannot
       be performed.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to convert, or <see langword="null" /> if the object is not available.</param>
      <returns>
        <para>An <see cref="T:System.Exception" /> that represents 
    the exception to throw when a conversion cannot be performed. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>
        <para> Returns an exception to throw when a conversion cannot
       be performed.</para>
      </summary>
      <param name="value">
        <para>The <see cref="T:System.Object" /> to convert, or <see langword="null" /> if the object is not available. </para>
      </param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type the conversion was trying to convert to.</param>
      <returns>
        <para>An <see cref="T:System.Exception" /> 
 that represents the exception to throw when a conversion cannot be
 performed.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>
        <para> Returns whether changing a value on this 
       object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />
       to create a new value.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if changing a 
    property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> to create a new value; otherwise,
 <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Returns whether changing a value on this object requires a
      call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> to create a new value,
      using the specified context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <returns>
        <para>
          <see langword="true " />if changing a property on this object requires a call
   to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> to create a new value;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>
        <para> Returns a collection of properties for the type of array specified by the value
      parameter.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that specifies the type of array for which to get properties.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for
   this data type, or <see langword="null " />if there are no properties.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
        <para> Returns a collection of
      properties for the type of array specified by the value parameter, using the specified
      context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="value">An <see cref="T:System.Object" /> that specifies the type of array for which to get properties.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for
   this data type, or <see langword="null " />if there are no properties.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
        <para> Returns a collection of properties for
      the type of array specified by the value parameter, using the specified context and
      attributes.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="value">An <see cref="T:System.Object" /> that specifies the type of array for which to get properties.</param>
      <param name="attributes">
        <para>An array of type <see cref="T:System.Attribute" /> that is used as a filter.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for
   this data type, or <see langword="null " />if there are no properties.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>
        <para> Returns whether this object supports properties.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> should be called to find the properties 
    of this object; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Returns whether this object supports properties, using the
      specified context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <returns>
        <para>
          <see langword="true " />if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> should be called to find the properties
   of this object; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>
        <para> Returns a collection of standard values from the default context for the data type this type
      converter is designed for.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> containing a standard set of valid
   values, or <see langword="null " />
   if the data type
   does not support a standard set of values.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Returns a collection of standard values for the data type this type converter is designed for when provided with a
 format context.</para>
      </summary>
      <param name="context">
        <para> An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be <see langword="null" /> . </para>
      </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> that holds a standard set
 of valid values, or <see langword="null" /> if the data type does not support a
 standard set of values.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>
        <para> Returns whether the collection of standard values returned from
   <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an exclusive list. </para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if the
<see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an exhaustive list of
possible values; <see langword="false " />if other values are possible.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Returns whether the collection of standard values returned from
   <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an exclusive
      list of possible values, using the specified context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <returns>
        <para>
          <see langword="true " />if the
<see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an exhaustive list of
possible values; <see langword="false " />if other values are possible.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>
        <para> Returns whether this object supports a standard set of values
       that can be picked from a list.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> should be 
    called to find a common set of values the object supports; otherwise,
 <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Returns whether this object
      supports a standard set of values that can be picked
      from a list, using the specified context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <returns>
        <para>
          <see langword="true" /> if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> should be
   called to find a common set of values the object supports; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>
        <para> Returns whether the given value object is valid for this type.</para>
      </summary>
      <param name="value">The object to test for validity.</param>
      <returns>
        <para>
          <see langword="true " />if the specified value is valid for this object;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
        <para> Returns whether the given value object is valid for this type and for the specified context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="value">The <see cref="T:System.Object" /> to test for validity.</param>
      <returns>
        <para>
          <see langword="true " />if the specified value is valid
 for this object; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>
        <para>Sorts a collection of properties.</para>
      </summary>
      <param name="props">A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that has the properties to sort.</param>
      <param name="names">
        <para> An array of names in the order you want the properties to appear in the collection.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the sorted properties.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>
        <para> Represents an <see langword="abstract " />
class that provides
properties for objects that do not have
properties.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>
        <para>Provides an abstraction of a property on a class.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>
        <para>An abstract base class that represents a class member, such as a property, or
 event. </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MemberDescriptor" /> class with 
    the specified name of the
    member.</para>
      </summary>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MemberDescriptor" /> class with 
    the specified name of the member and an array of attributes.</para>
      </summary>
      <param name="name">The name of the member.</param>
      <param name="attributes">
        <para>An array of type <see cref="T:System.Attribute" /> that contains the member attributes.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.MemberDescriptor" /> class with the specified <see cref="T:System.ComponentModel.MemberDescriptor" />.
    </para>
      </summary>
      <param name="descr">
    A <see cref="T:System.ComponentModel.MemberDescriptor" /> that contains the name of the member and its attributes.
 </param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MemberDescriptor" /> class with the name in the specified
<see cref="T:System.ComponentModel.MemberDescriptor" /> and the attributes
   in both the old <see cref="T:System.ComponentModel.MemberDescriptor" /> and the <see cref="T:System.Attribute" /> array.</para>
      </summary>
      <param name="oldMemberDescriptor">A <see cref="T:System.ComponentModel.MemberDescriptor" /> that has the name of the member and its attributes.</param>
      <param name="newAttributes">An array of <see cref="T:System.Attribute" /> objects with the attributes you want to add to the member.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>
        <para> Creates a collection of attributes
      using the array of attributes passed to the constructor.
      </para>
      </summary>
      <returns>
        <para> A
      new <see cref="T:System.ComponentModel.AttributeCollection" /> that contains the <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> attributes.
      </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>
        <para> Compares this instance to the given object to see if they are equivalent.
      </para>
      </summary>
      <param name="obj">The object to compare to the current instance. </param>
      <returns>
        <para>
          <see langword="true " />if
   equivalent;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>
        <para> When
      overridden in a derived class, adds the attributes of the inheriting class
      to the specified list of attributes in the parent class.
      </para>
      </summary>
      <param name="attributeList">An <see cref="T:System.Collections.IList" /> that lists the attributes in the parent class. Initially, this is empty. </param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>
        <para> Finds the given method through reflection, searching only for public methods.</para>
      </summary>
      <param name="componentClass">The component that contains the method.</param>
      <param name="name">The name of the method to find.</param>
      <param name="args">
        <para> An array of parameters for the method, used to choose between overloaded methods. </para>
      </param>
      <param name="returnType">The type to return for the method.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> that represents the method. If the method is
   not found, <see langword="null " />is returned.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>
        <para> Finds the given method through reflection, with an 
      option to search only public methods.
      </para>
      </summary>
      <param name="componentClass">The component that contains the method. </param>
      <param name="name">The name of the method to find. </param>
      <param name="args">
        <para> An array of parameters for the method, used to choose between overloaded methods. </para>
      </param>
      <param name="returnType">The type to return for the method. </param>
      <param name="publicOnly">Whether to restrict search to public methods. </param>
      <returns>
        <para> A <see cref="T:System.Reflection.MethodInfo" /> that represents the method. If the method is
   not found, <see langword="null " />is returned.
   </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>
        <para> Gets a component site
      for the given component.
      </para>
      </summary>
      <param name="component">The component for which you want to find a site. </param>
      <returns>
        <para> The site of the component, or <see langword="null " />
if a site does not exist.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>
        <para> 
      Gets the component on which to invoke a method.
      </para>
      </summary>
      <param name="componentClass">
        <para>A <see cref="T:System.Type" /> representing the type of component this <see cref="T:System.ComponentModel.MemberDescriptor" /> is bound to. For example, if this <see cref="T:System.ComponentModel.MemberDescriptor" /> describes a property, this parameter should be the class that the property is declared on. </para>
      </param>
      <param name="component">An instance of the object to call. </param>
      <returns>
        <para> An instance of the component to invoke. This method returns a visual designer
      when the property is attached to a visual designer.
      </para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>
        <para> Gets or sets an array of
 attributes.
 </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>
        <para>Gets the collection of attributes for this member.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>
        <para> Gets the name of the category to which
      the
      member belongs, as specified in the <see cref="T:System.ComponentModel.CategoryAttribute" />.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>
        <para> Gets the description of
      the member, as specified in the <see cref="T:System.ComponentModel.DescriptionAttribute" />.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>
        <para> Gets a value indicating whether the member is browsable, as specified in the
   <see cref="T:System.ComponentModel.BrowsableAttribute" />.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>
        <para>
       Gets the
       name of the member.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>
        <para> Gets the hash
      code for the name of the member, as specified in <see cref="M:System.String.GetHashCode" />.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>
        <para>Gets whether this member should be set only at
      design time, as specified in the <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>
        <para>Gets the name that can be displayed in a window, such as a
      Properties window.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> class with the specified name and
       attributes.
    </para>
      </summary>
      <param name="name">
    The name of the property.
 </param>
      <param name="attrs">
        <para>An array of type <see cref="T:System.Attribute" /> that contains the property attributes.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> class with
       the name and attributes in the specified <see cref="T:System.ComponentModel.MemberDescriptor" />.
    </para>
      </summary>
      <param name="descr">
    A <see cref="T:System.ComponentModel.MemberDescriptor" /> that contains the name of the property and its attributes.
 </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> class with
   the name in the specified <see cref="T:System.ComponentModel.MemberDescriptor" /> and the
   attributes in both the <see cref="T:System.ComponentModel.MemberDescriptor" /> and the
<see cref="T:System.Attribute" /> array.
   </para>
      </summary>
      <param name="descr">A <see cref="T:System.ComponentModel.MemberDescriptor" /> containing the name of the member and its attributes. </param>
      <param name="attrs">
        <para>An <see cref="T:System.Attribute" /> array containing the attributes you want to associate with the property.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>
        <para> Enables other objects to be notified when this property changes.</para>
      </summary>
      <param name="component">The component to add the handler for. </param>
      <param name="handler">The delegate to add as a listener. </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>
        <para> When overridden in a derived class, returns
 whether resetting an object changes its value.</para>
      </summary>
      <param name="component">
        <para> The component to test for reset capability.</para>
      </param>
      <returns>
        <para>
          <see langword="true " /> if
 resetting the component changes its value;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>
        <para> Compares this to another object
      to see if they are equivalent.</para>
      </summary>
      <param name="obj">The object to compare to this <see cref="T:System.ComponentModel.PropertyDescriptor" /> . </param>
      <returns>
        <para>
          <see langword="true " />if the values 
   are
   equivalent; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>
        <para>Creates an instance of the
      specified type.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type to create.</param>
      <returns>
        <para>A new instance of the type.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>
        <para> Returns the default <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>
        <para> Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
using a specified array of attributes
as a filter.</para>
      </summary>
      <param name="filter">An array of type <see cref="T:System.Attribute" /> to use as a filter.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
with the properties that match the specified attributes. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>
        <para> Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
for
a given object.</para>
      </summary>
      <param name="instance">A component to get the properties for.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
with the properties for the specified component. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>
        <para> Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> for a given
 object using a specified array of attributes
 as a filter.</para>
      </summary>
      <param name="instance">A component to get the properties for.</param>
      <param name="filter">An array of type <see cref="T:System.Attribute" /> to use as a filter.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the
 properties that match the specified attributes for the specified component. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>
        <para> Gets an editor of the specified type.
      </para>
      </summary>
      <param name="editorBaseType">
        <para> The base type of editor, which is used to differentiate between multiple editors that a property supports.</para>
      </param>
      <returns>
        <para> An instance of the requested editor type, or
   <see langword="null " /> if an editor cannot be found.
      </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>
        <para>Returns a type using its name.</para>
      </summary>
      <param name="typeName"> The assembly-qualified name of the type to retrieve.</param>
      <returns>
        <para>A <see cref="T:System.Type" /> that matches the
   given type name, or
<see langword="null " /> if a match cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>
        <para> When overridden in a derived class, gets the current
 value
 of the
 property on a component.
 </para>
      </summary>
      <param name="component">The component with the property for which to retrieve the value. </param>
      <returns>
        <para> The value of a property for a given component.
 </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>
        <para>Raises the ValueChanged event that you implemented.</para>
      </summary>
      <param name="component">The object that raises the event.</param>
      <param name=" e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>
        <para> Enables other objects to be notified when this property changes.</para>
      </summary>
      <param name="component">The component to remove the handler for. </param>
      <param name="handler">The delegate to remove as a listener. </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>
        <para> When overridden in a derived class, resets the value for this
 property
 of the component
 to the default value.
 </para>
      </summary>
      <param name="component">
        <para>The component with the property value that is to be reset to the default value. </para>
      </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
        <para> When overridden in a derived class, sets the value of
 the component to a different value.
 </para>
      </summary>
      <param name="component">
        <para>The component with the property value that is to be set.</para>
      </param>
      <param name="value">The new value. </param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
        <para> When overridden in a derived class, determines a value indicating whether the
 value of
 this property needs to be persisted.</para>
      </summary>
      <param name="component">
        <para>The component with the property to be examined for persistence. </para>
      </param>
      <returns>
        <para>
          <see langword="true " />if the property should be persisted;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>
        <para> When overridden in a derived class, gets the type of the
 component this property
 is bound to.
 </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>
        <para>
       Gets the type converter for this property.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>
        <para> Gets a value
      indicating whether this property should be localized, as
      specified in the <see cref="T:System.ComponentModel.LocalizableAttribute" />.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>
        <para> When overridden in
 a derived class, gets a value
 indicating whether this property is read-only.
 </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>
        <para> Gets a value
      indicating whether this property should be serialized, as specified in the <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>
        <para>
       When overridden in a derived class,
       gets the type of the property.
    </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />
class.</para>
      </summary>
      <param name="componentType">A <see cref="T:System.Type" /> that represents the type of component to which this property descriptor binds. </param>
      <param name="name">The name of the property. </param>
      <param name="propertyType">A <see cref="T:System.Type" /> that represents the data type for this property. </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> class.
   </para>
      </summary>
      <param name="componentType">
        <para>A <see cref="T:System.Type" /> that represents the type of component to which this property descriptor binds. </para>
      </param>
      <param name="name">The name of the property. </param>
      <param name="propertyType">A <see cref="T:System.Type" /> that represents the data type for this property. </param>
      <param name="attributes">
        <para>An <see cref="T:System.Attribute" /> array with the attributes to associate with the property.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>
        <para> Returns whether resetting the
      component changes the value of the component.</para>
      </summary>
      <param name="component">
        <para> The component to test for reset capability.</para>
      </param>
      <returns>
        <para>
          <see langword="true " /> if
   resetting the component changes the value of the component; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>
        <para>Resets the value for this property
      of the component.</para>
      </summary>
      <param name="component">
        <para>The component with the property value to be reset. </para>
      </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
        <para> Returns whether the value of this property can persist.</para>
      </summary>
      <param name="component">
        <para>The component with the property that is to be examined for persistence. </para>
      </param>
      <returns>
        <para>
          <see langword="true " />if the value of the property can
   persist; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>
        <para> Gets the type of component to which this
      property description binds.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>
        <para>
       Gets a
       value indicating whether this property is read-only.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>
        <para>
       Gets the type of the property.
    </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
class.</para>
      </summary>
      <param name="values">An <see cref="T:System.Collections.ICollection" /> that represents the objects to put into the collection. </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the contents of this collection to an array.</para>
      </summary>
      <param name="array">An <see cref="T:System.Array" /> that represents the array to copy to.</param>
      <param name="index">The index to start from. </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator for this collection.</para>
      </summary>
      <returns>
        <para>An enumerator of type <see cref="T:System.Collections.IEnumerator" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>
        <para> Gets the number of objects in the collection.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>
        <para> Gets the object at the specified index number.</para>
      </summary>
      <param name="index">The zero-based index of the <see cref="T:System.Object" /> to get from the collection.</param>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>
        <para> Provides the base class for a custom component
      editor.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>
        <para>Edits the component and returns a value indicating whether the component was modified.</para>
      </summary>
      <param name="component">The component to be edited.</param>
      <returns>
        <para>
          <see langword="true" /> if the component was modified;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
        <para>Edits the component and returns a value indicating whether the component was modified based upon a given context.</para>
      </summary>
      <param name="context">An optional context object that can be used to obtain further information about the edit.</param>
      <param name="component">The component to be edited.</param>
      <returns>
        <para>
          <see langword="true" /> if the component was modified;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>
        <para>Provides a base type converter for non-floating point numerical types.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>
        <para> Specifies whether a property is typically used for
      binding.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>
        <para> Specifies that a property is typically used for binding. 
      This <see langword="static" />
      field is read-only. </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>
        <para> Specifies that a property is not typically used for 
      binding. This <see langword="static" />
      field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.BindableAttribute" /> class with a
   Boolean value.</para>
      </summary>
      <param name="bindable">
        <para>
          <see langword="true" /> if a property is typically used for binding; otherwise, <see langword="false" />. The default is <see langword="false" />.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.BindableAttribute" /> class with
   one of the <see cref="T:System.ComponentModel.BindableSupport" /> values.</para>
      </summary>
      <param name="flags">
        <para>One of the <see cref="T:System.ComponentModel.BindableSupport" /> values.</para>
      </param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>
        <para> Gets a
      value indicating that a property is typically used for binding.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>
        <para> Specifies values to indicate whether a property can be bound
 to a data element or another property.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>
        <para> The property is not bindable at design time.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>
        <para> The property is bindable at design time.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>
        <para> The property is set to the default.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>
        <para>Provides a type converter to convert <see cref="T:System.Boolean" />
objects to and from various other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>
        <para> Specifies whether a property or event should be displayed
      in a Properties window.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>
        <para>Specifies that a property or event can be modified at
      design time. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>
        <para>Specifies that a property or event cannot be modified at
      design time. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.BrowsableAttribute" /> class.</para>
      </summary>
      <param name="browsable">
        <see langword="true" /> if a property or event can be modified at design time; otherwise, <see langword="false" />. The default is <see langword="true" />.</param>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>
        <para>Gets a value indicating whether an object is browsable.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>
        <para>Provides a
 type converter to convert 8-bit unsigned
 integer objects to and from various other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>
        <para>Provides data for a cancelable
      event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.CancelEventArgs" /> class with the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 
 property set to <see langword="false" />.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.CancelEventArgs" /> class with the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 
 property set to the given value.</para>
      </summary>
      <param name="cancel">
        <see langword="true" /> to cancel the event; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>
        <para> Gets or sets a
      value indicating whether the event should be canceled.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>
        <para> Represents the method that handles a cancellable
 event.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>
        <para>Provides
 a type converter to convert Unicode
 character objects to and from various other representations.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.CMUtils.ArraysEqual(System.Array,System.Array)">
      <summary>
     Compares two arrays for equality. Each element is compared to the
     respective element in the opposite array. All tests are safe will
     null values.
 </summary>
      <param name="array1">
     Array to compare
 </param>
      <param name="array2">
     Array to compare
 </param>
      <returns>
     true if the arrays are equal.
 </returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>
        <para>Specifies how the collection is changed.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>
        <para> Specifies that an element was added to the collection.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>
        <para>Specifies that an element was removed from the collection.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>
        <para>Specifies that the entire collection has changed. This 
      is caused by using methods that manipulate the entire collection, such as
   <see cref="M:System.Collections.CollectionBase.Clear" /> .</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> class.</para>
      </summary>
      <param name="action">
        <para>One of the <see cref="T:System.ComponentModel.CollectionChangeAction" /> values that specifies how the collection changed.</para>
      </param>
      <param name=" element">An <see cref="T:System.Object" /> that specifies the instance of the collection where the change occurred.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>
        <para>Gets an action that specifies how the collection changed.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>
        <para>Gets the instance of the collection with the change. </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>
        <para> Represents the method that handles the <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />
event raised when adding elements to or removing elements from a
collection.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.Component">
      <summary>
        <para>Provides the base implementation for the
   <see cref="T:System.ComponentModel.IComponent" /> interface and enables object-sharing
      between applications. </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>
        <para>Provides functionality required by all components.
   <see cref="T:System.ComponentModel.Component" /> is the
      default implementation of <see cref="T:System.ComponentModel.IComponent" /> and
      serves as the base class for all components in the common language runtime. </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>
        <para> Gets or sets
      the <see cref="T:System.ComponentModel.ISite" /> associated
      with the <see cref="T:System.ComponentModel.IComponent" />.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>
        <para>Represents the method that handles the <see cref="E:System.ComponentModel.IComponent.Disposed" /> event of a component.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose">
      <summary>
        <para> Releases all resources used by the <see cref="T:System.ComponentModel.Component" />.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component" />
and optionally releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.ComponentModel.Component.GetService(System.Type)">
      <summary>
        <para> Returns an object that represents a service provided by the
   <see cref="T:System.ComponentModel.Component" /> or by its <see cref="T:System.ComponentModel.Container" />.
      </para>
      </summary>
      <param name="service">A service provided by the <see cref="T:System.ComponentModel.Component" />. </param>
      <returns>
        <para> An <see cref="T:System.Object" /> that represents a service provided by the
<see cref="T:System.ComponentModel.Component" />.
   </para>
        <para> This value is <see langword="null" /> if the <see cref="T:System.ComponentModel.Component" /> does not provide the
specified service.</para>
      </returns>
    </member>
    <member name="E:System.ComponentModel.Component.Disposed">
      <summary>
        <para>Adds an event handler to listen to the <see cref="E:System.ComponentModel.Component.Disposed" /> event on 
   the component.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Component.Events">
      <summary>
        <para>Gets the list of event handlers that are attached to
      this <see cref="T:System.ComponentModel.Component" />.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Component.Site">
      <summary>
        <para> Gets or sets the <see cref="T:System.ComponentModel.ISite" /> of the <see cref="T:System.ComponentModel.Component" />.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Component.Container">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.IContainer" />
that contains the <see cref="T:System.ComponentModel.Component" />.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Component.DesignMode">
      <summary>
        <para> Gets a value that indicates whether the <see cref="T:System.ComponentModel.Component" />
is currently in design mode.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>
        <para> Specifies a collection of <see cref="T:System.ComponentModel.Component" /> objects in the <see cref="T:System.ComponentModel.Container" />
.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.#ctor(System.ComponentModel.IComponent[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ComponentCollection" /> class with an array of components.</para>
      </summary>
      <param name="components">An array of <see cref="T:System.ComponentModel.IComponent" /> objects to initialize the collection with.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.CopyTo(System.ComponentModel.IComponent[],System.Int32)">
      <summary>
        <para> Copies the entire collection to an array, starting at the
      specified index.</para>
      </summary>
      <param name="array">An array of <see cref="T:System.ComponentModel.IComponent" /> objects to copy elements of the collection to.</param>
      <param name=" index">The index of the <paramref name="array" /> parameter at which copying begins.</param>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.String)">
      <summary>
        <para> Gets a specific <see cref="T:System.ComponentModel.Component" /> in the <see cref="T:System.ComponentModel.Container" />
.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.ComponentModel.Component" /> to get. </param>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.Int32)">
      <summary>
        <para> Gets a specific <see cref="T:System.ComponentModel.Component" /> in the <see cref="T:System.ComponentModel.Container" />
.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.ComponentModel.Component" /> to get. </param>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>
        <para>Provides a type converter to convert components to and
      from various other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>
        <para> Provides a type converter to convert object references to and from
      other representations.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
        <para>Returns a value indicating whether a particular value can be added to
      the standard values collection.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides an additional context. </para>
      </param>
      <param name="value">The value to check.</param>
      <returns>
        <para>
          <see langword="true" /> if the value is allowed
   and can be added to the standard values collection; <see langword="false" /> if
   the value cannot be added to the standard values collection.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>
        <para>Encapsulates zero or more components. </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>
        <para>Provides
      functionality for containers. Containers are objects that logically contain zero or more components.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>
        <para>Adds the specified <see cref="T:System.ComponentModel.IComponent" /> to the <see cref="T:System.ComponentModel.IContainer" />
at the end of the list.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to add.</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>
        <para>Adds the specified <see cref="T:System.ComponentModel.IComponent" /> to the <see cref="T:System.ComponentModel.IContainer" />
at the end of the list, and assigns a name to the component.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to add.</param>
      <param name="name"> The unique, case-insensitive name to assign to the component. <para>-or-</para><para><see langword="null" /> that leaves the component unnamed.</para></param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>
        <para>Removes a component from the <see cref="T:System.ComponentModel.IContainer" />.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to remove.</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>
        <para>Gets all the components in the <see cref="T:System.ComponentModel.IContainer" />.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>
        <para> Adds the specified <see cref="T:System.ComponentModel.Component" /> to the <see cref="T:System.ComponentModel.Container" />
. The component is unnamed.</para>
      </summary>
      <param name="component">The component to add. </param>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>
        <para> Adds the specified <see cref="T:System.ComponentModel.Component" /> to the <see cref="T:System.ComponentModel.Container" /> and assigns it a
   name.
   </para>
      </summary>
      <param name="component">The component to add. </param>
      <param name="name">
        <para>The unique, case insensitive name to assign to the component.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> that leaves the component unnamed.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>
        <para>Creates a site <see cref="T:System.ComponentModel.ISite" /> for the given <see cref="T:System.ComponentModel.IComponent" />
and assigns the given name to the site.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to create a site for.</param>
      <param name="name">The name to assign to <paramref name="component" />; or <see langword="null" /> to skip the name assignment.</param>
      <returns>
        <para>The newly created site.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>
        <para> Releases all resources used by the <see cref="T:System.ComponentModel.Container" />.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Container" />
and optionally releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>
        <para>Gets the service object of the specified type, if it is available.</para>
      </summary>
      <param name="service">The <see cref="T:System.Type" /> of the service to retrieve.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> 
implementing the requested service, or <see langword="null" /> if the service cannot be resolved.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>
        <para> Removes a component from the <see cref="T:System.ComponentModel.Container" />
.</para>
      </summary>
      <param name="component">The component to remove. </param>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>
        <para> Gets all the components in the <see cref="T:System.ComponentModel.Container" />.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>
        <para>Provides functionality required by sites. </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>
        <para>Gets the component associated with the <see cref="T:System.ComponentModel.ISite" /> when implemented by a 
 class.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>
        <para>Gets the <see cref="T:System.ComponentModel.IContainer" /> associated with the <see cref="T:System.ComponentModel.ISite" />
when implemented by a class.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>
        <para>Determines whether the component is in design mode when implemented by a class.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>
 Gets or sets the name of the component associated with
 the <see cref="T:System.ComponentModel.ISite" /> when implemented by a class.
</summary>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>
        <para>Provides a type converter to convert <see cref="T:System.Globalization.CultureInfo" />
objects to and from various other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>
        <para>Provides a type converter to convert <see cref="T:System.DateTime" />
objects to and from various other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>
        <para>Provides a type converter to convert <see cref="T:System.Decimal" />
objects to and from various
other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>
        <para>Specifies the default event for a
      component.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>
        <para>
       Initializes
       a new instance of the <see cref="T:System.ComponentModel.DefaultEventAttribute" /> class.
    </para>
      </summary>
      <param name="name">
    The name of the default event for the component this attribute is bound to.
 </param>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>
        <para>Gets the name of the default event for
       the component this attribute is bound to.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>
        <para>Specifies the default property for a component.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>
        <para>
       Initializes a new instance of
       the <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> class.
    </para>
      </summary>
      <param name="name">
    The name of the default property for the component this attribute is bound to.
 </param>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>
        <para>Gets the name of the default property for the component this attribute is
       bound to.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>
        <para>Specifies the default value for a property.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class, converting
 the specified value to
 the specified type, and using an invariant culture as the
 translation
 context.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type to convert the value to.</param>
      <param name="value">A <see cref="T:System.String" /> that can be converted to the type using the <see cref="T:System.ComponentModel.TypeConverter" /> for the type and the U.S. English culture.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a Unicode
    character.</para>
      </summary>
      <param name="value">A Unicode character that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using an 8-bit unsigned
    integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a 16-bit signed
    integer.</para>
      </summary>
      <param name="value">A 16-bit signed integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a 32-bit signed
    integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a 64-bit signed
    integer.</para>
      </summary>
      <param name="value">A 64-bit signed integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a
    single-precision floating point
    number.</para>
      </summary>
      <param name="value">A single-precision floating point number that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a
    double-precision floating point
    number.</para>
      </summary>
      <param name="value">A double-precision floating point number that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a <see cref="T:System.Boolean" />
 value.</para>
      </summary>
      <param name="value">A <see cref="T:System.Boolean" /> that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a <see cref="T:System.String" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" />
 class.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that represents the default value.</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>
        <para>
       Gets the default value of the property this
       attribute is
       bound to.
    </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>
        <para>Specifies the class used to implement design-time services for a component.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerAttribute" /> class using the name of the type that
       provides design-time services.
    </para>
      </summary>
      <param name="designerTypeName">
        <para> The fully qualified name of the type that provides design-time services for the component this attribute is bound to.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerAttribute" /> class using the type that provides
       design-time services.
    </para>
      </summary>
      <param name="designerType">
        <para>A <see cref="T:System.Type" /> that represents the class that provides design-time services for the component this attribute is bound to.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerAttribute" /> class using the designer type and the
       base class for the designer.
    </para>
      </summary>
      <param name="designerTypeName">
        <para>The fully qualified name of the type that provides design-time services for the component this attribute is bound to. </para>
      </param>
      <param name="designerBaseTypeName">
        <para> The fully qualified name of the base class to associate with the designer class. </para>
      </param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerAttribute" /> class, using the name of the designer
    class and the base class for the designer.</para>
      </summary>
      <param name="designerTypeName">
        <para>The fully qualified name of the type that provides design-time services for the component this attribute is bound to. </para>
      </param>
      <param name="designerBaseType">A <see cref="T:System.Type" /> that represents the base class to associate with the <paramref name="designerTypeName" /> .</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerAttribute" /> class using the types of the designer and
    designer base class.</para>
      </summary>
      <param name="designerType">
        <para>A <see cref="T:System.Type" /> that represents the class that provides design-time services for the component this attribute is bound to.</para>
      </param>
      <param name="designerBaseType">A <see cref="T:System.Type" /> that represents the base class to associate with the <paramref name="designerType" /> .</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>
        <para>
       Gets
       the name of the base type of this designer.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>
        <para>
       Gets the name of the designer type associated with this designer attribute.
    </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DesignerCategoryAttribute">
      <summary>
        <para>Specifies that the designer for a class belongs to a certain
      category.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Component">
      <summary>
        <para>Specifies that a component marked with this category use 
      a component designer. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Form">
      <summary>
        <para>Specifies that a component marked with this category use
      a form designer. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Generic">
      <summary>
        <para>Specifies that a component marked with this category use
      a generic designer. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerCategoryAttribute" /> class with an empty
    string ("").</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor(System.String)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerCategoryAttribute" /> class with
       the given category name.
    </para>
      </summary>
      <param name="category">
    The name of the category.
 </param>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.Category">
      <summary>
        <para>
       Gets the name of the category.
    </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibility">
      <summary>
        <para> Specifies the visibility a property has to the design-time
 serializer.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Hidden">
      <summary>
        <para>The code generator does not produce code for the object.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Visible">
      <summary>
        <para>The code generator produces code for the object.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Content">
      <summary>
        <para> The code generator produces code for the contents of the object, rather than for the object itself.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibilityAttribute">
      <summary>
        <para> Specifies how a property on a component is saved by a
      designer.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Content">
      <summary>
        <para> Specifies that a visual designer serialize the contents 
      of this property, rather than the property itself. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Hidden">
      <summary>
        <para> Specifies that a visual designer does not serialize the
      value of this property. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible">
      <summary>
        <para> Specifies that a visual designer can use default rules
      when serializing the value of a property. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.#ctor(System.ComponentModel.DesignerSerializationVisibility)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> class.
 </para>
      </summary>
      <param name="visibility">
        <para>One of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> values.</para>
      </param>
    </member>
    <member name="P:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visibility">
      <summary>
        <para>Gets a value indicating whether a
      visual designer must generate special code to persist the value of a property.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DesignOnlyAttribute">
      <summary>
        <para>Specifies whether a property can only be set at
      design time.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.#ctor(System.Boolean)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> class.
    </para>
      </summary>
      <param name="isDesignOnly">
        <see langword="true" /> if a property can be set only at design time; <see langword="false" /> if the property can be set at design time and at run time.
 </param>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Yes">
      <summary>
        <para> Specifies that a property can be set only at design time.
      This <see langword="static" /> field is read-only.
      </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.No">
      <summary>
        <para>Specifies that a property can be set at design time or at
      run time. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.DesignOnlyAttribute.IsDesignOnly">
      <summary>
        <para>
       Gets a value indicating whether a property
       can be set only at design time.
    </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>
        <para>Provides a type
      converter to convert double-precision, floating point number objects to and from various
      other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>
        <para>Specifies the editor to use to change a property. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute" /> class with the default editor, which is
    no editor.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute" /> class with the type name and base type
 name of the editor.
 </para>
      </summary>
      <param name="typeName">
        <para> The fully qualified type name of the editor. </para>
      </param>
      <param name="baseTypeName">
        <para>The fully qualified type name of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor" />. </para>
      </param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute" /> class with the type name and the base
 type.</para>
      </summary>
      <param name="typeName">The fully qualified type name of the editor.</param>
      <param name="baseType">
        <para> The <see cref="T:System.Type" /> of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor" />. </para>
      </param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorAttribute" /> class with the type and the base 
    type.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of the editor.</param>
      <param name="baseType">
        <para> The <see cref="T:System.Type" /> of the base class or interface to use as a lookup key for the editor. This class must be or derive from <see cref="T:System.Drawing.Design.UITypeEditor" />.</para>
      </param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>
        <para> Gets the name of the base class or interface serving as a lookup key for this editor.
 </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>
        <para>Gets the name of the editor class in the <see cref="P:System.Type.AssemblyQualifiedName" qualify="true" /> format.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>
        <para>Specifies that a property or method is viewable in an editor. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> class with an 
<see cref="T:System.ComponentModel.EditorBrowsableState" /> .</para>
      </summary>
      <param name="state">The <see cref="T:System.ComponentModel.EditorBrowsableState" /> to set <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> to.</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> class
   with <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> set to the default state.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>
        <para>Gets the browsable state of the property or method.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>
        <para>Specifies the browsable state of a property or method from within an editor.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>
        <para>The property or method is always browsable from within an editor.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>
        <para>The property or method is never browsable from within an editor.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>
        <para> The property or method is a feature that only
      advanced users should see. An editor can either show or hide such properties.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>
        <para>Provides a type converter to convert <see cref="T:System.Enum" />
objects to and from various
other representations.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>
        <para>Gets an <see cref="T:System.Collections.IComparer" />
 that can
 be used to sort the values of the enumeration.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>
        <para>Provides information about an event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.EventDescriptor" /> class with the
       specified name and attribute
       array.
    </para>
      </summary>
      <param name="name">
    The name of the event.
 </param>
      <param name="attrs">
        <para>An array of type <see cref="T:System.Attribute" /> that contains the event attributes.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.EventDescriptor" /> class with the name and attributes in
       the specified <see cref="T:System.ComponentModel.MemberDescriptor" />
       .
    </para>
      </summary>
      <param name="descr">
    A <see cref="T:System.ComponentModel.MemberDescriptor" /> that contains the name of the event and its attributes.
 </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.EventDescriptor" /> class with
   the name in the specified <see cref="T:System.ComponentModel.MemberDescriptor" /> and the
   attributes in both the <see cref="T:System.ComponentModel.MemberDescriptor" /> and the <see cref="T:System.Attribute" />
   array.</para>
      </summary>
      <param name="descr">A <see cref="T:System.ComponentModel.MemberDescriptor" /> that has the name of the member and its attributes.</param>
      <param name="attrs">
        <para>An <see cref="T:System.Attribute" /> array with the attributes you want to add to this event description.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>
        <para>When overridden in
      a derived class,
      binds the event to the component.</para>
      </summary>
      <param name="component">A component that provides events to the delegate.</param>
      <param name="value">
        <para> A delegate that represents the method that handles the event.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>
        <para>When
      overridden
      in a derived class, unbinds the delegate from the
      component
      so that the delegate will no
      longer receive events from the component.</para>
      </summary>
      <param name="component">
        <para> The component that the delegate is bound to.</para>
      </param>
      <param name="value">The delegate to unbind from the component.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>
        <para> When overridden in
      a
      derived class, gets the type of component this event is bound to.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>
        <para>
       When overridden in a derived
       class, gets the type of delegate for the event.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>
        <para> When overridden in a derived class, gets a value
      indicating whether the event delegate is a multicast
      delegate.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>
        <para> Represents a collection of <see cref="T:System.ComponentModel.EventDescriptor" /> objects.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>
        <para>Specifies an empty collection to use, rather than
      creating a new one with no items. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.EventDescriptorCollection" /> class.
   </para>
      </summary>
      <param name="events">An array of type <see cref="T:System.ComponentModel.EventDescriptor" /> that provides the events for this collection. </param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>
        <para>Adds an <see cref="T:System.ComponentModel.EventDescriptor" /> to the end of the collection.</para>
      </summary>
      <param name="value">An <see cref="T:System.ComponentModel.EventDescriptor" /> to add to the collection.</param>
      <returns>
        <para>The position of the <see cref="T:System.ComponentModel.EventDescriptor" /> within the collection.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>
        <para>Removes all objects from the collection.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>
        <para>Returns whether the collection contains the given <see cref="T:System.ComponentModel.EventDescriptor" /> .</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.EventDescriptor" /> to find within the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the collection contains the
<paramref name="value" /> parameter given; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>
        <para>Returns the index of the <see cref="T:System.ComponentModel.EventDescriptor" /> given.</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.EventDescriptor" /> to find within the collection.</param>
      <returns>
        <para>The index of the given <see cref="T:System.ComponentModel.EventDescriptor" /> within the collection.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>
        <para>Inserts an <see cref="T:System.ComponentModel.EventDescriptor" /> to the collection at a specified index.</para>
      </summary>
      <param name="index">The index within the collection in which to insert the <paramref name="value" /> parameter. </param>
      <param name=" value">An <see cref="T:System.ComponentModel.EventDescriptor" /> to insert into the collection.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>
        <para>Removes the specified <see cref="T:System.ComponentModel.EventDescriptor" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.EventDescriptor" /> to remove from the collection.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the <see cref="T:System.ComponentModel.EventDescriptor" /> at the specified index from the
   collection.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.ComponentModel.EventDescriptor" /> to remove.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>
        <para>Gets the description of the event with the specified
      name
      in the collection.</para>
      </summary>
      <param name="name">The name of the event to get from the collection.</param>
      <param name="ignoreCase">
        <see langword="true" /> if you want to ignore the case of the event; otherwise, <see langword="false" />.</param>
      <returns>
        <para>The <see cref="T:System.ComponentModel.EventDescriptor" /> with the specified name,
   or <see langword="null" /> if the event does not exist.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>
        <para> Gets an enumerator for this <see cref="T:System.ComponentModel.EventDescriptorCollection" />.
   </para>
      </summary>
      <returns>
        <para> An enumerator that implements <see cref="T:System.Collections.IEnumerator" />.
   </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>
        <para> Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection" /> , using the default sort for this collection,
   which is usually alphabetical.
   </para>
      </summary>
      <returns>
        <para>The new <see cref="T:System.ComponentModel.EventDescriptorCollection" /> .</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>
        <para> Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection" />
, given
a specified sort order.</para>
      </summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.EventDescriptor" /> objects in the collection.</param>
      <returns>
        <para>The new <see cref="T:System.ComponentModel.EventDescriptorCollection" /> .</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>
        <para> Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection" /> , given a specified sort
   order and an <see cref="T:System.Collections.IComparer" />
   .</para>
      </summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.EventDescriptor" /> objects in the collection.</param>
      <param name="comparer">An <see cref="T:System.Collections.IComparer" /> to use to sort the <see cref="T:System.ComponentModel.EventDescriptor" /> objects in this collection.</param>
      <returns>
        <para>The new <see cref="T:System.ComponentModel.EventDescriptorCollection" /> .</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>
        <para> Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection" /> , using the specified
<see cref="T:System.Collections.IComparer" /> 
.</para>
      </summary>
      <param name="comparer">An <see cref="T:System.Collections.IComparer" /> to use to sort the <see cref="T:System.ComponentModel.EventDescriptor" /> objects in this collection.</param>
      <returns>
        <para>The new <see cref="T:System.ComponentModel.EventDescriptorCollection" /> .</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>
        <para> Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection" />
. The specified order is applied first, followed by
the default sort for this collection, which is usually alphabetical.</para>
      </summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.EventDescriptor" /> objects in this collection.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>
        <para>Sorts the members of this <see cref="T:System.ComponentModel.EventDescriptorCollection" /> , using
   the specified <see cref="T:System.Collections.IComparer" /> .</para>
      </summary>
      <param name="sorter">A comparer to use to sort the <see cref="T:System.ComponentModel.EventDescriptor" /> objects in this collection.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>
        <para> Gets the number
      of event descriptors in the collection.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>
        <para>Gets the event with the specified index
      number.</para>
      </summary>
      <param name="index">The zero-based index number of the <see cref="T:System.ComponentModel.EventDescriptor" /> to get from the collection.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>
        <para>Gets the event with the specified name.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.ComponentModel.EventDescriptor" /> to get from the collection.</param>
    </member>
    <member name="T:System.ComponentModel.EventHandlerList">
      <summary>
        <para>Provides a simple list of delegates. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandler(System.Object,System.Delegate)">
      <summary>
        <para>Adds a delegate to the list.</para>
      </summary>
      <param name="key">The object that owns the event.</param>
      <param name=" value">The delegate to add to the list.</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.RemoveHandler(System.Object,System.Delegate)">
      <summary>
        <para>Removes a delegate from the list.</para>
      </summary>
      <param name="key">The object that owns the event.</param>
      <param name=" value">The delegate to remove from the list.</param>
    </member>
    <member name="P:System.ComponentModel.EventHandlerList.Item(System.Object)">
      <summary>
        <para>Gets or sets the delegate for the specified object.</para>
      </summary>
      <param name="key">An object to find in the list.</param>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>
        <para>Provides
      a type converter to convert expandable objects to and from various
      other representations.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ExtendedPropertyDescriptor.#ctor(System.ComponentModel.ReflectPropertyDescriptor,System.Type,System.ComponentModel.IExtenderProvider)">
    </member>
    <member name="M:System.ComponentModel.ExtendedPropertyDescriptor.#ctor(System.ComponentModel.ReflectPropertyDescriptor,System.Type,System.ComponentModel.IExtenderProvider,System.Attribute[])">
    </member>
    <member name="M:System.ComponentModel.ExtendedPropertyDescriptor.CanResetValue(System.Object)">
    </member>
    <member name="M:System.ComponentModel.ExtendedPropertyDescriptor.GetValue(System.Object)">
    </member>
    <member name="M:System.ComponentModel.ExtendedPropertyDescriptor.ResetValue(System.Object)">
    </member>
    <member name="M:System.ComponentModel.ExtendedPropertyDescriptor.SetValue(System.Object,System.Object)">
    </member>
    <member name="M:System.ComponentModel.ExtendedPropertyDescriptor.ShouldSerializeValue(System.Object)">
    </member>
    <member name="P:System.ComponentModel.ExtendedPropertyDescriptor.ComponentType">
    </member>
    <member name="P:System.ComponentModel.ExtendedPropertyDescriptor.IsReadOnly">
    </member>
    <member name="P:System.ComponentModel.ExtendedPropertyDescriptor.PropertyType">
    </member>
    <member name="P:System.ComponentModel.ExtendedPropertyDescriptor.DisplayName">
    </member>
    <member name="P:System.ComponentModel.ExtendedPropertyDescriptor.Provider">
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>
        <para>Provides a type converter to convert <see cref="T:System.Guid" />
objects to and from various
other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>
        <para>Provides the features required to support both complex
      and simple scenarios when binding to a data source.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>
        <para>Adds a new item to the list.</para>
      </summary>
      <returns>
        <para>The item added to the list.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
        <para>Adds the <see cref="T:System.ComponentModel.PropertyDescriptor" /> to the indexes used for searching.</para>
      </summary>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to add to the indexes used for searching.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
        <para>Sorts the list based on a <see cref="T:System.ComponentModel.PropertyDescriptor" /> and a <see cref="T:System.ComponentModel.ListSortDirection" />
.</para>
      </summary>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to sort by.</param>
      <param name=" direction">One of the <see cref="T:System.ComponentModel.ListSortDirection" /> values.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
        <para>Returns the index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor" />.</para>
      </summary>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to search on.</param>
      <param name=" key">The value of the <paramref name="property" /> parameter to search for.</param>
      <returns>
        <para>The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
        <para>Removes the <see cref="T:System.ComponentModel.PropertyDescriptor" /> from the indexes used for searching.</para>
      </summary>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to remove from the indexes used for searching.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>
        <para>Removes any sort applied using <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> .</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>
        <para>Gets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew" /> .</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>
        <para>Gets whether you can update items in the list.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>
        <para> Gets whether you can remove items from the list,
      using <see cref="M:System.Collections.IList.Remove(System.Object)" /> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      .</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>
        <para> Gets whether a <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> event is raised when the list changes or
   an item in the list changes.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>
        <para> Gets whether the list supports searching using 
      the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> method.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>
        <para> Gets whether the list supports sorting.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>
        <para> Gets whether the items in the list are sorted.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> that is being used
   for sorting.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>
        <para> Gets the direction of the sort.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>
        <para>Occurs when the list changes or an item in the list changes.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>
        <para>Provides an interface that supplies custom type information for an
      object.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>
        <para>Returns a collection of type <see cref="T:System.Attribute" />
for this object.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.ComponentModel.AttributeCollection" /> with the attributes for this object.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>
        <para>Returns the class name of this object.</para>
      </summary>
      <returns>
        <para>The class name of the object, or <see langword="null " /> if the class does not have a name.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>
        <para>Returns the name of this object.</para>
      </summary>
      <returns>
        <para>The name of the object, or <see langword="null " /> if object does not have a name.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>
        <para>Returns a type converter for this object.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.ComponentModel.TypeConverter" /> that is the converter for this object, or
<see langword="null " />if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this
   object.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>
        <para>Returns the default event for this object.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptor" /> that represents the default event for
   this object, or <see langword="null " />if this object does not have events.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>
        <para>Returns the default property for this object.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that
   represents the default property for this object, or <see langword="null " />if
   this object does not have properties.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>
        <para>Returns an editor of the specified type for this object.</para>
      </summary>
      <param name="editorBaseType">A <see cref="T:System.Type" /> that represents the editor for this object.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> of the specified type that is the editor for this object,
   or <see langword="null " />if the
   editor cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>
        <para>Returns the events for this instance of a component.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that
 represents the events for this component instance.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>
        <para>Returns the events for this instance of a component using the attribute array as a
 filter.</para>
      </summary>
      <param name="attributes">
        <para>An array of type <see cref="T:System.Attribute" /> that is used as a filter.</para>
      </param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that
 represents
 the events for this component instance that match the given set of
 attributes.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>
        <para>Returns the properties for this instance of a component.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that
 represents
 the properties for this component instance.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>
        <para>Returns the properties for this instance of a component using the attribute array as a filter.</para>
      </summary>
      <param name="attributes">
        <para>An array of type <see cref="T:System.Attribute" /> that is used as a filter.</para>
      </param>
      <returns>
        <para>An array of type <see cref="T:System.Attribute" /> that represents the properties for this
 component instance that match the given set of attributes.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>
        <para> Returns the object that this value is a member of.</para>
      </summary>
      <param name="pd">
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property whose owner is to be found.</para>
      </param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the owner of the specified property.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>
        <para>Provides the functionality to offer custom
      error information that a user interface can bind to.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>
        <para> Gets the error message for the property with the given name.</para>
      </summary>
      <param name="columnName">The name of the property whose error message to get.</param>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>
        <para>Gets an error message indicating what is wrong with this object.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>
        <para>Provides functionality to commit or rollback changes to an object that is used as a data source.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>
        <para>Begins
      an edit on an object.
      </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>
        <para> Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> or <see cref="M:System.ComponentModel.IBindingList.AddNew" qualify="true" /> call into the underlying
 object.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>
        <para>Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" />
call.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>
        <para>Defines the interface
       for extending properties to other components in a container.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>
        <para>Specifies
       whether this object can provide its extender properties to
       the specified object.</para>
      </summary>
      <param name="extendee">The <see cref="T:System.Object" /> to receive the extender properties.</param>
      <returns>
        <para>
          <see langword="true " />if this 
    object can provide extender properties to the specified object;
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>
        <para>Provides functionality to an object to return a list that can be bound to a data source.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>
        <para> Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source
   from
   an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</para>
      </summary>
      <returns>
        <para> An <see cref="T:System.Collections.IList" /> that can be bound to a data source
   from
   the object.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>
        <para>Gets a value indicating whether the collection is a collection
      of <see cref="T:System.Collections.IList" /> objects.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ImmutableObjectAttribute">
      <summary>
        <para> Specifies that an object has no subproperties capable of being edited.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Yes">
      <summary>
        <para> Specifies that an object has no subproperties that can be
      edited. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.No">
      <summary>
        <para> Specifies that an object has at least one editable
      subproperty. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ImmutableObjectAttribute" /> class.</para>
      </summary>
      <param name="immutable">
        <see langword="true" /> if the object is immutable; otherwise, <see langword="false" /> .</param>
    </member>
    <member name="P:System.ComponentModel.ImmutableObjectAttribute.Immutable">
      <summary>
        <para>Gets whether the object is immutable.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>
        <para> Specifies
      the installer for a type that installs components.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.InstallerTypeAttribute" />
class, when given a <see cref="T:System.Type" /> that represents the installer for a component.</para>
      </summary>
      <param name="installerType">
        <para>A <see cref="T:System.Type" /> that represents the installer for the component this attribute is bound to. This class must implement <see cref="T:System.ComponentModel.Design.IDesigner" /> .</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> class with 
   the name of the component's installer type.</para>
      </summary>
      <param name="typeName">The name of a <see cref="T:System.Type" /> that represents the installer for the component this attribute is bound to. This class must implement <see cref="T:System.ComponentModel.Design.IDesigner" /> .</param>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>
        <para> Gets the
      type of installer associated with this attribute.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>
        <para> Provides a type converter to convert 16-bit signed integer objects
 to and from other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>
        <para> Provides a type converter to convert 32-bit signed integer objects to
 and from other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>
        <para>Provides a type converter to convert 64-bit signed integer objects to and
 from various other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ISupportInitialize">
      <summary>
        <para>Specifies that this object supports
       a simple,
       transacted notification for batch initialization.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.BeginInit">
      <summary>
        <para>
       Signals
       the object that initialization is starting.
    </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.EndInit">
      <summary>
        <para>
       Signals the object that initialization is
       complete.
    </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ISynchronizeInvoke">
      <summary>
        <para>Provides a way to synchronously or asynchronously execute a delegate.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
      <summary>
        <para> Executes the delegate on the main thread that this object executes on.
      </para>
      </summary>
      <param name="method">A <see cref="T:System.Delegate" /> to a method that takes parameters of the same number and type that are contained in <paramref name="args" /> . </param>
      <param name="args">An array of type <see cref="T:System.Object" /> to pass as arguments to the given method. This can be <see langword="null" /> if no arguments are needed. </param>
      <returns>
        <para> An <see cref="T:System.IAsyncResult" /> interface that
   represents the asynchronous operation started by calling this method.
   </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
      <summary>
        <para> Waits until the process started by
      calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> completes, and then returns
      the value generated by the process.</para>
      </summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />. </param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents the return value generated by the asynchronous operation.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
      <summary>
        <para> Executes the delegate on the main thread that this object
      executes on.</para>
      </summary>
      <param name="method">A <see cref="T:System.Delegate" /> that contains a method to call, in the context of the thread for the control. </param>
      <param name="args">An array of type <see cref="T:System.Object" /> that represents the arguments to pass to the given method. This can be <see langword="null" /> if no arguments are needed.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents the return value from the delegate being
   invoked, or <see langword="null" /> if the delegate has no return value.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
      <summary>
        <para>Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> when calling an object that implements
   this interface.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>
        <para> Provides information about the context information of a component, for
      example, the container that it is in and its <see cref="T:System.ComponentModel.PropertyDescriptor" />
      . The primary use of this interface is in type conversion.
      </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>
        <para>Returns a value indicating whether this object can be changed.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if this object can be changed; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>
        <para>Raises the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />
event.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>
        <para>Gets the container representing this <see cref="T:System.ComponentModel.TypeDescriptor" /> request.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>
        <para>Gets the instance of the object that is connected with 
 this <see cref="T:System.ComponentModel.TypeDescriptor" /> request.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>
        <para>Gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> 
that describes the given context item.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>
        <para>Provides functionality to discover the schema for a 
      bindable list, where the properties available for binding differ from the public
      properties of the object to bind to. For instance, using a <see cref="T:System.Data.DataView" /> object
      that represents a customer table, you want to bind to the properties on the
      customer object that the <see cref="T:System.Data.DataView" /> represents, not the properties of the <see cref="T:System.Data.DataView" />
      
      .</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>
        <para>Returns the name of the list.</para>
      </summary>
      <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects, the list name for which is returned. This can be <see langword="null" /> .</param>
      <returns>
        <para>The name of the list.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>
        <para>Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the properties on each item
   used to bind data.</para>
      </summary>
      <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects to find in the collection as bindable. This can be <see langword="null" /> .</param>
      <returns>
        <para> The <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
that represents the properties on each item used to bind data.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>
        <para>Provides the <see langword="abstract" /> base class for all licenses. A license is
 granted to a specific instance of a component.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>
        <para>When overridden in a derived
      class, disposes of the resources used by the license.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>
        <para>When overridden in a derived class, gets the license key granted to this component.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>
        <para>Specifies when you can use a licensed object and
 provides a way of obtaining additional services needed to support licenses running within its domain.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>
        <para>When overridden in a derived class, returns a saved license
      key for the specified type, from the specified resource assembly.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of component.</param>
      <param name="resourceAssembly">An <see cref="T:System.Reflection.Assembly" /> with the license key.</param>
      <returns>
        <para>The <see cref="P:System.ComponentModel.License.LicenseKey" /> for
   the specified type. This method returns <see langword="null" /> unless you override
   it. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>
        <para>Gets the requested service, if it is available.</para>
      </summary>
      <param name="type">The type of service to retrieve.</param>
      <returns>
        <para>An instance of the service, or <see langword="null" /> 
if the service cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>
        <para> When overridden in a derived class, sets a license key for the specified type.
      </para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the component associated with the license key. </param>
      <param name="key">The <see cref="P:System.ComponentModel.License.LicenseKey" /> to save for the type of component. </param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>
        <para>When overridden in a derived class, gets a value that specifies when you can use a license.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>
        <para>Represents the exception thrown when a component cannot be granted a license.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseException" /> class for the type of component that was denied
   a license.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of component that was not granted a license.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseException" /> class for the type and the instance of the component
   that was denied a license.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of component that was not granted a license.</param>
      <param name="instance">The instance of the component that was not granted a license.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseException" /> class for the type and the instance of the component that
   was denied a license, along with a message to display.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of component that was not granted a license.</param>
      <param name="instance">The instance of the component that was not granted a license.</param>
      <param name="message">The exception message to display.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseException" /> class for the type and the instance of the component that was
   denied a license, along with
   a message to display and the original exception thrown.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of component that was not granted a license.</param>
      <param name="instance">The instance of the component that was not granted a license.</param>
      <param name="message">The exception message to display.</param>
      <param name="innerException">
        <para>An <see cref="T:System.Exception" /> that represents the original exception. </para>
      </param>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>
        <para>Gets the type of the component that was not granted a license.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>
        <para>Provides properties and methods to add a license
 to a component and to manage a <see cref="T:System.ComponentModel.LicenseProvider" />. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>
        <para> Creates an instance of the
      specified
      type, given a context in which you can use the licensed instance.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type to create.</param>
      <param name="creationContext">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed instance.</param>
      <returns>
        <para>An instance of the specified type.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>
        <para> Creates an instance of the specified type
      with the specified arguments, given a context in which you can
      use the licensed instance.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type to create.</param>
      <param name="creationContext">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed instance.</param>
      <param name="args">An array of type <see cref="T:System.Object" /> that represents the arguments for the type.</param>
      <returns>
        <para>An instance of the specified type with the given array of
      arguments.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>
        <para> Returns whether the given type has a valid license.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> to find a valid license for.</param>
      <returns>
        <para>
          <see langword="true" /> if the given type is licensed;
   otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>
        <para>Determines whether a valid license can be granted for the specified type.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of object that requests the <see cref="T:System.ComponentModel.License" />.</param>
      <returns>
        <para>
          <see langword="true " />if a valid license can be granted; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>
        <para>Determines whether a valid license can be granted for the
      specified instance of the type. This method creates a valid <see cref="T:System.ComponentModel.License" />. </para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</param>
      <param name="instance">An object of the specified type or a type derived from the specified type.</param>
      <param name="license">
        <para>When this method returns, it contains a <see cref="T:System.ComponentModel.License" /> that is a valid license or <see langword="null" />, if a valid license cannot be granted.</para>
      </param>
      <returns>
        <para>
          <see langword="true " />if a valid <see cref="T:System.ComponentModel.License" />
can be granted; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>
        <para>Prevents changes being made to the current <see cref="T:System.ComponentModel.LicenseContext" /> of
   the given object.</para>
      </summary>
      <param name="contextUser">The object whose current context you want to lock.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>
        <para> Allows changes to be made to the current <see cref="T:System.ComponentModel.LicenseContext" /> of the given object.</para>
      </summary>
      <param name="contextUser">The object whose current context you want to unlock.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>
        <para>Determines whether a license can be granted for the specified type.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>
        <para>Determines whether a license can be granted for the instance of the specified type.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of object that wants the license.</param>
      <param name="instance">An <see cref="T:System.Object" /> of the specified type or a type derived from the specified type.</param>
      <returns>
        <para>A valid <see cref="T:System.ComponentModel.License" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>
        <para>Gets or sets the current <see cref="T:System.ComponentModel.LicenseContext" />, which specifies when you can use the licensed
   object.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>
        <para>Gets the <see cref="T:System.ComponentModel.LicenseUsageMode" /> which
   specifies when you can use the licensed object for the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>
        <para>Provides the <see langword="abstract" /> base class for implementing a license
 provider.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>
        <para> When overridden in a derived class, gets a license for an instance
 or type of component, when given a context and whether the denial of a license throws an exception.
 </para>
      </summary>
      <param name="context">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies where you can use the licensed object. </param>
      <param name="type">A <see cref="T:System.Type" /> that represents the component requesting the license. </param>
      <param name="instance">
        <para> An object that is requesting the license.</para>
      </param>
      <param name="allowExceptions">
        <see langword="true" /> if a <see cref="T:System.ComponentModel.LicenseException" /> should be thrown when the component cannot be granted a license; otherwise, <see langword="false" />. </param>
      <returns>
        <para> A valid <see cref="T:System.ComponentModel.License" />.
 </para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>
        <para>Specifies the <see cref="T:System.ComponentModel.LicenseProvider" />
to use with a class.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> class without a license
    provider.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> class with
       the specified type.
    </para>
      </summary>
      <param name="typeName">
    The fully qualified name of the license provider class.
 </param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> class with
       the specified type of license provider.
    </para>
      </summary>
      <param name="type">
    A <see cref="T:System.Type" /> that represents the type of the license provider class.
 </param>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>
        <para>Gets the license provider that must be used with the associated class.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>
        <para>Specifies when the <see cref="T:System.ComponentModel.License" /> can be used.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>
        <para>
       Used during runtime.
    </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>
        <para>
       Used during design time by a visual designer or the compiler.
    </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>
        <para>Provides an implementation of a <see cref="T:System.ComponentModel.LicenseProvider" />. The provider works in a
   similar fashion to the Microsoft .NET Framework standard licensing module.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>
        <para>Determines whether the key that the <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> method retrieves is valid
   for the specified type.</para>
      </summary>
      <param name="key">The <see cref="P:System.ComponentModel.License.LicenseKey" /> to check.</param>
      <param name="type">
        <para>A <see cref="T:System.Type" /> that represents the component requesting the <see cref="T:System.ComponentModel.License" />. </para>
      </param>
      <returns>
        <para>
          <see langword="true " />if the key is a valid <see cref="P:System.ComponentModel.License.LicenseKey" /> for the
   specified type; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>
        <para>Returns a key for the specified type.</para>
      </summary>
      <param name="type">The object type to return the key.</param>
      <returns>
        <para>A confirmation that the <paramref name="type" /> parameter is licensed.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>
        <para>Returns a license for the instance of the
      component, if one is available .</para>
      </summary>
      <param name="context">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies where you can use the licensed object.</param>
      <param name="type">A <see cref="T:System.Type" /> that represents the component requesting the <see cref="T:System.ComponentModel.License" />.</param>
      <param name="instance">An object that requests the <see cref="T:System.ComponentModel.License" />.</param>
      <param name="allowExceptions">
        <see langword="true" /> if a <see cref="T:System.ComponentModel.LicenseException" /> should be thrown when a component cannot be granted a license; otherwise, <see langword="false" />.</param>
      <returns>
        <para>A valid <see cref="T:System.ComponentModel.License" />. If this method cannot find a valid
<see cref="T:System.ComponentModel.License" /> or a valid 
<paramref name="context" /> parameter, it returns <see langword="null" />.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>
        <para>Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>
        <para>Specifies that the list is bindable. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>
        <para>Specifies that the list is not bindable. This
      <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ListBindableAttribute" /> class using
   a value to indicate whether the list is bindable.</para>
      </summary>
      <param name="listBindable">
        <see langword="true" /> if the list is bindable; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ListBindableAttribute" /> class
   using <see cref="T:System.ComponentModel.BindableSupport" /> to
   indicate whether the list is bindable.</para>
      </summary>
      <param name="flags">A <see cref="T:System.ComponentModel.BindableSupport" /> that indicates whether the list is bindable.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>
        <para>Returns whether <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> is set to the default value.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> is set to the default value; otherwise,
<see langword="false" /> .</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>
        <para>Gets whether the list is bindable.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs" /> class, when 
   given
   the way the list changed
   and the new size of the collection.</para>
      </summary>
      <param name="listChangedType">One of the <see cref="T:System.ComponentModel.ListChangedType" /> values.</param>
      <param name=" newIndex">The new index of the item in the list.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs" /> class, with the
 way the list changed and a <see cref="T:System.ComponentModel.PropertyDescriptor" /> .</para>
      </summary>
      <param name="listChangedType">One of the <see cref="T:System.ComponentModel.ListChangedType" /> values.</param>
      <param name=" propDesc">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that was added, removed, or changed.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ListChangedEventArgs" /> class.</para>
      </summary>
      <param name="listChangedType">One of the <see cref="T:System.ComponentModel.ListChangedType" /> values.</param>
      <param name=" newIndex">The new index of the item in the list. </param>
      <param name=" oldIndex">The old index of the item in the list.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>
        <para> Gets the way that the list changed.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>
        <para> Gets
      the new index of the item in the list. </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>
        <para>Gets the old index of the item in the list. </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> event of the <see cref="T:System.ComponentModel.IBindingList" />
class.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.ComponentModel.ListChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>
        <para>Specifies how the list changed.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>
        <para> Much of the list has
      changed. Any listening controls should refresh all their data from the list.
      </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>
        <para> An item added to the list. <see cref="F:System.ComponentModel.ListChangedEventArgs.NewIndex" qualify="true" /> contains the index of the item that was added.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>
        <para>An item deleted from the list. <see cref="F:System.ComponentModel.ListChangedEventArgs.NewIndex" qualify="true" /> contains the index of the item that was deleted.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>
        <para>An item moved within the list. <see cref="F:System.ComponentModel.ListChangedEventArgs.OldIndex" qualify="true" /> contains 
   the previous index for the item,
   whereas <see cref="F:System.ComponentModel.ListChangedEventArgs.NewIndex" qualify="true" /> contains the new index for the item.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>
        <para> An item changed in the list. <see cref="F:System.ComponentModel.ListChangedEventArgs.NewIndex" qualify="true" /> contains the index of the item that was changed.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> was added, which
   changed the schema.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> was deleted, which
   changed the schema.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> was changed, which
   changed the schema.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>
        <para>Specifies the direction of a sort operation.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>
        <para>Sorts in ascending order.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>
        <para>Sorts in descending order.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.LocalizableAttribute">
      <summary>
        <para>Specifies whether a property should be localized.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.#ctor(System.Boolean)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.LocalizableAttribute" /> class.
    </para>
      </summary>
      <param name="isLocalizable">
        <see langword="true" /> if a property should be localized; otherwise, <see langword="false" />.
 </param>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Yes">
      <summary>
        <para>Specifies that a property should be localized. This <see langword="static" /> field is read-only. </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.No">
      <summary>
        <para>Specifies that a property should not be localized. This
      <see langword="static" /> field is read-only. </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.LocalizableAttribute.IsLocalizable">
      <summary>
        <para>Gets a value indicating whether
       a property should be localized.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>
        <para> Implements <see cref="T:System.ComponentModel.IComponent" /> and provides the base implementation for
   remotable components that are marshaled by value (a copy of the serialized object is passed).</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MarshalByValueComponent" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>
        <para> Releases all resources used by
      the <see cref="T:System.ComponentModel.MarshalByValueComponent" /> .</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.MarshalByValueComponent" /> and optionally releases the managed
   resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>
        <para>Gets the implementer of the <see cref="T:System.IServiceProvider" />.</para>
      </summary>
      <param name="service">A <see cref="T:System.Type" /> that represents the type of service you want.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents the implementer of the <see cref="T:System.IServiceProvider" />.</para>
      </returns>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>
        <para>Adds an event handler to listen to the <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> event on the component.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>
        <para>Gets the list of event handlers that are attached to this component.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>
        <para>Gets or sets the site of the component.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>
        <para>Gets the container for the component.</para>
      </summary>
      <returns>
        <para>An object implementing the <see cref="T:System.ComponentModel.IContainer" /> interface that
    represents the component's container, or <see langword="null " />if the component
    does not have a site.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>
        <para>Gets a value indicating whether the component is currently in design mode.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if the component is in design mode; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>
        <para>Represents a collection of attributes.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>
        <para>Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.AttributeCollection" /> class.</para>
      </summary>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that provides the attributes for this collection.</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>
        <para>Determines whether this collection of attributes has the
      specified attribute.</para>
      </summary>
      <param name="attribute">
        <para>An <see cref="T:System.Attribute" /> to find in the collection.</para>
      </param>
      <returns>
        <para>
          <see langword="true " />if the
   collection contains the attribute or is the default attribute for the type of
   attribute;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>
        <para> Determines whether this attribute collection contains all
      the specified attributes
      in the attribute array.</para>
      </summary>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> to find in the collection.</param>
      <returns>
        <para>
          <see langword="true " />if the
   collection contains all the attributes; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>
        <para>Returns the default <see cref="T:System.Attribute" /> of a given <see cref="T:System.Type" /> .</para>
      </summary>
      <param name="attributeType">The <see cref="T:System.Type" /> of the attribute to retrieve.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> .</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>
        <para>Gets an enumerator for this collection.</para>
      </summary>
      <returns>
        <para>An enumerator of type <see cref="T:System.Collections.IEnumerator" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>
        <para> Determines whether a specified attribute
      is the same as an attribute
      in the collection.</para>
      </summary>
      <param name="attribute">An instance of <see cref="T:System.Attribute" /> to compare with the attributes in this collection.</param>
      <returns>
        <para>
          <see langword="true " />if the
   attribute is contained within the collection and has
   the same value as the attribute in the collection; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>
        <para> Determines whether the attributes
      in the specified array are
      the same as the attributes in the collection.</para>
      </summary>
      <param name="attributes">An array of <see cref="T:System.CodeDom.MemberAttributes" /> to compare with the attributes in this collection.</param>
      <returns>
        <para>
          <see langword="true " />if all the
   attributes
   in the array
   are contained in the collection and have the same values as the
   attributes in the collection; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the collection to an array, starting at the specified index.</para>
      </summary>
      <param name="array">The <see cref="T:System.Array" /> to copy the collection to.</param>
      <param name=" index">The index to start from.</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>
        <para> Gets the number of attributes.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>
        <para> Gets the attribute with the specified index
      number.
      </para>
      </summary>
      <param name="index">The zero-based index of <see cref="T:System.ComponentModel.AttributeCollection" />. </param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>
        <para>Gets the attribute
      with the specified type.</para>
      </summary>
      <param name="attributeType">The <see cref="T:System.Type" /> of the <see cref="T:System.Attribute" /> to get from the collection.</param>
    </member>
    <member name="T:System.ComponentModel.MergablePropertyAttribute">
      <summary>
        <para>Specifies that
      this property can be combined with properties belonging to
      other objects in a Properties window.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Yes">
      <summary>
        <para>Specifies that a property can be combined with properties
      belonging to other objects in a Properties window. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.No">
      <summary>
        <para>Specifies that a property cannot be combined with
      properties belonging to other objects in a Properties window. This <see langword="static" /> field is
      read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.#ctor(System.Boolean)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.MergablePropertyAttribute" />
       class.
    </para>
      </summary>
      <param name="allowMerge">
        <see langword="true" /> if this property can be combined with properties belonging to other objects in a Properties window; otherwise, <see langword="false" />.
 </param>
    </member>
    <member name="P:System.ComponentModel.MergablePropertyAttribute.AllowMerge">
      <summary>
        <para>Gets a value indicating whether this
       property can be combined with properties belonging to other objects in a
       Properties window.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>
        <para>Provides data for the <see langword="PropertyChanged" />
 event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />
 class.</para>
      </summary>
      <param name="propertyName">The name of the property that changed.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>
        <para>Gets the name of the property that changed.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>
        <para>Represents the method that will handle the
   <see langword="PropertyChanged" /> event raised when a
      property is changed on a component.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>
        <para>Specifies an empty collection that you can use instead
      of creating a new one with no items. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
class.</para>
      </summary>
      <param name="properties">An array of type <see cref="T:System.ComponentModel.PropertyDescriptor" /> that provides the properties for this collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>
        <para>Adds the specified <see cref="T:System.ComponentModel.PropertyDescriptor" /> to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to add to the collection.</param>
      <returns>
        <para>The index of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> that was added to the collection.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>
        <para>Removes all <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects from the collection.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>
        <para>Returns whether the collection contains the given <see cref="T:System.ComponentModel.PropertyDescriptor" /> .</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to find in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the collection contains the
   given <see cref="T:System.ComponentModel.PropertyDescriptor" />; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>
        <para>Returns the index of the given <see cref="T:System.ComponentModel.PropertyDescriptor" /> .</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to return the index of.</param>
      <returns>
        <para>The index of the given <see cref="T:System.ComponentModel.PropertyDescriptor" /> .</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>
        <para>Adds the <see cref="T:System.ComponentModel.PropertyDescriptor" /> to the collection at the specified index
   number.</para>
      </summary>
      <param name="index">The index at which to add the <paramref name="value" /> parameter to the collection.</param>
      <param name=" value">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to add to the collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>
        <para>Removes the specified <see cref="T:System.ComponentModel.PropertyDescriptor" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to remove from the collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the <see cref="T:System.ComponentModel.PropertyDescriptor" /> at the specified index from the collection.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> to remove from the collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>
        <para> Sorts the members of this collection, using the default sort for this collection,
      which is usually alphabetical.
      </para>
      </summary>
      <returns>
        <para>A new <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the sorted <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>
        <para> Sorts the members of this collection. The specified order is applied first, followed by
      the default sort for this collection, which is usually alphabetical.
      </para>
      </summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects in this collection.</param>
      <returns>
        <para>A new <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the sorted <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>
        <para> Sorts the members of this collection. The specified order is applied
      first, followed by the sort using the specified <see cref="T:System.Collections.IComparer" />
      .
      </para>
      </summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects in this collection.</param>
      <param name="comparer">A comparer to use to sort the <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects in this collection.</param>
      <returns>
        <para>A new <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the sorted <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>
        <para> Sorts the members of this collection, using the specified <see cref="T:System.Collections.IComparer" />
.</para>
      </summary>
      <param name="comparer">A comparer to use to sort the <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects in this collection.</param>
      <returns>
        <para>A new <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the sorted <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>
        <para> Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical. </para>
      </summary>
      <param name="names">An array of strings describing the order in which to sort the <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects in this collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>
        <para>Sorts the members of this collection, using the specified <see cref="T:System.Collections.IComparer" /> . </para>
      </summary>
      <param name="sorter">A comparer to use to sort the <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects in this collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>
        <para>Returns the <see cref="T:System.ComponentModel.PropertyDescriptor" /> with the specified name, using a Boolean to indicate whether to ignore
   case.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> to return from the collection.</param>
      <param name="ignoreCase">
        <see langword="true" /> if you want to ignore the case of the property name; otherwise, <see langword="false" />.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> with the
   specified name,
   or <see langword="null " /> if the property does not exist.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator for this class.</para>
      </summary>
      <returns>
        <para>An enumerator of type <see cref="T:System.Collections.IEnumerator" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para> Copies the entire collection to an array, starting at the specified
      index number.</para>
      </summary>
      <param name="array">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects to copy elements of the collection to.</param>
      <param name=" index">The index of the <paramref name="array" /> parameter at which copying begins.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>
        <para>Gets the number of property descriptors in the collection.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> at the specified index
   number.</para>
      </summary>
      <param name="index">The zero-based index of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> to get from the collection.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> with the specified name.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> to get from the collection.</param>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>
        <para>Specifies the name of the property that an implementor
      of <see cref="T:System.ComponentModel.IExtenderProvider" /> offers to other
      components.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> class with 
   the name of the property and its <see cref="T:System.Type" /> .</para>
      </summary>
      <param name="propertyName">The name of the method that provides an extender property.</param>
      <param name=" receiverType">The <see cref="T:System.Type" /> of the data type this property can extend.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> class with
   the name of the property and the type of its receiver.</para>
      </summary>
      <param name="propertyName">The name of the method that provides an extender property.</param>
      <param name=" receiverTypeName">The name of the data type this property can extend.</param>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>
        <para>Gets the name of a property that this class provides.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>
        <para> Gets the name of the data type this property can extend.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>
        <para>Specifies whether the property this attribute is bound to is read-only or
      read/write at design time.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Yes">
      <summary>
        <para>Specifies that the property this attribute is bound to is
      read-only and cannot be modified in the server explorer. This <see langword="static" /> field is
      read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.No">
      <summary>
        <para>Specifies that the property this attribute is bound to is
      read/write and can be modified at design time. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> class.</para>
      </summary>
      <param name="isReadOnly">
        <see langword="true" /> if the property this attribute is bound to is read-only; <see langword="false" /> if the property is read/write. </param>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the property this attribute is bound to is
       read-only.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>
        <para>Specifies that the property can be
      used as an application setting.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>
        <para>
       Initializes a new instance of
       the <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> class.
    </para>
      </summary>
      <param name="recommendedAsConfigurable">
        <see langword="true" /> if the property this attribute is bound to can be used as an application setting; otherwise, <see langword="false" />.
 </param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>
        <para>Specifies that a property cannot be used as an
      application setting. This <see langword="static" /> field is read-only. </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>
        <para>Specifies that a property can be used as an application
      setting. This <see langword="static" /> field is read-only.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>
        <para>Gets a value indicating whether the property this
       attribute is bound to can be used as an application setting.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.Type,System.String,System.Type,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.Type,System.String,System.Type)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute,System.Attribute)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute,System.Attribute,System.Attribute)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute,System.Attribute,System.Attribute,System.Attribute)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.ComponentModel.EventDescriptor,System.Attribute[])">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.ComponentModel.EventDescriptor,System.Attribute)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.ComponentModel.EventDescriptor,System.Attribute,System.Attribute)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.ComponentModel.EventDescriptor,System.Attribute,System.Attribute,System.Attribute)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.#ctor(System.ComponentModel.EventDescriptor,System.Attribute,System.Attribute,System.Attribute,System.Attribute)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.AddEventHandler(System.Object,System.Delegate)">
    </member>
    <member name="M:System.ComponentModel.ReflectEventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
    </member>
    <member name="P:System.ComponentModel.ReflectEventDescriptor.ComponentType">
    </member>
    <member name="P:System.ComponentModel.ReflectEventDescriptor.EventType">
    </member>
    <member name="P:System.ComponentModel.ReflectEventDescriptor.IsMulticast">
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>
    The main constructor for ReflectPropertyDescriptors.
 </summary>
      <param name="componentClass">The type of the component the property lives on.</param>
      <param name="name">The name of the property.</param>
      <param name="type">The type of the property.</param>
      <param name="attributes">The attributes of the property.</param>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>
    A constructor for ReflectPropertyDescriptors that have no attributes.
 </summary>
      <param name="componentClass">The type of the component the property lives on.</param>
      <param name="name">The name of the property.</param>
      <param name="type">The type of the property.</param>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Reflection.PropertyInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Attribute[])">
      <summary>
    A constructor for ReflectPropertyDescriptors that have no attributes.
 </summary>
      <param name="componentClass">The type of the component the property lives on.</param>
      <param name="name">The name of the property.</param>
      <param name="type">The type of the property.</param>
      <param name="propInfo">The the prop info for the property.</param>
      <param name="getMethod">The get method for the property.</param>
      <param name="setMethod">The set method of the property.</param>
      <param name="attrs">The array of extra attributes.</param>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Type,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Attribute[])">
      <summary>
     A constructor for ReflectPropertyDescriptors that creates an extender property.
 </summary>
      <param name="componentClass">
     The type of the component the property lives on.
 </param>
      <param name="name">
     The name of the property.
 </param>
      <param name="type">
     The type of the property.
 </param>
      <param name="receiverType">
     The receiver type of the extender.
 </param>
      <param name="getMethod">
     The get method for the property.
 </param>
      <param name="setMethod">
     The set method of the property.
 </param>
      <param name="attrs">
     The array of extra attributes.
 </param>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.#ctor(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>
     This constructor takes an existing ReflectPropertyDescriptor and modifies it by merging in the
     passed-in attributes.
 </summary>
      <param name="componentClass">The type of the component the property lives on.</param>
      <param name="oldReflectPropertyDescriptor">The existing property info.</param>
      <param name="attributes">The new attributes.</param>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
    Indicates whether reset will change the value of the component.  If there
    is a DefaultValueAttribute, then this will return true if getValue returns
    something different than the default value.  If there is a reset method and
    a shouldPersist method, this will return what shouldPersist returns.
    If there is just a reset method, this always returns true.  If none of these
    cases apply, this returns false.
 </summary>
      <param name="component">The component who's property's value we should test for resetability.</param>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.GetValue(System.Object)">
      <summary>
    Retrieves the current value of the property on component,
    invoking the getXXX method.  An exception in the getXXX
    method will pass through.
 </summary>
      <param name="component">The component who's property's value will be retrieved.</param>
      <returns>
    the value of the property for the given component.
 <see cref="T:System.ComponentModel.ReflectPropertyDescriptor" /></returns>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>
     This should be called by your property descriptor implementation
     when the property value has changed.
 </summary>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>
     Allows interested objects to be notified when this property changes.
 </summary>
      <param name="component">
     The component to remove the handler for.
 </param>
      <param name="handler">
     The handler to remove.
 </param>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.ResetValue(System.Object)">
      <summary>
    Will reset the default value for this property on the component.  If
    there was a default value passed in as a DefaultValueAttribute, that
    value will be set as the value of the property on the component.  If
    there was no default value passed in, a ResetXXX method will be looked
    for.  If one is found, it will be invoked.  If one is not found, this
    is a nop.
 </summary>
      <param name="component">The component who's property's value should be reset.</param>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
    This will set value to be the new value of this property on the
    component by invoking the setXXX method on the component.  If the
    value specified is invalid, the component should throw an exception
    which will be passed up.  The component designer should design the
    property so that getXXX following a setXXX should return the value
    passed in if no exception was thrown in the setXXX call.
 </summary>
      <param name="component">The component to set the property's value on.</param>
      <param name="value">The new value for the property on the component.</param>
    </member>
    <member name="M:System.ComponentModel.ReflectPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
        <para>Indicates whether the value of this property needs to be persisted. In
       other words, it indicates whether the state of the property is distinct
       from when the component is first instantiated. If there is a default
       value specified in this ReflectPropertyDescriptor, it will be compared against the
       property's current value to determine this. If there is't, the
       shouldPersistXXX method is looked for and invoked if found. If both
       these routes fail, true will be returned.
       If this returns false, a tool should not persist this property's value.</para>
      </summary>
      <param name="component">who's property should be examined for persistance.</param>
      <returns>
        <para>whether the property should be persisted.
       </para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.ReflectPropertyDescriptor.ComponentType">
      <summary>
    Retrieves the type of the component this PropertyDescriptor is bound to.
 </summary>
      <returns>
    the type of component.
 </returns>
    </member>
    <member name="P:System.ComponentModel.ReflectPropertyDescriptor.IsReadOnly">
      <summary>
    Indicates whether this property is read only.
 </summary>
      <returns>
    whether this property is read only.
 <see cref="T:System.ComponentModel.ReflectPropertyDescriptor" /></returns>
    </member>
    <member name="P:System.ComponentModel.ReflectPropertyDescriptor.PropertyType">
      <summary>
    Retrieves the type of the property.
 </summary>
      <returns>
    type of property.
 </returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.RefreshEventArgs" /> class with
    the component that has
    changed.</para>
      </summary>
      <param name="componentChanged"> The component that changed.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.RefreshEventArgs" /> class with
   the type
   of component that has changed.</para>
      </summary>
      <param name="typeChanged">The <see cref="T:System.Type" /> that changed.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>
        <para> Gets the component that changed
 its properties, events, or
 extenders.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>
        <para> Gets the <see cref="T:System.Type" /> that changed its properties or events.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>
        <para> Represents the method that handles the <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> event
 raised when a <see cref="T:System.Type" /> or component is changed during design time.</para>
      </summary>
      <param name="e">A <see cref="T:System.ComponentModel.RefreshEventArgs" /> that contains the component or <see cref="T:System.Type" /> that changed.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>
        <para>Specifies whether an installer should be invoked during
      installation of an assembly.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>
        <para>
       Initializes a new instance of
       the <see cref="T:System.ComponentModel.RunInstallerAttribute" /> class.
    </para>
      </summary>
      <param name="runInstaller">
        <see langword="true" /> if an installer should be invoked during installation of an assembly; otherwise, <see langword="false" />.
 </param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>
        <para>Specifies that a component is visible in a visual
      designer. This <see langword="static" /> field is
      read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>
        <para>Specifies that a component is not visible in a visual
      designer. This <see langword="static" /> field is
      read-only.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>
        <para>
       Gets a value indicating whether an installer should be
       invoked during installation of an assembly.
    </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>
        <para> Provides a type converter to convert
      8-bit unsigned integer objects to and from a string.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>
        <para> Provides a type
      converter to convert single-precision, floating point number objects to and from various other
      representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>
        <para> Provides a type converter to convert string objects to and from other
 representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>
        <para>Provides a type converter to convert <see cref="T:System.TimeSpan" />
objects to and
from other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>
        <para> Specifies the filter string and filter type to use for a toolbox
      item.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> class using the specified filter string.</para>
      </summary>
      <param name="filterString">The filter string for the toolbox item.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> class using the specified filter string and type.</para>
      </summary>
      <param name="filterString">The filter string for the toolbox item.</param>
      <param name=" filterType">A <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> indicating the type of the filter.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>
        <para>Indicates whether the specified object has a matching filter string.</para>
      </summary>
      <param name="obj"> The object to test for a matching filter string.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified object has a matching filter string;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>
        <para>Gets the filter string for the toolbox item.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>
        <para>Gets the type of the filter.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>
        <para>Gets the type ID for the attribute.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>
        <para>Defines identifiers used to indicate the type 
      of filter that a <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> uses.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>
        <para>Indicates that a toolbox item filter string is allowed, 
      but not required.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>
        <para>Indicates that custom processing is required to
      determine whether to use a toolbox item filter string. This type
      of <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> is typically specified on a root
      designer class to indicate that the designer wishes to accept or reject a
      toolbox item through code. The designer must implement the <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported" /> method of the <see cref="T:System.Drawing.Design.IToolboxUser" />
      
      interface.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>
        <para>Indicates that a toolbox item filter string is not 
      allowed. If a designer and a component class both have a filter string and
      one has a <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> of <see cref="F:System.ComponentModel.ToolboxItemFilterType.Prevent" />, the toolbox item will not be available.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>
        <para>Indicates that a toolbox item filter string must be 
      present for a toolbox item to be enabled. For a toolbox item with a filter type
      of <see cref="F:System.ComponentModel.ToolboxItemFilterType.Require" /> to be enabled, the designer and the
      component class must have a matching filter string. Additionally, neither
      the designer or component class can have a <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> of <see cref="F:System.ComponentModel.ToolboxItemFilterType.Prevent" />
      for the toolbox item to be enabled.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>
        <para>Specifies what type to use as
      a converter for the object
      this
      attribute is bound to. This class cannot
      be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverterAttribute" /> class with the
       default type converter, which
       is an
       empty string ("").
    </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverterAttribute" /> class, using 
    the specified type as the data converter for the object this attribute
    is bound
    to.</para>
      </summary>
      <param name="type">
        <para>A <see cref="T:System.Type" /> that represents the type of the converter class to use for data conversion for the object this attribute is bound to.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverterAttribute" /> class, using 
    the specified type name as the data converter for the object this attribute is bound to.</para>
      </summary>
      <param name="typeName">
        <para> The fully qualified name of the class to use for data conversion for the object this attribute is bound to.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>
        <para>Returns whether the value of the given object is equal 
      to the current <see cref="T:System.ComponentModel.TypeConverterAttribute" /> .</para>
      </summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of the given object
   is equal to that of the current; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>
        <para>Gets the fully qualified type name of the <see cref="T:System.Type" />
 to use as a converter for the object this attribute
 is bound to.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>
        <para>Provides information about the properties and events
      for a component. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>
        <para>Creates an instance of the designer associated with the 
       specified component and the type of designer to create.</para>
      </summary>
      <param name="component">
        <para> An <see cref="T:System.ComponentModel.IComponent" /> that specifies the component to associate with the designer.</para>
      </param>
      <param name="designerBaseType">A <see cref="T:System.Type" /> that represents the type of designer to create.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.Design.IDesigner" /> that is an instance of the 
    designer for the component,
    or <see langword="null" />
    if no designer can be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>
        <para> Creates a new event descriptor that is identical to 
      an existing event descriptor by dynamically generating
      descriptor information from a specified event on a type.</para>
      </summary>
      <param name="componentType">The type of the component the event lives on.</param>
      <param name="name">The name of the event.</param>
      <param name="type">The type of the delegate that handles the event.</param>
      <param name="attributes">The attributes for this event.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptor" /> that is bound to a type.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>
        <para> Creates a new event descriptor that is identical to an
      existing event descriptor, when passed the existing <see cref="T:System.ComponentModel.EventDescriptor" />
      .</para>
      </summary>
      <param name="componentType">The type of the component the event lives on. </param>
      <param name="oldEventDescriptor">The existing event information. </param>
      <param name="attributes">The new attributes. </param>
      <returns>
        <para>A new <see cref="T:System.ComponentModel.EventDescriptor" /> that has merged the specified metadata
   attributes with the existing metadata attributes.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>
        <para>Creates a new property descriptor that is identical to 
      an existing property descriptor by dynamically generating
      descriptor information from a specified property on a type.</para>
      </summary>
      <param name="componentType">The type of the component the property lives on. </param>
      <param name="name">The name of the property. </param>
      <param name="type">The type of the property. </param>
      <param name="attributes">The attributes for this property. </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that is bound to a type.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>
        <para> Creates a new property descriptor that is identical to an
 existing property descriptor, when passed the existing <see cref="T:System.ComponentModel.PropertyDescriptor" />
 .</para>
      </summary>
      <param name="componentType">The type of the component the property lives on. </param>
      <param name="oldPropertyDescriptor">The existing property descriptor. </param>
      <param name="attributes">The new attributes for this property. </param>
      <returns>
        <para>A new <see cref="T:System.ComponentModel.PropertyDescriptor" /> has the specified metadata attributes
 merged with the existing metadata attributes.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>
        <para> Gets the
      collection of attributes for the specified type of component.</para>
      </summary>
      <param name="componentType">A <see cref="T:System.Type" /> that represents the class of the component for which to get the attribute.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.AttributeCollection" /> with the attributes
   for the type of the component. If the component is <see langword="null" />,
   this method returns an empty collection.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>
        <para>Gets the collection of attributes for the specified
 component.</para>
      </summary>
      <param name="component">The component for which you want to get attributes.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.AttributeCollection" /> with the
 attributes for the component. If the component
 is <see langword="null" />, this method returns an empty collection.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>
        <para>Gets a collection of attributes for the specified
      component and a Boolean indicating that a custom type descriptor has been
      created.</para>
      </summary>
      <param name="component">The component for which you want to get attributes.</param>
      <param name="noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.AttributeCollection" /> with the
   attributes for the component. If the component
   is <see langword="null" />, this method returns an empty collection.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>
        <para>Gets the name of the class for the specified component using the default type descriptor. </para>
      </summary>
      <param name="component">
        <para>The <see cref="T:System.Object" /> for which you want the class name.</para>
      </param>
      <returns>
        <para>The name of the class for the specified component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>
        <para>Gets the name of the class for the specified component
 using a custom type descriptor.</para>
      </summary>
      <param name="component">
        <para>The <see cref="T:System.Object" /> for which you want the class name.</para>
      </param>
      <param name="noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para>The name of the class for the specified component. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>
        <para>Gets the name of the specified component using the default type descriptor.</para>
      </summary>
      <param name="component">
        <para>The <see cref="T:System.Object" /> for which you want the class name.</para>
      </param>
      <returns>
        <para> The name of the specified component. If there is no 
 component name, <see langword="null" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>
        <para> Gets the name of the specified component using a custom
 type descriptor. </para>
      </summary>
      <param name="component">
        <para>The <see cref="T:System.Object" /> for which you want the class name.</para>
      </param>
      <param name="noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para>The name of the class for the specified 
 component. If there is no component name, <see langword="null" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>
        <para>Gets a type converter for the type of the specified
 component.</para>
      </summary>
      <param name="component">A component to get the converter for.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.TypeConverter" /> for the specified component,
 or <see langword="null " />if a <see cref="T:System.ComponentModel.TypeConverter" /> cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>
        <para>Gets a type converter for the type of the specified component with a custom type
      descriptor.</para>
      </summary>
      <param name="component">A component to get the converter for.</param>
      <param name="noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.TypeConverter" /> for the specified component,
   or <see langword="null " />if a <see cref="T:System.ComponentModel.TypeConverter" /> cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>
        <para>Gets a type converter for the specified type.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of component to get the converter for.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.TypeConverter" /> for
   the specified type, or <see langword="null " />if a <see cref="T:System.ComponentModel.TypeConverter" /> cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>
        <para>
       Gets
       the default event for the specified
       type of component.
    </para>
      </summary>
      <param name="componentType">
    A <see cref="T:System.Type" /> that represents the type of component to get the event for.
 </param>
      <returns>
        <para>
       An <see cref="T:System.ComponentModel.EventDescriptor" /> with the default event, or <see langword="null " /> if there are no
       events.
    </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>
        <para>Gets the default event for the specified component.</para>
      </summary>
      <param name="component">The component to get the event for.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptor" /> with the default event, or <see langword="null " /> if there are no
    events.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>
        <para> Gets the default event for a component with a custom type descriptor.
      </para>
      </summary>
      <param name="component">The component to get the event for. </param>
      <param name=" noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para> An <see cref="T:System.ComponentModel.EventDescriptor" /> with the default event, or <see langword="null " /> if there are no
   events.
   </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>
        <para>
       Gets the default
       property for the
       specified type of component.
    </para>
      </summary>
      <param name="componentType">
    A <see cref="T:System.Type" /> that represents the class to get the property for.
 </param>
      <returns>
        <para>
       A <see cref="T:System.ComponentModel.PropertyDescriptor" /> with the
       default property, or <see langword="null " /> if there are no
       properties.
    </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>
        <para>Gets the default property for the specified 
       component.</para>
      </summary>
      <param name="component">The component to get the default property for.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> with the
    default property, or <see langword="null " /> if there are no
    properties.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>
        <para>Gets the default property for the specified component with a custom type
      descriptor.</para>
      </summary>
      <param name="component">The component to get the default property for.</param>
      <param name=" noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> with the
   default property, or <see langword="null " /> if there are no
   properties.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>
        <para>Gets an editor with the specified base type for the
      specified component.</para>
      </summary>
      <param name="component">The component to get the editor for.</param>
      <param name="editorBaseType">A <see cref="T:System.Type" /> that represents the base type of the editor you want to find.</param>
      <returns>
        <para> An instance of the editor that can be cast to the specified
      editor type.
      This returns <see langword="null " />
      if no editor of the requested type can be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>
        <para>Gets an editor with the specified base type and with a custom type descriptor for the
      specified component.</para>
      </summary>
      <param name="component">The component to get the editor for.</param>
      <param name="editorBaseType">A <see cref="T:System.Type" /> that represents the base type of the editor you want to find.</param>
      <param name="noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para>An instance of the editor that can be cast to the specified
      editor type. This returns <see langword="null " />if no editor of the
      requested type can be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>
        <para>Gets an editor with the specified base type for the specified type.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type to get the editor for.</param>
      <param name="editorBaseType">A <see cref="T:System.Type" /> that represents the base type of the editor you are trying to find.</param>
      <returns>
        <para>An instance of the editor object that can be cast to the
      given base type. This returns <see langword="null " />
      if no editor of the requested type can be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>
        <para>Gets the collection of events for a specified type of component.</para>
      </summary>
      <param name="componentType">A <see cref="T:System.Type" /> that represents the component to get events for.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> with the events for this component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>
        <para>Gets the collection of events for a specified
 component.</para>
      </summary>
      <param name="component">A component to get the events for.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> with the
 events for this component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>
        <para>Gets the collection of events for a specified component with a custom type
 descriptor.</para>
      </summary>
      <param name="component">A component to get the events for.</param>
      <param name="noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> with the
 events for this component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>
        <para> Gets the collection of events for a specified type of
      component using a specified array of attributes
      as a filter.</para>
      </summary>
      <param name="componentType">A <see cref="T:System.Type" /> that represents the component to get events for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that you can use as a filter.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> with the
   events that match the specified attributes
   for this component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>
        <para> Gets the collection of events for a specified component
      using a specified array of attributes
      as a filter.</para>
      </summary>
      <param name="component">A component to get the events for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that you can use as a filter.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> with the
   events that match the specified attributes for this component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>
        <para> Gets the collection of events for a specified component
 using a specified array of attributes as a filter and using a custom type
 descriptor.</para>
      </summary>
      <param name="component">A component to get the events for.</param>
      <param name="attributes">
        <para>An array of type <see cref="T:System.Attribute" /> to use as a filter. </para>
      </param>
      <param name="noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> with the
 events that match the specified attributes
 for this component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>
        <para> Gets the collection of properties for a specified type of
       component.</para>
      </summary>
      <param name="componentType">A <see cref="T:System.Type" /> that represents the component to get properties for.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the
    properties for a specified type of component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>
        <para>Gets the collection of properties for a specified
 component.</para>
      </summary>
      <param name="component">A component to get the properties for.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the
 properties for the specified component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>
        <para>Gets the collection of properties for a specified
      component using the default type descriptor.</para>
      </summary>
      <param name="component">A component to get the properties for.</param>
      <param name="noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the
   properties for a specified component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>
        <para> Gets the collection of properties for a specified type of
      component using a specified array of attributes as a filter.</para>
      </summary>
      <param name="componentType">A <see cref="T:System.Type" /> that represents the component to get properties for.</param>
      <param name="attributes">
        <para>An array of type <see cref="T:System.Attribute" /> to use as a filter. </para>
      </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the
   properties that match the specified attributes
   for this type of component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>
        <para> Gets the collection of properties for a specified
      component using a specified array of attributes
      as a filter.</para>
      </summary>
      <param name="component">A component to get the properties for.</param>
      <param name="attributes">
        <para>An array of type <see cref="T:System.Attribute" /> to use as a filter. </para>
      </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the
   properties that match the specified attributes for the specified component. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>
        <para> Gets the collection of properties for a specified component using a specified array
      of attributes as a filter and using a
      custom type descriptor.</para>
      </summary>
      <param name="component">A component to get the properties for.</param>
      <param name="attributes">
        <para>An array of type <see cref="T:System.Attribute" /> to use as a filter. </para>
      </param>
      <param name="noCustomTypeDesc">
        <para>
          <see langword="true" /> if an instance of <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> calls <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, <see langword="false" />. </para>
      </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the
   events that match the specified attributes for the specified component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>
        <para>Clears the properties and events for the specified
 component from the
 cache.</para>
      </summary>
      <param name="component">A component the properties or events of which have changed.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>
        <para>Clears the properties and events for the specified type
 of component from the
 cache.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type with properties or events that have changed.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>
        <para>Clears the properties and events for the specified
 module from the
 cache.</para>
      </summary>
      <param name="module">The <see cref="T:System.Reflection.Module" /> that represents the module to refresh. Each <see cref="T:System.Type" /> in this module will be refreshed.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>
        <para>Clears the properties and events for the specified
 assembly from the
 cache.</para>
      </summary>
      <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> that represents the assembly to refresh. Each <see cref="T:System.Type" /> in this assembly will be refreshed.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>
        <para>
       Sorts descriptors by name of the descriptor.
    </para>
      </summary>
      <param name="infos">
        <para>An <see cref="T:System.Collections.IList" /> that contains the descriptors to sort. </para>
      </param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>
        <para>Occurs when the <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> event is raised for a component.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.FilterMembers(System.Type,System.Collections.IList,System.Attribute[])">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetAttributes(System.Object)">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetComponentType">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetConverter">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetConverter(System.Object)">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetDefaultEvent(System.Object)">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetDefaultProperty(System.Object)">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetEditor(System.Type)">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetEditor(System.Object,System.Type)">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetEvents(System.Object,System.Attribute[])">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetEvents(System.Object,System.Attribute[],System.Boolean)">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetExtenders">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetProperties(System.Object,System.Attribute[])">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetProperties(System.Object,System.Attribute[],System.Boolean)">
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.ComponentEntry.GetTypeFromName(System.String)">
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>
        <para>Provides a type
       converter that can be used to populate a list box with available types.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>
        <para> Provides a type converter to convert 16-bit unsigned integer objects
 to and from other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>
        <para>Provides a type converter to convert 32-bit unsigned integer objects to and
 from various other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>
        <para> Provides a type converter to convert 64-bit unsigned integer objects
      to and from other representations.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.InvalidEnumArgumentException">
      <summary>
        <para> The exception thrown when using invalid arguments that are enumerators.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> class without a message.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> class with
 the specified message.</para>
      </summary>
      <param name="message">The message to display with this exception.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> class with a message generated 
    from the argument, the invalid value, and an enumeration
    class.</para>
      </summary>
      <param name="argumentName">The name of the argument that caused the exception.</param>
      <param name="invalidValue">The value of the argument that failed.</param>
      <param name="enumClass">
        <para>A <see cref="T:System.Type" /> that represents the enumeration class with the valid values.</para>
      </param>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>
        <para> Specifies an exception that is handled as a warning instead of an error.
 </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.WarningException" /> class with 
    the specified message and no Help file.</para>
      </summary>
      <param name="message">The message to display to the end user. </param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.WarningException" /> class with 
    the specified message, and with access to the specified Help file.</para>
      </summary>
      <param name="message">The message to display to the end user. </param>
      <param name="helpUrl">The Help file to display if the user requests help. </param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.WarningException" /> class with the 
    specified message, and with access to the specified Help file and topic.</para>
      </summary>
      <param name="message">The message to display to the end user.</param>
      <param name="helpUrl">The Help file to display if the user requests help.</param>
      <param name="helpTopic">The Help topic to display if the user requests help.</param>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>
        <para>Gets the Help file associated with the warning.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>
        <para> Gets the Help topic associated with the warning. </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Win32Exception">
      <summary>
        <para>The exception that is thrown for a Win32 error code.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception" /> class with the last Win32 error 
    that occurred.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception" /> class with the specified error.</para>
      </summary>
      <param name="error"> The Win32 error code associated with this exception. </param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Int32,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception" /> class with the specified error and the
 specified detailed description.</para>
      </summary>
      <param name="error"> The Win32 error code associated with this exception.</param>
      <param name="message">A detailed description of the error.</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception" /> class with the specified context and
   the serialization information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with this exception.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that represents the context of this exception.</param>
    </member>
    <member name="P:System.ComponentModel.Win32Exception.NativeErrorCode">
      <summary>
        <para> Gets the Win32 error code associated 
       with this exception.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.BooleanSwitch">
      <summary>
        <para> Provides a simple on/off switch that controls debugging and tracing
 output.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.Switch">
      <summary>
        <para>Provides an <see langword="abstract " />base class to
 create new debugging and tracing switches.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Switch.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.Switch" />
class.</para>
      </summary>
      <param name="displayName">The name of the switch.</param>
      <param name="description">The description for the switch.</param>
    </member>
    <member name="M:System.Diagnostics.Switch.OnSwitchSettingChanged">
      <summary>
        <para> Raises the <see langword="SwitchSettingChanged" />
event.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Switch.DisplayName">
      <summary>
        <para>Gets a name used to identify the switch.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Switch.Description">
      <summary>
        <para>Gets a description of the switch.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Switch.SwitchSetting">
      <summary>
        <para>Gets or sets the current setting for this switch.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.BooleanSwitch" />
class.</para>
      </summary>
      <param name="displayName">The name to display on a user interface.</param>
      <param name="description">The description of the switch.</param>
    </member>
    <member name="P:System.Diagnostics.BooleanSwitch.Enabled">
      <summary>
        <para>Specifies whether the switch is enabled or disabled.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>
        <para> Provides a set of methods and properties that help debug your code. This
      class
      cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Flush">
      <summary>
        <para> Flushes the output buffer and causes buffered
      data to write to the <see cref="P:System.Diagnostics.Debug.Listeners" />
      collection.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Close">
      <summary>
        <para>Flushes the output buffer and then closes the <see cref="P:System.Diagnostics.Debug.Listeners" />
.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>
        <para>Checks for a condition and outputs the call stack if the condition is <see langword="false" />.</para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" /> . </para>
      </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>
        <para>Checks for a condition and displays a message if the condition is
   <see langword="false" />. </para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="message">
        <para>A message to display.</para>
      </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>
        <para> Checks for a condition and displays both specified messages if the condition
      is <see langword="false" />. </para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="message">A message to display.</param>
      <param name="detailMessage">A detailed message to display.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Fail(System.String)">
      <summary>
        <para>Emits the specified error message.</para>
      </summary>
      <param name="message">A message to emit.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Fail(System.String,System.String)">
      <summary>
        <para>Emits an error message and a detailed error message.</para>
      </summary>
      <param name="message">A message to emit.</param>
      <param name="detailMessage">A detailed message to emit.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.String)">
      <summary>
        <para>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
      </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.Object)">
      <summary>
        <para> Writes the value of the object's <see cref="M:System.Object.ToString" />
method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.String,System.String)">
      <summary>
        <para>Writes a category name and message
      to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
      </summary>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.Object,System.String)">
      <summary>
        <para> Writes a category name and the value of the object's
   <see cref="M:System.Object.ToString" /> method to the trace
      listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>
        <para>Writes a message followed by a line terminator to the trace listeners in the
   <see cref="P:System.Diagnostics.Debug.Listeners" />
   collection.</para>
      </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>
        <para> Writes the value of the object's <see cref="M:System.Object.ToString" />
method to the
trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" />
collection.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)">
      <summary>
        <para> Writes a category name and message to the trace
      listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" />
      collection.</para>
      </summary>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)">
      <summary>
        <para> Writes a category name and the value of the object's
   <see cref="M:System.Object.ToString" />
   method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" />
   collection.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)">
      <summary>
        <para>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection
   if a condition is
<see langword="true" />. </para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="message">
        <para>A message to write. </para>
      </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)">
      <summary>
        <para> Writes the value of the object's <see cref="M:System.Object.ToString" />
method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" />
collection if a condition is
<see langword="true" />. </para>
      </summary>
      <param name="condition">
        <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> .</param>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)">
      <summary>
        <para>Writes a category name and message
      to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" />
      collection if a condition is
   <see langword="true" />. </para>
      </summary>
      <param name="condition">
        <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> .</param>
      <param name="message">
        <para>A message to write. </para>
      </param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)">
      <summary>
        <para> Writes a category name and the value of the object's
   <see cref="M:System.Object.ToString" />
   method to the trace
   listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is
<see langword="true" />. </para>
      </summary>
      <param name="condition">
        <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> .</param>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>
        <para> Writes a message to the trace listeners in the
   <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is
   <see langword="true" />
   .</para>
      </summary>
      <param name="condition">
        <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> .</param>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)">
      <summary>
        <para> Writes the value of the object's <see cref="M:System.Object.ToString" />
method to the
trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is
<see langword="true" /> 
.</para>
      </summary>
      <param name="condition">
        <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> .</param>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)">
      <summary>
        <para> Writes
      a category name and message to the trace
      listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is
   <see langword="true" />
   .</para>
      </summary>
      <param name="condition">
        <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> .</param>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)">
      <summary>
        <para> Writes a category name and the value of the object's
   <see cref="M:System.Object.ToString" />
   method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection
   if a condition is <see langword="true" />
   .</para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> .</para>
      </param>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Indent">
      <summary>
        <para>Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Unindent">
      <summary>
        <para>Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Debug.Listeners">
      <summary>
        <para>Gets
      the collection of listeners that is monitoring the debug
      output.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Debug.AutoFlush">
      <summary>
        <para>Gets or sets a value indicating whether <see cref="M:System.Diagnostics.Debug.Flush" /> should be called on the
<see cref="P:System.Diagnostics.Debug.Listeners" />
after every write.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Debug.IndentLevel">
      <summary>
        <para>Gets or sets
      the indent level.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Debug.IndentSize">
      <summary>
        <para>Gets or sets the number of spaces in an indent.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.DefaultTraceListener">
      <summary>
        <para>Provides
      the default output methods and behavior for tracing.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.TraceListener">
      <summary>
        <para>Provides the <see langword="abstract " />base class for the listeners who
   monitor trace and debug output.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.#ctor">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Diagnostics.TraceListener" /> class.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.#ctor(System.String)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Diagnostics.TraceListener" /> class using the specified name as the
       listener.
    </para>
      </summary>
      <param name="name">
    The name of the <see cref="T:System.Diagnostics.TraceListener" />.
 </param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Dispose">
      <summary>
        <para> Releases all resources used by the
   <see cref="T:System.Diagnostics.TraceListener" /> .</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Diagnostics.TraceListener" /> and optionally releases the managed
   resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Close">
      <summary>
        <para> When overridden in a derived class, closes the
      output stream so it no longer receives tracing or debugging output.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Flush">
      <summary>
        <para>
       When overridden in a derived class, flushes the output buffer.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Fail(System.String)">
      <summary>
        <para>
       Emits an error message to the listener you create when
       you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
    </para>
      </summary>
      <param name="message">
    A message to emit.
 </param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Fail(System.String,System.String)">
      <summary>
        <para>
       Emits an error message, and a detailed error message to
       the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
    </para>
      </summary>
      <param name="message">
    A message to emit.
 </param>
      <param name="detailMessage">
    A detailed message to emit.
 </param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.String)">
      <summary>
        <para> When overridden in a derived class, writes the specified
      message to the listener you create in the derived class.
      </para>
      </summary>
      <param name="message">A message to write. </param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.Object)">
      <summary>
        <para>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" />
class.</para>
      </summary>
      <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.String,System.String)">
      <summary>
        <para>
       Writes a category name and a message to the listener you create when
       you implement the <see cref="T:System.Diagnostics.TraceListener" />
       class.
    </para>
      </summary>
      <param name="message">
    A message to write.
 </param>
      <param name="category">
    A category name used to organize the output.
 </param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.Object,System.String)">
      <summary>
        <para>Writes a category name and the value of the object's 
   <see cref="M:System.Object.ToString" /> 
   method to the listener
   you create when you implement the <see cref="T:System.Diagnostics.TraceListener" />
   class.</para>
      </summary>
      <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteIndent">
      <summary>
        <para>
       Writes the indent to the listener you create when you
       implement this
       class, and resets the <see cref="P:System.Diagnostics.TraceListener.NeedIndent" /> property to <see langword="false" />.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.String)">
      <summary>
        <para> When
      overridden in a derived class, writes a message to the listener you create in the derived class,
      followed by a line terminator.
      </para>
      </summary>
      <param name="message">A message to write. </param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.Object)">
      <summary>
        <para>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" />
class, followed by a line
terminator.</para>
      </summary>
      <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.String,System.String)">
      <summary>
        <para> Writes a category name and a message to the listener you create when
      you implement the <see cref="T:System.Diagnostics.TraceListener" />
      class, followed by a line terminator.
      </para>
      </summary>
      <param name="message">A message to write. </param>
      <param name="category">A category name used to organize the output. </param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)">
      <summary>
        <para>Writes a category name and the value of the object's 
   <see cref="M:System.Object.ToString" /> 
   method to the listener
   you create when you implement the <see cref="T:System.Diagnostics.TraceListener" />
   class, followed by a line terminator.</para>
      </summary>
      <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="P:System.Diagnostics.TraceListener.Name">
      <summary>
        <para> Gets or sets a name for this <see cref="T:System.Diagnostics.TraceListener" />.
   </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IndentLevel">
      <summary>
        <para> Gets or sets the indent level.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IndentSize">
      <summary>
        <para> Gets or sets the number of spaces in an indent.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.TraceListener.NeedIndent">
      <summary>
        <para>
       Gets or sets a value indicating whether to indent the output.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.DefaultTraceListener" /> class with 
    "Default" as its <see cref="P:System.Diagnostics.TraceListener.Name" />.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)">
      <summary>
        <para>Emits or displays a message
 and a stack trace for an assertion that
 always fails.</para>
      </summary>
      <param name="message">The message to emit or display.</param>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)">
      <summary>
        <para>Emits or displays detailed messages and a stack trace for an assertion that
       always fails.</para>
      </summary>
      <param name="message">The message to emit or display.</param>
      <param name="detailMessage">The detailed message to emit or display.</param>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Write(System.String)">
      <summary>
        <para>Writes the output to the
 <see langword="OutputDebugString" /> and the
 <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />
 method.</para>
      </summary>
      <param name="message">The message to write to the <see langword="OutputDebugString" /> and the <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</param>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
      <summary>
        <para>Writes the output to the
   <see langword="OutputDebugString" /> and the
   <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> method followed by a carriage return and a line feed (\r\n).</para>
      </summary>
      <param name="message">The message to write to the <see langword="OutputDebugString" /> and the <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />. </param>
    </member>
    <member name="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled">
      <summary>
        <para>Gets or sets whether the application is running in 
       user-interface mode.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.DefaultTraceListener.LogFileName">
      <summary>
        <para>Gets or sets name of a log file to write trace or
 debug messages to.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.TextWriterTraceListener">
      <summary>
        <para>Directs tracing or debugging output to
      a <see cref="T:System.IO.TextWriter" /> or to a <see cref="T:System.IO.Stream" />,
      such as <see cref="F:System.Console.Out" qualify="true" /> or <see cref="T:System.IO.FileStream" />.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> class with
 <see cref="T:System.IO.TextWriter" /> 
 as the output recipient.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> class, using the
   stream as the recipient of the debugging and tracing output.
   </para>
      </summary>
      <param name="stream">
        <para>A <see cref="T:System.IO.Stream" /> that represents the stream the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> writes to.</para>
      </param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> class with
   the specified name, using the stream as the recipient of the debugging and tracing output.</para>
      </summary>
      <param name="stream">
        <para>A <see cref="T:System.IO.Stream" /> that represents the stream the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> writes to.</para>
      </param>
      <param name="name">The name of the new instance.</param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> class using the
       specified writer as recipient of the tracing or debugging output.
    </para>
      </summary>
      <param name="writer">
        <para>A <see cref="T:System.IO.TextWriter" /> that receives the output from the <see cref="T:System.Diagnostics.TextWriterTraceListener" />.</para>
      </param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> class with
    the specified name, using the specified writer as recipient of the tracing or
    debugging
    output.</para>
      </summary>
      <param name="writer">
        <para>A <see cref="T:System.IO.TextWriter" /> that receives the output from the <see cref="T:System.Diagnostics.TextWriterTraceListener" />.</para>
      </param>
      <param name="name">The name of the new instance.</param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> class, using
   the file as the recipient of the debugging and tracing output.
   </para>
      </summary>
      <param name="fileName">
        <para> The name of the file the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> writes to.</para>
      </param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> class
   with the specified name, using the file as the recipient of the debugging and tracing output.</para>
      </summary>
      <param name="fileName">
        <para> The name of the file the <see cref="T:System.Diagnostics.TextWriterTraceListener" /> writes to.</para>
      </param>
      <param name="name">The name of the new instance.</param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Close">
      <summary>
        <para>Closes the <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> so that it no longer
    receives tracing or debugging output.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Flush">
      <summary>
        <para>Flushes the output buffer for the <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
      <summary>
        <para>Writes a message
      to this instance's <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />.</para>
      </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
      <summary>
        <para>Writes a message
      to this instance's <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> followed by a line terminator. The
      default line terminator is a carriage return followed by a line feed (\r\n).</para>
      </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="P:System.Diagnostics.TextWriterTraceListener.Writer">
      <summary>
        <para>
       Gets or sets the text writer that receives the tracing
       or debugging output.
    </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.Trace">
      <summary>
        <para>Provides a set of methods and properties that help you trace the execution of your code. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Trace.Flush">
      <summary>
        <para>Flushes the output buffer, and causes buffered data to
      be written to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Trace.Close">
      <summary>
        <para>Flushes the output buffer, and then closes the <see cref="P:System.Diagnostics.Trace.Listeners" />.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean)">
      <summary>
        <para>Checks for a condition, and outputs the call stack if the
      condition
      is <see langword="false" />.</para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" /> . </para>
      </param>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String)">
      <summary>
        <para>Checks for a condition, and displays a message if the condition is
   <see langword="false" />. </para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="message">
        <para>A message to display. </para>
      </param>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)">
      <summary>
        <para>Checks for a condition, and displays both messages if the condition
      is <see langword="false" />. </para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="message">
        <para>A message to display.</para>
      </param>
      <param name="detailMessage">A detailed message to display.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Fail(System.String)">
      <summary>
        <para>Emits the specified error message.</para>
      </summary>
      <param name="message">A message to emit.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Fail(System.String,System.String)">
      <summary>
        <para>Emits an error message, and a detailed error message.</para>
      </summary>
      <param name="message">A message to emit.</param>
      <param name="detailMessage">A detailed message to emit.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.String)">
      <summary>
        <para>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" />
collection.</para>
      </summary>
      <param name="message">
        <para>A message to write. </para>
      </param>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.Object)">
      <summary>
        <para>Writes the value of the object's <see cref="M:System.Object.ToString" />
method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.String,System.String)">
      <summary>
        <para>Writes a category name and a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" />
collection.</para>
      </summary>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.Object,System.String)">
      <summary>
        <para>Writes a category name and the value of the object's
   <see cref="M:System.Object.ToString" /> method to the trace listeners
      in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</para>
      </summary>
      <param name="value">
        <para>An <see cref="T:System.Object" /> name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</para>
      </param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.String)">
      <summary>
        <para> Writes a message to the
      trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" />
      collection.</para>
      </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.Object)">
      <summary>
        <para>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" />
collection.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.String,System.String)">
      <summary>
        <para> Writes a category name and message to the trace
      listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" />
      
      collection.</para>
      </summary>
      <param name="message">A message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.Object,System.String)">
      <summary>
        <para>Writes a category name and the value of the object's
   <see cref="M:System.Object.ToString" />
   method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" />
   collection.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)">
      <summary>
        <para>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection
   if a condition is <see langword="true" />.</para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="message">
        <para>A message to write. </para>
      </param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)">
      <summary>
        <para>Writes the value of the object's <see cref="M:System.Object.ToString" />
method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is
<see langword="true" />. </para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)">
      <summary>
        <para>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" />
collection if a condition is <see langword="true" />.</para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="message">
        <para>A message to write. </para>
      </param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)">
      <summary>
        <para>Writes a category name and the value of the object's
   <see cref="M:System.Object.ToString" /> method to the trace
      listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection
      if a condition is <see langword="true" />.</para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)">
      <summary>
        <para> Writes a message to the trace listeners in the
   <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is
   <see langword="true" />
   .</para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="message">
        <para>A message to write. </para>
      </param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)">
      <summary>
        <para>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the
   trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection
   if a condition is
<see langword="true" /> 
.</para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)">
      <summary>
        <para> Writes a category name and message to the trace
      listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is
   <see langword="true" /> .</para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="message">
        <para>A message to write. </para>
      </param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)">
      <summary>
        <para>Writes a category name and the value of the object's
   <see cref="M:System.Object.ToString" />
   method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />
   .</para>
      </summary>
      <param name="condition">
        <para>
          <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" /> . </para>
      </param>
      <param name="value">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
      <param name="category">
        <para>A category name used to organize the output. </para>
      </param>
    </member>
    <member name="M:System.Diagnostics.Trace.Indent">
      <summary>
        <para>Increases the current <see cref="P:System.Diagnostics.Trace.IndentLevel" /> by one.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Trace.Unindent">
      <summary>
        <para>Decreases the current <see cref="P:System.Diagnostics.Trace.IndentLevel" /> by one.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Trace.Listeners">
      <summary>
        <para>Gets the collection of listeners that is monitoring the trace output.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Trace.AutoFlush">
      <summary>
        <para>Gets or sets whether <see cref="M:System.Diagnostics.Trace.Flush" /> should be called on the <see cref="P:System.Diagnostics.Trace.Listeners" /> after every write.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Trace.IndentLevel">
      <summary>
        <para>Gets or sets the indent level.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Trace.IndentSize">
      <summary>
        <para>Gets or sets the number of spaces in an indent.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.TraceLevel">
      <summary>
        <para>Specifies what messages to output for the <see cref="T:System.Diagnostics.Debug" />, <see cref="T:System.Diagnostics.Trace" /> and <see cref="T:System.Diagnostics.TraceSwitch" />
classes.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Off">
      <summary>
        <para>
       Output no tracing and debugging
       messages.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Error">
      <summary>
        <para>
       Output error-handling messages.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Warning">
      <summary>
        <para>
       Output warnings and error-handling
       messages.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Info">
      <summary>
        <para>
       Output informational messages, warnings, and error-handling messages.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Verbose">
      <summary>
    Output all debugging and tracing messages.
 </summary>
    </member>
    <member name="T:System.Diagnostics.TraceListenerCollection">
      <summary>
        <para>Provides a thread-safe list of <see cref="T:System.Diagnostics.TraceListener" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)">
      <summary>
        <para>Adds a <see cref="T:System.Diagnostics.TraceListener" /> to the list.</para>
      </summary>
      <param name="listener">A <see cref="T:System.Diagnostics.TraceListener" /> to add to the list.</param>
      <returns>
        <para>The position at which the new listener was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])">
      <summary>
        <para>Adds an array of <see cref="T:System.Diagnostics.TraceListener" /> objects to the list.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.Diagnostics.TraceListener" /> objects to add to the list.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)">
      <summary>
        <para>Adds the contents of another <see cref="T:System.Diagnostics.TraceListenerCollection" /> to the list.</para>
      </summary>
      <param name="value"> Another <see cref="T:System.Diagnostics.TraceListenerCollection" /> whose contents are added to the list.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Clear">
      <summary>
        <para>
       Clears all the listeners from the
       list.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)">
      <summary>
        <para>Checks whether the list contains the specified 
       listener.</para>
      </summary>
      <param name="listener">A <see cref="T:System.Diagnostics.TraceListener" /> to find in the list.</param>
      <returns>
        <para>
          <see langword="true " />if the listener 
    is in the list; otherwise,
 <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)">
      <summary>
        <para>Copies a section of the current <see cref="T:System.Diagnostics.TraceListenerCollection" /> list to the specified array at the specified 
    index.</para>
      </summary>
      <param name="listeners">
        <para>An array of type <see cref="T:System.Array" /> to copy the elements into.</para>
      </param>
      <param name="index">The starting index number in the current list to copy from.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.GetEnumerator">
      <summary>
        <para>
       Gets an enumerator for this list.
    </para>
      </summary>
      <returns>
        <para>
       An enumerator of type <see cref="T:System.Collections.IEnumerator" />.
    </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)">
      <summary>
        <para>Gets the index of the specified listener.</para>
      </summary>
      <param name="listener">A <see cref="T:System.Diagnostics.TraceListener" /> to find in the list.</param>
      <returns>
        <para>The index of the listener, if it can be found in the
       list; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)">
      <summary>
        <para>Inserts the listener at the specified index.</para>
      </summary>
      <param name="index">
        <para>The position in the list to insert the new <see cref="T:System.Diagnostics.TraceListener" />.</para>
      </param>
      <param name="listener">A <see cref="T:System.Diagnostics.TraceListener" /> to insert in the list.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)">
      <summary>
        <para>Removes from the collection the specified <see cref="T:System.Diagnostics.TraceListener" /> .</para>
      </summary>
      <param name="listener">A <see cref="T:System.Diagnostics.TraceListener" /> to remove from the list.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Remove(System.String)">
      <summary>
        <para> Removes from the collection the first <see cref="T:System.Diagnostics.TraceListener" /> with the
   specified name.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.Diagnostics.TraceListener" /> to remove from the list.</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes from the collection the <see cref="T:System.Diagnostics.TraceListener" /> at the specified index.</para>
      </summary>
      <param name="index">
        <para> The zero-based index of the <see cref="T:System.Diagnostics.TraceListener" /> to remove from the list.</para>
      </param>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the <see cref="T:System.Diagnostics.TraceListener" /> at
    the specified index.</para>
      </summary>
      <param name="i">The zero-based index of the <see cref="T:System.Diagnostics.TraceListener" />to get from the list.</param>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Item(System.String)">
      <summary>
        <para>Gets the first <see cref="T:System.Diagnostics.TraceListener" /> in the list with the specified name.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.Diagnostics.TraceListener" /> to get from the list.</param>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Count">
      <summary>
        <para>Gets the number of listeners in the list.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.TraceSwitch">
      <summary>
        <para>Provides a multilevel switch to
 control tracing and debug output without recompiling your code.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSwitch" /> class.</para>
      </summary>
      <param name="displayName">A name for the switch.</param>
      <param name="description">A description of the switch.</param>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.Level">
      <summary>
        <para>Gets or sets the trace
      level that specifies the messages to output for tracing and debugging.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceError">
      <summary>
        <para>Gets a value
       indicating whether the <see cref="P:System.Diagnostics.TraceSwitch.Level" /> is set to
    <see langword="Error" />, <see langword="Warning" />, <see langword="Info" />, or 
    <see langword="Verbose" />.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceWarning">
      <summary>
        <para>Gets a value
       indicating whether the <see cref="P:System.Diagnostics.TraceSwitch.Level" /> is set to
    <see langword="Warning" />, <see langword="Info" />, or <see langword="Verbose" />.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceInfo">
      <summary>
        <para>Gets a value
 indicating whether the <see cref="P:System.Diagnostics.TraceSwitch.Level" /> is set to
 <see langword="Info" /> or <see langword="Verbose" />.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceVerbose">
      <summary>
        <para>Gets a value
       indicating whether the <see cref="P:System.Diagnostics.TraceSwitch.Level" /> is set to
    <see langword="Verbose" />.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Windows.Forms.Application.ThreadException" />
 event.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ThreadExceptionEventArgs" /> class.</para>
      </summary>
      <param name="t">The <see cref="T:System.Exception" /> that occurred.</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>
        <para>Gets the <see cref="T:System.Exception" /> that occurred.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Windows.Forms.Application.ThreadException" />
 event of an <see cref="T:System.Windows.Forms.Application" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Threading.ThreadExceptionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>
        <para>Provides a helper class for implementing an <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> .</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>
        <para>Provides a helper class for implementing an <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />. This class is abstract.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>
        <para>Provides an interface for generating code.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>
        <para>Gets a value that indicates whether the
      specified value is a valid identifier for the current language.</para>
      </summary>
      <param name="value">The value to test for being a valid identifier.</param>
      <returns>
        <para>
          <see langword="true" /> if the
<paramref name="value" /> parameter is a valid identifier; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>
        <para>Tests the specified identifier for validity in the current
      language and source code and throws an exception if the specified value is not a valid identifier.</para>
      </summary>
      <param name="value">The value to validate.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>
        <para>Creates an escaped identifier for the specified value.</para>
      </summary>
      <param name="value">The string to create an escaped identifier for.</param>
      <returns>
        <para> The escaped identifier for the value.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>
        <para>Creates a valid identifier for the specified value.</para>
      </summary>
      <param name="value">The string to generate a valid identifier for.</param>
      <returns>
        <para>A valid identifier for the specified value.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>
        <para>Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference" />.</para>
      </summary>
      <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type to return.</param>
      <returns>
        <para>A text representation of the specified type for the 
      language this code generator is designed to generate code in. For example,
      in Visual Basic, passing in type System.Int32 will return "Integer".</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>
        <para>Gets a value indicating whether the generator provides the specified <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> .</para>
      </summary>
      <param name="supports">The capabilities to test the generator for.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified capabilities are
   supported; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>
        <para>Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs
      it to the specified text writer.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the expression to generate code for. </param>
      <param name="w">The <see cref="T:System.IO.TextWriter" /> to output code to.</param>
      <param name=" o">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>
        <para> Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it
      to the specified text writer using the specified options.</para>
      </summary>
      <param name=" e">A <see cref="T:System.CodeDom.CodeStatement" /> containing the CodeDOM elements to translate.</param>
      <param name="w">The <see cref="T:System.IO.TextWriter" /> to output code to.</param>
      <param name="o">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>
        <para>Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified
      text writer using the specified options.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeNamespace" /> that indicates the namespace to generate code for. </param>
      <param name="w">The <see cref="T:System.IO.TextWriter" /> to output code to.</param>
      <param name=" o">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>
        <para> Generates code for the specified Code Document
      Object Model (CodeDOM) compilation unit and outputs it to the specified
      text writer using the specified options.</para>
      </summary>
      <param name=" e">A <see cref="T:System.CodeDom.CodeCompileUnit" /> to generate code for.</param>
      <param name="w">The <see cref="T:System.IO.TextWriter" /> to output code to.</param>
      <param name="o">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>
        <para>Generates code for the specified Code
      Document Object Model (CodeDOM) type declaration and outputs it to
      the specified text writer using the specified options.</para>
      </summary>
      <param name=" e">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the type to generate code for.</param>
      <param name="w">The <see cref="T:System.IO.TextWriter" /> to output code to.</param>
      <param name="o">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>
        <para> Generates code for the namespaces in the specified compile unit.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the compile unit to generate namespaces for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>
        <para> Generates code for the specified namespace and the classes it
       contains.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeNamespace" /> that indicates the namespace to generate classes for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>
        <para> Generates code for the specified code expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the code expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>
        <para> Outputs the code of the specified literal code fragment compile unit.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> that indicates the literal code fragment compile unit to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>
        <para> Generates code for the
       specified compile unit.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the compile unit to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>
        <para> Generates code for the
       specified namespace.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeNamespace" /> that indicates the namespace to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>
        <para> Generates code for the specified namespace
       import.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeNamespace" /> that indicates the namespace import to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>
        <para> 
       Generates code for the specified statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>
        <para> Generates code for the specified statement collection.</para>
      </summary>
      <param name="stms">A <see cref="T:System.CodeDom.CodeStatementCollection" /> that indicates the statements to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>
        <para>Generates code for the specified attribute declaration collection.</para>
      </summary>
      <param name="attributes">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the attributes to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>
        <para>Outputs an argument in an attribute block.</para>
      </summary>
      <param name="arg">A <see cref="T:System.CodeDom.CodeAttributeArgument" /> that indicates the attribute argument to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>
        <para> Generates code for the specified <see cref="T:System.CodeDom.FieldDirection" />.
   </para>
      </summary>
      <param name="dir">A <see cref="T:System.CodeDom.FieldDirection" /> enumeration value indicating the attribute of the field. </param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>
        <para>Outputs a field scope modifier that corresponds to the specified
      attributes.</para>
      </summary>
      <param name="attributes">A <see cref="T:System.CodeDom.MemberAttributes" /> enumeration value indicating the attributes.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>
        <para> Generates code for the specified member access modifier.
      </para>
      </summary>
      <param name="attributes">A <see cref="T:System.CodeDom.MemberAttributes" /> enumeration value indicating the member access modifier to generate code for. </param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>
        <para> Generates code for the specified member scope modifier.
      </para>
      </summary>
      <param name="attributes">A <see cref="T:System.CodeDom.MemberAttributes" /> enumeration value indicating the member scope modifier to generate code for. </param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>
        <para>
       Generates code for the specified type.
    </para>
      </summary>
      <param name="typeRef">
    The type to generate code for.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>
        <para> Generates code for the specified type attributes.
      </para>
      </summary>
      <param name="attributes">A <see cref="T:System.Reflection.TypeAttributes" /> enumeration value indicating the type attributes to generate code for. </param>
      <param name=" isStruct">
        <see langword="true" /> if the type is a struct; otherwise, <see langword="false" />.</param>
      <param name=" isEnum">
        <see langword="true" /> if the type is an enum; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>
        <para>
       Generates code for the specified object type and name pair.
    </para>
      </summary>
      <param name="typeRef">
    The type.
 </param>
      <param name=" name">
    The name for the object.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>
        <para>Outputs the specified identifier.</para>
      </summary>
      <param name="ident">The identifier to output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>
        <para>Generates code for the specified expression list.</para>
      </summary>
      <param name="expressions">A <see cref="T:System.CodeDom.CodeExpressionCollection" /> that indicates the expressions to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>
        <para>Generates code for the specified expression list.</para>
      </summary>
      <param name="expressions">A <see cref="T:System.CodeDom.CodeExpressionCollection" /> that indicates the expressions to generate code for.</param>
      <param name=" newlineBetweenItems">
        <see langword="true" /> to insert a new line after each item; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>
        <para>
       Generates code for the specified operator.
    </para>
      </summary>
      <param name="op">
    A <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> that indicates the operator to generate code for.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>
        <para>
       Generates code for the specified parameters.
    </para>
      </summary>
      <param name="parameters">
    A <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> that indicates the parameter declaration expressions to generate code for.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>
        <para> Generates code for the specified array creation
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>
        <para> Generates code for the specified base reference
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>
        <para> Generates code for the specified binary
       operator expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>
        <para> Generates a line-continuation character and outputs the specified string on a new line.</para>
      </summary>
      <param name="st">The string to write on the new line.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>
        <para> Generates code for the specified cast
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeCastExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>
        <para> Generates code for the specified delegate creation
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>
        <para> Generates code for the specified field
       reference expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>
        <para> Generates code for the specified argument reference
      expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>
        <para> Generates code for the specified variable reference
      expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>
        <para> Generates code for the specified indexer
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeIndexerExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>
        <para> Generates code for the specified array indexer
      expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>
        <para> Outputs the code of the specified literal code
      fragment expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeSnippetExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>
        <para> Generates code for the specified method invoke
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>
        <para> Generates code for the specified method reference
      expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>
        <para> Generates code for the specified event reference
      expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>
        <para> Generates code for the specified delegate invoke
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>
        <para> Generates code for
       the specified object creation expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>
        <para> Generates code for
       the specified parameter declaration expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>
        <para> Generates code for the specified direction
      expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeDirectionExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>
        <para> Generates code for the specified primitive
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodePrimitiveExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>
        <para>Generates code for a single-precision floating point number.</para>
      </summary>
      <param name="s">The <see cref="T:System.Single" /> value to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>
        <para>Generates code for a double-precision floating point number.</para>
      </summary>
      <param name="d">The <see cref="T:System.Double" /> value to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>
        <para>Generates code for the specified decimal value.</para>
      </summary>
      <param name="d">The decimal value to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>
        <para> Generates code for the specified property
       reference expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>
        <para> Generates code for the specified property set value
      reference expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>
        <para> Generates code for the specified this reference
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeThisReferenceExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>
        <para> Generates code for the specified type reference
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>
        <para> Generates code for the specified type of
       expression.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeTypeOfExpression" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>
        <para> Generates code for the
      specified expression statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeExpressionStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>
        <para> Generates code for the specified iteration
      statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeIterationStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>
        <para> Generates code for the specified throw exception
       statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>
        <para> Generates code for the specified comment
       statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeCommentStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>
        <para> Generates code for the specified comment
      statements.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>
        <para> Generates code for the specified comment.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeComment" /> to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>
        <para> Generates code for the specified method return
       statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>
        <para> Generates code for the specified conditional
      statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeConditionStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>
        <para> Generates code for the specified
   <see langword="try...catch...finally" />
   statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>
        <para> Generates code for the specified assignment
       statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeAssignStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>
        <para> Generates code for the specified attach event
       statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeAttachEventStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>
        <para> Generates code for the specified remove event
      statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>
        <para> Generates code for the specified <see langword="goto" />
statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeGotoStatement" /> that indicates the expression to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>
        <para> Generates code for the specified labeled
 statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeLabeledStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>
        <para> Outputs the code of the specified literal code fragment
      statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeSnippetStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>
        <para> Generates code for the specified variable declaration
       statement.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> that indicates the statement to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>
        <para> Generates code for the specified line pragma
       start.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeLinePragma" /> that indicates the start of the line pragma to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>
        <para> Generates code for the specified line pragma
       end.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeLinePragma" /> that indicates the end of the line pragma to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para> Generates code for the specified
      event.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeMemberEvent" /> that indicates the member event to generate code for.</param>
      <param name=" c">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the type of the object that this event occurs on.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>
        <para> Generates code for the specified member
       field.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeMemberField" /> that indicates the field to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>
        <para> Outputs the code of the specified literal code fragment class
      member.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> that indicates the member to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para> Generates code for the specified entry point
      method.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeEntryPointMethod" /> that indicates the entry point for the code.</param>
      <param name=" c">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the code that declares the type.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para> Generates code for the specified
      method.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeMemberMethod" /> that indicates the member method to generate code for.</param>
      <param name=" c">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the type of the object that this method occurs on.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para> Generates code for the specified
      property.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeMemberProperty" /> that indicates the property to generate code for.</param>
      <param name=" c">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the type of the object that this property occurs on.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para> Generates code for the specified
      constructor.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeConstructor" /> that indicates the constructor to generate code for.</param>
      <param name=" c">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the type of the object that this constructor constructs.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>
        <para> Generates code for the specified class
       constructor.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeTypeConstructor" /> that indicates the class constructor to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para> Generates code for the specified start class.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the start of the class to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para> Generates code for the specified end class.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the end of the class to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>
        <para> Generates code for the start of a compile
      unit.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the compile unit to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>
        <para> Generates code for the end of a compile
      unit.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the compile unit to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>
        <para> Generates code for the start of a
      namespace.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeNamespace" /> that indicates the namespace to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>
        <para> Generates code for the end of a
      namespace.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeNamespace" /> that indicates the namespace to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>
        <para> Generates code for the specified namespace
       import.</para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeNamespaceImport" /> that indicates the namespace import to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>
        <para> Generates code for the specified attribute block
       start.</para>
      </summary>
      <param name="attributes">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the start of the attribute block to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>
        <para> Generates code for the specified attribute block
       end.</para>
      </summary>
      <param name="attributes">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the end of the attribute block to generate code for.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>
        <para>Gets a value indicating whether the specified code generation support is provided.</para>
      </summary>
      <param name="support">A <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> that indicates the type of code generation support to test for.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified code generation support is provided;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>
        <para> Gets a value indicating whether the specified value is a valid identifier.</para>
      </summary>
      <param name="value"> The value to test for conflicts with valid identifiers.</param>
      <returns>
        <para>
          <see langword="true" /> if the value is a valid identifer; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>
        <para>Throws an exception if the specified value is not a valid identifier.</para>
      </summary>
      <param name="value">The identifier to test for validity as an identifier.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>
        <para>Creates an escaped identifier for the specified value.</para>
      </summary>
      <param name="value">The string to create an escaped identifier for.</param>
      <returns>
        <para>The escaped identifier for the value.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>
        <para>Creates a valid identifier for the specified value.</para>
      </summary>
      <param name="value">A string to create a valid identifier for.</param>
      <returns>
        <para>A valid identifier for the value.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>
        <para> Gets the name of the
      specified data type.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.CodeTypeReference" /> of the type to return the name of.</param>
      <returns>
        <para>The name of the data type reference.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>
        <para> Converts the specified string by formatting it with escape codes.
      </para>
      </summary>
      <param name="value">The string to convert. </param>
      <returns>
        <para> The converted string.
      </para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>
        <para> Gets a value indicating whether the specified value is a valid
      language-independent identifier.
      </para>
      </summary>
      <param name="value">The string to test for validity. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified value is valid; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>
        <para> Gets the current class name.
      </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>
        <para> Gets the current member of the class.
      </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>
        <para> Gets the current member name.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>
        <para> Gets a value indicating whether the current object being
      generated is an interface.
      </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>
        <para> Gets a value indicating whether the current object being generated
      is a class.
      </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>
        <para> Gets a value indicating whether the current object being generated is a value
      type or struct.
      </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>
        <para> Gets a value indicating whether the current object being generated
      is an enumeration.
      </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>
        <para> Gets a value indicating whether the current object being generated
      is a delegate.
      </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>
        <para>Gets or sets the amount of spaces to indent each indentation level.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>
        <para>
       Gets the token that represents <see langword="null" />.
    </para>
      </summary>
      <returns>
        <para>
       The token that represents <see langword="null" />.
    </para>
      </returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>
        <para> Gets the <see cref="T:System.IO.TextWriter" />
to use for output.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>
        <para> Gets the options to be used by the code generator.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>
        <para> Provides a
      compiler execution
      interface.
      </para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>
        <para> Creates an assembly based on the <see cref="N:System.CodeDom" /> tree contained in the 
   specified <see cref="T:System.CodeDom.CodeCompileUnit" /> , using the specified
   options.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the compiler options.</param>
      <param name="compilationUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the code to compile.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of
   compilation.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>
        <para> Creates an assembly based on the specified options and file
      name.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the compiler options.</param>
      <param name=" fileName">The file name of the file to compile.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of
   compilation.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>
        <para> Creates an assembly based on the specified options and
      source.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the compiler options.</param>
      <param name=" source">The source to compile.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of
   compilation.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>
        <para> Creates an assembly based on the <see cref="N:System.CodeDom" /> trees contained in the 
   specified <see cref="T:System.CodeDom.CodeCompileUnit" /> , using the specified
   options.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the compiler options.</param>
      <param name="compilationUnits">An array of type <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the code to compile.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>
        <para> Creates
      an assembly based on the specified options and file
      names.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the compiler options.</param>
      <param name=" fileNames">The file names of the files to compile.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>
        <para> Creates an assembly based on the specified options and
      sources.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the compiler options.</param>
      <param name=" sources">The source code strings to compile.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>
        <para>Compiles the specified compile unit using the specified options, and returns the results
      from the compilation.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> that indicates the options to compile with.</param>
      <param name=" e">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the source to compile.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> that indicates the results of
   compilation.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>
        <para> Compiles the specified file using the specified options, and returns the
      results from the compilation.
      </para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> that indicates the options to compile with. </param>
      <param name=" fileName">The file name to compile. </param>
      <returns>
        <para> A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> that indicates the results of
   compilation.
   </para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>
        <para>Compiles the specified source code string using the specified options, and
      returns the results from the compilation.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> that indicates the options to compile with.</param>
      <param name=" source">The source code string to compile.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> that indicates the results of
   compilation.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>
        <para>Compiles the specified compile units using the specified
      options, and returns the results from the compilation.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> that indicates the options to compile with.</param>
      <param name=" ea">An array of <see cref="T:System.CodeDom.CodeCompileUnit" /> objects that indicates the source to compile.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> that indicates the results of
   compilation.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>
        <para> Compiles the specified files using the specified options, and returns the
      results from the compilation.
      </para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> that indicates the options to compile with. </param>
      <param name=" fileNames">An array of strings that indicates the file names of the files to compile. </param>
      <returns>
        <para> A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> that indicates the results of compilation.
   </para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>
        <para>Processes the specified line from the specified <see cref="T:System.CodeDom.Compiler.CompilerResults" />.</para>
      </summary>
      <param name="results">
        <para>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> that indicates the results of compilation. </para>
      </param>
      <param name=" line">The line to process.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>
        <para>Gets the command arguments to be passed to the compiler from the specified <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> that indicates the compiler options.</param>
      <returns>
        <para>The command arguments.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>
        <para>Gets the command arguments to use when invoking the compiler to generate a response file.</para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> that indicates the compiler options.</param>
      <param name=" cmdArgs">A command arguments string.</param>
      <returns>
        <para>The command arguments to use to generate a response file, 
      or <see langword="null" /> if there are no response file arguments.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>
        <para> Compiles the specified source code strings using the specified options, and
      returns the results from the compilation.
      </para>
      </summary>
      <param name="options">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> that indicates the options to compile with. </param>
      <param name=" sources">An array of strings containing the source code to compile. </param>
      <returns>
        <para> A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> that indicates the results of
   compilation.
   </para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>
        <para>Joins the specified string arrays.</para>
      </summary>
      <param name="sa">The array of strings to join.</param>
      <param name=" separator">The separator to use.</param>
      <returns>
        <para>The concatenated string.</para>
      </returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>
        <para> Gets or sets the file name extension to use for source files.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>
        <para> Gets or
      sets the name of the compiler executable.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>
        <para>Provides a base class for <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementations. 
   This class is abstract.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>
        <para>Creates a new code generator.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to 
    generate <see cref="N:System.CodeDom" /> based source code representations.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>
        <para>Creates a new code generator using the specified <see cref="T:System.IO.TextWriter" /> for
   output.</para>
      </summary>
      <param name="output">A <see cref="T:System.IO.TextWriter" /> to use to output.</param>
      <returns>
        <para>An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to
   generate <see cref="N:System.CodeDom" />
   based source code representations.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>
        <para>Creates a new code generator using the specified file name for output.</para>
      </summary>
      <param name="fileName">The file name to output to.</param>
      <returns>
        <para>An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to
   generate <see cref="N:System.CodeDom" />
   based source code representations.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>
        <para>Creates a new code compiler.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> that can be used for compilation 
    of <see cref="N:System.CodeDom" /> based source code representations.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>
        <para>Creates a new code parser.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.CodeDom.Compiler.ICodeParser" /> that can be used to 
    parse source code.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>
        <para>Gets a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type of object.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of object to retrieve a type converter for.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type.</para>
      </returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>
        <para> Gets or sets the default file
      name extension to use for source code files in the current language.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>
        <para>Gets or sets a language features identifier.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>
        <para>Represents options used by code generators.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> class.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>
        <para>Gets or sets the object at the specified index.</para>
      </summary>
      <param name="index">The property to access.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>
        <para>Gets or sets the string to use for indentations.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>
        <para>Gets or sets the style to use for bracing.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>
        <para> Gets or sets a value indicating whether to append an 
   <see langword="else" />, <see langword="catch" />, or <see langword="finally" /> 
   block, including brackets, at the closing line of each previous
<see langword="if" /> or <see langword="try" /> 
block.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>
        <para>Gets or sets a value indicating whether to insert blank lines between members.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>
        <para>Provides a helper class for implementing an <see cref="T:System.CodeDom.Compiler.ICodeParser" /> .</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>
        <para>Specifies an interface for parsing code into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>
        <para>Compiles the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit" />. </para>
      </summary>
      <param name="codeStream">A <see cref="T:System.IO.TextReader" /> that can be used to read the code to be compiled.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains a representation of the
   parsed code.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>
        <para>Compiles the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit" />. </para>
      </summary>
      <param name="codeStream">A <see cref="T:System.IO.TextReader" /> that is used to read the code to be compiled.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the results of the
 code parsing.</para>
      </returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>
        <para>Represents a compiler error or warning.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerError" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerError" /> class using the specified
   file name, line, column, error number, and error text.</para>
      </summary>
      <param name="fileName">The file name of the file that the compiler was compiling when it encountered the error.</param>
      <param name=" line">The line of the source of the error.</param>
      <param name=" column">The column of the source of the error.</param>
      <param name=" errorNumber">The error number of the error.</param>
      <param name=" errorText">The error message text.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>
        <para> Gets or sets the line number where the source of the error occurs.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>
        <para> Gets or sets the column number where the source of the error occurs.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>
        <para>Gets or sets the error number.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>
        <para>Gets or sets the text of the error message.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>
        <para> Gets or sets
       a value that indicates whether the error is a warning.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>
        <para> Gets or sets the file name of the source that caused the error.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.CodeDom.Compiler.CompilerError" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> that 
    contains the contents of the specified <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> from which the contents are copied</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> that
   contains the specified array of <see cref="T:System.CodeDom.Compiler.CompilerError" /> objects.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.CodeDom.Compiler.CompilerError" /> objects to initialize the collection with.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>
        <para>Adds the specified <see cref="T:System.CodeDom.Compiler.CompilerError" /> to the error collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.Compiler.CompilerError" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>
        <para> Copies the elements of an array to the end of 
      the error collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.CodeDom.Compiler.CompilerError" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>
        <para>Adds the contents of the specified compiler error 
      collection to the
      end of the error collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> containing the objects to add to the collection.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>
        <para>Gets a value indicating whether the collection contains the specified <see cref="T:System.CodeDom.Compiler.CompilerError" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.Compiler.CompilerError" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.CodeDom.Compiler.CompilerError" /> is contained in the collection;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>
        <para>Copies the collection values to a one-dimensional <see cref="T:System.Array" /> instance at the
   specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</para>
      </param>
      <param name="index">The index in the array where copying to begins.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>
        <para>Gets the index of the specified <see cref="T:System.CodeDom.Compiler.CompilerError" /> in the collection, if it
   exists in the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.Compiler.CompilerError" /> to locate.</param>
      <returns>
        <para>The index of the specified <see cref="T:System.CodeDom.Compiler.CompilerError" /> in the
<see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>
        <para>Inserts the specified <see cref="T:System.CodeDom.Compiler.CompilerError" /> into the collection at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where the compiler error should be inserted.</param>
      <param name=" value">The <see cref="T:System.CodeDom.Compiler.CompilerError" /> to insert.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>
        <para> Removes a specific <see cref="T:System.CodeDom.Compiler.CompilerError" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.CodeDom.Compiler.CompilerError" /> to remove from the <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>
        <para> Gets or sets the <see cref="T:System.CodeDom.Compiler.CompilerError" /> at the specified
   index.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>
        <para> Gets
      a value that indicates whether the collection contains errors.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>
        <para> 
      Gets a value that indicates whether the collection contains warnings.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>
        <para> Represents the parameters used to invoke the compiler.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> class using the
   specified assembly names.</para>
      </summary>
      <param name="assemblyNames">The names of the assemblies to compile.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> class using the specified assembly
   names and output file name.</para>
      </summary>
      <param name="assemblyNames">The names of the assemblies to compile.</param>
      <param name=" outputName">The output file name.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> class using 
    the specified assembly
    names, output name, and a value indicating whether to include debug information.</para>
      </summary>
      <param name="assemblyNames">The names of the assembly(s) to compile.</param>
      <param name=" outputName">The output file name.</param>
      <param name=" includeDebugInformation">
        <see langword="true" /> if debug information should be included; <see langword="false" /> if debug information should be excluded.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>
        <para>Gets or sets a value indicating whether to generate an executable.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>
        <para>Gets or sets a value indicating whether to generate the output in memory.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>
        <para> Gets or sets the assemblies referenced by the current project.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>
        <para>Gets or sets the name of the main class.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>
        <para>Gets or sets the name of the output assembly.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>
        <para> Gets or sets the temporary files to use.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>
        <para>Gets or sets a value indicating whether to include debug information in the compiled
       executable.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>
        <para>Gets or sets a value indicating whether to treat warnings as errors.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>
        <para> Gets or sets the warning level at which the compiler aborts compilation.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>
        <para>Gets or sets the compiler options for the compiler to use.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>
        <para>Gets or sets the filename of a Win32 resource file
      to link into the compiled assembly. </para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>
        <para> Gets or sets the user token to use when creating the compiler process.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>
        <para> Represents the results of compilation
      that are returned from the compiler.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CompilerResults" /> class 
    that uses the specified
    temporary files.</para>
      </summary>
      <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that indicates the temporary files to use.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>
        <para>Gets or sets the temporary files to use.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>
        <para>Gets or sets the compiled assembly.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>
        <para>Gets the collection of compiler errors and warnings.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>
        <para> Gets the compiler output messages.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>
        <para>Gets or sets the path of the compiled assembly.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>
        <para>Gets or sets the compiler's return value.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>
        <para> Provides command execution functions for invoking 
       compilers. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>
        <para> Executes the command using the specified temporary files and waits for the
      call to return.
      </para>
      </summary>
      <param name="cmd">The command to execute. </param>
      <param name=" tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that indicates the temporary files to use. </param>
      <returns>
        <para>The return value from the compiler.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>
        <para>Executes the specified command using the specified temporary
      files and waits for the
      call to return, storing output and error information from the compiler in
      the specified strings.</para>
      </summary>
      <param name="cmd">The command to execute.</param>
      <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that indicates the temporary files to use.</param>
      <param name="outputName">A reference to a string that will store the compiler's message output.</param>
      <param name="errorName">A reference to a string that will store the name of the error or errors encountered.</param>
      <returns>
        <para>The return value from the compiler.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>
        <para>Executes the specified command using the specified current directory and temporary files, and waits for the call
      to return, storing output and error information from the compiler in the specified
      strings.</para>
      </summary>
      <param name="cmd">The command to execute.</param>
      <param name=" currentDir">The current directory.</param>
      <param name=" tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that indicates the temporary files to use.</param>
      <param name=" outputName">A reference to a string that will store the compiler's message output.</param>
      <param name=" errorName">A reference to a string that will store the name of the error or errors encountered.</param>
      <returns>
        <para>The return value from the compiler.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>
        <para>Executes the specified command using the specified user token and temporary files, and waits for the call to
      return, storing output and error information from the compiler in the specified strings.</para>
      </summary>
      <param name="userToken">The token to start the compiler process with.</param>
      <param name=" cmd">The command to execute.</param>
      <param name=" tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that indicates the temporary files to use.</param>
      <param name=" outputName">A reference to a string that will store the compiler's message output.</param>
      <param name=" errorName">A reference to a string that will store the name of the error or errors encountered.</param>
      <returns>
        <para>The return value from the compiler.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>
        <para> Executes the specified command using the specified user token, current directory, and temporary files; then
      waits for the call to return, storing output and error information from the compiler in the
      specified strings.</para>
      </summary>
      <param name="userToken">The token to start the compiler process with.</param>
      <param name=" cmd">The command to execute.</param>
      <param name=" currentDir">The directory to start the process in.</param>
      <param name=" tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that indicates the temporary files to use.</param>
      <param name=" outputName">A reference to a string that will store the compiler's message output.</param>
      <param name=" errorName">A reference to a string that will store the name of the error or errors encountered.</param>
      <returns>
        <para>The return value from the compiler.</para>
      </returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>
        <para>Specifies identifiers used to determine whether a code generator supports certain types of
 code.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>
        <para> Indicates the generator supports arrays of arrays.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>
        <para> Indicates the generator supports a program entry point method designation. This is used when building executables.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>
        <para>Indicates the generator supports goto statements.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>
        <para> Indicates the generator supports referencing 
 multidimensional arrays. Currently, the CodeDom cannot be used to
 instantiate multidimensional arrays.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>
        <para>Indicates the generator supports static 
      constructors.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>
        <para>Indicates the generator supports 
 <see langword="try...catch" /> statements.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>
        <para> Indicates the generator supports return type attribute declarations.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>
        <para>Indicates the generator supports value type declarations.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>
        <para>Indicates the generator supports enumeration declarations.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>
        <para>Indicates the generator supports delegate declarations.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>
        <para>Indicates the generator supports interface declarations.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>
        <para>Indicates the generator supports event declarations.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>
        <para>Indicates the generator supports assembly attributes.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>
        <para>Indicates the generator supports parameter attributes.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>
        <para>Indicates the generator supports reference and out parameters.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>
        <para>Indicates the generator supports chained constructor arguments.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>
        <para> Indicates the generator supports the declaration of nested types.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>
        <para>Indicates the generator supports the declaration of members that implement multiple interfaces.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>
        <para>Indicates the generator supports public static members.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>
        <para>Indicates the generator supports complex expressions.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>
        <para> Indicates the generator supports compilation with Win32 resources.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>
        <para>Provides a text writer that can indent new lines by a tab string token.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>
        <para>Gets or sets the default tab string.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> class using the specified
    text writer and default tab string.</para>
      </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to use for output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> class using the specified
    text writer and tab string.</para>
      </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to use for output.</param>
      <param name=" tabString">The tab string to use for indentation.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>
        <para>
       Closes the document being written to.
    </para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>
        <para>Flushes the stream.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>
        <para>Outputs the tab string once for each level of indentation 
      according to the <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> property.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>
        <para>Writes the specified string
       to the text stream.</para>
      </summary>
      <param name="s">The string to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>
        <para> Writes the text representation of a Boolean value to the text stream.
      </para>
      </summary>
      <param name="value">The Boolean value to write. </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>
        <para>
       Writes a character to the text stream.
    </para>
      </summary>
      <param name="value">
    The character to write.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>
        <para>
       Writes a
       character array to the text stream.
    </para>
      </summary>
      <param name="buffer">
    The character array to write.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>
       Writes a subarray
       of characters to the text stream.
    </para>
      </summary>
      <param name="buffer">
    The character array to write data from.
 </param>
      <param name=" index">
    Starting index in the buffer.
 </param>
      <param name=" count">
    The number of characters to write.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>
        <para> Writes the text representation of a Double to the text stream.
      </para>
      </summary>
      <param name="value">The <see langword="double" /> to write. </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>
        <para> Writes the text representation of
      a Single to the text
      stream.
      </para>
      </summary>
      <param name="value">The <see langword="single" /> to write. </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>
        <para>
       Writes the text representation of an integer to the text stream.
    </para>
      </summary>
      <param name="value">
    The integer to write.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>
        <para>
       Writes the text representation of an 8-byte integer to the text stream.
    </para>
      </summary>
      <param name="value">
    The 8-byte integer to write.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>
        <para>
       Writes the text representation of an object
       to the text stream.
    </para>
      </summary>
      <param name="value">
    The object to write.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>
        <para>Writes out a formatted string, using the same semantics as specified.</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name=" arg0">The object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>
        <para>Writes out a formatted string,
       using the same semantics as specified.</para>
      </summary>
      <param name="format">The formatting string to use.</param>
      <param name=" arg0">The first object to write into the formatted string. </param>
      <param name=" arg1">The second object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>
        <para>Writes out a formatted string,
       using the same semantics as specified.</para>
      </summary>
      <param name="format">The formatting string to use.</param>
      <param name=" arg">The argument array to output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>
        <para>
       Writes the specified
       string to a line without tabs.
    </para>
      </summary>
      <param name="s">
    The string to write.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>
        <para> Writes the specified string, followed by
      a line terminator, to the text stream.
      </para>
      </summary>
      <param name="s">The string to write. </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>
        <para>
       Writes a line terminator.
    </para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>
        <para>
       Writes the text representation of a Boolean, followed by a line terminator, to
       the text stream.
    </para>
      </summary>
      <param name="value">
    The Boolean to write.
 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>
        <para> Writes a character, followed by a line terminator, to the 
       text stream.</para>
      </summary>
      <param name="value">The character to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>
        <para>Writes a character array, followed by a line terminator, to 
       the text stream.</para>
      </summary>
      <param name="buffer">The character array to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes a subarray of characters, followed by a line
      terminator, to the text stream.</para>
      </summary>
      <param name="buffer">The character array to write data from.</param>
      <param name=" index">Starting index in the buffer.</param>
      <param name=" count">The number of characters to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>
        <para>Writes the text representation of a Double, followed by a line terminator, to the text stream.</para>
      </summary>
      <param name="value">The <see langword="double" /> to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>
        <para>Writes the text representation of a Single, followed by a
      line terminator, to the text stream.</para>
      </summary>
      <param name="value">The <see langword="single" /> to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>
        <para>Writes the text representation of an integer, followed by
      a line terminator, to the text stream.</para>
      </summary>
      <param name="value">The integer to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>
        <para> Writes the text representation of an 8-byte
      integer, followed by a line terminator, to the text stream.</para>
      </summary>
      <param name="value">The 8-byte integer to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>
        <para>Writes the text representation of an object, followed by a
      line terminator, to the text stream.</para>
      </summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>
        <para>Writes out a formatted string, followed by a line
      terminator, using the same semantics as specified.</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name=" arg0">The object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>
        <para>Writes out a formatted string, followed by a line
      terminator, using the same semantics as specified.</para>
      </summary>
      <param name="format">The formatting string to use.</param>
      <param name=" arg0">The first object to write into the formatted string.</param>
      <param name=" arg1">The second object to write into the formatted string.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>
        <para>Writes out a formatted string, followed by a line
      terminator, using the same semantics as specified.</para>
      </summary>
      <param name="format">The formatting string to use.</param>
      <param name=" arg">The argument array to output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>
        <para>Writes the text representation of a UInt32, followed by a line terminator, to the text stream.</para>
      </summary>
      <param name="value">A UInt32 to output.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>
        <para> Gets the encoding for the text writer to use.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>
        <para>Gets or sets the new line character to use.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>
        <para>Gets or sets the number of spaces to indent.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>
        <para> Gets the <see cref="T:System.IO.TextWriter" /> to use.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>
        <para>Specifies identifiers that indicate special features of a language.</para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>
        <para> The language has default characteristics. </para>
      </summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>
        <para>The language is case-insensitive.</para>
      </summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>
        <para> Represents a collection of temporary files.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> class with default values.</para>
      </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 
class using the specified temporary directory
that is set to delete the
temporary files after their generation and
use.</para>
      </summary>
      <param name="tempDir">A temporary directory to use for storing the temporary files.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 
class using the specified
temporary directory and specified value indicating whether to keep or delete the temporary
files after their generation and use.</para>
      </summary>
      <param name="tempDir">A temporary directory to use for storing the temporary files.</param>
      <param name=" keepFiles">
        <see langword="true" /> if the temporary files should be kept after use; <see langword="false" /> if the temporary files should be deleted.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> and optionally releases the managed
   resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>
        <para>Adds a file name with the specified file name extension to the
      collection.</para>
      </summary>
      <param name="fileExtension">The file name extension to add.</param>
      <returns>
        <para>A file name with the specified extension that was just added to the
      collection.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>
        <para>Adds a file name with the specified file name extension to the collection,
      using the specified value indicating whether the file should be deleted or
      retained.</para>
      </summary>
      <param name="fileExtension">The file name extension to add.</param>
      <param name=" keepFile">
        <see langword="true" /> if the files of this type should be kept after use; <see langword="false" /> if the files of this type should be deleted.</param>
      <returns>
        <para> A file name with the specified extension that was just added to the collection.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>
        <para> Adds the specified file to the collection, using the
      specified value indicating whether to keep the file after the collection is
      disposed or when the <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" />
      method is called.</para>
      </summary>
      <param name=" fileName">The name of the file to add to the collection.</param>
      <param name="keepFile">
        <see langword="true" /> if the file should be kept after use; <see langword="false" /> if the file should be deleted.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>
        <para>Gets an enumeration of the members of the collection.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> that contains the collection's members.</para>
      </returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>
        <para>Copies the members of the collection to the specified string,
      beginning at the specified index.</para>
      </summary>
      <param name="fileNames">The array of strings to copy to.</param>
      <param name=" start">The index of the array to begin copying to.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>
        <para> Deletes the temporary files within this collection that were not marked to be kept.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>
        <para> Gets the count of files in the collection.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>
        <para> Gets the temporary directory to store the temporary files
      in.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>
        <para> Gets the base path to store the files in.</para>
      </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>
        <para> Gets or sets a value indicating whether to keep the files after they are no longer needed by
      the current compilation.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>
        <para>Provides data for the <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" />
event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />
 class.</para>
      </summary>
      <param name="oldDesigner">The document that is losing activation.</param>
      <param name="newDesigner">The document that is gaining activation.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>
        <para> 
       Gets the document that is losing activation.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>
        <para> 
       Gets the document that is gaining activation.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" />
event.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">
        <para>An <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>
        <para>The exception that is thrown when an attempt to check out a file that is checked into a source code management
      program is canceled or fails.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CheckoutException" /> class that specifies that the checkout
   was
   canceled. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>
        <para> Initializes
      a new instance of the <see cref="T:System.ComponentModel.Design.CheckoutException" /> class with no
      associated message or
      error code.
      </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CheckoutException" />
       class with the specified message.
    </para>
      </summary>
      <param name="message">
    A message describing the exception.
 </param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CheckoutException" />
       class with the specified message and error code.
    </para>
      </summary>
      <param name="message">
    A message describing the exception.
 </param>
      <param name="errorCode">
    The error code to pass.
 </param>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>
        <para> Represents a
      unique command identifier that consists
      of a numeric command ID and a GUID menu group identifier.
      </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CommandID" /> class using the specified menu 
   group GUID and command ID
   number.</para>
      </summary>
      <param name="menuGroup">The GUID of the group that this menu command belongs to. </param>
      <param name="commandID">The identifier of this menu command within the group. </param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current object.</para>
      </summary>
      <returns>
        <para> A string that contains the command ID information, both
      the GUID and integer identifier.
      </para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>
        <para> Gets the numeric command ID.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>
        <para> Gets the GUID of the menu group that the menu command identified
      by this <see cref="T:System.ComponentModel.Design.CommandID" />
      
      belongs to.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> event.
   This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> class.</para>
      </summary>
      <param name="component"> The component that was changed.</param>
      <param name="member">A <see cref="T:System.ComponentModel.MemberDescriptor" /> that represents the member that was changed.</param>
      <param name="oldValue">The old value of the changed member.</param>
      <param name="newValue">The new value of the changed member.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>
        <para> Gets the component that was modified. </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>
        <para> Gets the member that has been changed.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>
        <para> Gets the new value of the changed member.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>
        <para> Gets the old value of the changed member.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>
        <para>Represents the method that will handle a <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> event.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">
        <para>A <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> event.
   This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> class.
 </para>
      </summary>
      <param name="component">The component that is about to be changed. </param>
      <param name="member">A <see cref="T:System.ComponentModel.MemberDescriptor" /> indicating the member of the component that is about to be changed. </param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>
        <para> Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>
        <para> Gets the member that is about to be changed.
 </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>
        <para>Represents the method that will handle a <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> event.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">
        <para>A <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> event that contains the event data.</para>
      </param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />,<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />,<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />,<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />,<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />,<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />, and
<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />
events.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> class.
    </para>
      </summary>
      <param name="component">
    The component that is the source of the event.
 </param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>
        <para> Gets the component associated with the event.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" /> , <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />, and
<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> events raised
   for component-level events.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">
        <para>A <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />
class.</para>
      </summary>
      <param name="component">The component to be renamed. </param>
      <param name="oldName">The old name of the component. </param>
      <param name="newName">The new name of the component. </param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>
        <para> Gets the component that is being renamed.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>
        <para> Gets
      the name of the component before the rename event.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>
        <para> Gets the name
      of the component after the rename event.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>
        <para>Represents the method that will handle a <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> event.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">
        <para>A <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>
        <para>Provides a mechanism that can
      be used to improve performance and enable most types of changes to be undone when performing a series of changes at design-time.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> class with no
   description.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> class using the
   specified transaction description.</para>
      </summary>
      <param name="description">A description for this transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>
        <para>Cancels the transaction and attempts to roll back the
      changes made by the events of the transaction.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>
        <para> Commits this transaction.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>
        <para>Raises the <see langword="Cancel " /> event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>
        <para> Raises the <see langword="Commit " /> 
event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> and optionally releases the managed
 resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>
        <para> Gets a value indicating whether the transaction was canceled.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>
        <para> Gets a value indicating whether the transaction was committed.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>
        <para> Gets a description for the transaction.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> and <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> events.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> class,
   using the specified value that indicates whether the designer
   called <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />
   on the transaction.</para>
      </summary>
      <param name="commit">A value indicating whether the transaction was committed.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>
        <para> Indicates whether the designer called <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> on the
   transaction.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>
        <para> Represents the method that handles the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />
and <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> events of a
designer.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>
        <para> Represents a verb that can be invoked from a designer.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>
        <para>Represents a Windows menu
      or toolbar command item.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.MenuCommand" /> class.</para>
      </summary>
      <param name="handler">The event to raise when the user selects the menu item or toolbar button.</param>
      <param name="command">The unique command ID that links this menu command to the environment's menu.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>
        <para> Invokes the command.
      </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>
        <para>Provides notification and is called in response to
 a <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>
        <para>Returns a string representation of this menu command.</para>
      </summary>
      <returns>
        <para> A string containing the
 value of the <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> property appended with
 the names of any flags that are set, separated by "|". These flag
 properties include <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" />, and <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>
        <para> Gets or sets a value indicating whether this menu item is checked.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>
        <para> Gets a value
      indicating whether this menu item is available.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>
        <para> Gets or sets a value
      indicating whether this menu item is supported.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>
        <para> Gets or sets a value
      indicating whether this menu item is visible.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>
        <para> Occurs when the menu command changes.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>
        <para>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> associated with this menu command.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>
        <para> Gets the OLE command status code for this menu item.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerVerb" /> class.</para>
      </summary>
      <param name="text">The text of the menu command that is shown to the user.</param>
      <param name="handler">The event handler that performs the actions of the verb.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerVerb" />
class.</para>
      </summary>
      <param name="text">The text of the menu command that is shown to the user.</param>
      <param name="handler">The event handler that performs the actions of the verb. </param>
      <param name="startCommandID">The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>
        <para> Gets the text description that describes the verb command on the menu.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.ComponentModel.Design.DesignerVerb" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> class using the specified array
   of <see cref="T:System.ComponentModel.Design.DesignerVerb" /> objects.</para>
      </summary>
      <param name="value">A <see cref="T:System.ComponentModel.Design.DesignerVerb" /> array that indicates the verbs to contain within the collection.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>
        <para>Adds the specified <see cref="T:System.ComponentModel.Design.DesignerVerb" /> to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.Design.DesignerVerb" /> to add to the collection.</param>
      <returns>
        <para>The index in the collection at which the verb was added.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>
        <para>Adds the specified set of designer verbs to the collection.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.ComponentModel.Design.DesignerVerb" /> objects to add to the collection.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>
        <para>Adds the specified collection of designer verbs to the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> to add to the collection.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>
        <para>Inserts the specified <see cref="T:System.ComponentModel.Design.DesignerVerb" /> at the specified index.</para>
      </summary>
      <param name="index">The index in the collection at which to insert the verb.</param>
      <param name=" value">The <see cref="T:System.ComponentModel.Design.DesignerVerb" /> to insert in the collection.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>
        <para>Gets the index of the specified <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.Design.DesignerVerb" /> whose index to get in the collection.</param>
      <returns>
        <para>The index of the specified object if it is found in the list; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>
        <para>Gets a value indicating whether the
      specified <see cref="T:System.ComponentModel.Design.DesignerVerb" /> exists in the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.Design.DesignerVerb" /> to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified object exists in the collection; 
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>
        <para>Removes the specified <see cref="T:System.ComponentModel.Design.DesignerVerb" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.ComponentModel.Design.DesignerVerb" /> to remove from the collection.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>
        <para>Copies the collection members to the
      specified <see cref="T:System.ComponentModel.Design.DesignerVerb" /> array beginning at the specified
      destination index.</para>
      </summary>
      <param name="array">The array to copy collection members to.</param>
      <param name=" index">The destination index to begin copying to.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <para>Raises the <see langword="Set" /> event.</para>
      </summary>
      <param name="index">The index at which to set the item.</param>
      <param name=" oldValue">The old object.</param>
      <param name=" newValue">The new object.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        <para>Raises the <see langword="Insert" /> event.</para>
      </summary>
      <param name="index">The index at which to insert an item.</param>
      <param name=" value">The object to insert.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>
        <para>Raises the <see langword="Clear" /> event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        <para>Raises the <see langword="Remove " /> event.</para>
      </summary>
      <param name="index">The index at which to remove the item.</param>
      <param name=" value">The object to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>
        <para>Raises the <see langword="Validate " /> event.</para>
      </summary>
      <param name="value">The object to validate.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the <see cref="T:System.ComponentModel.Design.DesignerVerb" /> at the specified index.</para>
      </summary>
      <param name="index">The index at which to get or set the <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>
        <para> Represents a design-time license context that can
      support a license provider at design time.
      </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>
        <para>Gets a saved license key.</para>
      </summary>
      <param name="type">The type of the license key.</param>
      <param name=" resourceAssembly">The assembly to get the key from.</param>
      <returns>
        <para>The saved license key
       that matches the specified type.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>
        <para> Sets a saved license key.
      </para>
      </summary>
      <param name="type">The type of the license key. </param>
      <param name=" key">The license key. </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>
        <para> Gets the license usage mode.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>
        <para> Provides support for design-time license context serialization.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>
        <para> Serializes the licenses within the specified design-time license context
      using the specified key and output stream.
      </para>
      </summary>
      <param name=" o">The stream to output to. </param>
      <param name=" cryptoKey">The key to use for encryption. </param>
      <param name="context">A <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> indicating the license context. </param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>
        <para> Represents a collection of documents.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerCollection" /> class
   that contains the specified designers.</para>
      </summary>
      <param name="designers">An array of <see cref="T:System.ComponentModel.Design.IDesignerHost" /> objects to store.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerCollection" /> class that contains the 
   specified set of designers.</para>
      </summary>
      <param name="designers">A list that contains the collection of designers to add.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>
        <para> Gets a new enumerator for this collection.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> that
    enumerates the collection.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>
        <para> 
      Gets the number
      of documents in the collection.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>
        <para> 
      Gets the document at the specified index.</para>
      </summary>
      <param name="index">The index of the document to return.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" />
and <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> events.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />
       class.
    </para>
      </summary>
      <param name="host">
    The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> of the document.
 </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>
        <para> 
      Gets the host of the document.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" />
and <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> events that are
raised when a document is created or disposed of.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>
        <para> Defines identifiers that indicate information about the context in which a request for Help
      information originated.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>
        <para> A general context.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>
        <para> A window.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>
        <para> A selection.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>
        <para> A tool window selection.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>
        <para> Defines
      identifiers that indicate the type of a Help keyword.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>
        <para> A keyword that F1 was pressed to request help about.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>
        <para> A general keyword.
      </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>
        <para> A filter keyword.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>
        <para>Provides an interface to add and remove the event 
      handlers for events that add, change, remove or rename components,
      and provides methods to raise a <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> or <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />
      event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>
        <para>Announces to the component change service that a particular component has changed.</para>
      </summary>
      <param name="component">The component that has changed.</param>
      <param name="member">The member that has changed. This is <see langword="null" /> if this change is not related to a single member.</param>
      <param name="oldValue">The old value of the member. This is valid only if the member is not <see langword="null" />.</param>
      <param name="newValue">The new value of the member. This is valid only if the member is not <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
        <para>Announces to the component change service that a particular component is changing.</para>
      </summary>
      <param name="component">The component that is about to change.</param>
      <param name="member">The member that is changing. This is <see langword="null" /> if this change is not related to a single member.</param>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>
        <para>Occurs when a component has been added.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>
        <para>Occurs when a component is in the process of being added.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>
        <para>Occurs when a component has been changed.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>
        <para>Occurs when a component is in the process of being changed.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>
        <para>Occurs when a component has been removed.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>
        <para>Occurs when a component is in the process of being removed.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>
        <para> Occurs when a component is renamed.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>
        <para>Provides the basic framework for building a custom designer.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>
        <para> Performs the default action for this designer.
 </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para>Initializes the designer with the specified component.</para>
      </summary>
      <param name="component">The component to associate with this designer.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>
        <para>Gets or sets the base component that this designer is designing.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>
        <para> Gets or sets the design-time verbs supported by the designer.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>
        <para> Provides event notifications for adding and removing designers, when selection
 changes, and provides the ability to add designers.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>
        <para>Gets or sets the currently active document.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>
        <para> Gets or sets
      a collection of currently active design documents in the development environment.
      </para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>
        <para> Occurs when the currently active designer
      changes.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>
        <para> Occurs when a designer is created.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>
        <para> Occurs when a document is disposed.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>
        <para> Occurs when the current design-view selection changes.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>
        <para> Provides an interface that enables a designer to access and filter
      the dictionaries of a <see cref="T:System.ComponentModel.TypeDescriptor" />
      that stores the property, attribute,
      and event descriptors that a component designer can expose to the
      design-time environment.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>
        <para> When overridden in a
 derived class, allows a designer to change or remove
 from the set of attributes that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="attributes">The attributes for the class of the component. The keys in the dictionary are the type IDs of the attributes.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>
        <para> When overridden in a
 derived class, allows a designer to change or remove items from the set of events that
 it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="events">The events for the class of the component. The keys in the dictionary are event names.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> When overridden in a derived class, allows a designer to
 change or remove items from the set of properties that it exposes through a
 <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="properties">The properties for the class of the component. The keys in the dictionary are property names.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>
        <para> When overridden in a derived class, allows a designer to
 add to the set of attributes that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="attributes">The attributes for the class of the component. The keys in the dictionary are the type IDs of the attributes.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>
        <para> When overridden in a derived class, allows a designer to
 add to the set of events that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="events">The events for the class of the component. The keys in the dictionary are event names.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> When overridden in a derived class, allows a designer to add
 to the set of properties that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="properties">The properties for the class of the component. The keys in the dictionary are event names.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>
        <para> Provides an interface for managing
      designer transactions and components.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>
        <para>Provides a container for services.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>
        <para>Adds the specified service to the service container.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the <paramref name="serviceType" /> parameter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>
        <para>Adds the specified service to the service container, and optionally
      promotes the service to any parent service containers.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the <paramref name="serviceType" /> parameter. </param>
      <param name="promote">
        <see langword="true" /> to promote this request to any parent service containers; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>
        <para>Adds the specified service to the service container.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback"> A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>
        <para> Adds the specified service to the service container, and optionally
 promotes the service to parent service containers.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback"> A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
      <param name="promote">
        <see langword="true" /> to promote this request to any parent service containers; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>
        <para>Removes the specified service type from the service container.</para>
      </summary>
      <param name="serviceType">The type of service to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>
        <para> Removes the specified service type from
 the service container, and optionally promotes the service to parent service containers.</para>
      </summary>
      <param name="serviceType">The type of service to remove.</param>
      <param name="promote">
        <see langword="true" /> to promote this request to any parent service containers; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>
        <para> Activates the designer that this host is hosting.
      </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>
        <para> Creates a component of the specified type and adds it to the design document.
      </para>
      </summary>
      <param name="componentClass">The type of the component to create. </param>
      <returns>
        <para> The newly created component.
      </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>
        <para> Creates a component of the specified type and name, and adds it to the design document.
      </para>
      </summary>
      <param name="componentClass">The type of the component to create. </param>
      <param name="name">The name for the component. </param>
      <returns>
        <para> The newly created component.
      </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>
        <para>Creates a <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> that
   can encapsulate event
   sequences to improve
   performance and enable undo and redo support functionality.</para>
      </summary>
      <returns>
        <para> A new instance of <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> . When 
   you complete the steps in your transaction, you should
   call <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />
   on this object.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>
        <para>Creates a <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> that
   can encapsulate event sequences to improve
   performance and enable undo and redo support functionality, using the specified transaction
   description.</para>
      </summary>
      <param name="description">A title or description for the newly created transaction.</param>
      <returns>
        <para> A new <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> . When 
   you have completed the
   steps in your transaction, you should call <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> on this
   object.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>
        <para> Destroys the specified component and removes it from the designer container.
      </para>
      </summary>
      <param name="component">The component to destroy. </param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>
        <para>Gets the designer instance that contains the specified component.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to retrieve the designer for.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.Design.IDesigner" /> , or <see langword="null" />
if there is no designer for the specified component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>
        <para> Gets an instance of the specified, fully qualified type 
 name.
 </para>
      </summary>
      <param name="typeName">The name of the type to load. </param>
      <returns>
        <para> The type object for the specified type name, or <see langword="null" /> if the type cannot be found.
 </para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>
        <para> Gets a value indicating whether the designer host
      is currently loading the document.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>
        <para> Gets a value indicating whether the designer host is currently in a transaction.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>
        <para> Gets the container for this designer host.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>
        <para> Gets the instance of the base class used as the root component for the current design.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>
        <para> Gets the fully qualified name of the class being designed.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>
        <para> Gets the description of the current transaction.
      </para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>
        <para> Occurs when this designer is activated.
      </para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>
        <para> Occurs when this designer is deactivated.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>
        <para> Occurs when this designer completes loading its document.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>
        <para> Adds an event handler for the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> event.
   </para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>
        <para>Adds an event handler for the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> event.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>
        <para>Adds an event handler for the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> event.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>
        <para> Adds an event handler for the <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> event.
 </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>
        <para> Provides access to the designer options located on
      the <see langword="Tools" /> menu under the <see langword="Options" />
      menu item in the Visual Studio .NET environment.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>
        <para>Gets the value of an option defined in this package.</para>
      </summary>
      <param name="pageName">The name of the page that defines the option.</param>
      <param name="valueName">The name of the option property.</param>
      <returns>
        <para>The value of the specified option.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>
        <para>Sets the value of an option defined in this package.</para>
      </summary>
      <param name="pageName">The name of the page that defines the option.</param>
      <param name="valueName">The name of the option property.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>
        <para> Provides a generic dictionary service that a
 designer can use to store user-defined data.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>
        <para> Gets the key corresponding to the specified value.
      </para>
      </summary>
      <param name="value"> The value to look up in the dictionary. </param>
      <returns>
        <para> The associated key, or <see langword="null" />
if no key exists.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>
        <para> Gets the value corresponding to the specified key.
      </para>
      </summary>
      <param name="key">The key to look up the value for. </param>
      <returns>
        <para> The associated value, or <see langword="null" />
if no value exists.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>
        <para> Sets the specified key-value pair.</para>
      </summary>
      <param name="key">An object to use as the key to associate the value with.</param>
      <param name="value">The value to store.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>
        <para> Provides a service for exposing events
      as <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>
        <para> Creates a unique name for an event-handler method for the specified component and
      event.</para>
      </summary>
      <param name="component">The component instance the event is connected to.</param>
      <param name="e">The event to create a name for.</param>
      <returns>
        <para> The recommended name for the event-handler method for this event.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>
        <para> Gets a collection of event-handler methods that have a method signature compatible with the specified event.</para>
      </summary>
      <param name="e">The event to get the compatible event-handler methods for.</param>
      <returns>
        <para>A collection of strings.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>
        <para>Gets an <see cref="T:System.ComponentModel.EventDescriptor" /> for the event that the specified property descriptor represents, if
   it represents an event.</para>
      </summary>
      <param name="property">The property that represents an event.</param>
      <returns>
        <para>An <see cref="T:System.ComponentModel.EventDescriptor" /> for the event that
   the property represents, or <see langword="null" /> if the property does not represent an event.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>
        <para>Converts a set of event descriptors to a set of property descriptors.</para>
      </summary>
      <param name="events">The events to convert to properties.</param>
      <returns>
        <para> An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects that describe the event set.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>
        <para> Converts a single event descriptor to a property descriptor.
      </para>
      </summary>
      <param name="e">The event to convert. </param>
      <returns>
        <para> A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that describes the event.
   </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>
        <para>Displays the user code for the designer.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   code is displayed; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>
        <para> Displays the user code
      for the designer at the specified line.</para>
      </summary>
      <param name="lineNumber">The line number to place the caret on. </param>
      <returns>
        <para>
          <see langword="true" /> if the code is displayed; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>
        <para>Displays the user code for the specified event.</para>
      </summary>
      <param name="component">The component that the event is connected to.</param>
      <param name="e">The event to display.</param>
      <returns>
        <para>
          <see langword="true" /> if the code is displayed;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>
        <para>Provides an interface that can list extender providers.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>
        <para>Gets the set of extender providers for the component.</para>
      </summary>
      <returns>
        <para>An array of type <see cref="T:System.ComponentModel.IExtenderProvider" />
that lists the extender providers. If there are
no providers, an empty array is returned.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>
        <para>Provides an interface for adding and removing extender providers at design time.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>
        <para>Adds the specified extender provider.</para>
      </summary>
      <param name="provider">The extender provider to add.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>
        <para>Removes the specified extender provider.</para>
      </summary>
      <param name="provider">The extender provider to remove.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>
        <para> Provides the integrated development environment (IDE) Help
      system with contextual information for the current task.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>
        <para>Adds a context attribute to the document.</para>
      </summary>
      <param name="name">The name of the attribute to add.</param>
      <param name="value">The value of the attribute.</param>
      <param name="keywordType">The type of the keyword, from the enumeration <see cref="T:System.ComponentModel.Design.HelpKeywordType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>
        <para>Removes all existing context attributes from the document.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>
        <para>Creates a local <see cref="T:System.ComponentModel.Design.IHelpService" /> to manage subcontexts.</para>
      </summary>
      <param name="contextType">The priority type of the subcontext to add. </param>
      <returns>
        <para>The newly created <see cref="T:System.ComponentModel.Design.IHelpService" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>
        <para>
       Removes a previously added context attribute.
    </para>
      </summary>
      <param name="name">
    The name of the attribute to remove.
 </param>
      <param name="value">
    The value of the attribute to remove.
 </param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>
        <para> Removes a context created with <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" /> .</para>
      </summary>
      <param name="localContext">The local context <see cref="T:System.ComponentModel.Design.IHelpService" /> to remove. </param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>
        <para>Shows the Help topic that corresponds to the specified keyword.</para>
      </summary>
      <param name="helpKeyword">The keyword of the Help topic to display.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>
        <para> Shows the Help topic that corresponds to the specified URL.</para>
      </summary>
      <param name="helpUrl">The URL of the Help topic to display.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>
        <para> Provides methods for identifying inherited components.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>
        <para>Searches for inherited components of the specified component and adds them to the specified container.</para>
      </summary>
      <param name="component">The component to search. Searching begins with this component.</param>
      <param name="container">The container to add inherited components to.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>
        <para> Gets the inheritance attribute of the specified component. </para>
      </summary>
      <param name="component">The component to retrieve the inheritance attribute for.</param>
      <returns>
        <para>An instance of <see cref="T:System.ComponentModel.InheritanceAttribute" />
that describes what level of inheritance this component comes
from. If the component is not inherited, this method returns the value <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" qualify="true" /> . Otherwise, it returns
the inheritance attribute for this component. </para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>
        <para> Provides an interface that designers can use to add menu items to the
      Visual Studio .NET menu.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
        <para>Adds the specified menu command to the document's available verbs.</para>
      </summary>
      <param name="command">The command to add.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>
        <para>Adds the specified verb to the set of global verbs.</para>
      </summary>
      <param name="verb">The verb to add.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>
        <para>Searches for the specified command ID and returns
      the <see cref="T:System.ComponentModel.Design.MenuCommand" />
      associated with it.</para>
      </summary>
      <param name="commandID">The command ID to search for.</param>
      <returns>
        <para>The <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with this command ID, or
<see langword="null" />
if no command is found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>
        <para>Invokes a command on the local form or in the global environment.</para>
      </summary>
      <param name="commandID">The <see cref="T:System.ComponentModel.Design.CommandID" /> to search for and execute.</param>
      <returns>
        <para>
          <see langword="true" /> if the command was found and invoked successfully; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>
        <para> Removes the specified <see cref="T:System.ComponentModel.Design.MenuCommand" /> from the document.
   </para>
      </summary>
      <param name="command">The <see cref="T:System.ComponentModel.Design.MenuCommand" /> to remove. </param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>
        <para>Removes the specified verb from the document.</para>
      </summary>
      <param name="verb">The <see cref="T:System.ComponentModel.Design.DesignerVerb" /> to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>
        <para>Shows the context menu with the specified command ID at the specified
      location.</para>
      </summary>
      <param name="menuID">The <see cref="T:System.ComponentModel.Design.CommandID" /> for the context menu to show.</param>
      <param name="x">The x coordinate of the menu in screen coordinates.</param>
      <param name="y">The y coordinate of the menu in screen coordinates.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>
        <para>Gets or sets an
      array of the verbs that are currently available.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>
        <para> Indicates the inheritance attribute of a class. This
      class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>
        <para> Specifies that the component is inherited. This field is
      read-only.
      </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>
        <para> Specifies that
      the component is inherited and is read-only. This field is
      read-only.
      </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>
        <para> Specifies that the component is not inherited. This field is
      read-only.
      </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>
        <para>Specifies that the default value for <see cref="T:System.ComponentModel.InheritanceAttribute" /> is <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" /> . This field is
 read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.InheritanceAttribute" />
class.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.InheritanceAttribute" /> class
   with the specified inheritance
   level.</para>
      </summary>
      <param name="inheritanceLevel">An <see cref="T:System.ComponentModel.InheritanceLevel" /> that indicates the level of inheritance to set this attribute to.</param>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>
        <para> Gets a value indicating whether the current value of the attribute is the default value for the attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current value of the attribute
   is the default; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>
        <para> Gets or sets
      the current inheritance level stored in this attribute.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>
        <para> Defines identifiers for types of inheritance levels.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>
        <para> The object is inherited.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>
        <para> The object is inherited, but has read-only access.
      </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>
        <para> The object is not inherited.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>
        <para>Provides an interface that can retrieve names of and references to objects within a designer project.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>
        <para>Gets the base component that anchors the specified reference.</para>
      </summary>
      <param name="reference">The object that is contained by the base component to retrieve.</param>
      <returns>
        <para>The base <see cref="T:System.ComponentModel.IComponent" /> 
containing the specified object.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>
        <para> Gets a reference for the specified component name.
      </para>
      </summary>
      <param name="name">The name of the component to return a reference to. </param>
      <returns>
        <para> An object the specified name refers to, or
   <see langword="null" />
   if no reference is found.
   </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>
        <para> Gets the name of the specified object.</para>
      </summary>
      <param name="reference">The object to return the name of.</param>
      <returns>
        <para>The name of the object referenced, or
   <see langword="null" />
   if the object reference is not
   valid.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>
        <para>       Gets all available references.
      </para>
      </summary>
      <returns>
        <para>       An array of all objects with references available to the
      <see cref="T:System.ComponentModel.Design.IReferenceService" />.
   </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>
        <para> Gets all available references of the specified type.
      </para>
      </summary>
      <param name="baseType">The type to filter by. </param>
      <returns>
        <para> An array of all available objects of the specified type.
      </para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>
        <para> Provides an interface for designers to access
      specific <see cref="T:System.Globalization.CultureInfo" />
      
      resources for the current design time
      object.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>
        <para> Locates the resource reader for the specified culture and
 returns it.</para>
      </summary>
      <param name="info">The <see cref="T:System.Globalization.CultureInfo" /> of the resource for which to retrieve a resource reader.</param>
      <returns>
        <para>An <see cref="T:System.Resources.IResourceReader" /> interface that contains the
 resources for the culture, or <see langword="null" />
 if no resources for the culture
 exist.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>
        <para>Locates the resource writer for the specified culture and returns it.</para>
      </summary>
      <param name="info">The <see cref="T:System.Globalization.CultureInfo" /> of the resource for which to create a resource writer.</param>
      <returns>
        <para>An <see cref="T:System.Resources.IResourceWriter" /> interface for the specified culture.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>
        <para>Indicates the root designer and provides support for
      designer view technologies.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>
        <para>Gets a view object for the specified view technology.</para>
      </summary>
      <param name="technology">A <see cref="T:System.ComponentModel.Design.ViewTechnology" /> that indicates a particular view technology. This <see cref="T:System.ComponentModel.Design.ViewTechnology" /> object must be indicated as a value of the <see cref="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies" /> property. Otherwise, an <see cref="T:System.ArgumentException" /> is thrown. </param>
      <returns>
        <para>An object that represents the view for this designer.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>
        <para> Gets the set of technologies that this designer can support for its
      display.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>
        <para> Provides an interface for a designer to select components.
      </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>
        <para>Gets a value indicating whether the specified component is currently selected.</para>
      </summary>
      <param name="component">The component to test.</param>
      <returns>
        <para>
          <see langword="true " /> if the component is part of the user's current selection; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>
        <para> Gets a collection of components that are currently selected.
      </para>
      </summary>
      <returns>
        <para> A collection that represents the current set of components that are selected.
      </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>
        <para> Selects the specified collection of components.</para>
      </summary>
      <param name="components">The collection of components to select.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>
        <para> Selects the components from within the specified collection of components that match the specified selection type.</para>
      </summary>
      <param name="components">The collection of components to select.</param>
      <param name="selectionType">A value from the <see cref="T:System.ComponentModel.Design.SelectionTypes" /> enumeration. The default is <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>
        <para>Gets or sets the object that is currently the primary selected object.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>
        <para> Gets the count of selected objects.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>
        <para> Occurs when the current selection changes.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>
        <para>Occurs when the current selection is about to change.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>
        <para>Provides an interface to modify the set of type descriptors that a component
 provides.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>
        <para> Filters the attributes that a component exposes through
      a <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="component">The component to filter the attributes of.</param>
      <param name="attributes">A dictionary of attributes that can be modified.</param>
      <returns>
        <para>
          <see langword="true" />
if the set of filtered attributes is to be cached; <see langword="false" />
if the filter service must query again.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>
        <para> Filters the events that a component exposes through a
      <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="component">The component to filter events for.</param>
      <param name="events">A dictionary of events that can be modified.</param>
      <returns>
        <para>
          <see langword="true" /> if the set of filtered events is to be
   cached; <see langword="false" /> if the filter service must query again.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>
        <para>Filters the properties that a component exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="component">The component to filter properties for.</param>
      <param name="properties">A dictionary of properties that can be modified.</param>
      <returns>
        <para>
          <see langword="true" /> if the set of
   filtered properties is to be cached; <see langword="false" />
   if the filter service must query again.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>
        <para>Provides a service to retrieve an assembly or a type by name.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>
        <para>Gets the requested assembly.</para>
      </summary>
      <param name="name">The name of the assembly to retrieve. </param>
      <returns>
        <para>An instance of the requested assembly, or
   <see langword="null" />
   if no assembly can be located.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>
        <para>Gets the requested assembly.</para>
      </summary>
      <param name="name">The name of the assembly to retrieve. </param>
      <param name="throwOnError">
        <see langword="true" /> if this method should throw an exception if the assembly cannot be located; otherwise, <see langword="false" />, and this method returns <see langword="null" /> if the assembly cannot be located. </param>
      <returns>
        <para>An instance of the requested assembly, or
 <see langword="null" /> if no assembly can be located.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>
        <para>Loads a type with the specified name.</para>
      </summary>
      <param name="name">The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.</param>
      <returns>
        <para>An instance of <see cref="T:System.Type" /> that corresponds to
   the specified name, or <see langword="null" />
   if no type can be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>
        <para>Loads a type with the specified name.</para>
      </summary>
      <param name="name">The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.</param>
      <param name="throwOnError">
        <see langword="true" /> if this method should throw an exception if the assembly cannot be located; otherwise, <see langword="false" />, and this method returns <see langword="null" /> if the assembly cannot be located. </param>
      <returns>
        <para>An instance of <see cref="T:System.Type" /> that corresponds to
 the specified name, or <see langword="null" />
 if no type can be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Loads a type with the specified name.</para>
      </summary>
      <param name="name">The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.</param>
      <param name="throwOnError">
        <see langword="true" /> if this method should throw an exception if the assembly cannot be located; otherwise, <see langword="false" />, and this method returns <see langword="null" /> if the assembly cannot be located. </param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case when searching for types; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>An instance of <see cref="T:System.Type" /> that corresponds to
 the specified name, or <see langword="null" />
 if no type can be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>
        <para> Adds a reference
      to the specified assembly.</para>
      </summary>
      <param name="name">An <see cref="T:System.Reflection.AssemblyName" /> that indicates the assembly to reference.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>
        <para>Gets the path to the file from which the assembly was loaded.</para>
      </summary>
      <param name="name">The name of the assembly.</param>
      <returns>
        <para>The path to the file from which the assembly was loaded.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.NotifyParentPropertyAttribute">
      <summary>
        <para> Indicates that the parent property is
 notified when the value of the property that this attribute is applied to
 is modified. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Yes">
      <summary>
        <para>Indicates that the parent property is notified of changes to the value of the property. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.No">
      <summary>
        <para> Indicates that the parent property is not be notified of changes
 to the value of the property. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Default">
      <summary>
        <para> Indicates the default attribute state, that the property should not notify the parent property of changes to its value.
      This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.NotifyParentPropertyAttribute" /> class, using the specified value to determine whether the parent property is notified of changes to the value of the property.</para>
      </summary>
      <param name="notifyParent">
        <see langword="true" /> if the parent should be notified of changes; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.Equals(System.Object)">
      <summary>
        <para>Gets a value indicating whether the specified object is the same as the current object.</para>
      </summary>
      <param name="obj">The object to test for equality.</param>
      <returns>
        <para>
          <see langword="true" /> if the object 
   is the same as this object; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.GetHashCode">
      <summary>
        <para>Gets the hash code for this object.</para>
      </summary>
      <returns>
        <para> The hash code for the object the attribute belongs to.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.IsDefaultAttribute">
      <summary>
        <para>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current value of the attribute
 is the default value of the attribute; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.NotifyParentPropertyAttribute.NotifyParent">
      <summary>
        <para> Gets or sets a value indicating whether the parent property should be
 notified of changes to the value of the property.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ParenthesizePropertyNameAttribute">
      <summary>
        <para> Indicates whether the name of the associated property is displayed with parentheses in the Properties window. This class cannot
 be inherited.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ParenthesizePropertyNameAttribute.Default">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> class with a default value that indicates 
   that the associated property should not be shown with parentheses. This field is
   read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> class that indicates that the associated 
   property should not be shown
   with parentheses.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" />
class, using the specified value to indicate whether the
attribute is displayed with parentheses.</para>
      </summary>
      <param name="needParenthesis">
        <see langword="true" /> if the name should be enclosed in parentheses; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.IsDefaultAttribute">
      <summary>
        <para>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current value of the attribute
   is the default value of the attribute; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.ParenthesizePropertyNameAttribute.NeedParenthesis">
      <summary>
        <para> Gets a value indicating whether
      the Properties window displays
      the name of the property in parentheses in
      the Properties window.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>
        <para> Identifies the property tab or tabs to display for the
      specified class or classes.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyTabAttribute" />
class.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyTabAttribute" /> class using
   the specified type of tab.</para>
      </summary>
      <param name="tabClass"> The type of tab to create.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyTabAttribute" /> class using the
   specified tab class name.</para>
      </summary>
      <param name="tabClassName">The assembly qualified name of the type of tab to create. For an example of this format convention, see <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyTabAttribute" /> class
 using the specified type
 of tab and tab scope.</para>
      </summary>
      <param name="tabClass">The type of tab to create.</param>
      <param name="tabScope">A <see cref="T:System.ComponentModel.PropertyTabScope" /> that indicates the scope of this tab. If the scope is <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, it is shown only for components with the corresponding <see cref="T:System.ComponentModel.PropertyTabAttribute" />. If it is <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> , it is shown for all components on the document.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyTabAttribute" /> class using the specified tab class
 name and tab scope.</para>
      </summary>
      <param name="tabClassName">The assembly qualified name of the type of tab to create. For an example of this format convention, see <see cref="P:System.Type.AssemblyQualifiedName" />. </param>
      <param name="tabScope">A <see cref="T:System.ComponentModel.PropertyTabScope" /> that indicates the scope of this tab. If the scope is <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , it is shown only for components with the corresponding <see cref="T:System.ComponentModel.PropertyTabAttribute" />. If it is <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> , it is shown for all components on the document.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>
        <para> Initializes the attribute using the specified names of tab classes and array of tab scopes.</para>
      </summary>
      <param name="tabClassNames">An array of fully qualified type names of the types to create for tabs on the Properties window. </param>
      <param name="tabScopes">The scope of each tab. If the scope is <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , it is shown only for components with the corresponding <see cref="T:System.ComponentModel.PropertyTabAttribute" />. If it is <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> , it is shown for all components on the document.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>
        <para> Initializes the attribute using the specified names of tab
 classes and array of tab scopes.</para>
      </summary>
      <param name="tabClasses">The types of tabs to create.</param>
      <param name="tabScopes">The scope of each tab. If the scope is <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , it is shown only for components with the corresponding <see cref="T:System.ComponentModel.PropertyTabAttribute" />. If it is <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> , it is shown for all components on the document.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>
        <para>Gets the types of tab that this attribute uses.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>
        <para>Gets or sets the names of tab classes that this attribute uses.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>
        <para>Gets an array of tab scopes of each tab of
      this <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>
        <para> Defines identifiers that indicate the persistence scope of
 a tab in the Properties window.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>
        <para> This tab is added to the Properties window and cannot be
      removed.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>
        <para> This tab is added to
      the Properties window and can only be removed explicitly by a parent component.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>
        <para> This tab is
      specific to the current document. This tab is added to the Properties window and is removed
      when the currently selected document changes.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>
        <para> This
      tab is
      specific to the current component. This tab is added to the Properties window for the current component only and is
      removed when the component is no longer selected.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.RefreshProperties">
      <summary>
        <para> Defines identifiers that indicate the type of a refresh of the Properties window.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.None">
      <summary>
        <para> No refresh is necessary.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.All">
      <summary>
        <para> The properties should be requeried and the view should be refreshed.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.Repaint">
      <summary>
        <para> The view should be should
      refreshed. </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.RefreshPropertiesAttribute">
      <summary>
        <para> Indicates how a designer refreshes when the associated property value changes. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.All">
      <summary>
        <para> Indicates that all properties are requeried
      and refreshed if the property value is changed. This field is
      read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Repaint">
      <summary>
        <para> Indicates that
      all properties are repainted if the
      property value is changed. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Default">
      <summary>
        <para> Indicates
      that
      no other properties are refreshed if the property value
      is changed. This field is read-only.
      </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.GetHashCode">
      <summary>
        <para>Returns the hash code for this object.</para>
      </summary>
      <returns>
        <para>The hash code for the object that the attribute belongs to.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.IsDefaultAttribute">
      <summary>
        <para>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current value of the attribute
   is the default; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.RefreshPropertiesAttribute.RefreshProperties">
      <summary>
        <para> Gets or sets
      the refresh properties for the member.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>
        <para> Defines identifiers that indicate the type of a selection.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>
        <para>A regular selection. The selection service
      responds to the control and shift keys to support adding or removing components to or
      from the selection.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>
        <para>A selection that occurs when the content of a 
      selection is replaced. The selection service replaces the
      current selection with the replacement.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>
        <para> A selection that occurs when the user presses on the mouse button when
 the mouse pointer is over a component. If the component under the pointer is already selected,
 it is promoted to become the primary selected component rather than being deselected.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>
        <para> A selection that occurs when the user releases
      the mouse button immediately after a component has been selected. If the newly
      selected component is already selected, it is promoted to be the primary selected component rather than being deselected.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>
        <para> A selection that occurs when a
      user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected
      component rather than being deselected.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>
        <para> Identifies the valid selection types as
 <see langword="Normal" />, <see langword="Replace" />, <see langword="MouseDown" />,
 <see langword="MouseUp" />, or <see langword="Click" />.
 </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>
        <para> Provides a callback mechanism that can create an instance of a service on demand.</para>
      </summary>
      <param name="container">The service container that requested the creation of the service. </param>
      <param name="serviceType">The type of service to create. </param>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>
        <para>Provides a simple implementation of the <see cref="T:System.ComponentModel.Design.IServiceContainer" /> interface. This class cannot be
   inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ServiceContainer" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ServiceContainer" /> class using the specified parent service provider.</para>
      </summary>
      <param name="parentProvider">A parent service provider.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>
        <para>Adds the specified service to the service container.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="serviceInstance"> An instance of the service to add. This object must implement or inherit from the type indicated by the <paramref name="serviceType" /> parameter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>
        <para>Adds the specified service to the service container.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the <paramref name="serviceType" /> parameter.</param>
      <param name="promote">
        <see langword="true" /> if this service should be added to a parent service container; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>
        <para>Adds the specified service to the service container.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback">A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>
        <para>Adds the specified service to the service container.</para>
      </summary>
      <param name="serviceType">The type of service to add.</param>
      <param name="callback">A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
      <param name="promote">
        <see langword="true" /> if this service should be added to any parent service containers; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>
        <para>Gets the requested service.</para>
      </summary>
      <param name="serviceType">The type of service to retrieve.</param>
      <returns>
        <para> An instance of the service if it could be found,
      or <see langword="null" />
      if it could not be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>
        <para>Removes the specified service type from the service container.</para>
      </summary>
      <param name="serviceType">The type of service to remove.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>
        <para>Removes the specified service type from the service container.</para>
      </summary>
      <param name="serviceType">The type of service to remove.</param>
      <param name="promote">
        <see langword="true" /> if this service should be removed from any parent service containers; otherwise, <see langword="false" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>
        <para>Defines identifiers for the standard set of commands that are available to
 most applications.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Align -&gt; Bottoms" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Align -&gt; Middles" /> command. This field is
 read-only.
 </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Align -&gt; Lefts" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Align -&gt; Rights" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Align -&gt; toGrid" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Align -&gt; Tops" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Align -&gt; Centers" /> command. This field is
 read-only.
 </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword=" ArrangeBottom" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword=" ArrangeRight" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword=" BringForward" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the 
<see langword="BringToFront" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="CenterHorizontally" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="CenterVertically" /> command. This field
   is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Copy" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Cut" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Delete" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Group" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="HorizSpaceConcatenate" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="HorizSpaceDecrease" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="HorizSpaceIncrease" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="HorizSpaceMakeEqual" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Paste" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the 
<see langword="Properties" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Redo" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="MultiLevelRedo" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="SelectAll" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the 
<see langword="SendBackward" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the 
<see langword="SendToBack" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="SizeToControl" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="SizeToControlHeight" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="SizeToControlWidth" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="SizeToFit" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the 
<see langword="SizeToGrid" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the 
<see langword="SnapToGrid" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="TabOrder" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Undo" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="MultiLevelUndo" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Ungroup" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="VertSpaceConcatenate" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="VertSpaceDecrease" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="VertSpaceIncrease" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="VertSpaceMakeEqual" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="ShowGrid" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="ViewGrid" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="Replace" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="PropertiesWindow" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the 
<see langword="LockControls" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the <see langword="F1Help" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the 
<see langword="ArrangeIcons" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the 
<see langword="LineupIcons" /> command. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>
        <para> Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the
<see langword="ShowLargeIcons" /> command. This field is
   read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>
        <para> Gets the first of a set of verbs.
      This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>
        <para> Gets the last of a set of verbs.
      This field is read-only.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>
        <para> Defines GUID identifiers that correspond to the standard set of tool windows that are available in
 the design environment.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>
        <para>Gets the GUID for the object browser.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>
        <para>Gets the GUID for the output window.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>
        <para>Gets the GUID for the solution explorer.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>
        <para>Gets the GUID for the Properties window.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>
        <para>Gets the GUID for the related links frame.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>
        <para>Gets the GUID for the server explorer.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>
        <para>Gets the GUID for the task list.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>
        <para>Gets the GUID for the toolbox.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>
        <para>Represents an attribute of a toolbox item.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> class and
   sets the type to the default, <see cref="T:System.Drawing.Design.ToolboxItem" />. This field is read-only.
   </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> class and 
   sets the type to <see langword="null" />. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>
        <para>Gets a value indicating whether the current value of the attribute is the default value for the attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current value of the attribute
   is the default; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> and specifies whether to use default initialization values.
   </para>
      </summary>
      <param name="defaultType">
        <see langword="true" /> to create a toolbox item attribute for a default type; <see langword="false" /> to associate no default toolbox item support for this attribute. </param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> class using the specified name of the type.</para>
      </summary>
      <param name="toolboxItemTypeName">The names of the type of the toolbox item and of the assembly that contains the type.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 
class using the specified type of the toolbox item.</para>
      </summary>
      <param name="toolboxItemType">The type of the toolbox item.</param>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>
        <para>Gets or sets the type of the toolbox item.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>
        <para>Gets or sets the name of the type of the current <see cref="T:System.Drawing.Design.ToolboxItem" />.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>
        <para> Defines identifiers for a set of technologies that designer hosts support.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>
        <para> A mode in which the view object is passed directly
      to the development environment. The view object must implement any
      interfaces the development environment requires. The Visual Studio .NET
      development environment supports view objects that are either an ActiveX
      control, active document, or an object that implements the IVsWindowPane interface that is available through Visual
      Studio VSI (Visual Studio Integration) program.</para>
        <note type="note">
      The Visual Studio .NET development
      environment provides support for this view
      technology. Support for this view technology is not necessarily available in all
      development environments.
      
      </note>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>
        <para> A mode in which a Windows Forms control object provides the
 display for the root designer. The designer host fills the
 development environment document window with this control.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>
        <para>Provides a stack object that can be used by a serializer to make information available to nested
      serializers.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>
        <para>Pops, or removes, the current object off of the stack, returning
      its value.</para>
      </summary>
      <returns>
        <para> The object popped off of the stack. This returns
   <see langword="null" />
   if no objects are on the stack.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>
        <para>Pushes, or places, the specified object onto the stack.</para>
      </summary>
      <param name="context">The context object to push onto the stack.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>
        <para> Gets or
      sets the current object on the stack.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>
        <para>Gets or sets the object on the stack at the specified level.</para>
      </summary>
      <param name="level">The level of the object to retrieve on the stack. Level zero is the top of the stack, level one is the next down, and so on. This level must be zero or greater. If level is greater than the number of levels on the stack, it returns <see langword="null" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>
        <para> Gets the first object
      on the stack that inherits from or implements the specified type.</para>
      </summary>
      <param name="type">A type to retrieve from the context stack.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>
        <para>Provides a basic designer loader interface that can be used to implement a custom designer loader.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>
        <para> Begins loading
      a designer.</para>
      </summary>
      <param name="host"> The loader host through which this loader loads components.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>
        <para>Releases all resources used by the <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>
        <para> Writes cached changes to the location that the designer was loaded from.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>
        <para> Gets a value indicating whether the loader
      is currently loading a document.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>
        <para> Indicates a serializer for the serialization manager to use to serialize the values of the type this attribute is applied to. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> class.</para>
      </summary>
      <param name="serializerType">The data type of the serializer.</param>
      <param name="baseSerializerType">The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> class.</para>
      </summary>
      <param name="serializerTypeName">The fully qualified name of the data type of the serializer.</param>
      <param name="baseSerializerType">The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> class.</para>
      </summary>
      <param name="serializerTypeName">The fully qualified name of the data type of the serializer.</param>
      <param name="baseSerializerTypeName">The fully qualified name of the base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>
        <para> Gets the fully qualified type name of the serializer.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>
        <para> Gets the fully qualified type name of the serializer base type.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>
        <para>Provides an interface that can extend a designer host to support loading from a serialized state.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>
        <para>Ends the designer loading operation.</para>
      </summary>
      <param name="baseClassName">The fully qualified name of the base class of the document that this designer is designing.</param>
      <param name="successful">
        <see langword="true" /> if the designer is successfully loaded; otherwise, <see langword="false" />.</param>
      <param name="errorCollection">A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>
        <para>Reloads the design document.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>
        <para>Provides an interface that can extend a designer loader to support asynchronous loading of external components.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>
        <para>Registers an external component as part of the load process managed by this
 interface.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>
        <para>Signals that a dependent load has finished.</para>
      </summary>
      <param name="successful">
        <see langword="true" /> if the load of the designer is successful; <see langword="false" /> if errors prevented the load from finishing.</param>
      <param name="errorCollection">A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>
        <para>Reloads the design document.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the reload request is
 accepted, or <see langword="false" />
 if
 the loader does not allow the reload.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>
        <para> Provides an
      interface that can manage design-time serialization.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>
        <para>Adds the specified serialization provider to the serialization manager.</para>
      </summary>
      <param name="provider">The serialization provider to add.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>
        <para> Creates an instance of the specified
 type and adds it to a collection of named instances.</para>
      </summary>
      <param name="type">The data type to create.</param>
      <param name="arguments">The arguments to pass to the constructor for this type.</param>
      <param name="name">The name of the object. This name can be used to access the object later through <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. If <see langword="null" /> is passed, the object is still created but cannot be accessed by name.</param>
      <param name="addToContainer">If <see langword="true" /> , this object is added to the design container. The object must implement <see cref="T:System.ComponentModel.IComponent" /> for this to have any effect.</param>
      <returns>
        <para>The newly created object instance.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>
        <para>Gets an instance of a created object of the specified
      name, or <see langword="null" />
      if that object does not exist.</para>
      </summary>
      <param name="name">The name of the object to retrieve.</param>
      <returns>
        <para>An instance of the object with the given name, or
   <see langword="null" /> if no object by that name can be found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>
        <para>Gets the name of the specified object, or 
    <see langword="null" /> if the object
       has no name.</para>
      </summary>
      <param name="value">The object to retrieve the name for.</param>
      <returns>
        <para>The name of the object, or <see langword="null" /> if the object is unnamed.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>
        <para>Gets a serializer of the requested type for the specified
      object type.</para>
      </summary>
      <param name="objectType">The type of the object to get the serializer for.</param>
      <param name="serializerType">The type of the serializer to retrieve.</param>
      <returns>
        <para>An instance of the requested serializer, or
   <see langword="null" /> if no
      appropriate serializer can be located.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>
        <para>Gets a type of the specified name.</para>
      </summary>
      <param name="typeName">The fully qualified name of the type to load.</param>
      <returns>
        <para>An instance of the type, or <see langword="null" /> if the type cannot be loaded.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>
        <para>Removes a custom serialization provider from the serialization manager.</para>
      </summary>
      <param name="provider">The provider to remove. This object must have been added using <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>
        <para> Reports an error in serialization.</para>
      </summary>
      <param name="errorInformation"> The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, <see cref="M:System.Object.ToString" /> is called to display the information to the user.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>
        <para>Sets the name of the specified existing object.</para>
      </summary>
      <param name="instance">The object instance to name.</param>
      <param name="name">The name to give the instance.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>
        <para>Gets a stack-based, user-defined storage area that is useful for
      communication between serializers.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>
        <para> Indicates custom properties that can be serializable
 with available serializers.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>
        <para>Occurs when <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" />
cannot locate the specified name in the serialization manager's name
table.</para>
      </summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>
        <para> Occurs when serialization is complete.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>
        <para> Provides an interface that
      enables access to a serializer.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>
        <para> Gets
 a serializer using the specified attributes.</para>
      </summary>
      <param name="manager">The serialization manager requesting the serializer.</param>
      <param name="currentSerializer">An instance of the current serializer of the specified type. This can be <see langword="null" /> if no serializer of the specified type exists.</param>
      <param name="objectType">The data type of the object to serialize.</param>
      <param name="serializerType">The data type of the serializer to create.</param>
      <returns>
        <para>An instance of a serializer of the type requested, or
 <see langword="null" /> if
 the request cannot be satisfied.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>
        <para> Provides
      an
      interface that
      can invoke serialization and deserialization.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>
        <para>Deserializes the specified serialization data object and
      returns a collection of objects represented by that
      data.</para>
      </summary>
      <param name="serializationData">An object consisting of serialized data.</param>
      <returns>
        <para>An <see cref="T:System.Collections.ICollection" /> of objects rebuilt from the specified
   serialization data object.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>
        <para> Serializes the specified collection of objects and stores them in a
      serialization data object.</para>
      </summary>
      <param name="objects">A collection of objects to serialize.</param>
      <returns>
        <para>An object that contains the serialized state of the specified
      collection of objects.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>
        <para>Provides a service that can generate unique names for objects.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>
        <para> Creates a new name that
 is unique to all components in the specified container.</para>
      </summary>
      <param name="container">The container where the new object is added. </param>
      <param name="dataType">The data type of the object that receives the name. </param>
      <returns>
        <para>A unique name for the data type.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>
        <para> Gets a value indicating whether the specified name
      is valid.</para>
      </summary>
      <param name="name">The name to validate. </param>
      <returns>
        <para>
          <see langword="true" /> if the name is valid; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>
        <para> Gets a value
 indicating whether the specified name is valid.</para>
      </summary>
      <param name="name">The name to validate. </param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>
        <para> Provides information necessary to create
      an instance of
      an object. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />
class using the specified member information and arguments.</para>
      </summary>
      <param name="member">The member information for the descriptor. This can be a <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" />, or <see cref="T:System.Reflection.PropertyInfo" />. If this is a <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" />, or <see cref="T:System.Reflection.PropertyInfo" />, it must represent a <see langword="static" /> member. </param>
      <param name="arguments">The collection of arguments to pass to the member. This parameter can be <see langword="null" /> or an empty collection if there are no arguments. The collection can also consist of other instances of <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />
class using the specified member information, arguments, and value indicating
whether the specified information completely describes the instance.</para>
      </summary>
      <param name="member">The member information for the descriptor. This can be a <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" />, or <see cref="T:System.Reflection.PropertyInfo" />. If this is a <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" />, or <see cref="T:System.Reflection.PropertyInfo" />, it must represent a <see langword="static" /> member. </param>
      <param name=" arguments"> The collection of arguments to pass to the member. This parameter can be <see langword="null" /> or an empty collection if there are no arguments. The collection can also consist of other instances of <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <param name=" isComplete">
        <see langword="true" /> if the specified information completely describes the instance; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>
        <para>Invokes this instance descriptor and returns the object
      the descriptor describes.</para>
      </summary>
      <returns>
        <para>The object this instance descriptor describes.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>
        <para> Gets the collection of arguments that can be used to 
 reconstruct an instance of the object that this instance descriptor represents.
 </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>
        <para>Gets a value indicating whether the contents of this <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> completely identify the instance.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>
        <para> Gets the member information that describes the instance this descriptor
      is associated with.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />
event.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />
class.</para>
      </summary>
      <param name="name">The name to resolve.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>
        <para> Gets the name of the object to resolve.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>
        <para>Gets or sets the object that matches the name.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>
        <para> Represents the method that handles the <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />
event of a serialization manager.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>
        <para> Indicates the 
      base serializer to use for a root designer object. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> class using the
 specified attributes.</para>
      </summary>
      <param name="serializerType">The data type of the serializer.</param>
      <param name="baseSerializerType">The base type of the serializer. A class can include multiple serializers as they all have different base types.</param>
      <param name="reloadable">
        <see langword="true" /> if this serializer supports dynamic reloading of the document; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> class using the
 specified attributes.</para>
      </summary>
      <param name="serializerTypeName">The fully qualified name of the data type of the serializer.</param>
      <param name="baseSerializerType">The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.</param>
      <param name="reloadable">
        <see langword="true" /> if this serializer supports dynamic reloading of the document; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> class using the
 specified attributes.</para>
      </summary>
      <param name="serializerTypeName">The fully qualified name of the data type of the serializer.</param>
      <param name="baseSerializerTypeName">The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.</param>
      <param name="reloadable">
        <see langword="true" /> if this serializer supports dynamic reloading of the document; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>
        <para> Gets a value indicating whether the root serializer
 supports reloading of the design document
 without first disposing the designer host.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>
        <para>Gets the fully qualified type name of the serializer.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>
        <para>Gets the fully qualified type name of the base type of the serializer.</para>
      </summary>
    </member>
    <member name="T:System.Collections.Specialized.BitVector32">
      <summary>
        <para>Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.BitVector32" /> structure containing the data represented in an integer.</para>
      </summary>
      <param name="data">An integer representing the data of the new <see cref="T:System.Collections.Specialized.BitVector32" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.BitVector32" /> structure 
 containing the data represented in an existing <see cref="T:System.Collections.Specialized.BitVector32" /> structure.</para>
      </summary>
      <param name="value">A <see cref="T:System.Collections.Specialized.BitVector32" /> structure that contains the data to copy.</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateMask">
      <summary>
        <para> Creates the first mask in a series of masks that can be used to retrieve individual bits in a <see cref="T:System.Collections.Specialized.BitVector32" /> that is set up as bit flags.</para>
      </summary>
      <returns>
        <para>A mask that isolates the first bit flag in the <see cref="T:System.Collections.Specialized.BitVector32" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
      <summary>
        <para>Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <see cref="T:System.Collections.Specialized.BitVector32" /> that is set up as bit flags.</para>
      </summary>
      <param name="previous">The mask that indicates the previous bit flag.</param>
      <returns>
        <para>A mask that isolates the bit flag following the one that <paramref name="previous" /> points to in <see cref="T:System.Collections.Specialized.BitVector32" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
      <summary>
        <para>Creates the first <see cref="T:System.Collections.Specialized.BitVector32.Section" /> in a series of sections that contain small integers.</para>
      </summary>
      <param name="maxValue">A 16-bit signed integer that specifies the maximum value for the new <see cref="T:System.Collections.Specialized.BitVector32.Section" />.</param>
      <returns>
        <para>A <see cref="T:System.Collections.Specialized.BitVector32.Section" /> that can hold a number from zero to <paramref name="maxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
      <summary>
        <para>Creates a new <see cref="T:System.Collections.Specialized.BitVector32.Section" /> following the specified <see cref="T:System.Collections.Specialized.BitVector32.Section" />
in a series of sections that contain small integers.</para>
      </summary>
      <param name="maxValue">A 16-bit signed integer that specifies the maximum value for the new <see cref="T:System.Collections.Specialized.BitVector32.Section" />.</param>
      <param name="previous">The previous <see cref="T:System.Collections.Specialized.BitVector32.Section" /> in the <see cref="T:System.Collections.Specialized.BitVector32" />.</param>
      <returns>
        <para>A <see cref="T:System.Collections.Specialized.BitVector32.Section" /> that can hold a number from zero to <paramref name="maxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified object is equal to the <see cref="T:System.Collections.Specialized.BitVector32" />.</para>
      </summary>
      <param name="o">The object to compare with the current <see cref="T:System.Collections.Specialized.BitVector32" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
   specified object is equal to the <see cref="T:System.Collections.Specialized.BitVector32" />;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.GetHashCode">
      <summary>
        <para>Serves as a hash function for the <see cref="T:System.Collections.Specialized.BitVector32" />.</para>
      </summary>
      <returns>
        <para>A hash code for the <see cref="T:System.Collections.Specialized.BitVector32" />.</para>
      </returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
      <summary>
        <para>Gets or sets the state of the bit flag indicated by the specified mask.</para>
      </summary>
      <param name="bit">A mask that indicates the bit to get or set.</param>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
      <summary>
        <para>Gets or sets the value stored in the specified <see cref="T:System.Collections.Specialized.BitVector32.Section" />.</para>
      </summary>
      <param name="section">A <see cref="T:System.Collections.Specialized.BitVector32.Section" /> that contains the value to get or set.</param>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Data">
      <summary>
        <para>Gets the value of the <see cref="T:System.Collections.Specialized.BitVector32" /> as an integer.</para>
      </summary>
    </member>
    <member name="T:System.Collections.Specialized.CollectionsUtil">
      <summary>
        <para>Creates collections that ignore the case in strings.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable">
      <summary>
        <para>Creates a new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class with the default initial capacity.</para>
      </summary>
      <returns>
        <para>A new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class with the default initial capacity.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)">
      <summary>
        <para>Creates a new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class with the specified initial capacity.</para>
      </summary>
      <param name="capacity">The approximate number of entries that the <see cref="T:System.Collections.Hashtable" /> can initially contain.</param>
      <returns>
        <para>A new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class with the specified initial capacity.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)">
      <summary>
        <para>Copies the entries from the specified dictionary to a new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class
   with the same initial capacity as the number of entries copied.</para>
      </summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary" /> to copy to a new case-insensitive <see cref="T:System.Collections.Hashtable" />.</param>
      <returns>
        <para>A new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class containing the entries from the specified <see cref="T:System.Collections.IDictionary" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Collections.SortedList" /> class that ignores the case of strings.</para>
      </summary>
      <returns>
        <para>A new instance of the <see cref="T:System.Collections.SortedList" /> class that ignores the case of strings.</para>
      </returns>
    </member>
    <member name="T:System.Collections.Specialized.HybridDictionary">
      <summary>
        <para>Implements <see langword="IDictionary" /> by using a <see cref="T:System.Collections.Specialized.ListDictionary" /> while the collection is small,
   and then switching to
   a <see cref="T:System.Collections.Hashtable" /> when the collection gets large.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor">
      <summary>
        <para>Creates an empty case-sensitive <see cref="T:System.Collections.Specialized.HybridDictionary" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)">
      <summary>
        <para> Creates a case-sensitive <see cref="T:System.Collections.Specialized.HybridDictionary" /> with the specified initial size.</para>
      </summary>
      <param name="initialSize">The approximate number of entries that the <see cref="T:System.Collections.Specialized.HybridDictionary" /> can initially contain.</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)">
      <summary>
        <para>Creates an empty <see cref="T:System.Collections.Specialized.HybridDictionary" /> with the specified case-sensitivity.</para>
      </summary>
      <param name="caseInsensitive">A Boolean that denotes whether the <see cref="T:System.Collections.Specialized.HybridDictionary" /> is case-insensitive.</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)">
      <summary>
        <para> Creates a <see cref="T:System.Collections.Specialized.HybridDictionary" /> with the specified initial size and case-sensitivity.</para>
      </summary>
      <param name="initialSize">The approximate number of entries that the <see cref="T:System.Collections.Specialized.HybridDictionary" /> can initially contain.</param>
      <param name=" caseInsensitive">A Boolean that denotes whether the <see cref="T:System.Collections.Specialized.HybridDictionary" /> is case-insensitive.</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)">
      <summary>
        <para>Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.HybridDictionary" />.</para>
      </summary>
      <param name="key">The key of the entry to add.</param>
      <param name=" value">The value of the entry to add.</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Clear">
      <summary>
        <para>Removes all entries from the <see cref="T:System.Collections.Specialized.HybridDictionary" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Contains(System.Object)">
      <summary>
        <para>Determines whether the <see cref="T:System.Collections.Specialized.HybridDictionary" /> contains a specific key.</para>
      </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Specialized.HybridDictionary" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.Specialized.HybridDictionary" /> contains an entry with the specified key; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Collections.Specialized.HybridDictionary" /> entries to a one-dimensional <see cref="T:System.Array" /> instance at the specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.Specialized.HybridDictionary" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name=" index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that can iterate through the <see cref="T:System.Collections.Specialized.HybridDictionary" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Specialized.HybridDictionary" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Remove(System.Object)">
      <summary>
        <para>Removes the entry with the specified key from the <see cref="T:System.Collections.Specialized.HybridDictionary" />.</para>
      </summary>
      <param name="key">The key of the entry to remove.</param>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Item(System.Object)">
      <summary>
        <para>Gets or sets the value associated with the specified key.</para>
      </summary>
      <param name="key">The key whose value to get or set.</param>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Count">
      <summary>
        <para>Gets the number of key-and-value pairs contained in the <see cref="T:System.Collections.Specialized.HybridDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Keys">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Specialized.HybridDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.HybridDictionary" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.HybridDictionary" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.HybridDictionary" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.HybridDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Values">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Specialized.HybridDictionary" />.</para>
      </summary>
    </member>
    <member name="T:System.Collections.Specialized.ListDictionary">
      <summary>
        <para>Implements <see langword="IDictionary" /> using a singly linked list. Recommended for collections that typically contain 10 items or less.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.#ctor">
      <summary>
        <para>Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary" /> using the default comparer.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)">
      <summary>
        <para>Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary" /> using the specified comparer.</para>
      </summary>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" qualify="true" />. </para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)">
      <summary>
        <para>Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.ListDictionary" />.</para>
      </summary>
      <param name="key">The key of the entry to add.</param>
      <param name=" value">The value of the entry to add.</param>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Clear">
      <summary>
        <para>Removes all entries from the <see cref="T:System.Collections.Specialized.ListDictionary" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Contains(System.Object)">
      <summary>
        <para>Determines whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> contains a specific key.</para>
      </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.Specialized.ListDictionary" /> contains an entry with the specified key; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Collections.Specialized.ListDictionary" /> entries to a one-dimensional <see cref="T:System.Array" /> instance at the specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.Specialized.ListDictionary" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name=" index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that can iterate through the <see cref="T:System.Collections.Specialized.ListDictionary" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Specialized.ListDictionary" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)">
      <summary>
        <para>Removes the entry with the specified key from the <see cref="T:System.Collections.Specialized.ListDictionary" />.</para>
      </summary>
      <param name="key">The key of the entry to remove.</param>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Item(System.Object)">
      <summary>
        <para>Gets or sets the value associated with the specified key.</para>
      </summary>
      <param name="key">The key whose value to get or set.</param>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Count">
      <summary>
        <para>Gets the number of key-and-value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Keys">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Values">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</para>
      </summary>
    </member>
    <member name="T:System.Collections.Specialized.NameObjectCollectionBase">
      <summary>
        <para>Provides the <see langword="abstract" /> base class for a sorted collection of associated <see cref="T:System.String" /> keys
   and <see cref="T:System.Object" /> values that can be accessed either with
   the key or with the index.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
class that is empty.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 
class that is empty and uses the specified hash code provider and the specified comparer.</para>
      </summary>
      <param name="hashProvider">
        <para> The <see cref="T:System.Collections.IHashCodeProvider" /> that will supply the hash codes for all keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </param>
      <param name="comparer">
        <para> The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
class that is empty, has the specified
initial capacity and uses the specified case-insensitive hash code provider
and the specified case-insensitive comparer.</para>
      </summary>
      <param name="capacity">The approximate number of entries that the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance can initially contain. </param>
      <param name="hashProvider">
        <para>The case-insensitive <see cref="T:System.Collections.IHashCodeProvider" /> that will supply the hash codes for all keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </param>
      <param name="comparer">
        <para>The case-insensitive <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />

class that is empty
and has the specified initial capacity.</para>
      </summary>
      <param name="capacity">The approximate number of entries that the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance can initially contain. </param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 
 class that is serializable and uses the
 specified <see cref="T:System.Runtime.Serialization.SerializationInfo" qualify="true" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" qualify="true" />.</para>
      </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" qualify="true" /> object that contains the information required to serialize the new <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" qualify="true" /> object that contains the source and destination of the serialized stream associated with the new <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data 
    needed to serialize the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
    instance.</para>
      </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)">
      <summary>
        <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the
    deserialization event when the deserialization is complete.</para>
      </summary>
      <param name="sender">The source of the deserialization event.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance contains entries whose 
    keys are not <see langword="null" />.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance contains entries whose 
    keys are not <see langword="null" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)">
      <summary>
        <para>Adds an entry with the specified key and value into the 
    <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> key of the entry to add. The key can be <see langword="null" />. </para>
      </param>
      <param name="value">
        <para>The <see cref="T:System.Object" /> value of the entry to add. The value can be <see langword="null" />. </para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)">
      <summary>
        <para>Removes the entries with the specified key from the 
    <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> key of the entries to remove. The key can be <see langword="null" />. </para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)">
      <summary>
        <para> Removes the entry at the specified index of the 
    <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index of the entry to remove.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseClear">
      <summary>
        <para>Removes all entries from the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)">
      <summary>
        <para>Gets the value of the first entry with the specified key from
      the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> key of the entry to get. The key can be <see langword="null" />. </para>
      </param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents the
   value of the first entry with the specified key, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)">
      <summary>
        <para>Sets the value of the first entry with the specified key in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 
 instance, if found; otherwise, adds an entry with the specified key and value
 into the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
 instance.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> key of the entry to set. The key can be <see langword="null" />. </para>
      </param>
      <param name="value">
        <para>The <see cref="T:System.Object" /> that represents the new value of the entry to set. The value can be <see langword="null" />. </para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)">
      <summary>
        <para> Gets the value of the entry at the specified index of
      the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index of the value to get.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents 
   the value of the entry at the specified index.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)">
      <summary>
        <para>Gets the key of the entry at the specified index of the 
    <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 
    instance.</para>
      </summary>
      <param name="index">The zero-based index of the key to get.</param>
      <returns>
        <para>A <see cref="T:System.String" /> that represents the key of the entry at the specified index.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)">
      <summary>
        <para>Sets the value of the entry at the specified index of 
       the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index of the entry to set.</param>
      <param name="value">
        <para>The <see cref="T:System.Object" /> that represents the new value of the entry to set. The value can be <see langword="null" />. </para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />.</para>
      </summary>
      <returns>
        <para> An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys">
      <summary>
        <para>Returns a <see cref="T:System.String" /> array that contains all the keys in the 
 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> array that contains all the keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance. </para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues">
      <summary>
        <para>Returns an <see cref="T:System.Object" /> array that contains all the values in the 
 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Object" /> array that contains all the values in the 
 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance. </para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)">
      <summary>
        <para>Returns an array of the specified type that contains 
       all the values in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type of array to return.</param>
      <returns>
        <para>An array of the specified type that contains all the values 
       in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.Count">
      <summary>
        <para>Gets the number of key-and-value pairs contained in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.Keys">
      <summary>
        <para>Gets a <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> instance that contains 
    all the keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get(System.Int32)">
      <summary>
        <para> Gets the key at the specified index of the collection.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the key to get from the collection.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.String" /> that contains the key at the specified index of the collection.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through the 
    <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</para>
      </returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item(System.Int32)">
      <summary>
        <para>Gets the entry at the specified index of the collection.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count">
      <summary>
        <para>Gets the number of keys in the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="T:System.Collections.Specialized.NameValueCollection">
      <summary>
        <para>Represents a sorted collection of associated <see cref="T:System.String" /> keys and <see cref="T:System.String" />
values that can be accessed either with the key or with the index.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection" /> class 
    that is empty, has the default initial capacity
    and uses the default case-insensitive hash code provider and the default
    case-insensitive comparer.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
        <para>Copies the entries from the specified <see cref="T:System.Collections.Specialized.NameValueCollection" /> to a new <see cref="T:System.Collections.Specialized.NameValueCollection" /> 
with the same initial capacity as the
number of entries copied and using the same hash code provider and the
same comparer as the source collection.</para>
      </summary>
      <param name="col">The <see cref="T:System.Collections.Specialized.NameValueCollection" /> to copy to the new <see cref="T:System.Collections.Specialized.NameValueCollection" /> instance.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection" /> class 
    that is empty, has the default
    initial capacity and uses the specified hash code provider and the
    specified comparer.</para>
      </summary>
      <param name="hashProvider">The <see cref="T:System.Collections.IHashCodeProvider" /> that will supply the hash codes for all keys in the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</param>
      <param name="comparer">
        <para> The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection" /> class 
    that is empty, has
    the specified initial capacity and uses the default case-insensitive hash code
    provider and the default case-insensitive comparer.</para>
      </summary>
      <param name="capacity">The initial number of entries that the <see cref="T:System.Collections.Specialized.NameValueCollection" /> can contain. </param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)">
      <summary>
        <para>Copies the entries from the specified <see cref="T:System.Collections.Specialized.NameValueCollection" /> to a new <see cref="T:System.Collections.Specialized.NameValueCollection" /> with the specified initial capacity or the 
    same initial capacity as the number of entries copied, whichever is greater, and
    using the default case-insensitive hash code provider and the default
    case-insensitive comparer.</para>
      </summary>
      <param name="capacity">The initial number of entries that the <see cref="T:System.Collections.Specialized.NameValueCollection" /> can contain. </param>
      <param name="col">The <see cref="T:System.Collections.Specialized.NameValueCollection" /> to copy to the new <see cref="T:System.Collections.Specialized.NameValueCollection" /> instance. </param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection" /> class 
    that is empty, has the specified initial
    capacity and uses the specified hash code provider and the
    specified comparer.</para>
      </summary>
      <param name="capacity">The initial number of entries that the <see cref="T:System.Collections.Specialized.NameValueCollection" /> can contain. </param>
      <param name="hashProvider">The <see cref="T:System.Collections.IHashCodeProvider" /> that will supply the hash codes for all keys in the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</param>
      <param name="comparer">
        <para> The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection" /> class 
    that is serializable and uses the
    specified <see cref="T:System.Runtime.Serialization.SerializationInfo" qualify="true" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" qualify="true" />.</para>
      </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" qualify="true" /> object that contains the information required to serialize the new <see cref="T:System.Collections.Specialized.NameValueCollection" /> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" qualify="true" /> object that contains the source and destination of the serialized stream associated with the new <see cref="T:System.Collections.Specialized.NameValueCollection" /> instance.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays">
      <summary>
        <para> Resets the cached arrays of the collection to <see langword="null" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)">
      <summary>
        <para>Copies the entries in the specified <see cref="T:System.Collections.Specialized.NameValueCollection" /> to the current <see cref="T:System.Collections.Specialized.NameValueCollection" />.</para>
      </summary>
      <param name="c">The <see cref="T:System.Collections.Specialized.NameValueCollection" /> to copy to the current <see cref="T:System.Collections.Specialized.NameValueCollection" />. </param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Clear">
      <summary>
        <para>Invalidates the cached arrays and removes all entries 
       from the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the entire <see cref="T:System.Collections.Specialized.NameValueCollection" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</para>
      </summary>
      <param name="dest">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Specialized.NameValueCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="dest" /> at which copying begins. </param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.HasKeys">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.NameValueCollection" /> contains keys that are not <see langword="null" />.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.Specialized.NameValueCollection" /> contains 
   keys that are not <see langword="null" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)">
      <summary>
        <para>Adds an entry with the specified name and value to the 
    <see cref="T:System.Collections.Specialized.NameValueCollection" />.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> key of the entry to add. The key can be <see langword="null" />. </para>
      </param>
      <param name="value">
        <para>The <see cref="T:System.String" /> value of the entry to add. The value can be <see langword="null" />. </para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Get(System.String)">
      <summary>
        <para> Gets the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection" /> combined into one comma-separated list.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> key of the entry that contains the values to get. The key can be <see langword="null" />. </para>
      </param>
      <returns>
        <para>A <see cref="T:System.String" /> 
 that contains a comma-separated list of the values associated with the specified
 key from the <see cref="T:System.Collections.Specialized.NameValueCollection" />, if found;
 otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)">
      <summary>
        <para>Gets the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> key of the entry that contains the values to get. The key can be <see langword="null" />. </para>
      </param>
      <returns>
        <para>A <see cref="T:System.String" /> array that contains the values associated with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection" />, if found; 
    otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)">
      <summary>
        <para>Sets the value of an entry in the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> key of the entry to add the new value to. The key can be <see langword="null" />. </para>
      </param>
      <param name="value">
        <para>The <see cref="T:System.Object" /> that represents the new value to add to the specified entry. The value can be <see langword="null" />. </para>
      </param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Remove(System.String)">
      <summary>
        <para>Removes the entries with the specified key from the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> key of the entry to remove. The key can be <see langword="null" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Get(System.Int32)">
      <summary>
        <para> 
       Gets the values at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" /> combined into one
       comma-separated list.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry that contains the values to get from the collection.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.String" /> that contains a comma-separated list of the values at the 
    specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" />, if found;
    otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)">
      <summary>
        <para> Gets the values at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry that contains the values to get from the collection.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.String" /> array that contains the values at the specified index 
    of the <see cref="T:System.Collections.Specialized.NameValueCollection" />, if found;
    otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)">
      <summary>
        <para>Gets the key at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the key to get from the collection.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.String" /> that contains the key at the 
    specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" />, if found;
    otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.Item(System.String)">
      <summary>
        <para> Gets or sets the entry with the specified key in the 
    <see cref="T:System.Collections.Specialized.NameValueCollection" />.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> key of the entry to locate. The key can be <see langword="null" />. </para>
      </param>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.Item(System.Int32)">
      <summary>
        <para>Gets the entry at the specified index of the <see cref="T:System.Collections.Specialized.NameValueCollection" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.AllKeys">
      <summary>
        <para>Gets all the keys in the <see cref="T:System.Collections.Specialized.NameValueCollection" />. </para>
      </summary>
    </member>
    <member name="T:System.Collections.Specialized.StringCollection">
      <summary>
        <para>Represents a collection of strings.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Add(System.String)">
      <summary>
        <para> Adds a string to the end of the 
    <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
      <param name="value">The string to add to the end of the <see cref="T:System.Collections.Specialized.StringCollection" /> .</param>
      <returns>
        <para>The zero-based index at which the new element is inserted.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.AddRange(System.String[])">
      <summary>
        <para>Copies the elements of a string array to the end of the <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
      <param name="value">An array of strings to add to the end of the <see cref="T:System.Collections.Specialized.StringCollection" /> .</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Clear">
      <summary>
        <para>Removes all the strings from the 
    <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Contains(System.String)">
      <summary>
        <para>Determines whether the specified string is in the 
    <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
      <param name="value">The string to locate in the <see cref="T:System.Collections.Specialized.StringCollection" /> .</param>
      <returns>
        <para>
          <see langword="true" /> if 
 <paramref name="value" /> is found in the <see cref="T:System.Collections.Specialized.StringCollection" /> ; 
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)">
      <summary>
        <para>Copies the entire <see cref="T:System.Collections.Specialized.StringCollection" /> values to a 
   one-dimensional array of strings, starting at the specified
   index of the
   target array.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional array of strings that is the destination of the elements copied from <see cref="T:System.Collections.Specialized.StringCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</para>
      </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Collections.Specialized.StringEnumerator" /> that can iterate through
   the <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Collections.Specialized.StringEnumerator" /> for the <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.IndexOf(System.String)">
      <summary>
        <para>Searches for the specified string and returns the zero-based index of the first occurrence within 
       the <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
      <param name="value">The string to locate.</param>
      <returns>
        <para>The zero-based index of the first occurrence of 
    <paramref name="value" /> in the 
    <see cref="T:System.Collections.Specialized.StringCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)">
      <summary>
        <para>Inserts a string into the <see cref="T:System.Collections.Specialized.StringCollection" /> at the specified 
    index.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> is inserted.</param>
      <param name="value">The string to insert.</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Remove(System.String)">
      <summary>
        <para> Removes the first occurrence of a specific string from the
 <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
      <param name="value">The string to remove from the <see cref="T:System.Collections.Specialized.StringCollection" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the string at the specified index of the <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
      <param name="index">The zero-based index of the string to remove.</param>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the element at the specified index.</para>
      </summary>
      <param name="index">
        <para> The zero-based index of the entry to get or set.</para>
      </param>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.Count">
      <summary>
        <para>Gets the number of strings contained in the
 <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly">
      <summary>
        <para>Gets a value indicating whether
      the <see cref="T:System.Collections.Specialized.StringCollection" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.StringCollection" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Specialized.StringCollection" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the
   <see cref="T:System.Collections.Specialized.StringCollection" />
   is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#$Item$(System.Int32)">
      <summary>
        <para>Gets or sets the element at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="T:System.Collections.Specialized.StringEnumerator">
      <summary>
        <para>Supports a simple iteration over a <see cref="T:System.Collections.Specialized.StringCollection" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.StringEnumerator.MoveNext">
      <summary>
        <para>Advances the enumerator to the next element of the collection.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the enumerator was successfully advanced to the next element;
<see langword="false" /> if the enumerator has passed the end of the collection.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.StringEnumerator.Reset">
      <summary>
        <para>Sets the enumerator to its initial position, which is before
       the first element in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringEnumerator.Current">
      <summary>
        <para>Gets the current element in the collection.</para>
      </summary>
    </member>
    <member name="T:System.Collections.Specialized.StringDictionary">
      <summary>
        <para>Implements a hashtable with the key strongly typed to be
      a string rather than an object. </para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Specialized.StringDictionary" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Add(System.String,System.String)">
      <summary>
        <para>Adds an entry with the specified key and value into the 
   <see cref="T:System.Collections.Specialized.StringDictionary" />.</para>
      </summary>
      <param name="key">The key of the entry to add.</param>
      <param name=" value">The value of the entry to add.</param>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Clear">
      <summary>
        <para>Removes all entries from the <see cref="T:System.Collections.Specialized.StringDictionary" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.ContainsKey(System.String)">
      <summary>
        <para>Determines if the <see cref="T:System.Collections.Specialized.StringDictionary" /> contains a specific key.</para>
      </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Specialized.StringDictionary" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
<see cref="T:System.Collections.Specialized.StringDictionary" /> contains an entry with the specified key;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.ContainsValue(System.String)">
      <summary>
        <para>Determines if the <see cref="T:System.Collections.Specialized.StringDictionary" /> contains a specific value.</para>
      </summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Specialized.StringDictionary" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
<see cref="T:System.Collections.Specialized.StringDictionary" /> contains an element with the specified value;
   otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the string dictionary values to a one-dimensional <see cref="T:System.Array" /> instance at the
   specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from the <see cref="T:System.Collections.Specialized.StringDictionary" />.</param>
      <param name=" index">The index in the array where copying begins.</param>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through the string dictionary.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> that can iterate through the string dictionary.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Remove(System.String)">
      <summary>
        <para>Removes the entry with the specified key from the string dictionary.</para>
      </summary>
      <param name="key">The key of the entry to remove.</param>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Count">
      <summary>
        <para>Gets the number of key-and-value pairs in the <see cref="T:System.Collections.Specialized.StringDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.IsSynchronized">
      <summary>
        <para>Gets a value that indicates whether access to the <see cref="T:System.Collections.Specialized.StringDictionary" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Item(System.String)">
      <summary>
        <para>Gets or sets the value associated with the specified key.</para>
      </summary>
      <param name="key">The key whose value to get or set.</param>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Keys">
      <summary>
        <para>Gets a collection of keys in the <see cref="T:System.Collections.Specialized.StringDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to
      the <see cref="T:System.Collections.Specialized.StringDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Values">
      <summary>
        <para>Gets a collection of values in the <see cref="T:System.Collections.Specialized.StringDictionary" />.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBase">
      <summary>
        <para>Allows control of code access security permissions.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBase" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBase" /> class 
 with the specified level of access to resources at creation.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>
        <para>Adds a permission entry to the permission.</para>
      </summary>
      <param name="entry">The <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> to add.</param>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Clear">
      <summary>
        <para>Clears the permission of the added permission entries.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Copy">
      <summary>
        <para>Creates and returns an identical copy of the current 
 permission object.</para>
      </summary>
      <returns>
        <para>A copy of the current permission object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries">
      <summary>
        <para>Returns an array of the <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> objects added to this permission.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> objects that were added to this permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.FromXml(System.Security.SecurityElement)">
      <summary>
        <para>Reconstructs a security object with a specified state 
 from an XML encoding.</para>
      </summary>
      <param name="securityElement">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Intersect(System.Security.IPermission)">
      <summary>
        <para>Creates and returns a permission object that is the 
 intersection of the current permission object and a target permission object.</para>
      </summary>
      <param name="target">A permission object of the same type as the current permission object.</param>
      <returns>
        <para>A new permission object that represents the intersection of the current 
 object and the specified target. This object is <see langword="null" /> if the
 intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para>Determines whether the current permission object is a
      subset of the specified permission.</para>
      </summary>
      <param name="target">A permission object that is to be tested for the subset relationship.</param>
      <returns>
        <para>
          <see langword="true" /> if the current permission object is a subset of the
   specified permission object; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsUnrestricted">
      <summary>
        <para> Gets a value
      indicating whether the permission is unrestricted.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if permission is unrestricted;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>
        <para>Removes a permission entry from the permission.</para>
      </summary>
      <param name="entry">The <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> to remove.</param>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.ToXml">
      <summary>
        <para>Creates and returns an XML encoding of the security 
 object and its current state.</para>
      </summary>
      <returns>
        <para>An XML encoding of the security object, including any state information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Union(System.Security.IPermission)">
      <summary>
        <para>Creates a permission object that combines the current
      permission object and the target permission object.</para>
      </summary>
      <param name="target">A permission object to combine with the current permission object. It must be of the same type as the current permission object.</param>
      <returns>
        <para>A new permission object that represents the union of the
      current permission object and the specified permission object.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.PermissionAccessType">
      <summary>
        <para>Gets or sets an enumeration value that describes the 
      types of access that you are giving the resource.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.TagNames">
      <summary>
        <para>Gets or sets an array of strings that identify the 
      resource you are protecting.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBaseEntry">
      <summary>
        <para>Defines the smallest unit of a code access security permission set.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor(System.Int32,System.String[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> class with the specified permission
   access and permission access path.</para>
      </summary>
      <param name="permissionAccess">The integer representation of the permission access level enumeration value. The <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess" /> property is set to this value.</param>
      <param name=" permissionAccessPath">The array of strings that identify the resource you are protecting. The <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" /> property is set to this value.</param>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess">
      <summary>
        <para>Gets an integer representation of the access level 
      enumeration value.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath">
      <summary>
        <para>Gets an array of strings that identify the
      resource you are protecting.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.NativeMethods.Util.GetPInvokeStringLength(System.String)">
    </member>
    <member name="T:Microsoft.Win32.PowerModeChangedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:Microsoft.Win32.SystemEvents.PowerModeChanged" /> event.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.PowerModeChangedEventArgs.#ctor(Microsoft.Win32.PowerModes)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Microsoft.Win32.PowerModeChangedEventArgs" /> class.</para>
      </summary>
      <param name="mode">
        <para>One of the <see cref="T:Microsoft.Win32.PowerModes" /> values that represents the new power mode.</para>
      </param>
    </member>
    <member name="P:Microsoft.Win32.PowerModeChangedEventArgs.Mode">
      <summary>
        <para>Gets the power mode.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.PowerModeChangedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:Microsoft.Win32.SystemEvents.PowerModeChanged" /> event 
    from the operating system.</para>
      </summary>
      <param name="sender">The source of the event. Because power mode notifications are global, this is always <see langword="null" />.</param>
      <param name="e">
        <para>A <see cref="T:Microsoft.Win32.PowerModeChangedEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:Microsoft.Win32.PowerModes">
      <summary>
        <para> Specifies how the operating system
       power mode changes.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.PowerModes.Resume">
      <summary>
        <para> The operating system is about to resume.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.PowerModes.StatusChange">
      <summary>
        <para> The power mode status of the operating system has changed. This might
 indicate a weak or charging battery, a transition
 from AC power from battery, or other change in the
 status of the system power supply.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.PowerModes.Suspend">
      <summary>
        <para>The operating system is about to be suspended.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.SessionEndedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:Microsoft.Win32.SystemEvents.SessionEnded" /> event.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.SessionEndedEventArgs.#ctor(Microsoft.Win32.SessionEndReasons)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Microsoft.Win32.SessionEndedEventArgs" /> class.</para>
      </summary>
      <param name="reason">One of the <see cref="T:Microsoft.Win32.SessionEndReasons" /> that specifies how the session ended.</param>
    </member>
    <member name="P:Microsoft.Win32.SessionEndedEventArgs.Reason">
      <summary>
        <para>Gets how the session ended.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.SessionEndedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:Microsoft.Win32.SystemEvents.SessionEnded" /> event 
    from the operating system.</para>
      </summary>
      <param name="sender">The source of the event. Because session end notifications are global, this object is always <see langword="null" />.</param>
      <param name="e">
        <para>A <see cref="T:Microsoft.Win32.SessionEndedEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:Microsoft.Win32.SessionEndingEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:Microsoft.Win32.SystemEvents.SessionEnding" /> event.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.SessionEndingEventArgs.#ctor(Microsoft.Win32.SessionEndReasons)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Microsoft.Win32.SessionEndingEventArgs" /> class.</para>
      </summary>
      <param name="reason">
        <para>One of the <see cref="T:Microsoft.Win32.SessionEndReasons" /> that specifies how the session ends. </para>
      </param>
    </member>
    <member name="P:Microsoft.Win32.SessionEndingEventArgs.Cancel">
      <summary>
        <para>Gets or sets a value indicating whether to cancel the user request to end the session.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Win32.SessionEndingEventArgs.Reason">
      <summary>
        <para>Gets the reason the session is ending.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.SessionEndingEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:Microsoft.Win32.SystemEvents.SessionEnding" /> event 
    from the operating system.</para>
      </summary>
      <param name="sender">The source of the event. Because session end notifications are global, this object is always <see langword="null" />.</param>
      <param name="e">
        <para>A <see cref="T:Microsoft.Win32.SessionEndingEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:Microsoft.Win32.SessionEndReasons">
      <summary>
        <para> Specifies how the current
       logon session is ending.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.SessionEndReasons.Logoff">
      <summary>
        <para> The user is logging off. The operating system continues to
 run, but the user who started this application
 is logging off.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.SessionEndReasons.SystemShutdown">
      <summary>
        <para>The operating system is shutting down.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.SystemEvents">
      <summary>
        <para> Provides a
 set of global system events to callers. This
 class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.SystemEvents.InvokeOnEventsThread(System.Delegate)">
      <summary>
        <para> Executes the given delegate on the thread that listens for system events.</para>
      </summary>
      <param name="method">An event handler that listens for system events.</param>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.DisplaySettingsChanged">
      <summary>
        <para>Occurs when the user changes the display settings.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.EventsThreadShutdown">
      <summary>
        <para>Occurs before the thread that listens for system events is terminated.
           Delegates will be invoked on the events thread.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.InstalledFontsChanged">
      <summary>
        <para>Occurs when the user adds fonts to or removes fonts from the system.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.LowMemory">
      <summary>
        <para>Occurs when the system is running out of available RAM.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.PaletteChanged">
      <summary>
        <para>Occurs when the user switches to an application that uses a different 
       palette.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.PowerModeChanged">
      <summary>
        <para>Occurs when the user suspends or resumes the system.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.SessionEnded">
      <summary>
        <para>Occurs when the user is logging off or shutting down the system.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.SessionEnding">
      <summary>
        <para>Occurs when the user is trying to log off or shutdown the system.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.TimeChanged">
      <summary>
        <para>Occurs when the user changes the time on the system clock.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.TimerElapsed">
      <summary>
        <para>Occurs when a windows timer interval has expired.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.UserPreferenceChanged">
      <summary>
        <para>Occurs when a user preference has changed.</para>
      </summary>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.UserPreferenceChanging">
      <summary>
        <para>Occurs when a user preference is changing.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.SystemEvents.SystemEvent.#ctor(System.Delegate,System.Object[])">
      <summary>
      Creates a new system event.  The arguments array
      is owned by SystemEvent after this call (no copy
      is made).
 </summary>
    </member>
    <member name="T:Microsoft.Win32.TimerElapsedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:Microsoft.Win32.SystemEvents.TimerElapsed" /> event.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.TimerElapsedEventArgs.#ctor(System.IntPtr)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Microsoft.Win32.TimerElapsedEventArgs" /> class.</para>
      </summary>
      <param name="timerId">The ID number for the timer.</param>
    </member>
    <member name="P:Microsoft.Win32.TimerElapsedEventArgs.TimerId">
      <summary>
        <para>Gets the ID number for the timer.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.TimerElapsedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:Microsoft.Win32.SystemEvents.TimerElapsed" /> event.</para>
      </summary>
      <param name="sender">
        <para>The source of the event. Because timer interval changes are global changes, this object is always <see langword="null" />.</para>
      </param>
      <param name="e">
        <para>A <see cref="T:Microsoft.Win32.TimerElapsedEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceCategory">
      <summary>
        <para> Identifies areas of user preferences that
       have changed.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Accessibility">
      <summary>
        <para> Specifies user
       preferences associated with accessibility
       of the system for users with disabilities.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Color">
      <summary>
        <para> Specifies user preferences
       associated with system colors, such as the
       default color of windows or menus.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Desktop">
      <summary>
        <para> Specifies
 user preferences associated with the system
 desktop. This might reflect a change in desktop background
 images, or desktop layout.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.General">
      <summary>
        <para> Specifies user preferences
       that are not associated with any other category.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Icon">
      <summary>
        <para> 
       Specifies user preferences for icon settings, including
       icon height and spacing.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Keyboard">
      <summary>
        <para> 
       Specifies user preferences for keyboard settings,
       such as the keyboard repeat rate.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Menu">
      <summary>
        <para> Specifies user preferences
       for menu settings, such as menu delays and
       text alignment.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Mouse">
      <summary>
        <para> Specifies user
       preferences for mouse settings, such as double-click
       time and mouse sensitivity.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Policy">
      <summary>
        <para> Specifies user preferences
       for policy settings, such as user rights and
       access levels.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Power">
      <summary>
        <para> Specifies the user preferences
       for system power settings. An example of a
       power setting is the time required for the
       system to automatically enter low power mode.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Screensaver">
      <summary>
        <para> Specifies user preferences
       associated with the screensaver.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Window">
      <summary>
        <para> Specifies user preferences
       associated with the dimensions and characteristics
       of windows on the system.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Locale">
      <summary>
        <para>Specifies changes in user preferences for regional settings,
 such as the character encoding and culture strings.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanged" /> event.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.UserPreferenceChangedEventArgs.#ctor(Microsoft.Win32.UserPreferenceCategory)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Microsoft.Win32.UserPreferenceChangedEventArgs" /> class.</para>
      </summary>
      <param name="category">One of the <see cref="T:Microsoft.Win32.UserPreferenceCategory" /> that specifies the user preference category of this event.</param>
    </member>
    <member name="P:Microsoft.Win32.UserPreferenceChangedEventArgs.Category">
      <summary>
        <para>Gets the category of user preferences that has changed.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanged" /> event.</para>
      </summary>
      <param name="sender">
        <para>The source of the event. Because user preference changes are global changes, this object is always <see langword="null" />.</para>
      </param>
      <param name="e">
        <para>A <see cref="T:Microsoft.Win32.UserPreferenceChangedEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangingEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanging" /> event.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.UserPreferenceChangingEventArgs.#ctor(Microsoft.Win32.UserPreferenceCategory)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Microsoft.Win32.UserPreferenceChangingEventArgs" /> class.</para>
      </summary>
      <param name="category">One of the <see cref="T:Microsoft.Win32.UserPreferenceCategory" /> values that specifies the user preference category of this event.</param>
    </member>
    <member name="P:Microsoft.Win32.UserPreferenceChangingEventArgs.Category">
      <summary>
        <para>Gets the category of user preferences that is changing.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangingEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanging" /> event.</para>
      </summary>
      <param name="sender">
        <para>The source of the event. Because user preference changes are global changes, this object is always <see langword="null" />.</para>
      </param>
      <param name="e">
        <para>A <see cref="T:Microsoft.Win32.UserPreferenceChangedEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>
        <para> Provides access to instances of the C# code generator and code compiler.</para>
      </summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>
        <para> Gets an instance of the C# code generator.</para>
      </summary>
      <returns>
        <para> An instance of the C# <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation.</para>
      </returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>
        <para> Gets an instance of the C# code compiler.</para>
      </summary>
      <returns>
        <para> An instance of the C# <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation.</para>
      </returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>
        <para>Gets a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type of object.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of object to retrieve a type converter for.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type.</para>
      </returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>
        <para> Gets the file
      name extension to use when creating source code files.</para>
      </summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.QuoteSnippetStringCStyle(System.String)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.QuoteSnippetString(System.String)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeGenerator.IsValidIdentifier(System.String)">
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeGenerator.FileExtension">
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeGenerator.CompilerName">
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeGenerator.NullToken">
    </member>
    <member name="M:Microsoft.CSharp.CSharpMemberAttributeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpMemberAttributeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpMemberAttributeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpMemberAttributeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpMemberAttributeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:Microsoft.CSharp.CSharpMemberAttributeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>
        <para> Provides access to instances of the Visual Basic code generator and code compiler.</para>
      </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>
        <para> Gets an instance of the Visual Basic code generator.</para>
      </summary>
      <returns>
        <para>An instance of the Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />
implementation.</para>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>
        <para> Gets an instance of the Visual Basic code compiler.</para>
      </summary>
      <returns>
        <para>An instance of the Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />
implementation.</para>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>
        <para>Gets a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type of object.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of object to retrieve a type converter for.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type.</para>
      </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>
        <para> Gets the file name extension to use when creating source code
      files.</para>
      </summary>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>
        <para> Gets the language options that this code
      provider should use.</para>
      </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.QuoteSnippetString(System.String)">
      <summary>
        <para>
       Provides conversion to formatting with escape codes.
    </para>
      </summary>
      <param name="value">
    The string to convert.
 </param>
      <returns>
        <para>
       The converted string.
    </para>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>
        <para>
       Generates code for the specified CodeDom based member
       access modifier representation.
    </para>
      </summary>
      <param name="attributes">
    A <see cref="T:System.CodeDom.MemberAttributes" /> that indicates the member access modifiers to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>
        <para>
       Generates code for the specified CodeDom based member scope modifier
       representation.
    </para>
      </summary>
      <param name="attributes">
    A <see cref="T:System.CodeDom.MemberAttributes" /> that indicates the member scope modifier to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>
        <para>
       Generates code for the specified CodeDom based operator
       representation.
    </para>
      </summary>
      <param name="op">
    A <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> that indicates the operator to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>
        <para>
       Generates code for the specified CodeDom based return type
       representation.
    </para>
      </summary>
      <param name="typeRef">
    The type to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>
        <para>
       Generates code for the specified CodeDom based type name pair
       representation.
    </para>
      </summary>
      <param name="typeRef">
    The type of the variable.
 </param>
      <param name=" name">
    The name of the variable.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>
        <para>
       Generates code for the specified CodeDom based for loop statement
       representation.
    </para>
      </summary>
      <param name="e">
    A CodeForLoopStatement that indicates the statement to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based primitive expression
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodePrimitiveExpression" /> indicating the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>
        <para>
       Generates code for the specified CodeDom based throw exception statement
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> that indicates the statement to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based array creation expression
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based base reference expression
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based cast expression representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeCastExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based delegate creation expression
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based field reference expression
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based indexer expression
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeIndexerExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based code snippet expression
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeSnippetExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based method invoke
       expression.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based delegate invoke
       expression.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based object creation
       expression.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom
       based parameter declaration expression representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> indicating the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based this reference expression
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeThisReferenceExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>
        <para>
       Generates code for the specified CodeDom based method invoke statement
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeExpressionStatement" /> that indicates the statement to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>
        <para>
       Generates code for the specified CodeDom based method return statement
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> that indicates the statement to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>
        <para>
       Generates code for the specified CodeDom based if statement representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeConditionStatement" /> that indicates the if statement to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>
        <para>
       Generates code for the specified CodeDom based try catch finally statement
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> that indicates the statement to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>
        <para>
       Generates code for the specified CodeDom based assignment statement
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeAssignStatement" /> that indicates the assignment statement to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>
        <para>
       Generates code for the specified CodeDom variable declaration statement
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> that indicates the variable declaration to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>
        <para>
       Generates code for the specified CodeDom based line pragma start
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeLinePragma" /> that indicates the line pragma start to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>
        <para>
       Generates code for the specified CodeDom based line pragma end
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeLinePragma" /> that indicates the line pragma end to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>
        <para>
       Generates code for the specified CodeDom based member
       field representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeMemberField" /> that indicates the field to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>
        <para>
       Generates code for
       the specified CodeDom based snippet member representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> that indicates the member to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para>
       Generates code for the specified CodeDom based member property
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeMemberProperty" /> that indicates the property to generate code for.
 </param>
      <param name="c">
      </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>
        <para>
       Generates code for the specified CodeDom based property reference
       expression representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> that indicates the expression to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para>
       Generates code for the specified CodeDom based constructor
       representation.
    </para>
      </summary>
      <param name="e">A <see cref="T:System.CodeDom.CodeConstructor" /> that indicates the constructor to generate code for.</param>
      <param name="c">
      </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>
        <para>
       Generates code for the specified CodeDom based class constructor
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeTypeConstructor" /> that indicates the class constructor to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para>
       Generates code for the CodeDom based class start representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the class start to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <para>
       Generates code for the specified CodeDom based class end
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the class end to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>
        <para>
       Generates code for the CodeDom based namespace representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeNamespace" /> that indicates the namespace to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>
        <para>
       Generates code for the specified CodeDom based namespace representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeNamespace" /> that indicates the namespace to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>
        <para>
       Generates code for the specified CodeDom based namespace representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeNamespace" /> that indicates the namespace to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>
        <para>
       Generates code for the specified CodeDom based namespace import
       representation.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.CodeDom.CodeNamespaceImport" /> that indicates the namespace import to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>
        <para>
       Generates code for the specified CodeDom based attribute block start
       representation.
    </para>
      </summary>
      <param name="attributes">
    A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the attribute block to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>
        <para>
       Generates code for the specified CodeDom based attribute block end
       representation.
    </para>
      </summary>
      <param name="attributes">
    A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the attributes to generate code for.
 </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeGenerator.IsValidIdentifier(System.String)">
      <summary>
        <para>
       Gets whether the specified identifier is valid.
    </para>
      </summary>
      <param name="value">
    The value to test for validity.
 </param>
      <returns>
        <para>
          <see langword="true" /> if the identifier is valid; otherwise, 
    <see langword="false" />.
    </para>
      </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeGenerator.FileExtension">
      <summary>
        <para>
       Gets or the file extension to use for source files.
    </para>
      </summary>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeGenerator.CompilerName">
      <summary>
        <para>
       Gets the name of the compiler exe
    </para>
      </summary>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeGenerator.NullToken">
      <summary>
        <para>
       Gets the token that is used to represent <see langword="null" />.
    </para>
      </summary>
      <returns>
        <para>
       The token that is used to represent <see langword="null" />.
    </para>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMemberAttributeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
    </member>
    <member name="M:Microsoft.VisualBasic.VBMemberAttributeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
    </member>
    <member name="M:Microsoft.VisualBasic.VBMemberAttributeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
    </member>
    <member name="M:Microsoft.VisualBasic.VBMemberAttributeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:Microsoft.VisualBasic.VBMemberAttributeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:Microsoft.VisualBasic.VBMemberAttributeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="T:System.Uri">
      <summary>
        <para>Provides
      an object representation of a uniform resource identifier (URI) and easy
      access to the parts of the URI.</para>
      </summary>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>
        <para>Specifies that the URI is a pointer to a file. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>
        <para>Specifies that the URI is accessed through the File Transfer Protocol (FTP). This field is
      read-only.</para>
      </summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>
        <para>Specifies that the URI is accessed through the Gopher protocol. This
      field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>
        <para>Specifies that the URI is accessed through the Hypertext Transfer Protocol
      (HTTP). This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>
        <para>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS). This field
      is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>
        <para>Specifies that the URI is an email address and is accessed through the Simple Network Mail Protocol
      (SNMP). This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>
        <para>Specifes that the URI is an Internet news group and is accessed through the Network News Transport
      Protocol (NNTP). This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>
        <para>Specifes that the URI is an Internet news group and is accessed through the
      Network News Transport Protocol (NNTP). This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>
        <para>Specifies the characters that separate the communication protocol scheme from the address portion
      of the URI. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Uri" />
class with the specified
URI.</para>
      </summary>
      <param name="uriString">A URI.</param>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Uri" /> class with the specified URI, with control of character
   escaping.</para>
      </summary>
      <param name="uriString">The URI.</param>
      <param name=" dontEscape">
        <see langword="true" /> if the URI contains escape characters; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Uri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Uri" /> class from the
   specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> classes.</para>
      </summary>
      <param name="serializationInfo">An instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class containing the information required to serialize the new <see cref="T:System.Uri" /> instance.</param>
      <param name=" streamingContext">An instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class containing the source of the serialized stream associated with the new <see cref="T:System.Uri" /> instance.</param>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Uri" /> class based
   on the specified
   base and relative URIs.</para>
      </summary>
      <param name="baseUri">The base URI.</param>
      <param name=" relativeUri">The relative URI to add to the base URI.</param>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Uri" /> class based on the specified base and releative URIs, with
   control of character escaping.</para>
      </summary>
      <param name="baseUri">The base URI.</param>
      <param name="relativeUri">The relative URI to add to the base URI.</param>
      <param name=" dontEscape">
        <see langword="true" /> if the URI contains escape characters; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>
        <para> Determines whether the specified host name is valid.
      </para>
      </summary>
      <param name="name">The host name to validate. </param>
      <returns>
        <para>
          <see langword="true " />if the host name is valid; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>
        <para> Determines whether the specified scheme name is valid.
      </para>
      </summary>
      <param name="schemeName">The scheme name to validate. </param>
      <returns>
        <para>
          <see langword="true " />if the scheme name is valid; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>
        <para>Compares two <see cref="T:System.Uri" /> instances for equality.</para>
      </summary>
      <param name="comparand">The <see cref="T:System.Uri" /> instance to compare with the current instance.</param>
      <returns>
        <para>
          <see langword="true " />if the two <see cref="T:System.Uri" /> instances contain
   the same URI; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Uri.EscapeString(System.String)">
      <summary>
        <para>Converts a string to its escaped representation.</para>
      </summary>
      <param name="str">The string to transform to its escaped representation.</param>
      <returns>
        <para>The escaped representation of the string.</para>
      </returns>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>
        <para> Returns the decimal value of a hexadecimal digit.
      </para>
      </summary>
      <param name="digit">The hexadecimal digit (0-9, a-f, A-F) to convert. </param>
      <returns>
        <para> A number from 1 - 15 that corresponds to the specified hexadecimal
      digit.
      </para>
      </returns>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>
        <para>Returns the hash code for the specified URI.</para>
      </summary>
      <returns>
        <para>The hash value generated for the URI.</para>
      </returns>
    </member>
    <member name="M:System.Uri.GetLeftPart(System.UriPartial)">
      <summary>
        <para>Returns the specified portion of a URI.</para>
      </summary>
      <param name="part">One of the <see cref="T:System.UriPartial" /> values that specifies the the end of the portion of the URI to return.</param>
      <returns>
        <para>A string containing the specified portion of the URI.</para>
      </returns>
    </member>
    <member name="M:System.Uri.HexEscape(System.Char)">
      <summary>
        <para> Converts a specified character into its hexadecimal equivalent.
      </para>
      </summary>
      <param name="character">The character to convert to hexadecimal representation. </param>
      <returns>
        <para> The hexadecimal representation of the specified character.
      </para>
      </returns>
    </member>
    <member name="M:System.Uri.HexUnescape(System.String,System.Int32@)">
      <summary>
        <para> Converts a specified hexadecimal representation of a character to the character.
      </para>
      </summary>
      <param name="pattern">The hexadecimal representation of a character. </param>
      <param name=" index">The location in <paramref name="pattern" /> where the hexadecimal representation of a character begins. </param>
      <returns>
        <para> The character represented by the hexadecimal encoding at position
   <paramref name="index" />. If the character at <paramref name="index " />is not hexadecimal encoded,
      the character at <paramref name="index " />is returned. The value of <paramref name="index " />
      is incremented to point to the character following the one returned.
      </para>
      </returns>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>
        <para> Determines whether a specified character is a valid hexadecimal digit.
      </para>
      </summary>
      <param name="character">The character to validate. </param>
      <returns>
        <para>
          <see langword="true " />if the character is a valid hexadecimal digit;
   otherwise <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Uri.IsHexEncoding(System.String,System.Int32)">
      <summary>
        <para> Determines whether a string is hexadecimal
      encoded.
      </para>
      </summary>
      <param name="pattern">The string to check. </param>
      <param name=" index">The location in <paramref name="pattern " />to check for hexadecimal encoding. </param>
      <returns>
        <para>
          <see langword="true " />if <paramref name="pattern " />is hexadecimal encoded at the specified
   location; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Uri.MakeRelative(System.Uri)">
      <summary>
        <para>Determines the difference between two <see cref="T:System.Uri" /> instances.</para>
      </summary>
      <param name="toUri">The URI to compare to the current URI.</param>
      <returns>
        <para>If the two URIs are the same except for the path information, then that difference; if the two have
      additional differences, the absolute URI of <paramref name="toUri" />.</para>
      </returns>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>
        <para> Returns the display string for the specified <see cref="T:System.Uri" /> instance.
   </para>
      </summary>
      <returns>
        <para> The string containing the unescaped display name of the <see cref="T:System.Uri" /> .
   </para>
      </returns>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>
        <para>Gets the absolute path of the URI.</para>
      </summary>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>
        <para> 
      Gets the absolute URI.</para>
      </summary>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>
        <para>Gets the Domain Name System (DNS) host name or IP address and the port number for a server.</para>
      </summary>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>
        <para> Gets the escaped fragment.
      </para>
      </summary>
    </member>
    <member name="P:System.Uri.Host">
      <summary>
        <para>Gets the Domain Name System (DNS) host name, or IP address of the server specified in the URI.</para>
      </summary>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>
        <para> Returns the type of the host name specified in the URI. 
   </para>
      </summary>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>
        <para>Gets a value indicating whether the port value of the URI is the default for this scheme.</para>
      </summary>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>
        <para>Gets a value indicating whether the specified <see cref="T:System.Uri" /> is a file URI.</para>
      </summary>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>
        <para>Gets a value indicating whether the specified <see cref="T:System.Uri" /> references the local host.</para>
      </summary>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>
        <para>Gets a value indicating whether the specified <see cref="T:System.Uri" /> is a universal naming convention (UNC) path.</para>
      </summary>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>
        <para> Gets a local operating-system representation of a
      file name.</para>
      </summary>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>
        <para> Gets the <see cref="P:System.Uri.AbsolutePath" /> and <see cref="P:System.Uri.Query" /> properties 
   separated by a question mark (?).</para>
      </summary>
    </member>
    <member name="P:System.Uri.Port">
      <summary>
        <para>Gets the port number of the specified URI.</para>
      </summary>
    </member>
    <member name="P:System.Uri.Query">
      <summary>
        <para>Gets any query information included in the specified URI.</para>
      </summary>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>
        <para>Gets the scheme name of the specified URI.</para>
      </summary>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>
        <para> Gets an array of the segments that make up the specified URI.</para>
      </summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>
        <para> Indicates that the URI string was escaped before the
   <see cref="T:System.Uri" />
   instance was created.
   </para>
      </summary>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>
        <para> Gets the user name, password, and other user-specific
      information associated with the specified URI.</para>
      </summary>
    </member>
    <member name="T:System.UriBuilder">
      <summary>
        <para>Provides a custom constructor for uniform resource
      indentifiers (URIs) and modifies URIs for the <see cref="T:System.Uri" /> class.</para>
      </summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UriBuilder" /> class.</para>
      </summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with 
   the specified URI.</para>
      </summary>
      <param name="uri">A URI string.</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with the specified <see cref="T:System.Uri" /> instance.</para>
      </summary>
      <param name="uri">An instance of the <see cref="T:System.Uri" /> class.</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with 
   the specified scheme and host.</para>
      </summary>
      <param name="schemeName">An Internet access protocol.</param>
      <param name=" hostName">A DNS-style domain name or IP address.</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with the
   specified scheme, host, and port.</para>
      </summary>
      <param name="scheme">An Internet access protocol.</param>
      <param name="host">A DNS-style domain name or IP address.</param>
      <param name="portNumber">An IP port number for the service.</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with the specified scheme,
   host, port number, and path.</para>
      </summary>
      <param name="scheme">An Internet access protocol.</param>
      <param name="host">A DNS-style domain name or IP address.</param>
      <param name="port">An IP port number for the service.</param>
      <param name="pathValue">The path to the Internet resource.</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with the specified scheme, host, port number, path and
   query string or fragment identifier.</para>
      </summary>
      <param name="scheme">An Internet access protocol.</param>
      <param name="host">A DNS-style domain name or IP address.</param>
      <param name="port">An IP port number for the service.</param>
      <param name="path">The path to the Internet resource.</param>
      <param name="extraValue">A query string or fragment identifier.</param>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>
        <para>Compares an existing <see cref="T:System.Uri" /> instance with the contents of the
<see cref="T:System.UriBuilder" /> for equality.</para>
      </summary>
      <param name="rparam">The <see cref="T:System.Uri" /> instance to compare with the current instance.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified <see cref="T:System.Uri" /> is equal to the
<see cref="T:System.Uri" /> constructed 
   by this <see cref="T:System.UriBuilder" /> instance; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>
        <para>Returns the hash code for the URI.</para>
      </summary>
      <returns>
        <para>The hash code generated for the URI.</para>
      </returns>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>
        <para> Returns the display string for the specified <see cref="T:System.UriBuilder" /> instance.
   </para>
      </summary>
      <returns>
        <para> The string containing the unescaped display name of the <see cref="T:System.UriBuilder" /> .
   </para>
      </returns>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>
        <para>Gets or sets the fragment portion of the URI.</para>
      </summary>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>
        <para>Gets or sets the Domain Name System (DNS) host name or
      IP address of a server.</para>
      </summary>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>
        <para>Gets or sets the password associated with the user accessing the URI.</para>
      </summary>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>
        <para>Gets or sets the path to the resource referenced by the URI.</para>
      </summary>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>
        <para> Gets or sets the port number of the URI.</para>
      </summary>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>
        <para> Gets or sets any query information included in the URI.</para>
      </summary>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>
        <para> Gets or sets the scheme name of the URI.</para>
      </summary>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>
        <para>Gets the <see cref="T:System.Uri" /> instance constructed by the specified <see cref="T:System.UriBuilder" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>
        <para>The user name associated with the user accessing the URI.</para>
      </summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>
        <para> The exception that is thrown when an invalid Uniform Resource Identifier (URI) is detected.</para>
      </summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UriFormatException" />class.</para>
      </summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UriFormatException" /> class with the specified 
    message.</para>
      </summary>
      <param name="textString">The error message string.</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UriFormatException" />
class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</para>
      </summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> containing the information required to serialize the new <see cref="T:System.UriFormatException" /> .</param>
      <param name=" streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> containing the source of the serialized stream associated with the new <see cref="T:System.UriFormatException" /> .</param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>
        <para>Defines host name types for the <see cref="M:System.Uri.CheckHostName(System.String)" qualify="true" /> method.</para>
      </summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>
        <para> The type of the host name is not supplied.</para>
      </summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>
        <para>The host is set, but the type cannot be determined.</para>
      </summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>
        <para>The host name is a domain name system (DNS) style host name.</para>
      </summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>
        <para>The host name is an Internet Protocol (IP) version 4 host address.</para>
      </summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>
        <para>The host name is an Internet Protocol (IP) 
      version 6 host address.</para>
      </summary>
    </member>
    <member name="T:System.UriPartial">
      <summary>
        <para>Defines the parts of a URI for the <see cref="M:System.Uri.GetLeftPart(System.UriPartial)" qualify="true" /> method.</para>
      </summary>
    </member>
    <member name="F:System.UriPartial.Scheme">
      <summary>
        <para> The scheme segment of the URI.</para>
      </summary>
    </member>
    <member name="F:System.UriPartial.Authority">
      <summary>
        <para> The scheme and authority segment of the URI.</para>
      </summary>
    </member>
    <member name="F:System.UriPartial.Path">
      <summary>
        <para> The scheme, authority, and path segment of the URI.</para>
      </summary>
    </member>
    <member name="T:System.Net.AuthenticationManager">
      <summary>
        <para>Manages the authentication modules called during the client authentication
      process.</para>
      </summary>
    </member>
    <member name="M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)">
      <summary>
        <para>Calls each registered authentication module to find the first module that
      can respond to the authentication request.</para>
      </summary>
      <param name="challenge">The challenge returned by the Internet resource.</param>
      <param name="request">The <see cref="T:System.Net.WebRequest" /> that initiated the authentication challenge.</param>
      <param name="credentials">The <see cref="T:System.Net.ICredentials" /> associated with this request.</param>
      <returns>
        <para>An instance of the <see cref="T:System.Net.Authorization" /> class containing the result of the authorization attempt. If
   there is no authentication module to respond to the challenge, this method returns
<see langword="null" />
.</para>
      </returns>
    </member>
    <member name="M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)">
      <summary>
        <para>Preauthenticates a request.</para>
      </summary>
      <param name="request">A <see cref="T:System.Net.WebRequest" /> to an Internet resource.</param>
      <param name="credentials">The <see cref="T:System.Net.ICredentials" /> associated with the request.</param>
      <returns>
        <para>An instance of the <see cref="T:System.Net.Authorization" /> class if the request can be preauthenticated;
   otherwise, <see langword="null" />. If <paramref name="credentials" />
   is <see langword="null" />, this method returns <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)">
      <summary>
        <para>Registers an authentication module with the authentication manager.</para>
      </summary>
      <param name="authenticationModule">The <see cref="T:System.Net.IAuthenticationModule" /> to register with the authentication manager.</param>
    </member>
    <member name="M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)">
      <summary>
        <para> Removes the specified authentication module from the list of registered modules.</para>
      </summary>
      <param name="authenticationModule">The IAuthentication module to remove.</param>
    </member>
    <member name="M:System.Net.AuthenticationManager.Unregister(System.String)">
      <summary>
        <para>Removes authentication modules with the specified
      authentication scheme from the list of registered modules.</para>
      </summary>
      <param name="authenticationScheme">The authentication scheme of the module to remove.</param>
    </member>
    <member name="P:System.Net.AuthenticationManager.RegisteredModules">
      <summary>
        <para> Gets a list of authentication modules that are registered with the authentication manager.
      </para>
      </summary>
    </member>
    <member name="T:System.Net.Authorization">
      <summary>
        <para>Contains an authentication message for an Internet server.</para>
      </summary>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Net.Authorization" /> class with the specified
   authorization message.</para>
      </summary>
      <param name="token">The encrypted authorization message expected by the server.</param>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Net.Authorization" /> class with the specified
   authorization message and completion status.</para>
      </summary>
      <param name="token">The encrypted authorization message expected by the server .</param>
      <param name="finished">The completion status of the authorization attempt. <see langword="true" /> if the authorization attempt is complete; otherwise, <see langword="false" />. </param>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String,System.Boolean,System.String)">
      <summary>
        <para> Creates a new instance of the <see cref="T:System.Net.Authorization" /> class with the specified
   authorization message, completion status, and connection group identifier.
   </para>
      </summary>
      <param name="token">The encrypted authorization message expected by the server . </param>
      <param name="finished">The completion status of the authorization attempt. <see langword="true" /> if the authorization attempt is complete; otherwise, <see langword="false" />. </param>
      <param name="connectionGroupId">A unique identifier that can be used to create private Client-Server connections, that would only be bound to this authentication scheme. </param>
    </member>
    <member name="P:System.Net.Authorization.Message">
      <summary>
        <para>Gets
      the message returned to the server in response to an authentication
      challenge.</para>
      </summary>
    </member>
    <member name="P:System.Net.Authorization.ConnectionGroupId">
      <summary>
        <para>Gets a unique identifier for user-specific connections.</para>
      </summary>
    </member>
    <member name="P:System.Net.Authorization.Complete">
      <summary>
        <para>Gets the completion status of the authorization.</para>
      </summary>
    </member>
    <member name="P:System.Net.Authorization.ProtectionRealm">
      <summary>
        <para>Gets or sets the prefix for uniform resource identifiers (URIs) that can be authenticated with the <see cref="P:System.Net.Authorization.Message" /> property.</para>
      </summary>
    </member>
    <member name="F:System.Net.ConnectionModes.Single">
      <summary>
        <para>
       Non-persistent, one request per connection.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.ConnectionModes.Persistent">
      <summary>
        <para>
       Persistent connection, one request/response at a time.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.ConnectionModes.Pipeline">
      <summary>
        <para>
       Persistent connection, many requests/responses in order.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.ConnectionModes.Mux">
      <summary>
        <para>
       Persistent connection, many requests/responses out of order.
    </para>
      </summary>
    </member>
    <member name="T:System.Net.Cookie">
      <summary>
        <para>Provides a set of properties and methods used to manage cookies. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Cookie" /> class. </para>
      </summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Cookie" /> class with a specified <see cref="P:System.Net.Cookie.Name" /> and <see cref="P:System.Net.Cookie.Value" />.</para>
      </summary>
      <param name="name">
        <para>The name of a <see cref="T:System.Net.Cookie" /> . The following characters must not be used inside <paramref name="name" />: equal sign, semicolon, comma, newline (\n), return (\r), tab (\t). The dollarsign character cannot be the first character.</para>
      </param>
      <param name="value">The value of a <see cref="T:System.Net.Cookie" /> . The following characters must not be used inside <paramref name="value" />: semicolon, comma. </param>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Cookie" /> class with a specified <see cref="P:System.Net.Cookie.Name" />, <see cref="P:System.Net.Cookie.Value" />, and
<see cref="P:System.Net.Cookie.Path" />.</para>
      </summary>
      <param name="name">The name of a <see cref="T:System.Net.Cookie" /> . The following characters must not be used inside <paramref name="name" />: equal sign, semicolon, comma, newline (\n), return (\r), tab (\t). The dollarsign character cannot be the first character.</param>
      <param name="value">The value of a <see cref="T:System.Net.Cookie" /> . The following characters must not be used inside <paramref name="value" />: semicolon, comma. </param>
      <param name="path">The subset of URIs on the origin server to which this <see cref="T:System.Net.Cookie" /> applies. The default value is "/".</param>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Cookie" /> class with a specified <see cref="P:System.Net.Cookie.Name" />, <see cref="P:System.Net.Cookie.Value" />,
<see cref="P:System.Net.Cookie.Path" />, 
   and <see cref="P:System.Net.Cookie.Domain" />
   .</para>
      </summary>
      <param name="name">The name of a <see cref="T:System.Net.Cookie" /> . The following characters must not be used inside <paramref name="name" />: equal sign, semicolon, comma, newline (\n), return (\r), tab (\t). The dollarsign character cannot be the first character.</param>
      <param name="value">The value of a <see cref="T:System.Net.Cookie" /> object. The following characters must not be used inside <paramref name="value" />: semicolon, comma. </param>
      <param name="path">The subset of URIs on the origin server to which this <see cref="T:System.Net.Cookie" /> applies. The default value is "/".</param>
      <param name="domain">The optional internet domain for which this <see cref="T:System.Net.Cookie" /> is valid. The default value is the host this <see cref="T:System.Net.Cookie" /> has been received from.</param>
    </member>
    <member name="M:System.Net.Cookie.Equals(System.Object)">
      <summary>
        <para> Overrides the <see cref="M:System.Object.Equals(System.Object)" /> method.</para>
      </summary>
      <param name="comparand">A reference to a <see cref="T:System.Net.Cookie" /> .</param>
      <returns>
        <para>Returns <see langword="true" /> if the <see cref="T:System.Net.Cookie" /> is equal to
<paramref name="comparand" />. Two <see cref="T:System.Net.Cookie" /> instances are equal if their <see cref="P:System.Net.Cookie.Name" />, <see cref="P:System.Net.Cookie.Value" />, 
<see cref="P:System.Net.Cookie.Path" />, 
<see cref="P:System.Net.Cookie.Domain" /> and <see cref="P:System.Net.Cookie.Version" />properties are equal. <see cref="P:System.Net.Cookie.Name" /> and 
<see cref="P:System.Net.Cookie.Domain" /> 
string comparisons are
case-insensitive.</para>
      </returns>
    </member>
    <member name="M:System.Net.Cookie.GetHashCode">
      <summary>
        <para> Overrides the <see cref="M:System.Object.GetHashCode" /> method.</para>
      </summary>
      <returns>
        <para>The 32-bit signed integer hash code for this instance.</para>
      </returns>
    </member>
    <member name="M:System.Net.Cookie.ToString">
      <summary>
        <para> Overrides the <see cref="M:System.Object.ToString" /> method.</para>
      </summary>
      <returns>
        <para>Returns a string representation of this <see cref="T:System.Net.Cookie" /> 
object suitable for including in a HTTP Cookie: request header. </para>
      </returns>
    </member>
    <member name="P:System.Net.Cookie.Comment">
      <summary>
        <para>Gets or sets a comment that the server can add to a <see cref="T:System.Net.Cookie" />.</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.CommentUri">
      <summary>
        <para>Gets or sets a URI comment that the server can provide with a <see cref="T:System.Net.Cookie" />.</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.Discard">
      <summary>
        <para> Gets or sets the discard flag set by
      the server.</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.Domain">
      <summary>
        <para>Gets or sets the URI for which the <see cref="T:System.Net.Cookie" /> is valid.</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.Expired">
      <summary>
        <para>Gets or sets the current state of the <see cref="T:System.Net.Cookie" />.</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.Expires">
      <summary>
        <para>Gets or sets the expiration date and time for the <see cref="T:System.Net.Cookie" />
      as a <see cref="T:System.DateTime" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.Name">
      <summary>
        <para> Gets or sets the name for the <see cref="T:System.Net.Cookie" />.</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.Path">
      <summary>
        <para> Gets or sets the URIs to which the <see cref="T:System.Net.Cookie" /> applies .</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.Port">
      <summary>
        <para>Gets or sets a list of TCP ports that the <see cref="T:System.Net.Cookie" /> applies to.</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.Secure">
      <summary>
        <para>Gets or sets the security level of a <see cref="T:System.Net.Cookie" /> . </para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.TimeStamp">
      <summary>
        <para>Gets the time when the cookie was issued as a
   <see cref="T:System.DateTime" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.Value">
      <summary>
        <para> Gets or sets the <see cref="P:System.Net.Cookie.Value" /> for the <see cref="T:System.Net.Cookie" />.</para>
      </summary>
    </member>
    <member name="P:System.Net.Cookie.Version">
      <summary>
        <para>Gets or sets the version of HTTP state maintenance to which the cookie conforms.</para>
      </summary>
    </member>
    <member name="T:System.Net.CookieCollection">
      <summary>
        <para>Provides a collection container for instances of the <see cref="T:System.Net.Cookie" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Net.CookieCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.CookieCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.Cookie)">
      <summary>
        <para>Adds a <see cref="T:System.Net.Cookie" /> to a
<see cref="T:System.Net.CookieCollection" /> .</para>
      </summary>
      <param name="cookie">The <see cref="T:System.Net.Cookie" /> to be added to a <see cref="T:System.Net.CookieCollection" /></param>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.CookieCollection)">
      <summary>
        <para>Adds the contents of a <see cref="T:System.Net.CookieCollection" /> to the current instance.</para>
      </summary>
      <param name="cookies">The <see cref="T:System.Net.CookieCollection" /> to be added .</param>
    </member>
    <member name="M:System.Net.CookieCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the elements of a <see cref="T:System.Net.CookieCollection" /> to an instance of the
<see cref="T:System.Array" /> class, starting at a particular index.</para>
      </summary>
      <param name="array">The target <see cref="T:System.Array" /> to which the <see cref="T:System.Net.CookieCollection" /> will be copied.</param>
      <param name="index">The zero-based index in the target <see cref="T:System.Array" /> where copying begins.</param>
    </member>
    <member name="M:System.Net.CookieCollection.GetEnumerator">
      <summary>
        <para>Gets an enumerator that can iterate through a <see cref="T:System.Net.CookieCollection" />
.</para>
      </summary>
      <returns>
        <para>An instance of an implemention of an <see cref="T:System.Collections.IEnumerator" />
interface that can iterate through a <see cref="T:System.Net.CookieCollection" /> .</para>
      </returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsReadOnly">
      <summary>
        <para> Gets a value indicating whether a
   <see cref="T:System.Net.CookieCollection" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.Int32)">
      <summary>
        <para> Gets the <see cref="T:System.Net.Cookie" /> with a specific index from a <see cref="T:System.Net.CookieCollection" />
.</para>
      </summary>
      <param name="index">The zero-based index of the <see cref="T:System.Net.Cookie" /> to be found.</param>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Net.Cookie" /> with a specific name from a <see cref="T:System.Net.CookieCollection" />
.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.Net.Cookie" /> to be found.</param>
    </member>
    <member name="P:System.Net.CookieCollection.Count">
      <summary>
        <para>Gets the number of cookies contained in a
   <see cref="T:System.Net.CookieCollection" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.CookieCollection.IsSynchronized">
      <summary>
        <para> Gets a value indicating whether access to
      a <see cref="T:System.Net.CookieCollection" /> is thread safe.</para>
      </summary>
    </member>
    <member name="P:System.Net.CookieCollection.SyncRoot">
      <summary>
        <para>Gets an object that you can use to synchronize access to the
   <see cref="T:System.Net.CookieCollection" />.</para>
      </summary>
    </member>
    <member name="T:System.Net.CookieContainer">
      <summary>
        <para>Provides a container for a collection of <see cref="T:System.Net.CookieCollection" /> objects.</para>
      </summary>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLimit">
      <summary>
        <para>Represents the default maximum number of <see cref="T:System.Net.Cookie" /> instances the
<see cref="T:System.Net.CookieContainer" /> can hold. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultPerDomainCookieLimit">
      <summary>
        <para>Represents the default maximum number of <see cref="T:System.Net.Cookie" /> instances the <see cref="T:System.Net.CookieContainer" /> can reference per
   domain. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLengthLimit">
      <summary>
        <para>Represents the default maximum size, in bytes, of the <see cref="T:System.Net.Cookie" /> instances the <see cref="T:System.Net.CookieContainer" />
can hold. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.CookieContainer" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.CookieContainer" /> class with a specified value for the number of
<see cref="T:System.Net.Cookie" /> instances the container can 
   hold. </para>
      </summary>
      <param name="capacity">The number of <see cref="T:System.Net.Cookie" /> instances the <see cref="T:System.Net.CookieContainer" /> can hold.</param>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.CookieContainer" /> class with specific
   properties.</para>
      </summary>
      <param name="capacity">The number of <see cref="T:System.Net.Cookie" /> instances the <see cref="T:System.Net.CookieContainer" /> can hold.</param>
      <param name="perDomainCapacity">The number of <see cref="T:System.Net.Cookie" /> instances per domain.</param>
      <param name="maxCookieSize">The maximum size in bytes for any single <see cref="T:System.Net.Cookie" /> in a <see cref="T:System.Net.CookieContainer" /> .</param>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Net.Cookie)">
      <summary>
        <para>Adds a <see cref="T:System.Net.Cookie" /> to a <see cref="T:System.Net.CookieContainer" />. This method uses the domain from the <see cref="T:System.Net.Cookie" /> to determine
   which domain collection to associate the <see cref="T:System.Net.Cookie" />
   with.</para>
      </summary>
      <param name="cookie">The <see cref="T:System.Net.Cookie" /> to be added to the <see cref="T:System.Net.CookieContainer" /> .</param>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Net.CookieCollection)">
      <summary>
        <para>Adds the contents of a <see cref="T:System.Net.CookieCollection" /> to the
<see cref="T:System.Net.CookieContainer" />
. </para>
      </summary>
      <param name="cookies">The <see cref="T:System.Net.CookieCollection" /> to be added to the <see cref="T:System.Net.CookieContainer" /> .</param>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.Cookie)">
      <summary>
        <para>Adds a <see cref="T:System.Net.Cookie" /> to
   the <see cref="T:System.Net.CookieContainer" />for a particular URI.</para>
      </summary>
      <param name="cookie">The <see cref="T:System.Net.Cookie" /> to be added to the <see cref="T:System.Net.CookieContainer" /> .</param>
      <param name="uri">The URI of the <see cref="T:System.Net.Cookie" /> to be added to the <see cref="T:System.Net.CookieContainer" /> .</param>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.CookieCollection)">
      <summary>
        <para>Adds the contents of a <see cref="T:System.Net.CookieCollection" /> to the
<see cref="T:System.Net.CookieContainer" />
for a particular URI.</para>
      </summary>
      <param name="cookies">The <see cref="T:System.Net.CookieCollection" /> to be added to the <see cref="T:System.Net.CookieContainer" /> .</param>
      <param name="uri">The URI of the <see cref="T:System.Net.CookieCollection" /> to be added to the <see cref="T:System.Net.CookieContainer" /> .</param>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookies(System.Uri)">
      <summary>
        <para>Gets A <see cref="T:System.Net.CookieCollection" /> containing the <see cref="T:System.Net.Cookie" /> instances associated with a 
   specific URI.</para>
      </summary>
      <param name="uri">The URI of the <see cref="T:System.Net.Cookie" /> instances desired.</param>
      <returns>
        <para>A <see cref="T:System.Net.CookieCollection" />
containing the <see cref="T:System.Net.Cookie" /> instances associated with a specific URI.</para>
      </returns>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookieHeader(System.Uri)">
      <summary>
        <para>Gets the HTTP cookie header containing the HTTP cookies 
      representing the <see cref="T:System.Net.Cookie" /> instances associated with a
      specific URI.</para>
      </summary>
      <param name="uri">The URI of the <see cref="T:System.Net.Cookie" /> instances desired.</param>
      <returns>
        <para>An HTTP cookie header, with strings representing <see cref="T:System.Net.Cookie" /> instances delimited by semicolons.</para>
      </returns>
    </member>
    <member name="M:System.Net.CookieContainer.SetCookies(System.Uri,System.String)">
      <summary>
        <para>Adds <see cref="T:System.Net.Cookie" /> instances for one or more cookies from an HTTP cookie header
   to the <see cref="T:System.Net.CookieContainer" /> for a specific URI.</para>
      </summary>
      <param name="uri">The URI of the <see cref="T:System.Net.CookieCollection" /> .</param>
      <param name="cookieHeader">The contents of an HTTP set-cookie header as returned by a HTTP server, with <see cref="T:System.Net.Cookie" /> instances delimited by commas.</param>
    </member>
    <member name="P:System.Net.CookieContainer.Capacity">
      <summary>
        <para>Gets and sets the number of <see cref="T:System.Net.Cookie" /> instances a <see cref="T:System.Net.CookieContainer" />
can hold.</para>
      </summary>
    </member>
    <member name="P:System.Net.CookieContainer.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.Net.Cookie" /> instances a <see cref="T:System.Net.CookieContainer" />
currently holds.</para>
      </summary>
    </member>
    <member name="P:System.Net.CookieContainer.MaxCookieSize">
      <summary>
        <para>Represents the maximum allowed length of a <see cref="T:System.Net.Cookie" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.CookieContainer.PerDomainCapacity">
      <summary>
        <para>Gets and sets the number of <see cref="T:System.Net.Cookie" /> instances a <see cref="T:System.Net.CookieContainer" /> can hold per domain.</para>
      </summary>
    </member>
    <member name="T:System.Net.CookieException">
      <summary>
        <para> The exception that is thrown when an error
      is made adding a <see cref="T:System.Net.Cookie" /> to a <see cref="T:System.Net.CookieContainer" /> .</para>
      </summary>
    </member>
    <member name="M:System.Net.CookieException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.CookieException" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Net.CookieException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.CookieException" />
class with specific values of <paramref name="serializationInfo" /> and
<paramref name="streamingContext" /> .</para>
      </summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to be used.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> to be used.</param>
    </member>
    <member name="T:System.Net.CredentialCache">
      <summary>
        <para>Provides storage for multiple credentials.</para>
      </summary>
    </member>
    <member name="T:System.Net.ICredentials">
      <summary>
        <para>Provides the base authentication interface for retrieving credentials for Web client authentication.</para>
      </summary>
    </member>
    <member name="M:System.Net.ICredentials.GetCredential(System.Uri,System.String)">
      <summary>
        <para>Returns a <see cref="T:System.Net.NetworkCredential" />
object that is associated with the specified URI, and authentication type.</para>
      </summary>
      <param name="uri">The <see cref="T:System.Uri" /> that the client is providing authentication for.</param>
      <param name="authType">The type of authentication, as defined in the <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" qualify="true" /> property. </param>
      <returns>
        <para>The <see cref="T:System.Net.NetworkCredential" /> associated with the 
 specified URI and authentication type, or if no credentials are available,
<see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Net.CredentialCache.#ctor">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Net.CredentialCache" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)">
      <summary>
        <para>Adds a <see cref="T:System.Net.NetworkCredential" />
instance to the credential cache.</para>
      </summary>
      <param name="uriPrefix">A <see cref="T:System.Uri" /> that specifies the URI prefix of the resources that the credential grants access to.</param>
      <param name="authType">The authentication scheme used by the resource named in <paramref name="uriPrefix" /> .</param>
      <param name="cred">The <see cref="T:System.Net.NetworkCredential" /> to add to the credential cache.</param>
    </member>
    <member name="M:System.Net.CredentialCache.Remove(System.Uri,System.String)">
      <summary>
        <para>Deletes a <see cref="T:System.Net.NetworkCredential" />
instance from the cache.</para>
      </summary>
      <param name="uriPrefix">A <see cref="T:System.Uri" /> that specifies the URI prefix of the resources that the credential is used for.</param>
      <param name="authType">The authentication scheme used by the host named in <paramref name="uriPrefix" /> .</param>
    </member>
    <member name="M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)">
      <summary>
        <para>Returns the <see cref="T:System.Net.NetworkCredential" />
instance associated with the specified URI and
authentication type.</para>
      </summary>
      <param name="uriPrefix">A <see cref="T:System.Uri" /> that specifies the URI prefix of the resources that the credential grants access to.</param>
      <param name="authType">The authentication scheme used by the resource named in <paramref name="uriPrefix" /> .</param>
      <returns>
        <para>A <see cref="T:System.Net.NetworkCredential" /> or, if there is no matching credential in
   the cache,
<see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Net.CredentialCache.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through the
   <see cref="T:System.Net.CredentialCache" /> instance.</para>
      </summary>
      <returns>
        <para> An <see cref="T:System.Collections.IEnumerator" />
for the <see cref="T:System.Net.CredentialCache" /> .</para>
      </returns>
    </member>
    <member name="P:System.Net.CredentialCache.DefaultCredentials">
      <summary>
        <para> Gets the system credentials
      of the application.</para>
      </summary>
    </member>
    <member name="T:System.Net.NetworkCredential">
      <summary>
        <para>Provides credentials for password-based authentication
      schemes such as basic, digest, NTLM, and Kerberos authentication.</para>
      </summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential" /> class with the specified user name and password.</para>
      </summary>
      <param name="userName">The user name associated with the credentials.</param>
      <param name="password">The password for the user name associated with the credentials.</param>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.NetworkCredential" /> class 
   with the specified user name, password, and domain.</para>
      </summary>
      <param name="userName">The user name associated with the credentials.</param>
      <param name="password">The password for the user name associated with the credentials.</param>
      <param name="domain">The domain associated with these credentials.</param>
    </member>
    <member name="M:System.Net.NetworkCredential.GetCredential(System.Uri,System.String)">
      <summary>
        <para>Returns an instance of the <see cref="T:System.Net.NetworkCredential" /> class for the specified URI and
   authentication type.</para>
      </summary>
      <param name="uri">The URI that the client is providing authentication for.</param>
      <param name="authType">The type of authentication requested as defined in the <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" qualify="true" /> property.</param>
      <returns>
        <para>A <see cref="T:System.Net.NetworkCredential" /> instance.</para>
      </returns>
    </member>
    <member name="P:System.Net.NetworkCredential.UserName">
      <summary>
        <para>Gets or sets the user name associated with the credentials.</para>
      </summary>
    </member>
    <member name="P:System.Net.NetworkCredential.Password">
      <summary>
        <para>Gets or sets the password for the user name associated with the credentials.</para>
      </summary>
    </member>
    <member name="P:System.Net.NetworkCredential.Domain">
      <summary>
        <para> Gets or sets the
      domain or computer name that verifies the credentials.</para>
      </summary>
    </member>
    <member name="T:System.Net.Dns">
      <summary>
        <para>Provides simple
      domain name resolution functionality.</para>
      </summary>
    </member>
    <member name="M:System.Net.Dns.GetHostByName(System.String)">
      <summary>
        <para> Gets the DNS information for the specified DNS host
      name.</para>
      </summary>
      <param name="hostName">A string containing the DNS name of the host.</param>
      <returns>
        <para>An <see cref="T:System.Net.IPHostEntry" /> object containing host information for the address
   specified in <paramref name="hostName" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Net.Dns.GetHostByAddress(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Net.IPHostEntry" /> instance from an address in dotted-quad notation ("198.162.1.2").</para>
      </summary>
      <param name="address">A string that represents an IP address in dotted-quad notation (for example, "192.168.1.2").</param>
      <returns>
        <para>An <see cref="T:System.Net.IPHostEntry" />
instance.</para>
      </returns>
    </member>
    <member name="M:System.Net.Dns.GetHostByAddress(System.Net.IPAddress)">
      <summary>
        <para>Creates an <see cref="T:System.Net.IPHostEntry" /> instance from a specified <see cref="T:System.Net.IPAddress" />
instance.</para>
      </summary>
      <param name="address">An <see cref="T:System.Net.IPAddress" /> instance.</param>
      <returns>
        <para>An <see cref="T:System.Net.IPHostEntry" />
instance.</para>
      </returns>
    </member>
    <member name="M:System.Net.Dns.GetHostName">
      <summary>
        <para>Gets the host name of the local computer.</para>
      </summary>
      <returns>
        <para>A string containing the DNS host name
      of the local computer.</para>
      </returns>
    </member>
    <member name="M:System.Net.Dns.Resolve(System.String)">
      <summary>
        <para>Resolves a DNS host name or IP address in dotted-quad notation to an <see cref="T:System.Net.IPHostEntry" />
instance. </para>
      </summary>
      <param name="hostName">A DNS-style host name or IP address in dotted-quad notation. (for example, "www.contoso.com " or "192.168.1.2").</param>
      <returns>
        <para>An <see cref="T:System.Net.IPHostEntry" /> instance
   containing address information about the host specified in
<paramref name="hostName" />
.</para>
      </returns>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous request for <see cref="T:System.Net.IPHostEntry" /> information about the specified DNS host name.</para>
      </summary>
      <param name="hostName">A string containing the DNS name of the host.</param>
      <param name=" requestCallback">The <see cref="T:System.AsyncCallback" />.</param>
      <param name=" stateObject">The State object.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Net.Dns.EndGetHostByName(System.IAsyncResult)">
      <summary>
        <para>Ends an asynchronous request for DNS information.</para>
      </summary>
      <param name="asyncResult">The pending request for DNS information.</param>
      <returns>
        <para>An <see cref="T:System.Net.IPHostEntry" /> object containin DNS information about a host. </para>
      </returns>
    </member>
    <member name="M:System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous request to resolve a DNS 
      host name or IP address in dotted-quad notation to an <see cref="T:System.Net.IPAddress" /> instance.</para>
      </summary>
      <param name="hostName">A string containing the DNS name of the host.</param>
      <param name="requestCallback">The <see cref="T:System.AsyncCallback" />.</param>
      <param name="stateObject">The State object.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Net.Dns.EndResolve(System.IAsyncResult)">
      <summary>
        <para>Ends an asynchronous request for DNS information.</para>
      </summary>
      <param name="asyncResult">The pending request for DNS information.</param>
      <returns>
        <para>An <see cref="T:System.Net.IPHostEntry" /> object containin DNS information about a host. </para>
      </returns>
    </member>
    <member name="T:System.Net.DnsPermissionAttribute">
      <summary>
        <para> Specifies permission to request
      information from Domain Name Servers.</para>
      </summary>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.DnsPermissionAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" /> value.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new instance of the <see cref="T:System.Net.DnsPermission" /> class.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Net.DnsPermission" /> corresponding to the security declaration.</para>
      </returns>
    </member>
    <member name="T:System.Net.DnsPermission">
      <summary>
        <para>Controls rights to access Domain Name System (DNS) servers on the
      network.</para>
      </summary>
    </member>
    <member name="M:System.Net.DnsPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
   Creates a new instance of the <see cref="T:System.Net.DnsPermission" /> class that either allows unrestricted DNS access or
   disallows DNS access.
</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.Net.DnsPermission.IsUnrestricted">
      <summary>
        <para> Checks the overall permission state of the object.
      </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Net.DnsPermission" /> instance was created 
   with <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" qualify="true" />; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Net.DnsPermission.Copy">
      <summary>
        <para> Creates an identical copy of the current 
      permission instance.
      </para>
      </summary>
      <returns>
        <para> A new instance of the <see cref="T:System.Net.DnsPermission" /> class that is an identical copy of the current instance.
   </para>
      </returns>
    </member>
    <member name="M:System.Net.DnsPermission.Union(System.Security.IPermission)">
      <summary>
        <para>Creates a permission instance that is the union of the
      current permission instance and the specified permission instance.</para>
      </summary>
      <param name="target">The <see cref="T:System.Net.DnsPermission" /> instance to combine with the current instance.</param>
      <returns>
        <para>A <see cref="T:System.Net.DnsPermission" /> instance that represents the union of
   the current <see cref="T:System.Net.DnsPermission" /> instance with the
   specified <see cref="T:System.Net.DnsPermission" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Net.DnsPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para>Creates a permission instance that is the intersection of
      the current permission instance and the specified permission instance.</para>
      </summary>
      <param name="target">The <see cref="T:System.Net.DnsPermission" /> instance to combine with the current instance.</param>
      <returns>
        <para>A <see cref="T:System.Net.DnsPermission" /> instance that represents the intersection of the current <see cref="T:System.Net.DnsPermission" /> instance with the specified <see cref="T:System.Net.DnsPermission" /> instance, or
<see langword="null" /> if the 
   intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Net.DnsPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para>Determines whether the current permission instance is a
      subset of the specified permission instance.</para>
      </summary>
      <param name="target">The second <see cref="T:System.Net.DnsPermission" /> instance to be tested for the subset relationship.</param>
      <returns>
        <para>
          <see langword="false " />when 
<paramref name="target.IsUnrestricted()" /> is <see langword="false" />; otherwise, 
<see langword="true" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.DnsPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para>Reconstructs a <see cref="T:System.Net.DnsPermission" /> instance from an XML encoding.</para>
      </summary>
      <param name="securityElement">The XML encoding to use to reconstruct the <see cref="T:System.Net.DnsPermission" /> instance.</param>
    </member>
    <member name="M:System.Net.DnsPermission.ToXml">
      <summary>
        <para>Creates an XML encoding of a <see cref="T:System.Net.DnsPermission" /> instance and its current state. </para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.SecurityElement" /> instance containing an XML-encoded representation of the security object, including state information.</para>
      </returns>
    </member>
    <member name="T:System.Net.EndPoint">
      <summary>
        <para> Identifies a network address. This is an
   <see langword="abstract" /> class.
      </para>
      </summary>
    </member>
    <member name="M:System.Net.EndPoint.Serialize">
      <summary>
        <para> Serializes endpoint information into a <see cref="T:System.Net.SocketAddress" /> instance.
   </para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Net.SocketAddress" /> instance containing the endpoint information.</para>
      </returns>
    </member>
    <member name="M:System.Net.EndPoint.Create(System.Net.SocketAddress)">
      <summary>
        <para> Creates an <see cref="T:System.Net.EndPoint" /> instance from a <see cref="T:System.Net.SocketAddress" /> instance.
   </para>
      </summary>
      <param name="socketAddress">The socket address that serves as the endpoint for a connection.</param>
      <returns>
        <para>A new <see cref="T:System.Net.EndPoint" /> instance initialized from the specified <see cref="T:System.Net.SocketAddress" /> instance.</para>
      </returns>
    </member>
    <member name="P:System.Net.EndPoint.AddressFamily">
      <summary>
        <para> Gets the address family to which the endpoint belongs.
      </para>
      </summary>
    </member>
    <member name="T:System.Net.FileWebRequest">
      <summary>
        <para>Provides a file system implementation of the <see cref="T:System.Net.WebRequest" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Net.WebRequest">
      <summary>
        <para>Makes a request to a Uniform Resource Identifier (URI). This
      is an <see langword="abstract " />
      class.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.String)">
      <summary>
        <para>Initializes a new <see cref="T:System.Net.WebRequest" /> instance for
   the specified URI scheme.</para>
      </summary>
      <param name="requestUriString">The URI that identifies the Internet resource.</param>
      <returns>
        <para> A <see cref="T:System.Net.WebRequest" /> descendant for the specific URI scheme.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.Uri)">
      <summary>
        <para>Initializes a new <see cref="T:System.Net.WebRequest" /> instance for the specified URI scheme.</para>
      </summary>
      <param name="requestUri">A <see cref="T:System.Uri" /> containing the URI of the requested resource.</param>
      <returns>
        <para> A <see cref="T:System.Net.WebRequest" /> descendant for the specified URI scheme.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebRequest.CreateDefault(System.Uri)">
      <summary>
        <para> Initializes a new <see cref="T:System.Net.WebRequest" /> instance for the specified URI scheme.</para>
      </summary>
      <param name="requestUri">A <see cref="T:System.Uri" /> containing the URI of the requested resource.</param>
      <returns>
        <para> A <see cref="T:System.Net.WebRequest" /> descendant for the specified URI scheme.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)">
      <summary>
        <para>Registers a <see cref="T:System.Net.WebRequest" />
descendant for the specified URI.</para>
      </summary>
      <param name="prefix">The URI prefix that the <see cref="T:System.Net.WebRequest" /> descendant services.</param>
      <param name="creator">The create method that the <see cref="T:System.Net.WebRequest" /> calls to create the <see cref="T:System.Net.WebRequest" /> descendant.</param>
      <returns>
        <para>
          <see langword="true " />if registration is successful; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebRequest.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.WebRequest" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebRequest" /> class
   from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />
   classes.</para>
      </summary>
      <param name="serializationInfo"> A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the information required to serialize the new <see cref="T:System.Net.WebRequest" /> instance.</param>
      <param name=" streamingContext"> A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that indicates the source of the serialized stream associated with the new <see cref="T:System.Net.WebRequest" /> instance.</param>
    </member>
    <member name="M:System.Net.WebRequest.GetRequestStream">
      <summary>
        <para>When overridden in a descendant class,
      returns a <see cref="T:System.IO.Stream" /> for writing data to the Internet
      resource.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.IO.Stream" /> for writing data to the
   Internet resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebRequest.GetResponse">
      <summary>
        <para>When overridden in a descendant class,
      returns a response
      to an Internet request.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Net.WebResponse" /> containing the response to the Internet request.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>
        <para>When overridden in a descendant class, begins an
      asynchronous request for an Internet resource.</para>
      </summary>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name="state">An object containing state information for this asynchronous request.</param>
      <returns>
        <para> An <see cref="T:System.IAsyncResult" /> that references the asynchronous request. </para>
      </returns>
    </member>
    <member name="M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>
        <para>When overridden in a descendant class, returns a <see cref="T:System.Net.WebResponse" /> .</para>
      </summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references a pending request for a response.</param>
      <returns>
        <para> A <see cref="T:System.Net.WebResponse" /> that contains a response to the Internet request.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>
        <para>When overridden in a descendant class, provides an asynchronous version of the <see cref="M:System.Net.WebRequest.GetRequestStream" />
method.</para>
      </summary>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name="state">An object containing state information for this asynchronous request.</param>
      <returns>
        <para> An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>
        <para>When overridden in a descendant class, returns a <see cref="T:System.IO.Stream" />
for writing data to the Internet resource.</para>
      </summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references a pending request for a stream.</param>
      <returns>
        <para> A <see cref="T:System.IO.Stream" /> to write data
   to.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebRequest.Abort">
      <summary>
        <para>Cancels an asynchronous request to an Internet resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebRequest.Method">
      <summary>
        <para> When overridden in a
      descendant
      class,
      gets or sets the protocol method to use in this
      request.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebRequest.RequestUri">
      <summary>
        <para>When overridden in a descendant class, gets the URI
      of the Internet resource associated with
      the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebRequest.ConnectionGroupName">
      <summary>
        <para>When overridden in a descendant class, gets or sets the name of the connection group for the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebRequest.Headers">
      <summary>
        <para>When overridden in a descendant class, gets
      or
      sets the collection of header name/value pairs associated with the
      request.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebRequest.ContentLength">
      <summary>
        <para>When overridden
      in a descendant class, gets or
      sets the
      content
      length of the request data being sent.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebRequest.ContentType">
      <summary>
        <para>When
      overridden in a descendant class, gets
      or
      sets
      the content type of the request data being sent.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebRequest.Credentials">
      <summary>
        <para>When overridden in a descendant class, gets or sets the network credentials used for
      authenticating the request with the Internet resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebRequest.Proxy">
      <summary>
        <para>When overridden in a descendant class, gets or sets the network proxy
      to use to access this Internet resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebRequest.PreAuthenticate">
      <summary>
        <para>When overridden in a descendant class, indicates whether
      to preauthenticate the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebRequest.Timeout">
      <summary>
        <para> Gets or sets the length of time before the request times out.</para>
      </summary>
    </member>
    <member name="M:System.Net.FileWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.FileWebRequest" /> class
   from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> classes.</para>
      </summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that contains the information required to serialize the new <see cref="T:System.Net.FileWebRequest" /> instance.</param>
      <param name=" streamingContext">An instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class that contains the source of the serialized stream associated with the new <see cref="T:System.Net.FileWebRequest" /> instance.</param>
    </member>
    <member name="M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous request for a <see cref="T:System.IO.Stream" /> instance
   to use to write data.</para>
      </summary>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name=" state">An object containing state information for this request.</param>
      <returns>
        <para> An <see cref="T:System.IAsyncResult" /> 
that references the asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous request for a file system resource.</para>
      </summary>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name="state">An object containing state information for this request.</param>
      <returns>
        <para> An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Net.FileWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>
        <para>Ends an asynchronous request for a <see cref="T:System.IO.Stream" /> instance that the
   application uses to write data.</para>
      </summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> referencing the pending request for a stream.</param>
      <returns>
        <para>A <see cref="T:System.IO.Stream" /> instance that the application uses to write data.</para>
      </returns>
    </member>
    <member name="M:System.Net.FileWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>
        <para>Ends an asynchronous request for a file system resource.</para>
      </summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> referencing the pending request for a response.</param>
      <returns>
        <para> A <see cref="T:System.Net.WebResponse" /> that contains the response from the file system
   resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.FileWebRequest.GetRequestStream">
      <summary>
        <para>Returns a <see cref="T:System.IO.Stream" /> instance for writing data to the file system resource.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.IO.Stream" /> for writing data to the file
   system resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.FileWebRequest.GetResponse">
      <summary>
        <para>Returns a response to a file system request.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Net.WebResponse" /> that contains the response from the file system
   resource.</para>
      </returns>
    </member>
    <member name="P:System.Net.FileWebRequest.ConnectionGroupName">
      <summary>
        <para>Gets or sets the name of the connection group for the
      request. This property is reserved for future use.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebRequest.ContentLength">
      <summary>
        <para>Gets or sets the content length of the data being sent.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebRequest.ContentType">
      <summary>
        <para>Gets or sets the content type of the data being sent. This property is reserved for future use.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebRequest.Credentials">
      <summary>
        <para>Gets or sets the credentials associated with this
      request. This property is reserved for future use.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebRequest.Headers">
      <summary>
        <para>Gets a collection of the name/value pairs associated with the
      request. This property is reserved for future use.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebRequest.Method">
      <summary>
        <para>Gets or sets the protocol method used for the request.
      This property is reserved for future use.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebRequest.PreAuthenticate">
      <summary>
        <para>Gets or sets a value indicating whether to
      preauthenticate a request. This property is reserved for future use.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebRequest.Proxy">
      <summary>
        <para>Gets or sets the network proxy to use for this request.
      This property is reserved for future use.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebRequest.Timeout">
      <summary>
        <para>Gets or sets the length of time until the request times out.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebRequest.RequestUri">
      <summary>
        <para>Gets the URI of the request.</para>
      </summary>
    </member>
    <member name="T:System.Net.IWebRequestCreate">
      <summary>
        <para> Provides the base interface for creating <see cref="T:System.Net.WebRequest" />
instances.</para>
      </summary>
    </member>
    <member name="M:System.Net.IWebRequestCreate.Create(System.Uri)">
      <summary>
        <para>Creates a <see cref="T:System.Net.WebRequest" />
instance.</para>
      </summary>
      <param name="uri">The uniform resource identifier (URI) of the Web resource.</param>
      <returns>
        <para>A <see cref="T:System.Net.WebRequest" />
instance.</para>
      </returns>
    </member>
    <member name="T:System.Net.FileWebResponse">
      <summary>
        <para>Provides a file system implementation of the <see cref="T:System.Net.WebResponse" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Net.WebResponse">
      <summary>
        <para>Provides a response from a Uniform Resource Identifier (URI).
      This is an <see langword="abstract " />
      class.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor">
      <summary>
        <para>Initializes a new
      instance of the <see cref="T:System.Net.WebResponse" />
      class.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebResponse" /> class
   from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />
   classes.</para>
      </summary>
      <param name="serializationInfo">An instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class containing the information required to serialize the new <see cref="T:System.Net.WebRequest" /> instance.</param>
      <param name=" streamingContext">An instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class indicating the source of the serialized stream associated with the new <see cref="T:System.Net.WebRequest" /> instance.</param>
    </member>
    <member name="M:System.Net.WebResponse.Close">
      <summary>
        <para>When overridden by a descendent class, closes the response stream.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebResponse.GetResponseStream">
      <summary>
        <para>When overridden in a descendant class, returns the
      data stream from the Internet
      resource.</para>
      </summary>
      <returns>
        <para>An instance of the <see cref="T:System.IO.Stream" /> class for reading data from the
   Internet
   resource.</para>
      </returns>
    </member>
    <member name="P:System.Net.WebResponse.ContentLength">
      <summary>
        <para>When overridden in a descendant class, gets or
      sets
      the content length of data being received.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebResponse.ContentType">
      <summary>
        <para>When overridden in a derived class,
      gets
      or sets the content type of the data being received.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebResponse.ResponseUri">
      <summary>
        <para> When overridden in a derived class, gets the URI of the Internet resource that
      actually responded to the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebResponse.Headers">
      <summary>
        <para>When overridden in a derived class, gets
      a collection of header name-value pairs associated with this
      request.</para>
      </summary>
    </member>
    <member name="M:System.Net.FileWebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.FileWebResponse" /> class
   from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> classes.</para>
      </summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that contains the information required to serialize the new <see cref="T:System.Net.FileWebResponse" /> instance.</param>
      <param name=" streamingContext">An instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class that contains the source of the serialized stream associated with the new <see cref="T:System.Net.FileWebResponse" /> instance.</param>
    </member>
    <member name="M:System.Net.FileWebResponse.Close">
      <summary>
        <para>Closes the response stream.</para>
      </summary>
    </member>
    <member name="M:System.Net.FileWebResponse.GetResponseStream">
      <summary>
        <para>Returns the data stream from the file system resource.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.IO.Stream" /> for reading data from the file system
   resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.FileWebResponse.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Net.FileWebResponse" /> and 
   optionally releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.FileWebResponse.ContentLength">
      <summary>
        <para> Gets the length of the content in the file system resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebResponse.ContentType">
      <summary>
        <para> Gets the content type of the file system resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebResponse.Headers">
      <summary>
        <para>Gets a collection of header name/value pairs associated
      with the response.</para>
      </summary>
    </member>
    <member name="P:System.Net.FileWebResponse.ResponseUri">
      <summary>
        <para>Gets the URI of the file system resource that provided the response.</para>
      </summary>
    </member>
    <member name="T:System.Net.GlobalProxySelection">
      <summary>
        <para> Contains a global
      default proxy instance for all HTTP requests.</para>
      </summary>
    </member>
    <member name="M:System.Net.GlobalProxySelection.GetEmptyWebProxy">
      <summary>
        <para>Returns an empty proxy instance.</para>
      </summary>
      <returns>
        <para> An <see cref="T:System.Net.IWebProxy" /> that contains no information.</para>
      </returns>
    </member>
    <member name="P:System.Net.GlobalProxySelection.Select">
      <summary>
        <para>Gets or sets the global HTTP proxy.</para>
      </summary>
    </member>
    <member name="T:System.Net.HttpWebRequest">
      <summary>
        <para> Provides an HTTP-specific implementation of the <see cref="T:System.Net.WebRequest" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous request for a <see cref="T:System.IO.Stream" /> instance to use to
   write data.</para>
      </summary>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name=" state">The state object for this request.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>
        <para>Ends an asynchronous request for a <see cref="T:System.IO.Stream" /> instance to use to write data.</para>
      </summary>
      <param name="asyncResult">The pending request for a stream.</param>
      <returns>
        <para>A <see cref="T:System.IO.Stream" />
to use to write request data.</para>
      </returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetRequestStream">
      <summary>
        <para>Gets a <see cref="T:System.IO.Stream" /> instance to use to write request
   data.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.IO.Stream" />
to use to write request data.</para>
      </returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>
        <para> Begins an asynchronous request to an Internet
      resource.</para>
      </summary>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate</param>
      <param name=" state">The state object for this request.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request for a response.</para>
      </returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>
        <para> Ends an asynchronous request to an Internet resource..</para>
      </summary>
      <param name="asyncResult">The pending request for a response.</param>
      <returns>
        <para>A <see cref="T:System.Net.WebResponse" /> containing the response from the Internet
   resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetResponse">
      <summary>
        <para> Returns a response from an Internet resource.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Net.WebResponse" /> containing the response from the Internet
   resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.Abort">
      <summary>
        <para>Cancels a request to an Internet resource.</para>
      </summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.HttpWebRequest" /> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />
classes.</para>
      </summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance containing the information required to serialize the new <see cref="T:System.Net.HttpWebRequest" /> instance.</param>
      <param name=" streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance containing the source and destination of the serialized stream associated with the new <see cref="T:System.Net.HttpWebRequest" /> instance.</param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)">
      <summary>
        <para>Adds a byte range header to the request for a specified range.</para>
      </summary>
      <param name="from">The position at which to start sending data.</param>
      <param name=" to">The position at which to stop sending data.</param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int32)">
      <summary>
        <para>Adds a byte range header to a request for a specific
      range from the beginning or end
      of the requested data.</para>
      </summary>
      <param name="range">The starting or ending point of the range.</param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Adds a range header to a request for a specified range.</para>
      </summary>
      <param name="rangeSpecifier">The description of the range.</param>
      <param name=" from">The position at which to start sending data.</param>
      <param name=" to">The position at which to stop sending data. </param>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32)">
      <summary>
        <para> Adds a range header to a request for a specific range from the beginning or end of the requested data.</para>
      </summary>
      <param name="rangeSpecifier">The description of the range.</param>
      <param name="range">The starting or ending point of the range. </param>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetHashCode">
      <summary>
        <para>Gets the hash code for this <see cref="T:System.Net.HttpWebRequest" /> .</para>
      </summary>
      <returns>
        <para>The hash code for the <see cref="T:System.Net.HttpWebRequest" /> .</para>
      </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.CookieContainer">
      <summary>
        <para>Gets or sets the cookies associated with the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.RequestUri">
      <summary>
        <para> Gets the original URI of the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering">
      <summary>
        <para>Gets or sets a value that indicates whether to buffer the data sent to the
      Internet resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentLength">
      <summary>
        <para> Gets or sets the <see langword="Content-length" /> HTTP header.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Timeout">
      <summary>
        <para>Gets or sets the time-out value for a request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.ClientCertificates">
      <summary>
        <para>Gets the collection of security certificates associated 
      with this request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Address">
      <summary>
        <para> Gets the URI of the Internet resource that actually responds to the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContinueDelegate">
      <summary>
        <para>Gets or sets the delegate method called when an HTTP 100-continue response is received
      from the Internet resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.ServicePoint">
      <summary>
        <para>Gets the service point to use for the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowAutoRedirect">
      <summary>
        <para>Gets or sets a value that indicates whether the request should follow redirection responses.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.MaximumAutomaticRedirections">
      <summary>
        <para>Gets or sets the maximum number of redirects that the request will follow.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Method">
      <summary>
        <para>Gets or sets the method for the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.KeepAlive">
      <summary>
        <para>Gets or sets a value indicating whether to make a persistent connection to the Internet resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Pipelined">
      <summary>
        <para>Gets or sets a value indicating whether to pipeline the request to the Internet resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Credentials">
      <summary>
        <para>Provides authentication information for the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.PreAuthenticate">
      <summary>
        <para>Gets or sets a value indicating whether to send a preauthentication header with the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.ConnectionGroupName">
      <summary>
        <para>Gets or sets the name of the connection group for the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Headers">
      <summary>
        <para>Gets a collection of the name/value pairs that make up the HTTP headers.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Proxy">
      <summary>
        <para> Gets or sets proxy information for the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.SendChunked">
      <summary>
        <para>Gets or sets a value indicating whether to send data in segments to the Internet resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.ProtocolVersion">
      <summary>
        <para>Gets or sets the
      version of HTTP to use for the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentType">
      <summary>
        <para>Gets or sets the value of the
   <see langword="Content-type" /> HTTP header.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.MediaType">
      <summary>
        <para> Gets or sets the media type of the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.TransferEncoding">
      <summary>
        <para>Gets or sets the value of the
      <see langword="Transfer-encoding" /> HTTP header.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Connection">
      <summary>
        <para>Gets or sets the value of the
   <see langword="Connection" /> HTTP header.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Accept">
      <summary>
        <para>Gets or sets the value of the <see langword="Accept" /> HTTP header.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Referer">
      <summary>
        <para>Gets or sets the value of the <see langword="Referer" /> HTTP header.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.UserAgent">
      <summary>
        <para>Gets or sets the value of the <see langword="User-agent" /> HTTP header.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Expect">
      <summary>
        <para>Gets or sets the value of the <see langword="Expect" /> HTTP header.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.IfModifiedSince">
      <summary>
        <para>Gets or sets the value of the
      <see langword="If-Modified-Since" /> HTTP
      header.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.HaveResponse">
      <summary>
        <para> Gets a value indicating whether a response has been received from an Internet
      resource.
      </para>
      </summary>
    </member>
    <member name="T:System.Net.HttpStatusCode">
      <summary>
        <para>Contains the values of status codes defined for HTTP.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Continue">
      <summary>
        <para>Equivalent to HTTP status 100. <see cref="F:System.Net.HttpStatusCode.Continue" /> indicates that the client may continue with its request.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.SwitchingProtocols">
      <summary>
        <para>Equivalent to HTTP status 101. <see cref="F:System.Net.HttpStatusCode.SwitchingProtocols" /> indicates that the protocol version or protocol is being changed.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.OK">
      <summary>
        <para>Equivalent to HTTP status 200. <see cref="F:System.Net.HttpStatusCode.OK" /> indicates that the
   request succeeded and the requested information is in the response. This is the
   most common status code to receive.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Created">
      <summary>
        <para>Equivalent to HTTP status 201. <see cref="F:System.Net.HttpStatusCode.Created" /> indicates that the request resulted in a new 
   resource created before the response was sent.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Accepted">
      <summary>
        <para>Equivalent to HTTP status 202. <see cref="F:System.Net.HttpStatusCode.Accepted" /> indicates that the request has been accepted for 
   further processing.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NonAuthoritativeInformation">
      <summary>
        <para>Equivalent to HTTP status 203. <see cref="F:System.Net.HttpStatusCode.NonAuthoritativeInformation" /> indicates 
   that the returned metainformation is from a
   cached copy instead of the origin server and therefore may be incorrect.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NoContent">
      <summary>
        <para>Equivalent to HTTP status 204. <see cref="F:System.Net.HttpStatusCode.NoContent" /> indicates that the request has been successfully 
   processed and that the response is intentionally blank.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ResetContent">
      <summary>
        <para>Equivalent to HTTP status 205. <see cref="F:System.Net.HttpStatusCode.ResetContent" /> indicates that the client should reset (not reload) 
   the current resource.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PartialContent">
      <summary>
        <para>Equivalent to HTTP status 206. <see cref="F:System.Net.HttpStatusCode.PartialContent" /> indicates that the response is a partial response as 
   requested by a GET request that includes a byte range.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MultipleChoices">
      <summary>
        <para>Equivalent to HTTP status 300. <see cref="F:System.Net.HttpStatusCode.MultipleChoices" /> indicates that the requested information has 
    multiple representations. The default action is to treat this status as a
    redirect and follow the contents of the Location header associated with this response.</para>
        <para>If the <see cref="P:System.Net.HttpWebRequest.AllowAutoRedirect" qualify="true" /> property is <see langword="false" />, 
 <see cref="F:System.Net.HttpStatusCode.MultipleChoices" /> will cause an exception to be thrown.</para>
        <para>
          <see cref="F:System.Net.HttpStatusCode.MultipleChoices" /> is a synonym for <see cref="F:System.Net.HttpStatusCode.Ambiguous" />.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Ambiguous">
      <summary>
        <para>Equivalent to HTTP status 300. <see cref="F:System.Net.HttpStatusCode.Ambiguous" /> indicates that the requested information has 
    multiple representations. The default action is to treat this status as a
    redirect and follow the contents of the Location header associated with this
    response.</para>
        <para>If the <see cref="P:System.Net.HttpWebRequest.AllowAutoRedirect" qualify="true" /> property is <see langword="false" />, 
 <see cref="F:System.Net.HttpStatusCode.Ambiguous" /> will cause an 
 exception to be thrown.</para>
        <para>
          <see cref="F:System.Net.HttpStatusCode.Ambiguous" /> is a synonym for <see cref="F:System.Net.HttpStatusCode.MultipleChoices" />.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MovedPermanently">
      <summary>
        <para>Equivalent to HTTP status 301. <see cref="F:System.Net.HttpStatusCode.MovedPermanently" /> indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response.</para>
        <para>If the <see cref="P:System.Net.HttpWebRequest.AllowAutoRedirect" qualify="true" /> property is <see langword="false" />, <see cref="F:System.Net.HttpStatusCode.MovedPermanently" /> will cause an exception to be thrown.</para>
        <para>
          <see cref="F:System.Net.HttpStatusCode.MovedPermanently" /> is a synonym for <see cref="F:System.Net.HttpStatusCode.Moved" />.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Moved">
      <summary>
        <para> Equivalent to HTTP status 301. <see cref="F:System.Net.HttpStatusCode.Moved" /> indicates that the requested
   information has been moved to the URI specified in the Location header. The
   default action when this status is received is to follow the Location header
   associated with the response. When the original request method was POST, the redirected
   request will use the
   GET method.</para>
        <para>If the <see cref="P:System.Net.HttpWebRequest.AllowAutoRedirect" qualify="true" /> property is <see langword="false" />,
<see cref="F:System.Net.HttpStatusCode.Moved" /> will cause an exception to be
thrown.</para>
        <para>
          <see cref="F:System.Net.HttpStatusCode.Moved" /> is a synonym for <see cref="F:System.Net.HttpStatusCode.MovedPermanently" />.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Found">
      <summary>
        <para>Equivalent to HTTP status 302. <see cref="F:System.Net.HttpStatusCode.Found" /> indicates that the requested
   information is located at the URI specified in the Location header.
   The default action when this status is received is to
   follow the Location header associated with the response. When the original request
   method was POST, the redirected request will use the GET method.</para>
        <para>If the <see cref="P:System.Net.HttpWebRequest.AllowAutoRedirect" qualify="true" /> property is <see langword="false" />,
<see cref="F:System.Net.HttpStatusCode.Found" /> will cause an exception to be
thrown.</para>
        <para>
          <see cref="F:System.Net.HttpStatusCode.Found" /> is a synonym for <see cref="F:System.Net.HttpStatusCode.Redirect" />.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Redirect">
      <summary>
        <para>Equivalent to HTTP status 302. <see cref="F:System.Net.HttpStatusCode.Redirect" /> indicates that the requested
   information is located at the URI specified in the Location header. The default
   action when this status is received is to follow the Location header
   associated with the response. When the original request method was POST, the redirected
   request will use the GET method.</para>
        <para>If the <see cref="P:System.Net.HttpWebRequest.AllowAutoRedirect" qualify="true" /> property is <see langword="false" />,
<see cref="F:System.Net.HttpStatusCode.Redirect" /> will cause an exception to be
thrown.</para>
        <para>
          <see cref="F:System.Net.HttpStatusCode.Redirect" /> is a synonym for <see cref="F:System.Net.HttpStatusCode.Found" />.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.SeeOther">
      <summary>
        <para>Equivalent to HTTP status 303. <see cref="F:System.Net.HttpStatusCode.SeeOther" /> automatically redirects the client to 
   the URI specified in the Location header as the result of a
   POST. The request to the resource specified by the Location header will be made
   with a GET.</para>
        <para>If the <see cref="P:System.Net.HttpWebRequest.AllowAutoRedirect" qualify="true" /> property is <see langword="false" />,
<see cref="F:System.Net.HttpStatusCode.SeeOther" /> will cause an exception to be thrown.</para>
        <para>
          <see cref="F:System.Net.HttpStatusCode.SeeOther" /> is a synonym for <see cref="F:System.Net.HttpStatusCode.RedirectMethod" />.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectMethod">
      <summary>
        <para>Equivalent to HTTP status 303. <see cref="F:System.Net.HttpStatusCode.RedirectMethod" /> automatically redirects the client to 
   the URI specified in the Location header as the result of a
   POST. The request to the resource specified by the Location header will be made
   with a GET.</para>
        <para>If the <see cref="P:System.Net.HttpWebRequest.AllowAutoRedirect" qualify="true" /> property is <see langword="false" />,
<see cref="F:System.Net.HttpStatusCode.RedirectMethod" /> will cause an exception to be thrown.</para>
        <para>
          <see cref="F:System.Net.HttpStatusCode.RedirectMethod" /> is a synonym for <see cref="F:System.Net.HttpStatusCode.SeeOther" />.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotModified">
      <summary>
        <para>Equivalent to HTTP status 304. <see cref="F:System.Net.HttpStatusCode.NotModified" /> indicates 
   that the client's cached copy is up to date. The contents of the resource is not transferred.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UseProxy">
      <summary>
        <para>Equivalent to HTTP status 305. <see cref="F:System.Net.HttpStatusCode.UseProxy" /> indicates that
   the request should use the proxy server at the URI specified in the Location header.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unused">
      <summary>
        <para>Equivalent to HTTP status 306. <see cref="F:System.Net.HttpStatusCode.Unused" /> is a proposed extension to the HTTP/1.1 
   specification that is not fully specified.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.TemporaryRedirect">
      <summary>
        <para>Equivalent to HTTP status 307. <see cref="F:System.Net.HttpStatusCode.TemporaryRedirect" /> indicates
   that the request information is located at the URI specified in the Location
   header. The
   default action when this status is received
   is to follow the Location header associated with the response. When the original
   request method was POST, the redirected request will also use the POST method.</para>
        <para>If the <see cref="P:System.Net.HttpWebRequest.AllowAutoRedirect" qualify="true" /> property is <see langword="false" />,
<see cref="F:System.Net.HttpStatusCode.TemporaryRedirect" /> will cause an exception to be
thrown.</para>
        <para>
          <see cref="F:System.Net.HttpStatusCode.TemporaryRedirect" /> is a synonym for <see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb" />.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectKeepVerb">
      <summary>
        <para>Equivalent to HTTP status 307. <see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb" /> indicates that the request
   information is located at the URI specified in the Location header. The
   default action when this status is received
   is to follow the Location header associated with the response. When the original
   request method was POST, the redirected request will also use the POST method.</para>
        <para>If the <see cref="P:System.Net.HttpWebRequest.AllowAutoRedirect" qualify="true" /> property is <see langword="false" />,
<see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb" /> will cause an exception to be
thrown.</para>
        <para>
          <see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb" /> is a synonym for <see cref="F:System.Net.HttpStatusCode.TemporaryRedirect" />.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadRequest">
      <summary>
        <para>Equivalent to HTTP status 400. <see cref="F:System.Net.HttpStatusCode.BadRequest" /> indicates that the request could not be understood 
   by the server. <see cref="F:System.Net.HttpStatusCode.BadRequest" /> is sent when no other error is applicable, or if the
   exact error is unknown or does not have its own error code.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unauthorized">
      <summary>
        <para>Equivalent to HTTP status 401. <see cref="F:System.Net.HttpStatusCode.Unauthorized" /> indicates that the requested resource requires
   authentication. The WWW-Authenticate header contains the details of how to
   perform the authentication.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PaymentRequired">
      <summary>
        <para>Equivalent to HTTP status 402. <see cref="F:System.Net.HttpStatusCode.PaymentRequired" /> is reserved for future use.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Forbidden">
      <summary>
        <para>Equivalent to HTTP status 403. <see cref="F:System.Net.HttpStatusCode.Forbidden" /> indicates that the server refuses to fulfill the request.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotFound">
      <summary>
        <para>Equivalent to HTTP status 404. <see cref="F:System.Net.HttpStatusCode.NotFound" /> indicates that the requested resource does not exist 
   on the server.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MethodNotAllowed">
      <summary>
        <para>Equivalent to HTTP status 405. <see cref="F:System.Net.HttpStatusCode.MethodNotAllowed" /> indicates that the request method (POST or GET) is 
   not allowed on the requested resource.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotAcceptable">
      <summary>
        <para>Equivalent to HTTP status 406. <see cref="F:System.Net.HttpStatusCode.NotAcceptable" /> indicates that the client has indicated with Accept 
   headers that it will not accept any of the available representations of the resource.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired">
      <summary>
        <para>Equivalent to HTTP status 407. <see cref="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired" /> indicates that the requested proxy requires
   authentication. The Proxy-authenticate header contains the details of how to
   perform the authentication.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestTimeout">
      <summary>
        <para>Equivalent to HTTP status 408. <see cref="F:System.Net.HttpStatusCode.RequestTimeout" /> indicates that the client did not send a request 
   within the time the server was expecting the request.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Conflict">
      <summary>
        <para>Equivalent to HTTP status 409. <see cref="F:System.Net.HttpStatusCode.Conflict" /> indicates that the request could not be carried out 
   due to a conflict on the server.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Gone">
      <summary>
        <para>Equivalent to HTTP status 410. <see cref="F:System.Net.HttpStatusCode.Gone" /> 
indicates that the requested resource is not longer available.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.LengthRequired">
      <summary>
        <para>Equivalent to HTTP status 411. <see cref="F:System.Net.HttpStatusCode.LengthRequired" /> indicates that the required Content-length header is missing.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PreconditionFailed">
      <summary>
        <para>Equivalent to HTTP status 412. <see cref="F:System.Net.HttpStatusCode.PreconditionFailed" /> indicates that a condition set for this request 
   failed, and the request cannot be carried out. Conditions are set with
   conditional request headers such as If-Match, If-None-Match, or
   If-Unmodified-Since.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestEntityTooLarge">
      <summary>
        <para>Equivalent to HTTP status 413. <see cref="F:System.Net.HttpStatusCode.RequestEntityTooLarge" /> indicates that the request is too large for the 
   server to process.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestUriTooLong">
      <summary>
        <para>Equivalent to HTTP status 414. <see cref="F:System.Net.HttpStatusCode.RequestUriTooLong" />indicates that the URI is too
   long.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UnsupportedMediaType">
      <summary>
        <para>Equivalent to HTTP status 415. <see cref="F:System.Net.HttpStatusCode.UnsupportedMediaType" /> indicates that the request is an unsupported type.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
      <summary>
        <para>Equivalent to HTTP status 416. <see cref="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable" /> indicates that the range of data requested from the 
   resource cannot be returned, either because the beginning of the range is before
   the beginning of the resource, or
   the end of the range is after the end of the resource.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ExpectationFailed">
      <summary>
        <para>Equivalent to HTTP status 417. <see cref="F:System.Net.HttpStatusCode.ExpectationFailed" /> indicates that an expectation given in an Expect 
   header could not be met by the server.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.InternalServerError">
      <summary>
        <para>Equivalent to HTTP status 500. <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> indicates that a generic error has occurred on the server.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotImplemented">
      <summary>
        <para>Equivalent to HTTP status 501. <see cref="F:System.Net.HttpStatusCode.NotImplemented" /> indicates the server does not support the requested function.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadGateway">
      <summary>
        <para>Equivalent to HTTP status 502. <see cref="F:System.Net.HttpStatusCode.BadGateway" /> indicates that an intermediate proxy server received 
   a bad response from another proxy or the origin server.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ServiceUnavailable">
      <summary>
        <para>Equivalent to HTTP status 503. <see cref="F:System.Net.HttpStatusCode.ServiceUnavailable" /> indicates that the server is temporarily 
   unavailable, usually due to high load or maintenance.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.GatewayTimeout">
      <summary>
        <para>Equivalent to HTTP status 504. <see cref="F:System.Net.HttpStatusCode.GatewayTimeout" /> indicates that an intermediate proxy server timed out while waiting for 
   a response from another proxy or the origin server.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.HttpVersionNotSupported">
      <summary>
        <para>Equivalent to HTTP status 505. <see cref="F:System.Net.HttpStatusCode.HttpVersionNotSupported" /> indicates that the requested HTTP version is not 
   supported by the server.</para>
      </summary>
    </member>
    <member name="T:System.Net.HttpVersion">
      <summary>
        <para>Defines the HTTP version numbers supported by the <see cref="T:System.Net.HttpWebRequest" /> and
<see cref="T:System.Net.HttpWebResponse" /> classes.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpVersion.Version10">
      <summary>
        <para>Defines a <see cref="T:System.Version" /> instance for HTTP 1.0.</para>
      </summary>
    </member>
    <member name="F:System.Net.HttpVersion.Version11">
      <summary>
        <para>Defines a <see cref="T:System.Version" /> instance for HTTP 1.1.</para>
      </summary>
    </member>
    <member name="T:System.Net.HttpWebResponse">
      <summary>
        <para>Provides an HTTP-specific implementation of the
   <see cref="T:System.Net.WebResponse" />
   class.</para>
      </summary>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseStream">
      <summary>
        <para>Gets the stream used to read the body of the response from the
      server.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.IO.Stream" /> containing the body of the response.</para>
      </returns>
    </member>
    <member name="M:System.Net.HttpWebResponse.Close">
      <summary>
        <para>Closes the response stream.</para>
      </summary>
    </member>
    <member name="M:System.Net.HttpWebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.HttpWebResponse" />
class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</para>
      </summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> containing the information required to serialize the new <see cref="T:System.Net.HttpWebRequest" /> .</param>
      <param name=" streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> containing the source of the serialized stream associated with the new <see cref="T:System.Net.HttpWebRequest" /> .</param>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseHeader(System.String)">
      <summary>
        <para> Gets a specified header contents that was returned with the response.
      </para>
      </summary>
      <param name="headerName">The header value to return. </param>
      <returns>
        <para> The contents of the specified header.
      </para>
      </returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.Cookies">
      <summary>
        <para>Gets or sets the cookies associated with this request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.Headers">
      <summary>
        <para>Gets
      the headers associated with this response from the server.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentLength">
      <summary>
        <para>Gets the length of the content returned by the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentEncoding">
      <summary>
        <para>Gets the
      method used to encode the body of the response.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentType">
      <summary>
        <para> Gets the content type of the
      response.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.CharacterSet">
      <summary>
        <para>Gets the character set of the response. </para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.Server">
      <summary>
        <para> Gets the name of the server that sent the response.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.LastModified">
      <summary>
        <para>Gets the last
      date and time that the contents of the response were modified.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusCode">
      <summary>
        <para> Gets the status of the response.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusDescription">
      <summary>
        <para> Gets the status description returned with the response.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.ProtocolVersion">
      <summary>
        <para> Gets
      the version of the HTTP protocol used in the response.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.ResponseUri">
      <summary>
        <para> Gets the URI of the Internet resource
      that responded to the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.Method">
      <summary>
        <para> Gets the method used to return the response.
      </para>
      </summary>
    </member>
    <member name="T:System.Net.IAuthenticationModule">
      <summary>
        <para>Provides the base authentication interface for Web client authentication
      modules.</para>
      </summary>
    </member>
    <member name="M:System.Net.IAuthenticationModule.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)">
      <summary>
        <para>Returns an instance of the <see cref="T:System.Net.Authorization" /> class in respose to an 
   authentication challenge from a server.</para>
      </summary>
      <param name="challenge">The authentication challenge sent by the server.</param>
      <param name=" request">The <see cref="T:System.Net.WebRequest" /> instance associated with the challenge.</param>
      <param name=" credentials">The credentials associated with the challenge.</param>
      <returns>
        <para>An <see cref="T:System.Net.Authorization" /> instance containing the authorization message for 
   the request, or <see langword="null " />if the challenge cannot be handled.</para>
      </returns>
    </member>
    <member name="M:System.Net.IAuthenticationModule.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)">
      <summary>
        <para>Returns an instance of the <see cref="T:System.Net.Authorization" /> class for an
   authentication request to a server.</para>
      </summary>
      <param name="request">The <see cref="T:System.Net.WebRequest" /> instance associated with the authentication request.</param>
      <param name="credentials">The credentials associated with the authentication request.</param>
      <returns>
        <para>An <see cref="T:System.Net.Authorization" /> instance containing the
   authorization message for the request.</para>
      </returns>
    </member>
    <member name="P:System.Net.IAuthenticationModule.CanPreAuthenticate">
      <summary>
        <para> Gets a value indicating whether the authentication module supports
       preauthentication.</para>
      </summary>
    </member>
    <member name="P:System.Net.IAuthenticationModule.AuthenticationType">
      <summary>
        <para>Gets the authentication type provided by this authentication
      module.</para>
      </summary>
    </member>
    <member name="T:System.Net.ICertificatePolicy">
      <summary>
        <para>Validates
       a server certificate.</para>
      </summary>
    </member>
    <member name="M:System.Net.ICertificatePolicy.CheckValidationResult(System.Net.ServicePoint,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.WebRequest,System.Int32)">
      <summary>
        <para>Validates a server certificate.</para>
      </summary>
      <param name="srvPoint">The <see cref="T:System.Net.ServicePoint" /> that will use the certificate.</param>
      <param name="certificate">The certificate to validate.</param>
      <param name="request">The request that received the certificate.</param>
      <param name="certificateProblem">The problem encountered when using the certificate.</param>
      <returns>
        <para>
          <see langword="true " />if the certificate should be 
    honored; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="F:System.Net.WebRequestPrefixElement.Prefix">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Net.WebRequestPrefixElement.Creator">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Net.WebRequestPrefixElement.#ctor(System.String,System.Net.IWebRequestCreate)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Net.HttpContinueDelegate">
      <summary>
        <para> Represents the method that notifies callers when a continue response is
      received by the client.
      </para>
      </summary>
      <param name="StatusCode">The numeric value of the HTTP status from the server. </param>
      <param name="httpHeaders">The headers returned with the 100-continue response from the server.</param>
    </member>
    <member name="T:System.Net.IPAddress">
      <summary>
        <para>Provides an Internet Protocol (IP) address.</para>
      </summary>
    </member>
    <member name="F:System.Net.IPAddress.Any">
      <summary>
        <para>Provides an IP address indicating that the server should listen for client activity on
      all network interfaces. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Net.IPAddress.Loopback">
      <summary>
        <para> Provides the IP loopback address. This field is
      read-only.</para>
      </summary>
    </member>
    <member name="F:System.Net.IPAddress.Broadcast">
      <summary>
        <para> Provides the IP broadcast address. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Net.IPAddress.None">
      <summary>
        <para>Provides an IP address indicating that no network interface
      should be used. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Int64)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.IPAddress" />
class with the specified
address.</para>
      </summary>
      <param name="newAddress">The integer value of the IP address.</param>
    </member>
    <member name="M:System.Net.IPAddress.Parse(System.String)">
      <summary>
        <para>Converts an IP address string to an <see cref="T:System.Net.IPAddress" />
instance.</para>
      </summary>
      <param name="ipString">A string containing an IP address in dotted-quad notation (for example, "192.168.1.2").</param>
      <returns>
        <para>An <see cref="T:System.Net.IPAddress" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Net.IPAddress.ToString">
      <summary>
        <para> Converts an Internet address to standard dotted-quad format.</para>
      </summary>
      <returns>
        <para>A string containing the IP address in dotted-quad format (for example, "192.168.1.2").</para>
      </returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
      <summary>
        <para>Converts a long value from host byte order to network byte order.</para>
      </summary>
      <param name="host">The number to convert expressed in host byte order.</param>
      <returns>
        <para>A long value expressed in network byte order.</para>
      </returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
      <summary>
        <para>Converts an integer value from host byte order to network byte order.</para>
      </summary>
      <param name="host">The number to convert expressed in host byte order.</param>
      <returns>
        <para>An integer value expressed in network byte order.</para>
      </returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
      <summary>
        <para>Converts a short value from host byte order to network byte order.</para>
      </summary>
      <param name="host">The number to convert expressed in host byte order.</param>
      <returns>
        <para>A short value expressed in network byte order.</para>
      </returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
      <summary>
        <para>Converts a long value from network byte order to host byte order.</para>
      </summary>
      <param name="network">The number to convert expressed in network byte order.</param>
      <returns>
        <para>A long value expressed in host byte order.</para>
      </returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
      <summary>
        <para>Converts an integer value from network byte order to host byte order.</para>
      </summary>
      <param name="network">The number to convert expressed in network byte order.</param>
      <returns>
        <para>An integer value expressed in host byte order.</para>
      </returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
      <summary>
        <para>Converts a short value from network byte order to host byte order.</para>
      </summary>
      <param name="network">The number to convert expressed in network byte order.</param>
      <returns>
        <para>A short value expressed in host byte order.</para>
      </returns>
    </member>
    <member name="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
      <summary>
        <para> Indicates whether the specified IP address is the loopback address.</para>
      </summary>
      <param name="address">An IP address.</param>
      <returns>
        <para>
          <see langword="true " />if 
<paramref name="address " /> is the loopback address; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.IPAddress.Equals(System.Object)">
      <summary>
        <para>Compares two IP addresses.</para>
      </summary>
      <param name="comparand">An <see cref="T:System.Net.IPAddress" /> instance to compare to the current instance.</param>
      <returns>
        <para>
          <see langword="true" /> if the two address are equal; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.IPAddress.GetHashCode">
      <summary>
        <para>Returns a hash value for an IP address.</para>
      </summary>
      <returns>
        <para> An integer hash value.</para>
      </returns>
    </member>
    <member name="P:System.Net.IPAddress.Address">
      <summary>
        <para>An Internet Protocol (IP) address.</para>
      </summary>
    </member>
    <member name="P:System.Net.IPAddress.AddressFamily">
      <summary>
        <para>Specifies the address family of the IP address.</para>
      </summary>
    </member>
    <member name="T:System.Net.IPEndPoint">
      <summary>
        <para> Represents a network endpoint as an IP address and a port number.</para>
      </summary>
    </member>
    <member name="F:System.Net.IPEndPoint.MinPort">
      <summary>
        <para>Specifies the minimum value that can be assigned to the <see cref="P:System.Net.IPEndPoint.Port" /> property. This field is
   read-only.</para>
      </summary>
    </member>
    <member name="F:System.Net.IPEndPoint.MaxPort">
      <summary>
        <para> Specifies the maximum value that can be assigned to the <see cref="P:System.Net.IPEndPoint.Port" /> property. This field is
   read-only.</para>
      </summary>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.IPEndPoint" /> class with the specified address and port
   number.</para>
      </summary>
      <param name="address">The IP address of the Internet host.</param>
      <param name="port">The port number associated with the address, or 0 to specify any available port.</param>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.IPEndPoint" /> class with the specified address and port number.</para>
      </summary>
      <param name="address">An <see cref="T:System.Net.IPAddress" />.</param>
      <param name="port">The port number associated with <paramref name="address" /> .</param>
    </member>
    <member name="M:System.Net.IPEndPoint.ToString">
      <summary>
        <para>Returns the IP address and port number for the specified endpoint.</para>
      </summary>
      <returns>
        <para>A string containing the IP address, in dotted-quad notation, and the port number for the
      specified endpoint (for example, 192.168.1.2:23).</para>
      </returns>
    </member>
    <member name="M:System.Net.IPEndPoint.Serialize">
      <summary>
        <para>Serializes endpoint information into a <see cref="T:System.Net.SocketAddress" /> instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Net.SocketAddress" /> instance containing the socket address for the endpoint.</para>
      </returns>
    </member>
    <member name="M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)">
      <summary>
        <para> Creates an endpoint from a socket address.</para>
      </summary>
      <param name="socketAddress">The <see cref="T:System.Net.SocketAddress" /> to use for the endpoint.</param>
      <returns>
        <para>An <see cref="T:System.Net.EndPoint" /> instance using the specified socket address.</para>
      </returns>
    </member>
    <member name="P:System.Net.IPEndPoint.AddressFamily">
      <summary>
        <para>Gets the Internet Protocol (IP) address family.</para>
      </summary>
    </member>
    <member name="P:System.Net.IPEndPoint.Address">
      <summary>
        <para>Gets or sets the IP address of the endpoint.</para>
      </summary>
    </member>
    <member name="P:System.Net.IPEndPoint.Port">
      <summary>
        <para>Gets or sets the TCP port number of the endpoint.</para>
      </summary>
    </member>
    <member name="T:System.Net.IPHostEntry">
      <summary>
        <para>Provides a container class for Internet host address information.</para>
      </summary>
    </member>
    <member name="P:System.Net.IPHostEntry.HostName">
      <summary>
        <para> Gets or sets the DNS
      name of the host.</para>
      </summary>
    </member>
    <member name="P:System.Net.IPHostEntry.Aliases">
      <summary>
        <para>Gets or sets a list of aliases associated with a host.</para>
      </summary>
    </member>
    <member name="P:System.Net.IPHostEntry.AddressList">
      <summary>
        <para>Gets or sets a list of IP addresses associated with a host.</para>
      </summary>
    </member>
    <member name="T:System.Net.IWebProxy">
      <summary>
        <para>Provides the base interface for implementation of proxy
 access for the <see cref="T:System.Net.WebRequest" />
 class. </para>
      </summary>
    </member>
    <member name="M:System.Net.IWebProxy.GetProxy(System.Uri)">
      <summary>
        <para> Returns the URI of a proxy.</para>
      </summary>
      <param name="destination">A <see cref="T:System.Uri" /> specifying the requested Internet resource.</param>
      <returns>
        <para>A <see cref="T:System.Uri" />
containing the URI of the proxy used to contact
<paramref name="destination" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.IWebProxy.IsBypassed(System.Uri)">
      <summary>
        <para>Indicates that the proxy should not be used for the specified host.</para>
      </summary>
      <param name="host">The <see cref="T:System.Uri" /> of the host to check for proxy use.</param>
      <returns>
        <para>
          <see langword="true " />if the proxy server should not be used for <paramref name="host" />;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Net.IWebProxy.Credentials">
      <summary>
        <para> The credentials to submit to the proxy server for authentication.</para>
      </summary>
    </member>
    <member name="T:System.Net.NetworkAccess">
      <summary>
        <para>Specifies network access permissions.</para>
      </summary>
    </member>
    <member name="F:System.Net.NetworkAccess.Accept">
      <summary>
        <para> Indicates that the application is allowed to accept connections from the Internet on a local resource.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.NetworkAccess.Connect">
      <summary>
        <para> Indicates that the application is allowed to connect to specific Internet resources.
      </para>
      </summary>
    </member>
    <member name="T:System.Net.ProtocolViolationException">
      <summary>
        <para>The exception that is thrown when an error is made while using a network
      protocol.</para>
      </summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.ProtocolViolationException" />class.</para>
      </summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.ProtocolViolationException" />
 class with the specified message.</para>
      </summary>
      <param name="message">The error message string.</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.ProtocolViolationException" /> class from the specified specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</para>
      </summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> containing the information required to serialize the new <see cref="T:System.Net.ProtocolViolationException" /> .</param>
      <param name=" streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> containing the source of the serialized stream associated with the new <see cref="T:System.Net.ProtocolViolationException" /> .</param>
    </member>
    <member name="T:System.Net.ServicePoint">
      <summary>
        <para>Provides connection management for HTTP connections.</para>
      </summary>
    </member>
    <member name="M:System.Net.ServicePoint.GetHashCode">
      <summary>
        <para> Gets the hash code for the <see cref="T:System.Net.ServicePoint" /> .</para>
      </summary>
      <returns>
        <para>The hash code for the <see cref="T:System.Net.ServicePoint" /> .</para>
      </returns>
    </member>
    <member name="P:System.Net.ServicePoint.Address">
      <summary>
        <para> Gets the URI of the <see cref="T:System.Net.ServicePoint" />.
   </para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePoint.MaxIdleTime">
      <summary>
        <para> Gets or sets the amount of time the <see cref="T:System.Net.ServicePoint" /> can 
   remain idle (unconnected to a host).
   </para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePoint.IdleSince">
      <summary>
        <para> Gets the date and time that the <see cref="T:System.Net.ServicePoint" /> was last connected to a host.
   </para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePoint.ProtocolVersion">
      <summary>
        <para> Gets the version of the HTTP protocol that the <see cref="T:System.Net.ServicePoint" />uses.
   </para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionName">
      <summary>
        <para> Gets the connection group name established by the <see cref="T:System.Net.WebRequest" /> that created the connection.
   </para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionLimit">
      <summary>
        <para> Gets or sets the maximum number of connections allowed on this <see cref="T:System.Net.ServicePoint" />.
   </para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePoint.CurrentConnections">
      <summary>
        <para> Gets the number of connections associated with this
   <see cref="T:System.Net.ServicePoint" />.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePoint.Certificate">
      <summary>
        <para> Gets the certificate received for this <see cref="T:System.Net.ServicePoint" />.
   </para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePoint.ClientCertificate">
      <summary>
        <para> Gets the last client certificate sent to the server.</para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePoint.SupportsPipelining">
      <summary>
        <para> Indicates whether the <see cref="T:System.Net.ServicePoint" /> supports pipelined connections.
   </para>
      </summary>
    </member>
    <member name="T:System.Net.ServicePointManager">
      <summary>
        <para>Manages the collection of <see cref="T:System.Net.ServicePoint" /> instances.</para>
      </summary>
    </member>
    <member name="F:System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit">
      <summary>
        <para> The default number of nonpersistent connections (4) allowed on a <see cref="T:System.Net.ServicePoint" /> connected to an HTTP/1.0 
   or later server. This field is constant.
   </para>
      </summary>
    </member>
    <member name="F:System.Net.ServicePointManager.DefaultPersistentConnectionLimit">
      <summary>
        <para> The default number of persistent connections (2) allowed on a <see cref="T:System.Net.ServicePoint" /> connected to an 
   HTTP/1.1 or later server. This field is constant.
   </para>
      </summary>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.Uri)">
      <summary>
        <para>Finds an existing <see cref="T:System.Net.ServicePoint" /> or creates a new <see cref="T:System.Net.ServicePoint" /> to manage communications with the specified <see cref="T:System.Uri" />
.</para>
      </summary>
      <param name="address">The <see cref="T:System.Uri" /> of the Internet resource to contact.</param>
      <returns>
        <para>The <see cref="T:System.Net.ServicePoint" /> that manages communications
   for the request.</para>
      </returns>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)">
      <summary>
        <para>Finds an existing <see cref="T:System.Net.ServicePoint" /> or creates a new <see cref="T:System.Net.ServicePoint" /> to manage communications
   with the specified URI.</para>
      </summary>
      <param name="uriString">The URI of the Internet resource to be contacted.</param>
      <param name="proxy">Proxy data for this request.</param>
      <returns>
        <para>The <see cref="T:System.Net.ServicePoint" /> that manages communications
   for the request.</para>
      </returns>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)">
      <summary>
        <para>Finds an existing <see cref="T:System.Net.ServicePoint" /> or creates a new <see cref="T:System.Net.ServicePoint" /> to manage communications with the specified <see cref="T:System.Uri" />
instance.</para>
      </summary>
      <param name="address">A <see cref="T:System.Uri" /> instance containing the address of the Internet resource to contact.</param>
      <param name="proxy">Proxy data for this request.</param>
      <returns>
        <para>The <see cref="T:System.Net.ServicePoint" /> that manages communications
   for the request.</para>
      </returns>
    </member>
    <member name="P:System.Net.ServicePointManager.MaxServicePoints">
      <summary>
        <para>Gets or sets the maximum number of <see cref="T:System.Net.ServicePoint" /> instances to maintain at any
   time.</para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePointManager.DefaultConnectionLimit">
      <summary>
        <para>The maximum number of concurrent connections allowed by a
   <see cref="T:System.Net.ServicePoint" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePointManager.MaxServicePointIdleTime">
      <summary>
        <para> Gets or sets the maximum idle time of a <see cref="T:System.Net.ServicePoint" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Net.ServicePointManager.CertificatePolicy">
      <summary>
        <para> Gets or sets policy for server certificates.</para>
      </summary>
    </member>
    <member name="T:System.Net.SocketAddress">
      <summary>
        <para>Stores serialized information from <see cref="T:System.Net.EndPoint" /> derived classes. </para>
      </summary>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Net.SocketAddress" /> class
   for the given address family.</para>
      </summary>
      <param name="family">An <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated value.</param>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Net.SocketAddress" /> class using the specified address
   family and buffer size.</para>
      </summary>
      <param name="family">An <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated value.</param>
      <param name=" size">The number of bytes to allocate for the underlying buffer.</param>
    </member>
    <member name="M:System.Net.SocketAddress.ToString">
      <summary>
        <para>Returns information about the socket address.</para>
      </summary>
      <returns>
        <para>A string containing information about the <see cref="T:System.Net.SocketAddress" />
. </para>
      </returns>
    </member>
    <member name="P:System.Net.SocketAddress.Family">
      <summary>
        <para>Gets the <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated value of the current
<see cref="T:System.Net.SocketAddress" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.SocketAddress.Size">
      <summary>
        <para>Gets the underlying buffer size of the <see cref="T:System.Net.SocketAddress" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.SocketAddress.Item(System.Int32)">
      <summary>
        <para>Gets or sets the specified index element in the
      underlying buffer.</para>
      </summary>
      <param name="offset">The array index element of the desired information</param>
    </member>
    <member name="T:System.Net.Sockets.SocketException">
      <summary>
        <para>The exception that is thrown when a socket error occurs.</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException" /> class with the last operating system error code.</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException" /> class with the specified 
   error code.</para>
      </summary>
      <param name="errorCode">The error code indicating the error that occurred.</param>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException" /> class from the specified instances of the
<see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> classes.</para>
      </summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance containing the information required to serialize the new <see cref="T:System.Net.Sockets.SocketException" /> instance.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> containing the source of the serialized stream associated with the new <see cref="T:System.Net.Sockets.SocketException" /> instance.</param>
    </member>
    <member name="P:System.Net.Sockets.SocketException.ErrorCode">
      <summary>
        <para>Gets the error code associated with this exception.</para>
      </summary>
    </member>
    <member name="T:System.Net.SocketPermissionAttribute">
      <summary>
        <para> Specifies security actions to
      control <see cref="T:System.Net.Sockets.Socket" />
      connections. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.SocketPermissionAttribute" /> class with the specified
<see cref="T:System.Security.Permissions.SecurityAction" /> value.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" qualify="true" /> values.</param>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new instance of the <see cref="T:System.Net.SocketPermission" /> class.</para>
      </summary>
      <returns>
        <para>An instance of the <see cref="T:System.Net.SocketPermission" /> class corresponding to the security declaration.</para>
      </returns>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Access">
      <summary>
        <para> Gets or sets the network access method allowed
      by this <see cref="T:System.Net.SocketPermissionAttribute" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Host">
      <summary>
        <para> Gets or sets the DNS host name or IP
      address specified by this <see cref="T:System.Net.SocketPermissionAttribute" />
      .</para>
      </summary>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Transport">
      <summary>
        <para> Gets or sets the <see cref="T:System.Net.TransportType" /> specified by this <see cref="T:System.Net.SocketPermissionAttribute" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Port">
      <summary>
        <para> Gets or sets the port number associated
      with this <see cref="T:System.Net.SocketPermissionAttribute" /> .</para>
      </summary>
    </member>
    <member name="T:System.Net.SocketPermission">
      <summary>
        <para> Controls rights to make or accept connections on a transport address.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.SocketPermission.AllPorts">
      <summary>
        <para> Defines a constant representing all ports.
      </para>
      </summary>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.SocketPermission" /> class that allows unrestricted access to the <see cref="T:System.Net.Sockets.Socket" /> or
   disallows access to the <see cref="T:System.Net.Sockets.Socket" />.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.SocketPermission" /> class for the given transport address with the specified permission.</para>
      </summary>
      <param name="access">One of the <see cref="T:System.Net.NetworkAccess" /> values.</param>
      <param name="transport">One of the <see cref="T:System.Net.TransportType" /> values.</param>
      <param name="hostName">The host name for the transport address.</param>
      <param name="portNumber">The port number for the transport address.</param>
    </member>
    <member name="M:System.Net.SocketPermission.AddPermission(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>
        <para>Adds a permission to the set of permissions for a transport address.</para>
      </summary>
      <param name="access">One of the <see cref="T:System.Net.NetworkAccess" /> values.</param>
      <param name="transport">One of the <see cref="T:System.Net.TransportType" /> values.</param>
      <param name="hostName">The host name for the transport address.</param>
      <param name="portNumber">The port number for the transport address.</param>
    </member>
    <member name="M:System.Net.SocketPermission.IsUnrestricted">
      <summary>
        <para>Checks the overall permission state of the object.</para>
      </summary>
      <returns>
        <see langword="true " />if the <see cref="T:System.Net.SocketPermission" /> instance was created 
    with the <see langword="Unrestricted " />value from <see cref="T:System.Security.Permissions.PermissionState" />; otherwise, <see langword="false" />.
 </returns>
    </member>
    <member name="M:System.Net.SocketPermission.Copy">
      <summary>
        <para> Creates
      a copy of a <see cref="T:System.Net.SocketPermission" /> instance.
      </para>
      </summary>
      <returns>
        <para> A new instance of the <see cref="T:System.Net.SocketPermission" /> class that is a copy of the current instance.
   </para>
      </returns>
    </member>
    <member name="M:System.Net.SocketPermission.Union(System.Security.IPermission)">
      <summary>
        <para>Returns the logical union between two <see cref="T:System.Net.SocketPermission" /> instances.</para>
      </summary>
      <param name="target">The <see cref="T:System.Net.SocketPermission" /> instance to combine with the current instance.</param>
      <returns>
        <para>The <see cref="T:System.Net.SocketPermission" /> instance that represents the union
   of two <see cref="T:System.Net.SocketPermission" /> instances.</para>
      </returns>
    </member>
    <member name="M:System.Net.SocketPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para>Returns the logical intersection between two <see cref="T:System.Net.SocketPermission" /> instances.</para>
      </summary>
      <param name="target">The <see cref="T:System.Net.SocketPermission" /> instance to intersect with the current instance.</param>
      <returns>
        <para>The <see cref="T:System.Net.SocketPermission" />
instance that represents the intersection of two <see cref="T:System.Net.SocketPermission" /> instances. If the
intersection is empty, the method returns a <see langword="null " />reference
(Nothing in Visual Basic). If the <paramref name="target " />parameter is
<see langword="null " /> (Nothing in Visual Basic) the method returns 
<see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Net.SocketPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para>Determines if the current permission is a subset of the
      specified permission.</para>
      </summary>
      <param name="target">A <see cref="T:System.Net.SocketPermission" /> that is to be tested for the subset relationship.</param>
      <returns>
   If the <paramref name="target " />parameter is <see langword="null " />(Nothing in Visual Basic), this method returns <see langword="true " />if
   the current instance defines no permissions, <see langword="false " />otherwise.
   If target is not <see langword="null" />, this method returns <see langword="true " />if the current instance defines a subset of target permissions, and
<see langword="false " />otherwise.
</returns>
    </member>
    <member name="M:System.Net.SocketPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para>Reconstructs a <see cref="T:System.Net.SocketPermission" /> instance for an XML encoding.</para>
      </summary>
      <param name="securityElement">The XML encoding used to reconstruct the <see cref="T:System.Net.SocketPermission" /> instance.</param>
    </member>
    <member name="M:System.Net.SocketPermission.ToXml">
      <summary>
        <para>Creates an XML encoding of a <see cref="T:System.Net.SocketPermission" /> instance and its current state.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.SecurityElement" /> instance containing an XML-encoded
   representation of the <see cref="T:System.Net.SocketPermission" /> instance, including state
   information.</para>
      </returns>
    </member>
    <member name="P:System.Net.SocketPermission.ConnectList">
      <summary>
        <para>Gets a list of <see cref="T:System.Net.EndpointPermission" /> instances identifying the endpoints that can be connected to under this permission instance.</para>
      </summary>
    </member>
    <member name="P:System.Net.SocketPermission.AcceptList">
      <summary>
        <para>Gets a list of <see cref="T:System.Net.EndpointPermission" />
instances identifying the endpoints that can be accepted under this permission instance.</para>
      </summary>
    </member>
    <member name="T:System.Net.EndpointPermission">
      <summary>
        <para> Defines an endpoint that is authorized by a <see cref="T:System.Net.SocketPermission" />
instance.</para>
      </summary>
    </member>
    <member name="M:System.Net.EndpointPermission.ToString">
      <summary>
        <para>Returns a string that represents the current <see cref="T:System.Net.EndpointPermission" /> 
instance.</para>
      </summary>
      <returns>
        <para>A string that represents the current <see cref="T:System.Net.EndpointPermission" /> instance.</para>
      </returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Hostname">
      <summary>
        <para> Gets the DNS host name or IP address of the server
      associated with this endpoint.</para>
      </summary>
    </member>
    <member name="P:System.Net.EndpointPermission.Transport">
      <summary>
        <para> Gets the transport type associated with this endpoint.</para>
      </summary>
    </member>
    <member name="P:System.Net.EndpointPermission.Port">
      <summary>
        <para> Gets the network port number associated with this endpoint.</para>
      </summary>
    </member>
    <member name="T:System.Net.TransportType">
      <summary>
        <para> Defines transport types for the <see cref="T:System.Net.SocketPermission" /> and 
<see cref="T:System.Net.Sockets.Socket" /> classes.
   </para>
      </summary>
    </member>
    <member name="F:System.Net.TransportType.Udp">
      <summary>
        <para> UDP transport.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.TransportType.Connectionless">
      <summary>
        <para>The transport type is connectionless, such as UDP.</para>
      </summary>
    </member>
    <member name="F:System.Net.TransportType.Tcp">
      <summary>
        <para> TCP transport.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.TransportType.ConnectionOriented">
      <summary>
   The transport is connection oriented, such as TCP.
</summary>
    </member>
    <member name="F:System.Net.TransportType.All">
      <summary>
        <para> All transport types.
      </para>
      </summary>
    </member>
    <member name="T:System.Net.WebClient">
      <summary>
        <para>Provides common methods for sending data to and receiving data from a
      resource identified by a URI. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebClient.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebClient" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebClient.DownloadData(System.String)">
      <summary>
        <para>Downloads data from a resource with the specified URI.</para>
      </summary>
      <param name="address">The URI to download data from.</param>
      <returns>
        <para> A byte array containing the data downloaded from the 
      resource specified in the <paramref name="address" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebClient.DownloadFile(System.String,System.String)">
      <summary>
        <para>Downloads data from a resource with the specified URI to a local file.</para>
      </summary>
      <param name="address"> The URI to download data from.</param>
      <param name=" fileName">The name of the local file to receive the data.</param>
    </member>
    <member name="M:System.Net.WebClient.OpenRead(System.String)">
      <summary>
        <para>Opens a readable stream for the data downloaded from a resource with the specified URI.</para>
      </summary>
      <param name="address">The URI to download data from.</param>
      <returns>
        <para> A <see cref="T:System.IO.Stream" /> used to read data from
   a resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.String)">
      <summary>
        <para> Opens a stream for writing data to the specified resource.</para>
      </summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <returns>
        <para> A <see cref="T:System.IO.Stream" /> used to write data to the resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.String,System.String)">
      <summary>
        <para> Opens a stream for writing data to the specified resource with using the specified method.</para>
      </summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name=" method">The method used to send the data to the resource.</param>
      <returns>
        <para> A <see cref="T:System.IO.Stream" /> used to write data to the resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.String,System.Byte[])">
      <summary>
        <para> Uploads a data buffer to a resource
      identified by a URI.</para>
      </summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name=" data">The data buffer to send to the resource.</param>
      <returns>
        <para> An array of bytes containing the body of any response from the
      resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])">
      <summary>
        <para> Uploads a data buffer to the specified resource
      using the specified method.</para>
      </summary>
      <param name="address">The URI of the resource to receive the data.</param>
      <param name="method">The method verb used to send the data to the resource.</param>
      <param name=" data">The data buffer to send to the resource.</param>
      <returns>
        <para> An array of bytes containing the body of any response from the
      resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.String,System.String)">
      <summary>
        <para> Uploads the specified local file to a resource
      with the specified URI.</para>
      </summary>
      <param name="address">The URI of the resource to receive the file.</param>
      <param name="fileName">The file to send to the resource.</param>
      <returns>
        <para> An array of bytes containing the body of any response from the
      resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)">
      <summary>
        <para> Uploads the specified local file to the specified resource
      using the specified method.</para>
      </summary>
      <param name="address">The URI of the resource to receive the file.</param>
      <param name="method">The method verb used to send the file to the resource.</param>
      <param name="fileName">The file to send to the resource.</param>
      <returns>
        <para> An array of bytes containing the body of any response from the
      resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
        <para> Uploads the specified name/value collection to the specified resource
      identified by a URI.</para>
      </summary>
      <param name="address">The URI of the resource to receive the collection.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection" /> to send to the resource.</param>
      <returns>
        <para> An array of bytes containing the body of any response from the
      resource.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
        <para> Uploads the specified name/value collection to the
      specified resource with the specified URI using the specified method.</para>
      </summary>
      <param name="address">The URI of the resource to receive the collection.</param>
      <param name="method">The method verb used to send the file to the resource.</param>
      <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection" /> to send to the resource.</param>
      <returns>
        <para> An array of bytes containing the body of any response from the
      resource.</para>
      </returns>
    </member>
    <member name="P:System.Net.WebClient.BaseAddress">
      <summary>
        <para>Gets or sets the base URI for requests made by a <see cref="T:System.Net.WebClient" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.WebClient.Credentials">
      <summary>
        <para>Gets or sets the network credentials used to
      authenticate the request with the Internet resource.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebClient.Headers">
      <summary>
        <para>Gets or sets a collection of header name/value pairs
      associated with the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebClient.QueryString">
      <summary>
        <para>Gets or sets a collection of query name/value pairs
      associated with the request.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebClient.ResponseHeaders">
      <summary>
        <para> Gets a collection of header name/value pairs
      associated with the response.</para>
      </summary>
    </member>
    <member name="T:System.Net.WebException">
      <summary>
        <para>The exception that is thrown when an error occurs while
      accessing the network through a pluggable protocol.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error
   message.</para>
      </summary>
      <param name="message">The text of the error message.</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error
   message and nested exception.</para>
      </summary>
      <param name="message">The text of the error message.</param>
      <param name="innerException">A nested exception.</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Net.WebExceptionStatus)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error
   message and status.</para>
      </summary>
      <param name="message">The text of the error message.</param>
      <param name="status">One of the <see cref="T:System.Net.WebExceptionStatus" /> values.</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception,System.Net.WebExceptionStatus,System.Net.WebResponse)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error
   message, nested exception, status, and response.</para>
      </summary>
      <param name="message">The text of the error message.</param>
      <param name="innerException">A nested exception.</param>
      <param name="status">One of the <see cref="T:System.Net.WebExceptionStatus" /> values.</param>
      <param name="response">A <see cref="T:System.Net.WebResponse" /> instance containing the response from the remote host.</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebException" />
class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</para>
      </summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> containing the information required to serialize the new <see cref="T:System.Net.WebException" /> .</param>
      <param name=" streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> containing the source of the serialized stream associated with the new <see cref="T:System.Net.WebException" /> .</param>
    </member>
    <member name="P:System.Net.WebException.Status">
      <summary>
        <para> Gets the status of the response.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.WebException.Response">
      <summary>
        <para> Gets the response that the remote host returned.</para>
      </summary>
    </member>
    <member name="T:System.Net.WebExceptionStatus">
      <summary>
        <para> Defines status codes for the <see cref="T:System.Net.WebException" /> class.
   </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Success">
      <summary>
        <para> No error was encountered. 
   </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.NameResolutionFailure">
      <summary>
        <para>
       The name resolver service could not resolve the host name.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectFailure">
      <summary>
        <para>
       The remote service point could not be contacted at the transport level.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ReceiveFailure">
      <summary>
        <para>
       A complete response was not received from the remote server.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SendFailure">
      <summary>
        <para>
       A complete request could not be sent to the remote server.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestCanceled">
      <summary>
        <para> The request was canceled, the <see cref="M:System.Net.WebRequest.Abort" qualify="true" /> method was called, or an unclassifiable 
   error occurred. This is the default value for <see cref="P:System.Net.WebException.Status" /> .
   </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProtocolError">
      <summary>
        <para>
       The response received from the server was complete but indicated a
       protocol-level error. For example, an HTTP protocol error such as 401 Access
       Denied would use this status.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectionClosed">
      <summary>
        <para>
       The connection was prematurely closed.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.TrustFailure">
      <summary>
        <para>
       A server certificate could not be validated.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SecureChannelFailure">
      <summary>
        <para>
       An error occurred in a secure channel link.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ServerProtocolViolation">
      <summary>
        <para>The server response was not a valid HTTP response.</para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.KeepAliveFailure">
      <summary>
        <para>The connection for a request that specifies the Keep-alive 
      header was closed unexpectedly.</para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Pending">
      <summary>
        <para> An internal asynchronous request is pending.</para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Timeout">
      <summary>
        <para>No response was received during the time-out period for a request.</para>
      </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProxyNameResolutionFailure">
      <summary>
        <para>The name resolver service could not resolve the proxy host name.</para>
      </summary>
    </member>
    <member name="T:System.Net.WebHeaderCollection">
      <summary>
        <para>Contains protocol headers associated with a
      request or response.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.AddWithoutValidate(System.String,System.String)">
      <summary>
        <para>Inserts a header into the collection without checking whether the header
      is on the restricted header list.</para>
      </summary>
      <param name="headerName">The header to add to the collection.</param>
      <param name="headerValue">The content of the header.</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.String,System.String)">
      <summary>
        <para>Inserts a new header with the specified name and value into the collection.</para>
      </summary>
      <param name="name">The header to add to the collection.</param>
      <param name=" value">The content of the header.</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.String)">
      <summary>
        <para>Inserts the specified header into the collection.</para>
      </summary>
      <param name="header">The header to add, with the name and value separated by a colon.</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Set(System.String,System.String)">
      <summary>
        <para> Sets the specified header to the specified value.
      </para>
      </summary>
      <param name="name">The header to set. </param>
      <param name=" value">The content of the header to set. </param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Remove(System.String)">
      <summary>
        <para>Removes the specified header from the collection.</para>
      </summary>
      <param name="name">The name of the header to remove from the collection.</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetValues(System.String)">
      <summary>
        <para> Gets an array of header values stored in a
      header.
      </para>
      </summary>
      <param name="header">The header to return. </param>
      <returns>
        <para> An array of header strings.
      </para>
      </returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.WebHeaderCollection" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.IsRestricted(System.String)">
      <summary>
        <para> Tests whether the specified HTTP header can be set.</para>
      </summary>
      <param name="headerName">The header to test.</param>
      <returns>
        <para>
          <see langword="true" /> if
   the header is restricted; otherwise <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebHeaderCollection" />
class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> classes.</para>
      </summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" />containing the information required to serialize the <see cref="T:System.Net.WebHeaderCollection" />.</param>
      <param name=" streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> containing the source of the serialized stream associated with the new <see cref="T:System.Net.WebHeaderCollection" />.</param>
    </member>
    <member name="T:System.Net.WebPermissionAttribute">
      <summary>
        <para> Specifies
      permission to access Internet resources. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebPermissionAttribute" /> class with a value that
   specifies the security actions that can be performed on this class.</para>
      </summary>
      <param name="action">
        <para>One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</para>
      </param>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new instance of the <see cref="T:System.Net.WebPermission" /> class.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Net.WebPermission" /> corresponding to the security declaration.</para>
      </returns>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Connect">
      <summary>
        <para>Gets or sets the URI connection string controlled by the
      current <see cref="T:System.Net.WebPermissionAttribute" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Accept">
      <summary>
        <para>Gets or sets the URI string accepted by the current
   <see cref="T:System.Net.WebPermissionAttribute" />.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.ConnectPattern">
      <summary>
        <para>Gets or sets a regular expression pattern that describes
      the URI connection controlled by the current <see cref="T:System.Net.WebPermissionAttribute" />
      .</para>
      </summary>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.AcceptPattern">
      <summary>
        <para>Gets or sets a regular expression pattern that describes
      the URI accepted by the current <see cref="T:System.Net.WebPermissionAttribute" />
      .</para>
      </summary>
    </member>
    <member name="T:System.Net.WebPermission">
      <summary>
        <para> Controls rights to access an HTTP Internet resources.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Net.WebPermission" />
class that passes all demands
or fails all demands.</para>
      </summary>
      <param name="state">A <see cref="T:System.Security.Permissions.PermissionState" /> value.</param>
    </member>
    <member name="M:System.Net.WebPermission.#ctor">
      <summary>
        <para> Creates a new instance of the <see cref="T:System.Net.WebPermission" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.WebPermission" />
class with the specified access
rights for the specified URI regular expression.</para>
      </summary>
      <param name="access">
        <para>A <see cref="T:System.Net.NetworkAccess" /> value indicating what kind of access to grant to the specified URI. <see cref="F:System.Net.NetworkAccess.Accept" /> indicates that the application is allowed to accept connections from the Internet on a local resource. <see cref="F:System.Net.NetworkAccess.Connect" /> indicates that the application is allowed to connect to specific Internet resources.</para>
      </param>
      <param name=" uriRegex">A regular expression describing the URI to which acess is to be granted. </param>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.WebPermission" />
class with the
specified access rights for the specified URI.</para>
      </summary>
      <param name="access">
        <para>A NetworkAccess value indicating what kind of access to grant to the specified URI. <see cref="F:System.Net.NetworkAccess.Accept" /> indicates that the application is allowed to accept connections from the Internet on a local resource. <see cref="F:System.Net.NetworkAccess.Connect" /> indicates that the application is allowed to connect to specific Internet resources.</para>
      </param>
      <param name=" uriString">A URI string to which access rights are granted. </param>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)">
      <summary>
        <para>Adds the specified URI string with the specified access
      rights to the current <see cref="T:System.Net.WebPermission" />
      .</para>
      </summary>
      <param name="access">A <see cref="T:System.Net.NetworkAccess" /> specifying the access rights granted to the URI</param>
      <param name="uriString">A string describing the URI to which access rights are granted.</param>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>
        <para>Adds the specified URI with the specified access rights to the current <see cref="T:System.Net.WebPermission" />
.</para>
      </summary>
      <param name="access">A NetworkAccess specifying the access rights granted to the URI.</param>
      <param name=" uriRegex">A regular expression describing the set of URI's to which access rights are granted. </param>
    </member>
    <member name="M:System.Net.WebPermission.IsUnrestricted">
      <summary>
        <para>Checks the overall permission state of the <see cref="T:System.Net.WebPermission" /> .</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Net.WebPermission" /> was created with the
<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /><see cref="T:System.Security.Permissions.PermissionState" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebPermission.Copy">
      <summary>
        <para> Creates a copy of a <see cref="T:System.Net.WebPermission" /> .
   </para>
      </summary>
      <returns>
        <para>A new instance of the <see cref="T:System.Net.WebPermission" /> class that has the same values as the original</para>
      </returns>
    </member>
    <member name="M:System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para>Determines whether the current <see cref="T:System.Net.WebPermission" /> is a subset of
   the specified object.</para>
      </summary>
      <param name="target">The <see cref="T:System.Net.WebPermission" /> to compare to the current <see cref="T:System.Net.WebPermission" /> .</param>
      <returns>
        <see langword="true " />if the
   current instance is a subset of the <paramref name="target " />parameter; otherwise,
<see langword="false" />. If the 
   target is a <see langword="null" /> reference (Nothing in Visual Basic), the
   method returns <see langword="true " />for an empty current permission and
<see langword="false " />otherwise.
</returns>
    </member>
    <member name="M:System.Net.WebPermission.Union(System.Security.IPermission)">
      <summary>
        <para>Returns the logical union between two instances of the
   <see cref="T:System.Net.WebPermission" /> class.</para>
      </summary>
      <param name="target">The <see cref="T:System.Net.WebPermission" /> to combine with the current <see cref="T:System.Net.WebPermission" /> .</param>
      <returns>
        <para>A <see cref="T:System.Net.WebPermission" /> that represents the union of the current instance
   and the <paramref name="target " />parameter. If either WebPermission is
<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />, the method returns a <see cref="T:System.Net.WebPermission" /> 
that is <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> . If the
target is <see langword="null" />, returns a copy of current <see cref="T:System.Net.WebPermission" /> .</para>
      </returns>
    </member>
    <member name="M:System.Net.WebPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para>Returns the logical intersection of two <see cref="T:System.Net.WebPermission" />
s.</para>
      </summary>
      <param name="target">The <see cref="T:System.Net.WebPermission" /> to compare with the current instance.</param>
      <returns>
   A new <see cref="T:System.Net.WebPermission" /> that represents the intersection of the current
   instance and the <paramref name="target " />parameter. If the intersection is empty, the
   method returns a <see langword="null" /> reference.
</returns>
    </member>
    <member name="M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para>Reconstructs a <see cref="T:System.Net.WebPermission" /> from
   an XML encoding. </para>
      </summary>
      <param name="securityElement">
        <para>The XML encoding from which to reconstruct the <see cref="T:System.Net.WebPermission" /> .</para>
      </param>
    </member>
    <member name="M:System.Net.WebPermission.ToXml">
      <summary>
        <para>Creates an XML encoding of a <see cref="T:System.Net.WebPermission" /> and its current state.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.SecurityElement" /> containing an XML-encoded
   representation of the <see cref="T:System.Net.WebPermission" /> , including state information.</para>
      </returns>
    </member>
    <member name="P:System.Net.WebPermission.ConnectList">
      <summary>
        <para>This property returns an enumeration of a
      single connect permissions held by this <see cref="T:System.Net.WebPermission" />. The
      possible objects types contained in the returned enumeration are <see cref="T:System.String" /> and <see cref="T:System.Text.RegularExpressions.Regex" qualify="true" />.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebPermission.AcceptList">
      <summary>
        <para>This property returns an enumeration of a single accept
      permissions held by this <see cref="T:System.Net.WebPermission" />. The possible objects types contained in the
      returned enumeration are <see cref="T:System.String" /> and <see cref="T:System.Text.RegularExpressions.Regex" qualify="true" />.</para>
      </summary>
    </member>
    <member name="T:System.Net.WebProxy">
      <summary>
        <para>Contains HTTP proxy settings for the <see cref="T:System.Net.WebRequest" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebProxy.#ctor">
      <summary>
        <para>Initializes an empty instance of the <see cref="T:System.Net.WebProxy" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class from the specified <see cref="T:System.Uri" /> 
.</para>
      </summary>
      <param name="Address">A <see cref="T:System.Uri" /> containing the address of the proxy server.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the <see cref="T:System.Uri" /> 
and bypass setting.</para>
      </summary>
      <param name="Address">A <see cref="T:System.Uri" /> containing the address of the proxy server.</param>
      <param name="BypassOnLocal">
        <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified <see cref="T:System.Uri" /> , bypass setting,
   and list of URIs to bypass.</para>
      </summary>
      <param name="Address">A <see cref="T:System.Uri" /> containing the address of the proxy server.</param>
      <param name="BypassOnLocal">
        <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
      <param name="BypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified <see cref="T:System.Uri" /> , bypass setting, list of URIs to bypass, and credentials.</para>
      </summary>
      <param name="Address">A <see cref="T:System.Uri" /> containing the address of the proxy server.</param>
      <param name="BypassOnLocal">
        <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
      <param name="BypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
      <param name=" Credentials">An <see cref="T:System.Net.ICredentials" /> to submit to the proxy server for authentication.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with
 the specified host and port number.</para>
      </summary>
      <param name="Host">The name of the proxy host.</param>
      <param name=" Port">The port number on <paramref name="Host " />to use.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI. </para>
      </summary>
      <param name="Address">The URI of the proxy server.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI and bypass setting.</para>
      </summary>
      <param name="Address">The URI of the proxy server.</param>
      <param name="BypassOnLocal">
        <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI, bypass setting, and list of URIs to bypass.</para>
      </summary>
      <param name="Address">The URI of the proxy server.</param>
      <param name="BypassOnLocal">
        <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
      <param name="BypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI, bypass setting, list of URIs to bypass, and credentials.</para>
      </summary>
      <param name="Address">The URI of the proxy server.</param>
      <param name="BypassOnLocal">
        <see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</param>
      <param name="BypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
      <param name="Credentials">An <see cref="T:System.Net.ICredentials" /> to submit to the proxy server for authentication. </param>
    </member>
    <member name="M:System.Net.WebProxy.GetProxy(System.Uri)">
      <summary>
        <para>Returns the proxied URI for a request.</para>
      </summary>
      <param name="destination">The <see cref="T:System.Uri" /> of the requested Internet resource.</param>
      <returns>
        <para>The <see cref="T:System.Uri" /> of the Internet resource, if the resource is on the 
 bypass list; otherwise, the <see cref="T:System.Uri" />
 of the proxy.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebProxy.IsBypassed(System.Uri)">
      <summary>
        <para> Indicates whether to use the proxy server for the specified host.</para>
      </summary>
      <param name="host">The <see cref="T:System.Uri" /> of the host to check for proxy use. </param>
      <returns>
        <para>
          <see langword="true " />if the proxy server should not be used
 for <paramref name="host" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebProxy.GetDefaultProxy">
      <summary>
        <para>Reads the Internet Explorer nondynamic proxy settings.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Net.WebProxy" />
instance containing the nondynamic proxy settings from Internet Explorer
5.5.</para>
      </returns>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
    </member>
    <member name="P:System.Net.WebProxy.Address">
      <summary>
        <para>Gets or sets the address of the proxy server.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebProxy.BypassProxyOnLocal">
      <summary>
        <para> Gets or sets a value indicating whether to
      bypass the proxy server for local addresses.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebProxy.BypassList">
      <summary>
        <para>Gets or sets an array of addresses that do not use the proxy server.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebProxy.Credentials">
      <summary>
        <para>Gets or sets the credentials to submit to the proxy server
 for authentication.</para>
      </summary>
    </member>
    <member name="P:System.Net.WebProxy.BypassArrayList">
      <summary>
        <para> Gets a list of addresses that do not use the proxy server.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection">
      <summary>
        <para> Defines a collection that stores <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> objects.
 </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />class.
   </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> class from another <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.
   </para>
      </summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> with which to initialize the new object. </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate[])">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> class from an array of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> objects.
   </para>
      </summary>
      <param name="value">The array of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> objects with which to initialize the new object. </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
        <para>Adds an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> with the
 specified value to the current
<see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> to add to the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</param>
      <returns>
        <para>The index into the current
 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> at which the new
 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])">
      <summary>
        <para>Copies the elements of an array of type
 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> to the end of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </summary>
      <param name="value">The array of type <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> containing the objects to add to the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />. </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>
        <para> Copies the elements of the
 specified <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> to the end of the
 current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.
 </para>
      </summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> containing the objects to add to the collection. </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
        <para>Gets a value indicating whether the current
 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> contains the specified <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> is contained in this collection;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[],System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />
values in the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> to a one-dimensional <see cref="T:System.Array" /> instance at the
specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> .</para>
      </param>
      <param name="index">The index into <paramref name="array" /> to begin copying.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
        <para>Returns the index of the specified <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> in the
 current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> specified by
 the <paramref name="value" /> parameter in the
<see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
        <para>Inserts a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> into the
 current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where <paramref name="value" /> should be inserted.</param>
      <param name=" value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> to insert.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through
      the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </summary>
      <returns>
        <para>An enumerator of the subelements of <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> you can use
   to iterate through the collection. </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
        <para> Removes a specific <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> from the current
<see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> to remove from the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode">
      <summary>
        <para> Builds a hash value based on all values contained
 in the current
 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </summary>
      <returns>
        <para>A hash value based on all values contained in the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the entry at the specified index of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the current <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator" /> class for the
 specified <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </summary>
      <param name="mappings">The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> to enumerate.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.MoveNext">
      <summary>
        <para>Advances the enumerator to the next element of the collection.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the enumerator was successfully advanced to the next element;
<see langword="false" /> if the enumerator has passed the end of the collection.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.Reset">
      <summary>
        <para>Sets the enumerator to its initial position, which is before
      the first element in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.Current">
      <summary>
        <para>Gets the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> in the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />.</para>
      </summary>
    </member>
    <member name="M:System.Net.ConnectionGroup.Associate(System.WeakReference)">
    </member>
    <member name="M:System.Net.ConnectionGroup.Disassociate(System.WeakReference)">
    </member>
    <member name="M:System.Net.ConnectionGroup.FindConnection(System.String)">
    </member>
    <member name="P:System.Net.ConnectionGroup.Address">
    </member>
    <member name="T:System.Net.Sockets.NetworkStream">
      <summary>
        <para> Provides the underlying stream of data for network access.
      </para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Net.Sockets.NetworkStream" /> class for the specified <see cref="T:System.Net.Sockets.Socket" />.</para>
      </summary>
      <param name="socket">The <see cref="T:System.Net.Sockets.Socket" /> that provides the network data for the new <see cref="T:System.Net.Sockets.NetworkStream" /> .</param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Sockets.NetworkStream" /> class for the specified socket with the
   specified <see cref="T:System.Net.Sockets.Socket" /> ownership.</para>
      </summary>
      <param name="socket">The network socket that the new <see cref="T:System.Net.Sockets.NetworkStream" /> will encapsulate.</param>
      <param name=" ownsSocket">
        <see langword="true" /> if the socket will be owned by this <see cref="T:System.Net.Sockets.NetworkStream" /> instance; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Net.Sockets.NetworkStream" /> class for the specified <see cref="T:System.Net.Sockets.Socket" /> with the specified access rights.</para>
      </summary>
      <param name="socket">The <see cref="T:System.Net.Sockets.Socket" /> that provides the network data.</param>
      <param name=" access">One of the <see cref="T:System.IO.FileAccess" /> values that sets the <see cref="P:System.Net.Sockets.NetworkStream.CanRead" /> and <see cref="P:System.Net.Sockets.NetworkStream.CanWrite" /> properties of the <see cref="T:System.Net.Sockets.NetworkStream" /> .</param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Net.Sockets.NetworkStream" /> class for the specified <see cref="T:System.Net.Sockets.Socket" /> with the specified access rights and the
   specified <see cref="T:System.Net.Sockets.Socket" /> ownership.</para>
      </summary>
      <param name="socket">The <see cref="T:System.Net.Sockets.Socket" /> that provides the network data.</param>
      <param name="access">One of the <see cref="T:System.IO.FileAccess" /> values that sets the <see cref="P:System.Net.Sockets.NetworkStream.CanRead" /> and <see cref="P:System.Net.Sockets.NetworkStream.CanWrite" /> properties of the <see cref="T:System.Net.Sockets.NetworkStream" /> .</param>
      <param name=" ownsSocket">
        <see langword="true" /> if the socket will be owned by this <see cref="T:System.Net.Sockets.NetworkStream" /> instance; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
        <para>Sets the current position of the stream to the given
      value. This method always throws a <see cref="T:System.NotSupportedException" /> .</para>
      </summary>
      <param name="offset">This parameter is not used.</param>
      <param name=" origin">This parameter is not used.</param>
      <returns>
        <para>The position in the stream. This method is not supported.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Reads data from the stream.
      </para>
      </summary>
      <param name="buffer">The location in memory to store data read from the stream. </param>
      <param name=" offset">The location in the buffer to begin storing the data to. </param>
      <param name=" size">The number of bytes to read from the stream. </param>
      <returns>
        <para> The number of bytes read from the
      stream.
      </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Writes data to the stream.</para>
      </summary>
      <param name="buffer">The data to write to the stream.</param>
      <param name="offset">The location in the buffer to start writing data from.</param>
      <param name="size">The number of bytes to write to the stream.</param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Close">
      <summary>
        <para> Closes the stream and optionally closes the underlying socket.
      </para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
      <summary>
        <para>Cleans up a network stream.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> if this method was called by another method such as <see cref="M:System.Net.Sockets.NetworkStream.Close" /> or <see cref="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)" />; <see langword="false" /> if this method was called by the finalizer. </param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Finalize">
      <summary>
        <para>Frees resources used by the <see cref="T:System.Net.Sockets.NetworkStream" /> .</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
        <para> Begins an asynchronous read from a stream.
      </para>
      </summary>
      <param name="buffer">The location in memory that stores the data from the stream. </param>
      <param name=" offset">The location in <paramref name="buffer" /> to begin storing the data to. </param>
      <param name=" size">The size of <paramref name="buffer" /> . </param>
      <param name=" callback">The delegate to call when the asynchronous call is complete. </param>
      <param name=" state">An object containing additional information supplied by the client. </param>
      <returns>
        <para> An <see cref="T:System.IAsyncResult" /> representing the asynchronous call.
   </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
      <summary>
        <para> Handles the end of an asynchronous read.
      </para>
      </summary>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> representing an asynchronous call. </param>
      <returns>
        <para> The number of bytes read from the stream.
      </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
        <para> Begins an asynchronous write to a stream.
      </para>
      </summary>
      <param name="buffer">The location in memory that holds the data to send. </param>
      <param name=" offset">The location in <paramref name="buffer" /> to begin sending the data. </param>
      <param name=" size">The size of <paramref name="buffer" /> . </param>
      <param name=" callback">The delegate to call when the asynchronous call is complete. </param>
      <param name=" state">An object containing additional information supplied by the client. </param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> representing the asynchronous call. </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
      <summary>
        <para> Handles the end of an asynchronous write.
      </para>
      </summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> representing the asynchronous call. </param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Flush">
      <summary>
        <para> Flushes data from the stream. This method is reserved for future use.
      </para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
      <summary>
        <para>Sets the length of the stream. This method always throws a <see cref="T:System.NotSupportedException" />
.</para>
      </summary>
      <param name="value">This parameter is not used.</param>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Socket">
      <summary>
        <para> Gets the underlying network
      connection.</para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Readable">
      <summary>
        <para> Gets or sets a value indicating that the stream can be read.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Writeable">
      <summary>
        <para> Gets a value that indicates whether the stream is writable.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanRead">
      <summary>
        <para> Gets a value indicating whether the current stream supports reading.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanSeek">
      <summary>
        <para> Gets a value indicating whether the
      stream supports seeking. This property always returns <see langword="false" />
      .
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanWrite">
      <summary>
        <para> Gets a value that indicates whether the current stream supports writing.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.DataAvailable">
      <summary>
        <para> Gets a value indicating whether data is available on the stream to be read.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Length">
      <summary>
        <para> The length of the data available on the stream. This property always throws a <see cref="T:System.NotSupportedException" />.
   </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Position">
      <summary>
        <para> Gets or sets the current position in the stream. This property always throws a <see cref="T:System.NotSupportedException" />.
   </para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.AddressFamily">
      <summary>
        <para> Specifies the addressing scheme that an instance of the <see cref="T:System.Net.Sockets.Socket" />
class can use.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unknown">
      <summary>
        <para>Unknown address family.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unspecified">
      <summary>
        <para>Unspecified address family.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unix">
      <summary>
        <para>Unix local to host address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetwork">
      <summary>
        <para> Address for IP version 4.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.ImpLink">
      <summary>
        <para>ARPANET IMP address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Pup">
      <summary>
        <para>Address for PUP protocols.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Chaos">
      <summary>
        <para>Address for MIT CHAOS protocols.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NS">
      <summary>
        <para>Address for Xerox NS protocols.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ipx">
      <summary>
        <para>IPX or SPX address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Iso">
      <summary>
        <para>Address for ISO protocols.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Osi">
      <summary>
        <para>Address for ISO protocols.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ecma">
      <summary>
        <para>European Computer Manufacturers Association (ECMA) address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DataKit">
      <summary>
        <para>Address for Datakit protocols.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ccitt">
      <summary>
        <para>Addresses for CCITT protocols, such as X.25.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Sna">
      <summary>
        <para>IBM SNA address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DecNet">
      <summary>
        <para> DECnet address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DataLink">
      <summary>
        <para> Direct data-link interface address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Lat">
      <summary>
        <para> LAT address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.HyperChannel">
      <summary>
        <para> NSC Hyperchannel address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.AppleTalk">
      <summary>
        <para> AppleTalk address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NetBios">
      <summary>
        <para> NetBios address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.VoiceView">
      <summary>
        <para>VoiceView address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.FireFox">
      <summary>
        <para> FireFox address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Banyan">
      <summary>
        <para> Banyan address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Atm">
      <summary>
        <para>Native ATM services address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetworkV6">
      <summary>
        <para>Address for IP version 6.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Cluster">
      <summary>
        <para>Address for Microsoft cluster products.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ieee12844">
      <summary>
        <para> IEEE 1284.4 workgroup address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Irda">
      <summary>
        <para> IrDA address.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NetworkDesigners">
      <summary>
        <para> Address for Network Designers OSI gateway-enabled protocols.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Max">
      <summary>
        <para> MAX address.</para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.LingerOption">
      <summary>
        <para>Contains information about a socket's linger time, the amount of time it will
      remain after closing if data remains to be sent.</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Sockets.LingerOption" /> class.</para>
      </summary>
      <param name="enable">
        <see langword="true" /> to enable remaining connected after <see cref="M:System.Net.Sockets.Socket.Close" qualify="true" /> is called; otherwise, <see langword="false" /> .</param>
      <param name=" seconds">The number of seconds to remain connected after <see cref="M:System.Net.Sockets.Socket.Close" qualify="true" />is called.</param>
    </member>
    <member name="P:System.Net.Sockets.LingerOption.Enabled">
      <summary>
        <para>Gets or sets a value indicating whether to linger after the socket is
       closed.</para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.LingerOption.LingerTime">
      <summary>
        <para>Gets or sets the amount of time to remain connected after the socket is closed.</para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.MulticastOption">
      <summary>
        <para>Contains IP address values
      for IP multicast packets.</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Sockets.MulticastOption" /> class with the specified IP multicast group
    address and local interface address.</para>
      </summary>
      <param name="group">The group IP address.</param>
      <param name=" mcint">The local IP address.</param>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress)">
      <summary>
        <para>Initializes a new version of the <see cref="T:System.Net.Sockets.MulticastOption" /> class for the specified IP multicast
    group.</para>
      </summary>
      <param name="group">The IP address of the multicast group.</param>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.Group">
      <summary>
        <para>Gets or sets the IP address of a multicast group.</para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.LocalAddress">
      <summary>
        <para>Gets or sets the local address associated with a multicast group.</para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.ProtocolFamily">
      <summary>
        <para> Specifies the type of protocol that an instance of the <see cref="T:System.Net.Sockets.Socket" />
class can use.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unknown">
      <summary>
        <para> Unknown protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unspecified">
      <summary>
        <para>Unspecified protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unix">
      <summary>
        <para>Unix local to host protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.InterNetwork">
      <summary>
        <para>IP version 4 protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.ImpLink">
      <summary>
   ARPANET IMP protocol.
</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Pup">
      <summary>
        <para> PUP protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Chaos">
      <summary>
        <para>MIT CHAOS protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NS">
      <summary>
        <para>Xerox NS protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ipx">
      <summary>
        <para>IPX or SPX protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Iso">
      <summary>
        <para> ISO protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Osi">
      <summary>
        <para> OSI protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ecma">
      <summary>
        <para>European Computer Manufactures Association (ECMA) protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DataKit">
      <summary>
        <para> DataKit protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ccitt">
      <summary>
        <para>CCITT protocol, such as X.25.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Sna">
      <summary>
        <para>IBM SNA protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DecNet">
      <summary>
        <para> DECNet protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DataLink">
      <summary>
        <para>Direct data link protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Lat">
      <summary>
        <para> LAT protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.HyperChannel">
      <summary>
        <para>NSC HyperChannel protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.AppleTalk">
      <summary>
        <para>AppleTalk protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NetBios">
      <summary>
        <para> NetBios protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.VoiceView">
      <summary>
        <para>VoiceView protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.FireFox">
      <summary>
        <para> FireFox protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Banyan">
      <summary>
        <para> Banyan protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Atm">
      <summary>
        <para>Native ATM services protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.InterNetworkV6">
      <summary>
        <para>IP version 6 protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Cluster">
      <summary>
        <para>Microsoft Cluster products protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ieee12844">
      <summary>
        <para>IEEE 1284.4 workgroup protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Irda">
      <summary>
        <para> IrDA protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NetworkDesigners">
      <summary>
   Network Designers OSI gateway enabled protocol.
</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Max">
      <summary>
        <para> MAX protocol.</para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.ProtocolType">
      <summary>
        <para> Specifies the protocols that the <see cref="T:System.Net.Sockets.Socket" /> class supports.
   </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IP">
      <summary>
        <para>Internet Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Icmp">
      <summary>
        <para>Internet Control Message Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Igmp">
      <summary>
        <para>Internet Group Management Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Ggp">
      <summary>
        <para>Gateway To Gateway Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Tcp">
      <summary>
        <para> Transmission Control Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Pup">
      <summary>
        <para> PUP Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Udp">
      <summary>
        <para>User Datagram Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Idp">
      <summary>
        <para> IDP Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.ND">
      <summary>
        <para>Net Disk Protocol (unofficial).</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Raw">
      <summary>
        <para>Raw UP packet protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unspecified">
      <summary>
        <para>Unspecified protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Ipx">
      <summary>
        <para> IPX Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Spx">
      <summary>
        <para> SPX Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.SpxII">
      <summary>
        <para>SPX Version 2 Protocol.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unknown">
      <summary>
        <para> Unknown protocol.</para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.SelectMode">
      <summary>
        <para> Defines the polling modes for the <see cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" qualify="true" /> method.
   </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectRead">
      <summary>
        <para> Read status mode.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectWrite">
      <summary>
   Write status mode.
</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectError">
      <summary>
        <para> Error status mode.
      </para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.Socket">
      <summary>
        <para> Implements the Berkeley sockets
      interface.</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class.
   </para>
      </summary>
      <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values. </param>
      <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType" /> values. </param>
      <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values. </param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)">
      <summary>
        <para>Associates a <see cref="T:System.Net.Sockets.Socket" /> with a local endpoint.</para>
      </summary>
      <param name="localEP">The local <see cref="T:System.Net.EndPoint" /> to associate with the <see cref="T:System.Net.Sockets.Socket" />.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)">
      <summary>
        <para>Establishes a connection to a remote device.</para>
      </summary>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close">
      <summary>
        <para> Forces a <see cref="T:System.Net.Sockets.Socket" /> connection to close.
      </para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose(System.Boolean)">
      <summary>
        <para>Disposes of the unmanaged resources (other than memory)
      used by the <see cref="T:System.Net.Sockets.Socket" />, and optionally
      disposes of the managed resources.</para>
      </summary>
      <param name="disposing">If<see langword=" true," /> releases both managed and unmanaged resources; if <see langword="false," /> releases only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Finalize">
      <summary>
        <para>Frees resources used by the <see cref="T:System.Net.Sockets.Socket" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)">
      <summary>
        <para>Disables sends and receives on a <see cref="T:System.Net.Sockets.Socket" />.</para>
      </summary>
      <param name="how">The <see cref="T:System.Net.Sockets.SocketShutdown" /> value specifying the operation that will no longer be allowed.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Listen(System.Int32)">
      <summary>
        <para>Places a <see cref="T:System.Net.Sockets.Socket" /> in a listening state.</para>
      </summary>
      <param name="backlog">The Maximum length of the queue of pending connections.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Accept">
      <summary>
        <para>Creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle an incoming connection
   request.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Net.Sockets.Socket" /> to handle an incoming connection
   request.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>
        <para>Sends data to
      a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the indicated location in the
      data.</para>
      </summary>
      <param name="buffer">The data to be sent.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <returns>
        <para> The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
      <summary>
        <para>Sends data to
      a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the indicated location in the
      data.</para>
      </summary>
      <param name="buffer">The data to be sent.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <returns>
        <para> The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[])">
      <summary>
        <para>Sends data to
      a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the indicated location in the
      data.</para>
      </summary>
      <param name="buffer">The data to be sent.</param>
      <returns>
        <para> The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>
        <para>Sends data to
      a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the indicated location in the
      data.</para>
      </summary>
      <param name="buffer">The data to be sent.</param>
      <param name="offset">The position in the data buffer to begin sending data.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <returns>
        <para> The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>
        <para> Sends data to a specific endpoint, starting at the indicated location in the
      data.</para>
      </summary>
      <param name="buffer">The data to be sent.</param>
      <param name="offset">The position in the data buffer to begin sending data.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <param name="remoteEP">The <see cref="T:System.Net.EndPoint" /> representing the destination location for the data.</param>
      <returns>
        <para> The number of bytes
      sent.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>
        <para> Sends data to a specific
      endpoint.</para>
      </summary>
      <param name="buffer">The data to be sent.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <param name="remoteEP">The <see cref="T:System.Net.EndPoint" /> representing the destination location for the data.</param>
      <returns>
        <para> The number of bytes
      sent.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>
        <para> Sends data to a specific
      endpoint.</para>
      </summary>
      <param name="buffer">The data to be sent.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <param name="remoteEP">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</param>
      <returns>
        <para> The number of bytes
      sent.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)">
      <summary>
        <para> Sends data to a specific endpoint.</para>
      </summary>
      <param name="buffer">The data to be sent.</param>
      <param name="remoteEP">The <see cref="T:System.Net.EndPoint" /> representing the destination for the data.</param>
      <returns>
        <para> The number of bytes
      sent.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>
        <para>Receives data from a connected <see cref="T:System.Net.Sockets.Socket" /> into a specific location of the receive
      buffer.</para>
      </summary>
      <param name="buffer">The storage location for the received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <returns>
        <para>The number of bytes received.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
      <summary>
        <para>Receives data from a connected <see cref="T:System.Net.Sockets.Socket" /> into a specific location of the receive
      buffer.</para>
      </summary>
      <param name="buffer">The storage location for the received data.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <returns>
        <para>The number of bytes received.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[])">
      <summary>
        <para>Receives data from a connected <see cref="T:System.Net.Sockets.Socket" /> into a specific location of the receive
      buffer.</para>
      </summary>
      <param name="buffer">The storage location for the received data.</param>
      <returns>
        <para>The number of bytes received.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>
        <para>Receives data from a connected <see cref="T:System.Net.Sockets.Socket" /> in a specific location of the receive
      buffer.</para>
      </summary>
      <param name="buffer">The storage location for received data.</param>
      <param name="offset">The location in <paramref name="buffer " />to store the received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <returns>
        <para>The number of bytes received.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>
        <para> Receives a datagram in a specific location in the data buffer and
      stores the endpoint.</para>
      </summary>
      <param name="buffer">The storage location for received data.</param>
      <param name="offset">The position in the <paramref name="buffer " />parameter to store the received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</param>
      <returns>
        <para> The number
      of bytes received.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>
        <para> Receives a datagram in a specific location in the data buffer and
      stores the endpoint.</para>
      </summary>
      <param name="buffer">The storage location for received data.</param>
      <param name="size">The number of bytes to receive.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</param>
      <returns>
        <para> The number
      of bytes received.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>
        <para> Receives a datagram in a specific location in the data buffer and
      stores the endpoint.</para>
      </summary>
      <param name="buffer">The storage location for the received data.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</param>
      <returns>
        <para> The number
      of bytes received.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)">
      <summary>
        <para>Receives a datagram in a specific location in the data buffer and stores the
      endpoint.</para>
      </summary>
      <param name="buffer">The storage location for received data.</param>
      <param name="remoteEP">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</param>
      <returns>
        <para> The number
      of bytes received.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])">
      <summary>
        <para>Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" />.</para>
      </summary>
      <param name="ioControlCode">The control code of the operation to perform.</param>
      <param name=" optionInValue">The input data required by the operation.</param>
      <param name=" optionOutValue">The output data returned by the operation.</param>
      <returns>
        <para> The number of bytes in
      <paramref name="optionOutValue" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
      <summary>
        <para>Sets the specified option to the specified value.</para>
      </summary>
      <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel" /> value. </param>
      <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName" /> value.</param>
      <param name="optionValue">A value of the option.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
      <summary>
        <para>Sets the specified option to the specified value.</para>
      </summary>
      <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel" /> value. </param>
      <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName" /> value.</param>
      <param name="optionValue">A byte array representing the value of the option.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)">
      <summary>
        <para>Sets the specified option to the specified value.</para>
      </summary>
      <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel" /> value. </param>
      <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName" /> value.</param>
      <param name="optionValue">A <see cref="T:System.Net.Sockets.LingerOption" /> or <see cref="T:System.Net.Sockets.MulticastOption" /> containing the value of the option.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
      <summary>
        <para>Gets the value of a specified socket option.</para>
      </summary>
      <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values. </param>
      <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</param>
      <returns>
        <para>The value of the option. When the <paramref name="optionName&#xD;&#xA;      " />parameter is set
      to <see cref="F:System.Net.Sockets.SocketOptionName.Linger" /> the
      return value is an instance of the <see cref="T:System.Net.Sockets.LingerOption" />. When <paramref name="optionName " />is set
      to <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> or <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" />, the return value is an instance of the <see cref="T:System.Net.Sockets.MulticastOption" />. When <paramref name="optionName" />
      is any other value, the return value is an integer.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
      <summary>
        <para>Gets the specified <see cref="T:System.Net.Sockets.Socket" /> option setting.</para>
      </summary>
      <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values. </param>
      <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</param>
      <param name=" optionValue">The buffer that is to receive the option setting.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
      <summary>
        <para> Returns the value of the specified <see cref="T:System.Net.Sockets.Socket" /> option and returns
      in an array.</para>
      </summary>
      <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values. </param>
      <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</param>
      <param name=" optionLength">The length, in bytes, of the expected return value.</param>
      <returns>
        <para>An array of bytes containing the value of the socket option.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
      <summary>
        <para>Determines the status of the <see cref="T:System.Net.Sockets.Socket" />.</para>
      </summary>
      <param name="microSeconds">The time to wait for a response, in microseconds.</param>
      <param name=" mode">One of the <see cref="T:System.Net.Sockets.SelectMode" /> values.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Mode</term>
            <description>Return Value</description>
          </listheader>
          <item>
            <term>
              <see cref="F:System.Net.Sockets.SelectMode.SelectRead" />
            </term>
            <description>
              <para>
                <see langword="true " />if <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> has been called and a connection is
      pending, <see cref="M:System.Net.Sockets.Socket.Accept" /> will succeed</para>
              <para>-or-</para>
              <para>
                <see langword="true " />if data is available for
   reading</para>
              <para>-or-</para>
              <para>
                <see langword="true" />, if connection has been closed,
reset, or terminated;</para>
              <para>otherwise, returns
<see langword="false" />.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="F:System.Net.Sockets.SelectMode.SelectWrite" />
            </term>
            <description>
              <para>
                <see langword="true" /> , if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />, and the connection has succeeded</para>
              <para>-or-</para>
              <para>
                <see langword="true" />, if data can be sent;</para>
              <para>otherwise, returns <see langword="false" />.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="F:System.Net.Sockets.SelectMode.SelectError" />
            </term>
            <description>
              <para>
                <see langword="true" /> , if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> that does not
block, and the connection has failed</para>
              <para>-or-</para>
              <para>
                <see langword="true" />, if <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> is not set and out-of-band data is
available;</para>
              <para>otherwise, returns <see langword="false" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>
        <para>Determines the status of one or more sockets.</para>
      </summary>
      <param name="checkRead">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for data to read.</param>
      <param name="checkWrite">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for writing availability. </param>
      <param name="checkError">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for errors.</param>
      <param name="microSeconds">The time to wait for a response, in microseconds.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous request for a connection to a network device.</para>
      </summary>
      <param name="remoteEP">
        <para>An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</para>
      </param>
      <param name=" callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name=" state">An object that contains state information for this request.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)">
      <summary>
        <para>Ends a pending asynchronous connection request.</para>
      </summary>
      <param name="asyncResult"> Stores state information for this asynchronous operation as well as any user-defined data. </param>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>
        <para>Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</para>
      </summary>
      <param name="buffer">The data to send.</param>
      <param name=" offset">The zero-based position in the <paramref name="buffer" /> parameter at which to begin sending data.</param>
      <param name=" size">The number of bytes to send.</param>
      <param name=" socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <param name=" callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name=" state">An object containing state information for this request.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)">
      <summary>
        <para>Ends a pending asynchronous send.</para>
      </summary>
      <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
      <returns>
        <para> If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>
        <para> Sends data asynchronously to a specific remote host.</para>
      </summary>
      <param name="buffer">The data to send.</param>
      <param name="offset">The zero-based position in the <paramref name="buffer " />parameter at which to begin sending data.</param>
      <param name="size">The number of bytes to send.</param>
      <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <param name=" remoteEP">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name="state">An object containing state information for this request.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)">
      <summary>
        <para>Ends a pending asynchronous send to a specific location.</para>
      </summary>
      <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data .</param>
      <returns>
        <para> If successful, the number of bytes sent; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</para>
      </summary>
      <param name="buffer">The storage location for the received data.</param>
      <param name=" offset">The zero-based position in the <paramref name="buffer " />parameter at which to store the received data.</param>
      <param name=" size">The number of bytes to receive.</param>
      <param name=" socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <param name=" callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name=" state">An object containing state information for this request.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)">
      <summary>
        <para>Ends a pending asynchronous read.</para>
      </summary>
      <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
      <returns>
        <para> The number of bytes received.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins to asynchronously receive data from a specified network
      device.</para>
      </summary>
      <param name="buffer">The storage location for the received data.</param>
      <param name=" offset">The zero-based position in the <paramref name="buffer " />parameter at which to store the data.</param>
      <param name=" size">The number of bytes to receive.</param>
      <param name=" socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
      <param name=" remoteEP">An <see cref="T:System.Net.EndPoint" /> that represents the source of the data.</param>
      <param name=" callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
      <param name=" state">An object containing state information for this request.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)">
      <summary>
        <para> Ends a pending asynchronous read from a specific endpoint.</para>
      </summary>
      <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data. </param>
      <param name=" endPoint">The source <see cref="T:System.Net.EndPoint" /> . </param>
      <returns>
        <para>If successful, the number of bytes received. If 
      unsuccessful, returns 0 if the connection is closed by the remote host.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous request to create a new <see cref="T:System.Net.Sockets.Socket" /> to accept an incoming connection request.</para>
      </summary>
      <param name="callback">The <see cref="T:System.AsyncCallback" />delegate. </param>
      <param name=" state">An object containing state information for this request.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> creation.</para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)">
      <summary>
        <para>Ends an asynchronous request to create a new <see cref="T:System.Net.Sockets.Socket" /> to accept an incoming connection request.</para>
      </summary>
      <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
      <returns>
        <para> A <see cref="T:System.Net.Sockets.Socket" /> to
   handle the incoming connection.</para>
      </returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Connected">
      <summary>
        <para> Gets a value indicating whether a <see cref="T:System.Net.Sockets.Socket" /> is connected to a remote resource.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.AddressFamily">
      <summary>
        <para> Gets the address family of the <see cref="T:System.Net.Sockets.Socket" />.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.SocketType">
      <summary>
        <para> Gets the type of the <see cref="T:System.Net.Sockets.Socket" />.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.ProtocolType">
      <summary>
        <para> Gets the protocol type of the <see cref="T:System.Net.Sockets.Socket" />.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.Available">
      <summary>
        <para> Gets the amount of data that has been received from the network and is
      available to be read.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.LocalEndPoint">
      <summary>
        <para> Gets the local endpoint.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.RemoteEndPoint">
      <summary>
        <para> Gets the remote endpoint.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.Handle">
      <summary>
        <para> Gets the operating system handle for the <see cref="T:System.Net.Sockets.Socket" />.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.Blocking">
      <summary>
        <para> Gets or sets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket" /> is in blocking mode.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.InvalidSocket">
      <summary>
        <para>The socket is invalid.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.SocketError">
      <summary>
        <para>The socket has an error.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSABASEERR">
      <summary>
        <para>
       The base value of all socket error constants. All other socket errors are
       offset from this value.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEINTR">
      <summary>
        <para>
       A blocking socket call was canceled.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEACCES">
      <summary>
        <para>
       Permission denied.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEFAULT">
      <summary>
        <para>
       Bad address.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEINVAL">
      <summary>
        <para>
       Invalid argument.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEMFILE">
      <summary>
        <para>
       Too many open
       files.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEWOULDBLOCK">
      <summary>
        <para>
       Resource temporarily
       unavailable.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEINPROGRESS">
      <summary>
        <para>
       Operation now in progress.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEALREADY">
      <summary>
        <para>
       Operation already in progress.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAENOTSOCK">
      <summary>
        <para>
       Socket operation on nonsocket.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEDESTADDRREQ">
      <summary>
        <para>
       Destination address required.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEMSGSIZE">
      <summary>
        <para>
       Message too long.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEPROTOTYPE">
      <summary>
        <para>
       Protocol wrong type for socket.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAENOPROTOOPT">
      <summary>
        <para>
       Bad protocol option.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEPROTONOSUPPORT">
      <summary>
        <para>
       Protocol not supported.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAESOCKTNOSUPPORT">
      <summary>
        <para>
       Socket type not supported.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEOPNOTSUPP">
      <summary>
        <para>
       Operation not supported.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEPFNOSUPPORT">
      <summary>
        <para>
       Protocol family not supported.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEAFNOSUPPORT">
      <summary>
        <para>
       Address family not supported by protocol family.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEADDRINUSE">
      <summary>
    Address already in use.
 </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEADDRNOTAVAIL">
      <summary>
        <para>
       Cannot assign requested address.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAENETDOWN">
      <summary>
        <para>
       Network is down.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAENETUNREACH">
      <summary>
        <para>
       Network is unreachable.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAENETRESET">
      <summary>
        <para>
       Network dropped connection on reset.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAECONNABORTED">
      <summary>
        <para>
       Software caused connection to abort.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAECONNRESET">
      <summary>
        <para>
       Connection reset by peer.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAENOBUFS">
      <summary>
    No buffer space available.
 </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEISCONN">
      <summary>
        <para>
       Socket is already connected.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAENOTCONN">
      <summary>
        <para>
       Socket is not connected.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAESHUTDOWN">
      <summary>
        <para>
       Cannot send after socket shutdown.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAETIMEDOUT">
      <summary>
        <para>
       Connection timed out.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAECONNREFUSED">
      <summary>
        <para>
       Connection refused.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEHOSTDOWN">
      <summary>
        <para>
       Host is down.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEHOSTUNREACH">
      <summary>
        <para>
       No route to host.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEPROCLIM">
      <summary>
        <para>
       Too many processes.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAEDISCON">
      <summary>
        <para>
       Graceful shutdown in progress.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSASYSNOTREADY">
      <summary>
        <para>
       Network subsystem is unavailable.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAVERNOTSUPPORTED">
      <summary>
        <para>
       Winsock.dll out of range.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSANOTINITIALISED">
      <summary>
        <para>
       Successful startup not yet performed.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSA_IO_PENDING">
      <summary>
        <para>
       Overlapped operations will complete later.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSAHOST_NOT_FOUND">
      <summary>
        <para>
       Host not found.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSATRY_AGAIN">
      <summary>
        <para>
       Nonauthoritative host not found.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSANO_RECOVERY">
      <summary>
        <para>
       This is a nonrecoverable error.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.WSANO_DATA">
      <summary>
        <para>
       Valid name, no data record of requested type.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.HOST_NOT_FOUND">
      <summary>
        <para>
       Host not found.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.TRY_AGAIN">
      <summary>
        <para>
       Nonauthoritative host not found.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.NO_RECOVERY">
      <summary>
        <para>
       This is a nonrecoverable error.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketErrors.NO_DATA">
      <summary>
        <para>
       Valid name, no data record of requested type.
    </para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketFlags">
      <summary>
        <para>
       Provides constant values for socket messages.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.None">
      <summary>
        <para>
       Use no flags for this call.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.OutOfBand">
      <summary>
        <para>
       Process out-of-band data.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Peek">
      <summary>
        <para>
       Peek at incoming message.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.DontRoute">
      <summary>
        <para>
       Send without using routing tables.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.MaxIOVectorLength">
      <summary>
        <para> Provides a standard value for the number of WSABUF 
      structures used to send and receive data.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Partial">
      <summary>
        <para> Partial send or receive for message.
      </para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketOptionLevel">
      <summary>
        <para> Defines socket option levels for the <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" qualify="true" /> and <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" qualify="true" /> methods.
   </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Socket">
      <summary>
        <para> Socket options apply to the socket itself.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.IP">
      <summary>
        <para> Socket options apply to IP sockets.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Tcp">
      <summary>
        <para> Socket options apply to TCP sockets.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Udp">
      <summary>
        <para>Socket options apply to UDP sockets.</para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketOptionName">
      <summary>
        <para>
       Defines socket option names for the <see cref="T:System.Net.Sockets.Socket" /> class.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Debug">
      <summary>
        <para>Record debugging information.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AcceptConnection">
      <summary>
        <para>Socket is listening.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReuseAddress">
      <summary>
        <para>
       Allows the socket to be bound to an address that is already in use.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.KeepAlive">
      <summary>
        <para>
       Send keep-alives.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontRoute">
      <summary>
        <para> Do not route; send directly to interface addresses.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Broadcast">
      <summary>
        <para>
       Permit sending broadcast messages on the socket.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UseLoopback">
      <summary>
        <para>
       Bypass hardware when possible.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Linger">
      <summary>
        <para>
       Linger on close if unsent data is present.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.OutOfBandInline">
      <summary>
        <para>
       Receives out-of-band data in the normal data stream.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontLinger">
      <summary>
        <para>
       Close socket gracefully without lingering.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ExclusiveAddressUse">
      <summary>
        <para>
       Enables a socket to be bound for exclusive access.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendBuffer">
      <summary>
        <para>
       Specifies the total per-socket buffer space reserved for sends. This is
       unrelated to the maximum message size or the size of a TCP window.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveBuffer">
      <summary>
        <para>
       Send low water mark.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendLowWater">
      <summary>
        <para>
       Specifies the total per-socket buffer space reserved for receives. This is unrelated to the maximum message size or the size of a TCP window.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveLowWater">
      <summary>
        <para>
       Receive low water mark.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendTimeout">
      <summary>
        <para>
       Send timeout.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveTimeout">
      <summary>
        <para> Receive time out.
      </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Error">
      <summary>
        <para>
       Get error status and clear.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Type">
      <summary>
        <para>
       Get socket type.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MaxConnections">
      <summary>
        <para>
       Maximum queue length that can be specified by <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPOptions">
      <summary>
        <para>Specifies IP options to be inserted into outgoing datagrams.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.HeaderIncluded">
      <summary>
        <para>Indicates application is providing the IP header for 
      outgoing datagrams.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.TypeOfService">
      <summary>
        <para>Change the IP header type of service field.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IpTimeToLive">
      <summary>
        <para>Set the IP header time-to-live field.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastInterface">
      <summary>
        <para>Set the interface for outgoing multicast packets.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastTimeToLive">
      <summary>
        <para>
       IP multicast time to live.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastLoopback">
      <summary>
        <para>IP multicast loopback.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AddMembership">
      <summary>
        <para>
       Add an IP group membership.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DropMembership">
      <summary>
        <para>
       Drop an IP group membership.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontFragment">
      <summary>
        <para>Do not fragment IP datagrams.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AddSourceMembership">
      <summary>
        <para>Join a source group.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DropSourceMembership">
      <summary>
        <para>Drop a source group.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.BlockSource">
      <summary>
        <para>Block data from a source.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UnblockSource">
      <summary>
        <para>Unblock a previously blocked source.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.PacketInformation">
      <summary>
        <para>Return information about received packets.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.NoDelay">
      <summary>
        <para>
       Disables the Nagle algorithm for send coalescing.
    </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.BsdUrgent">
      <summary>
        <para>Use urgent data as defined in RFC-1222. This option can 
      be set only once, and once set, cannot be turned off.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Expedited">
      <summary>
        <para>Use expedited data as defined in RFC-1222. This option 
      can be set only once, and once set, cannot be turned off.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.NoChecksum">
      <summary>
        <para>Send UDP datagrams with checksum set to zero.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ChecksumCoverage">
      <summary>
        <para>Set or get UDP checksum coverage.</para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketShutdown">
      <summary>
        <para>Defines constants used by the <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" qualify="true" /> method.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Receive">
      <summary>
        <para> Shuts down a socket for receiving. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Send">
      <summary>
        <para> Shuts down a socket for sending.
      This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Both">
      <summary>
        <para> Shuts down a socket for both sending and receiving. This field is constant.</para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketType">
      <summary>
        <para> Specifies the type of socket an instance of the <see cref="T:System.Net.Sockets.Socket" /> class represents.
   </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Stream">
      <summary>
        <para>Supports reliable, two-way, connection-based byte streams
      without the duplication of data and without preservation of boundaries. A
   <see langword="Socket" /> of this type communicates with a single peer
      and requires a remote host connection before communication can begin. <see cref="F:System.Net.Sockets.SocketType.Stream" /> uses
      the Transmission Control Protocol (<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />
      
      ) <see cref="T:System.Net.Sockets.ProtocolType" /> and the <see langword="InterNetwork" /><see cref="T:System.Net.Sockets.AddressFamily" /> .</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Dgram">
      <summary>
        <para> Supports datagrams, which are
      connectionless, unreliable messages of a fixed (typically small) maximum length. Messages might
      be lost or duplicated and might arrive out of order. A <see cref="T:System.Net.Sockets.Socket" /> of type <see cref="F:System.Net.Sockets.SocketType.Dgram" /> requires no connection prior to sending and
      receiving data, and can communicate with multiple peers. <see cref="F:System.Net.Sockets.SocketType.Dgram" /> uses the Datagram Protocol
      (<see cref="F:System.Net.Sockets.ProtocolType.Udp" />) and
      the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /><see cref="T:System.Net.Sockets.AddressFamily" />.
      
   </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Raw">
      <summary>
        <para>Supports access to the underlying transport protocol.
      Using the <see cref="T:System.Net.Sockets.SocketType" /><see cref="F:System.Net.Sockets.SocketType.Raw" /> , you can communicate using protocols such
      as, Internet Control Message Protocol (<see cref="F:System.Net.Sockets.ProtocolType.Icmp" />) and Internet Group
      Management Protocol (<see cref="F:System.Net.Sockets.ProtocolType.Igmp" />
      ). Your application must provide a
      complete IP header when sending. Received datagrams return with the
      IP header and options intact. </para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Rdm">
      <summary>
        <para> Supports connectionless,
      message-oriented, reliably delivered messages, and preserves
      message boundaries in data. Rdm ( Reliably-Delivered Messages) messages arrive
      unduplicated and in order. Furthermore, the sender is notified if messages
      are lost. If you initialize a <see langword="Socket" /> using <see cref="F:System.Net.Sockets.SocketType.Rdm" />, you do not require a
      remote host connection before sending and receiving data. With <see cref="F:System.Net.Sockets.SocketType.Rdm" />, you can communicate with multiple peers.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Seqpacket">
      <summary>
        <para> Provides
      connection-oriented and reliable two-way transfer of ordered byte streams across
      a network. <see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> does not duplicate data, and it preserves
      boundaries within the data stream. A <see langword="Socket" /> of type <see cref="F:System.Net.Sockets.SocketType.Seqpacket" />
      
      communicates with a single peer and requires
      a remote host connection before communication can begin.</para>
      </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Unknown">
      <summary>
        <para>Specifies an unknown <see langword="Socket " /> type.</para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.TcpClient">
      <summary>
        <para> Provides client connections for TCP network services.</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Net.Sockets.TcpClient" /> bound to the specified local endpoint.</para>
      </summary>
      <param name="localEP">The <see cref="T:System.Net.IPEndPoint" /> to which you bind the TCP <see cref="T:System.Net.Sockets.Socket" /> . </param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class and connects to the
   specified port on the specified host.</para>
      </summary>
      <param name="hostname">DNS name of the remote host to which you intend to connect. </param>
      <param name=" port">Port number of the remote host to which you intend to connect. </param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)">
      <summary>
        <para> Connects the client to the specified port on the specified host.
      </para>
      </summary>
      <param name="hostname">The DNS name of the remote host to which you intend to connect. </param>
      <param name="port">The port number of the remote host to which you intend to connect. </param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)">
      <summary>
        <para> Connects the client to a remote TCP host using the specified IP address and port number.
      </para>
      </summary>
      <param name="address">The IP address of the host to which you intend to connect. </param>
      <param name=" port">The port number to which you intend to connect. </param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)">
      <summary>
        <para> Connects the client to a remote TCP host using the specified remote network endpoint.
      </para>
      </summary>
      <param name="remoteEP">The IP endpoint to which you intend to connect. </param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.GetStream">
      <summary>
        <para> Returns the stream used to send and
      receive data.
      </para>
      </summary>
      <returns>
        <para> The underlying <see cref="T:System.Net.Sockets.NetworkStream" /> .
   </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Close">
      <summary>
        <para> Closes the TCP connection.
      </para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient" />
and optionally releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true," /> to release both managed and unmanaged resources; <see langword="false," /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Finalize">
      <summary>
        <para>Frees resources used by the <see cref="T:System.Net.Sockets.TcpClient" />
class.</para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Client">
      <summary>
        <para>Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket" /> .</para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Active">
      <summary>
        <para> Gets or set a value that indicates whether a connection has been made.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ReceiveBufferSize">
      <summary>
        <para> Gets or sets the size of the receive buffer.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.SendBufferSize">
      <summary>
        <para> Gets or sets the size of the send buffer.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ReceiveTimeout">
      <summary>
        <para> Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient" /> will wait to receive data once initiated.
   </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.SendTimeout">
      <summary>
        <para> Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient" /> will wait to receive confirmation after you initiate a send. </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.LingerState">
      <summary>
        <para> Gets or sets information about the sockets linger 
      time.
   </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.NoDelay">
      <summary>
        <para> Gets or sets a value that enables a delay when send or receive buffers are not full.
      </para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.TcpListener">
      <summary>
        <para>Listens for connections from TCP network clients.</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class with the specified
   local endpoint.
   </para>
      </summary>
      <param name="localEP">The local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket" /> . </param>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens to the
   specified IP address and port.
   </para>
      </summary>
      <param name="localaddr">The local IP address. </param>
      <param name=" port">The port on which to listen. </param>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class 
   that listens on the specified
   port.</para>
      </summary>
      <param name="port">The port on which to listen. If this number is 0, the system will assign an open port. </param>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Start">
      <summary>
        <para> Starts listening to network requests.
      </para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Stop">
      <summary>
        <para> Closes the listener.
      </para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Finalize">
      <summary>
        <para>Frees resources used by the <see cref="T:System.Net.Sockets.TcpClient" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Pending">
      <summary>
        <para> Determines if there are pending connection requests.
      </para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if connections are pending; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptSocket">
      <summary>
        <para> Accepts a pending connection request.
      </para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Net.Sockets.Socket" /> used to send and receive
   data.
   </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
      <summary>
        <para>Accepts a pending connection request</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data. </para>
      </returns>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.Server">
      <summary>
        <para> Gets the underlying network <see cref="T:System.Net.Sockets.Socket" /> .
   </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.Active">
      <summary>
        <para> Gets a value that indicates whether <see cref="T:System.Net.Sockets.TcpListener" />
is actively listening
for client connections.</para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.LocalEndpoint">
      <summary>
        <para> Gets the underlying <see cref="T:System.Net.EndPoint" /> of the current <see cref="T:System.Net.Sockets.TcpListener" /> .
   </para>
      </summary>
    </member>
    <member name="T:System.Net.Sockets.UdpClient">
      <summary>
        <para> Provides User Datagram Protocol (UDP) network
      services.
      </para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" />class.
   </para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class that communicates on
   a specified port.</para>
      </summary>
      <param name="port">The local port number from which you intend to communicate.</param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class that communicates on
   a specified local endpoint.</para>
      </summary>
      <param name="localEP">The local endpoint to which you bind the UDP connection. </param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and connects to a
   specified remote host on a specified port.</para>
      </summary>
      <param name="hostname">The name of the remote DNS host to which you intend to connect.</param>
      <param name="port">The remote port number to which you intend to connect.</param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Close">
      <summary>
        <para> Closes the UDP connection.</para>
      </summary>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)">
      <summary>
        <para>Establishes a connection to the specified port on the specified
      remote host.</para>
      </summary>
      <param name="hostname">DNS name of the remote host to which you intend to connect. </param>
      <param name="port">Port number on the remote host to which you intend to connect. </param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)">
      <summary>
        <para>Connects the client to a remote UDP host using the specified IP Address and
      port number.</para>
      </summary>
      <param name="addr">The IP address of the host to which you intend to connect. </param>
      <param name="port">The port number to which you intend to connect. </param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)">
      <summary>
        <para> Connects the client to a remote UDP host using the specified remote network endpoint.</para>
      </summary>
      <param name="endPoint">The network endpoint to which you intend to connect. </param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)">
      <summary>
        <para> Sends a UDP datagram to the host at the remote endpoint.
      </para>
      </summary>
      <param name="dgram">The UDP datagram that you intend to send represented as an array of bytes. </param>
      <param name=" bytes">The number of bytes in the datagram. </param>
      <param name=" endPoint">An <see cref="T:System.Net.IPEndPoint" /> that represents the host and port to which to send the datagram. </param>
      <returns>
        <para> The number
      of bytes sent.
      </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)">
      <summary>
        <para> Sends a UDP datagram to a specified port on a specified remote host.
      </para>
      </summary>
      <param name="dgram">The UDP datagram that you intend to send represented as an array of bytes. </param>
      <param name="bytes">The number of bytes in the datagram. </param>
      <param name="hostname">The name of the remote host to which you intend to connect. </param>
      <param name=" port">The remote port number with which you intend to communicate. </param>
      <returns>
        <para> The number of bytes sent.
      </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)">
      <summary>
        <para> Sends a UDP datagram to a
      remote host.
      </para>
      </summary>
      <param name="dgram">The UDP datagram that you intend to send represented as an array of bytes. </param>
      <param name="bytes">The number of bytes in the datagram. </param>
      <returns>
        <para> The number of bytes sent.
      </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)">
      <summary>
        <para> Returns a UDP datagram that was sent by a remote host.
      </para>
      </summary>
      <param name="remoteEP">An <see cref="T:System.Net.IPEndPoint" /> representing the remote host from which the data was sent. </param>
      <returns>
        <para> Datagram data as an array
      of bytes.
      </para>
      </returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)">
      <summary>
        <para> Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</para>
      </summary>
      <param name="multicastAddr">The multicast <see cref="T:System.Net.IPAddress" /> of the group you want to join. </param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)">
      <summary>
        <para> Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group with the specified Time to Live (TTL).
   </para>
      </summary>
      <param name="multicastAddr">The <see cref="T:System.Net.IPAddress" /> of the multicast group to join. </param>
      <param name="timeToLive"> The TTL measured in router hops. </param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)">
      <summary>
        <para> Leaves a multicast group.
      </para>
      </summary>
      <param name="multicastAddr">The <see cref="T:System.Net.IPAddress" />of the multicast group to leave. </param>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Client">
      <summary>
        <para> Gets or sets the underlying network socket.
      </para>
      </summary>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Active">
      <summary>
        <para> Gets or sets a value indicating whether a connection to a remote host has been
      made.
      </para>
      </summary>
    </member>
    <member name="T:System.Configuration.IConfigurationSectionHandler">
      <summary>
        <para> 
      Defines the contract that all configuration
      section handlers must implement in order to participate in the resolution of
      configuration settings.
      </para>
      </summary>
    </member>
    <member name="M:System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>
        <para> Implemented by all configuration section handlers to
      parse the XML of the configuration section. The returned object is added to the
      configuration collection and is accessed by <see cref="M:System.Configuration.ConfigurationSettings.GetConfig(System.String)" /> .
      </para>
      </summary>
      <param name="parent">The configuration settings in a corresponding parent configuration section. </param>
      <param name="configContext">An <see cref="!:System.Web.Configuration.HttpConfigurationContext" /> when called from the ASP.NET configuration system. Otherwise, this parameter is reserved and is <see langword="null" /> . </param>
      <param name="section">The <see cref="T:System.Xml.XmlNode" /> that contains the configuration information from the configuration file. Provides direct access to the XML contents of the configuration section. </param>
      <returns>
        <para>A configuration object.</para>
      </returns>
    </member>
    <member name="T:System.Configuration.ConfigurationException">
      <summary>
        <para> The exception that is thrown when an error occurs in 
 a configuration setting.</para>
      </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
   Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" /> class with the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />.
</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> containing the information required to serialize the new ConfigurationException.</param>
      <param name=" context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> containing the source and destination of the serialized stream associated with the new ConfigurationException. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.Configuration.ConfigurationException" /> class with the specified error message.</para>
      </summary>
      <param name="message">The message to display to the client when the exception is thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" /> class with the specified
 error message and <see cref="P:System.Exception.InnerException" /><see langword=" " /> property.</para>
      </summary>
      <param name="message">The message to display to the client when the exception is thrown.</param>
      <param name=" inner">The <see cref="P:System.Exception.InnerException" /> , if any, that threw the current exception.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Xml.XmlNode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" /> with the specified error message and the name
   of the configuration section containing the error.</para>
      </summary>
      <param name="message">The message to display to the client when the exception is thrown.</param>
      <param name=" node">The <see cref="T:System.Xml.XmlNode" /> that contains the error.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception,System.Xml.XmlNode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" /> class with the
   specified error
   message and <see cref="P:System.Exception.InnerException" /> and the name of the configuration section node that contains the error.</para>
      </summary>
      <param name="message">The message to display to the client when the exception is thrown.</param>
      <param name=" inner">The <see cref="P:System.Exception.InnerException" /> , if any, that threw the current exception.</param>
      <param name=" node">The <see cref="T:System.Xml.XmlNode" /> that contains the error.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" />
class with the specified error message, the name of the configuration
file that contains the error, and the line number in the file.</para>
      </summary>
      <param name="message">The message to display to the client when the exception is thrown.</param>
      <param name=" filename">The name of the configuration file that contains the error.</param>
      <param name=" line">The number of the line that contains the error.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception,System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" /> with the specified error
 message and <see cref="P:System.Exception.InnerException" />, the name of the file containing the error, and the line number of the
 error in the file.</para>
      </summary>
      <param name="message">The message to display to the client when the exception is thrown.</param>
      <param name=" inner">The <see cref="P:System.Exception.InnerException" /> , if any, that threw the current exception.</param>
      <param name=" filename">The name of the configuration file that contains the error.</param>
      <param name=" line">The number of the line that contains the error.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetXmlNodeLineNumber(System.Xml.XmlNode)">
      <summary>
        <para>Returns the line number of the configuration section node that contains the error.</para>
      </summary>
      <param name="node">The name of the configuration section node that contains the error.</param>
      <returns>
        <para>The line number that contains the error.</para>
      </returns>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetXmlNodeFilename(System.Xml.XmlNode)">
      <summary>
        <para> Returns the name of the file that contains the configuration section
      node that contains the error.</para>
      </summary>
      <param name="node">The name of the configuration section node that contains the error.</param>
      <returns>
        <para>The name of the configuration file.</para>
      </returns>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Message">
      <summary>
        <para> Gets a string containing the concatenated file name
      and line number of the error.</para>
      </summary>
    </member>
    <member name="P:System.Configuration.ConfigurationException.BareMessage">
      <summary>
        <para>Gets the base error message without file name and line number information.</para>
      </summary>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Filename">
      <summary>
        <para>Gets the name of the configuration file where the error occurred.</para>
      </summary>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Line">
      <summary>
        <para>Gets the number of the line where the error occurred.</para>
      </summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSettings">
      <summary>
        <para>Provides access to configuration settings in a specified configuration section. This class
 cannot be inherited. </para>
      </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSettings.GetConfig(System.String)">
      <summary>
        <para>Returns configuration settings for a user-defined
      configuration section.</para>
      </summary>
      <param name="sectionName">The configuration section to read.</param>
      <returns>
        <para>The configuration settings for <paramref name="sectionName" /> .</para>
      </returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSettings.AppSettings">
      <summary>
        <para>Gets configuration settings in the <see topic="gngrfAppSettingsElement" />
configuration section.</para>
      </summary>
    </member>
    <member name="M:System.Configuration.IConfigurationSystem.GetConfig(System.String)">
      <summary>
        <para>
       Returns the config object for the specified key.
    </para>
      </summary>
      <param name="configKey">
    Section name of config object to retrieve.
 </param>
    </member>
    <member name="M:System.Configuration.IConfigurationSystem.Init">
      <summary>
        <para>
       Initializes the configuration system.
    </para>
      </summary>
    </member>
    <member name="T:System.Configuration.DictionarySectionHandler">
      <summary>
        <para>Reads key-value pair configuration information for a 
      configuration section.</para>
      </summary>
    </member>
    <member name="M:System.Configuration.DictionarySectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>
        <para>Evaluates the given XML section and returns 
      a <see cref="T:System.Collections.Hashtable" /> that contains the results of the evaluation.</para>
      </summary>
      <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
      <param name=" context">The virtual path for which the configuration section handler computes configuration values. Normally this parameter is reserved and is <see langword="null" /> .</param>
      <param name=" section">The <see cref="T:System.Xml.XmlNode" /> that contains the configuration information to be handled. Provides direct access to the XML contents of the configuration section.</param>
      <returns>
        <para>A <see cref="T:System.Collections.Hashtable" /> that contains the section's configuration
   settings.</para>
      </returns>
    </member>
    <member name="P:System.Configuration.DictionarySectionHandler.KeyAttributeName">
      <summary>
        <para>Gets the name of the key attribute tag.</para>
      </summary>
    </member>
    <member name="P:System.Configuration.DictionarySectionHandler.ValueAttributeName">
      <summary>
        <para>Gets the name of the value tag.</para>
      </summary>
    </member>
    <member name="T:System.Configuration.IgnoreSectionHandler">
      <summary>
        <para> Provides a section handler definition for configuration sections
      read and handled by systems other than System.Configuration. </para>
      </summary>
    </member>
    <member name="M:System.Configuration.IgnoreSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>
        <para>Creates a new configuration handler and adds the
      specified configuration object to the section handler collection.</para>
      </summary>
      <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
      <param name=" configContext">The virtual path for which the configuration section handler computes configuration values. Normally this parameter is reserved and is <see langword="null" /> .</param>
      <param name=" section">An <see cref="T:System.Xml.XmlNode" /> that contains the configuration information to be handled. Provides direct access to the XML contents of the configuration section.</param>
      <returns>
        <para>Always returns <see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Configuration.NameValueFileSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
    </member>
    <member name="T:System.Configuration.NameValueSectionHandler">
      <summary>
        <para> Provides name-value pair configuration information from a configuration section.</para>
      </summary>
    </member>
    <member name="M:System.Configuration.NameValueSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>
        <para> Creates a new configuration handler and adds
      it to the section handler collection.</para>
      </summary>
      <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
      <param name=" context">The virtual path for which the configuration section handler computes configuration values. Normally this parameter is reserved and is <see langword="null" /> .</param>
      <param name=" section">The <see cref="T:System.Xml.XmlNode" /><see langword="" /> that contains the configuration information to be handled. Provides direct access to the XML contents of the configuration section.</param>
      <returns>
        <para>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> .</para>
      </returns>
    </member>
    <member name="P:System.Configuration.NameValueSectionHandler.KeyAttributeName">
      <summary>
        <para>The XML attribute name to use as the key in &lt;add&gt; and &lt;remove&gt; sub-elements.</para>
      </summary>
    </member>
    <member name="P:System.Configuration.NameValueSectionHandler.ValueAttributeName">
      <summary>
        <para>Gets the XML attribute name to use as the value in a key/value pair.</para>
      </summary>
    </member>
    <member name="T:System.Configuration.SingleTagSectionHandler">
      <summary>
        <para> Provides a means of reading XML attributes in a configuration section as key/value
      pairs.</para>
      </summary>
    </member>
    <member name="M:System.Configuration.SingleTagSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>
        <para>Returns a collection of configuration section values.</para>
      </summary>
      <param name=" parent">The configuration settings in a corresponding parent configuration section.</param>
      <param name=" context">An <see cref="T:System.Web.Configuration.HttpConfigurationContext" /> when called from the ASP.NET configuration system. Otherwise, this parameter is reserved and is <see langword="null" /> .</param>
      <param name="section">An <see cref="T:System.Xml.XmlNode" /> that contains configuration information from the configuration file. Provides direct access to the XML contents of the configuration section.</param>
      <returns>
        <para>A <see cref="T:System.Collections.Hashtable" /> containing configuration section
   directives.</para>
      </returns>
    </member>
    <member name="T:System.IO.NotifyFilters">
      <summary>
        <para> Specifies changes to watch
      for in a file or folder.</para>
      </summary>
    </member>
    <member name="F:System.IO.NotifyFilters.FileName">
      <summary>
        <para>The name of the file.</para>
      </summary>
    </member>
    <member name="F:System.IO.NotifyFilters.DirectoryName">
      <summary>
        <para>The name of the directory.</para>
      </summary>
    </member>
    <member name="F:System.IO.NotifyFilters.Attributes">
      <summary>
        <para>
       
       The attributes of the file or folder.
       
    </para>
      </summary>
    </member>
    <member name="F:System.IO.NotifyFilters.Size">
      <summary>
        <para>
       
       The size of the file or folder.
       
    </para>
      </summary>
    </member>
    <member name="F:System.IO.NotifyFilters.LastWrite">
      <summary>
        <para> 
      The date the file or folder last had anything written to it.
      
   </para>
      </summary>
    </member>
    <member name="F:System.IO.NotifyFilters.LastAccess">
      <summary>
        <para> The date the file or folder was last opened.
      
   </para>
      </summary>
    </member>
    <member name="F:System.IO.NotifyFilters.CreationTime">
      <summary>
        <para> The time the file or folder was created.</para>
      </summary>
    </member>
    <member name="F:System.IO.NotifyFilters.Security">
      <summary>
        <para>
       
       The security settings of the file or folder.
       
    </para>
      </summary>
    </member>
    <member name="T:System.IO.ErrorEventArgs">
      <summary>
        <para>Provides
       data for the <see cref="E:System.IO.FileSystemWatcher.Error" /> event.</para>
      </summary>
    </member>
    <member name="M:System.IO.ErrorEventArgs.#ctor(System.Exception)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.IO.ErrorEventArgs" /> class.
    </para>
      </summary>
      <param name="exception">
    An <see cref="T:System.Exception" /> that represents the error that occurred.
 </param>
    </member>
    <member name="M:System.IO.ErrorEventArgs.GetException">
      <summary>
        <para>
       Gets the <see cref="T:System.Exception" /> that represents the error that occurred.
    </para>
      </summary>
      <returns>
        <para>
       An <see cref="T:System.Exception" /> that represents the error that occurred.
    </para>
      </returns>
    </member>
    <member name="T:System.IO.ErrorEventHandler">
      <summary>
        <para>Represents the method that will
      handle the <see cref="E:System.IO.FileSystemWatcher.Error" />
      event of
      a <see cref="T:System.IO.FileSystemWatcher" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.IO.ErrorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.IO.FileSystemEventArgs">
      <summary>
        <para>Provides data for the directory events: <see cref="E:System.IO.FileSystemWatcher.Changed" />, <see cref="E:System.IO.FileSystemWatcher.Created" />, <see cref="E:System.IO.FileSystemWatcher.Deleted" />.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileSystemEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileSystemEventArgs" /> class.</para>
      </summary>
      <param name="changeType">One of the <see cref="T:System.IO.WatcherChangeTypes" /> values, which represents the kind of change detected in the file system.</param>
      <param name="directory">The root directory of the affected file or directory.</param>
      <param name="name">The name of the affected file or directory.</param>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.ChangeType">
      <summary>
        <para> Gets the type of directory event that
      occurred.
      </para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.FullPath">
      <summary>
        <para> Gets
 the
 fully qualifed path of the affected file or directory.
 </para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.Name">
      <summary>
        <para>
       Gets
       the name of the affected file or directory.
    </para>
      </summary>
    </member>
    <member name="T:System.IO.FileSystemEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.IO.FileSystemWatcher.Changed" />, <see cref="E:System.IO.FileSystemWatcher.Created" />, or <see cref="E:System.IO.FileSystemWatcher.Deleted" /> event of a <see cref="T:System.IO.FileSystemWatcher" />
class.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.IO.FileSystemWatcher">
      <summary>
        <para>Listens to the file system change notifications and
      raises events when a directory, or file in a directory, changes.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class,
   given the specified directory to monitor.</para>
      </summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class,
   given the specified directory and type of files to monitor.</para>
      </summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
      <param name="filter"> The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.BeginInit">
      <summary>
        <para>Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by
   another component. The initialization occurs at run time.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileSystemWatcher.EndInit">
      <summary>
        <para>Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by
   another component. The initialization occurs at run time.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.IO.FileSystemWatcher.Changed" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.IO.FileSystemWatcher.Created" /> event.
   </para>
      </summary>
      <param name="e">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.IO.FileSystemWatcher.Deleted" /> event.
   </para>
      </summary>
      <param name="e">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.IO.FileSystemWatcher.Error" /> event.
   </para>
      </summary>
      <param name="e">An <see cref="T:System.IO.ErrorEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
      <summary>
        <para>
       Raises the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event.
    </para>
      </summary>
      <param name="e">
    A <see cref="T:System.IO.RenamedEventArgs" /> that contains the event data.
 </param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
      <summary>
        <para> A synchronous method that returns a structure
      that contains specific information on the change that occurred, given the
      type of change you want to monitor.</para>
      </summary>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</param>
      <returns>
        <para>A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <summary>
        <para> A
      synchronous method that returns a structure that contains specific information on the change that occurred, given
      the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</para>
      </summary>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</param>
      <param name="timeout">The time (in milliseconds) to wait before timing out.</param>
      <returns>
        <para>A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</para>
      </returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.NotifyFilter">
      <summary>
        <para> Gets or sets the type of changes to watch for.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
      <summary>
        <para> Gets or sets a value indicating whether the component is enabled.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Filter">
      <summary>
        <para> Gets or sets the filter string, used to determine what files are monitored in a directory.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
      <summary>
        <para> Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemWatcher.InternalBufferSize">
      <summary>
        <para> Gets
      or sets the size of the internal buffer.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Path">
      <summary>
        <para> Gets or sets the path of the directory to watch.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemWatcher.SynchronizingObject">
      <summary>
        <para> Gets or sets the object used to marshal the event handler calls issued as a
      result of a directory change.</para>
      </summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Changed">
      <summary>
        <para>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" />
is changed.</para>
      </summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Created">
      <summary>
        <para> Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" />
is created.</para>
      </summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Deleted">
      <summary>
        <para> Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" />
is deleted.</para>
      </summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Error">
      <summary>
        <para>Occurs when the internal buffer overflows.</para>
      </summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Renamed">
      <summary>
        <para>
       Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" />
       is renamed.
    </para>
      </summary>
    </member>
    <member name="T:System.IO.InternalBufferOverflowException">
      <summary>
        <para> The exception thrown when the internal buffer overflows.</para>
      </summary>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor">
      <summary>
        <para>Initializes a new default instance of the <see cref="T:System.IO.InternalBufferOverflowException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.InternalBufferOverflowException" /> class with the error
   message to be displayed
   specified.</para>
      </summary>
      <param name="message">The message to be given for the exception.</param>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.InternalBufferOverflowException" />
class with the message to be displayed and the generated inner exception specified.</para>
      </summary>
      <param name="message">The message to be given for the exception.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="T:System.IO.IODescriptionAttribute">
      <summary>
        <para> Sets the description visual designers can display when referencing an event, extender, or
      property.</para>
      </summary>
    </member>
    <member name="M:System.IO.IODescriptionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.IODescriptionAttribute" /> class.</para>
      </summary>
      <param name="description">The description to use. </param>
    </member>
    <member name="P:System.IO.IODescriptionAttribute.Description">
      <summary>
        <para> Gets the description.</para>
      </summary>
    </member>
    <member name="M:System.IO.PatternMatcher.MatchPattern(System.String,System.String)">
      <summary>
     Tells whether a given name matches the expression given with the same
     (looser) semantics that the DOS or NT Command prompt has.
 </summary>
      <param name="expression">
     Expression used to match.  May contain '?', '*' and/or valid filename characters.
 </param>
      <param name="name">
     Filename to match.
 </param>
      <returns>
     Returns true if name matches the expression.  False otherwise.
 </returns>
    </member>
    <member name="M:System.IO.PatternMatcher.StrictMatchPattern(System.String,System.String)">
      <summary>
     Tells whether a given name matches the expression given with a strict (i.e. UNIX like)
     semantics.  This code is a port of unmanaged code.  Original code comment follows:

    Routine Description:

        This routine compares a Dbcs name and an expression and tells the caller
        if the name is in the language defined by the expression.  The input name
        cannot contain wildcards, while the expression may contain wildcards.

        Expression wild cards are evaluated as shown in the nondeterministic
        finite automatons below.  Note that ~* and ~? are DOS_STAR and DOS_QM.


                 ~* is DOS_STAR, ~? is DOS_QM, and ~. is DOS_DOT


                                           S
                                        &lt;-----&lt;
                                     X  |     |  e       Y
                 X * Y ==       (0)-----&gt;-(1)-&gt;-----(2)-----(3)


                                          S-.
                                        &lt;-----&lt;
                                     X  |     |  e       Y
                 X ~* Y ==      (0)-----&gt;-(1)-&gt;-----(2)-----(3)



                                    X     S     S     Y
                 X ?? Y ==      (0)---(1)---(2)---(3)---(4)



                                    X     .        .      Y
                 X ~.~. Y ==    (0)---(1)----(2)------(3)---(4)
                                       |      |________|
                                       |           ^   |
                                       |_______________|
                                          ^EOF or .^


                                    X     S-.     S-.     Y
                 X ~?~? Y ==    (0)---(1)-----(2)-----(3)---(4)
                                       |      |________|
                                       |           ^   |
                                       |_______________|
                                          ^EOF or .^



             where S is any single character

                   S-. is any single character except the final .

                   e is a null character transition

                   EOF is the end of the name string

        In words:

            * matches 0 or more characters.

            ? matches exactly 1 character.

            DOS_STAR matches 0 or more characters until encountering and matching
                the final . in the name.

            DOS_QM matches any single character, or upon encountering a period or
                end of name string, advances the expression to the end of the
                set of contiguous DOS_QMs.

            DOS_DOT matches either a . or zero characters beyond name string.

    Arguments:

        Expression - Supplies the input expression to check against

        Name - Supplies the input name to check for.

    Return Value:

        BOOLEAN - TRUE if Name is an element in the set of strings denoted
            by the input Expression and FALSE otherwise.

 </summary>
      <param name="expression">
     Expression used to match.  May contain '?', '*' and/or valid filename characters.
 </param>
      <param name="name">
     Filename to match.
 </param>
      <returns>
     Returns true if name matches the expression.  False otherwise.
 </returns>
    </member>
    <member name="T:System.IO.RenamedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event.</para>
      </summary>
    </member>
    <member name="M:System.IO.RenamedEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String,System.String)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.IO.RenamedEventArgs" />
       class.
    </para>
      </summary>
      <param name="changeType">
    One of the <see cref="T:System.IO.WatcherChangeTypes" /> values.
 </param>
      <param name="directory">
    The name of the affected file or directory.
 </param>
      <param name="name">
    The name of the affected file or directory.
 </param>
      <param name="oldName">
    The old name of the affected file or directory.
 </param>
    </member>
    <member name="P:System.IO.RenamedEventArgs.OldFullPath">
      <summary>
        <para> Gets
 the previous fully qualified path of the affected file or directory.
 </para>
      </summary>
    </member>
    <member name="P:System.IO.RenamedEventArgs.OldName">
      <summary>
        <para> Gets
 the old name of the affected file or directory.
 </para>
      </summary>
    </member>
    <member name="T:System.IO.RenamedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event of a <see cref="T:System.IO.FileSystemWatcher" />
class.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.IO.RenamedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.IO.WaitForChangedResult">
      <summary>
        <para>Contains information on the change that occurred.</para>
      </summary>
    </member>
    <member name="P:System.IO.WaitForChangedResult.ChangeType">
      <summary>
        <para> Gets or sets the type of change that occurred.</para>
      </summary>
    </member>
    <member name="P:System.IO.WaitForChangedResult.Name">
      <summary>
        <para> Gets or sets the name of the file or directory that changed.</para>
      </summary>
    </member>
    <member name="P:System.IO.WaitForChangedResult.OldName">
      <summary>
        <para> Gets or sets the original name of the file or directory that was
      renamed.</para>
      </summary>
    </member>
    <member name="P:System.IO.WaitForChangedResult.TimedOut">
      <summary>
        <para> Gets or sets a value indicating whether the wait operation timed out.</para>
      </summary>
    </member>
    <member name="T:System.IO.WatcherChangeTypes">
      <summary>
        <para>Changes that may occur to a file or directory.</para>
      </summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Created">
      <summary>
        <para>
       The creation of a file or folder.
    </para>
      </summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Deleted">
      <summary>
        <para>
       The deletion of a file or folder.
    </para>
      </summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Changed">
      <summary>
        <para> The change of a file or folder. The types of changes
      include: changes to size, attributes, security settings, last write, and last access time.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Renamed">
      <summary>
        <para>
       The renaming of a file or folder.
    </para>
      </summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.All">
      <summary>
        <para>The creation, deletion, change, or renaming of a file or folder.</para>
      </summary>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Timers.Timer.Elapsed" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>
        <para>Gets the time the <see cref="E:System.Timers.Timer.Elapsed" /> event was raised.</para>
      </summary>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Timers.Timer.Elapsed" />
event of a <see cref="T:System.Timers.Timer" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">An <see cref="T:System.Timers.ElapsedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>
        <para>Generates recurring events in an application.</para>
      </summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties
   to their initial values.</para>
      </summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified time period.</para>
      </summary>
      <param name="interval">The time, in milliseconds, between events.</param>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>
        <para>Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</para>
      </summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>
        <para> Releases the resources used by
      the <see cref="T:System.Timers.Timer" />.</para>
      </summary>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>
        <para> Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that
   is used on a form or by another component.</para>
      </summary>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>
        <para>Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</para>
      </summary>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>
        <para>Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</para>
      </summary>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>
        <para> Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event each time the specified
<see cref="P:System.Timers.Timer.Interval" /> elapses or only after the first
   time it elapses.</para>
      </summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>
        <para> Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" />
event.</para>
      </summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>
        <para> Gets or sets the interval at which to raise the <see cref="E:System.Timers.Timer.Elapsed" />
event.</para>
      </summary>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>
        <para>Occurs when the <see cref="P:System.Timers.Timer.Interval" />
elapses.</para>
      </summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>
        <para> Gets or sets the object used to marshal event-handler calls that are issued when
      an interval has elapsed.</para>
      </summary>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>
        <para> Sets the description that visual designers can display when referencing an event, extender, or
      property.</para>
      </summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:System.Timers.TimersDescriptionAttribute" /> class.
</summary>
      <param name="description">The description to use. </param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>
        <para> Gets the description that visual designers can display 
      when referencing an event, extender, or property.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.CounterCreationData">
      <summary>
        <para> Defines the counter type, name, and help string for a custom counter.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationData.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterCreationData" /> class, to a counter of type
<see langword="NumberOfItems32" />, and with empty name and help strings.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationData.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterCreationData" /> class, to a counter of the specified type,
   using the specified counter name and help strings.</para>
      </summary>
      <param name="counterName">The name of the counter, which must be unique within its category.</param>
      <param name=" counterHelp">The text that describes the counter's behavior.</param>
      <param name=" counterType">A <see cref="T:System.Diagnostics.PerformanceCounterType" /> that identifies the counter's behavior.</param>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterType">
      <summary>
        <para>Gets or sets the performance counter type of the custom counter.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterName">
      <summary>
        <para>Gets or sets the name of the custom counter.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterHelp">
      <summary>
        <para> Gets or sets the custom counter's description.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.CounterCreationDataCollection">
      <summary>
        <para>Provides a strongly typed collection of <see cref="T:System.Diagnostics.CounterCreationData" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> class, with no associated <see cref="T:System.Diagnostics.CounterCreationData" /> instances.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor(System.Diagnostics.CounterCreationDataCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> class, using the
   specified collection of <see cref="T:System.Diagnostics.CounterCreationData" /> instances.</para>
      </summary>
      <param name="value">A <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> that holds <see cref="T:System.Diagnostics.CounterCreationData" /> instances with which to initialize this <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> instance.</param>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor(System.Diagnostics.CounterCreationData[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> class, using the
   specified array of <see cref="T:System.Diagnostics.CounterCreationData" /> instances.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.Diagnostics.CounterCreationData" /> instances with which to initialize this <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> instance.</param>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Add(System.Diagnostics.CounterCreationData)">
      <summary>
        <para>Adds an instance of the <see cref="T:System.Diagnostics.CounterCreationData" /> class to the collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.Diagnostics.CounterCreationData" /> instance to append to the existing collection.</param>
      <returns>
        <para>The index of the new <see cref="T:System.Diagnostics.CounterCreationData" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.AddRange(System.Diagnostics.CounterCreationData[])">
      <summary>
        <para>Adds an array of <see cref="T:System.Diagnostics.CounterCreationData" /> instances to the collection.</para>
      </summary>
      <param name="value">An array of <see cref="T:System.Diagnostics.CounterCreationData" /> instances to append to the existing collection.</param>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.AddRange(System.Diagnostics.CounterCreationDataCollection)">
      <summary>
        <para>Adds a collection of <see cref="T:System.Diagnostics.CounterCreationData" /> instances to the collection.</para>
      </summary>
      <param name="value">A collection of <see cref="T:System.Diagnostics.CounterCreationData" /> instances to append to the existing collection.</param>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Contains(System.Diagnostics.CounterCreationData)">
      <summary>
        <para>Determines whether a <see cref="T:System.Diagnostics.CounterCreationData" /> instance exists in the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.Diagnostics.CounterCreationData" /> instance to find in the collection.</param>
      <returns>
        <para>
          <see langword="true" />, if the specified <see cref="T:System.Diagnostics.CounterCreationData" /> exists in the collection; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.CopyTo(System.Diagnostics.CounterCreationData[],System.Int32)">
      <summary>
        <para>Copies an array of <see cref="T:System.Diagnostics.CounterCreationData" /> instances to the collection, at the specified index.</para>
      </summary>
      <param name="array">An array of <see cref="T:System.Diagnostics.CounterCreationData" /> instances to add to the collection.</param>
      <param name=" index">The location at which to add the news instances.</param>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.IndexOf(System.Diagnostics.CounterCreationData)">
      <summary>
        <para>Returns the index of a <see cref="T:System.Diagnostics.CounterCreationData" /> instance in the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.Diagnostics.CounterCreationData" /> instance of which to determine the index in the collection.</param>
      <returns>
        <para>The zero-based index of the value in the collection.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Insert(System.Int32,System.Diagnostics.CounterCreationData)">
      <summary>
        <para>Inserts a <see cref="T:System.Diagnostics.CounterCreationData" /> instance into the
   collection, at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the location at which the <see cref="T:System.Diagnostics.CounterCreationData" /> is to be inserted.</param>
      <param name=" value">The <see cref="T:System.Diagnostics.CounterCreationData" /> instance to insert into the collection.</param>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Remove(System.Diagnostics.CounterCreationData)">
      <summary>
        <para>Removes a <see cref="T:System.Diagnostics.CounterCreationData" /> instance from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.Diagnostics.CounterCreationData" /> instance to remove from the collection.</param>
    </member>
    <member name="P:System.Diagnostics.CounterCreationDataCollection.Item(System.Int32)">
      <summary>
        <para>Indexes the <see cref="T:System.Diagnostics.CounterCreationData" /> collection.</para>
      </summary>
      <param name="index">An index into the <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> instance.</param>
    </member>
    <member name="T:System.Diagnostics.CounterSample">
      <summary>
        <para>Defines a structure holding the raw data for a performance counter.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.CounterSample.Empty">
      <summary>
        <para>Defines an empty, uninitialized performance counter sample of type 
   <see langword="NumberOfItems32" /> .</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterSample" /> class and sets the <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp" /> property
   to zero (0).</para>
      </summary>
      <param name="rawValue">The numerical value associated with the performance counter sample.</param>
      <param name=" baseValue">
        <para>An optional, base raw value for the counter, to use only if the sample is based on multiple counters.</para>
      </param>
      <param name=" counterFrequency">The frequency (number of milliseconds between samples) with which the counter is read. </param>
      <param name=" systemFrequency">The frequency with which the system reads from the counter.</param>
      <param name=" timeStamp">The raw time stamp.</param>
      <param name=" timeStamp100nSec">The raw, high-fidelity time stamp.</param>
      <param name=" counterType">A <see cref="T:System.Diagnostics.PerformanceCounterType" /> that indicates the type of the counter for which this sample is a snapshot.</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType,System.Int64)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.CounterSample" /> class and sets the <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp" /> property to the
   value passed in.</para>
      </summary>
      <param name="rawValue">The numerical value associated with the performance counter sample.</param>
      <param name=" baseValue">
        <para>An optional, base raw value for the counter, to use only if the sample is based on multiple counters.</para>
      </param>
      <param name=" counterFrequency">The frequency (number of milliseconds between samples) with which the counter is read. </param>
      <param name=" systemFrequency">The frequency with which the system reads from the counter.</param>
      <param name=" timeStamp">The raw time stamp.</param>
      <param name=" timeStamp100nSec">The raw, high-fidelity time stamp.</param>
      <param name=" counterType">A <see cref="T:System.Diagnostics.PerformanceCounterType" /> that indicates the type of the counter for which this sample is a snapshot.</param>
      <param name=" counterTimeStamp">The time at which the sample was taken.</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample)">
      <summary>
        <para>Calculates the performance data of the counter, using a 
      single sample point. Used generally for uncalculated performance counter types.</para>
      </summary>
      <param name="counterSample">The <see cref="T:System.Diagnostics.CounterSample" /> to use as a base point for calculating performance data. </param>
      <returns>
        <para>The calculated performance value.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>
        <para>Calculates the performance data of the counter, using two sample
      points. Used generally for calculated performance counter types, such as averages.</para>
      </summary>
      <param name="counterSample">The <see cref="T:System.Diagnostics.CounterSample" /> to use as a base point for calculating performance data. </param>
      <param name="nextCounterSample">The <see cref="T:System.Diagnostics.CounterSample" /> to use as an ending point for calculating performance data. </param>
      <returns>
        <para>The calculated performance value.</para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.RawValue">
      <summary>
        <para>Gets the raw value of the counter.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.CounterSample.BaseValue">
      <summary>
        <para> Gets an optional, base raw value for the counter.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.CounterSample.SystemFrequency">
      <summary>
        <para>Gets the raw system frequency.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterFrequency">
      <summary>
        <para>Gets the raw counter frequency.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterTimeStamp">
      <summary>
        <para>Gets the counter's time stamp.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp">
      <summary>
        <para>Gets the raw time stamp.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp100nSec">
      <summary>
        <para>Gets the raw, high-fidelity time stamp.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterType">
      <summary>
        <para>Gets the performance counter type.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.CounterSampleCalculator">
      <summary>
        <para>Provides a set of utility functions for interpreting performance counter 
      data. </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(System.Diagnostics.CounterSample)">
      <summary>
        <para>Computes the calculated value given a single raw counter sample.</para>
      </summary>
      <param name="newSample">A <see cref="T:System.Diagnostics.CounterSample" /> that indicates the most recent sample the system has taken. </param>
      <returns>
        <para>A floating-point representation of the performance counter's calculated value.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>
        <para>Computes the calculated value given two raw counter samples.</para>
      </summary>
      <param name="oldSample">A <see cref="T:System.Diagnostics.CounterSample" /> that indicates a previous sample the system has taken. </param>
      <param name="newSample">A <see cref="T:System.Diagnostics.CounterSample" /> that indicates the most recent sample the system has taken. </param>
      <returns>
        <para>A floating-point representation of the performance counter's calculated value.</para>
      </returns>
    </member>
    <member name="T:System.Diagnostics.EntryWrittenEventArgs">
      <summary>
        <para> Provides data for the <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> event.
   </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EntryWrittenEventArgs.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EntryWrittenEventArgs" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EntryWrittenEventArgs.#ctor(System.Diagnostics.EventLogEntry)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Diagnostics.EntryWrittenEventArgs" /> class with the
   specified event log entry.
   </para>
      </summary>
      <param name="entry">An <see cref="T:System.Diagnostics.EventLogEntry" /> that represents the entry that was written.</param>
    </member>
    <member name="P:System.Diagnostics.EntryWrittenEventArgs.Entry">
      <summary>
        <para> Gets the event log entry that was
      written to the log.
      
   </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.EntryWrittenEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> event of an <see cref="T:System.Diagnostics.EventLog" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">An <see cref="T:System.Diagnostics.EntryWrittenEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Diagnostics.EventLog">
      <summary>
        <para> Provides interaction with Windows event logs.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLog" /> class. Does not associate the instance with
   any
   log.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLog" /> class. Associates the instance with a log on
   the local computer.</para>
      </summary>
      <param name="logName">The name of the log on the local computer.</param>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLog" /> class. Associates the instance with a log on
   the specified computer.</para>
      </summary>
      <param name="logName">The name of the log on the specified computer</param>
      <param name=" machineName">The computer on which the log exists.</param>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLog" />
class. Associates the instance with a log on the specified computer and creates
or assigns the specified source to the <see cref="T:System.Diagnostics.EventLog" /> instance.</para>
      </summary>
      <param name="logName">The name of the log on the specified computer</param>
      <param name=" machineName">The computer on which the log exists.</param>
      <param name=" source">The source of event log entries.</param>
    </member>
    <member name="M:System.Diagnostics.EventLog.BeginInit">
      <summary>
        <para>Begins the initialization of an <see cref="T:System.Diagnostics.EventLog" /> used on a form
   or used by another component. The initialization occurs at runtime.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLog.Clear">
      <summary>
        <para> Removes all entries from the event log.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLog.Close">
      <summary>
        <para> Closes the event log and releases read and write handles.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)">
      <summary>
        <para> Establishes an application, using the
      specified <see cref="P:System.Diagnostics.EventLog.Source" /> , as a valid
      event source
      for writing entries to a log on the local
      computer. This method can also create
      a new custom log on the local computer.</para>
      </summary>
      <param name="source">The source name by which the application is registered on the local computer.</param>
      <param name="logName">The name of the log the source's entries are written to. Possible values include: Application, Security, System, or a custom event log.</param>
    </member>
    <member name="M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)">
      <summary>
        <para>Establishes an application, using the specified
   <see cref="P:System.Diagnostics.EventLog.Source" />, as a valid event source for writing
      entries to a log on the computer
      specified by <paramref name="machineName" />. This method can also be used to create a new
      custom log on the specified computer.</para>
      </summary>
      <param name="source">The source by which the application is registered on the specified computer.</param>
      <param name="logName">The name of the log the source's entries are written to. Possible values include: Application, Security, System, or a custom event log. If you do not specify a value, the <paramref name="logName" /> defaults to Application.</param>
      <param name="machineName">The name of the computer to register this event source with, or "." for the local computer.</param>
    </member>
    <member name="M:System.Diagnostics.EventLog.Delete(System.String)">
      <summary>
        <para> Removes
      an event
      log from the local computer.
      </para>
      </summary>
      <param name="logName">The name of the log to delete. Possible values include: Application, Security, System, and any custom event logs on the computer. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.Delete(System.String,System.String)">
      <summary>
        <para> Removes
      an
      event
      log from the specified computer.
      </para>
      </summary>
      <param name="logName">The name of the log to delete. Possible values include: Application, Security, System, and any custom event logs on the specified computer. </param>
      <param name="machineName">The name of the computer to delete the log from, or "." for the local computer. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)">
      <summary>
        <para> Removes the event source
      registration from the event log of the local computer.
      </para>
      </summary>
      <param name="source">The name by which the application is registered in the event log system. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)">
      <summary>
        <para> Removes
      the application's event source registration from the specified computer.
      </para>
      </summary>
      <param name="source">The name by which the application is registered in the event log system. </param>
      <param name="machineName">The name of the computer to remove the registration from, or <see langword="null" /> for the local computer. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.EndInit">
      <summary>
        <para>Ends the initialization of an <see cref="T:System.Diagnostics.EventLog" /> used on a form or
   by another component. The initialization occurs at runtime.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLog.Exists(System.String)">
      <summary>
        <para> Determines whether the log
      exists on the local computer.
      </para>
      </summary>
      <param name="logName">The name of the log to search for. Possible values include: Application, Security, System, other application-specific logs (such as those associated with Active Directory), or any custom log on the computer. </param>
      <returns>
        <para>
          <see langword="true " />if the log exists on the local computer; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.EventLog.Exists(System.String,System.String)">
      <summary>
        <para> Determines whether the
      log exists on the specified computer.
      </para>
      </summary>
      <param name="logName">The log for which to search. Possible values include: Application, Security, System, other application-specific logs (such as those associated with Active Directory), or any custom log on the computer. </param>
      <param name="machineName">The name of the machine on which to search for the log, or "." for the local computer. </param>
      <returns>
        <para>
          <see langword="true" /> if the log exists on the specified computer; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.EventLog.GetEventLogs">
      <summary>
        <para> Searches for all event logs on the local computer and
      creates an array of <see cref="T:System.Diagnostics.EventLog" />
      objects that contain the
      list.
      </para>
      </summary>
      <returns>
        <para> An array of type <see cref="T:System.Diagnostics.EventLog" />
that represents the logs on the
local computer.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.EventLog.GetEventLogs(System.String)">
      <summary>
        <para> Searches for all event logs on the given computer and
      creates an array of <see cref="T:System.Diagnostics.EventLog" />
      objects that contain the
      list.
      </para>
      </summary>
      <param name="machineName">The computer on which to search for event logs. </param>
      <returns>
        <para> An array of type <see cref="T:System.Diagnostics.EventLog" />
that represents the logs on the
given computer.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.EventLog.SourceExists(System.String)">
      <summary>
        <para> Determines whether an event source is registered on the local computer.
      </para>
      </summary>
      <param name="source">The name of the event source. </param>
      <returns>
        <para>
          <see langword="true" /> if the event source is registered on the local
   computer; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.EventLog.SourceExists(System.String,System.String)">
      <summary>
        <para> Determines whether an event
      source is registered on a specified computer.
      </para>
      </summary>
      <param name="source">The name of the event source. </param>
      <param name="machineName">The name the computer on which to look, or an empty string ("") for the local computer. </param>
      <returns>
        <para>
          <see langword="true " />if the event source is registered on the given computer;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)">
      <summary>
        <para> Gets the name of the log to which the specified source is registered.</para>
      </summary>
      <param name="source">The name of the event source.</param>
      <param name=" machineName">The name the computer on which to look, or an empty string ("") for the local computer.</param>
      <returns>
        <para>The name of the log associated with the specified source in the registry.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String)">
      <summary>
        <para> Writes an <see langword="information" /> type entry, with the given message text, to the event log.
   </para>
      </summary>
      <param name="message">The string to write to the event log. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String)">
      <summary>
        <para> Writes an <see langword="information " /> type entry with the given
   message text to the event log, using the specified registered event source.
   </para>
      </summary>
      <param name=" source">The source by which the application is registered on the specified computer.</param>
      <param name="message">The string to write to the event log.</param>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)">
      <summary>
        <para>Writes an error, warning, information, success audit, or failure audit
      entry with the given message text to the event log. </para>
      </summary>
      <param name="message">The string to write to the event log. </param>
      <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)">
      <summary>
        <para>Writes an error, warning, information, success audit, or failure audit entry with
      the given message text to the event log, using the specified registered event
      source.</para>
      </summary>
      <param name=" source">The source by which the application is registered on the specified computer.</param>
      <param name="message">The string to write to the event log. </param>
      <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
      <summary>
        <para>Writes an entry with the given message text and application-defined
      event identifier to the event log.</para>
      </summary>
      <param name="message">The string to write to the event log. </param>
      <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values. </param>
      <param name="eventID">The application-specific identifier for the event. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
      <summary>
        <para>Writes an entry with the given message text and application-defined event identifier to the event
      log, using the specified registered event source. </para>
      </summary>
      <param name=" source">The source by which the application is registered on the specified computer.</param>
      <param name="message">The string to write to the event log. </param>
      <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values. </param>
      <param name="eventID">The application-specific identifier for the event. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
      <summary>
        <para> Writes an entry with the given message text,
      application-defined event identifier, and application-defined category to the event log.
      </para>
      </summary>
      <param name="message">The string to write to the event log. </param>
      <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values. </param>
      <param name="eventID">The application-specific identifier for the event. </param>
      <param name="category">The application-specific subcategory associated with the message. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
      <summary>
        <para>Writes an entry with the given message text, application-defined event identifier, and application-defined category
      to the event log, using the specified
      registered event source. The <paramref name="category" /> can be used by the event viewer to filter
      events in the log.</para>
      </summary>
      <param name=" source">The source by which the application is registered on the specified computer.</param>
      <param name="message">The string to write to the event log. </param>
      <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values. </param>
      <param name="eventID">The application-specific identifier for the event. </param>
      <param name="category">The application-specific subcategory associated with the message. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
      <summary>
        <para> Writes an entry
      with the given message text, application-defined event identifier, and application-defined category
      to the event log, and appends binary data to the message.
      </para>
      </summary>
      <param name="message">The string to write to the event log. </param>
      <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values. </param>
      <param name="eventID">The application-specific identifier for the event. </param>
      <param name="category">The application-specific subcategory associated with the message. </param>
      <param name="rawData">An array of bytes that holds the binary data associated with the entry. </param>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
      <summary>
        <para>Writes an entry with the given message text, application-defined event identifier, and application-defined category
      to the event log (using the specified registered
      event source) and appends binary data to the message.</para>
      </summary>
      <param name=" source">The source by which the application is registered on the specified computer.</param>
      <param name="message">The string to write to the event log. </param>
      <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values. </param>
      <param name="eventID">The application-specific identifier for the event. </param>
      <param name="category">The application-specific subcategory associated with the message. </param>
      <param name="rawData">An array of bytes that holds the binary data associated with the entry. </param>
    </member>
    <member name="P:System.Diagnostics.EventLog.Entries">
      <summary>
        <para>Gets the contents of the event log.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLog.LogDisplayName">
      <summary>
        <para>Gets the event log's friendly name.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLog.Log">
      <summary>
        <para>Gets or sets the name of the log to read from or write to.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLog.MachineName">
      <summary>
        <para> Gets or sets the name of the computer on which to read or write events.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLog.EnableRaisingEvents">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Diagnostics.EventLog" /> instance
   receives <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> event notifications.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLog.SynchronizingObject">
      <summary>
        <para> Gets or sets the object used to marshal the event handler
      calls issued as a result of an <see cref="T:System.Diagnostics.EventLog" /> entry written
      event.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLog.Source">
      <summary>
        <para> Gets or sets the source name to register and use when writing to the event log.
      </para>
      </summary>
    </member>
    <member name="E:System.Diagnostics.EventLog.EntryWritten">
      <summary>
        <para> Occurs when an entry is written to an event log on the local computer.
      </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.EventLogEntry">
      <summary>
        <para>Encapsulates a single record in
      the event log. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)">
      <summary>
        <para> Performs a comparison between two event log entries.
 
 </para>
      </summary>
      <param name="otherEntry">The <see cref="T:System.Diagnostics.EventLogEntry" /> to compare. </param>
      <returns>
        <para>
          <see langword="true " />if the <see cref="T:System.Diagnostics.EventLogEntry" /> objects are
 identical; otherwise, <see langword="false" />.
 </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.MachineName">
      <summary>
        <para> Gets the name of the computer on which this entry was generated.
 
 </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Data">
      <summary>
        <para> Gets the binary data associated with the entry.
 
 </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Index">
      <summary>
        <para> Gets the index of this entry in the event
      log.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Category">
      <summary>
        <para> Gets the text associated with the <see cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" /> for this entry.
   </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.CategoryNumber">
      <summary>
        <para> Gets the entry's category number.
 
 </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.EventID">
      <summary>
        <para> Gets the application-specific event identifier of this event entry.
      
   </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.EntryType">
      <summary>
        <para> Gets the event type
 of this entry.
 
 </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Message">
      <summary>
        <para> Gets the localized message associated with this event entry.
      
   </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Source">
      <summary>
        <para> Gets the name of the application that generated this event.
 </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.ReplacementStrings">
      <summary>
        <para> Gets the replacement strings
 associated with the entry.
 
 </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.TimeGenerated">
      <summary>
        <para> Gets the local time at which this event was generated.
      
   </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.TimeWritten">
      <summary>
        <para> Gets the local time at which this event was written to the log.
      
   </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.UserName">
      <summary>
        <para> Gets the name of
 the user who's responsible for this event.
 </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.EventLogEntryCollection">
      <summary>
        <para> Defines size and enumerators for
      a collection of <see cref="T:System.Diagnostics.EventLogEntry" /> instances.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogEntryCollection.CopyTo(System.Diagnostics.EventLogEntry[],System.Int32)">
      <summary>
        <para>Copies the elements of the <see cref="T:System.Diagnostics.EventLogEntryCollection" /> to an array of <see cref="T:System.Diagnostics.EventLogEntry" /> instances, starting at a particular array index.</para>
      </summary>
      <param name="entries">The one-dimensional array of <see cref="T:System.Diagnostics.EventLogEntry" /> instances that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name=" index">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.Count">
      <summary>
        <para> Gets the number of entries in the event log (elements in
      the <see cref="T:System.Diagnostics.EventLogEntry" /> collection).
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.Item(System.Int32)">
      <summary>
        <para> Gets an entry in
      the event log, based on an index starting at 0.
      </para>
      </summary>
      <param name="index">The zero-based index associated with the event log entry. </param>
    </member>
    <member name="M:System.Diagnostics.EventLogEntryCollection.EntriesEnumerator.MoveNext">
    </member>
    <member name="M:System.Diagnostics.EventLogEntryCollection.EntriesEnumerator.Reset">
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.EntriesEnumerator.Current">
    </member>
    <member name="T:System.Diagnostics.EventLogEntryType">
      <summary>
        <para> Specifies the event type of an event log entry.
      
   </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.Error">
      <summary>
        <para>
       An
       error event. This indicates a significant problem the
       user should know about; usually a loss of
       functionality or data.
       
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.Warning">
      <summary>
        <para>
       A warning event. This indicates a problem that is not
       immediately significant, but that may signify conditions that could
       cause future problems.
       
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.Information">
      <summary>
        <para> An information event. This indicates a significant, successful
      operation.
      </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.SuccessAudit">
      <summary>
        <para> A success audit event. This indicates a security event
      that occurs when an audited access attempt is successful; for
      example, logging on successfully.
      
   </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.FailureAudit">
      <summary>
        <para>
       A failure audit event. This indicates a security event
       that occurs when an audited access attempt fails; for example, a failed attempt
       to open a file.
       
    </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermission">
      <summary>
        <para>Allows control of code access permissions for event
      logging.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission" /> class with the 
   specified permission state.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission" /> class with the 
   specified access levels and the name of the computer to use.</para>
      </summary>
      <param name="permissionAccess">One of the <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> values.</param>
      <param name=" machineName">The name of the computer on which to read or write events.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermission" /> class with the 
   specified permission access level entries.</para>
      </summary>
      <param name="permissionAccessEntries">An array of <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> objects. The <see cref="P:System.Diagnostics.EventLogPermission.PermissionEntries" /> property is set to this value.</param>
    </member>
    <member name="P:System.Diagnostics.EventLogPermission.PermissionEntries">
      <summary>
        <para>Gets the collection of permission entries for this permissions request.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAccess">
      <summary>
        <para>Defines access levels used by <see cref="T:System.Diagnostics.EventLog" />
permission classes.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.None">
      <summary>
        <para>The <see cref="T:System.Diagnostics.EventLog" /> has no permissions.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Browse">
      <summary>
        <para>The <see cref="T:System.Diagnostics.EventLog" /> can read existing logs.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Instrument">
      <summary>
        <para>The <see cref="T:System.Diagnostics.EventLog" /> 
can read or write to existing logs,
and create event sources and logs.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Audit">
      <summary>
        <para>The <see cref="T:System.Diagnostics.EventLog" /> can 
 read existing logs, delete event sources or logs, respond to entries, clear an
 event log, listen to events, and access a
 collection of all event logs.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAttribute">
      <summary>
        <para>Allows declaritive permission checks for event logging.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermissionAttribute" /> class.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates the permission based on the <see cref="P:System.Diagnostics.EventLogPermissionAttribute.MachineName" /> property and the requested access
   levels that are set through the <see cref="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess" /> property on the attribute.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Security.IPermission" /> that represents the created permission.</para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.MachineName">
      <summary>
        <para> Gets or sets the name of the computer on which events
      might be read.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess">
      <summary>
        <para>Gets or sets the access levels used in the permissions request.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntry">
      <summary>
        <para>Defines the smallest unit of a code access security permission that is set for an
   <see cref="T:System.Diagnostics.EventLog" />.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntry.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> class.</para>
      </summary>
      <param name="permissionAccess">A bitwise combination of the <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> values. The <see cref="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess" /> property is set to this value.</param>
      <param name=" machineName">The name of the computer on which to read or write events. The <see cref="P:System.Diagnostics.EventLogPermissionEntry.MachineName" /> property is set to this value.</param>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.MachineName">
      <summary>
        <para> Gets the name of the computer on which to read or write events.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess">
      <summary>
        <para>Gets the permission access levels used in the permissions request.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntryCollection">
      <summary>
        <para>Contains a strongly typed collection of <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Add(System.Diagnostics.EventLogPermissionEntry)">
      <summary>
        <para>Adds a specified <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> to this collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> to add.</param>
      <returns>
        <para>The zero-based index of the added <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> .</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>
        <para>Appends a set of specified permission entries to this collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> objects that contains the permission entries to add.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntryCollection)">
      <summary>
        <para> Appends a set of specified permission entries to this collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection" /> that contains the permission entries to add.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Contains(System.Diagnostics.EventLogPermissionEntry)">
      <summary>
        <para>Determines whether this collection contains a specified
   <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> .</para>
      </summary>
      <param name="value">The <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> to find.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> belongs to this collection;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.CopyTo(System.Diagnostics.EventLogPermissionEntry[],System.Int32)">
      <summary>
        <para>Copies the permission entries from this collection to an
      array, starting at a particular index of the array.</para>
      </summary>
      <param name="array">An array of type <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> that receives this collection's permission entries.</param>
      <param name=" index"> The zero-based index at which to begin copying the permission entries.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.IndexOf(System.Diagnostics.EventLogPermissionEntry)">
      <summary>
        <para>Determines the index of a specified permission entry in this collection.</para>
      </summary>
      <param name="value">The permission entry to search for.</param>
      <returns>
        <para>The zero-based index of the specified permission 
      entry, or -1 if the permission entry was not found in the collection.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.EventLogPermissionEntry)">
      <summary>
        <para>Inserts a permission entry into this collection at a specified index.</para>
      </summary>
      <param name="index">The zero-based index of the collection at which to insert the permission entry.</param>
      <param name=" value">The permission entry to insert into this collection.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Remove(System.Diagnostics.EventLogPermissionEntry)">
      <summary>
        <para>Removes a specified permission entry from this collection.</para>
      </summary>
      <param name="value">The permission entry to remove.</param>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntryCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the object at a specified index.</para>
      </summary>
      <param name="index">The zero-based index into the collection.</param>
    </member>
    <member name="T:System.Diagnostics.EventLogTraceListener">
      <summary>
        <para>Provides a simple listener that directs tracing or
      debugging output to an <see cref="T:System.Diagnostics.EventLog" />.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogTraceListener" /> class without a trace 
    listener.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogTraceListener" /> class using the 
    specified event log.</para>
      </summary>
      <param name="eventLog">An <see cref="T:System.Diagnostics.EventLog" /> that specifies the event log to write to.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogTraceListener" /> class using the
   specified source.</para>
      </summary>
      <param name="source">The name of an existing event log source.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.Close">
      <summary>
        <para> Closes the event log so that it no longer receives tracing or
 debugging output.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.Write(System.String)">
      <summary>
        <para>Writes a message to the event log for this instance.</para>
      </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.WriteLine(System.String)">
      <summary>
        <para> 
      Writes a message to the event log for this
      instance.</para>
      </summary>
      <param name="message">The message to write.</param>
    </member>
    <member name="P:System.Diagnostics.EventLogTraceListener.EventLog">
      <summary>
        <para>Gets or sets the event log to write to.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.EventLogTraceListener.Name">
      <summary>
        <para> Gets or sets the name of this <see cref="T:System.Diagnostics.EventLogTraceListener" />.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.FileVersionInfo">
      <summary>
        <para>Provides version information for a physical file on disk.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)">
      <summary>
        <para>Returns a <see cref="T:System.Diagnostics.FileVersionInfo" /> representing the version information associated with the specified file.</para>
      </summary>
      <param name="fileName">The fully qualified path and name of the file to retrieve the version information for.</param>
      <returns>
        <para>A <see cref="T:System.Diagnostics.FileVersionInfo" /> containing information
   about the file. If the file was not found, the <see cref="T:System.Diagnostics.FileVersionInfo" />
   contains only the name of the file requested.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.FileVersionInfo.ToString">
      <summary>
        <para>Returns a partial list of properties in the <see cref="T:System.Diagnostics.FileVersionInfo" />
and their values.</para>
      </summary>
      <returns>
        <para>A list of the following properties in this class and their values:</para>
        <para>
          <see cref="P:System.Diagnostics.FileVersionInfo.FileName" />, <see cref="P:System.Diagnostics.FileVersionInfo.InternalName" />, <see cref="P:System.Diagnostics.FileVersionInfo.OriginalFilename" />, <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" />, <see cref="P:System.Diagnostics.FileVersionInfo.FileDescription" />, <see cref="P:System.Diagnostics.FileVersionInfo.ProductName" />, <see cref="P:System.Diagnostics.FileVersionInfo.ProductVersion" />, <see cref="P:System.Diagnostics.FileVersionInfo.IsDebug" />, <see cref="P:System.Diagnostics.FileVersionInfo.IsPatched" />, <see cref="P:System.Diagnostics.FileVersionInfo.IsPreRelease" />, <see cref="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild" />, <see cref="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild" />.</para>
        <para>If no file with the specified name is found, this list
   will contain only the name of the requested file. Boolean values will be
<see langword="false" />, and all other entries will be <see langword="null" />. </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.Comments">
      <summary>
        <para>Gets the comments associated with the file.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.CompanyName">
      <summary>
        <para>Gets the name of the company that produced the file.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileBuildPart">
      <summary>
        <para>Gets the build number of the file.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileDescription">
      <summary>
        <para>Gets the description of the file.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileMajorPart">
      <summary>
        <para>Gets the major part of the version number.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileMinorPart">
      <summary>
        <para>Gets the minor
      part of the version number of the file.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileName">
      <summary>
        <para>Gets the name of the file that this instance of <see cref="T:System.Diagnostics.FileVersionInfo" />
describes.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FilePrivatePart">
      <summary>
        <para>Gets the file private part number.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileVersion">
      <summary>
        <para>Gets the file version number.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.InternalName">
      <summary>
        <para>Gets the internal name of the file, if one exists.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsDebug">
      <summary>
        <para>Gets a value that specifies whether the file
      contains debugging information or is compiled with debugging features enabled.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPatched">
      <summary>
        <para>Gets a value that specifies whether the file has been modified and is not identical to
      the original shipping file of the same version number.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild">
      <summary>
        <para>Gets a value that specifies whether the file was built using standard release procedures.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPreRelease">
      <summary>
        <para>Gets a value that specifies whether the file
      is a development version, rather than a commercially released product.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild">
      <summary>
        <para>Gets a value that specifies whether the file is a special build.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.Language">
      <summary>
        <para>
       Gets the default language string for the version info block.
    </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.LegalCopyright">
      <summary>
        <para>Gets all copyright notices that apply to the specified file.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.LegalTrademarks">
      <summary>
        <para>Gets the trademarks and registered trademarks that apply to the file.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.OriginalFilename">
      <summary>
        <para>Gets the name the file was created with.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.PrivateBuild">
      <summary>
        <para>Gets information about a private version of the file.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductBuildPart">
      <summary>
        <para>Gets the build number of the product this file is associated with.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductMajorPart">
      <summary>
        <para>Gets the major part of the version number for the product this file is associated with.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductMinorPart">
      <summary>
        <para>Gets the minor part of the version number for the product the file is associated with.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductName">
      <summary>
        <para>Gets the name of the product this file is distributed with.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductPrivatePart">
      <summary>
        <para>Gets the private part number of the product this file is associated with.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductVersion">
      <summary>
        <para>Gets the version of the product this file is distributed with.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.SpecialBuild">
      <summary>
        <para>Gets the special build information for the file.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ICollectData.CollectData(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ICollectData.CloseData">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.InstanceData">
      <summary>
        <para>Holds instance data associated with a performance counter sample.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.InstanceData.#ctor(System.String,System.Diagnostics.CounterSample)">
      <summary>
        <para>Initializes a new instance of the InstanceData class, 
      using the specified sample and performance counter instance.</para>
      </summary>
      <param name="instanceName">The name of an instance associated with the performance counter.</param>
      <param name=" sample">A <see cref="T:System.Diagnostics.CounterSample" /> taken from the instance specified by the <paramref name="instanceName" /> parameter.</param>
    </member>
    <member name="P:System.Diagnostics.InstanceData.InstanceName">
      <summary>
        <para>Gets the instance name associated with this instance data.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.InstanceData.Sample">
      <summary>
        <para>Gets the performance counter sample that generated this data.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.InstanceData.RawValue">
      <summary>
        <para>Gets the raw data value associated with 
      the performance counter sample.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.InstanceDataCollection">
      <summary>
        <para>Provides a strongly typed collection of <see cref="T:System.Diagnostics.InstanceData" />
objects.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.InstanceDataCollection" /> class, using the
   specified performance counter (which
   defines a performance instance).</para>
      </summary>
      <param name="counterName">The name of the counter, which often describes the quantity being counted.</param>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.Contains(System.String)">
      <summary>
        <para>Determines whether a performance instance with a
      specified name (identified by one of the indexed <see cref="T:System.Diagnostics.InstanceData" />
      objects) exists in the collection.</para>
      </summary>
      <param name="instanceName">The name of the instance to find in this collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the instance exists in the collection; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.CopyTo(System.Diagnostics.InstanceData[],System.Int32)">
      <summary>
        <para>Copies an array of <see cref="T:System.Diagnostics.InstanceData" /> instances to the
   collection, at the specified index.</para>
      </summary>
      <param name="instances">An array of <see cref="T:System.Diagnostics.InstanceData" /> instances to add to the collection.</param>
      <param name=" index">The zero-based index value at which to add the new instances.</param>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.CounterName">
      <summary>
        <para>Gets the name of the performance counter whose instance 
      data you want to get.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Keys">
      <summary>
        <para>Gets the object and counter registry keys for the
      objects associated with this instance data.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Values">
      <summary>
        <para>Gets the raw counter values that comprise the instance data for the counter.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Item(System.String)">
      <summary>
        <para>Gets the instance data associated with this counter.
      This is typically a set of raw counter values.</para>
      </summary>
      <param name="instanceName">The name of the performance counter category instance, or an empty string ("") if the category contains a single instance.</param>
    </member>
    <member name="T:System.Diagnostics.InstanceDataCollectionCollection">
      <summary>
        <para>Provides a strongly typed collection of <see cref="T:System.Diagnostics.InstanceDataCollection" />
objects.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.Contains(System.String)">
      <summary>
        <para>Determines whether an instance data collection for the
      specified counter (identified by one of the indexed <see cref="T:System.Diagnostics.InstanceDataCollection" />
      objects) exists in the collection.</para>
      </summary>
      <param name="counterName"> The name of the performance counter.</param>
      <returns>
        <para>
          <see langword="true" /> if an
   instance data collection containing the specified counter exists in the collection; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.CopyTo(System.Diagnostics.InstanceDataCollection[],System.Int32)">
      <summary>
        <para>Copies an array of <see cref="T:System.Diagnostics.InstanceDataCollection" /> instances to the collection, at the specified index.</para>
      </summary>
      <param name="counters">An array of <see cref="T:System.Diagnostics.InstanceDataCollection" /> instances (identified by the counters they contain) to add to the collection.</param>
      <param name=" index">The location at which to add the new instances.</param>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Item(System.String)">
      <summary>
        <para> Gets the instance data for the specified counter.</para>
      </summary>
      <param name="counterName"> The name of the performance counter.</param>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Keys">
      <summary>
        <para>Gets the object and counter registry keys for the
      objects associated with this instance data collection.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Values">
      <summary>
        <para>Gets the instance data values that comprise 
      the collection of instances for the counter.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.MonitoringDescriptionAttribute">
      <summary>
        <para> Specifies a description for a property
      or event.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.MonitoringDescriptionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.MonitoringDescriptionAttribute" /> class, using the 
   specified description.</para>
      </summary>
      <param name="description">The application-defined description text. </param>
    </member>
    <member name="P:System.Diagnostics.MonitoringDescriptionAttribute.Description">
      <summary>
        <para>Gets description text associated with the item monitored.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounter">
      <summary>
        <para> Represents a Windows NT performance
      counter component.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor">
      <summary>
        <para>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class, without associating the
   instance with any system or custom performance counter.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class
   and associates it with the
   specified system or custom performance counter and category instance, on the specified computer.</para>
      </summary>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated. </param>
      <param name="counterName">The name of the performance counter. </param>
      <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance. </param>
      <param name="machineName">The computer on which the performance counter and its associated category exist. </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class
   and associates it with the specified system or
   custom performance counter and category instance on the local computer.</para>
      </summary>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated. </param>
      <param name="counterName">The name of the performance counter. </param>
      <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance. </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>
        <para>Initializes a new, read-only or read/write instance
      of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class and
      associates it with the specified system or custom performance counter and category instance on the local computer.</para>
      </summary>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated. </param>
      <param name="counterName">The name of the performance counter. </param>
      <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance. </param>
      <param name="readOnly">
        <see langword="true" /> to access a counter in read-only mode; <see langword="false" /> to access a counter in read/write mode.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class and associates it with the specified
   system or custom performance counter on the local computer. This constructor requires that the category
   have a single instance.</para>
      </summary>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated. </param>
      <param name="counterName">The name of the performance counter. </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)">
      <summary>
        <para>Initializes a new, read-only or read/write instance
      of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class and associates it with the specified
      system or custom performance counter on the local computer. This constructor
      requires that the category contain a single instance.</para>
      </summary>
      <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated. </param>
      <param name="counterName">The name of the performance counter. </param>
      <param name=" readOnly">
        <see langword="true" /> to access the counter in read-only mode (though the counter itself could be read/write); <see langword="false" /> to access the counter in read/write mode.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.BeginInit">
      <summary>
        <para>Begins the initialization of a <see cref="T:System.Diagnostics.PerformanceCounter" /> instance used on a form or by another component.
   The initialization occurs at runtime.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Close">
      <summary>
        <para>Closes the performance counter and frees all the resources allocated by this performance counter
      instance.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.CloseSharedResources">
      <summary>
        <para>Frees the performance counter library shared state allocated by the counters.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Decrement">
      <summary>
        <para>Decrements the associated performance counter by one through an efficient atomic operation.</para>
      </summary>
      <returns>
        <para>The decremented counter value.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.EndInit">
      <summary>
        <para>Ends the initialization of a <see cref="T:System.Diagnostics.PerformanceCounter" /> instance that is
   used on a form or by another component. The
   initialization occurs at runtime.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)">
      <summary>
        <para> Increments or decrements the value of the
      associated performance counter by a specified amount through an efficient atomic operation.</para>
      </summary>
      <param name="value">The value to increment by. (A negative value decrements the counter.) </param>
      <returns>
        <para>The new counter value.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Increment">
      <summary>
        <para>Increments the associated performance counter by one through an efficient atomic operation.</para>
      </summary>
      <returns>
        <para>The incremented counter value.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextSample">
      <summary>
        <para>Obtains a counter sample, and returns the raw, or uncalculated, value for it.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Diagnostics.CounterSample" /> that represents the next raw value that the system obtains for this counter.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextValue">
      <summary>
        <para> Obtains a counter sample
      and returns the calculated value for it.</para>
      </summary>
      <returns>
        <para> The next calculated value that the system obtains for this counter.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.RemoveInstance">
      <summary>
        <para>Deletes the category instance specified by the <see cref="T:System.Diagnostics.PerformanceCounter" /> object <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CategoryName">
      <summary>
        <para>Gets or sets the name of the performance counter category for this performance counter.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterHelp">
      <summary>
        <para> Gets the description for this performance counter.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterName">
      <summary>
        <para>Gets or sets the name of the performance counter that
      is associated with this <see cref="T:System.Diagnostics.PerformanceCounter" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterType">
      <summary>
        <para>Gets the counter type of the associated performance counter.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceName">
      <summary>
        <para>Gets or sets an instance name for this performance counter.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.ReadOnly">
      <summary>
        <para> Gets or sets a value indicating whether this
   <see cref="T:System.Diagnostics.PerformanceCounter" /> instance is in read-only mode.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.MachineName">
      <summary>
        <para>Gets or sets the computer name for this performance counter</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.RawValue">
      <summary>
        <para> Gets or sets the raw, or uncalculated, value of this counter.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterCategory">
      <summary>
        <para>Represents a performance object, which defines a category of performance counters.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> class, leaves the <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> property empty, and
   sets the <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> property to
   the local computer.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> class, sets
   the <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> property to the specified
   value, and sets the <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> property
   to the local computer.</para>
      </summary>
      <param name="categoryName">The name of the performance counter category, or performance object, with which to associate this <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> instance. </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> class and sets
   the <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> and <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
   properties to the specified values.</para>
      </summary>
      <param name="categoryName">The name of the performance counter category, or performance object, with which to associate this <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> instance. </param>
      <param name="machineName">The computer on which the performance counter category and its associated counters exist. </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)">
      <summary>
        <para>Determines whether the specified counter is registered to this
      category, which is indicated by the <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> and <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> properties.</para>
      </summary>
      <param name="counterName">The name of the performance counter to look for. </param>
      <returns>
        <para>
          <see langword="true" /> if the counter
   is registered to the category that is specified by the <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> and <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
   properties; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String)">
      <summary>
        <para> Determines whether the specified counter is registered to the specified category on the local computer.</para>
      </summary>
      <param name="counterName">The name of the performance counter to look for.</param>
      <param name=" categoryName">The name of the performance counter category, or performance object, with which the specified performance counter is associated.</param>
      <returns>
        <para>
          <see langword="true" />, if the counter is registered to the specified category
   on the local computer; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String,System.String)">
      <summary>
        <para>Determines whether the specified counter is registered to the specified category on a remote computer.</para>
      </summary>
      <param name="counterName">The name of the performance counter to look for.</param>
      <param name=" categoryName">The name of the performance counter category, or performance object, with which the specified performance counter is associated.</param>
      <param name=" machineName">The name of the computer on which the performance counter category and its associated counters exist.</param>
      <returns>
        <para>
          <see langword="true" />, if the counter is registered to the specified category
   on the specified computer; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)">
      <summary>
        <para>Registers the custom performance counter category containing the specified
      counters on the local computer.</para>
      </summary>
      <param name="categoryName">The name of the custom performance counter category to create and register with the system. </param>
      <param name="categoryHelp">A description of the custom category. </param>
      <param name="counterData">A <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> that specifies the counters to create as part of the new category. </param>
      <returns>
        <para>A <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> that is
   associated with the new custom category, or
   performance object.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Registers a custom performance counter category containing a single counter
      of type <see langword="NumberOfItems32" /> on the local computer.</para>
      </summary>
      <param name="categoryName">The name of the custom performance counter category to create and register with the system. </param>
      <param name="categoryHelp">A description of the custom category. </param>
      <param name="counterName">The name of a new counter, of type <see langword="NumberOfItems32" />, to create as part of the new category. </param>
      <param name="counterHelp">A description of the counter that is associated with the new custom category. </param>
      <returns>
        <para>A <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> that is
   associated with the new system category,
   or performance object.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)">
      <summary>
        <para>Removes the category and its associated counters from the local computer.</para>
      </summary>
      <param name="categoryName">The name of the custom performance counter category to delete. </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)">
      <summary>
        <para>Determines whether the category is registered on the local computer.</para>
      </summary>
      <param name="categoryName"> The name of the performance counter category to look for. </param>
      <returns>
        <para>
          <see langword="true" />
          <see langword=" " />if the category
   is registered; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String,System.String)">
      <summary>
        <para>Determines whether the category is registered on the specified computer.</para>
      </summary>
      <param name="categoryName"> The name of the performance counter category to look for. </param>
      <param name="machineName">The name of the computer to examine for the category. </param>
      <returns>
        <para>
          <see langword="true" /> if the category is registered;
   otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCounters">
      <summary>
        <para> Retrieves a list of the counters in a performance counter category that contains exactly one instance.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Diagnostics.PerformanceCounter" /> objects
   indicating the counters that are
   associated with this single-instance performance counter category.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCounters(System.String)">
      <summary>
        <para>Retrieves a list of the counters in a performance counter category that contains one or more instances.</para>
      </summary>
      <param name="instanceName">The performance object instance for which to retrieve the list of associated counters.</param>
      <returns>
        <para>An array of <see cref="T:System.Diagnostics.PerformanceCounter" /> objects
   indicating the counters that
   are associated with the specified object instance of this performance counter category.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCategories">
      <summary>
        <para>Retrieves a list of the performance counter categories that are registered on the local computer.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> objects
   indicating the categories that are registered on the local computer.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCategories(System.String)">
      <summary>
        <para>Retrieves a list of the performance counter categories that are registered on the specified computer.</para>
      </summary>
      <param name="machineName">The computer to look on. </param>
      <returns>
        <para>An array of <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> objects
   indicating the categories that are registered on the specified computer.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetInstanceNames">
      <summary>
        <para>Retrieves the list of performance object instances that are associated with this category.</para>
      </summary>
      <returns>
        <para>An array of strings representing the performance
      object instance names that are associated with
      this category or, if the category contains only one performance object instance, a single-entry array that contains an empty string ("").</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)">
      <summary>
        <para>Determines whether the specified performance object instance exists in the category
      that is identified by this <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> object's <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> property.</para>
      </summary>
      <param name="instanceName">The performance object instance in this performance counter category to search for. </param>
      <returns>
        <para>
          <see langword="true" /> if the
   category contains the specified performance
   object instance; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String)">
      <summary>
        <para>Determines whether a specified category on the local computer contains the specified performance object instance.</para>
      </summary>
      <param name="instanceName"> The performance object instance to search for. </param>
      <param name=" categoryName"> The performance counter category to search.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   category contains the specified performance
   object instance; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String,System.String)">
      <summary>
        <para>Determines whether a specified category on a specified computer contains the specified performance object instance.</para>
      </summary>
      <param name="instanceName">The performance object instance to search for. </param>
      <param name=" categoryName">The performance counter category to search.</param>
      <param name=" machineName">The name of the computer on which to look for the category instance pair.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   category contains the specified
   performance object instance; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.ReadCategory">
      <summary>
        <para> Reads all the counter and performance object instance data that is associated with this performance counter category.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" /> that contains
   the counter and performance object instance data
   for the category.</para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryName">
      <summary>
        <para>Gets or sets the name of the performance object that defines this category.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryHelp">
      <summary>
        <para> Gets the category's help text.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.MachineName">
      <summary>
        <para>Gets or sets the name of the computer on which this category exists.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterManager" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermission">
      <summary>
        <para>Allows control of code access permissions for <see cref="T:System.Diagnostics.PerformanceCounter" />.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> class with the 
   specified permission state.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> class with the
   specified access levels, the name of the computer to use, and the category
   associated with the performance counter.</para>
      </summary>
      <param name="permissionAccess">One of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> values.</param>
      <param name=" machineName">The server on which the performance counter and its associate category reside.</param>
      <param name=" categoryName">The name of the performance counter category (performance object) with which the performance counter is associated.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> class with the 
   specified permission access level entries.</para>
      </summary>
      <param name="permissionAccessEntries">An array of <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> objects. The <see cref="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries" /> property is set to this value.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries">
      <summary>
        <para>Gets the collection of permission entries for this permissions request.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAccess">
      <summary>
        <para>Defines access levels used by <see cref="T:System.Diagnostics.PerformanceCounter" />
permission classes.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.None">
      <summary>
        <para>The <see cref="T:System.Diagnostics.PerformanceCounter" /> has no permissions.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Browse">
      <summary>
        <para>The <see cref="T:System.Diagnostics.PerformanceCounter" /> can read categories.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Instrument">
      <summary>
        <para>The <see cref="T:System.Diagnostics.PerformanceCounter" /> can read and write categories.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer">
      <summary>
        <para>The <see cref="T:System.Diagnostics.PerformanceCounter" /> can read, write, and create categories.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAttribute">
      <summary>
        <para>Allows declaritive performance counter permission checks.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAttribute" /> class.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates the permission based on the requested access
 levels that are set through the <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess" /> property on the attribute.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Security.IPermission" /> that represents the created permission.</para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.CategoryName">
      <summary>
        <para>Gets or sets the name of the performance counter category.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName">
      <summary>
        <para>Gets or sets the computer name for the performance counter.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess">
      <summary>
        <para>Gets or sets the access levels used in the permissions request.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntry">
      <summary>
        <para>Defines the smallest unit of a code access security permission that is set for a
   <see cref="T:System.Diagnostics.PerformanceCounter" />.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntry.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> class.</para>
      </summary>
      <param name="permissionAccess">A bitwise combination of the <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> values. The <see cref="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess" /> property is set to this value.</param>
      <param name=" machineName">The server on which the category of the performance counter resides.</param>
      <param name=" categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.CategoryName">
      <summary>
        <para> Gets the name of the performance counter category (performance object).</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.MachineName">
      <summary>
        <para>Gets the name of the server on which the category of the performance counter resides.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess">
      <summary>
        <para> Gets the permission access level of the entry.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection">
      <summary>
        <para>Contains a strongly typed collection of <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Add(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>
        <para>Adds a specified <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> to this collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> object to add.</param>
      <returns>
        <para>The zero-based index of the added <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>
        <para>Appends a set of specified permission entries to this collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> objects that contains the permission entries to add.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
      <summary>
        <para> Appends a set of specified permission entries to this collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection" /> that contains the permission entries to add.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Contains(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>
        <para>Determines whether this collection contains a specified 
 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> object.</para>
      </summary>
      <param name="value">The <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> object to find.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
 specified <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> object belongs to this collection;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.CopyTo(System.Diagnostics.PerformanceCounterPermissionEntry[],System.Int32)">
      <summary>
        <para>Copies the permission entries from this collection to an
      array, starting at a particular index of the array.</para>
      </summary>
      <param name="array">An array of type <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> that receives this collection's permission entries.</param>
      <param name=" index">The zero-based index at which to begin copying the permission entries.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.IndexOf(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>
        <para>Determines the index of a specified permission entry in this collection.</para>
      </summary>
      <param name="value">The permission entry for which to search.</param>
      <returns>
        <para>The zero-based index of the specified permission
      entry, or -1 if the permission entry was not found in the collection.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>
        <para>Inserts a permission entry into this collection at a specified index.</para>
      </summary>
      <param name="index">The zero-based index of the collection at which to insert the permission entry.</param>
      <param name=" value">The permission entry to insert into this collection.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Remove(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>
        <para>Removes a specified permission entry from this collection.</para>
      </summary>
      <param name="value">The permission entry to remove.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the object at a specified index.</para>
      </summary>
      <param name="index">The zero-based index into the collection.</param>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterType">
      <summary>
        <para> Specifies the formula used to calculate the <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> method for a <see cref="T:System.Diagnostics.PerformanceCounter" /> instance.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32">
      <summary>
        <para> 
      An instantaneous counter that
      shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.</para>
        <para>Formula: None. Does not display an average, but shows the raw data as it is 
      collected.</para>
        <para>Counters of this type include Memory\Available Bytes. </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems64">
      <summary>
        <para>An instantaneous counter that shows the most recently observed value. Used, for 
      example, to maintain a simple count of a very large number of items or
      operations. It is the same as <see langword="NumberOfItems32" /> except that it
      uses larger fields to accommodate larger values.</para>
        <para>Formula: None. Does not display an average, but shows the raw data as it is 
      collected.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32">
      <summary>
        <para>An instantaneous counter that shows the most recently observed value in 
      hexadecimal format. Used, for example, to maintain a simple count of items
      or operations.</para>
        <para>Formula: None. Does not display an average, but shows the raw data as it is 
      collected.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64">
      <summary>
        <para>An instantaneous counter that shows the most recently observed value. Used, 
      for example, to maintain a simple count of a very large number of items or
      operations. It is the same as <see langword="NumberOfItemsHEX32" /> except that it
      uses larger fields to accommodate larger values.</para>
        <para>Formula: None. Does not display an average, but shows the raw data as it is 
      collected</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32">
      <summary>
        <para> A
      difference counter that shows the average number of operations completed during each
      second of the sample
      interval. Counters of this type measure time in ticks of the system clock.</para>
        <para>Formula: (N<subscript term="1" />- N<subscript term="0" />) / ( (D<subscript term="1" />-D<subscript term="0" />) /
   F), where N<subscript term="1" /> and N<subscript term="0" /> are performance counter
   readings, D<subscript term="1" /> and D<subscript term="0" /> are their corresponding time
   readings, and F represents the number of ticks per second. Thus, the numerator
   represents the number of operations performed during the last sample interval,
   the denominator represents the number of ticks elapsed during the last sample
   interval, and F is the frequency of the ticks. The value of F is factored into
   the equation so that the result can be displayed in seconds.</para>
        <para>Counters of this type include System\ File Read Operations/sec.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64">
      <summary>
        <para>A difference counter that shows the average number of operations completed 
      during each second of the sample interval. Counters of this type measure time in
      ticks of the system clock. This counter type is the same as the
   <see langword="RateOfCountsPerSecond32" /> type, but it uses larger fields to 
      accommodate larger values to track a high-volume number of items or operations
      per second, such as a byte-transmission rate.</para>
        <para>Formula: (N<subscript term="1" />- N<subscript term="0" />) / ( (D<subscript term="1" />-D<subscript term="0" />) / 
   F), where N<subscript term="1" /> and N<subscript term="0" /> are performance counter readings,
   D<subscript term="1" /> and D<subscript term="0" /> are their corresponding time readings, and F
   represents the number of ticks per second. Thus, the numerator represents the
   number of operations performed during the last sample interval, the denominator
   represents the number of ticks elapsed during the last sample interval, and F is
   the frequency of the ticks. The value of F is factored into the equation so that
   the result can be displayed in seconds.</para>
        <para>Counters of this type include System\ File Read Bytes/sec.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32">
      <summary>
        <para>An average counter designed to monitor the average 
      length of a queue to a resource over time. It shows the difference between the
      queue lengths observed during the last two sample intervals<see langword=" " />divided by
      the duration of the interval. This
      type of counter is typically used to track the number of items that are queued or waiting.</para>
        <para>Formula: (N<subscript term="1 " />- N<subscript term="0" />) / (D<subscript term="1 " />- D<subscript term="0" />), 
   where the numerator represents the number of items in the queue and the
   denominator represents the time elapsed during the last sample interval.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64">
      <summary>
        <para>An average counter that monitors the average length of a 
      queue to a resource over time. Counters of this type display the difference
      between the queue lengths observed during the last two sample intervals,<see langword=" " />divided by the duration of the interval. This counter type is the same
      as <see langword="CountPerTimeInterval32" /> except that it uses larger
      fields to accommodate larger values. This type
      of counter is typically used to track a high-volume or very large number of
      items that are queued or waiting.</para>
        <para>Formula: (N<subscript term="1 " />- N<subscript term="0" />) / (D<subscript term="1 " />- D<subscript term="0" />), 
   where the numerator represents the number of items in a queue and the
   denominator represents the time elapsed during the sample interval.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawFraction">
      <summary>
        <para>An instantaneous percentage counter that shows the ratio 
      of a subset to its set as a percentage. For example, it compares the number of
      bytes in use on a disk to the total number of bytes on the disk. Counters of
      this type display the current percentage only, not an average over time.</para>
        <para>Formula: (N<subscript term="0" /> / D<subscript term="0" />) x 100, where D<subscript term="0" /> 
represents a measured attribute
(using a base counter of type <see langword="RawBase" />
) and N<subscript term="0" /> represents one component of that
attribute.</para>
        <para>Counters of this type include Paging File\% Usage Peak.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawBase">
      <summary>
        <para>A base counter that stores the denominator of a
      counter that presents a general arithmetic fraction. Check that this value
      is greater than zero before using it as the denominator in a
   <see langword="RawFraction" /> value calculation.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageTimer32">
      <summary>
        <para> 
      An average counter that measures the time it takes,
      on average, to complete a process or operation. Counters of this
      type display a ratio of the total elapsed time of the sample interval to the
      number of processes or operations completed during that time. This counter type measures time in ticks
      of the system
      
      clock.</para>
        <para>Formula: ((N<subscript term="1" />-N<subscript term="0" />)/F)/(B<subscript term="1" />-B<subscript term="0" />), 
   where N<subscript term="1" /> and N<subscript term="0" /> are performance counter readings,
   B<subscript term="1" /> and B<subscript term="0" /> are their corresponding
<see langword="AverageBase" /> values, and F is the number of ticks per second. 
   The value of F is factored into the equation so that the result can be displayed
   in seconds. Thus, the numerator represents the numbers of ticks counted during
   the last sample interval, F represents the frequency of the ticks, and the
   denominator represents the number of operations completed during the last sample
   interval.</para>
        <para>Counters of this type include PhysicalDisk\ Avg. Disk sec/Transfer.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageBase">
      <summary>
        <para> A base counter that is used in the calculation of time or count
      averages, such as <see langword="AverageTimer32" /> and
   <see langword="AverageCount64" /> . Stores the denominator
      for calculating a counter to present "time per operation" or "count per
      operation".</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageCount64">
      <summary>
        <para> An average counter that
      shows how many items are processed, on average, during an operation. Counters of
      this type display a ratio of the items processed to the number of operations
      completed. The ratio is calculated by comparing the number of items processed
      during the last interval to the number of operations completed during the last
      interval.</para>
        <para> Formula:
      (N<subscript term="1" />-N<subscript term="0" />)/(B<subscript term="1" />-B<subscript term="O" />), where N<subscript term="1" /> and N<subscript term="0" /> are performance counter readings, and
      the B<subscript term="1" /> and
      B<subscript term="0" />
      are their corresponding
   <see langword="AverageBase" /> 
   values. Thus, the numerator represents the numbers of items processed during
   the sample interval, and the denominator represents the number of
   operations completed during the sample interval.</para>
        <para>Counters of this type include PhysicalDisk\ Avg. Disk Bytes/Transfer.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleFraction">
      <summary>
        <para>A percentage counter that shows the average ratio 
      of hits to all operations during the last two sample intervals.</para>
        <para>Formula: ((N<subscript term="1 " />- N<subscript term="0" />) / (D<subscript term="1 " />- D<subscript term="0" />)) x 100, where the numerator represents the number 
   of successful operations during the last sample interval, and the denominator
   represents the change in the number of all operations (of the type measured)
   completed during the sample interval, using counters of type
<see langword="SampleBase" /> 

.</para>
        <para>Counters of this type include Cache\Pin Read Hits %.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleCounter">
      <summary>
        <para>An average counter that shows the average number of 
      operations completed in one second. When a counter of this type samples the
      data, each sampling interrupt returns one or zero. The counter data is
      the number of ones that were sampled. It measures time in units of
      ticks of the system performance timer.</para>
        <para>Formula: (N<subscript term="1 " />- N<subscript term="0" />) / ((D<subscript term="1 " />- D<subscript term="0" />) / F), where N<subscript term="1" /> and N<subscript term="0" /> are 
   performance counter readings, D<subscript term="1" /> and D<subscript term="0" /> are their
   corresponding <see langword="SampleBase" /> values, and F is the number of ticks
   that elapse in one second. Thus, the numerator represents the number of
   operations completed and the denominator represents elapsed time in units
   of ticks of the system performance timer. F is factored into the equation so
   that the result can be displayed in seconds.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleBase">
      <summary>
        <para>A base counter that stores the number of sampling 
      interrupts taken and is used as a denominator in the sampling fraction. The
      sampling fraction is the number of samples that were 1 (or
   <see langword="true" />) for a sample interrupt. Check that this 
      value is greater than zero before using it as the denominator in a calculation
      of <see langword="SampleCounter" />
      or <see langword="SampleFraction" /> .</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimer">
      <summary>
        <para> 
      A percentage counter that shows the
      average time that a component
      is active as a percentage of the total sample time. </para>
        <para>Formula: (N<subscript term="1 " />- N<subscript term="0" />) / (D<subscript term="1 " />- D<subscript term="0" />),
   where N<subscript term="1" /> and N<subscript term="0" /> are performance counter readings, and
   D<subscript term="1" /> and D<subscript term="0" /> are their corresponding time readings. Thus, the
   numerator represents the portions of the sample interval during which the
   monitored components were active, and the denominator represents the total
   elapsed time of the sample interval. </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimerInverse">
      <summary>
        <para>A percentage counter that displays the average 
      percentage of active time observed during sample interval. The value of these
      counters is calculated by monitoring the percentage of time that the service was
      inactive and then subtracting
      that value from 100 percent.</para>
        <para>This is an inverse counter type. Inverse counters measure the time that a 
      component is note active and derive the active time from that
      measurement. This counter type is the same as
   <see langword="CounterTimer100NsInv" /> except that it measures time in units of 
      ticks of the system performance timer rather than in 100 nanosecond units.</para>
        <para>Formula: (1- ((N<subscript term="1 " />- N<subscript term="0" />) / (D<subscript term="1 " />- 
   D<subscript term="0" />))) x 100, where the numerator represents the time during the
   interval when the monitored components were inactive, and the denominator
   represents the total elapsed time of the sample interval.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100Ns">
      <summary>
        <para>A percentage counter that shows the active time of a 
      component as a percentage of the total elapsed time of the sample interval. It
      measures time in units of 100 nanoseconds (ns). Counters of this type are
      designed to measure
      the
      activity of one component at a time. </para>
        <para>Formula: (N<subscript term="1 " />- N<subscript term="0" />) / (D<subscript term="1 " />- D<subscript term="0" />) x 
   100, where the numerator represents the portions of the sample interval during
   which the monitored components were active, and the denominator represents the
   total elapsed time of the sample interval.</para>
        <para>Counters of this type include Processor\ % User Time.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100NsInverse">
      <summary>
        <para>A percentage counter that shows the average percentage 
      of
      active time observed during the sample interval.</para>
        <para>This is an inverse counter. Counters of this type calculate active time by 
      measuring the time that the service was inactive and then subtracting the
      percentage of active time from 100 percent.</para>
        <para>Formula: (1- ((N<subscript term="1 " />- N<subscript term="0" />) / (D<subscript term="1 " />- 
   D<subscript term="0" />))) x 100, where the numerator represents the time during the
   interval when the monitored components were inactive, and the denominator
   represents the total elapsed time of the sample interval.</para>
        <para>Counters of this type include Processor\ % Processor Time.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.ElapsedTime">
      <summary>
        <para> 
      A difference timer that shows the total time between when the component or process
      started and the time when this value is calculated.</para>
        <para>Formula: (D<subscript term="0" /> - N<subscript term="0" />) / F, where D<subscript term="0" /> represents 
   the current time, N<subscript term="0" /> represents the time the object was started, and
   F represents the number of time units that elapse in one second. The value of F
   is factored into the equation so that the result can be displayed in
   seconds.</para>
        <para>Counters of this type include System\ System Up Time.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer">
      <summary>
        <para>A percentage counter that displays the active time of one
      or more components as a percentage of the total time of the sample interval.
      Because the numerator records the active time
      of components operating simultaneously, the resulting percentage can exceed 100 percent.</para>
        <para> This counter is a multitimer. Multitimers collect
      data from more than one instance of a component, such
      as a processor or disk. This counter type differs from
   <see langword="CounterMultiTimer100Ns" /> in that it
      measures time in units of ticks of the system performance timer, rather than in
      100 nanosecond units.</para>
        <para>Formula: ((N<subscript term="1 " />- N<subscript term="0" />) / (D<subscript term="1&#xD;&#xA;   " />- D<subscript term="0" />)) x 100 / B, where N<subscript term="1" /> and N<subscript term="0" /> are
   performance counter readings, D<subscript term="1" /> and D<subscript term="0" /> are their
   corresponding time readings in 100-nanosecond units, and the variable B denotes
   the base count for the monitored components (using a base counter of type
<see langword="CounterMultiBase" /> 
).
Thus, the numerator represents the portions of the sample interval during
which the monitored components were active, and the denominator represents the total elapsed time
of the sample interval.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse">
      <summary>
        <para>A percentage counter that shows the active time of one 
      or more components as a percentage of the total time of the sample interval. It
      derives the active time by measuring the time that the components were not
      active and subtracting the result from 100 percent by the number of objects
      monitored.</para>
        <para>This counter type is an inverse multitimer. Multitimers 
      monitor more than one instance of a component, such as a processor or disk.
      Inverse counters measure the time that a component is not active and derive its active time from
      that measurement.</para>
        <para>This counter differs from 
   <see langword="CounterMultiTimer100NsInverse" /> in that it measures time 
      in units of ticks of the system performance timer, rather than in 100 nanosecond
      units.</para>
        <para>Formula: (B- ((N<subscript term="1 " />- N<subscript term="0" />) / 
   (D<subscript term="1 " />- D<subscript term="0" />))) x 100, where the denominator represents
   the total elapsed time of the sample interval, the numerator represents the time
   during the interval when monitored components were inactive, and B represents
   the number of components being monitored, using a base counter of type
<see langword="CounterMultiBase" /> 

.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns">
      <summary>
        <para>A percentage counter that shows the active time of one or more 
      components as a percentage of the total time of the sample interval. It measures
      time in 100 nanosecond (ns) units.</para>
        <para>This counter type is a multitimer. Multitimers are designed to monitor more 
      than one instance of a component, such as a processor or disk.</para>
        <para>Formula: ((N<subscript term="1 " />- N<subscript term="0" />) / (D<subscript term="1 &#xD;&#xA;   " />- D<subscript term="0" />)) x 100 / B, where N<subscript term="1" /> and N<subscript term="0" />
   are performance counter readings, D<subscript term="1" /> and D<subscript term="0" /> are their
   corresponding time readings in 100-nanosecond units, and the variable B denotes
   the base count for the monitored components (using a base counter of type
<see langword="CounterMultiBase" /> 
).
Thus, the numerator represents the portions of the sample interval during
which the monitored components were active, and the denominator represents the total elapsed time
of the sample interval.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse">
      <summary>
        <para>A percentage counter that shows the active time of one 
      or more components as a percentage of the total time of the sample interval.
      Counters of this type measure time in 100 nanosecond (ns) units. They derive the
      active time by measuring the time that the components were not active and
      subtracting the result from multiplying 100 percent by the number of objects
      monitored.</para>
        <para>This counter type is an inverse multitimer. Multitimers are designed to 
      monitor more than one instance of a component, such as a processor or disk.
      Inverse counters measure the time that a component is <paramref name="not" /> active and
      derive its active time from the measurement of inactive time</para>
        <para>Formula: (B - ((N<subscript term="1 " />- N<subscript term="0" />) / (D<subscript term="1 " />- 
   D<subscript term="0" />))) x 100, where the denominator represents
   the total elapsed time of the sample interval, the numerator represents the time
   during the interval when monitored components were inactive, and B represents
   the number of components being monitored, using a base counter of type
<see langword="CounterMultiBase" /> 

.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiBase">
      <summary>
        <para> A base counter
      that indicates the number of items sampled. It is used as the denominator
      in the calculations to get an average among the items sampled when taking
      timings of multiple, but similar items. Used with
   <see langword="CounterMultiTimer" />, <see langword="CounterMultiTimerInverse" />,
   <see langword="CounterMultiTimer100Ns" />, and
   <see langword="CounterMultiTimer100NsInverse" /> 
   .</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta32">
      <summary>
        <para>A difference counter that shows the change in the measured attribute between 
      the two most recent sample intervals.</para>
        <para>
          <subscript term="" />
        </para>
        <para>Formula: N<subscript term="1" />-N<subscript term="0" />, where N<subscript term="1" /> and N<subscript term="0" /> 
are performance counter readings.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta64">
      <summary>
        <para>A difference counter that shows the change in the 
      measured attribute between the two most recent sample intervals. It is the same
      as the <see langword="CounterDelta32" />
      counter type except that is uses larger fields to accomodate larger values.</para>
        <para>Formula: N<subscript term="1" />-N<subscript term="0" />, where N<subscript term="1" /> and N<subscript term="0" /> 
are performance counter readings.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.Process">
      <summary>
        <para> Provides access to local and remote processes and
      enables you to start and stop local system processes.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Process.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.Process" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Process.CloseMainWindow">
      <summary>
        <para> Closes a process that has a user interface by sending a close message
      to its main window.
      </para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if the close message was
   successfully sent; <see langword="false" /> if
   the associated process does not have
   a main window or if the main window is disabled (for example if a modal
   dialog is being shown).
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.Close">
      <summary>
        <para> Frees all the resources that are associated with this component.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Process.EnterDebugMode">
      <summary>
        <para>Puts a <see cref="T:System.Diagnostics.Process" /> component in state to interact with
   operating system processes that run in a special mode.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Process.LeaveDebugMode">
      <summary>
        <para>Takes a <see cref="T:System.Diagnostics.Process" /> component out of the state that lets it interact with
   operating system processes that run in a special mode.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
      <summary>
        <para> Returns a new <see cref="T:System.Diagnostics.Process" /> component, given a process identifier and
 the name of a computer on the network.
 </para>
      </summary>
      <param name="processId">The system-unique identifier of a process resource. </param>
      <param name=" machineName">The name of a computer on the network. </param>
      <returns>
        <para> A <see cref="T:System.Diagnostics.Process" />
component that is associated with a remote process resource identified by the
<paramref name="processId" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
      <summary>
        <para> Returns a new <see cref="T:System.Diagnostics.Process" /> component, given the
 identifier of a process on the local computer.
 </para>
      </summary>
      <param name="processId">The system-unique identifier of a process resource. </param>
      <returns>
        <para> A <see cref="T:System.Diagnostics.Process" />
component that is associated with the local process resource
identified by the <paramref name="processId" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
      <summary>
        <para> Creates an array of new <see cref="T:System.Diagnostics.Process" /> components
   and associates
   them with all the process resources
   on the local computer that share the specified process name.
   </para>
      </summary>
      <param name="processName">The friendly name of the process. </param>
      <returns>
        <para> An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the
   specified application or file.
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
      <summary>
        <para> Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources
   on a remote computer that share the specified process name.
   </para>
      </summary>
      <param name="processName">The friendly name of the process. </param>
      <param name=" machineName">The name of a computer on the network. </param>
      <returns>
        <para> An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources
   running the specified application or file.
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcesses">
      <summary>
        <para> Creates a new <see cref="T:System.Diagnostics.Process" />
component for each process resource on the local computer.</para>
      </summary>
      <returns>
        <para> An array of type <see cref="T:System.Diagnostics.Process" /> that represents all of the process resources
   running on the local computer.
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcesses(System.String)">
      <summary>
        <para> Creates a new <see cref="T:System.Diagnostics.Process" />
component for each
process resource on the specified computer.</para>
      </summary>
      <param name="machineName">The computer from which to read the list of processes.</param>
      <returns>
        <para> An array of type <see cref="T:System.Diagnostics.Process" /> that represents all of the process resources
   running on the specified computer.
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetCurrentProcess">
      <summary>
        <para> Gets a new <see cref="T:System.Diagnostics.Process" />
component and associates it with the currently active process.</para>
      </summary>
      <returns>
        <para> A new <see cref="T:System.Diagnostics.Process" /> component associated with the process
   resource that is running the calling application.
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.OnExited">
      <summary>
        <para> Raises the <see cref="E:System.Diagnostics.Process.Exited" /> event.
   </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Process.Refresh">
      <summary>
        <para> 
      Discards any information about the associated
      process that has been cached inside the process component.
   </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Process.Start">
      <summary>
        <para> Starts (or reuses) the process resource that is specified by the <see cref="P:System.Diagnostics.Process.StartInfo" /> property of this <see cref="T:System.Diagnostics.Process" /> component and
   associates it with the
   component.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if a process resource is started; <see langword="false " />if no new
   process resource is started (for example, if an existing process is reused).
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String)">
      <summary>
        <para> Starts a process resource by specifying the name of a
      document or application file and associates the resource with a new <see cref="T:System.Diagnostics.Process" />
      component.
      </para>
      </summary>
      <param name="fileName">The name of a document or application file to run in the process. </param>
      <returns>
        <para> A new <see cref="T:System.Diagnostics.Process" />
component that is associated with the process
resource, or <see langword="null" />, if
no process resource is started (for example, if an existing process is reused).</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String)">
      <summary>
        <para> Starts a process resource by specifying the name of an
      application and a set of command line arguments, and associates the resource
      with a new <see cref="T:System.Diagnostics.Process" />
      component.
      </para>
      </summary>
      <param name="fileName">The name of an application file to run in the process. </param>
      <param name=" arguments"> Command line arguments to pass when starting the process. </param>
      <returns>
        <para> A new <see cref="T:System.Diagnostics.Process" /> component that is associated with the
   process, or <see langword="null" />, if no process resource is started (for
   example, if an existing process is reused).
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
      <summary>
        <para> Starts the process resource that is specified by the parameter
      containing process start information (for example, the file name of the process to start)
      and associates the resource with a new <see cref="T:System.Diagnostics.Process" />
      component.
      </para>
      </summary>
      <param name="startInfo">The <see cref="T:System.Diagnostics.ProcessStartInfo" /> that contains the information that is used to start the process, including the file name and any command line arguments. </param>
      <returns>
        <para> A new <see cref="T:System.Diagnostics.Process" />
component that is associated with the process
resource, or <see langword="null" /> if no process resource is started (for
example, if an existing process is reused).</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.Kill">
      <summary>
        <para> Immediately stops
 the associated process.
 </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Process.ToString">
      <summary>
        <para>Formats the process's name as a string, combined with the parent component type, if applicable.</para>
      </summary>
      <returns>
        <para>The <see cref="P:System.Diagnostics.Process.ProcessName" />, combined with the base component's
<see cref="M:System.Object.ToString" /> return value.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
      <summary>
        <para>Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to exit.</para>
      </summary>
      <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to exit. The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</param>
      <returns>
        <para>
          <see langword="true " />if the associated process has exited; otherwise,
<see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForExit">
      <summary>
        <para>Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait
   indefinitely for the associated process to exit.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
      <summary>
        <para> Causes the <see cref="T:System.Diagnostics.Process" /> component to wait the specified
   number of milliseconds for the associated process to enter an idle
   state. This
   overload applies only to processes with a user interface and,
   therefore, a message loop.
   </para>
      </summary>
      <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system. </param>
      <returns>
        <para>
          <see langword="true " />if the associated process has reached an idle
   state; otherwise, <see langword="false" />
   .
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForInputIdle">
      <summary>
        <para> Causes the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to enter an
   idle state. This overload applies only to processes with a user interface and, therefore, a message loop.
   </para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if the associated process has reached
   an idle state; otherwise, <see langword="false" />
   .
   </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.Process.BasePriority">
      <summary>
        <para> Gets the base priority of
      the associated process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.ExitCode">
      <summary>
        <para> Gets the value that the associated process specified when it terminated.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.HasExited">
      <summary>
        <para>Gets a
      value indicating whether the associated process has been terminated.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.ExitTime">
      <summary>
        <para> Gets the time that the associated process exited.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.Handle">
      <summary>
        <para> 
      Returns the associated process's native handle.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.HandleCount">
      <summary>
        <para> Gets the number of handles opened
      by the process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.Id">
      <summary>
        <para> Gets
      the unique identifier for the associated process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.MachineName">
      <summary>
        <para> Gets the name of the computer the associated process is running on.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.MainWindowHandle">
      <summary>
        <para> Gets the window handle of the main window of the associated process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.MainWindowTitle">
      <summary>
        <para> Gets the caption of the main window
      of the process.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.MainModule">
      <summary>
        <para> Gets
      the main module for the associated process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.MaxWorkingSet">
      <summary>
        <para> Gets or sets the maximum allowable working set size for the associated
      process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.MinWorkingSet">
      <summary>
        <para> Gets or sets the minimum allowable working set size for the associated
      process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.Modules">
      <summary>
        <para> Gets
      the modules that have been loaded by the associated process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.NonpagedSystemMemorySize">
      <summary>
        <para> Gets the nonpaged system memory size allocated to this process.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.PagedMemorySize">
      <summary>
        <para> Gets the paged memory size.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.PagedSystemMemorySize">
      <summary>
        <para> Gets the paged system memory
      size.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.PeakPagedMemorySize">
      <summary>
        <para> Gets the peak paged memory size.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.PeakWorkingSet">
      <summary>
        <para> Gets the
      peak working set size.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.PeakVirtualMemorySize">
      <summary>
        <para> Gets the peak
      virtural memory size.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.PriorityBoostEnabled">
      <summary>
        <para> Gets or sets a value indicating whether the associated process priority
      should temporarily be boosted by the operating system when the main window has
      the focus.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.PriorityClass">
      <summary>
        <para> Gets or sets the overall priority category for the
      associated process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.PrivateMemorySize">
      <summary>
        <para> Gets the private memory size.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.PrivilegedProcessorTime">
      <summary>
        <para> Gets the privileged processor time for
      this process.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.ProcessName">
      <summary>
        <para> 
      Gets the name of the process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.ProcessorAffinity">
      <summary>
        <para> Gets or
      sets the processors on which the threads in this process can be scheduled to run.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.Responding">
      <summary>
        <para> Gets a value indicating whether the user
      interface of the process is responding.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.StartInfo">
      <summary>
        <para> Gets or sets the properties to pass to the <see cref="M:System.Diagnostics.Process.Start" /> method of the <see cref="T:System.Diagnostics.Process" />
.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.StartTime">
      <summary>
        <para>Gets the time that the associated process was started.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.SynchronizingObject">
      <summary>
        <para> Gets or sets the object used to
      marshal the event handler calls that are issued as a result
      of a process exit event.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.Threads">
      <summary>
        <para> Gets the set of threads that are running in the associated
      process.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.TotalProcessorTime">
      <summary>
        <para>Gets the total processor time for this process.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.UserProcessorTime">
      <summary>
        <para> Gets the user processor time for this process.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.VirtualMemorySize">
      <summary>
        <para> Gets the size of the process's virtual memory.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.EnableRaisingEvents">
      <summary>
        <para>Gets or sets whether the <see cref="E:System.Diagnostics.Process.Exited" /> event should be raised
   when the process terminates.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.StandardInput">
      <summary>
        <para>Gets a <see cref="T:System.IO.StreamWriter" /> through which the application
   can write input to the process. </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.StandardOutput">
      <summary>
        <para>Gets a <see cref="T:System.IO.StreamReader" /> through which the application
   can read output from the process. </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.StandardError">
      <summary>
        <para> Gets a <see cref="T:System.IO.StreamReader" /> through which to
   read error output from the application. </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.Process.WorkingSet">
      <summary>
        <para> Gets the associated process's physical memory usage.</para>
      </summary>
    </member>
    <member name="E:System.Diagnostics.Process.Exited">
      <summary>
        <para>Occurs when a process exits.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.ProcessModule">
      <summary>
        <para> Represents a .dll
      or .exe file that is loaded
      into a particular process.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ProcessModule.ToString">
      <summary>
        <para>Converts the name of the module to a string.</para>
      </summary>
      <returns>
        <para>The value of the <see cref="P:System.Diagnostics.ProcessModule.ModuleName" /> property.</para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.ModuleName">
      <summary>
        <para>Gets the name of the process module.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.FileName">
      <summary>
        <para> Gets the full path to the module.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.BaseAddress">
      <summary>
        <para> Gets the memory address where the module was loaded.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
      <summary>
        <para> Gets
      the amount of memory that is required
      to load the module.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.EntryPointAddress">
      <summary>
        <para>Gets the memory address for the function that runs when the system loads and
      runs the module.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.FileVersionInfo">
      <summary>
        <para>Gets version information about the module.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.ProcessModuleCollection">
      <summary>
        <para>Provides a strongly typed collection of <see cref="T:System.Diagnostics.ProcessModule" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessModuleCollection" /> class, with no associated <see cref="T:System.Diagnostics.ProcessModule" /> instances.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessModuleCollection" /> class, using the specified array of <see cref="T:System.Diagnostics.ProcessModule" /> instances.</para>
      </summary>
      <param name="processModules">An array of <see cref="T:System.Diagnostics.ProcessModule" /> instances with which to initialize this <see cref="T:System.Diagnostics.ProcessModuleCollection" /> instance.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)">
      <summary>
        <para>Provides the location of a specified module within the collection.</para>
      </summary>
      <param name="module">The <see cref="T:System.Diagnostics.ProcessModule" /> whose index is retrieved.</param>
      <returns>
        <para>The zero-based index that defines the location of the module within the 
   <see cref="T:System.Diagnostics.ProcessModuleCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)">
      <summary>
        <para>Determines whether the specified process module exists 
      in the collection.</para>
      </summary>
      <param name="module">A <see cref="T:System.Diagnostics.ProcessModule" /> instance that indicates the module to find in this collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the module exists in the collection; otherwise, 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)">
      <summary>
        <para>Copies an array of <see cref="T:System.Diagnostics.ProcessModule" /> instances to the 
   collection, at the specified index.</para>
      </summary>
      <param name="array">An array of <see cref="T:System.Diagnostics.ProcessModule" /> instances to add to the collection.</param>
      <param name=" index">The location at which to add the new instances.</param>
    </member>
    <member name="P:System.Diagnostics.ProcessModuleCollection.Item(System.Int32)">
      <summary>
        <para>Provides an index for iterating over the set
      of process modules.</para>
      </summary>
      <param name="index">The zero-based index value of the module in the collection.</param>
    </member>
    <member name="T:System.Diagnostics.ProcessPriorityClass">
      <summary>
        <para>Indicates the priority that the system associates
      with a process. This value, together with the priority value
      of each thread of the process, determines each thread's base priority level.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.Normal">
      <summary>
        <para> Specifies that the process has no special scheduling needs.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.Idle">
      <summary>
        <para> Specifies that the threads of
      this process run only when the system is idle, such as a screen saver. The
      threads of the process are preempted by the threads of any process running in
      a higher priority class.</para>
        <note type="note">
      The
      idle
      priority class is inherited by child processes.
      
   </note>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.High">
      <summary>
        <para> Specifies that the process performs time-critical tasks that
      must be executed immediately, such as the <see langword="Task List" />
      
      dialog, which must respond quickly when called by the user, regardless
      of the load on the operating system. The threads of the
      process preempt the threads of normal or idle priority class processes. </para>
        <note type="caution">
      Use extreme care when specifying
   <see langword="High" /> for the process's priority class, because a high priority
      class application can use nearly all available processor time.
      
   </note>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.RealTime">
      <summary>
        <para> 
      
      Specifies that the process has the highest possible priority.</para>
        <note type="caution">
      The threads of a process
      with <see langword="RealTime" /> priority preempt the threads of all other
      processes, including operating system processes performing important tasks.
      Thus, a <see langword="RealTime" /> priority process that executes for more than a
      very brief interval can cause disk caches not to flush or cause the mouse to be
      unresponsive.
   </note>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.BelowNormal">
      <summary>
        <para>Specifies that the process has priority above 
   <see langword="Idle" /> but below <see langword="Normal" /> .</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.AboveNormal">
      <summary>
        <para>Specifies that the process has priority above 
   <see langword="Normal" /> but below <see langword="High" /> .</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.ProcessStartInfo">
      <summary>
        <para>Specifies a set of values used when starting a
      process.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessStartInfo" /> class without specifying a
   file name with which to start the process.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessStartInfo" /> class and specifies a file name such as an application or document with which to start the process.</para>
      </summary>
      <param name="fileName">An application or document with which to start a process.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessStartInfo" /> class and specifies an application file name with which to start the process, as well as a set
   of command line arguments to pass to the application.</para>
      </summary>
      <param name="fileName">An application with which to start a process.</param>
      <param name=" arguments">Command line arguments to pass to the application when the process starts.</param>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Verb">
      <summary>
        <para> Gets or sets the verb to use when opening the application or document
      specified by the <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
      property.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Arguments">
      <summary>
        <para>Gest or sets the set of command line arguments to use when starting the application.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.CreateNoWindow">
      <summary>
        <para>Gets or sets a value indicating whether to start the process in a new window.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.EnvironmentVariables">
      <summary>
        <para>Gets search paths for files, directories for temporary 
      files, application-specific options, and other similar information.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput">
      <summary>
        <para>Gets or sets a value indicating whether the process 
      command input is read from the <see cref="T:System.Diagnostics.Process" /> instance's <see cref="P:System.Diagnostics.Process.StandardInput" /> member, enabling you to
      read from a source other than the standard input stream (usually the keyboard). Used to read
      data from a file, for example.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput">
      <summary>
        <para>Gets or sets a value indicating whether the process
      output is written to the <see cref="T:System.Diagnostics.Process" /> instance's <see cref="P:System.Diagnostics.Process.StandardOutput" /> member, enabling you to write to a destination
      other than the standard output stream (usually the monitor screen). Used
      to write data to a file, for example.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError">
      <summary>
        <para>Gets or sets a value indicating whether the process's
      error output is written to the <see cref="T:System.Diagnostics.Process" /> instance's <see cref="P:System.Diagnostics.Process.StandardError" /> member,
      enabling you to write to a destination other than the standard error stream
      (usually the monitor screen). Used to write error data to a file or a log, for example.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.UseShellExecute">
      <summary>
        <para>Gets or sets a value indicating whether to use the
      operating system shell to start the process.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Verbs">
      <summary>
        <para>Gets the set of verbs associated with the type of file specified by the
   <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.FileName">
      <summary>
        <para> Gets or sets the application or document to start.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.WorkingDirectory">
      <summary>
        <para> Gets or sets the
      initial directory for the process to be started.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ErrorDialog">
      <summary>
        <para> Gets or sets a value indicating whether an error dialog is displayed to the
      user if the process cannot be started.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle">
      <summary>
        <para> Gets or sets the
      window handle to use when an error dialog is shown for a process that cannot be started.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.WindowStyle">
      <summary>
        <para> Gets or sets the window state to use when the process is started.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.ProcessThread">
      <summary>
        <para>Represents an operating system process thread.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ProcessThread.ResetIdealProcessor">
      <summary>
        <para>Resets the ideal processor for this thread to indicate that there is no single ideal processor. In other words, so
      that any processor is ideal.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.BasePriority">
      <summary>
        <para> Gets the base priority of the thread.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.CurrentPriority">
      <summary>
        <para> Gets the current priority
      of the thread.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.Id">
      <summary>
        <para> Gets the unique identifier of the thread.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.IdealProcessor">
      <summary>
        <para> Sets the preferred processor for this thread to run on.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled">
      <summary>
        <para>Gets or sets a value indicating whether the operating system should temporarily boost the priority of the associated thread whenever the main
 window of the thread's process receives the focus.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PriorityLevel">
      <summary>
        <para> Gets or
      sets the priority level of the thread.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime">
      <summary>
        <para>Gets the amount of time that the thread has spent running code inside the operating
      system core.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.StartAddress">
      <summary>
        <para> Gets the memory address of the function that the operating system called that
      started this thread.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.StartTime">
      <summary>
        <para>Gets the time that the operating system started the thread.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.ThreadState">
      <summary>
        <para> Gets the current state of this thread.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.TotalProcessorTime">
      <summary>
        <para>Gets the total amount of time that this thread has spent
      using the processor. </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.UserProcessorTime">
      <summary>
        <para> Gets the amount of time that the associated
      thread has spent running code inside the application.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.WaitReason">
      <summary>
        <para> Gets the reason that the thread is waiting.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.ProcessorAffinity">
      <summary>
        <para> Sets the processors on which the associated thread can run.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.ProcessThreadCollection">
      <summary>
        <para>Provides a strongly typed collection of <see cref="T:System.Diagnostics.ProcessThread" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessThreadCollection" /> class, with no 
   associated <see cref="T:System.Diagnostics.ProcessThread" /> instances.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.ProcessThreadCollection" /> class, using the specified array of <see cref="T:System.Diagnostics.ProcessThread" /> instances.</para>
      </summary>
      <param name="processThreads">An array of <see cref="T:System.Diagnostics.ProcessThread" /> instances with which to initialize this <see cref="T:System.Diagnostics.ProcessThreadCollection" /> instance.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)">
      <summary>
        <para>Appends a process thread to the collection.</para>
      </summary>
      <param name="thread">The thread to add to the collection.</param>
      <returns>
        <para>The zero-based index of the thread in the collection.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)">
      <summary>
        <para>Inserts a process thread at the specified location 
      in the collection.</para>
      </summary>
      <param name="index">The zero-based index indicating the location at which to insert the thread.</param>
      <param name=" thread">The thread to insert into the collection.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)">
      <summary>
        <para>Provides the location of a specified thread within the collection.</para>
      </summary>
      <param name="thread">The <see cref="T:System.Diagnostics.ProcessThread" /> whose index is retrieved.</param>
      <returns>
        <para>The zero-based index that defines the location of the thread within the 
   <see cref="T:System.Diagnostics.ProcessThreadCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)">
      <summary>
        <para>Determines whether the specified process thread exists 
      in the collection.</para>
      </summary>
      <param name="thread">A <see cref="T:System.Diagnostics.ProcessThread" /> instance that indicates the thread to find in this collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the thread exists in the collection; otherwise, 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)">
      <summary>
        <para>Deletes a process thread from the collection.</para>
      </summary>
      <param name="thread">The thread to remove from the collection.</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)">
      <summary>
        <para>Copies an array of <see cref="T:System.Diagnostics.ProcessThread" /> instances to the 
   collection, at the specified index.</para>
      </summary>
      <param name="array">An array of <see cref="T:System.Diagnostics.ProcessThread" /> instances to add to the collection.</param>
      <param name=" index">The location at which to add the new instances.</param>
    </member>
    <member name="P:System.Diagnostics.ProcessThreadCollection.Item(System.Int32)">
      <summary>
        <para>Provides an index for iterating over the set of process threads.</para>
      </summary>
      <param name="index">The zero-based index value of the thread in the collection.</param>
    </member>
    <member name="T:System.Diagnostics.ProcessWindowStyle">
      <summary>
        <para>Specified how a new window should appear when the system starts
      a process.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Normal">
      <summary>
        <para>The normal, visible window style. The system displays a 
 window with <see langword="Normal" /> style on the screen, in
 a default location. If a window is visible, the user can supply input to the
 window and view the window's output. Frequently, an application may initialize a
 new window to the <see langword="Hidden" /> style while it customizes the window's
 appearance, and then make the window style <see langword="Normal" />
 .</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Hidden">
      <summary>
        <para>The hidden window style. A window can be either visible 
 or hidden. The system displays a hidden window by not drawing it. If a
 window is hidden, it is effectively disabled. A hidden window can process
 messages from the system or from other windows, but it cannot process input from
 the user or display output. Frequently, an application may keep a new
 window hidden while it customizes the window's appearance, and then make the
 window style <see langword="Normal" />
 
 . </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Minimized">
      <summary>
        <para>The minimized window style. By default, the system 
 reduces a minimized window to the size of its taskbar button and moves the
 minimized window to the taskbar.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Maximized">
      <summary>
        <para>The maximized window style. By default, the system
 enlarges a maximized window so that it fills the screen or, in the case of a
 child window, the parent window's client area. If the window has a title bar,
 the system automatically moves it to the top of the screen or to the top of the
 parent window's client area. Also, the system disables the window's sizing
 border and the window-positioning capability of the title bar so that the user
 cannot move the window by dragging the title bar.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.ThreadPriorityLevel">
      <summary>
        <para> 
      Specifies the
      priority level of a thread.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Idle">
      <summary>
        <para>Specifies idle priority. This is the lowest possible priority
      value of all threads, independent of the value of the associated <see cref="T:System.Diagnostics.ProcessPriorityClass" /> .</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Lowest">
      <summary>
        <para>Specifies lowest priority. This is two steps below the normal priority
      for the associated <see cref="T:System.Diagnostics.ProcessPriorityClass" /> .</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.BelowNormal">
      <summary>
        <para>Specifies one step below the normal priority for the associated <see cref="T:System.Diagnostics.ProcessPriorityClass" /> .</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Normal">
      <summary>
        <para>Specifies normal priority for the associated <see cref="T:System.Diagnostics.ProcessPriorityClass" /> .</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.AboveNormal">
      <summary>
        <para>Specifies one step above the normal priority for the associated <see cref="T:System.Diagnostics.ProcessPriorityClass" /> .</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Highest">
      <summary>
        <para>Specifies highest priority. This is two steps above the normal
      priority for the associated <see cref="T:System.Diagnostics.ProcessPriorityClass" /> .</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.TimeCritical">
      <summary>
        <para>Specifies time-critical priority. This is the highest priority of all threads,
      independent of the value of the associated <see cref="T:System.Diagnostics.ProcessPriorityClass" /> .</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.ThreadState">
      <summary>
        <para>Specifies the current execution state of the thread.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Initialized">
      <summary>
        <para> A state that indicates the thread has been initialized, but has not yet started.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Ready">
      <summary>
        <para> A state that indicates the thread is waiting to use a 
 processor because no processor is free. The thread is prepared to
 run on the next available processor.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Running">
      <summary>
        <para>A state that indicates the thread is currently using a processor.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Standby">
      <summary>
        <para>A state that indicates the thread is about to use a 
 processor. Only one thread can be in this state at a time.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Terminated">
      <summary>
        <para>A state that indicates the thread has finished executing and has exited.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Wait">
      <summary>
        <para>A state that indicates the thread is not ready to use 
 the processor because it is waiting for a peripheral operation
 to complete or a resource to become free. When the thread is ready,
 it will be rescheduled.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Transition">
      <summary>
        <para>A state that indicates the thread is waiting for a resource, other than
      the processor, before it can execute. For example, it might be waiting for
      its execution stack to be paged in from disk.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Unknown">
      <summary>
        <para>The state of the thread is unknown.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.ThreadWaitReason">
      <summary>
        <para>Specifies the reason a thread is waiting.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Executive">
      <summary>
        <para>The thread is waiting for the scheduler.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.FreePage">
      <summary>
        <para>The thread is waiting for a free virtual memory page.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.PageIn">
      <summary>
        <para>The thread is waiting for a virtual memory page to arrive in memory.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.SystemAllocation">
      <summary>
        <para> The thread is waiting for system allocation.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.ExecutionDelay">
      <summary>
     Thread execution is delayed.
 </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Suspended">
      <summary>
     Thread execution is suspended.
 </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.UserRequest">
      <summary>
        <para>The thread is waiting for a user request.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.EventPairHigh">
      <summary>
        <para>The thread is waiting for event pair high.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.EventPairLow">
      <summary>
        <para>The thread is waiting for event pair low.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.LpcReceive">
      <summary>
        <para>The thread is waiting for a local procedure call to arrive.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.LpcReply">
      <summary>
        <para>The thread is waiting for reply to a local procedure call to arrive.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.VirtualMemory">
      <summary>
        <para>The thread is waiting for the system to allocate virtual memory.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.PageOut">
      <summary>
        <para>The thread is waiting for a virtual memory page to be written to disk.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Unknown">
      <summary>
        <para>The thread is waiting for an unknown reason.</para>
      </summary>
    </member>
    <member name="T:System.Configuration.AppSettingsReader">
      <summary>
        <para> Provides a method for reading values of a particular type from the .config
      file.</para>
      </summary>
    </member>
    <member name="M:System.Configuration.AppSettingsReader.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Configuration.AppSettingsReader" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Configuration.AppSettingsReader.GetValue(System.String,System.Type)">
      <summary>
        <para>Gets the value for a specified key from the <see cref="T:System.Configuration.ConfigurationSettings.AppSettings" /> property and returns an object of the
   specified type containing the value from the .config file.</para>
      </summary>
      <param name="key">The key for which to get the value.</param>
      <param name=" type">The type of the object to return.</param>
      <returns>
        <para>The value of the specified key.</para>
      </returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\tools\x86\perl\site\lib\ppm.xml ===
<PPMCONFIG>
    <PPMVER>1,0,0,0</PPMVER>
    <PLATFORM CPU="x86" OSVALUE="MSWin32" OSVERSION="4,0,0,0" />
    <OPTIONS BUILDDIR="C:\temp" CLEAN="Yes" CONFIRM="Yes" FORCEINSTALL="Yes" IGNORECASE="Yes" MORE="0" ROOT="C:\perl\5.005" TRACE="0" TRACEFILE="PPM.LOG" />
    <REPOSITORY LOCATION="http://www.activestate.com/Packages/" NAME="ActiveState Package Repository" SUMMARYFILE="package.lst" />
    <PPMPRECIOUS>PPM;Archive-Tar;Compress-Zlib;libwww-perl;XML-Parser;XML-Element;MIME-Base64;HTML-Parser;libwin32</PPMPRECIOUS>

<PACKAGE NAME="PPM">
<LOCATION>http://www.activestate.com/packages</LOCATION>
<INSTPACKLIST>g:\Perlinstall\site\lib/auto/PPM/.packlist</INSTPACKLIST>
<INSTROOT>g:\Perlinstall</INSTROOT>
<INSTDATE>Fri Oct  2 16:14:32 1998</INSTDATE>
<INSTPPD>
<SOFTPKG NAME="PPM" VERSION="1,0,0,0">
<TITLE>PPM</TITLE>
<ABSTRACT>Perl Package Manager: locate, install, upgrade software packages.</ABSTRACT>
<AUTHOR>ActiveState Tool Corp.</AUTHOR>
<IMPLEMENTATION>
<DEPENDENCY NAME="Compress-Zlib" VERSION="" />
<DEPENDENCY NAME="Archive-Tar" VERSION="" />
<DEPENDENCY NAME="MIME-Base64" VERSION="" />
<DEPENDENCY NAME="URI" VERSION="" />
<DEPENDENCY NAME="HTML-Parser" VERSION="" />
<DEPENDENCY NAME="libwww-perl" VERSION="" />
<DEPENDENCY NAME="XML-Parser" VERSION="" />
<DEPENDENCY NAME="XML-Element" VERSION="" />
<CODEBASE HREF="x86/PPM.tar.gz" />
<INSTALL />
<UNINSTALL />
</IMPLEMENTATION>
</SOFTPKG>
</INSTPPD>
</PACKAGE>

<PACKAGE NAME="Archive-Tar">
<LOCATION>http://www.activestate.com/packages</LOCATION>
<INSTPACKLIST>g:\Perlinstall\site\lib/auto/Archive/Tar/.packlist</INSTPACKLIST>
<INSTROOT>g:\Perlinstall</INSTROOT>
<INSTDATE>Fri Oct  2 16:14:37 1998</INSTDATE>
<INSTPPD>
<SOFTPKG NAME="Archive-Tar" VERSION="0,072,0,0">
<TITLE>Archive-Tar</TITLE>
<ABSTRACT>module for manipulation of tar archives.</ABSTRACT>
<AUTHOR>Stephen Zander &lt;gibreel@pobox.com&gt;</AUTHOR>
<IMPLEMENTATION>
<CODEBASE HREF="x86/Archive-Tar.tar.gz" />
<INSTALL />
<UNINSTALL />
</IMPLEMENTATION>
</SOFTPKG>
</INSTPPD>
</PACKAGE>

<PACKAGE NAME="MIME-Base64">
<LOCATION>http://www.ActiveState.com/packages</LOCATION>
<INSTPACKLIST>g:\Perlinstall\site\lib/auto/MIME/Base64/.packlist</INSTPACKLIST>
<INSTROOT>g:\Perlinstall</INSTROOT>
<INSTDATE>Fri Nov 13 14:05:30 1998</INSTDATE>
<INSTPPD>
<SOFTPKG NAME="MIME-Base64" VERSION="2,11,0,0">
<TITLE>MIME-Base64</TITLE>
<ABSTRACT>Encoding and decoding of base64 strings</ABSTRACT>
<AUTHOR>Gisle Aas &lt;gisle@aas.no&gt;</AUTHOR>
<IMPLEMENTATION>
<CODEBASE HREF="x86/MIME-Base64.tar.gz" />
<INSTALL />
<UNINSTALL />
</IMPLEMENTATION>
</SOFTPKG>
</INSTPPD>
</PACKAGE>

<PACKAGE NAME="URI">
<LOCATION>http://www.activestate.com/packages</LOCATION>
<INSTPACKLIST>g:\Perlinstall\site\lib/auto/URI/.packlist</INSTPACKLIST>
<INSTROOT>g:\Perlinstall</INSTROOT>
<INSTDATE>Fri Oct  2 16:15:15 1998</INSTDATE>
<INSTPPD>
<SOFTPKG NAME="URI" VERSION="1,04,0,0">
<TITLE>URI</TITLE>
<ABSTRACT>Uniform Resource Identifiers (absolute and relative)</ABSTRACT>
<AUTHOR>Gisle Aas &lt;gisle@aas.no&gt;</AUTHOR>
<IMPLEMENTATION>
<DEPENDENCY NAME="MIME-Base64" VERSION="" />
<CODEBASE HREF="x86/URI.tar.gz" />
<INSTALL />
<UNINSTALL />
</IMPLEMENTATION>
</SOFTPKG>
</INSTPPD>
</PACKAGE>

<PACKAGE NAME="HTML-Parser">
<LOCATION>http://www.activestate.com/packages</LOCATION>
<INSTPACKLIST>g:\Perlinstall\site\lib/auto/HTML/Parser/.packlist</INSTPACKLIST>
<INSTROOT>g:\Perlinstall</INSTROOT>
<INSTDATE>Fri Oct  2 16:15:15 1998</INSTDATE>
<INSTPPD>
<SOFTPKG NAME="HTML-Parser" VERSION="2,23,0,0">
<TITLE>HTML-Parser</TITLE>
<ABSTRACT>SGML parser class</ABSTRACT>
<AUTHOR>Gisle Aas &lt;gisle@aas.no&gt;</AUTHOR>
<IMPLEMENTATION>
<CODEBASE HREF="x86/HTML-Parser.tar.gz" />
<INSTALL />
<UNINSTALL />
</IMPLEMENTATION>
</SOFTPKG>
</INSTPPD>
</PACKAGE>

<PACKAGE NAME="libwww-perl">
<LOCATION>http://www.activestate.com/packages</LOCATION>
<INSTPACKLIST>g:\Perlinstall\site\lib/auto/LWP/.packlist</INSTPACKLIST>
<INSTROOT>g:\Perlinstall</INSTROOT>
<INSTDATE>Fri Oct  2 16:15:15 1998</INSTDATE>
<INSTPPD>
<SOFTPKG NAME="libwww-perl" VERSION="5,45,0,0">
<TITLE>libwww-perl</TITLE>
<ABSTRACT>Library for WWW access in Perl</ABSTRACT>
<AUTHOR>Gisle Aas &lt;gisle@aas.no&gt;</AUTHOR>
<IMPLEMENTATION>
<DEPENDENCY NAME="URI" VERSION="" />
<DEPENDENCY NAME="HTML-Parser" VERSION="" />
<CODEBASE HREF="x86/libwww-perl.tar.gz" />
<INSTALL />
<UNINSTALL />
</IMPLEMENTATION>
</SOFTPKG>
</INSTPPD>
</PACKAGE>

<PACKAGE NAME="XML-Element">
<LOCATION>http://www.activestate.com/packages</LOCATION>
<INSTPACKLIST>g:\Perlinstall\site\lib/auto/XML/Element/.packlist</INSTPACKLIST>
<INSTROOT>g:\Perlinstall</INSTROOT>
<INSTDATE>Fri Oct  2 16:16:03 1998</INSTDATE>
<INSTPPD>
<SOFTPKG NAME="XML-Element" VERSION="0,10,0,0">
<TITLE>XML-Element</TITLE>
<ABSTRACT>Base element class for XML elements</ABSTRACT>
<AUTHOR>ActiveState Tool Corp.</AUTHOR>
<IMPLEMENTATION>
<DEPENDENCY NAME="XML-Parser" VERSION="" />
<CODEBASE HREF="x86/XML-Element.tar.gz" />
<INSTALL />
<UNINSTALL />
</IMPLEMENTATION>
</SOFTPKG>
</INSTPPD>
</PACKAGE>

<PACKAGE NAME="XML-Parser">
<LOCATION>http://www.activestate.com/packages</LOCATION>
<INSTPACKLIST>g:\Perlinstall\site\lib/auto/XML/Parser/.packlist</INSTPACKLIST>
<INSTROOT>g:\Perlinstall</INSTROOT>
<INSTDATE>Fri Oct  2 16:16:03 1998</INSTDATE>
<INSTPPD>
<SOFTPKG NAME="XML-Parser" VERSION="2,27,0,0">
<TITLE>XML-Parser</TITLE>
<ABSTRACT>A Perl module for parsing XML documents</ABSTRACT>
<AUTHOR>Clark Cooper &lt;coopercl@sch.ge.com&gt;</AUTHOR>
<IMPLEMENTATION>
<CODEBASE HREF="x86/XML-Parser.tar.gz" />
<INSTALL />
<UNINSTALL />
</IMPLEMENTATION>
</SOFTPKG>
</INSTPPD>
</PACKAGE>

<PACKAGE NAME="Compress-Zlib">
<LOCATION>http://www.activestate.com/packages</LOCATION>
<INSTPACKLIST>g:\Perlinstall\site\lib/auto/Compress/Zlib/.packlist</INSTPACKLIST>
<INSTROOT>g:\Perlinstall</INSTROOT>
<INSTDATE>Fri Oct  2 16:16:03 1998</INSTDATE>
<INSTPPD>
<SOFTPKG NAME="Compress-Zlib" VERSION="1,03,0,0">
<TITLE>Compress-Zlib</TITLE>
<ABSTRACT>Interface to zlib compression library</ABSTRACT>
<AUTHOR>Paul Marquess &lt;pmarquess@bfsec.bt.co.uk&gt;</AUTHOR>
<IMPLEMENTATION>
<CODEBASE HREF="x86/Compress-Zlib.tar.gz" />
<INSTALL />
<UNINSTALL />
</IMPLEMENTATION>
</SOFTPKG>
</INSTPPD>
</PACKAGE>

<PACKAGE NAME="libwin32">
<LOCATION>http://www.activestate.com/packages</LOCATION>
<INSTPACKLIST>g:\Perlinstall\site\lib/auto/Win32/.packlist</INSTPACKLIST>
<INSTROOT>g:\Perlinstall</INSTROOT>
<INSTDATE>Fri Oct  2 16:16:03 1998</INSTDATE>
<INSTPPD>
<SOFTPKG NAME="libwin32" VERSION="0,15,1,0">
<TITLE>libwin32</TITLE>
<ABSTRACT>Win32-only extensions that provides a quick migration path for people wanting to use the core support for win32 in perl 5.004 and later.</ABSTRACT>
<AUTHOR>Gurusamy Sarathy &lt;gsar@umich.edu&gt;</AUTHOR>
<IMPLEMENTATION>
<CODEBASE HREF="x86/libwin32.tar.gz" />
<INSTALL />
<UNINSTALL />
</IMPLEMENTATION>
</SOFTPKG>
</INSTPPD>
</PACKAGE>

</PPMCONFIG>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\base.txt ===
msctf	    0x60000000  0x10100000
msctfp	    0x60100000  0x10080000
sptip	    0x60180000  0x10080000
msutb	    0x60200000  0x10080000
msimtf      0x60280000  0x10080000
dimmwrp     0x60300000  0x10080000
mscandui    0x60380000  0x10080000
softkbd     0x60400000  0x10080000
; hkl's never loaded simultaneously
hkl0404     0x60480000  0x10080000
hkl0411     0x60480000  0x10080000
hkl0412     0x60480000  0x10080000
hkl0804     0x60480000  0x10080000
; we don't ship simx or kimx or msuimui
simx	    0x60500000  0x10080000
kimx	    0x60580000  0x10080000
msuimui     0x60600000  0x10080000
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\killfile.txt ===
.obj
.pch
.exp
\doc\
\setup\
\kanasoft\
\gram\
.bat
.doc
.ppt
.xls
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\mscandui\mscandui.xml ===
<GRAMMAR LANGID="409">
    <DEFINE>
           <ID NAME="ID_Candidate" VAL="1"/>
    </DEFINE>

   <RULE NAME = "ID_Candidate" ID="ID_Candidate" TOPLEVEL="ACTIVE">
      <O>please</O>
      <LN PROPNAME="ID_Candidate">
         <PN VALSTR="Finalize">+finalize</PN>
         <PN VALSTR="Finalize">+select</PN>
         <PN VALSTR="Cancel">+cancel</PN>
         <PN VALSTR="Next">+next</PN>
         <PN VALSTR="Menu">+menu</PN>
         <PN VALSTR="Select1">+select one</PN>
         <PN VALSTR="Select2">+select two</PN>
         <PN VALSTR="Select3">+select three</PN>
         <PN VALSTR="Select4">+select four</PN>
         <PN VALSTR="Select5">+select five</PN>
         <PN VALSTR="Select6">+select six</PN>
         <PN VALSTR="Select7">+select seven</PN>
         <PN VALSTR="Select8">+select eight</PN>
         <PN VALSTR="Select9">+select nine</PN>
         <PN VALSTR="PageDown">+page down</PN>
         <PN VALSTR="PageUp">+page up</PN>
      </LN>
      <O>that</O>
      <O>this</O>
      <O>it</O>
   </RULE>

</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\mscandui\mscanduijp.xml ===
< G R A M M A R   L A N G I D = " 4 1 1 " > 
 
         < D E F I N E > 
 
                 < I D   N A M E = " I D _ C a n d i d a t e "   V A L = " 1 " / > 
 
         < / D E F I N E > 
 
         < R U L E   N A M E   =   " I D _ C a n d i d a t e "   I D = " I D _ C a n d i d a t e "   T O P L E V E L = " A C T I V E " > 
 
                 < L N   P R O P N A M E = " I D _ C a n d i d a t e " > 
 
                         < P N   V A L S T R = " F i n a l i z e " > + / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " C a n c e l " > + / 00000/ M000[00/ 00000; < / P N > 
 
                         < P N   V A L S T R = " C a n c e l " > + / S0mW0/ h00Q0W0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " N e x t " > + / !k/ d0N0/ 00; < / P N > 
 
                         < P N   V A L S T R = " N e x t " > + / !kP܈/ X0S0F0{0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " M e n u " > + / 0000/ 0k00F0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 1 " > + / 1 / D0a0/ 00; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 2 " > + / 2 / k0/ 0; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 3 " > + / 3 / U00/ 00; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 4 " > + / 4 / W0/ 0; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 4 " > + / 4 / 00/ 00; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 5 " > + / 5 / T0/ 0; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 6 " > + / 6 / 0O0/ 00; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 7 " > + / 7 / W0a0/ 00; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 7 " > + / 7 / j0j0/ 00; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 8 " > + / 8 / o0a0/ 00; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " S e l e c t 9 " > + / 9 / M00F0/ 000; / 0/ 0/ 0; / xb/ [00_0O0/ 0000; < / P N > 
 
                         < P N   V A L S T R = " P a g e D o w n " > + / !k/ d0N0/ 00; / n0/ n0/ 0; / 000/ z00X0/ 000; < / P N > 
 
                         < P N   V A L S T R = " P a g e U p " > + / MR/ ~0H0/ 00; / n0/ n0/ 0; / 000/ z00X0/ 000; < / P N > 
 
 
 
                 < / L N > 
 
           < / R U L E > 
 
 < / G R A M M A R > 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\mscandui\mscanduichs.xml ===
﻿<GRAMMAR LANGID="804">
    <DEFINE>
           <ID NAME="ID_Candidate" VAL="1"/>
    </DEFINE>

   <RULE NAME = "ID_Candidate" ID="ID_Candidate" TOPLEVEL="ACTIVE">
      <O>请</O>
      <LN PROPNAME="ID_Candidate">
         <PN VALSTR="Finalize">+确定</PN>
         <PN VALSTR="Finalize">+选中</PN>
         <PN VALSTR="Finalize">+选择</PN>
         <PN VALSTR="Cancel">+取消</PN>
         <PN VALSTR="Next">+下一个</PN>
         <PN VALSTR="Menu">+菜单</PN>
         <PN VALSTR="Select1">+选择一</PN>
         <PN VALSTR="Select1">+第一个</PN>
         <PN VALSTR="Select2">+选择二</PN>
         <PN VALSTR="Select2">+第二个</PN>
         <PN VALSTR="Select3">+选择三</PN>
         <PN VALSTR="Select3">+第三个</PN>
         <PN VALSTR="Select4">+选择四</PN>
         <PN VALSTR="Select4">+第四个</PN>
         <PN VALSTR="Select5">+选择五</PN>
         <PN VALSTR="Select5">+第五个</PN>
         <PN VALSTR="Select6">+选择六</PN>
         <PN VALSTR="Select6">+第六个</PN>
         <PN VALSTR="Select7">+选择七</PN>
         <PN VALSTR="Select7">+第七个</PN>
         <PN VALSTR="Select8">+选择八</PN>
         <PN VALSTR="Select8">+第八个</PN>
         <PN VALSTR="Select9">+选择九</PN>
         <PN VALSTR="Select9">+第九个</PN>
         <PN VALSTR="PageDown">+下一页</PN>
         <PN VALSTR="PageUp">+上一页</PN>
      </LN>
      <O>那个</O>
      <O>这个</O>
      <O>它</O>
   </RULE>

</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\dictcmd.xml ===
<GRAMMAR LANGID="409">
    <DEFINE> 
        <ID NAME="ID_ToolbarCmd" VAL="3"/>
        <ID NAME="ID_UrlHistory" VAL="4"/>
    </DEFINE>
    <!--  
        These toolbar commands are applicable only to dictation mode.
        In Voice command mode, the toolbar grammar will be dynamically generated based
        on current toolbar buttons setting. 
    -->
    <RULE  NAME="ToolbarCmd" TOPLEVEL="ACTIVE">
        <LN PROPNAME="ToolbarCmd" PROPID="ID_ToolbarCmd">
            <P WEIGHT="1000.01" VALSTR="0">zhoulotskunosprok</P>
            <P WEIGHT="1.01"    VALSTR="Correction">+Correction</P>
            <P WEIGHT="1.01"    VALSTR="Microphone">+Microphone</P>
            <P WEIGHT="1.01"    VALSTR="Voice Command">+Voice Command</P>
        </LN>
    </RULE>
    <RULE NAME="UrlHistory" DYNAMIC="1" TOPLEVEL="ACTIVE">
        <LN PROPNAME="UrlHistory" PROPID="ID_UrlHistory">
            <P VALSTR="dict">*+</P>
            <P VALSTR="www.">www ?dot</P>
            <P VALSTR="www.">W. W. W. ?dot</P>
            <P VALSTR="www.">triple W. ?dot</P>
            <P VALSTR="http://">http ?colon ?slash ?slash</P>
            <P VALSTR="http://">H. T. T. P. ?colon ?slash ?slash</P>
            <P VALSTR="ftp://">ftp ?colon ?slash ?slash</P> 
            <P VALSTR="ftp://">F. T. P. ?colon ?slash ?slash</P> 
            <P VALSTR="mailto:">mail to ?colon</P>
            <P VALSTR="gopher:">gopher ?colon</P>
            <P VALSTR="news:">news colon</P>
            <P VALSTR="telnet:">telnet ?colon</P>
            <P VALSTR=".com">dot com</P>
            <P VALSTR=".com">dot C. O. M.</P>
            <P VALSTR=".net">dot net</P>
            <P VALSTR=".net">dot N. E. T.</P>
            <P VALSTR=".info">dot info</P>
            <P VALSTR=".info">dot I. N. F. O.</P>
            <P VALSTR=".biz">dot biz</P>
            <P VALSTR=".biz">dot B. I. Z.</P>
            <P VALSTR=".org">dot org</P>
            <P VALSTR=".org">dot O. R. G.</P>
            <P VALSTR=".gov">dot G. O. V.</P>
            <P VALSTR=".edu">dot E. D. U.</P>
            <P VALSTR="file:">file colon</P>
            <P VALSTR="/">slash</P>
            <P VALSTR=":">colon</P>
            <P VALSTR="~">tilde</P>
            <P VALSTR=".exe">dot EXE</P>
            <P VALSTR=".exe">dot E. X. E.</P>
            <P VALSTR=".asp">dot asp</P>
            <P VALSTR=".asp">dot A. S. P.</P>
            <P VALSTR=".bat">dot bat</P>
            <P VALSTR=".bat">dot B. A. T.</P>
            <P VALSTR=".cmd">dot command</P>
            <P VALSTR=".cmd">dot C. M. D.</P>
            <P VALSTR=".txt">dot T. X. T.</P>
            <P VALSTR=".htm">dot htm</P>
            <P VALSTR=".htm">dot H. T. M.</P>
            <P VALSTR=".html">dot html</P>
            <P VALSTR=".html">dot H. T. M. L.</P>
            <P VALSTR=".xml">dot xml</P>
            <P VALSTR=".xml">dot X. M. L.</P>
            <P VALSTR=".doc">dot doc</P>
            <P VALSTR=".doc">dot D. O. C.</P>
            <P VALSTR=".xls">dot X. L. S.</P>
            <P VALSTR=".ppt">dot P. P. T.</P>
            <P VALSTR=".mp3">dot M. P. three</P>
            <P VALSTR=".mpg">dot M. P. G.</P>
            <P VALSTR=".mpeg">dot mpeg</P>
            <P VALSTR=".mpeg">dot M. peg</P>
            <P VALSTR=".mpeg">dot M. P. E. G.</P>
            <P VALSTR=".avi">dot A. V. I.</P>
            <P VALSTR="a:">A. colon</P>
            <P VALSTR="c:">C. colon</P>
            <P VALSTR="d:">D. colon</P>
            <P VALSTR="e:">E. colon</P>
            <P VALSTR="f:">F. colon</P>
            <P VALSTR="g:">G. colon</P>
            <P VALSTR="w:">W. colon</P>
            <P VALSTR="x:">X. colon</P>
            <P VALSTR="y:">Y. colon</P>
            <P VALSTR="z:">Z. colon</P>
        </LN>
    </RULE>
    <RULE NAME="UrlSpelling"  TOPLEVEL="ACTIVE">
        <LN PROPNAME="UrlHistory" PROPID="ID_UrlHistory">
            <P VALSTR="dict">*+</P>
        </LN>
    </RULE>
</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\dictcmdjp.xml ===
﻿<GRAMMAR LANGID="411">
    <DEFINE>
        <ID NAME="ID_ToolbarCmd" VAL="3"/>
    </DEFINE>

    <!--   
        These toolbar commands are applicable only to dictation mode.
        In Voice command mode, the toolbar grammar will be dynamically generated based
        on current toolbar buttons setting. 
    -->
    <RULE  NAME="ToolbarCmd" TOPLEVEL="ACTIVE">
        <LN PROPNAME="ToolbarCmd" PROPID="ID_ToolbarCmd">
            <P WEIGHT="1000.01" VALSTR="0">zhoulotskunosprok</P>
            <P WEIGHT="1.01" VALSTR="修正">+修正</P>
            <P WEIGHT="1.01" VALSTR="マイク">+マイク</P>
            <P WEIGHT="1.01" VALSTR="音声コマンド モード">+音声コマンド モード</P>
        </LN>
    </RULE>

</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\dictcmdchs.xml ===
﻿<GRAMMAR LANGID="804">
    <DEFINE>
        <ID NAME="ID_ToolbarCmd" VAL="3"/>
    </DEFINE>

    <!--   
        These toolbar commands are applicable only to dictation mode.
        In Voice command mode, the toolbar grammar will be dynamically generated based
        on current toolbar buttons setting. 
    -->
    <RULE  NAME="ToolbarCmd" TOPLEVEL="ACTIVE">
        <LN PROPNAME="ToolbarCmd" PROPID="ID_ToolbarCmd">
            <P WEIGHT="1000.01" VALSTR="0">zhoulotskunosprok</P>
            <P WEIGHT="1.01" VALSTR="更正">+更正</P>
            <P WEIGHT="1.01" VALSTR="麦克风">+麦克风</P>
            <P WEIGHT="1.01" VALSTR="声音命令模式">+声音命令模式</P>
        </LN>
    </RULE>

</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\num_en.xml ===
<GRAMMAR LANGID="409">
   <DEFINE>
       <ID NAME="1STDIGIT" VAL="1"/>
   </DEFINE>

   <RULE NAME="number" TOPLEVEL="ACTIVE">
      <LN PROPNAME="1st_digit" PROPID="1STDIGIT">
         <PN VALSTR="1">one</PN>
         <PN VALSTR="2">two</PN>
         <PN VALSTR="3">three</PN>
         <PN VALSTR="4">four</PN>
         <PN VALSTR="5">five</PN>
         <PN VALSTR="6">six</PN>
         <PN VALSTR="7">seven</PN>
         <PN VALSTR="8">eight</PN>
         <PN VALSTR="9">nine</PN>
         <PN VALSTR="10">ten</PN>
         <PN VALSTR="11">eleven</PN>
         <PN VALSTR="12">twelve</PN>
         <PN VALSTR="13">thirteen</PN>
         <PN VALSTR="14">fourteen</PN>
         <PN VALSTR="15">fifteen</PN>
         <PN VALSTR="16">sixteen</PN>
         <PN VALSTR="17">seventeen</PN>
         <PN VALSTR="18">eighteen</PN>
         <PN VALSTR="19">nineteen</PN>
      </LN>
   </RULE>
</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\shrdcmd.xml ===
<GRAMMAR LANGID="409">
    <DEFINE>
        <ID NAME="Select_ID_SELECT"             VAL="1"/>
        <ID NAME="Select_ID_DELETE"             VAL="2"/>
        <ID NAME="Select_ID_CORRECT"            VAL="3"/>
        <ID NAME="Select_ID_SELTHROUGH"         VAL="4"/>
        <ID NAME="Select_ID_DELTHROUGH"         VAL="5"/>
        <ID NAME="Select_ID_UNSELECT"           VAL="6"/>
        <ID NAME="Select_ID_SELECTPREV"         VAL="7"/>
        <ID NAME="Select_ID_SELECTNEXT"         VAL="8"/>
        <ID NAME="Select_ID_CORRECTPREV"        VAL="9"/>
        <ID NAME="Select_ID_CORRECTNEXT"        VAL="10"/>
        <ID NAME="Select_ID_SELSENTENCE"        VAL="11"/>
        <ID NAME="Select_ID_SELPARAGRAPH"       VAL="12"/>
        <ID NAME="Select_ID_SELWORD"            VAL="13"/>
        <ID NAME="Select_ID_SelectAll"          VAL="14"/>
        <ID NAME="Select_ID_DeletePhrase"       VAL="15"/>
        <ID NAME="Select_ID_Convert"            VAL="16"/>
        <ID NAME="Select_ID_SelectThat"         VAL="17"/>

        <ID NAME="Navigate_ID_INSERTBEFORE"     VAL="20"/>
        <ID NAME="Navigate_ID_INSERTAFTER"      VAL="21"/>
        <ID NAME="Navigate_ID_Go_To_Bottom"     VAL="22"/>
        <ID NAME="Navigate_ID_Go_To_Top"        VAL="23"/>
        <ID NAME="Navigate_ID_Move_Home"        VAL="24"/>
        <ID NAME="Navigate_ID_Move_End"         VAL="25"/>
        
        <ID NAME="Edit_ID_Undo"                 VAL="30"/>
        <ID NAME="Edit_ID_Cut"                  VAL="31"/>
        <ID NAME="Edit_ID_Copy"                 VAL="32"/>
        <ID NAME="Edit_ID_Paste"                VAL="33"/>

        <ID NAME="Keyboard_ID_Move_Up"          VAL="40"/>
        <ID NAME="Keyboard_ID_Move_Down"        VAL="41"/>
        <ID NAME="Keyboard_ID_Move_Left"        VAL="42"/>
        <ID NAME="Keyboard_ID_Move_Right"       VAL="43"/>
        <ID NAME="Keyboard_ID_Page_Up"          VAL="44"/>
        <ID NAME="Keyboard_ID_Page_Down"        VAL="45"/>
        <ID NAME="Keyboard_ID_Tab"              VAL="46"/>
        <ID NAME="Keyboard_ID_Enter"            VAL="47"/>
        <ID NAME="Keyboard_ID_Backspace"        VAL="48"/>
        <ID NAME="Keyboard_ID_Delete"           VAL="49"/>
        <ID NAME="Keyboard_ID_SpaceBar"         VAL="50"/>

        <ID NAME="Case_ID_CapIt"                VAL="70"/>	
        <ID NAME="Case_ID_AllCaps"              VAL="71"/>   
        <ID NAME="Case_ID_NoCaps"               VAL="72"/>
        <ID NAME="Case_ID_CapThat"              VAL="73"/>
        <ID NAME="Case_ID_AllCapsThat"          VAL="74"/>
        <ID NAME="Case_ID_NoCapsThat"           VAL="75"/>


        <ID NAME="Select_Through"               VAL="100"/>

    </DEFINE>

    <RULE NAME="selword" TOPLEVEL="ACTIVE">
        <LN>
           <P WEIGHT="1000.01">zhoulotskunosprok</P>
           <P WEIGHT="1.01" PROPNAME="SelectCommands">
               <LN PROPNAME="SelectWordCommand">
                   <P VAL="Select_ID_SELECT">+Select</P>
                   <P VAL="Select_ID_DELETE">+Delete</P>
                   <P VAL="Select_ID_CORRECT">+Correct</P>
               </LN>
               <TEXTBUFFER/>
           </P>
        </LN>
    </RULE>

    <RULE NAME="SelectThrough" TOPLEVEL="ACTIVE">
        <LN>
           <P WEIGHT="1000.01">zhoulotskunosprok</P>
           <P WEIGHT="1.01" PROPNAME="SelectCommands" VAL="Select_Through">
               <LN PROPNAME="SelectWordCommand">
                   <P VAL="Select_ID_SELTHROUGH" VALSTR="SelectThrough">Select</P>
                   <P VAL="Select_ID_DELTHROUGH" VALSTR="DeleteThrough">Delete</P>
               </LN>
               <TEXTBUFFER/> <P PROPNAME="through" VALSTR="through">through</P> <TEXTBUFFER/>
           </P>
        </LN>
    </RULE>

    <RULE  NAME="SelectSimpleCmds" TOPLEVEL="ACTIVE">
        <LN PROPNAME="SelectSimpleCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="2.01" VAL="Select_ID_UNSELECT">+Unselect that</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELECTPREV">Select +Previous Phrase</P>
              <P WEIGHT="1.01" VAL="Select_ID_SelectThat">Select That</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELECTNEXT">Select +Next Phrase</P>
              <P WEIGHT="1.01" VAL="Select_ID_CORRECTPREV">Correct +Previous Phrase</P>
              <P WEIGHT="1.01" VAL="Select_ID_CORRECTNEXT">Correct +Next Phrase</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELSENTENCE">Select +Sentence</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELPARAGRAPH">Select +Paragraph</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELWORD">Select +Word</P>
              <P WEIGHT="1.01" VAL="Select_ID_SelectAll">Select +All</P>
              <P WEIGHT="1.01" VAL="Select_ID_DeletePhrase">+Scratch That</P>
              <P WEIGHT="1.01" VAL="Select_ID_Convert">+Correct That</P>
              <P WEIGHT="1.01" VAL="Select_ID_Convert">+Reconvert</P>

        </LN>
    </RULE>

    <RULE NAME="EditCmds" TOPLEVEL="ACTIVE">
        <LN PROPNAME="EditCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Undo">+Undo That</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Cut">+Cut That</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Copy">+Copy That</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Paste">+Paste That</P>
        </LN> 
    </RULE>

    <RULE NAME="NavigationCmds"  TOPLEVEL="ACTIVE">
        <LN  PROPNAME="NavigationCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_Go_To_Bottom">Go To +Bottom</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_Go_To_Top">Go To +Top</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_Move_Home">+Go to Beginning of Line</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_Move_End">+Go to End of Line</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_INSERTBEFORE">+Insert Before <TEXTBUFFER/></P>
              <P WEIGHT="1.01" VAL="Navigate_ID_INSERTAFTER">+Insert After <TEXTBUFFER/></P>
        </LN>
    </RULE>

    <RULE NAME="CasingCmds"  TOPLEVEL="ACTIVE">
        <LN  PROPNAME="CasingCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>	
              <P WEIGHT="1.01" VAL="Case_ID_CapIt">+Cap It *+</P>
              <P WEIGHT="1.01" VAL="Case_ID_AllCaps">+All Caps *+</P>
              <P WEIGHT="1.01" VAL="Case_ID_NoCaps">+No Caps *+</P>
              <P WEIGHT="1.01" VAL="Case_ID_CapThat">+Cap That</P>
              <P WEIGHT="1.01" VAL="Case_ID_CapThat">+Capitalize</P>
              <P WEIGHT="1.01" VAL="Case_ID_AllCapsThat">+All Caps That</P>
              <P WEIGHT="1.01" VAL="Case_ID_NoCapsThat">+No Caps That</P>
              <P WEIGHT="1.01" VAL="Case_ID_NoCapsThat">+Uncapitalize</P>
        </LN>
    </RULE>

    <RULE NAME="KeyboardCmds"  TOPLEVEL="ACTIVE">
        <LN PROPNAME="KeyboardCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Tab">+Tab</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Tab">+Next cell</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Enter">+Enter</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Enter">+Next-Line</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Backspace">+BackSpace</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Delete">+Delete</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_SpaceBar">+Space</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_SpaceBar">+SpaceBar</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Up">+Move Up</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Down">+Move Down</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Left">+Move Left</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Right">+Move Right</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Page_Up">+Page up</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Page_Down">+Page Down</P>
        </LN>
    </RULE>
</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\smplnum.xml ===
<GRAMMAR LANGID="409">

    <DEFINE>
        <ID NAME="BILLIONS" VAL="1"/>
        <ID NAME="MILLIONS" VAL="2"/>
        <ID NAME="THOUSANDS" VAL="3"/>
        <ID NAME="HUNDREDS" VAL="4"/>
        <ID NAME="TENS" VAL="5"/>
        <ID NAME="ONES" VAL="6"/>
        <ID NAME="TEENS" VAL="200"/>
        <ID NAME="NEGATIVE" VAL="7"/>
        <ID NAME="MILLBILL" VAL="8"/>
        <ID NAME="DIGIT" VAL="9"/>
        <ID NAME="TWODIGIT" VAL="10"/>
        <ID NAME="FP_PART" VAL="11"/>
        <ID NAME="ZERO" VAL="12"/>
        <ID NAME="POINT_ZERO" VAL="13"/>
        <ID NAME="DENOMINATOR" VAL="15"/>
        <ID NAME="WHOLE" VAL="16"/>
        <ID NAME="ONEDIGIT" VAL="17"/>
        <ID NAME="GRID_INTEGER_99" VAL="101"/>
        <ID NAME="GRID_INTEGER_999" VAL="102"/>
        <ID NAME="GRID_INTEGER_MILLBILL" VAL="103"/>
        <ID NAME="GRID_INTEGER_STANDALONE" VAL="104"/>
        <ID NAME="GRID_INTEGER" VAL="105"/>
        <ID NAME="GRID_INTEGER_NONNEG" VAL="106"/>
        <ID NAME="GRID_DIGIT_NUMBER" VAL="107"/>
        <ID NAME="GRID_FP_NUMBER" VAL="108"/>
        <ID NAME="GRID_FP_NUMBER_NONNEG" VAL="109"/>
        <ID NAME="GRID_NUMBER" VAL="110"/>
    </DEFINE>


    <!--
        GRID_NUMBER
        Includes all kinds of numbers, negative or positive, interger or decimal.
    -->

    <RULE NAME="GRID_NUMBER"  ID="GRID_NUMBER" TOPLEVEL="ACTIVE" EXPORT="0">
        <LN>
        <P WEIGHT="1000.01">zhoulotskunosprok</P>
        <P WEIGHT="1.01">Force Num
           <O>
               <RULEREF NAME="NEGATIVE" PROPNAME="NEGATIVE" PROPID="NEGATIVE"/>
           </O>
           <L>
               <RULEREF NAME="GRID_INTEGER_STANDALONE" PROPNAME="GRID_INTEGER_STANDALONE" PROPID="GRID_INTEGER_STANDALONE"/>
               <RULEREF NAME="fp_number_nonneg"        PROPNAME="GRID_FP_NUMBER"     PROPID="GRID_FP_NUMBER"/>
           </L>
        </P>
        </LN>
    </RULE>

    <!-- 
        INTEGER_STANDALONE
        A INTEGER_STANDALONE can be in the range (-1e12, 1e12) and will always be
        called as a toplevel rule. 
        This rule is not referenced by any other rules.
    -->
    <RULE NAME="GRID_INTEGER_STANDALONE" ID="GRID_INTEGER_STANDALONE" TOPLEVEL="INACTIVE" EXPORT="1">
        <L>
            <P>
                <RULEREF NAME="GRID_INTEGER_MILLBILL" PROPNAME="GRID_INTEGER_MILLBILL" PROPID="GRID_INTEGER_MILLBILL"/>
            </P>
            <P>
                <RULEREF NAME="integer_base_nonneg"/>
            </P>
        </L>
     </RULE>

    <!-- 
        INTEGER_MILLBILL
        Numbers for which the word "million" or "billion" should be displayed
    -->
    <RULE NAME="GRID_INTEGER_MILLBILL" ID="GRID_INTEGER_MILLBILL" TOPLEVEL="INACTIVE" EXPORT="1">
        <L>
            <P>
                <RULEREF NAME="GRID_INTEGER_99" PROPNAME="GRID_INTEGER_99" PROPID="GRID_INTEGER_99"/>
            </P>
            <P>
                <RULEREF NAME="GRID_FP_NUMBER_NONNEG" PROPNAME="GRID_FP_NUMBER_NONNEG" PROPID="GRID_FP_NUMBER_NONNEG"/>
            </P>
        </L>
        <LN PROPNAME="MILLBILL" PROPID="MILLBILL">
            <PN VAL="MILLIONS" VALSTR="million">million</PN>
            <PN VAL="BILLIONS" VALSTR="billion">billion</PN>
        </LN>           
    </RULE>
    
    <!-- 
        INTEGER_99
        Numbers in [0, 100)
        Toplevel inactive but can be imported
    -->
    <RULE NAME="GRID_INTEGER_99" ID="GRID_INTEGER_99" TOPLEVEL="INACTIVE" EXPORT="1">
        <RULEREF NAME="cardinal_99" PROPNAME="ONES" PROPID="ONES"/> 
    </RULE>
    <!-- 
        INTEGER_999
        Numbers in [0, 1000)
        Toplevel inactive but can be imported
    -->
    <RULE NAME="GRID_INTEGER_999" ID="GRID_INTEGER_999" TOPLEVEL="INACTIVE" EXPORT="1">
        <RULEREF NAME="cardinal_999" PROPNAME="ONES" PROPID="ONES"/> 
    </RULE>

    <!-- 
        integer_base_nonneg
        Same as above except nonnegative
    -->
    <RULE NAME="integer_base_nonneg">
        <L>
            <P>
                <RULEREF NAME="cardinal"/>
            </P>
            <P>
                <RULEREF NAME="GRID_DIGIT_NUMBER" PROPNAME="GRID_DIGIT_NUMBER" PROPID="GRID_DIGIT_NUMBER"/>
            </P>
        </L>
    </RULE>

    <!-- 
        cardinal
        A cardinal is defined here as a number in [0, 1e12), properly 
        formed (not spoken digit by digit)
    -->
    <RULE NAME="cardinal">
        <L>
            <P>
                <L>
                    <P>
                        <RULEREF NAME="big_part"/>
                    </P>
                </L>

                <O>
                    <O>
                        and
                    </O>
                    <P>
                        <!-- cardinal_999 part optional if the big_part is present -->
                        <RULEREF NAME="cardinal_999" PROPNAME="ONES" PROPID="ONES" VAL="1"/>
                    </P>
                </O>
            </P>
            <P>
                <P>
                    <RULEREF NAME="cardinal_99_nonzero" PROPNAME="HUNDREDS" PROPID="HUNDREDS" VAL="1"/>
                </P>
                <P>
                    hundred
                </P>
                <O>
                    <O>
                        and
                    </O>
                    <P>
                        <RULEREF NAME="cardinal_99_nonzero" PROPNAME="ONES" PROPID="ONES" VAL="1"/>
                    </P>
                </O>
            </P>
            <P>
                <!-- cardinal_999 part mandatory if the big_part is not present.
                In this case, the cardinal_999 part must be at least 20 -->
                <RULEREF NAME="cardinal_999" PROPNAME="ONES" PROPID="ONES" VAL="1"/>
            </P>
        </L>
    </RULE>


    <!-- 
        big_part
        A big_part is the part of a spoken number that is divisible by 1000.  It 
        has to be in the range (-1e12, 1e12).
    -->
    <RULE NAME="big_part">
        <L>
            <P> 
                <RULEREF NAME="cardinal_999" PROPNAME="BILLIONS" PROPID="BILLIONS"/> 
                <P> billion </P> 
                <!-- billions are present, so millions and thousands are optional -->
                <O> 
                    <RULEREF NAME="cardinal_999" PROPNAME="MILLIONS" PROPID="MILLIONS"/> 
                    <P> million </P> 
                </O>
                <O> 
                    <RULEREF NAME="cardinal_999" PROPNAME="THOUSANDS" PROPID="THOUSANDS"/> 
                    <P> thousand </P> 
                </O>
            </P>
            <P> 
                <RULEREF NAME="cardinal_999" PROPNAME="MILLIONS" PROPID="MILLIONS"/> 
                <P> million </P> 
                <!-- millions are present, so thousands are optional -->
                <O> 
                    <RULEREF NAME="cardinal_999" PROPNAME="THOUSANDS" PROPID="THOUSANDS"/> 
                    <P> thousand </P> 
                </O>
            </P>
            <P> 
                <!-- billions and millions not present, so thousands are mandatory -->
                <RULEREF NAME="cardinal_999" PROPNAME="THOUSANDS" PROPID="THOUSANDS"/> 
                <P> thousand </P> 
            </P>
        </L>
    </RULE>

    
    <!-- 
        cardinal_999
        This is defined as a number in [0,1000).
    -->
    <RULE NAME="cardinal_999">
        <L>
            <P PROPNAME="ZERO" PROPID="ZERO" VAL="0">
                zero
            </P>
            <P>
                <!-- A number between 1 and 19 -->
                <RULEREF NAME="onesfrag" PROPNAME="ONES" VAL="1"/>
            </P>
            <P>
                <!-- A "tens" number (20, 30,...) -->
                <RULEREF NAME="tensfrag" PROPNAME="TENS" VAL="10"/>
                <O>
                    <!-- Can be followed by a nonzero digit -->
                    <RULEREF NAME="digit_nonzero" PROPNAME="ONES" VAL="1"/>
                </O>
            </P>
            <P>
                <!-- A number at least 100 -->
                <RULEREF NAME="hundredsfrag" PROPNAME="HUNDREDS" VAL="100"/>
                <!-- optionally followed by tens and ones places -->
                <O>
                    <L>
                        <P>
                            <!-- e.g. six hundred thirteen -->
                            <!-- Note that this case is not covered by the later case -->
                            <RULEREF NAME="onesfrag" PROPNAME="ONES" VAL="1"/>
                        </P>
                        <P>
                            <!-- e.g. six hundred thirty two -->
                            <RULEREF NAME="tensfrag" PROPNAME="TENS" VAL="10"/>
                            <O>
                                <!-- ones place optional -->
                                <RULEREF NAME="digit_nonzero" PROPNAME="ONES" VAL="1"/>
                            </O>
                        </P>
                    </L>
                </O>
            </P>
        </L>
    </RULE>

                            
    <!-- 
        cardinal_99
        Defined as any integer in [0,100)
    -->
    <RULE NAME="cardinal_99">
        <L>
            <P>
                <RULEREF NAME="cardinal_99_nonzero"/>
            </P>
            <P>
                <RULEREF NAME="zero"/>
            </P>
        </L>
    </RULE>

    <RULE NAME="cardinal_99_nonzero">
        <L>
            <P>
                <RULEREF NAME="tensfrag" PROPNAME="TENS" VAL="10"/>
                <O><RULEREF NAME="digit_nonzero" PROPNAME="ONES" VAL="1"/></O>
            </P>
            <P> <RULEREF NAME="onesfrag" PROPNAME="ONES" VAL="1"/> </P>
        </L>
    </RULE>

     <RULE NAME="NEGATIVE">
        <L>
            <P>
                negative
            </P>
            <P>
                minus
            </P>
        </L>
    </RULE>

    <RULE NAME="twodigit">
        <L>
            <P>
                <P>
                    <RULEREF NAME="tensfrag" PROPNAME="TENS" PROPID="TENS" VAL="10"/>
                </P>
                <O>
                    <RULEREF NAME="digit_nonzero" PROPNAME="ONES" PROPID="ONES" VAL="1"/>
                </O>
            </P>
            <P>
                <RULEREF NAME="onesfrag_teens" PROPNAME="TEENS" PROPID="TEENS" VAL="1"/>
            </P>
        </L>
    </RULE>


    <RULE NAME="hundredsfrag">
        <L>
            <LN PROPNAME="HUNDREDS" PROPID="HUNDREDS">
                <PN VAL="1" VALSTR="1">a</PN>
            </LN>
            <P>
                <RULEREF NAME="digit_nonzero"/>
            </P>
        </L>
        <P>
            hundred ?and
        </P>
    </RULE>

    <RULE NAME="tensfrag">
        <LN PROPNAME="TENS" PROPID="TENS">
            <PN VAL="2" VALSTR="2">twenty</PN>
            <PN VAL="3" VALSTR="3">thirty</PN>
            <PN VAL="4" VALSTR="4">forty</PN>
            <PN VAL="5" VALSTR="5">fifty</PN>
            <PN VAL="6" VALSTR="6">sixty</PN>
            <PN VAL="7" VALSTR="7">seventy</PN>
            <PN VAL="8" VALSTR="8">eighty</PN>
            <PN VAL="9" VALSTR="9">ninety</PN>
        </LN>
    </RULE>

    <RULE NAME="onesfrag">
        <L>
            <P>
                <RULEREF NAME="digit_nonzero"/>
            </P>
            <P>
                <RULEREF NAME="onesfrag_teens"/>
            </P>
        </L>
     </RULE>

    <RULE NAME="onesfrag_teens">
        <LN PROPNAME="ONES" PROPID="ONES">
            <PN VAL="10" VALSTR="10">ten</PN>
            <PN VAL="11" VALSTR="11">eleven</PN>
            <PN VAL="12" VALSTR="12">twelve</PN>
            <PN VAL="13" VALSTR="13">thirteen</PN>
            <PN VAL="14" VALSTR="14">fourteen</PN>
            <PN VAL="15" VALSTR="15">fifteen</PN>
            <PN VAL="16" VALSTR="16">sixteen</PN>
            <PN VAL="17" VALSTR="17">seventeen</PN>
            <PN VAL="18" VALSTR="18">eighteen</PN>
            <PN VAL="19" VALSTR="19">nineteen</PN>
         </LN>
    </RULE>

     <RULE NAME="onesfrag_or_zero">
        <L>
            <P>
                <RULEREF NAME="zero"/>
            </P>
            <P>
                <RULEREF NAME="onesfrag"/>
            </P>
        </L>
    </RULE>

    <RULE NAME="digit_nonzero_or_one">
        <LN PROPNAME="DIGIT" PROPID="DIGIT">
            <PN VAL="2" VALSTR="2">two</PN>
            <PN VAL="3" VALSTR="3">three</PN>
            <PN VAL="4" VALSTR="4">four</PN>
            <PN VAL="5" VALSTR="5">five</PN>
            <PN VAL="6" VALSTR="6">six</PN>
            <PN VAL="7" VALSTR="7">seven</PN>
            <PN VAL="8" VALSTR="8">eight</PN>
            <PN VAL="9" VALSTR="9">nine</PN>
         </LN>
    </RULE>

    <RULE NAME="digit_nonzero">
        <L>
            <LN PROPNAME="DIGIT" PROPID="DIGIT">
                <PN VAL="1" VALSTR="1">one</PN>
            </LN>
            <P> 
                <RULEREF NAME="digit_nonzero_or_one"/> 
            </P>
        </L>
     </RULE>

    <RULE NAME="digit">
        <L>
            <LN PROPNAME="DIGIT" PROPID="DIGIT">
                <PN VAL="0" VALSTR="0">zero</PN>
                <PN VAL="0" VALSTR="0">oh</PN>
            </LN>
            <P> 
                <RULEREF NAME="digit_nonzero"/> 
            </P>
        </L>
    </RULE>

    <RULE NAME="zero">
        <LN PROPNAME="ONES" PROPID="ONES">
            <PN VAL="0" VALSTR="0">zero</PN>
        </LN>
    </RULE>
    
    <!-- 
        DIGIT_NUMBER
        Integers in (0, 1e12), spelled out either one digit at a time or two digits
        at a time.  
        This rule is an INACTIVE toplevel rule, since it should go through GRID_INTEGER
        to be formatted.
        Explicitly disallow TWODIGIT DIGIT since that is ambiguous with "twenty five"
    -->
    <RULE NAME="GRID_DIGIT_NUMBER" ID="GRID_DIGIT_NUMBER" TOPLEVEL="INACTIVE" EXPORT="1">
        <L>
            <P MIN="3" MAX="12">
                <L>
                    <P>
                        <RULEREF NAME="twodigit" PROPNAME="TWODIGIT" PROPID="TWODIGIT"/>
                    </P>
                    <P>
                        <RULEREF NAME="digit" PROPNAME="ONEDIGIT" PROPID="ONEDIGIT"/>
                    </P>
                </L>
            </P>
            <P>
                <P>
                    <RULEREF NAME="digit" PROPNAME="ONEDIGIT" PROPID="ONEDIGIT"/>
                </P>
                <P>
                    <RULEREF NAME="twodigit" PROPNAME="TWODIGIT" PROPID="TWODIGIT"/>
                </P>
            </P>
            <P MIN="2" MAX="2">

                <RULEREF NAME="twodigit" PROPNAME="TWODIGIT" PROPID="TWODIGIT"/>
            </P>
            <P MIN="2" MAX="2">
                <RULEREF NAME="digit" PROPNAME="ONEDIGIT" PROPID="ONEDIGIT"/>
            </P>
        </L>
    </RULE>
    <!-- 
        fp_number_nonneg
        Floating-point numbers with up to 12 sig figs.  Both the stuff to the left of the 
        decimal point and the stuff to the right of the decimal point can be either
        NUMBERs or DIGIT_NUMBERs
    -->
    <RULE NAME="GRID_FP_NUMBER_NONNEG" ID="GRID_FP_NUMBER_NONNEG" TOPLEVEL="INACTIVE" EXPORT="1">
        <RULEREF NAME="fp_number_nonneg"/>
    </RULE>

    <RULE NAME="fp_number_nonneg">
        <O>
            <L>
                <P>
                    <RULEREF NAME="GRID_INTEGER_NONNEG" PROPNAME="ONES" PROPID="ONES"/>
                </P>
                <P PROPNAME="ZERO" PROPID="ZERO" VAL="0">
                    oh
                </P>
            </L>
        </O>
        <L>
            <P>
                point
            </P>
            <P>
                decimal
            </P>
        </L>
        <L>
            <P>
                <RULEREF NAME="GRID_DIGIT_BY_DIGIT"  PROPNAME="FP_PART" PROPID="FP_PART"/>
            </P>
            <P>
                <RULEREF NAME="GRID_INTEGER_999" PROPNAME="FP_PART" PROPID="FP_PART"/>
            </P>
            <P PROPNAME="POINT_ZERO" PROPID="POINT_ZERO" VAL="0">
                oh
            </P>
        </L>
    </RULE>

    <!--
        INTEGER_NONNEG
        A INTEGER_NONNEG can be in the range [0, 1e12) and will never be called 
        as a toplevel rule
    -->
    <RULE NAME="GRID_INTEGER_NONNEG" ID="GRID_INTEGER_NONNEG" TOPLEVEL="INACTIVE" EXPORT="1">
        <RULEREF NAME="integer_base_nonneg"/>
    </RULE>

    <!--
        GRID_DIGIT_BY_DIGIT
        GRID_DIGIT_BY_DIGIT will be used by fp_number_noneg as the floating part.
        it will never be called as a toplevel rule
    -->
    <RULE NAME="GRID_DIGIT_BY_DIGIT" TOPLEVEL="INACTIVE" EXPORT="1">
        <RULEREF NAME="GRID_DIGIT_NUMBER" PROPNAME="GRID_DIGIT_NUMBER" PROPID="GRID_DIGIT_NUMBER"/>
    </RULE>


</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\shrdcmdchs.xml ===
﻿<GRAMMAR LANGID="804">
    <DEFINE>

        <ID NAME="Select_ID_SELECT"             VAL="1"/>
        <ID NAME="Select_ID_DELETE"             VAL="2"/>
        <ID NAME="Select_ID_CORRECT"            VAL="3"/>
        <ID NAME="Select_ID_SELTHROUGH"         VAL="4"/>
        <ID NAME="Select_ID_DELTHROUGH"         VAL="5"/>
        <ID NAME="Select_ID_UNSELECT"           VAL="6"/>
        <ID NAME="Select_ID_SELECTPREV"         VAL="7"/>
        <ID NAME="Select_ID_SELECTNEXT"         VAL="8"/>
        <ID NAME="Select_ID_CORRECTPREV"        VAL="9"/>
        <ID NAME="Select_ID_CORRECTNEXT"        VAL="10"/>
        <ID NAME="Select_ID_SELSENTENCE"        VAL="11"/>
        <ID NAME="Select_ID_SELPARAGRAPH"       VAL="12"/>
        <ID NAME="Select_ID_SELWORD"            VAL="13"/>
        <ID NAME="Select_ID_SelectAll"          VAL="14"/>
        <ID NAME="Select_ID_DeletePhrase"       VAL="15"/>
        <ID NAME="Select_ID_Convert"            VAL="16"/>
        <ID NAME="Select_ID_SelectThat"         VAL="17"/>
        <ID NAME="Select_ID_Finalize"           VAL="18"/>

        <ID NAME="Navigate_ID_INSERTBEFORE"     VAL="20"/>
        <ID NAME="Navigate_ID_INSERTAFTER"      VAL="21"/>
        <ID NAME="Navigate_ID_Go_To_Bottom"     VAL="22"/>
        <ID NAME="Navigate_ID_Go_To_Top"        VAL="23"/>
        <ID NAME="Navigate_ID_Move_Home"        VAL="24"/>
        <ID NAME="Navigate_ID_Move_End"         VAL="25"/>
        
        <ID NAME="Edit_ID_Undo"                 VAL="30"/>
        <ID NAME="Edit_ID_Cut"                  VAL="31"/>
        <ID NAME="Edit_ID_Copy"                 VAL="32"/>
        <ID NAME="Edit_ID_Paste"                VAL="33"/>

        <ID NAME="Keyboard_ID_Move_Up"          VAL="40"/>
        <ID NAME="Keyboard_ID_Move_Down"        VAL="41"/>
        <ID NAME="Keyboard_ID_Move_Left"        VAL="42"/>
        <ID NAME="Keyboard_ID_Move_Right"       VAL="43"/>
        <ID NAME="Keyboard_ID_Page_Up"          VAL="44"/>
        <ID NAME="Keyboard_ID_Page_Down"        VAL="45"/>
        <ID NAME="Keyboard_ID_Tab"              VAL="46"/>
        <ID NAME="Keyboard_ID_Enter"            VAL="47"/>
        <ID NAME="Keyboard_ID_Backspace"        VAL="48"/>
        <ID NAME="Keyboard_ID_Delete"           VAL="49"/>
        <ID NAME="Keyboard_ID_SpaceBar"         VAL="50"/>

        <ID NAME="Case_ID_CapIt"                VAL="70"/>	
        <ID NAME="Case_ID_AllCaps"              VAL="71"/>   
        <ID NAME="Case_ID_NoCaps"               VAL="72"/>
        <ID NAME="Case_ID_CapThat"              VAL="73"/>
        <ID NAME="Case_ID_AllCapsThat"          VAL="74"/>
        <ID NAME="Case_ID_NoCapsThat"           VAL="75"/>

        <ID NAME="Select_Through"               VAL="100"/>

    </DEFINE>

    <RULE NAME="selword" TOPLEVEL="ACTIVE">
        <LN>
           <P WEIGHT="1000.01">zhoulotskunosprok</P>
           <P WEIGHT="1.01">
                <LN PROPNAME="SelectCommands">
                   <P VAL="Select_ID_SELECT">+选择</P>
                   <P VAL="Select_ID_DELETE">+删除</P>
                   <P VAL="Select_ID_DELETE">+删掉</P>
                   <P VAL="Select_ID_CORRECT">+修改</P>
                   <P VAL="Select_ID_CORRECT">+更改</P>
                   <P VAL="Select_ID_CORRECT">+重选</P>
               </LN>
               <TEXTBUFFER/>
           </P>
        </LN>
    </RULE>


    <RULE NAME="SelectThrough" TOPLEVEL="ACTIVE">
        <LN>
           <P WEIGHT="1000.01">zhoulotskunosprok</P>
           <P WEIGHT="1.01" PROPNAME="SelectCommands" VAL="Select_Through">
               <LN PROPNAME="SelectWordCommand">
                   <P VAL="Select_ID_SELTHROUGH" VALSTR="SelectThrough">+选择</P>
                   <P VAL="Select_ID_DELTHROUGH" VALSTR="DeleteThrough">+删除</P>
               </LN>
               <TEXTBUFFER/> <P PROPNAME="through" VALSTR="到">到</P> <TEXTBUFFER/>
           </P>
        </LN>
    </RULE>


    <RULE  NAME="SelectSimpleCmds" TOPLEVEL="ACTIVE">
        <LN PROPNAME="SelectSimpleCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="2.01" VAL="Select_ID_UNSELECT">+不选它</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELECTPREV">选择前一个词</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELECTNEXT">选择后一个词</P>
              <P WEIGHT="1.01" VAL="Select_ID_CORRECTPREV">修改前一个词</P>
              <P WEIGHT="1.01" VAL="Select_ID_CORRECTPREV">更改前一个词</P>
              <P WEIGHT="1.01" VAL="Select_ID_CORRECTNEXT">修改后一个词</P>
              <P WEIGHT="1.01" VAL="Select_ID_CORRECTNEXT">更改后一个词</P>
              <P WEIGHT="1.01" VAL="Select_ID_SelectThat">选择它</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELSENTENCE">选择句子</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELPARAGRAPH">选择段落</P>
              <P WEIGHT="1.01" VAL="Select_ID_SelectAll">选择全部</P>
              <P WEIGHT="1.01" VAL="Select_ID_DeletePhrase">
                <O>请</O>
                +删除         
                <O>
                   <L>
                     <P>那个</P>
                     <P>它</P>
                     <P>这个</P>
                   </L>
                </O>
              </P>

              <P WEIGHT="1.01" VAL="Select_ID_DeletePhrase">
                      <O>请</O>
                      +删掉         
                      <O>
                        <L>
                            <P>那个</P>
                            <P>它</P>
                            <P>这个</P>
                        </L>
                      </O>
              </P>

              <P WEIGHT="1.01" VAL="Select_ID_Convert">
                      <O>请</O>
                      +更改
                      <O>
                        <L>
                            <P>那个</P>
                            <P>它</P>
                            <P>这个</P>
                        </L>
                      </O>
              </P>

              <P WEIGHT="1.01" VAL="Select_ID_Convert">
                      <O>请</O>
                      +修改
                      <O>
                        <L>
                            <P>那个</P>
                            <P>它</P>
                            <P>这个</P>
                        </L>
                      </O>
              </P>

              <P WEIGHT="1.01" VAL="Select_ID_Convert">
                      <O>请</O>
                      +/重选/重选/chong 2 xuan 3;
                      <O>
                        <L>
                            <P>那个</P>
                            <P>它</P>
                            <P>这个</P>
                        </L>
                      </O>
              </P>
              
              
              <P WEIGHT="1.01" VAL="Select_ID_Finalize">确定输入</P>
        </LN>
    </RULE>

    <RULE NAME="EditCmds" TOPLEVEL="ACTIVE">
        <LN PROPNAME="EditCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Undo">+撤消</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Cut">+剪切</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Copy">+复制</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Paste">+粘贴</P>
        </LN> 
    </RULE>

    <RULE NAME="NavigationCmds"  TOPLEVEL="ACTIVE">
        <LN>  
              <P WEIGHT="1000.01">zhoulotskunosprok</P>
              <P WEIGHT="1.01">
                  <LN PROPNAME="NavigationCmdProp">
                      <P WEIGHT="1.01" VAL="Navigate_ID_Go_To_Bottom">移到页尾</P>
                      <P WEIGHT="1.01" VAL="Navigate_ID_Go_To_Top">移到页首</P>
                      <P WEIGHT="1.01" VAL="Navigate_ID_Move_Home">移到行首</P>
                      <P WEIGHT="1.01" VAL="Navigate_ID_Move_End">移到行尾</P>
                  </LN>
              </P>

              <P WEIGHT="1.01">
                  在<TEXTBUFFER/>
                  <LN PROPNAME="NavigationCmdProp">
                      <P WEIGHT="1.01" VAL="Navigate_ID_INSERTBEFORE">+前插入</P>
                      <P WEIGHT="1.01" VAL="Navigate_ID_INSERTAFTER">+后插入</P>
                  </LN>
              </P>
        </LN>
    </RULE>
<!--
    <RULE NAME="CasingCmds"  TOPLEVEL="ACTIVE">
        <LN  PROPNAME="CasingCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>	
              <P WEIGHT="1.01" VAL="Case_ID_CapIt">+Cap It *+</P>
              <P WEIGHT="1.01" VAL="Case_ID_AllCaps">+All Caps *+</P>
              <P WEIGHT="1.01" VAL="Case_ID_NoCaps">+No Caps *+</P>
              <P WEIGHT="1.01" VAL="Case_ID_CapThat">+Cap That</P>
              <P WEIGHT="1.01" VAL="Case_ID_CapThat">+Capitalize</P>
              <P WEIGHT="1.01" VAL="Case_ID_AllCapsThat">+All Caps That</P>
              <P WEIGHT="1.01" VAL="Case_ID_NoCapsThat">+No Caps That</P>
              <P WEIGHT="1.01" VAL="Case_ID_NoCapsThat">+Uncapitalize</P>
        </LN>
    </RULE>
-->

    <RULE NAME="KeyboardCmds"  TOPLEVEL="ACTIVE">
        <LN PROPNAME="KeyboardCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Tab">+制表符</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Tab">+下一单元</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Enter">+回车</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Enter">+/下一行/下一行/xia 4 yi 1 hang 2;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Backspace">+向前删</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Delete">+向后删</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_SpaceBar">+空格</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Up">+上移</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Down">+下移</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Left">+左移</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Right">+右移</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Page_Up">+上一页</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Page_Down">+下一页</P>
        </LN>
    </RULE>

</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\spell.xml ===
<GRAMMAR LANGID="409">
    <RULE NAME="spelling" TOPLEVEL="ACTIVE">
	    <L>
          <P WEIGHT="1000.01">zhoulotskunosprok</P>
          <P WEIGHT="1.01"> spell-it *+ </P>
        </L>
    </RULE>

    <RULE NAME="spellmode" TOPLEVEL="ACTIVE">
        <LN PROPNAME="SpellMode">
            <P WEIGHT="1000.01">zhoulotskunosprok</P>
            <P WEIGHT="1.01" VALSTR="spellthat">Spell That</P>
            <P WEIGHT="1.01" VALSTR="spellingmode">+Spelling mode</P>
        </LN>
    </RULE>

</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\shrdcmdjp.xml ===
﻿<GRAMMAR LANGID="411">
    <DEFINE>
        <ID NAME="Select_ID_SELECT"             VAL="1"/>
        <ID NAME="Select_ID_DELETE"             VAL="2"/>
        <ID NAME="Select_ID_CORRECT"            VAL="3"/>
        <ID NAME="Select_ID_SELTHROUGH"         VAL="4"/>
        <ID NAME="Select_ID_DELTHROUGH"         VAL="5"/>
        <ID NAME="Select_ID_UNSELECT"           VAL="6"/>
        <ID NAME="Select_ID_SELECTPREV"         VAL="7"/>
        <ID NAME="Select_ID_SELECTNEXT"         VAL="8"/>
        <ID NAME="Select_ID_CORRECTPREV"        VAL="9"/>
        <ID NAME="Select_ID_CORRECTNEXT"        VAL="10"/>
        <ID NAME="Select_ID_SELSENTENCE"        VAL="11"/>
        <ID NAME="Select_ID_SELPARAGRAPH"       VAL="12"/>
        <ID NAME="Select_ID_SELWORD"            VAL="13"/>
        <ID NAME="Select_ID_SelectAll"          VAL="14"/>
        <ID NAME="Select_ID_DeletePhrase"       VAL="15"/>
        <ID NAME="Select_ID_Convert"            VAL="16"/>
        <ID NAME="Select_ID_SelectThat"         VAL="17"/>
        <ID NAME="Select_ID_Finalize"           VAL="18"/>

        <ID NAME="Navigate_ID_INSERTBEFORE"     VAL="20"/>
        <ID NAME="Navigate_ID_INSERTAFTER"      VAL="21"/>
        <ID NAME="Navigate_ID_Go_To_Bottom"     VAL="22"/>
        <ID NAME="Navigate_ID_Go_To_Top"        VAL="23"/>
        <ID NAME="Navigate_ID_Move_Home"        VAL="24"/>
        <ID NAME="Navigate_ID_Move_End"         VAL="25"/>
        
        <ID NAME="Edit_ID_Undo"                 VAL="30"/>
        <ID NAME="Edit_ID_Cut"                  VAL="31"/>
        <ID NAME="Edit_ID_Copy"                 VAL="32"/>
        <ID NAME="Edit_ID_Paste"                VAL="33"/>

        <ID NAME="Keyboard_ID_Move_Up"          VAL="40"/>
        <ID NAME="Keyboard_ID_Move_Down"        VAL="41"/>
        <ID NAME="Keyboard_ID_Move_Left"        VAL="42"/>
        <ID NAME="Keyboard_ID_Move_Right"       VAL="43"/>
        <ID NAME="Keyboard_ID_Page_Up"          VAL="44"/>
        <ID NAME="Keyboard_ID_Page_Down"        VAL="45"/>
        <ID NAME="Keyboard_ID_Tab"              VAL="46"/>
        <ID NAME="Keyboard_ID_Enter"            VAL="47"/>
        <ID NAME="Keyboard_ID_Backspace"        VAL="48"/>
        <ID NAME="Keyboard_ID_Delete"           VAL="49"/>
        <ID NAME="Keyboard_ID_SpaceBar"         VAL="50"/>

        <ID NAME="Case_ID_CapIt"                VAL="70"/>	
        <ID NAME="Case_ID_AllCaps"              VAL="71"/>   
        <ID NAME="Case_ID_NoCaps"               VAL="72"/>
        <ID NAME="Case_ID_CapThat"              VAL="73"/>
        <ID NAME="Case_ID_AllCapsThat"          VAL="74"/>
        <ID NAME="Case_ID_NoCapsThat"           VAL="75"/>

        <ID NAME="Select_Through"               VAL="100"/>

    </DEFINE>

    <RULE NAME="selword" TOPLEVEL="ACTIVE">
        <LN>
           <P WEIGHT="1000.01">zhoulotskunosprok</P>
           <P WEIGHT="1.01" PROPNAME="SelectCommands">
               <TEXTBUFFER/>
               <LN PROPNAME="SelectWordCommand">
                   <P VAL="Select_ID_SELECT">+/を/を/ヲ;/選択/せんたく/センタク;</P>
                   <P VAL="Select_ID_DELETE">+/を/を/ヲ;/削除/さくじょ/サクジョ;</P>
                   <P VAL="Select_ID_CORRECT">+/を/を/ヲ;/修正/しゅうせい/シュウセイ;</P>
               </LN>
           </P>
        </LN>
    </RULE>


              
    <RULE NAME="SelectThrough" TOPLEVEL="ACTIVE">
        <LN>
           <P WEIGHT="1000.01">zhoulotskunosprok</P>
           <P WEIGHT="1.01" PROPNAME="SelectCommands" VAL="Select_Through">
               <TEXTBUFFER/> <P PROPNAME="through" VALSTR="から">/から/から/カラ;</P> <TEXTBUFFER/>
               <LN PROPNAME="SelectWordCommand">
                   <P VAL="Select_ID_SELTHROUGH" VALSTR="SelectThrough">/を/を/ヲ;/選択/せんたく/センタク;</P>
                   <P VAL="Select_ID_DELTHROUGH" VALSTR="DeleteThrough">/を/を/ヲ;/削除/さくじょ/サクジョ;</P>
               </LN>
           </P>
        </LN>
    </RULE>

    <RULE  NAME="SelectSimpleCmds" TOPLEVEL="ACTIVE">
        <LN PROPNAME="SelectSimpleCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="2.01" VAL="Select_ID_UNSELECT">+/選択/せんたく/センタク;/解除/かいじょ/カイジョ;</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELECTPREV">+/一/いち/イチ;/文章/ぶんしょう/ブンショウ;/前/まえ/マエ;/選択/せんたく/センタク;</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELECTNEXT">+/一/いち/イチ;/文章/ぶんしょう/ブンショウ;/後/あと/アト;/選択/せんたく/センタク;</P>
              <P WEIGHT="1.01" VAL="Select_ID_CORRECTPREV">+/一/いち/イチ;/文章/ぶんしょう/ブンショウ;/前/まえ/マエ;/修正/しゅうせい/シュウセイ;</P>
              <P WEIGHT="1.01" VAL="Select_ID_CORRECTNEXT">+/一/いち/イチ;/文章/ぶんしょう/ブンショウ;/後/あと/アト;/修正/しゅうせい/シュウセイ;</P>
              <P WEIGHT="1.01" VAL="Select_ID_SelectThat">/それを/それを/ソレヲ;/選択/せんたく/センタク;</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELSENTENCE">+/一/いち/イチ;/文章/ぶんしょう/ブンショウ;/選択/せんたく/センタク;</P>
              <P WEIGHT="1.01" VAL="Select_ID_SELPARAGRAPH">+/一/いち/イチ;/段落/だんらく/ダンラク;/選択/せんたく/センタク;</P>
              <P WEIGHT="1.01" VAL="Select_ID_SelectAll">+/全て/すべて/スベテ;/選択/せんたく/センタク;</P>
              <P WEIGHT="1.01" VAL="Select_ID_DeletePhrase">+/今/いま/イマ;/の/の/ノ;/なし/なし/ナシ;</P>
              <P WEIGHT="1.01" VAL="Select_ID_DeletePhrase">
                    <O>
                        <L>
                            <P>/それを/それを/ソレヲ;</P>
                            <P>/これを/これを/コレヲ;</P>
                        </L>
                    </O>
                    +/やり直し/やりなおし/ヤリナオシ;
                    <O>
                        <L>
                            <P>/てください/てください/テクダサイ;</P>
                            <P>/してください/してください/シテクダサイ;</P>
                            <P>/しろ/しろ/シロ;</P>
                        </L>
                    </O>
              </P>

              <P WEIGHT="1.01" VAL="Select_ID_Convert">+/修正/しゅうせい/シューセー; /候補/こうほ/コーホ;</P>
              <P WEIGHT="1.01" VAL="Select_ID_Convert">+/候補/こうほ/コーホ;/の/の/ノ;/表示/ひょうじ/ヒョウジ;</P>
              <P WEIGHT="1.01" VAL="Select_ID_Convert">
                    <O>
                        <L>
                            <P>/それを/それを/ソレヲ;</P>
                            <P>/これを/これを/コレヲ;</P>
                        </L>
                    </O>
                    +/変換/へんかん/ヘンカン;/する/する/スル;
                    <O>
                        <L>
                            <P>/てください/てください/テクダサイ;</P>
                            <P>/してください/してください/シテクダサイ;</P>
                            <P>/しろ/しろ/シロ;</P>
                        </L>
                    </O>
              </P>

              <P WEIGHT="1.01" VAL="Select_ID_Finalize">/確定/かくてい/カクテイ;</P>
        </LN>
    </RULE>

    <RULE NAME="EditCmds" TOPLEVEL="ACTIVE">
        <LN PROPNAME="EditCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Undo">/それを/それを/ソレヲ;/元に/もとに/モトニ;+/戻す/もどす/モドス;</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Cut">/それを/それを/ソレヲ;+/切り取る/きりとる/キリトル;</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Copy">/それを/それを/ソレヲ;+/コピーする/こぴーする/コピースル;</P>
              <P WEIGHT="1.01" VAL="Edit_ID_Paste">/それを/それを/ソレヲ;+/貼り付ける/はりつける/ハリツケル;</P>
        </LN> 
    </RULE>

    <RULE NAME="NavigationCmds"  TOPLEVEL="ACTIVE">
        <LN  PROPNAME="NavigationCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_Go_To_Bottom">+/文末へ/ぶんまつへ/ブンマツヘ;/移動/いどう/イドウ;</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_Go_To_Top">+/文頭へ/ぶんとうへ/ブントウヘ;/移動/いどう/イドウ;</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_Move_Home">+/行頭へ/ぎょうとうへ/ギョウトウヘ;/移動/いどう/イドウ;</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_Move_End">+/行末へ/ぎょうまつへ/ギョウマツヘ;/移動/いどう/イドウ;</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_INSERTBEFORE"><TEXTBUFFER/> +/の/の/ノ;/前に挿入/まえにそうにゅう/マエニソウニュウ;</P>
              <P WEIGHT="1.01" VAL="Navigate_ID_INSERTAFTER"><TEXTBUFFER/> +/の/の/ノ;/後に挿入/あとにそうにゅう/アトニソウニュウ;</P>
        </LN>
    </RULE>

<!--
    <RULE NAME="CasingCmds"  TOPLEVEL="ACTIVE">
        <LN  PROPNAME="CasingCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>	
              <P WEIGHT="1.01" VAL="Case_ID_CapIt">+/大文字で/おおもじで/オオモジデ; *+;</P>
              <P WEIGHT="1.01" VAL="Case_ID_AllCaps">+All Caps *+</P>
              <P WEIGHT="1.01" VAL="Case_ID_NoCaps">+No Caps *+</P>
              <P WEIGHT="1.01" VAL="Case_ID_CapThat">+Cap That</P>
              <P WEIGHT="1.01" VAL="Case_ID_CapThat">+Capitalize</P>
              <P WEIGHT="1.01" VAL="Case_ID_AllCapsThat">+All Caps That</P>
              <P WEIGHT="1.01" VAL="Case_ID_NoCapsThat">+No Caps That</P>
              <P WEIGHT="1.01" VAL="Case_ID_NoCapsThat">+Uncapitalize</P>
        </LN>
    </RULE>

Remove Select_Word:                
       <P WEIGHT="1.01" VAL="Select_ID_SELWORD">+/一/いち/イチ;/単語/たんご/タンゴ;/選択/せんたく/センタク;</P>
-->

    <RULE NAME="KeyboardCmds"  TOPLEVEL="ACTIVE">
        <LN PROPNAME="KeyboardCmdProp">
              <P WEIGHT="1000.01" VAL="0">zhoulotskunosprok</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Tab">+/タブ/たぶ/タブ;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Tab">+/次/つぎ/ツギ;/の/の/ノ;/セル/せる/セル;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Enter">+/改行/かいぎょう/カイギョー;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Enter">+/次行/じぎょう/ジギョー;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Backspace">+/バックスペース/ばっくすぺーす/バックスペース;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Delete">+/削除/さくじょ/サクジョ;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_SpaceBar">+/スペース/すぺーす/スペース;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_SpaceBar">+/スペースキー/すぺーすきー/スペースキー;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Up">+/一行上/いちぎょううえ/イチギョウウエ;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Down">+/一行下/いちぎょうした/イチギョウシタ;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Left">+/一文字左/いちもじひだり/イチモジヒダリ;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Move_Right">+/一文字右/いちもじみぎ/イチモジミギ;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Page_Up">+/一ページ上/いちぺーじうえ/イチページウエ;</P>
              <P WEIGHT="1.01" VAL="Keyboard_ID_Page_Down">+/一ページ下/いちぺーじした/イチページシタ;</P>
        </LN>
    </RULE>

</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\smplnumjp.xml ===
﻿<GRAMMAR LANGID="411">
    <DEFINE>
        <ID NAME="YENs" VAL="1"/>

        <ID NAME="CHOOs" VAL="2"/>
        <ID NAME="OKUs" VAL="3"/>
        <ID NAME="MANNs" VAL="4"/>

        <ID NAME="SENNs" VAL="5"/>
        <ID NAME="HYAKUs" VAL="6"/>
        <ID NAME="JUUs" VAL="7"/>
        <ID NAME="ICHIs" VAL="8"/>

        <ID NAME="NEGATIVE" VAL="9"/>
	<ID NAME="DIGIT" VAL="10"/>

	<ID NAME="FP_PART" VAL="12"/>
	<ID NAME="FP_PART_D" VAL="95"/>
	<ID NAME="ZERO" VAL="13"/>
	<ID NAME="NUMERATOR" VAL="14"/>
	<ID NAME="DENOMINATOR" VAL="15"/>
	<ID NAME="WHOLE" VAL="16"/>

 	<ID NAME="GRID_INTEGER_9999" VAL="1001"/>
        <ID NAME="GRID_INTEGER_STANDALONE" VAL="1002"/>
        <ID NAME="GRID_INTEGER" VAL="1003"/>
        <ID NAME="GRID_INTEGER_NONNEG" VAL="1004"/>
        <ID NAME="GRID_DIGIT_NUMBER" VAL="1005"/>
	<ID NAME="GRID_FP_NUMBER" VAL="1006"/>
        <ID NAME="GRID_NUMBER_ALL" VAL="1007"/>
      
        
    </DEFINE>

        <!--
                GRID_NUMBER_ALL
                All kinds of number,  negative or positive, integer or float pointing number.
                TopLevel Active rule.
        -->
        <RULE  NAME="GRID_NUMBER_ALL" ID="GRID_NUMBER_ALL" TOPLEVEL="ACTIVE" EXPORT="0">
           <LN>
           <P WEIGHT="1000.01">zhoulotskunosprok</P>
	   <P WEIGHT="1.01">+/数字モード/すうじもーど/スウジモード;
             <O>
	       <RULEREF NAME="NEGATIVE" PROPNAME="NEGATIVE" PROPID="NEGATIVE"/>
	    </O>
            <L>
               <RULEREF NAME="number_base_nonneg" PROPNAME="GRID_INTEGER_STANDALONE" PROPID="GRID_INTEGER_STANDALONE"/> 
               <RULEREF NAME="GRID_FP_NUMBER" PROPNAME="GRID_FP_NUMBER" PROPID="GRID_FP_NUMBER"/> 
            </L>
           </P>
           </LN>
        </RULE>

	<!-- 
		INTEGER_9999
		Numbers in [0, 10000)
		Toplevel inactive but can be imported
	-->
	<RULE NAME="GRID_INTEGER_9999" ID="GRID_INTEGER_9999" TOPLEVEL="INACTIVE" EXPORT="1">
        <RULEREF NAME="cardinal_9999" PROPNAME="ICHIs" PROPID="ICHIs"/> 
	</RULE>
		

	<!-- 
		INTEGER_STANDALONE
		A INTEGER_STANDALONE can be in the range (-1e12, 1e12) and will always be


		called as a toplevel rule. 
		This rule is not referenced by any other rules.
	-->
	<RULE NAME="GRID_INTEGER_STANDALONE" ID="GRID_INTEGER_STANDALONE" TOPLEVEL="INACTIVE" EXPORT="1">
		<RULEREF NAME="number_base"/>
	</RULE>

        <!--
            INTEGER
            A INTEGER can be in the range (-1e12, 1e12) and will never be called
            as a toplevel rule
        -->
        <RULE NAME="GRID_INTEGER" ID="GRID_INTEGER" TOPLEVEL="INACTIVE" EXPORT="1">
                <RULEREF NAME="number_base"/>
        </RULE>

        <!--
            INTEGER_NONNEG
            A INTEGER_NONNEG can be in the range [0, 1e12) and will never be called
            as a toplevel rule
        -->
        <RULE NAME="GRID_INTEGER_NONNEG" ID="GRID_INTEGER_NONNEG" TOPLEVEL="INACTIVE" EXPORT="1">
            <RULEREF NAME="number_base_nonneg"/>
        </RULE>



	<!-- 
		DIGIT_NUMBER
		Integers in (0, 1e12), spelled out either one digit at a time or two digits
		at a time.  
		This rule is an INACTIVE toplevel rule, since it should go through GRID_INTEGER
		to be formatted
	-->
	<RULE NAME="GRID_DIGIT_NUMBER" ID="GRID_DIGIT_NUMBER" TOPLEVEL="INACTIVE" EXPORT="1">
		<P MIN="2" MAX="12">
			<RULEREF NAME="digit"/>
		</P>
	</RULE>
	
	<!-- 
		FP_NUMBER
		Floating-point numbers with up to 12 sig figs.  Both the stuff to the left of the 
		decimal point and the stuff to the right of the decimal point can be either
		NUMBERs or DIGIT_NUMBERs
	-->
	<RULE NAME="GRID_FP_NUMBER" ID="GRID_FP_NUMBER" TOPLEVEL="INACTIVE" EXPORT="1">

		<O>
			<P>
			<RULEREF NAME="number_base_nonneg" PROPNAME="ICHIs" PROPID="ICHIs"/>
			</P>

		</O>
		<P> 
			<L>
				<P> /点/てん/テン; </P>
				<P> /・/・/テン; </P>
                                <P> /．/．/テン; </P>
                        </L>
		</P>
		<P>
			<L>
			   <P>
			     <RULEREF NAME="GRID_DIGIT_NUMBER"  PROPNAME="FP_PART" PROPID="FP_PART"/>
			   </P>
			   <P>
			     <RULEREF NAME="digit"  PROPNAME="FP_PART_D" PROPID="FP_PART_D"/>
			   </P>
			</L>
		</P>

	</RULE>
	
<!-- ************************************************************************
		CARDINAL QUANTITIES
	 ************************************************************************ -->
	<!-- 
		number_base
		The rule referenced by the number rules above
	-->
	<RULE NAME="number_base">
		<O>
			<RULEREF NAME="NEGATIVE" PROPNAME="NEGATIVE" PROPID="NEGATIVE"/>
		</O>
		<P>
			<RULEREF NAME="number_base_nonneg"/>
		</P>
	</RULE>

	<!-- 
		number_base_nonneg
		Same as above except nonnegative
	-->
	<RULE NAME="number_base_nonneg">
		<L>
			<P>
				<RULEREF NAME="cardinal"/>
			</P>
			<P>
				<RULEREF NAME="GRID_DIGIT_NUMBER" PROPNAME="GRID_DIGIT_NUMBER" PROPID="GRID_DIGIT_NUMBER"/>
			</P>
		</L>
	</RULE>

	<!-- 
		cardinal
		A cardinal is defined here as a number in [0, 1e16), properly 
		formed (not spoken digit by digit)
	-->
	<RULE NAME="cardinal">
        <L>
            <P>
		 <RULEREF NAME="cardinal_9999" PROPNAME="CHOOs" PROPID="CHOOs"/>
                 <P> /兆/ちょう/チョー; </P>
                 <O>
		     <RULEREF NAME="cardinal_9999" PROPNAME="OKUs" PROPID="OKUs"/>
                     <P> /億/おく/オク;</P>
                 </O>
                 <O>
		     <RULEREF NAME="cardinal_9999" PROPNAME="MANNs" PROPID="MANNs"/>
                     <P> /万/まん/マン; </P>
                 </O>
		 <O>
                     <RULEREF NAME="cardinal_9999" PROPNAME="ICHIs" PROPID="ICHIs"/>
                 </O>
            </P>
            <P>
		 <RULEREF NAME="cardinal_9999" PROPNAME="OKUs" PROPID="OKUs"/>
                 <P> /億/おく/オク;</P>
                 <O>
		     <RULEREF NAME="cardinal_9999" PROPNAME="MANNs" PROPID="MANNs"/>
                     <P> /万/まん/マン; </P>
                 </O>
		 <O>
                     <RULEREF NAME="cardinal_9999" PROPNAME="ICHIs" PROPID="ICHIs"/>
                 </O>
            </P>
            <P>
                  <RULEREF NAME="cardinal_9999" PROPNAME="MANNs" PROPID="MANNs"/>
                  <P> /万/まん/マン; </P>
                  <O> <RULEREF NAME="cardinal_9999" PROPNAME="ICHIs" PROPID="ICHIs"/> </O>
            </P>
            <P>
                  <RULEREF NAME="cardinal_9999" PROPNAME="ICHIs" PROPID="ICHIs"/>
            </P>

        </L>
	</RULE>

	
	<!-- 
		cardinal_9999
		This is defined as a number in [0,10000).
	-->
	<RULE NAME="cardinal_9999">
        <L>
            <P>
                <RULEREF NAME="senn_frag"/>
                    <O><RULEREF NAME="hyaku_frag"/></O>
                        <O><RULEREF NAME="juu_frag"/></O>
                            <O><RULEREF NAME="ichi_frag"/></O>
            </P>
            <P>
                <RULEREF NAME="hyaku_frag"/>
                    <O><RULEREF NAME="juu_frag"/></O>
                        <O><RULEREF NAME="ichi_frag"/></O>
            </P>
            <P>
                <RULEREF NAME="juu_frag"/>
                    <O><RULEREF NAME="ichi_frag"/></O>
            </P>
            <P>
                <RULEREF NAME="ichi_frag"/>
            </P>

        </L>
	</RULE>

     <RULE NAME="NEGATIVE">
        <L>
            <P>
                /－/まいなす/マイナス;
            </P>
            <P>
                /マイナス/まいなす/マイナス;
            </P>
        </L>
    </RULE>

    <RULE NAME="senn_frag">
        <LN PROPNAME="SENNs" PROPID="SENNs">
            <PN VAL="1000"> /千/せん/セン; </PN>
            <PN VAL="1000"> /一千/いっせん/イッセン; </PN>
            <PN VAL="2000"> /二千/にせん/ニセン;  </PN>
            <PN VAL="3000"> /三千/さんぜん/サンゼン; </PN>
            <PN VAL="4000"> /四千/よんせん/ヨンセン; </PN>
            <PN VAL="5000"> /五千/ごせん/ゴセン; </PN>
            <PN VAL="6000"> /六千/ろくせん/ロクセン; </PN>
            <PN VAL="7000"> /七千/ななせん/ナナセン; </PN>
            <PN VAL="8000"> /八千/はっせん/ハッセン; </PN>
            <PN VAL="9000"> /九千/きゅうせん/キューセン; </PN>
        </LN>
    </RULE>
    <RULE NAME="hyaku_frag">
        <LN PROPNAME="HYAKUs" PROPID="HYAKUs">
            <PN VAL="100"> /百/ひゃく/ヒャク; </PN>
            <PN VAL="100"> /百/ひゃっ/ヒャッ; </PN>
            <PN VAL="200"> /二百/にひゃく/ニヒャク; </PN>
            <PN VAL="200"> /二百/にひゃっ/ニヒャッ; </PN>
            <PN VAL="300"> /三百/さんびゃく/サンビャク; </PN>
            <PN VAL="300"> /三百/さんびゃっ/サンビャッ; </PN>
            <PN VAL="400"> /四百/よんひゃく/ヨンヒャク; </PN>
            <PN VAL="400"> /四百/よんひゃっ/ヨンヒャッ; </PN>
            <PN VAL="500"> /五百/ごひゃく/ゴヒャク; </PN>
            <PN VAL="500"> /五百/ごひゃっ/ゴヒャッ; </PN>
            <PN VAL="600"> /六百/ろっぴゃく/ロッピャク; </PN>
            <PN VAL="600"> /六百/ろっぴゃっ/ロッピャッ; </PN>
            <PN VAL="700"> /七百/ななひゃく/ナナヒャク; </PN>
            <PN VAL="700"> /七百/ななひゃっ/ナナヒャッ; </PN>
            <PN VAL="800"> /八百/はっぴゃく/ハッピャク; </PN>
            <PN VAL="800"> /八百/はっぴゃっ/ハッピャッ; </PN>
            <PN VAL="900"> /九百/きゅうひゃく/キューヒャク; </PN>
            <PN VAL="900"> /九百/きゅうひゃっ/キューヒャッ; </PN>
        </LN>
    </RULE>

    <RULE NAME="juu_frag">
        <LN PROPNAME="JUUs" PROPID="JUUs">
            <PN VAL="10"> /十/じゅう/ジュー; </PN>
            <PN VAL="10"> /十/じゅっ/ジュッ; </PN>
            <PN VAL="10"> /十/じっ/ジッ; </PN>
            <PN VAL="20"> /二十/にじゅう/ニジュー; </PN>
            <PN VAL="20"> /二十/にじゅっ/ニジュッ; </PN>
            <PN VAL="20"> /二十/にじっ/ニジッ; </PN>
            <PN VAL="30"> /三十/さんじゅう/サンジュー; </PN>
            <PN VAL="30"> /三十/さんじゅっ/サンジュッ; </PN>
            <PN VAL="30"> /三十/さんじっ/サンジッ; </PN>
            <PN VAL="40"> /四十/よんじゅう/ヨンジュー; </PN>
            <PN VAL="40"> /四十/よんじゅっ/ヨンジュッ; </PN>
            <PN VAL="40"> /四十/よんじっ/ヨンジッ; </PN>
            <PN VAL="40"> /四十/しじゅう/シジュー; </PN>
            <PN VAL="40"> /四十/しじゅっ/シジュッ; </PN>
            <PN VAL="50"> /五十/ごじゅう/ゴジュー; </PN>
            <PN VAL="50"> /五十/ごじゅっ/ゴジュッ; </PN>
            <PN VAL="50"> /五十/ごじっ/ゴジッ; </PN>
            <PN VAL="60"> /六十/ろくじゅう/ロクジュー; </PN>
            <PN VAL="60"> /六十/ろくじゅっ/ロクジュッ; </PN>
            <PN VAL="60"> /六十/ろくじっ/ロクジッ; </PN>
            <PN VAL="70"> /七十/しちじゅう/シチジュー; </PN>
            <PN VAL="70"> /七十/しちじゅっ/シチジュッ; </PN>
            <PN VAL="70"> /七十/しちじっ/シチジッ; </PN>
            <PN VAL="70"> /七十/ななじゅう/ナナジュー; </PN>
            <PN VAL="70"> /七十/ななじゅっ/ナナジュッ; </PN>
            <PN VAL="70"> /七十/ななじっ/ナナジッ; </PN>
            <PN VAL="80"> /八十/はちじゅう/ハチジュー; </PN>
            <PN VAL="80"> /八十/はちじゅっ/ハチジュッ; </PN>
            <PN VAL="80"> /八十/はちじっ/ハチジッ; </PN>
            <PN VAL="90"> /九十/きゅうじゅう/キュージュー; </PN>
            <PN VAL="90"> /九十/きゅうじゅっ/キュージュッ; </PN>
            <PN VAL="90"> /九十/きゅうじっ/キュージッ; </PN>
        </LN>
    </RULE>

    <RULE NAME="ichi_frag">
        <LN PROPNAME="ICHIs" PROPID="ICHIs">
            <PN VAL="0"> /〇/ぜろ/ゼロ; </PN>
            <PN VAL="0"> /ゼロ/ぜろ/ゼロ; </PN>
            <PN VAL="0"> /零/れい/レー; </PN>
            <PN VAL="1"> /一/いち/イチ; </PN>
            <PN VAL="1"> /一/いっ/イッ; </PN>
            <PN VAL="2"> /二/に/ニ; </PN>
            <PN VAL="3"> /三/さん/サン; </PN>
            <PN VAL="4"> /四/よん/ヨン; </PN>
            <PN VAL="4"> /四/よ/ヨ; </PN>
            <PN VAL="4"> /四/し/シ; </PN>
            <PN VAL="5"> /五/ご/ゴ; </PN>
            <PN VAL="6"> /六/ろく/ロク; </PN>
            <PN VAL="6"> /六/ろっ/ロッ; </PN>
            <PN VAL="7"> /七/しち/シチ; </PN>
            <PN VAL="7"> /七/なな/ナナ; </PN>
            <PN VAL="8"> /八/はち/ハチ; </PN>
            <PN VAL="8"> /八/はっ/ハッ; </PN>
            <PN VAL="9"> /九/きゅう/キュー; </PN>
            <PN VAL="9"> /九/く/ク; </PN>
        </LN>
    </RULE>

    <RULE NAME="digit">
		<LN PROPNAME="DIGIT" PROPID="DIGIT">
            <PN VAL="0"> /〇/ぜろ/ゼロ; </PN>
            <PN VAL="0"> /ゼロ/ぜろ/ゼロ; </PN>
            <PN VAL="0"> /零/れい/レー; </PN>
            <PN VAL="1"> /一/いち/イチ; </PN>
            <PN VAL="1"> /一/いっ/イッ; </PN>
            <PN VAL="2"> /二/に/ニ; </PN>
            <PN VAL="3"> /三/さん/サン; </PN>
            <PN VAL="4"> /四/よん/ヨン; </PN>
            <PN VAL="4"> /四/し/シ; </PN>
            <PN VAL="4"> /四/よ/ヨ; </PN>
            <PN VAL="5"> /五/ご/ゴ; </PN>
            <PN VAL="6"> /六/ろく/ロク; </PN>
            <PN VAL="6"> /六/ろっ/ロッ; </PN>
            <PN VAL="7"> /七/しち/シチ; </PN>
            <PN VAL="7"> /七/なな/ナナ; </PN>
            <PN VAL="8"> /八/はち/ハチ; </PN>
            <PN VAL="8"> /八/はっ/ハッ; </PN>
            <PN VAL="9"> /九/きゅう/キュー; </PN>
            <PN VAL="9"> /九/く/ク; </PN>
		</LN>
	</RULE>



</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\smplnumchs.xml ===
﻿<!-- ************************************************************************
     CHS ITN Grammars

                        Microsoft Corporation 2000

        CHS ITN rules depends on CHS SR dictionary. All the items here should 
        be a word in CHS SR dictionary

        In this grammar, we support:
            Integer
            Decimal
            Minus number

************************************************************************* -->

<GRAMMAR LANGID="804">

    <!-- ************************************************************************
         Definations that will appear in header file

    ************************************************************************* -->
    <DEFINE>
        <ID NAME="HUNDREDMILLIONS" VAL="1"/>
        <ID NAME="TENTHOUSANDS" VAL="2"/>
        <ID NAME="TENTHOUSANDS_" VAL="3"/>
        <ID NAME="THOUSANDS" VAL="4"/>
        <ID NAME="HUNDREDS" VAL="5"/>
        <ID NAME="HUNDREDS_" VAL="6"/>
        <ID NAME="ONES" VAL="7"/>
        <ID NAME="INTEGER" VAL="8"/>
        <ID NAME="DECIMAL" VAL="9"/>
        <ID NAME="NEGATIVE" VAL="10"/>
        <ID NAME="PERIOD" VAL="23"/>
        <ID NAME="DIGITS" VAL="24"/>
        <ID NAME="POS_OF_MINUS" VAL="27"/>
        <ID NAME="ONES_THOUSANDS" VAL="28"/>
        <ID NAME="GRID_NUMBER" VAL="1001"/>
        <ID NAME="GRID_NUMBER_MINUS" VAL="1002"/>
        <ID NAME="GRID_DECIMAL" VAL="1003"/>
        <ID NAME="GRID_NUMBER_ALL" VAL="1004"/>
    </DEFINE>

    <!-- ***************************************************************************
        Number_All: includes negative or positive interger or float pointer numbers
                
    **************************************************************************** -->
    <RULE NAME="GRID_NUMBER_ALL" ID="GRID_NUMBER_ALL" TOPLEVEL="ACTIVE" EXPORT="1">
        <LN>
        <P WEIGHT="1000.01">zhoulotskunosprok</P>
        <P WEIGHT="1.01">数字

            <O>
                <P PROPNAME="NEGATIVE" PROPID="NEGATIVE">负</P>
            </O>

            <L>
                <P> <RULEREF NAME="GRID_NUMBER" PROPNAME="GRID_NUMBER" PROPID="GRID_NUMBER"/> </P>
                <P> <RULEREF NAME="GRID_DECIMAL" PROPNAME="GRID_DECIMAL" PROPID="GRID_DECIMAL"/> </P>
            </L>
        </P>
        </LN>
    </RULE>

    <!-- ************************************************************************
         Grid number(positive integers from 0 - 9999,9999,9999(Chs spelling rules) or 999,999,999,999

    ************************************************************************* -->
    <RULE NAME="GRID_NUMBER" ID="GRID_NUMBER" TOPLEVEL="INACTIVE" EXPORT="1">
        <L>
            <P> <!-- ********************  begining with '亿' section ******************* -->
                <RULEREF NAME="GRID_NUMBER_9999" PROPNAME="HUNDREDMILLIONS" PROPID="HUNDREDMILLIONS"/>
                <P>亿</P>
                <O>
                    <L>
                        <P> <!-- ********************  has '万' section ******************* -->
                            <L>
                                <RULEREF NAME="GRID_NUMBER_9999" PROPNAME="TENTHOUSANDS" PROPID="TENTHOUSANDS"/> 
                                <RULEREF NAME="ZERO_GRID_NUMBER_0999" PROPNAME="TENTHOUSANDS" PROPID="TENTHOUSANDS"/> 
                            </L>
                            <P>万</P> 
                            <O>
                                <L>
                                    <P> <RULEREF NAME="ONESFRAG_ONE_DIGIT_THOUSANDS" PROPNAME="ONES_THOUSANDS" PROPID="ONES_THOUSANDS"/> </P>
                                    <RULEREF NAME="GRID_NUMBER_9990" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                                    <RULEREF NAME="ZERO_GRID_NUMBER_0999" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                                </L>
                            </O>
                        </P>

                        <P> <!-- ********************  does not have '万' section and directly has '个' section ******************* -->
                            <L>
                                <P>
                                    <RULEREF NAME="ZERODIGITS" PROPNAME="DIGITS" PROPID="DIGITS" VAL="0"/>
                                    <RULEREF NAME="GRID_NUMBER_9999" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                                </P>
                                <P>
                                    <RULEREF NAME="ZERO_GRID_NUMBER_0999" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                                </P>
                            </L>
                        </P>
                    </L>
                </O>
            </P>

            <P> <!-- ********************  begining with '万' section ******************* -->
                <L>
                    <P>
                        <RULEREF NAME="GRID_NUMBER_9999" PROPNAME="TENTHOUSANDS" PROPID="TENTHOUSANDS"/> 
                        <P>万</P> 
                    </P>

                    <P>
                        <L PROPNAME="TENTHOUSANDS_" PROPID="TENTHOUSANDS_">
                        <P VAL= "1" VALSTR="1">一万</P>
                        <P VAL= "2" VALSTR="2">二万</P>
                        <P VAL= "2" VALSTR="2">两 万</P>
                        <P VAL= "3" VALSTR="3">三万</P>
                        <P VAL= "4" VALSTR="4">四万</P>
                        <P VAL= "5" VALSTR="5">五万</P>
                        <P VAL= "6" VALSTR="6">六万</P>
                        <P VAL= "7" VALSTR="7">七万</P>
                        <P VAL= "8" VALSTR="8">八万</P>
                        <P VAL= "9" VALSTR="9">九万</P>
                        <P VAL= "10" VALSTR="10">十万</P>
                        </L>
                    </P>
                </L>

                <O>
                    <L>
                        <P> <RULEREF NAME="ONESFRAG_ONE_DIGIT_THOUSANDS" PROPNAME="ONES_THOUSANDS" PROPID="ONES_THOUSANDS"/> </P>
                        <RULEREF NAME="GRID_NUMBER_9990" PROPNAME="ONES" PROPID="ONES"/>
                        <RULEREF NAME="ZERO_GRID_NUMBER_0999" PROPNAME="ONES" PROPID="ONES"/>
                    </L>
                </O>
            </P>

            <P> <!-- ********************  begining with '个' section ******************* -->
                <RULEREF NAME="GRID_NUMBER_9999" PROPNAME="ONES" PROPID="ONES"/>
            </P>

            <P> <!-- ********************  zero itself ******************* -->
                <RULEREF NAME="ZERODIGITS" PROPNAME="ONES" PROPID="ONES" VAL="0"/>
            </P>

            <P MIN="2" MAX="12"> <RULEREF NAME="DIGITS"/> </P>
        </L>
    </RULE>

    <!-- ************************************************************************
        Grid number 9999, integers from [1 - 9999], no leading zero

    ************************************************************************* -->
    <RULE NAME="GRID_NUMBER_9999">
        <L>
            <P> <!---  ********************  begining with '千' section *************** -->
                <RULEREF NAME="THOUSANDSFRAG" PROPNAME="THOUSANDS" PROPID="THOUSANDS" VAL="1000"/>
                <O>
                    <L>
                        <P> <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="100"/> </P>
                        <P> <!-- ********************  has hundreds frag ******************* -->
                            <P><RULEREF NAME="HUNDREDSFRAG" PROPNAME="HUNDREDS" PROPID="HUNDREDS" VAL="100"/></P>
                            <O>
                                <L>
                                    <P> <RULEREF NAME="ONESFRAG_TWO_DIGITS" PROPNAME="ONES" PROPID="ONES" VAL="1"/> </P>
                                    <P> 
                                        <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="10"/>
                                        <O>
                                            <RULEREF NAME="ONESFRAG_TWO_DIGITS_TRAIL" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                                        </O>
                                    </P>
                                    <P>
                                        <RULEREF NAME="ZERODIGITS" PROPNAME="ONES" PROPID="ONES" VAL="0"/>
                                        <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="1"/>
                                    </P>
                                </L>
                            </O>
                        </P>
                        <P> <!-- ********************  no hundreds frag ******************* -->
                            <RULEREF NAME="ZERODIGITS" PROPNAME="ONES" PROPID="ONES" VAL="0"/>
                            <L>
                                <RULEREF NAME="ONESFRAG" PROPNAME="ONES" PROPID="ONES" VAL="1"/>
                                <P> 
                                    <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="10"/>
                                    <RULEREF NAME="ONESFRAG_TWO_DIGITS_TRAIL" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                                </P>
                            </L>
                        </P>
                    </L>
                </O>
            </P>

            <P> <!---  ********************  begining with '百' section *************** -->
                <RULEREF NAME="HUNDREDSFRAG" PROPNAME="HUNDREDS" PROPID="HUNDREDS" VAL="100"/>
                <O>
                    <L>
                        <P> <RULEREF NAME="ONESFRAG_TWO_DIGITS" PROPNAME="ONES" PROPID="ONES" VAL="1"/> </P>
                        <P> 
                            <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="10"/>
                            <O>
                                <RULEREF NAME="ONESFRAG_TWO_DIGITS_TRAIL" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                            </O>
                        </P>
                        <P>
                            <RULEREF NAME="ZERODIGITS" PROPNAME="ONES" PROPID="ONES" VAL="0"/>
                            <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                        </P>
                    </L>
                </O>
            </P>

            <P> <RULEREF NAME="ONESFRAG" PROPNAME="ONES" PROPID="ONES" VAL="1"/> </P>
        </L>
    </RULE>

    <!-- ************************************************************************
        Grid number 9990, integers from [10 - 9999], no leading zero

    ************************************************************************* -->
    <RULE NAME="GRID_NUMBER_9990">
        <L>
            <P> <!---  ********************  begining with '千' section *************** -->
                <RULEREF NAME="THOUSANDSFRAG" PROPNAME="THOUSANDS" PROPID="THOUSANDS" VAL="1000"/>
                <O>
                    <L>
                        <P> <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="100"/> </P>
                        <P> <!-- ********************  has hundreds frag ******************* -->
                            <P><RULEREF NAME="HUNDREDSFRAG" PROPNAME="HUNDREDS" PROPID="HUNDREDS" VAL="100"/></P>
                            <O>
                                <L>
                                    <P> <RULEREF NAME="ONESFRAG_TWO_DIGITS" PROPNAME="ONES" PROPID="ONES" VAL="1"/> </P>
                                    <P> 
                                        <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="10"/>
                                        <O>
                                            <RULEREF NAME="ONESFRAG_TWO_DIGITS_TRAIL" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                                        </O>
                                    </P>
                                    <P>
                                        <RULEREF NAME="ZERODIGITS" PROPNAME="ONES" PROPID="ONES" VAL="0"/>
                                        <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="1"/>
                                    </P>
                                </L>
                            </O>
                        </P>
                        <P> <!-- ********************  no hundreds frag ******************* -->
                            <RULEREF NAME="ZERODIGITS" PROPNAME="ONES" PROPID="ONES" VAL="0"/>
                            <L>
                                <RULEREF NAME="ONESFRAG" PROPNAME="ONES" PROPID="ONES" VAL="1"/>
                                <P> 
                                    <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="10"/>
                                    <RULEREF NAME="ONESFRAG_TWO_DIGITS_TRAIL" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                                </P>
                            </L>
                        </P>
                    </L>
                </O>
            </P>

            <P> <!---  ********************  begining with '百' section *************** -->
                <RULEREF NAME="HUNDREDSFRAG" PROPNAME="HUNDREDS" PROPID="HUNDREDS" VAL="100"/>
                <O>
                    <L>
                        <P> <RULEREF NAME="ONESFRAG_TWO_DIGITS" PROPNAME="ONES" PROPID="ONES" VAL="1"/> </P>
                        <P> <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="10"/>
                            <O>
                                <RULEREF NAME="ONESFRAG_TWO_DIGITS_TRAIL" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                            </O>
                        </P>
                        <P>
                            <RULEREF NAME="ZERODIGITS" PROPNAME="ONES" PROPID="ONES" VAL="0"/>
                            <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                        </P>
                    </L>
                </O>
            </P>

            <P> <RULEREF NAME="ONESFRAG_TWO_DIGITS" PROPNAME="ONES" PROPID="ONES" VAL="1"/> </P>
        </L>
    </RULE>

    <!-- ************************************************************************
        Grid number 0999, positive integers from [1 - 999], with leading zero
                
     ************************************************************************ -->
    <RULE NAME="ZERO_GRID_NUMBER_0999">
        <P> <RULEREF NAME="ZERODIGITS" PROPNAME="ONES" PROPID="ONES" VAL="0"/> </P>
        <L>
            <P>
                <RULEREF NAME="HUNDREDSFRAG" PROPNAME="HUNDREDS" PROPID="HUNDREDS" VAL="100"/>
                <O>
                    <L>
                        <P> <RULEREF NAME="ONESFRAG_TWO_DIGITS" PROPNAME="ONES" PROPID="ONES" VAL="1"/> </P>
                        <P> 
                            <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="10"/>
                            <O>
                                <RULEREF NAME="ONESFRAG_TWO_DIGITS_TRAIL" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                            </O>
                        </P>
                        <P> 
                            <RULEREF NAME="ZERODIGITS" PROPNAME="ONES" PROPID="ONES" VAL="0"/>
                            <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                        </P>
                    </L>
                </O>
            </P>

            <P> 
                <L>
                    <RULEREF NAME="ONESFRAG" PROPNAME="ONES" PROPID="ONES" VAL="1"/>
                    <P> 
                        <RULEREF NAME="ONESFRAG_ONE_DIGIT" PROPNAME="ONES" PROPID="ONES" VAL="10"/>
                        <RULEREF NAME="ONESFRAG_TWO_DIGITS_TRAIL" PROPNAME="ONES" PROPID="ONES" VAL="1"/> 
                    </P>
                </L>
            </P>
        </L>
    </RULE>

    <!-- ************************************************************************
        Thousands frag
                
     ************************************************************************ -->
    <RULE NAME="THOUSANDSFRAG">
        <L PROPNAME="THOUSANDS" PROPID="THOUSANDS">
            <P VAL="1" VALSTR="1">一千</P>
            <P VAL="2" VALSTR="2">二千</P>
            <P VAL="2" VALSTR="2">两 千</P>
            <P VAL="3" VALSTR="3">三千</P>
            <P VAL="4" VALSTR="4">四千</P>
            <P VAL="5" VALSTR="5">五千</P>
            <P VAL="6" VALSTR="6">六千</P>
            <P VAL="7" VALSTR="7">七千</P>
            <P VAL="8" VALSTR="8">八千</P>
            <P VAL="9" VALSTR="9">九千</P>
        </L>
    </RULE>

    <!-- ************************************************************************
        Hundreds frag
                
     ************************************************************************ -->
    <RULE NAME="HUNDREDSFRAG">
        <L PROPNAME="HUNDREDS_" PROPID="HUNDREDS_">
            <P VAL="1" VALSTR="1">一百</P>
            <P VAL="2" VALSTR="2">二百</P>
            <P VAL="2" VALSTR="2">两 百</P>
            <P VAL="3" VALSTR="3">三百</P>
            <P VAL="4" VALSTR="4">四百</P>
            <P VAL="5" VALSTR="5">五百</P>
            <P VAL="6" VALSTR="6">六百</P>
            <P VAL="7" VALSTR="7">七百</P>
            <P VAL="8" VALSTR="8">八百</P>
            <P VAL="9" VALSTR="9">九百</P>
        </L>
    </RULE>

    <!-- ************************************************************************
        One digit frag
                
     ************************************************************************ -->
    <RULE NAME="ONESFRAG_ONE_DIGIT">
        <L PROPNAME="ONES" PROPID="ONES">
            <P VAL="1" VALSTR="1">一</P>
            <P VAL="1" VALSTR="1">１</P>
            <P VAL="2" VALSTR="2">二</P>
            <P VAL="2" VALSTR="2">两</P>
            <P VAL="2" VALSTR="2">２</P>
            <P VAL="3" VALSTR="3">三</P>
            <P VAL="3" VALSTR="3">３</P>
            <P VAL="4" VALSTR="4">四</P>
            <P VAL="4" VALSTR="4">４</P>
            <P VAL="5" VALSTR="5">五</P>
            <P VAL="5" VALSTR="5">５</P>
            <P VAL="6" VALSTR="6">六</P>
            <P VAL="6" VALSTR="6">６</P>
            <P VAL="7" VALSTR="7">七</P>
            <P VAL="7" VALSTR="7">７</P>
            <P VAL="8" VALSTR="8">八</P>
            <P VAL="8" VALSTR="8">８</P>
            <P VAL="9" VALSTR="9">九</P>
            <P VAL="9" VALSTR="9">９</P>
        </L>
    </RULE>

    <!-- ************************************************************************
        One digit frag for thousands
                
     ************************************************************************ -->
    <RULE NAME="ONESFRAG_ONE_DIGIT_THOUSANDS">
        <L PROPNAME="ONES" PROPID="ONES">
            <P VAL="1000" VALSTR="1">一</P>
            <P VAL="1000" VALSTR="1">１</P>
            <P VAL="2000" VALSTR="2">二</P>
            <P VAL="2000" VALSTR="2">两</P>
            <P VAL="2000" VALSTR="2">２</P>
            <P VAL="3000" VALSTR="3">三</P>
            <P VAL="3000" VALSTR="3">３</P>
            <P VAL="4000" VALSTR="4">四</P>
            <P VAL="4000" VALSTR="4">４</P>
            <P VAL="5000" VALSTR="5">五</P>
            <P VAL="5000" VALSTR="5">５</P>
            <P VAL="6000" VALSTR="6">六</P>
            <P VAL="6000" VALSTR="6">６</P>
            <P VAL="7000" VALSTR="7">七</P>
            <P VAL="7000" VALSTR="7">７</P>
            <P VAL="8000" VALSTR="8">八</P>
            <P VAL="8000" VALSTR="8">８</P>
            <P VAL="9000" VALSTR="9">九</P>
            <P VAL="9000" VALSTR="9">９</P>
        </L>
    </RULE>

    <!-- ************************************************************************
        Two digits frag
                
     ************************************************************************ -->
    <RULE NAME="ONESFRAG_TWO_DIGITS">
        <L PROPNAME="ONES" PROPID="ONES">
            <P VAL="10" VALSTR="10">一十</P>
            <P VAL="11" VALSTR="11">十一</P>
            <P VAL="11" VALSTR="11">一十一</P>
            <P VAL="12" VALSTR="12">十二</P>
            <P VAL="12" VALSTR="12">一十二</P>
            <P VAL="13" VALSTR="13">十三</P>
            <P VAL="13" VALSTR="13">一十三</P>
            <P VAL="14" VALSTR="14">十四</P>
            <P VAL="14" VALSTR="14">一十四</P>
            <P VAL="15" VALSTR="15">十五</P>
            <P VAL="15" VALSTR="15">一十五</P>
            <P VAL="16" VALSTR="16">十六</P>
            <P VAL="16" VALSTR="16">一十六</P>
            <P VAL="17" VALSTR="17">十七</P>
            <P VAL="17" VALSTR="17">一十七</P>
            <P VAL="18" VALSTR="18">十八</P>
            <P VAL="18" VALSTR="18">一十八</P>
            <P VAL="19" VALSTR="19">十九</P>
            <P VAL="19" VALSTR="19">一十九</P>

            <P VAL="20" VALSTR="20">二十</P>
            <P VAL="21" VALSTR="21">二十一</P>
            <P VAL="22" VALSTR="22">二十二</P>
            <P VAL="23" VALSTR="23">二十三</P>
            <P VAL="24" VALSTR="24">二十四</P>
            <P VAL="25" VALSTR="25">二十五</P>
            <P VAL="26" VALSTR="26">二十六</P>
            <P VAL="27" VALSTR="27">二十七</P>
            <P VAL="28" VALSTR="28">二十八</P>
            <P VAL="29" VALSTR="29">二十九</P>

            <P VAL="30" VALSTR="30">三十</P>
            <P VAL="31" VALSTR="31">三十一</P>
            <P VAL="32" VALSTR="32">三十二</P>
            <P VAL="33" VALSTR="33">三十三</P>
            <P VAL="34" VALSTR="34">三十四</P>
            <P VAL="35" VALSTR="35">三十五</P>
            <P VAL="36" VALSTR="36">三十六</P>
            <P VAL="37" VALSTR="37">三十七</P>
            <P VAL="38" VALSTR="38">三十八</P>
            <P VAL="39" VALSTR="39">三十九</P>

            <P VAL="40" VALSTR="40">四十</P>
            <P VAL="41" VALSTR="41">四十一</P>
            <P VAL="42" VALSTR="42">四十二</P>
            <P VAL="43" VALSTR="43">四十三</P>
            <P VAL="44" VALSTR="44">四十四</P>
            <P VAL="45" VALSTR="45">四十五</P>
            <P VAL="46" VALSTR="46">四十六</P>
            <P VAL="47" VALSTR="47">四十七</P>
            <P VAL="48" VALSTR="48">四十八</P>
            <P VAL="49" VALSTR="49">四十九</P>

            <P VAL="50" VALSTR="50">五十</P>
            <P VAL="51" VALSTR="51">五十一</P>
            <P VAL="52" VALSTR="52">五十二</P>
            <P VAL="53" VALSTR="53">五十三</P>
            <P VAL="54" VALSTR="54">五十四</P>
            <P VAL="55" VALSTR="55">五十五</P>
            <P VAL="56" VALSTR="56">五十六</P>
            <P VAL="57" VALSTR="57">五十七</P>
            <P VAL="58" VALSTR="58">五十八</P>
            <P VAL="59" VALSTR="59">五十九</P>

            <P VAL="60" VALSTR="60">六十</P>
            <P VAL="61" VALSTR="61">六十一</P>
            <P VAL="62" VALSTR="62">六十二</P>
            <P VAL="63" VALSTR="63">六十三</P>
            <P VAL="64" VALSTR="64">六十四</P>
            <P VAL="65" VALSTR="65">六十五</P>
            <P VAL="66" VALSTR="66">六十六</P>
            <P VAL="67" VALSTR="67">六十七</P>
            <P VAL="68" VALSTR="68">六十八</P>
            <P VAL="69" VALSTR="69">六十九</P>

            <P VAL="70" VALSTR="70">七十</P>
            <P VAL="71" VALSTR="71">七十一</P>
            <P VAL="72" VALSTR="72">七十二</P>
            <P VAL="73" VALSTR="73">七十三</P>
            <P VAL="74" VALSTR="74">七十四</P>
            <P VAL="75" VALSTR="75">七十五</P>
            <P VAL="76" VALSTR="76">七十六</P>
            <P VAL="77" VALSTR="77">七十七</P>
            <P VAL="78" VALSTR="78">七十八</P>
            <P VAL="79" VALSTR="79">七十九</P>

            <P VAL="80" VALSTR="80">八十</P>
            <P VAL="81" VALSTR="81">八十一</P>
            <P VAL="82" VALSTR="82">八十二</P>
            <P VAL="83" VALSTR="83">八十三</P>
            <P VAL="84" VALSTR="84">八十四</P>
            <P VAL="85" VALSTR="85">八十五</P>
            <P VAL="86" VALSTR="86">八十六</P>
            <P VAL="87" VALSTR="87">八十七</P>
            <P VAL="88" VALSTR="88">八十八</P>
            <P VAL="89" VALSTR="89">八十九</P>

            <P VAL="90" VALSTR="90">九十</P>
            <P VAL="91" VALSTR="91">九十一</P>
            <P VAL="92" VALSTR="92">九十二</P>
            <P VAL="93" VALSTR="93">九十三</P>
            <P VAL="94" VALSTR="94">九十四</P>
            <P VAL="95" VALSTR="95">九十五</P>
            <P VAL="96" VALSTR="96">九十六</P>
            <P VAL="97" VALSTR="97">九十七</P>
            <P VAL="98" VALSTR="98">九十八</P>
            <P VAL="99" VALSTR="99">九十九</P>
        </L>
    </RULE>

    <!-- ************************************************************************
        Including the above two tables and '十'
                
     ************************************************************************ -->
    <RULE NAME="ONESFRAG">
        <L PROPNAME="ONES" PROPID="ONES">
            <P VAL="1" VALSTR="1">一</P>
            <P VAL="1" VALSTR="1">１</P>
            <P VAL="2" VALSTR="2">二</P>
            <P VAL="2" VALSTR="2">两</P>
            <P VAL="2" VALSTR="2">２</P>
            <P VAL="3" VALSTR="3">三</P>
            <P VAL="3" VALSTR="3">３</P>
            <P VAL="4" VALSTR="4">四</P>
            <P VAL="4" VALSTR="4">４</P>
            <P VAL="5" VALSTR="5">五</P>
            <P VAL="5" VALSTR="5">５</P>
            <P VAL="6" VALSTR="6">六</P>
            <P VAL="6" VALSTR="6">６</P>
            <P VAL="7" VALSTR="7">七</P>
            <P VAL="7" VALSTR="7">７</P>
            <P VAL="8" VALSTR="8">八</P>
            <P VAL="8" VALSTR="8">８</P>
            <P VAL="9" VALSTR="9">九</P>
            <P VAL="9" VALSTR="9">９</P>

            <P VAL="10" VALSTR="10">十</P>
            <P VAL="10" VALSTR="10">一十</P>
            <P VAL="11" VALSTR="11">十一</P>
            <P VAL="11" VALSTR="11">一十一</P>
            <P VAL="12" VALSTR="12">十二</P>
            <P VAL="12" VALSTR="12">一十二</P>
            <P VAL="13" VALSTR="13">十三</P>
            <P VAL="13" VALSTR="13">一十三</P>
            <P VAL="14" VALSTR="14">十四</P>
            <P VAL="14" VALSTR="14">一十四</P>
            <P VAL="15" VALSTR="15">十五</P>
            <P VAL="15" VALSTR="15">一十五</P>
            <P VAL="16" VALSTR="16">十六</P>
            <P VAL="16" VALSTR="16">一十六</P>
            <P VAL="17" VALSTR="17">十七</P>
            <P VAL="17" VALSTR="17">一十七</P>
            <P VAL="18" VALSTR="18">十八</P>
            <P VAL="18" VALSTR="18">一十八</P>
            <P VAL="19" VALSTR="19">十九</P>
            <P VAL="19" VALSTR="19">一十九</P>

            <P VAL="20" VALSTR="20">二十</P>
            <P VAL="21" VALSTR="21">二十一</P>
            <P VAL="22" VALSTR="22">二十二</P>
            <P VAL="23" VALSTR="23">二十三</P>
            <P VAL="24" VALSTR="24">二十四</P>
            <P VAL="25" VALSTR="25">二十五</P>
            <P VAL="26" VALSTR="26">二十六</P>
            <P VAL="27" VALSTR="27">二十七</P>
            <P VAL="28" VALSTR="28">二十八</P>
            <P VAL="29" VALSTR="29">二十九</P>

            <P VAL="30" VALSTR="30">三十</P>
            <P VAL="31" VALSTR="31">三十一</P>
            <P VAL="32" VALSTR="32">三十二</P>
            <P VAL="33" VALSTR="33">三十三</P>
            <P VAL="34" VALSTR="34">三十四</P>
            <P VAL="35" VALSTR="35">三十五</P>
            <P VAL="36" VALSTR="36">三十六</P>
            <P VAL="37" VALSTR="37">三十七</P>
            <P VAL="38" VALSTR="38">三十八</P>
            <P VAL="39" VALSTR="39">三十九</P>

            <P VAL="40" VALSTR="40">四十</P>
            <P VAL="41" VALSTR="41">四十一</P>
            <P VAL="42" VALSTR="42">四十二</P>
            <P VAL="43" VALSTR="43">四十三</P>
            <P VAL="44" VALSTR="44">四十四</P>
            <P VAL="45" VALSTR="45">四十五</P>
            <P VAL="46" VALSTR="46">四十六</P>
            <P VAL="47" VALSTR="47">四十七</P>
            <P VAL="48" VALSTR="48">四十八</P>
            <P VAL="49" VALSTR="49">四十九</P>

            <P VAL="50" VALSTR="50">五十</P>
            <P VAL="51" VALSTR="51">五十一</P>
            <P VAL="52" VALSTR="52">五十二</P>
            <P VAL="53" VALSTR="53">五十三</P>
            <P VAL="54" VALSTR="54">五十四</P>
            <P VAL="55" VALSTR="55">五十五</P>
            <P VAL="56" VALSTR="56">五十六</P>
            <P VAL="57" VALSTR="57">五十七</P>
            <P VAL="58" VALSTR="58">五十八</P>
            <P VAL="59" VALSTR="59">五十九</P>

            <P VAL="60" VALSTR="60">六十</P>
            <P VAL="61" VALSTR="61">六十一</P>
            <P VAL="62" VALSTR="62">六十二</P>
            <P VAL="63" VALSTR="63">六十三</P>
            <P VAL="64" VALSTR="64">六十四</P>
            <P VAL="65" VALSTR="65">六十五</P>
            <P VAL="66" VALSTR="66">六十六</P>
            <P VAL="67" VALSTR="67">六十七</P>
            <P VAL="68" VALSTR="68">六十八</P>
            <P VAL="69" VALSTR="69">六十九</P>

            <P VAL="70" VALSTR="70">七十</P>
            <P VAL="71" VALSTR="71">七十一</P>
            <P VAL="72" VALSTR="72">七十二</P>
            <P VAL="73" VALSTR="73">七十三</P>
            <P VAL="74" VALSTR="74">七十四</P>
            <P VAL="75" VALSTR="75">七十五</P>
            <P VAL="76" VALSTR="76">七十六</P>
            <P VAL="77" VALSTR="77">七十七</P>
            <P VAL="78" VALSTR="78">七十八</P>
            <P VAL="79" VALSTR="79">七十九</P>

            <P VAL="80" VALSTR="80">八十</P>
            <P VAL="81" VALSTR="81">八十一</P>
            <P VAL="82" VALSTR="82">八十二</P>
            <P VAL="83" VALSTR="83">八十三</P>
            <P VAL="84" VALSTR="84">八十四</P>
            <P VAL="85" VALSTR="85">八十五</P>
            <P VAL="86" VALSTR="86">八十六</P>
            <P VAL="87" VALSTR="87">八十七</P>
            <P VAL="88" VALSTR="88">八十八</P>
            <P VAL="89" VALSTR="89">八十九</P>

            <P VAL="90" VALSTR="90">九十</P>
            <P VAL="91" VALSTR="91">九十一</P>
            <P VAL="92" VALSTR="92">九十二</P>
            <P VAL="93" VALSTR="93">九十三</P>
            <P VAL="94" VALSTR="94">九十四</P>
            <P VAL="95" VALSTR="95">九十五</P>
            <P VAL="96" VALSTR="96">九十六</P>
            <P VAL="97" VALSTR="97">九十七</P>
            <P VAL="98" VALSTR="98">九十八</P>
            <P VAL="99" VALSTR="99">九十九</P>
        </L>
    </RULE>

    <!-- ************************************************************************
        two digits from 11 to 19, which only have the value 1 to 9
        to deal with "三百 四 十五", or "二百 一 十", due to the result from engine

    ************************************************************************* -->
    <RULE NAME="ONESFRAG_TWO_DIGITS_TRAIL">
        <L PROPNAME="ONES" PROPID="ONES">
            <P VAL="0" VALSTR="11">十</P>
            <P VAL="1" VALSTR="11">十一</P>
            <P VAL="2" VALSTR="12">十二</P>
            <P VAL="3" VALSTR="13">十三</P>
            <P VAL="4" VALSTR="14">十四</P>
            <P VAL="5" VALSTR="15">十五</P>
            <P VAL="6" VALSTR="16">十六</P>
            <P VAL="7" VALSTR="17">十七</P>
            <P VAL="8" VALSTR="18">十八</P>
            <P VAL="9" VALSTR="19">十九</P>
        </L>
    </RULE>


    <!-- ************************************************************************
        digit 0

    ************************************************************************* -->
    <RULE NAME="ZERODIGITS">
        <L PROPNAME="ONES" PROPID="ONES">
            <P VAL="0" VALSTR="0">零</P>
            <P VAL="0" VALSTR="0">０</P>
            <P VAL="0" VALSTR="0">○</P>
        </L>
    </RULE>

    <!-- ************************************************************************
        digits 1, 2, 3, 4, 5, 6, 7, 8, 9

    ************************************************************************* -->
    <RULE NAME="NONEZERODIGITS">
        <L PROPNAME="ONES" PROPID="ONES">
            <P VAL="1" VALSTR="1">一</P>
            <P VAL="1" VALSTR="1">１</P>
            <P VAL="2" VALSTR="2">二</P>
            <P VAL="2" VALSTR="2">两</P>
            <P VAL="2" VALSTR="2">２</P>
            <P VAL="3" VALSTR="3">三</P>
            <P VAL="3" VALSTR="3">３</P>
            <P VAL="4" VALSTR="4">四</P>
            <P VAL="4" VALSTR="4">４</P>
            <P VAL="5" VALSTR="5">五</P>
            <P VAL="5" VALSTR="5">５</P>
            <P VAL="6" VALSTR="6">六</P>
            <P VAL="6" VALSTR="6">６</P>
            <P VAL="7" VALSTR="7">七</P>
            <P VAL="7" VALSTR="7">７</P>
            <P VAL="8" VALSTR="8">八</P>
            <P VAL="8" VALSTR="8">８</P>
            <P VAL="9" VALSTR="9">九</P>
            <P VAL="9" VALSTR="9">９</P>
        </L>
    </RULE>

    <!-- ************************************************************************
        All digits

    ************************************************************************* -->
    <RULE NAME="DIGITS">
        <L PROPNAME="DIGITS" PROPID="DIGITS">
            <P VAL="0" VALSTR="0">零</P>
            <P VAL="0" VALSTR="0">０</P>
            <P VAL="0" VALSTR="0">○</P>
            <P VAL="1" VALSTR="1">一</P>
            <P VAL="1" VALSTR="1">１</P>
            <P VAL="2" VALSTR="2">二</P>
            <P VAL="2" VALSTR="2">两</P>
            <P VAL="2" VALSTR="2">２</P>
            <P VAL="3" VALSTR="3">三</P>
            <P VAL="3" VALSTR="3">３</P>
            <P VAL="4" VALSTR="4">四</P>
            <P VAL="4" VALSTR="4">４</P>
            <P VAL="5" VALSTR="5">五</P>
            <P VAL="5" VALSTR="5">５</P>
            <P VAL="6" VALSTR="6">六</P>
            <P VAL="6" VALSTR="6">６</P>
            <P VAL="7" VALSTR="7">七</P>
            <P VAL="7" VALSTR="7">７</P>
            <P VAL="8" VALSTR="8">八</P>
            <P VAL="8" VALSTR="8">８</P>
            <P VAL="9" VALSTR="9">九</P>
            <P VAL="9" VALSTR="9">９</P>
        </L>
    </RULE>

    <!-- ************************************************************************
        Decimal
                
    ************************************************************************* -->
    <RULE NAME="GRID_DECIMAL" ID="GRID_DECIMAL" TOPLEVEL="INACTIVE" EXPORT="1">
        <P> <RULEREF NAME="GRID_NUMBER" PROPNAME="INTEGER" PROPID="INTEGER"/> </P>
        <P PROPNAME="PERIOD" PROPID="PERIOD">
            <L>
                <P>点</P>
                <P>．</P>
            </L>
        </P>
        <P MIN="1" MAX="20"> <RULEREF NAME="DIGITS"/> </P>
    </RULE>

</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\sapilayr\spelljp.xml ===
﻿<GRAMMAR LANGID="411">
    <RULE NAME="spelling" TOPLEVEL="ACTIVE">
        <L>
            <P WEIGHT="1000.01">zhoulotskunosprok</P>
            <P WEIGHT="1.01"> スペリング *+ </P>
        </L>
    </RULE>

    <RULE NAME="spellmode" TOPLEVEL="ACTIVE">
        <LN PROPNAME="SpellMode">
           <P WEIGHT="1000.01">zhoulotskunosprok</P> 
           <P WEIGHT="1.01" VALSTR="spellingmode">+/スペルモード/すぺるもーど/スペルモード;</P>
        </LN>
    </RULE>

</GRAMMAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\setup\cicero.txt ===
<KANAON>
KOREHA<SPACE><SPACE><ENTER>
<LEFT><RECONVERT><SPACE><ENTER>
<LEFT><OWNER><ENTER><RIGHT><RIGHT>
<LEFT><LANGID><ENTER><RIGHT><RIGHT>
<LEFT><KEYBDTIP><ENTER><RIGHT><RIGHT>

<SPACE><SPACE>

KOREHA<SPACE><SPACE><ENTER>
<LEFT><RECONVERT><SPACE><ENTER>
<LEFT><OWNER><ENTER><RIGHT><RIGHT>
<LEFT><LANGID><ENTER><RIGHT><RIGHT>
<LEFT><KEYBDTIP><ENTER><RIGHT><RIGHT>

<LEFT><LEFT><LEFT><LEFT><LEFT>
<DEL><DEL>

<LEFT><OWNER><ENTER><RIGHT><RIGHT>
<LEFT><LANGID><ENTER><RIGHT><RIGHT>
<LEFT><KEYBDTIP><ENTER><RIGHT><RIGHT>
<KANAOFF>

<FILESAVE>BHG<ENTER>
<FILEOPEN>BHG.CTB<ENTER>
<KANAON>

<LEFT><RECONVERT><SPACE><ENTER>
<LEFT><OWNER><ENTER><RIGHT><RIGHT>
<LEFT><LANGID><ENTER><RIGHT><RIGHT>
<LEFT><KEYBDTIP><ENTER><RIGHT><RIGHT>
<KANAOFF>

<HOME>
<RIGHT><RIGHT><SPACE><SPACE>

<HOME><OWNER><ENTER><RIGHT><RIGHT>
<HOME><LANGID><ENTER><RIGHT><RIGHT>
<HOME><KEYBDTIP><ENTER><RIGHT><RIGHT>

<END><LEFT>
<LEFT><OWNER><ENTER><RIGHT><RIGHT>
<LEFT><LANGID><ENTER><RIGHT><RIGHT>
<LEFT><KEYBDTIP><ENTER><RIGHT><RIGHT>

<HOME>
<RIGHT><RIGHT><DEL><DEL>
<HOME><OWNER><ENTER>
<HOME><LANGID><ENTER>
<CLEAR>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\setup\srcd\moreinfo.txt ===
CICERO RUNTIME & SAMPLES
			May 25, 1999

DEPENDENCIES
==============
 *  You must install SAPI5.0 to use use the Speech TIP.
	\\iitbuild\builds\SAPI5\Web.Files\x86build.html

*   If you are using the Japanese TIP on a non-Japanese system, you 
    may need to install the Japanese language support from:  
	\\kevingj7\drop\langpack\ie_ja.exe

*   Cicero Samples require the use of msxml.dll version 5.00.2918.1900 
    distributed with Windows2000 build 2046 or later.  Problems have been 
    found with version 5.00.2115.200 distributed with W2K 1987.


DEBUG BINARIES
==============
Debug binaries are provided for msuim.dll, msuimui.dll, ctb.exe, 
sapilayr.dll, kimx.dll and simx.dl

All binaries and debug symbols can be found in your Program Files\Cicero directory


SAMPLES
=============================
You should see at the following TIPs:
 - English Speech TIP (based on SAPI5)
 - Japanese Keyboard TIP 

And Client:
 - ctb.exe


SELECTING TEXT INPUT PROCESSORS
===============================
To activate / deactivate any of the TIPs, please use the menu found in 
the taskbar.   It has a pen and paper icon similar to one used with Far 
East IMEs except it is blue.  With current builds, you may need to restart 
the client application for the changes to take effect.


QUESTIONS
=========
This is provided for demonstration purposes only. Please send feedback 
or questions to:
	mailto:cicero@microsoft.com


UNINSTALL
=========
To uninstall the Cicero Runtime, go to the Add/Remove applet and select 
Microsoft Cicero Prototype.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\setup\samples\moreinfo.txt ===
CTF (CICERO) SAMPLES
			December 12, 1999

DEPENDENCIES
==============
 *  You must install SAPI5.0 to use use the Speech TIP.
	\\iitbuild\builds\SAPI5\Web.Files\x86build.html

 *  This build includes support for Cicero Text Processor
     input into applications / controls supporting AIMM1.2.
     This includes IE/OE 5.5 and Office10 applications.

 *   If you are using the East Asian TIPs on non-native 
     systems, you may need to install the appropriate 
     language support from:  
	Japanese	       \\cicero\drop\langpack\ie_ja.exe
	Korean	       \\cicero\drop\langpack\ie_ko.exe
	Trad Chinese    \\cicero\drop\langpack\ie_zht.exe
	Simp Chinese    \\cicero\drop\langpack\ie_zhc.exe


SAMPLES
=============================
You should see the following sample text input processors:
 - Speech Recognition (based on SAPI5) with English or 
   Japanese Engines
 - Sample Japanese Kana Keyboard


And sample client application:
 - ctb.exe


SELECTING TEXT INPUT PROCESSORS
===============================
To activate / deactivate any of the TIPs, please use the input toolbar.   
Right clicking on the far left edge will bring up a menu by which you 
can access a settings dialog.  You can manage your input configurations 
there according to input locales (languages).


QUESTIONS
=========
This is provided for testing and demonstration purposes only. Please send 
feedback or questions to:
	mailto:cicero@microsoft.com


UNINSTALL
=========
To uninstall the Cicero, you must uninstall the Samples BEFORE uininstalling
core Cicero files.

Go to the Add/Remove applet and select 
1) "CTF Samples"
Then
2) "Microsoft Common Text Framework".
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\setup\src\moreinfo.txt ===
CICERO RUNTIME & SAMPLES
			May 25, 1999

DEPENDENCIES
==============
 *  You must install SAPI5.0 to use use the Speech TIP.
	\\iitbuild\builds\SAPI5\Web.Files\x86build.html

*   If you are using the Japanese TIP on a non-Japanese system, you 
    may need to install the Japanese language support from:  
	\\kevingj7\drop\langpack\ie_ja.exe

*   Cicero Samples require the use of msxml.dll version 5.00.2918.1900 
    distributed with Windows2000 build 2046 or later.  Problems have been 
    found with version 5.00.2115.200 distributed with W2K 1987.


DEBUG BINARIES
==============
Debug binaries are provided for msuim.dll, msuimui.dll, ctb.exe, 
sapilayr.dll, kimx.dll and simx.dl

All binaries and debug symbols can be found in your Program Files\Cicero directory


SAMPLES
=============================
You should see at the following TIPs:
 - English Speech TIP (based on SAPI5)
 - Japanese Keyboard TIP 

And Client:
 - ctb.exe


SELECTING TEXT INPUT PROCESSORS
===============================
To activate / deactivate any of the TIPs, please use the menu found in 
the taskbar.   It has a pen and paper icon similar to one used with Far 
East IMEs except it is blue.  With current builds, you may need to restart 
the client application for the changes to take effect.


QUESTIONS
=========
This is provided for demonstration purposes only. Please send feedback 
or questions to:
	mailto:cicero@microsoft.com


UNINSTALL
=========
To uninstall the Cicero Runtime, go to the Add/Remove applet and select 
Microsoft Cicero Prototype.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\setup\moreinfo.txt ===
CICERO PROTOTYPE
					May 21, 1999

DEPENDENCIES
==============
 *  You must install SAPI5.0 to use use the Speech TIP.
	\\iitbuild\builds\SAPI5\Web.Files\x86build.html

*   If you are using the Japanese TIP on a non-Japanese system, you 
    may need to install the Japanese language support from:  
	\\kevingj7\drop\langpack\ie_ja.exe


SAMPLE TEXT INPUT PROCESSORS
=============================
You should see at least 6 TIPs:
 - English Grammar TIP
 - English Speech TIP (based on SAPI5)
 - Japanese Keyboard TIP (based on MSIME95 source)
 - Simulated Spelling TIP
 - Soft Keyboard TIP


SELECTING TEXT INPUT PROCESSORS
===============================
To activate / deactivate any of the TIPs, please use the menu found in 
the taskbar.   It has a pen and paper icon similar to one used with Far 
East IMEs except it is blue.  With current builds, you may need to restart 
the client application for the changes to take effect.


QUESTIONS
=========
This is provided for demonstration purposes only. Please send feedback 
or questions to:
	mailto:cicero@microsoft.com


UNINSTALL
=========
To uninstall the Cicero prototype, go to the Add/Remove applet and select 
Microsoft Cicero Prototype
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\setup\installshield\msm.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. General guideline for Generating the Merge Modules using InstallShield TitleGeneral guideline for Generating the Merge Modules using InstallShield kevingj Normal Bhadresh Microsoft Word 9.0bjbjU General guideline for Generating the Merge Modules using InstallShield This is basic guideline for generating merge modules as per standard by using InstallShield. Step 1. Analyzing the Requirement. First of all you need to figure out: 1.  How many modules are required (you ll need to provide the debug versions as well) 2.  Module dependency. 3.  Whether component needs to advertise or not. If you don't want to advertise your component then you have to explicitly add the registry information in your modules. 4. What is the destination folder?  If it is in the System Folder then component can't be advertised. Also see \\dsweb\wininstaller, which will give you lots of information. Step 2. Finding Out the registry information of your modules. If you know all the registry information then you can skip this step. Go to \\NTUSERBM\CICERO_SNAP\Tools\REGINF & check regone.bat file. By using it you will get all registry information of one particular DLL. Step 3. Generating the Merge Modules by using InstallShield. This is simple step. Create blank merge modules & by using component wizard all your components. Also you can set module dependency using Install Shield. Step 4. Removing unnecessary Tables from Merge Modules. InstallShield generates some unnecessary tables & entries in Directory Table. By using msiquery.exe. from command line option you can remove the unnecessary tables from it. msiquery.exe is on \\NTUSERBM\CICERO_SNAP\Tools\REGINF. 1. Delete InstallShield Table. which is not required. msiquery "DROP TABLE InstallShield" MSCTF.msm 2. Delete TextStyle Table. which is also not required. msiquery "DROP TABLE TextStyle" MSCTF.msm 3. Delete the existing _Validation table. it contains nothing but validation info about InstallShield Table. msiquery "DROP TABLE _Validation" Merge.msm 4. Directory Table has lots of unnecessary entries. It's better you delete the complete directory Table & create by your own by seeing the sample merge modules & using Orca. So now your merge modules is about to complete! Step 5. Advertising the component Open your merge module with Orca. Now if you want to advertise your component then you don't have to do anything in this step. just check whether your all registry information is there or not. All CLSID related information should be in class Table & rest should be in registry table. If you don't want to advertise your component then you have to move all CLSID related information from Class Table to Registry Table & you need to delete the Class Table. I wrote some perl script program specific to Cicero to generate registry Tables by using regone.bat file which is mentioned in step 2 & I used to import it using Orca. Step 6. Adding  _Validation Table You have to add the entry in _Validation table for all the Tables you have in your MSM. Best way is export _Validation table from any sample merge module which has all the table you want & Import it in your DB  Step 7. Validating your Merge Modules Go to \\dsweb\wininstaller web site. Select the ICEMAN. where you can validate your merge modules. It should pass all the tests.  Your merge modules are ready  Step 8. Creating the Setup package using merge modules This step is just for testing purpose to check whether your modules are working or not. By using InstallShield or Visual Studio Installer you can create MSi package & add your merge modules in it.. Make sure that you have all module dependency in it! Generate the Package & check whether it is correct or not  PS: Few days before office asked me to add blank the UISequence tables and ExecuteSequence table and a CustomAction table in my merge modules.. Which still pending in case of Cicero. But you may have to add it in your merge modules & also entries in _Validation Table.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\softkbd\data\kbdschema.xml ===
<?xml version="1.0"?>
<Schema xmlns="urn:schemas-microsoft-com:xml-data"
        xmlns:dt="urn:schemas-microsoft-com:datatypes">
  <ElementType name="keynumber" content="textOnly" dt:type="int"/>
  <ElementType name="keyid" content="textOnly" dt:type="int"/>
  <ElementType name="left" content="textOnly" dt:type="int"/>
  <ElementType name="top" content="textOnly" dt:type="int"/>
  <ElementType name="width" content="textOnly" dt:type="int"/>
  <ElementType name="height" content="textOnly" dt:type="int"/>
  <ElementType name="margin_width" content="textOnly" dt:type="int"/>
  <ElementType name="margin_height" content="textOnly" dt:type="int"/>
  <ElementType name="validstates" content="textOnly" dt:type="int"/>
  <ElementType name="resourcefile" content="textOnly"/>
  <AttributeType name="labeltype" dt:type="enumeration" dt:values="text picture"/>
  <AttributeType name="labeldisp" dt:type="enumeration" dt:values="active gray"/>
  <AttributeType name="softkbdtype" dt:type="enumeration" dt:values="standard customized"/>
  <AttributeType name="modifier" dt:type="enumeration" dt:values="none CapsLock Shift Ctrl Alt Kana NumLock"/>
  <ElementType name="key" content="eltOnly">
    <attribute type="modifier" required="yes"/>
    <element type="keyid"/>
    <element type="left"/>
    <element type="top"/>
    <element type="width"/>
    <element type="height"/>
  </ElementType>
  <ElementType name="softkbdlayout" content="eltOnly">
    <attribute type="softkbdtype" required="yes"/>
    <element type="width"/>
    <element type="height"/>
    <element type="margin_width"/>
    <element type="margin_height"/>
    <element type="keynumber"/>
    <element type="key" minOccurs="1" maxOccurs="*"/>
  </ElementType>
  <ElementType name="labeltext" content="textOnly">
      <attribute type="labeltype" required="yes"/>
      <attribute type="labeldisp" required="yes"/>
  </ElementType>
  <ElementType name="keylabel" content="eltOnly">
    <element type="keyid"/>
    <element type="validstates"/>
    <element type="labeltext" minOccurs="1" maxOccurs="*"/>
  </ElementType>
  <ElementType name="textmapping" content="eltOnly">
    <element type="keynumber"/>
    <element type="validstates"/>
    <element type="resourcefile" minOccurs="0" maxOccurs="1"/>
    <element type="keylabel" minOccurs="1" maxOccurs="*"/>
  </ElementType>
  <ElementType name="softKbdDes" content="eltOnly">
     <element type="softkbdlayout"/>
     <element type="textmapping" minOccurs="0" maxOccurs="1"/>
  </ElementType>
</Schema>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\softkbd\data\stdeuro102.xml ===
<?xml version='1.0'?>
<softKbdDes> 
 <softkbdlayout softkbdtype="standard">
  <width>133</width>
  <height>54</height>
  <margin_width>1</margin_width>
  <margin_height>1</margin_height>
  <keynumber>78</keynumber>
  <key modifier="none">
    <keyid>01</keyid>
    <left>1</left>
    <top>1</top>
    <width>10</width>
    <height>8</height>    
  </key>
  <key modifier="none">
    <keyid>59</keyid>
    <left>17</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>60</keyid>
    <left>25</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>61</keyid>
    <left>33</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>62</keyid>
    <left>41</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>63</keyid>
    <left>53</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>64</keyid>
    <left>61</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>65</keyid>
    <left>69</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>66</keyid>
    <left>77</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>67</keyid>
    <left>89</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>68</keyid>
    <left>97</left>
    <top>1</top>
    <width>11</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>87</keyid>
    <left>108</left>
    <top>1</top>
    <width>11</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>88</keyid>
    <left>119</left>
    <top>1</top>
    <width>11</width>
    <height>8</height>
  </key>

  <key modifier="none">
    <keyid>41</keyid>
    <left>1</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>2</keyid>
    <left>9</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>3</keyid>
    <left>17</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>4</keyid>
    <left>25</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>5</keyid>
    <left>33</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>6</keyid>
    <left>41</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>7</keyid>
    <left>49</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>8</keyid>
    <left>57</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>9</keyid>
    <left>65</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>10</keyid>
    <left>73</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>11</keyid>
    <left>81</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>12</keyid>
    <left>89</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>13</keyid>
    <left>97</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>14</keyid>
    <left>105</left>
    <top>11</top>
    <width>25</width>
    <height>8</height>
  </key>

  <key modifier="none">
    <keyid>15</keyid>
    <left>1</left>
    <top>19</top>
    <width>14</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>16</keyid>
    <left>15</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>17</keyid>
    <left>23</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>18</keyid>
    <left>31</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>19</keyid>
    <left>39</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>20</keyid>
    <left>47</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>21</keyid>
    <left>55</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>22</keyid>
    <left>63</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>23</keyid>
    <left>71</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>24</keyid>
    <left>79</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>25</keyid>
    <left>87</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>26</keyid>
    <left>95</left>
    <top>19</top>
    <width>9</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>27</keyid>
    <left>104</left>
    <top>19</top>
    <width>11</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>28</keyid>
    <left>115</left>
    <top>19</top>
    <width>15</width>
    <height>16</height>
  </key>

  <key modifier="CapsLock">
    <keyid>58</keyid>
    <left>1</left>
    <top>27</top>
    <width>18</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>30</keyid>
    <left>19</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>31</keyid>
    <left>27</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>32</keyid>
    <left>35</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>33</keyid>
    <left>43</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>34</keyid>
    <left>51</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>35</keyid>
    <left>59</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>36</keyid>
    <left>67</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>37</keyid>
    <left>75</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>38</keyid>
    <left>83</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>39</keyid>
    <left>91</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>40</keyid>
    <left>99</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>43</keyid>
    <left>107</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>

  <key modifier="Shift">
    <keyid>42</keyid>
    <left>1</left>
    <top>35</top>
    <width>21</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>86</keyid>
    <left>22</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>44</keyid>
    <left>30</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>45</keyid>
    <left>38</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>46</keyid>
    <left>46</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>47</keyid>
    <left>54</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>48</keyid>
    <left>62</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>49</keyid>
    <left>70</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>50</keyid>
    <left>78</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>51</keyid>
    <left>86</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>52</keyid>
    <left>94</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>53</keyid>
    <left>102</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="Shift">
    <keyid>42</keyid>
    <left>110</left>
    <top>35</top>
    <width>20</width>
    <height>8</height>
  </key>

  <key modifier="Ctrl">
    <keyid>29</keyid>
    <left>1</left>
    <top>43</top>
    <width>14</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57435</keyid>
    <left>15</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="Alt">
    <keyid>56</keyid>
    <left>23</left>
    <top>43</top>
    <width>10</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57</keyid>
    <left>33</left>
    <top>43</top>
    <width>33</width>
    <height>8</height>
  </key>

  <key modifier="AltGr" >
    <keyid>57400</keyid>
    <left>66</left>
    <top>43</top>
    <width>14</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57427</keyid>
    <left>80</left>
    <top>43</top>
    <width>10</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57437</keyid>
    <left>90</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57424</keyid>
    <left>98</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57416</keyid>
    <left>106</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57419</keyid>
    <left>114</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57421</keyid>
    <left>122</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
 </softkbdlayout>
</softKbdDes>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\softkbd\data\stdjpn106.xml ===
<?xml version='1.0'?>
<softKbdDes> 
 <softkbdlayout softkbdtype="standard">
  <width>133</width>
  <height>54</height>
  <margin_width>1</margin_width>
  <margin_height>1</margin_height>
  <keynumber>81</keynumber>
  <key modifier="none">
    <keyid>01</keyid>
    <left>1</left>
    <top>1</top>
    <width>10</width>
    <height>8</height>    
  </key>
  <key modifier="none">
    <keyid>59</keyid>
    <left>17</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>60</keyid>
    <left>25</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>61</keyid>
    <left>33</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>62</keyid>
    <left>41</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>63</keyid>
    <left>53</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>64</keyid>
    <left>61</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>65</keyid>
    <left>69</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>66</keyid>
    <left>77</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>67</keyid>
    <left>89</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>68</keyid>
    <left>97</left>
    <top>1</top>
    <width>11</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>87</keyid>
    <left>108</left>
    <top>1</top>
    <width>11</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>88</keyid>
    <left>119</left>
    <top>1</top>
    <width>11</width>
    <height>8</height>
  </key>

  <key modifier="none">
    <keyid>41</keyid>
    <left>1</left>
    <top>11</top>
    <width>10</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>2</keyid>
    <left>11</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>3</keyid>
    <left>19</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>4</keyid>
    <left>27</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>5</keyid>
    <left>35</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>6</keyid>
    <left>43</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>7</keyid>
    <left>51</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>8</keyid>
    <left>59</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>9</keyid>
    <left>67</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>10</keyid>
    <left>75</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>11</keyid>
    <left>83</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>12</keyid>
    <left>91</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>13</keyid>
    <left>99</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>125</keyid>
    <left>107</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>14</keyid>
    <left>115</left>
    <top>11</top>
    <width>15</width>
    <height>8</height>
  </key>

  <key modifier="none">
    <keyid>15</keyid>
    <left>1</left>
    <top>19</top>
    <width>14</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>16</keyid>
    <left>15</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>17</keyid>
    <left>23</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>18</keyid>
    <left>31</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>19</keyid>
    <left>39</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>20</keyid>
    <left>47</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>21</keyid>
    <left>55</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>22</keyid>
    <left>63</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>23</keyid>
    <left>71</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>24</keyid>
    <left>79</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>25</keyid>
    <left>87</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>26</keyid>
    <left>95</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>27</keyid>
    <left>103</left>
    <top>19</top>
    <width>12</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>28</keyid>
    <left>115</left>
    <top>19</top>
    <width>15</width>
    <height>16</height>
  </key>

  <key modifier="CapsLock">
    <keyid>58</keyid>
    <left>1</left>
    <top>27</top>
    <width>18</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>30</keyid>
    <left>19</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>31</keyid>
    <left>27</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>32</keyid>
    <left>35</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>33</keyid>
    <left>43</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>34</keyid>
    <left>51</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>35</keyid>
    <left>59</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>36</keyid>
    <left>67</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>37</keyid>
    <left>75</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>38</keyid>
    <left>83</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>39</keyid>
    <left>91</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>40</keyid>
    <left>99</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>43</keyid>
    <left>107</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>

  <key modifier="Shift">
    <keyid>42</keyid>
    <left>1</left>
    <top>35</top>
    <width>22</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>44</keyid>
    <left>23</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>45</keyid>
    <left>31</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>46</keyid>
    <left>39</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>47</keyid>
    <left>47</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>48</keyid>
    <left>55</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>49</keyid>
    <left>63</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>50</keyid>
    <left>71</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>51</keyid>
    <left>79</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>52</keyid>
    <left>87</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>53</keyid>
    <left>95</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>115</keyid>
    <left>103</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="Shift">
    <keyid>54</keyid>
    <left>111</left>
    <top>35</top>
    <width>19</width>
    <height>8</height>
  </key>

  <key modifier="Ctrl">
    <keyid>29</keyid>
    <left>1</left>
    <top>43</top>
    <width>12</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57435</keyid>
    <left>13</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="Alt">
    <keyid>56</keyid>
    <left>21</left>
    <top>43</top>
    <width>10</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>123</keyid>
    <left>31</left>
    <top>43</top>
    <width>10</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57</keyid>
    <left>41</left>
    <top>43</top>
    <width>19</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>121</keyid>
    <left>60</left>
    <top>43</top>
    <width>10</width>
    <height>8</height>
  </key>
  <key modifier="Kana">
    <keyid>112</keyid>
    <left>70</left>
    <top>43</top>
    <width>10</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57427</keyid>
    <left>80</left>
    <top>43</top>
    <width>10</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57437</keyid>
    <left>90</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57424</keyid>
    <left>98</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57416</keyid>
    <left>106</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57419</keyid>
    <left>114</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57421</keyid>
    <left>122</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
 </softkbdlayout>
</softKbdDes>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\softkbd\data\symlayout.xml ===
<?xml version='1.0'?>
<softKbdDes>
  <softkbdlayout softkbdtype="customized">
     <width>133</width>
     <height>54</height>
     <margin_width>1</margin_width>
     <margin_height>1</margin_height>
     <keynumber>73</keynumber>
     <key modifier="none">
       <keyid>01</keyid>
       <left>1</left>
       <top>1</top>
       <width>10</width>
       <height>8</height>    
     </key>
     <key modifier="none">
       <keyid>59</keyid>
       <left>17</left>
       <top>1</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>60</keyid>
       <left>25</left>
       <top>1</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>61</keyid>
       <left>33</left>
       <top>1</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>62</keyid>
       <left>41</left>
       <top>1</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>63</keyid>
       <left>53</left>
       <top>1</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>64</keyid>
       <left>61</left>
       <top>1</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>65</keyid>
       <left>69</left>
       <top>1</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>66</keyid>
       <left>77</left>
       <top>1</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>67</keyid>
       <left>89</left>
       <top>1</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>68</keyid>
       <left>97</left>
       <top>1</top>
       <width>11</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>87</keyid>
       <left>108</left>
       <top>1</top>
       <width>11</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>88</keyid>
       <left>119</left>
       <top>1</top>
       <width>11</width>
       <height>8</height>
     </key>

     <key modifier="none">
       <keyid>2</keyid>
       <left>1</left>
       <top>11</top>
       <width>9</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>3</keyid>
       <left>10</left>
       <top>11</top>
       <width>9</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>4</keyid>
       <left>19</left>
       <top>11</top>
       <width>9</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>5</keyid>
       <left>28</left>
       <top>11</top>
       <width>9</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>6</keyid>
       <left>37</left>
       <top>11</top>
       <width>9</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>7</keyid>
       <left>46</left>
       <top>11</top>
       <width>9</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>8</keyid>
       <left>55</left>
       <top>11</top>
       <width>9</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>9</keyid>
       <left>64</left>
       <top>11</top>
       <width>9</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>10</keyid>
       <left>73</left>
       <top>11</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>11</keyid>
       <left>81</left>
       <top>11</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>12</keyid>
       <left>89</left>
       <top>11</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>13</keyid>
       <left>97</left>
       <top>11</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>14</keyid>
       <left>105</left>
       <top>11</top>
       <width>25</width>
       <height>8</height>
     </key>

     <key modifier="none">
       <keyid>15</keyid>
       <left>1</left>
       <top>19</top>
       <width>14</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>16</keyid>
       <left>15</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>17</keyid>
       <left>23</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>18</keyid>
       <left>31</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>19</keyid>
       <left>39</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>20</keyid>
       <left>47</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>21</keyid>
       <left>55</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>22</keyid>
       <left>63</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>23</keyid>
       <left>71</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>24</keyid>
       <left>79</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>25</keyid>
       <left>87</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>26</keyid>
       <left>95</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>27</keyid>
       <left>103</left>
       <top>19</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>43</keyid>
       <left>111</left>
       <top>19</top>
       <width>19</width>
       <height>8</height>
     </key>

     <key modifier="CapsLock">
       <keyid>58</keyid>
       <left>1</left>
       <top>27</top>
       <width>20</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>30</keyid>
       <left>21</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>31</keyid>
       <left>29</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>32</keyid>
       <left>37</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>33</keyid>
       <left>45</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>34</keyid>
       <left>53</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>35</keyid>
       <left>61</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>36</keyid>
       <left>69</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>37</keyid>
       <left>77</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>38</keyid>
       <left>85</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>39</keyid>
       <left>93</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>40</keyid>
       <left>101</left>
       <top>27</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>28</keyid>
       <left>109</left>
       <top>27</top>
       <width>21</width>
       <height>8</height>
     </key>

     <key modifier="Shift">
       <keyid>42</keyid>
       <left>1</left>
       <top>35</top>
       <width>25</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>44</keyid>
       <left>26</left>
       <top>35</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>45</keyid>
       <left>34</left>
       <top>35</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>46</keyid>
       <left>42</left>
       <top>35</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>47</keyid>
       <left>50</left>
       <top>35</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>48</keyid>
       <left>58</left>
       <top>35</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>49</keyid>
       <left>66</left>
       <top>35</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>50</keyid>
       <left>74</left>
       <top>35</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>51</keyid>
       <left>82</left>
       <top>35</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>52</keyid>
       <left>90</left>
       <top>35</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>53</keyid>
       <left>98</left>
       <top>35</top>
       <width>8</width>
       <height>8</height>
     </key>
     <key modifier="Shift">
       <keyid>42</keyid>
       <left>106</left>
       <top>35</top>
       <width>24</width>
       <height>8</height>
     </key>

     <key modifier="Ctrl">
       <keyid>29</keyid>
       <left>1</left>
       <top>43</top>
       <width>18</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>101</keyid>
       <left>19</left>
       <top>43</top>
       <width>10</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>102</keyid>
       <left>29</left>
       <top>43</top>
       <width>10</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>57</keyid>
       <left>39</left>
       <top>43</top>
       <width>47</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>57424</keyid>
       <left>86</left>
       <top>43</top>
       <width>11</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>57416</keyid>
       <left>97</left>
       <top>43</top>
       <width>11</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>57419</keyid>
       <left>108</left>
       <top>43</top>
       <width>11</width>
       <height>8</height>
     </key>
     <key modifier="none">
       <keyid>57421</keyid>
       <left>119</left>
       <top>43</top>
       <width>11</width>
       <height>8</height>
     </key>
   </softkbdlayout>
 
   <textmapping>
     <keynumber>73</keynumber>
     <validstates>2</validstates>
     <keylabel>
       <keyid>01</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_ESC</labeltext>
     </keylabel>
     <keylabel>
       <keyid>59</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F1</labeltext>
     </keylabel>
     <keylabel>
       <keyid>60</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F2</labeltext>
     </keylabel>
     <keylabel>
       <keyid>61</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F3</labeltext>
     </keylabel>
     <keylabel>
       <keyid>62</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F4</labeltext>
     </keylabel>
     <keylabel>
       <keyid>63</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F5</labeltext>
     </keylabel>
     <keylabel>
       <keyid>64</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F6</labeltext>
     </keylabel>
     <keylabel>
       <keyid>65</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F7</labeltext>
     </keylabel>
     <keylabel>
       <keyid>66</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F8</labeltext>
     </keylabel>
     <keylabel>
       <keyid>67</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F9</labeltext>
     </keylabel>
     <keylabel>
       <keyid>68</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F10</labeltext>
     </keylabel>
     <keylabel>
       <keyid>87</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F11</labeltext>
     </keylabel>
     <keylabel>
       <keyid>88</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">F12</labeltext>
     </keylabel>

     <keylabel>
       <keyid>2</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">¿</labeltext>
     </keylabel>
     <keylabel>
       <keyid>3</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">¡</labeltext>
     </keylabel>
     <keylabel>
       <keyid>4</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">œ</labeltext>
       <labeltext labeltype="text">Œ</labeltext>
     </keylabel>
     <keylabel>
       <keyid>5</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">€</labeltext>
     </keylabel>
     <keylabel>
       <keyid>6</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">£</labeltext>
     </keylabel>
     <keylabel>
       <keyid>7</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">¥</labeltext>
     </keylabel>
     <keylabel>
       <keyid>8</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">§</labeltext>
     </keylabel>
     <keylabel>
       <keyid>9</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ß</labeltext>
       <labeltext labeltype="text">º</labeltext>
     </keylabel>
     <keylabel>
       <keyid>10</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">±</labeltext>
     </keylabel>
     <keylabel>
       <keyid>11</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text">µ</labeltext>
     </keylabel>
     <keylabel>
       <keyid>12</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">-</labeltext>
       <labeltext labeltype="text">_</labeltext>
     </keylabel>
     <keylabel>
       <keyid>13</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">=</labeltext>
       <labeltext labeltype="text">+</labeltext>
     </keylabel>
     <keylabel>
       <keyid>14</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_BACK</labeltext>
     </keylabel>

     <keylabel>
       <keyid>15</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_TAB</labeltext>
     </keylabel>
     <keylabel>
       <keyid>16</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">à</labeltext>
       <labeltext labeltype="text">À</labeltext>
     </keylabel>
     <keylabel>
       <keyid>17</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">á</labeltext>
       <labeltext labeltype="text">Á</labeltext>
     </keylabel>
     <keylabel>
       <keyid>18</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">â</labeltext>
       <labeltext labeltype="text">Â</labeltext>
     </keylabel>
     <keylabel>
       <keyid>19</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ã</labeltext>
       <labeltext labeltype="text">Ã</labeltext>
     </keylabel>
     <keylabel>
       <keyid>20</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ä</labeltext>
       <labeltext labeltype="text">Ä</labeltext>
     </keylabel>
     <keylabel>
       <keyid>21</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">å</labeltext>
       <labeltext labeltype="text">Å</labeltext>
     </keylabel>
     <keylabel>
       <keyid>22</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">æ</labeltext>
       <labeltext labeltype="text">Æ</labeltext>
     </keylabel>
     <keylabel>
       <keyid>23</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ç</labeltext>
       <labeltext labeltype="text">Ç</labeltext>
     </keylabel>
     <keylabel>
       <keyid>24</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ð</labeltext>
       <labeltext labeltype="text">Ð</labeltext>
     </keylabel>
     <keylabel>
       <keyid>25</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ñ</labeltext>
       <labeltext labeltype="text">Ñ</labeltext>
     </keylabel>
     <keylabel>
       <keyid>26</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">[</labeltext>
       <labeltext labeltype="text">{</labeltext>
     </keylabel>
     <keylabel>
       <keyid>27</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">]</labeltext>
       <labeltext labeltype="text">}</labeltext>
     </keylabel>
     <keylabel>
       <keyid>43</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">\</labeltext>
       <labeltext labeltype="text">|</labeltext>
     </keylabel>

     <keylabel>
       <keyid>58</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_CAPITAL</labeltext>
     </keylabel>
     <keylabel>
       <keyid>30</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">è</labeltext>
       <labeltext labeltype="text">È</labeltext>
     </keylabel>
     <keylabel>
       <keyid>31</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">é</labeltext>
       <labeltext labeltype="text">É</labeltext>
     </keylabel>
     <keylabel>
       <keyid>32</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ê</labeltext>
       <labeltext labeltype="text">Ê</labeltext>
     </keylabel>
     <keylabel>
       <keyid>33</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ë</labeltext>
       <labeltext labeltype="text">Ë</labeltext>
     </keylabel>
     <keylabel>
       <keyid>34</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ì</labeltext>
       <labeltext labeltype="text">Ì</labeltext>
     </keylabel>
     <keylabel>
       <keyid>35</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">í</labeltext>
       <labeltext labeltype="text">Í</labeltext>
     </keylabel>
     <keylabel>
       <keyid>36</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">î</labeltext>
       <labeltext labeltype="text">Î</labeltext>
     </keylabel>
     <keylabel>
       <keyid>37</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ï</labeltext>
       <labeltext labeltype="text">Ï</labeltext>
     </keylabel>
     <keylabel>
       <keyid>38</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">þ</labeltext>
       <labeltext labeltype="text">Þ</labeltext>
     </keylabel>
     <keylabel>
       <keyid>39</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">;</labeltext>
       <labeltext labeltype="text">:</labeltext>
     </keylabel>
     <keylabel>
       <keyid>40</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">&apos;</labeltext>
       <labeltext labeltype="text">&quot;</labeltext>
     </keylabel>
     <keylabel>
       <keyid>28</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_RETURN</labeltext>
     </keylabel>

     <keylabel>
       <keyid>42</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_SHIFT</labeltext>
     </keylabel>
     <keylabel>
       <keyid>44</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ò</labeltext>
       <labeltext labeltype="text">Ò</labeltext>
     </keylabel>
     <keylabel>
       <keyid>45</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ó</labeltext>
       <labeltext labeltype="text">Ó</labeltext>
     </keylabel>
     <keylabel>
       <keyid>46</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ô</labeltext>
       <labeltext labeltype="text">Ô</labeltext>
     </keylabel>
     <keylabel>
       <keyid>47</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">õ</labeltext>
       <labeltext labeltype="text">Õ</labeltext>
     </keylabel>
     <keylabel>
       <keyid>48</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ö</labeltext>
       <labeltext labeltype="text">Ö</labeltext>
     </keylabel>
     <keylabel>
       <keyid>49</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ù</labeltext>
       <labeltext labeltype="text">Ù</labeltext>
     </keylabel>
     <keylabel>
       <keyid>50</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ú</labeltext>
       <labeltext labeltype="text">Ú</labeltext>
     </keylabel>
     <keylabel>
       <keyid>51</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">û</labeltext>
       <labeltext labeltype="text">Û</labeltext>
     </keylabel>
     <keylabel>
       <keyid>52</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ü</labeltext>
       <labeltext labeltype="text">Ü</labeltext>
     </keylabel>
     <keylabel>
       <keyid>53</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">/</labeltext>
       <labeltext labeltype="text">?</labeltext>
     </keylabel>
     <keylabel>
       <keyid>42</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_SHIFT</labeltext>
     </keylabel>

     <keylabel>
       <keyid>29</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_CONTROL</labeltext>
     </keylabel>
      <keylabel>
       <keyid>101</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ý</labeltext>
       <labeltext labeltype="text">Ý</labeltext>
     </keylabel>
     <keylabel>
       <keyid>102</keyid>
       <validstates>2</validstates>
       <labeltext labeltype="text">ø</labeltext>
       <labeltext labeltype="text">Ø</labeltext>
     </keylabel>
     <keylabel>
       <keyid>57</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="text" xml:space="preserve"> </labeltext>
     </keylabel>
     <keylabel>
       <keyid>57424</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_DOWN</labeltext>
     </keylabel>
     <keylabel>
       <keyid>57416</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_UP</labeltext>
     </keylabel>
     <keylabel>
       <keyid>57419</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_LEFT</labeltext>
     </keylabel>
     <keylabel>
       <keyid>57421</keyid>
       <validstates>1</validstates>
       <labeltext labeltype="picture">IDB_RIGHT</labeltext>
     </keylabel>
  </textmapping>
</softKbdDes>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\ctf\softkbd\data\stdus101.xml ===
<?xml version='1.0'?>
<softKbdDes> 
 <softkbdlayout softkbdtype="standard">
  <width>133</width>
  <height>54</height>
  <margin_width>1</margin_width>
  <margin_height>1</margin_height>
  <keynumber>76</keynumber>
  <key modifier="none">
    <keyid>01</keyid>
    <left>1</left>
    <top>1</top>
    <width>10</width>
    <height>8</height>    
  </key>
  <key modifier="none">
    <keyid>59</keyid>
    <left>17</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>60</keyid>
    <left>25</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>61</keyid>
    <left>33</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>62</keyid>
    <left>41</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>63</keyid>
    <left>53</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>64</keyid>
    <left>61</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>65</keyid>
    <left>69</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>66</keyid>
    <left>77</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>67</keyid>
    <left>89</left>
    <top>1</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>68</keyid>
    <left>97</left>
    <top>1</top>
    <width>11</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>87</keyid>
    <left>108</left>
    <top>1</top>
    <width>11</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>88</keyid>
    <left>119</left>
    <top>1</top>
    <width>11</width>
    <height>8</height>
  </key>

  <key modifier="none">
    <keyid>41</keyid>
    <left>1</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>2</keyid>
    <left>9</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>3</keyid>
    <left>17</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>4</keyid>
    <left>25</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>5</keyid>
    <left>33</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>6</keyid>
    <left>41</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>7</keyid>
    <left>49</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>8</keyid>
    <left>57</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>9</keyid>
    <left>65</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>10</keyid>
    <left>73</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>11</keyid>
    <left>81</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>12</keyid>
    <left>89</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>13</keyid>
    <left>97</left>
    <top>11</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>14</keyid>
    <left>105</left>
    <top>11</top>
    <width>25</width>
    <height>8</height>
  </key>

  <key modifier="none">
    <keyid>15</keyid>
    <left>1</left>
    <top>19</top>
    <width>14</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>16</keyid>
    <left>15</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>17</keyid>
    <left>23</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>18</keyid>
    <left>31</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>19</keyid>
    <left>39</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>20</keyid>
    <left>47</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>21</keyid>
    <left>55</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>22</keyid>
    <left>63</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>23</keyid>
    <left>71</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>24</keyid>
    <left>79</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>25</keyid>
    <left>87</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>26</keyid>
    <left>95</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>27</keyid>
    <left>103</left>
    <top>19</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>43</keyid>
    <left>111</left>
    <top>19</top>
    <width>19</width>
    <height>8</height>
  </key>

  <key modifier="CapsLock">
    <keyid>58</keyid>
    <left>1</left>
    <top>27</top>
    <width>20</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>30</keyid>
    <left>21</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>31</keyid>
    <left>29</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>32</keyid>
    <left>37</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>33</keyid>
    <left>45</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>34</keyid>
    <left>53</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>35</keyid>
    <left>61</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>36</keyid>
    <left>69</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>37</keyid>
    <left>77</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>38</keyid>
    <left>85</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>39</keyid>
    <left>93</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>40</keyid>
    <left>101</left>
    <top>27</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>28</keyid>
    <left>109</left>
    <top>27</top>
    <width>21</width>
    <height>8</height>
  </key>

  <key modifier="Shift">
    <keyid>42</keyid>
    <left>1</left>
    <top>35</top>
    <width>25</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>44</keyid>
    <left>26</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>45</keyid>
    <left>34</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>46</keyid>
    <left>42</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>47</keyid>
    <left>50</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>48</keyid>
    <left>58</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>49</keyid>
    <left>66</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>50</keyid>
    <left>74</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>51</keyid>
    <left>82</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>52</keyid>
    <left>90</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>53</keyid>
    <left>98</left>
    <top>35</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="Shift">
    <keyid>42</keyid>
    <left>106</left>
    <top>35</top>
    <width>24</width>
    <height>8</height>
  </key>

  <key modifier="Ctrl">
    <keyid>29</keyid>
    <left>1</left>
    <top>43</top>
    <width>14</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57435</keyid>
    <left>15</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="Alt">
    <keyid>56</keyid>
    <left>23</left>
    <top>43</top>
    <width>14</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57</keyid>
    <left>37</left>
    <top>43</top>
    <width>39</width>
    <height>8</height>
  </key>

  <key modifier="none">
    <keyid>57427</keyid>
    <left>76</left>
    <top>43</top>
    <width>14</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57437</keyid>
    <left>90</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57424</keyid>
    <left>98</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57416</keyid>
    <left>106</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57419</keyid>
    <left>114</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
  <key modifier="none">
    <keyid>57421</keyid>
    <left>122</left>
    <top>43</top>
    <width>8</width>
    <height>8</height>
  </key>
 </softkbdlayout>
</softKbdDes>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\directui\old\placefil.txt ===
; This file is used to specify where every file built by the NT build lab is
; binplaced relative to the root of the distribution point.  If a file is not
; listed, it will end up in the dump directory.
;
; The format is like this:
;
; <imagename>    <class name>
;
; where <imagename> is the filename.ext and <class name> is the directory off
; the root of the distribution point (retail is a placeholder for the root).
; If there are multiple class names for a single image, use a colon to separate
; each.
;
; All bits that ship in the NT base product and are installed with winnt32,
; must have a class name of retail.
;
; If you add a new file to the list, please refrain from creating your own
; special section.  Doing so makes it difficult to detect duplicates.  If
; you're unable to add your image due to a collision with an existing name,
; work it out with the other developer.  Options include creating another
; placefil.txt for your project or using the ALT_PROJECT_TARGET macro in your
; sources file to change the base of the distribution point (doing so means
; your project will not install as part of base NT).
;
;     sort /+17 < placefil.txt > placefil.srt
;
; will generate a list sorted by class name if you want.
;
; IMPORTANT NOTE:
;
; If you add a file to the system, YOU MUST make sure layout.inf is updated
; before you start depending on it or else you will cause a BVT break. Do
; not attempt to modify layout.inf yourself, but follow instructions on:
;     http://ntbld/addtob.htm
;
;        PLEASE KEEP THIS LIST SORTED
;---------------------------------------------
;---------------------------------------------
DirectUI.dll        DirectUI
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\placefil.txt ===
; This file is used to specify where every file built by the NT build lab is
; binplaced relative to the root of the distribution point.  If a file is not
; listed, it will end up in the dump directory.
;
; The format is like this:
;
; <imagename>    <class name>
;
; where <imagename> is the filename.ext and <class name> is the directory off
; the root of the distribution point (retail is a placeholder for the root).
; If there are multiple class names for a single image, use a colon to separate
; each.
;
; All bits that ship in the NT base product and are installed with winnt32,
; must have a class name of retail.
;
; If you add a new file to the list, please refrain from creating your own
; special section.  Doing so makes it difficult to detect duplicates.  If
; you're unable to add your image due to a collision with an existing name,
; work it out with the other developer.  Options include creating another
; placefil.txt for your project or using the ALT_PROJECT_TARGET macro in your
; sources file to change the base of the distribution point (doing so means
; your project will not install as part of base NT).
;
;     sort /+17 < placefil.txt > placefil.srt
;
; will generate a list sorted by class name if you want.
;
; IMPORTANT NOTE:
;
; If you add a file to the system, YOU MUST make sure layout.inf is updated
; before you start depending on it or else you will cause a BVT break. Do
; not attempt to modify layout.inf yourself, but follow instructions on:
;     http://ntbld/addtob.htm
;
;        PLEASE KEEP THIS LIST SORTED
;---------------------------------------------
;---------------------------------------------
ARP.exe             DUser
CTest.exe           DUser
Designer.exe        DUser
DuiPad.exe          DUser
DUser.dll           DUser
DuExts.dll          DUser
GadgetPoint.exe     DUser
GadgetSpy.exe       DUser
Gdiplus.dll         DUser
Gravity.exe         DUser
HelloWorld.exe      DUser
LogonUI.exe         DUser
TestAdaptor.exe     DUser
TestClass.exe       DUser
TestContext.exe     DUser
TestCtrl.exe        DUser
TestCtrlGP.exe      DUser
TestDrop.exe        DUser
TestFx.exe          DUser
TestMsg.exe         DUser
TestSimple.exe      DUser
TestToolbar.exe     DUser
TestTrx.exe         DUser
WebView.exe         DUser
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\directui\placefil.txt ===
; This file is used to specify where every file built by the NT build lab is
; binplaced relative to the root of the distribution point.  If a file is not
; listed, it will end up in the dump directory.
;
; The format is like this:
;
; <imagename>    <class name>
;
; where <imagename> is the filename.ext and <class name> is the directory off
; the root of the distribution point (retail is a placeholder for the root).
; If there are multiple class names for a single image, use a colon to separate
; each.
;
; All bits that ship in the NT base product and are installed with winnt32,
; must have a class name of retail.
;
; If you add a new file to the list, please refrain from creating your own
; special section.  Doing so makes it difficult to detect duplicates.  If
; you're unable to add your image due to a collision with an existing name,
; work it out with the other developer.  Options include creating another
; placefil.txt for your project or using the ALT_PROJECT_TARGET macro in your
; sources file to change the base of the distribution point (doing so means
; your project will not install as part of base NT).
;
;     sort /+17 < placefil.txt > placefil.srt
;
; will generate a list sorted by class name if you want.
;
; IMPORTANT NOTE:
;
; If you add a file to the system, YOU MUST make sure layout.inf is updated
; before you start depending on it or else you will cause a BVT break. Do
; not attempt to modify layout.inf yourself, but follow instructions on:
;     http://ntbld/addtob.htm
;
;        PLEASE KEEP THIS LIST SORTED
;---------------------------------------------
;---------------------------------------------
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\directui\docs\readme.txt ===
DirectUI Directory Structure
----------------------------

DirectUI
  Docs
  Engine
    Base
    Control
    Core
    DirectUILib
    Layout
    Parser
    Util
  External
  Inc
    Public
  Test
    Suite
      UI
  Tools
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\directui\test\app\start\start.ppt ===
Q!N%&- I)fI9n On-screen Show Microsoft Click to edit Master title style Click to edit Master text styles Second level Third level Fourth level Fifth level PowerPoint Presentation Mark Finocchio Mark Finocchio Microsoft PowerPoint "Arial "System Times New Roman Arial Default Design PowerPoint Presentation Fonts Used Design Template Slide Titles Mark Finocchio
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\engine\autoutil\readme.txt ===
========================================================================
       DYNAMIC LINK LIBRARY : AutoUtil
========================================================================


AppWizard has created this AutoUtil DLL for you.  

This file contains a summary of what you will find in each of the files that
make up your AutoUtil application.

AutoUtil.dsp
    This file (the project file) contains information at the project level and
    is used to build a single project or subproject. Other users can share the
    project (.dsp) file, but they should export the makefiles locally.

AutoUtil.cpp
    This is the main DLL source file.

	When created, this DLL does not export any symbols. As a result, it 
	will not produce a .lib file when it is built. If you wish this project
	to be a project dependency of some other project, you will either need to 
	add code to export some symbols from the DLL so that an export library 
	will be produced, or you can check the "doesn't produce lib" checkbox in 
	the Linker settings page for this project. 

/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named AutoUtil.pch and a precompiled types file named StdAfx.obj.


/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.


/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\engine\base\readme.txt ===
========================================================================
       STATIC LIBRARY : Base
========================================================================


AppWizard has created this Base library for you.  

This file contains a summary of what you will find in each of the files that
make up your Base application.

/////////////////////////////////////////////////////////////////////////////

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named Base.pch and a precompiled types file named StdAfx.obj.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.


/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\engine\core\readme.txt ===
========================================================================
       STATIC LIBRARY : Core
========================================================================


AppWizard has created this Core library for you.  

This file contains a summary of what you will find in each of the files that
make up your Core application.

/////////////////////////////////////////////////////////////////////////////

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named Core.pch and a precompiled types file named StdAfx.obj.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.


/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\engine\ctrl\readme.txt ===
========================================================================
       STATIC LIBRARY : Ctrl
========================================================================


AppWizard has created this Ctrl library for you.  

This file contains a summary of what you will find in each of the files that
make up your Ctrl application.

/////////////////////////////////////////////////////////////////////////////

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named Ctrl.pch and a precompiled types file named StdAfx.obj.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.


/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\engine\duser\readme.txt ===
========================================================================
       DYNAMIC LINK LIBRARY : DUser
========================================================================


AppWizard has created this DUser DLL for you.  

This file contains a summary of what you will find in each of the files that
make up your DUser application.

DUser.dsp
    This file (the project file) contains information at the project level and
    is used to build a single project or subproject. Other users can share the
    project (.dsp) file, but they should export the makefiles locally.

DUser.cpp
    This is the main DLL source file.

	When created, this DLL does not export any symbols. As a result, it 
	will not produce a .lib file when it is built. If you wish this project
	to be a project dependency of some other project, you will either need to 
	add code to export some symbols from the DLL so that an export library 
	will be produced, or you can check the "doesn't produce lib" checkbox in 
	the Linker settings page for this project. 

/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named DUser.pch and a precompiled types file named StdAfx.obj.


/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.


/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\engine\lava\readme.txt ===
========================================================================
       STATIC LIBRARY : Lava
========================================================================


AppWizard has created this Lava library for you.  

This file contains a summary of what you will find in each of the files that
make up your Lava application.

/////////////////////////////////////////////////////////////////////////////

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named Lava.pch and a precompiled types file named StdAfx.obj.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.


/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\engine\motion\readme.txt ===
========================================================================
       STATIC LIBRARY : Motion
========================================================================


AppWizard has created this Motion library for you.  

This file contains a summary of what you will find in each of the files that
make up your Motion application.

/////////////////////////////////////////////////////////////////////////////

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named Motion.pch and a precompiled types file named StdAfx.obj.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.


/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\engine\services\readme.txt ===
========================================================================
       STATIC LIBRARY : Services
========================================================================


AppWizard has created this Services library for you.  

This file contains a summary of what you will find in each of the files that
make up your Services application.

/////////////////////////////////////////////////////////////////////////////

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named Services.pch and a precompiled types file named StdAfx.obj.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.


/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\engine\winapi\readme.txt ===
========================================================================
       STATIC LIBRARY : WinAPI
========================================================================


AppWizard has created this WinAPI library for you.  

This file contains a summary of what you will find in each of the files that
make up your WinAPI application.

/////////////////////////////////////////////////////////////////////////////

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named WinAPI.pch and a precompiled types file named StdAfx.obj.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.


/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\duser\profile\icecap.ini ===
;;
;;
;;  Sample INI file for IceCAP 4.3.
;;
;;  IceCAP is MICROSOFT CONFIDENTIAL, and should not be distributed except
;;  under NDA.
;;
;;  To customize your IceCAP runs, copy this file to your working directory
;;  or to your Windows directory and make the appropriate changes.
;;
[IceCAP]
;;
;;****************************************************************************
;; The Profile= value is read once for each process that starts. HOWEVER, the
;; Global value (third parameter) is read only ONCE, when the logger starts.
;;****************************************************************************
;;
;;
;;   Profile sets the initial profiling state for the Thread, Process, and
;;   Global levels.
;;   Syntax is: Profile=On|Off[,On|Off,[On|Off|Never]].  Default is On,On,On.
;;
;;   IceCAP 3.6 syntax works fine for setting the thread-level default value.
;;   Note that we only support Never at the Global level.
;;
; Profile=On
; Profile=Off
;;
;;   IceCAP 4.x allows greater flexibility, to control all three levels.
;;
; Profile=On,On,On
; Profile=On,Off,On
; Profile=On,On,Off
; Profile=Off,Off,Never
;;
;;
;;****************************************************************************
;; The following settings are read ONCE when the logger is initializing.
;; These are global settings which are ONLY read from the [IceCAP] section
;; of the INI file.  For any of the sample settings below, remove the comment
;; indicator ";" at the beginning of the line to make use of the setting.
;;****************************************************************************
;;
;;   DataCompression determines whether or not the logger compresses the
;;   collected data. Note that compression takes additional cpu cycles which
;;   may effect the performance of the profiled application. Default is None.
;;   Note: At this time, Aggressive is the same as Standard.
;;
; DataCompression=None
; DataCompression=Standard
; DataCompression=Aggressive
;;
;;
;;   InMemoryCollection determines whether or not to put the IceCAP logger
;;   into a special mode where no data is written until either the profiled
;;   application terminates or until the current ICP file is closed. Note
;;   that opening an new ICP file will result in the second data set also
;;   being collected in memory if the first was collected that way.
;;   Default is Off.
;;
; InMemoryCollection=Off
; InMemoryCollection=On
;;
;;
;;   EnableUIDisplay determines whether or not the logger loads its UI
;;   components to show the the current profiling state and allow control
;;   over profiling. Default is On.
;;
; EnableUIDisplay=Off
; EnableUIDisplay=On
;;
;;
;;   Shutdown specifies whether, when the logger is started automatically, it
;;   will shut down automatically ("Automatic", the default) or whether it
;;   will continue running until manually shut down ("Manual").  The latter
;;   behavior is useful when profiling a dynamically loaded component which
;;   is loaded and unloaded and reloaded over the course of a single scenario.
;;
; Shutdown=Automatic
; Shutdown=Manual
;;
;;
;;   MaxProcesses specifies the maximum number of processes which can be
;;   profiled simultaneously.  By default, this is 8.
;;
; MaxProcesses=8
;;
;;
;;   MaxThreads specifies the maximum number of threads which can be profiled
;;   simultaneously (across multiple processes).  By default, this is 32 on 
;;   machines with 128MB of memory and is adjusted on a sliding scale for 
;;   machines with more RAM.
;;
; MaxThreads=64
;;
;;
;;   NumberOfBuffers specifies the maximum number of buffers which can be in
;;   use at one time.  By default, this is set to the (MaxThreads + 1) (one 
;;   buffer per thread plus one extra for the index). This value must be
;;   larger than MaxThreads or an error message will be issued.
;
NumberOfBuffers=256
;;
;;
;;   SizeOfBuffers specifies the size (in "K") of I/O buffers to be used to
;;   collecting profile data.  By default, this is 64 (64k or 65535 bytes).
;;   On a system with limited disks but plenty of available RAM, it may be
;;   useful to increase the buffer size (keeping in mind that this is the
;;   size used PER THREAD being profiled).  Maximum size is 1024 (1 megabyte).
;;   Minimum size is 4.
;;
; SizeOfBuffers=64
;;
;;
;;   ClearProcessSecurityACL controls whether any special handling is done
;;   relative to the ACL of a process handle.  This may be necessary in
;;   some cases when redirecting output to a new ICP file during a profile
;;   run.  Three settings are supported: 'default' (which is the default),
;;   'standard', and 'impersonating'.  Default will not cause any special
;;   ACL handling to take place.  Standard should be used to clear process
;;   security for a standard service application.  Impersonating should be
;;   used to clear process security for a service which is impersonating
;;   another user.  We recommend contacting ICAPSUP before making use of
;;   these settings if you are unsure about whether or not they are needed.
;;
; ClearProcessSecurityACL=default
; ClearProcessSecurityACL=standard
; ClearProcessSecurityACL=impersonating
;;
;;
;;****************************************************************************
;; The following settings are IceCAP-specific (i.e. don't apply if collecting
;; data for DLP, and are read ONCE when the logger is initializing.  These
;; settings must be contained in the [IceCAP] section as well.
;;****************************************************************************
;;
;;   P6PerfCounter specifies an additional P6 performance counter whose value
;;   is to be collected in addition to time.  The optional qualifier specifies
;;   to which Ring the counter should apply (0 for Kernel, 3 for User, * or
;;   blank for all). By default, this option collects no additional data.  If
;;   data is collected, it will be recorded in the User1 counter value slot.
;;   If the P6 counter C0,* is added, IceCAP analysis will automatically 
;;   calculate CPI for you.  (ie. P6PerfCounter=C0,*)
;;
; P6PerfCounter=24,*
;;
;;
;;   For some P6 Performance Counters, a Unit Mask can be used to fine-tune
;;   what is being collected.  To allow users to specify this unit mask, the
;;   following new INI setting has been added. Default value is 0.
;;
; P6PerfCounterUnitMask=0
; P6PerfCounterUnitMask=f
;;
;;   UserCounter specifies one or more optional additional user-defined
;;   counters whose value should be recorded with the IceCAP time (and
;;   possibly P6 counter) data.  At present, IceCAP supports a maximum of 15
;;   user counter values, which includes a P6 counter if one is being
;;   recorded. To specify a user counter, the user specifies a DLL name,
;;   a counterinfo function name, and a counter initialization function
;;   name.  See the IceCAP documentation for additional info about
;;   writing a User counter.
;;
; UserCounter=NTUserPerf.dll,GetNtCounterInfo,InitNtCounters
;;
;;
;;   CollectPFEvents determines whether page fault data is collected and if so,
;;   for which processes. It can take the following values:
;;		all - pagefault data is collected for all processes in the system
;;		profiled - pagefault data is collected only for profiled processes
;;		none - default - no pagefault data is collected
;;   Note:  If you are collecting kernel-mode profiles, CollectPFEvents=profiled 
;;          will have the same effect of CollectPFEvents=all.
;;
; CollectPFEvents=all
; CollectPFEvents=profiled
; CollectPFEvents=none
;;
;;
;;   If CollectPFEvents is not set to 'none', then the PageFaultCategory setting
;;   determines what types of page faults are recorded.  It can take one or more
;;   of the following values (comma separated):
;;		Hard (default), Transition, DemandZero, CopyOnWrite, Guard,
;;		Soft (equivalent to "Transition, DemandZero,CopyOnWrite,Guard"),
;;		All (equivalent to all of the above)
;;   Note:  Due to a bug in WMI, we cannot collect guard page fault data.  This 
;;          bug exists in Windows 2000 and current Whistler builds, and it is not
;;          expected to be fixed in the near term.
;;
; PageFaultCategory=Hard
; PageFaultCategory=Transition
; PageFaultCategory=Soft
; PageFaultCategory=All
;;
;;   If CollectPFEvents is not set to 'none', then the WMIBuffers setting determines
;;   the number of buffers that the WMI subsystem will allocate for its own use.
;;   The size of the buffers is the specified below.  The default is 32 buffers.
;;
; WMIBuffers=32
;;
;;
;;   If CollectPFEvents is not set to 'none', then the WMIBufferSize setting
;;   determines the size (in K) of the buffers that the WMI subsystem will
;;   allocate for its own use.  The default is 4K buffers.
;;
; WMIBufferSize=4
;;
;;
;;
;;****************************************************************************
;; The following fields are read ONCE when the logger is initializing.  If
;; the logger is started manually, they will be read from the [IceCAP] section.
;; If the logger is started from an instrumented process, it will first look
;; for a section with that process's base application name ([WinWord] for
;; example), then if it doesn't find the entry, it will look in the [IceCAP]
;; section.
;;****************************************************************************
;;
;;   DetectKernelTransitions determines whether or not a P6/PII performance
;;   counter is used to track transitions between user mode and kernel mode.
;;   By default, this is On for P6/PII processors, and Off for vanilla
;;   Pentium processors.  By turning this off, only Elapsed time can be
;;   measured.  It can, however, reduce collection overhead as a result.
;;
; DetectKernelTransitions=On
; DetectKernelTransitions=Off
;;
;;
;;   Output overrides the path and/or filename used for the log file (ICP
;;   file).  For additional details, please refer to the documentation.
;;
; Output=C:\ICPFILES
; Output=C:\ICPFILES\SCENARIO1.ICP
;;
;; Additional, application-specific sections can be added to specify profile
;; settings for specific processes.
;;
[WinWord]
;;
; Profile=On
; Profile=Off
;;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\gdiplus\killfile.txt ===
.obj
.exe
.dll
.pdb
.pch
.exp
\doc\
\setup\
\kanasoft\
\gram\
.bat
.doc
.ppt
.xls
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\gdiplus\demos\readme.txt ===
GDI+ demos.

sidewalk: screensaver written by t-jfvez
life: screensaver written by asecchia
trialpha: demo app written by mbyrd
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\gdiplus\engine\fondrv\tt\scaler\clientif.doc ===
Microsoft Word 6.0 Document MSWordDoc Word.Document.6C:\OFFICE\WINWORD\TEMPLATE\NORMAL.DOT Font Scaler Client Interface Jeff Weaver Jeff Weaver Microsoft Word 6.0Font Scaler Client Interface Version 1.5 1/21/94 Microsoft Confidential ( 1989-1994 Microsoft Corporation and Apple Computer, Inc. All rights reserved.  Microsoft is a registered trademark of Microsoft Corporation. Apple, the Apple logo, Macintosh, MPW, and QuickDraw are registered trademarks of Apple Computer, Inc. Font Scaler Client Interface About This Document About the Font Scaler About the Font Scaler Client Interface Using the Font Scaler Client Interface Font Scaler Data Structures The fs_GlyphInputType record The fs_GlyphInfoType record The Graphics State The fnt_LocalGraphicStateType Data Structure The fnt_ElementType Data Structure The fnt_GlobalGraphicStateType Data Structure Font Scaler Routines fs_OpenFonts fs_Initialize fs_NewSfnt fs_NewTransformation fs_NewGlyph fs_GetAdvanceWidth fs_GetScaledAdvanceWidths fs_ContourGridFit fs_ContourNoGridFit fs_ContourGrayScan fs_FindBitMapSize fs_FindBandingSize fs_FindGrayBandingSize fs_FindGraySize fs_SizeOfOutlines fs_SaveOutlines fs_RestoreOutlines fs_ContourScan fs_CloseFonts Font Scaler Errors Sample of a Routine That Uses the Client Interface Summary of the Font Scaler Client Interface Constants Macros Data Types Functions About This Document The client interface to the Font Scaler has been released for those engineers who are writing system software, designing outline fonts, and writing font editors. About the Font Scaler The Font Scaler scales the outline font definition for a glyph to a specific point size, and then converts the outline into a bitmap at a particular resolution. The conversion of an outline into a bitmap is referred to as scan conversion. Each glyph in an outline font has a mathematical description as a set of straight lines and second-degree B-splines. Because the edges of the pixels (for a display screen) or dots (for a printer) might not correspond exactly to the lines and curves defining the glyph, a straight scan conversion of an outline into a bitmap is generally imperfect. This effect is most noticeable at low resolution, where there are relatively few pixels or dots per inch.  To correct for this problem, the description of each glyph can include a set of instructions that tell the Font Scaler how to modify the shape of the glyph before scan conversion for a particular point size and display resolution. The Font Scaler, therefore, includes an instruction interpreter in addition to a scan converter. About the Font Scaler Client Interface Routines that need to use the Font Scaler are referred to as Font Scaler clients. The client interface for the Font Scaler consists of 19 routines, as shown in Table 1. You can pass parameters to the Font Scaler through a data structure called the fs_GlyphInputType record and you can receive data from the Font Scaler through the fs_GlyphInfoType record. These records are described in the section  Font Scaler Data Structures,  later in this document. The Font Scaler routines are described in detail in the section  Font Scaler Routines,  later in this document. One of the fields in the fs_GlyphInputType record is a pointer to a function called the trace function that the Font Scaler calls before it executes each instruction. The Font Scaler passes one parameter to the trace function: a pointer to the local graphics state. The local graphics state contains several fields that can affect the execution of instructions, plus a pointer to the global graphics state. The local and global graphics states are described in the section  The Graphics State,  later in this document.  You can define the trace function in any way you wish; the purpose of the function is to allow you to trace through the instructions as the Font Scaler executes them and to examine the graphics state before and after each instruction is executed. If you do not want to use the trace feature, set the traceFunc field of the fs_GlyphInputType record to NULL (0). Table 1. Font Scaler Client Interface Routines  Routine fs_OpenFonts Opens the Font Scaler. This routine is required. fs_Initialize Initializes the Font Scaler. This routine is required. fs_NewSfnt Specifies which sfnt data structure to use. You must call this routine each time you have a new sfnt data structure or change the contents of the maxProfile table in the sfnt. fs_NewTransformation Specifies the point size, the transformation matrix, the pixel diameter, and the resolution to be used by the Font Scaler; provides a pointer to the trace function. You must call this routine any time you have a new value for one of these parameters. fs_NewGlyph Causes the Font Scaler to compute the glyph index value from the character code. You must call this routine each time you want to display a new glyph. fs_GetAdvancedWidth Extracts information about the advance width of a glyph from the sfnt data structure. You can use this routine instead of fs_ContourGridFit or fs_ContourNoGridFit if you do not want to create an outline. fs_GetScaledAdvanceWidths Returns the hinted advance widths for the range of glyphs specified. The routine takes advantage of the hdmx and LTSH tables if they are present in the font file. fs_ContourGridFit Executes the instructions for a glyph and creates an outline with the point size, display resolution, pixel diameter, and transformation specified with the fs_NewTransformation routine. You should use this routine instead of fs_ContourNoGridFit if you want the Font Scaler to perform grid fitting when it creates the outline of the glyph. fs_ContourNoGridFit Creates an outline for a glyph at the point size specified with the fs_NewTransformation routine. You can use this routine instead of fs_ContourGridFit  if you want to create an outline without executing the instructions for the glyph. fs_ContourGrayScan Converts an outline into a gray scale bitmap. fs_FindBitMapSize Calculates the amount of memory that the Font Scaler needs to create the glyph s bitmap, and returns the left side bearing and advance width. You must call this routine if you want to prepare a bitmap for the glyph. fs_FindBandingSize Determines the amount of memory needed by the Font Scaler to scan convert a glyph bitmap using banding. fs_FindGrayBandingSize Determines the amount of memory needed to create a gray scale bitmap using banding. fs_FindGraySize Determines the amount of memory needed to create a gray scale bitmap. fs_SizeOfOutlines Calculates the amount of memory that the Font Scaler needs to cache the outline. This routine is optional. Table 1 (continued). Font Scaler Client Interface Routines  Routine fs_SaveOutlines Stores the outline data in the outline cache. This routine is optional. fs_RestoreOutlines Recovers the outline data stored in the outline cache. This routine is optional. fs_ContourScan Converts the outline into a bitmap. You must call this routine if you want to prepare a bitmap for the glyph. fs_CloseFonts Closes the Font Scaler. Using the Font Scaler Client Interface Each of the routines for the client interface to the Font Scaler takes two parameters. The first parameter is a pointer to the fs_GlyphInputType record and the second is a pointer to the fs_GlyphInfoType record. To use the Font Scaler to create a bitmap for a particular glyph, use the following procedure: Allocate memory for and pointers to the fs_GlyphInputType and fs_GlyphInfoType records.  Set to 0 the fields flags, reserved0, platformID, ReleaseSfntFrag, and styleFunc in the fs_GlyphInputType record. The fields flags and reserved0 are reserved for future use; see the section  The fs_GlyphInputType record  for descriptions of the ReleaseSfntFrag, platformID, and styleFunc fields. Call the fs_OpenFonts routine. Each of the first three elements (elements 0, 1, and 2) of the memorySizes vector in the fs_GlyphInfoType record returns with a value that indicates an amount of memory in bytes. Allocate three blocks of memory with the sizes indicated by the first three elements of the memorySizes vector, and place pointers to these blocks in the first three elements of the memoryBases vector in the fs_GlyphInputType record.  Important:  Any block of memory that you allocate must start at a longword boundary; that is, the starting address of the block must be an even multiple of 4. Call the fs_Initialize routine. Locate the font description. You could read in the entire data structure, but typically you obtain the handle to an   resource. Initialize the following fields in the fs_GlyphInputType record: clientID, ReleaseSfntFrag, GetSfntFragmentPtr, and set SfntDirectory to NULL. Set the platformID field to the appropriate platform. See the following section for a description of these fields. Call the fs_NewSfnt routine to pass this information to the Font Scaler. Elements 3 and 4 of the memorySizes vector in the fs_GlyphInfoType record return with values that indicate an amount of memory in bytes. Allocate two blocks of memory with the sizes indicated by elements 3 and 4 of the memorySizes vector, and place pointers to these blocks in elements 3 and 4 of the memoryBases vector in the fs_GlyphInputType record.  Initialize the following fields in the fs_GlyphInputType record: xResolution, yResolution, pointsize, transformMatrix, pixelDiameter, and traceFunc. Set traceFunc to NULL if you do not want to activate the trace function.  Call the fs_NewTransformation routine to pass this information to the Font Scaler. Initialize the characterCode field in the fs_GlyphInputType record. Call the fs_NewGlyph routine. The Font Scaler uses the charToIndexMap table in the sfnt data structure to find the glyph index that corresponds to the character code you specified. Call the fs_ContourGridFit routine. The Font Scaler executes the instructions in the glyph description and returns the data that defines the outline for the glyph in the following fields of the fs_GlyphInfoType record: xPtr, yPtr, startPtr, endPtr, onCurve, and numberOfContours. Call the fs_FindBitMapSize routine. The Font Scaler places a value in elements 5 and 6 of the memorySizes vector in the fs_GlyphInfoType record. Allocate the amount of memory indicated by elements 5, 6 and 7 of the memorySizes vector, and place pointers to that memory in elements 5, 6 and 7 of the memoryBases vector in the fs_GlyphInputType record. This memory is used by the Font Scaler when it is creating a bitmap.  If there is insufficient memory available to process the entire bitmap, refer to the fs_FindBandingSize call notes. You then place a pointer to the amount of memory you have been able to allocate in memoryBases 5. It is important to understand that a memory request for memoryBase 5 is the only time you can partially fulfill a font scaler memory request. All other memory requests must be completely fulfilled. In short, if you are banding a glyph, you can provide a pointer to the amount of memory needed for the band (i.e. not all the memory requested by the scaler), but memoryBases 0, 1, 2, 3, 4, 6, and 7 must always point to enough memory to satisfy the scaler s requests. Initialize the bottomClip and topClip fields in the fs_GlyphInputType record. To process the entire glyph, set bottomClip equal to bitMapInfo.bounds.top and topClip equal to bitMapInfo.bounds.bottom. (Note that the bounding box returned by fs_FindBitMapSize is different than one might expect. The bounding box is upside down with respect to the glyph.) Call the fs_ContourScan routine. The Font Scaler converts the outline into a bitmap of the point size and resolution you specified in the fs_GlyphInputType record. The Font Scaler places a pointer to the bitmap and the dimensions of the bitmap in the bitMapInfo field of the fs_GlyphInfoType record. Each time you want to display a new character, you can change the characterCode field of the fs_GlyphInputType record and repeat steps 12 through 16. If you change the point size, transformation matrix, pixel diameter, or device resolution, you must return to step 10. If you change the font, you must return to step 6. If you have converted only a portion of the glyph into a bitmap, you can repeat step 16 with different values of bottomClip and topClip as many times as you like; be sure that you have allocated enough memory for the widest strip that you process. Call the fs_CloseFonts routine when you are finished using the Font Scaler, before your program quits.  You can use the fs_ContourNoGridFit routine instead of the fs_ContourGridFit routine to see what a glyph looks like when the instructions for that glyph are not executed. You can use the fs_GetAdvanceWidth routine instead of the fs_ContourGridFit or fs_ControurNoGridFit routines if you are only interested in character widths and do not want to calculate the outline of the character. The fs_SizeOfOutlines, fs_SaveOutlines, and fs_RestoreOutlines routines make it possible to implement a font cache. These routines are primarily for use by the Font Manager, not for other clients of the Font Scaler. The Font Manager can cache the outlines of several glyphs and then display them more quickly than would otherwise be possible, for example. These routines are used between steps 14 and 15. To use the font cache routines, include the following step between steps 14 and 15 in the preceding procedure: Call the fs_SizeofOutlines routine. The font scaler places a value in the outlineCacheSize field of the fs_GlyphInfoType record that indicates the amount of memory needed to cache the outline of the glyph. Allocate the amount of memory indicated by the outlineCacheSize field and place a pointer to the memory in the outlineCache field of the fs_GlyphInputType record. If you cache another character before you recover this one, you will have to repeat this process. Therefore, you should store the pointers to the cached glyphs in your program s own local memory. Call the fs_SaveOutlines routine. The Font Scaler stores the outline of the glyph in the memory pointed to by the outlineCache field. When you are ready to display the character, place the pointer to the memory cache for that character in the outlineCache field of the fs_GlyphInputType record and call the fs_RestoreOutlines routine. Then go on to step 15 as described earlier in this section. Font Scaler Data Structures The Font Scaler uses two data structures for exchanging information with your program: fs_GlyphInputType and fs_GlyphInfoType. These data structures are defined and described in this section. The Font Scaler also uses two data structures, referred to as the local graphics state and the global graphics state, that affect the way in which various instructions are interpreted. The Font Scaler passes a pointer to the local graphics state to your trace function, and the local graphics state includes a pointer to the global graphics state. The graphics state data structures are also described in this section. The fs_GlyphInputType record You place information needed by the Font Scaler in the fs_GlyphInputType record, which is defined as follows: /* banding type constants */ #define FS_BANDINGOLD       0 #define FS_BANDINGSMALL     1 #define FS_BANDINGFAST      2 #define FS_BANDINGFASTER    3 /* Dropout control values are now defined as bit masks to retain compatability */ /* with the old definition, and to allow for current and future expansion */ #define SK_STUBS          0x0001        /* leave stubs white */ #define SK_NODROPOUT      0x0002        /* disable all dropout control */ #define SK_SMART   0x0004  /* symmetrical dropout, closest pixel */ /* Values used to decode curves */ #define ONCURVE             0x01 typedef signed char int8; typedef unsigned char uint8; typedef short int16; typedef unsigned short uint16; typedef long int32; typedef unsigned long uint32; typedef long Fixed; #ifndef F26Dot6 #define F26Dot6 long #endif #ifndef boolean #define boolean int #endif /* QuickDraw Types */ #ifndef _MacTypes_ #ifndef __TYPES__     typedef struct Rect {         int16 top;         int16 left;         int16 bottom;         int16 right;     } Rect; #endif #endif typedef struct {     Fixed       transform[3][3]; } transMatrix; typedef struct {     Fixed       x, y; } vectorType; typedef void (*voidFunc) (); typedef void * voidPtr; typedef void (FS_CALLBACK_PROTO *ReleaseSFNTFunc) (voidPtr); typedef void * (FS_CALLBACK_PROTO *GetSFNTFunc) (int32, int32, int32); #endif  /* FSCDEFS_DEFINED */ /* QuickDraw Types */ #ifndef _Quickdraw_ #ifndef __QUICKDRAW__    typedef struct BitMap { char* baseAddr; int16 rowBytes; Rect bounds; } BitMap; #endif #endif #ifdef FSCFG_GRAY_SCALE #define MEMORYFRAGMENTS 9           /* extra memory base for overscaled bitmap */ #else #define MEMORYFRAGMENTS 8 #endif typedef struct { vectorType      advanceWidth, leftSideBearing; vectorType      leftSideBearingLine, devLeftSideBearingLine;/* along AW line */ vectorType      devAdvanceWidth, devLeftSideBearing; } metricsType; #define FS_MEMORY_SIZE  int32  * Output data structure to the Font Scaler. typedef struct { FS_MEMORY_SIZE  memorySizes[MEMORYFRAGMENTS]; uint16          glyphIndex; uint16          numberOfBytesTaken; /* from the character code */ metricsType     metricInfo; BitMap          bitMapInfo; /* Spline Data */ int32           outlineCacheSize; uint16          outlinesExist; uint16          numberOfContours; F26Dot6         *xPtr, *yPtr; int16           *startPtr; int16           *endPtr; uint8           *onCurve; /* End of spline data */ /* Only of interest to editors */ F26Dot6         *scaledCVT; #ifdef FSCFG_GRAY_SCALE /* gray scale outline magnification */ uint16          usOverScale; #endif } fs_GlyphInfoType;  * Input data structure to the Font Scaler.  * if styleFunc is set to non-zero it will be called just before the transformation  * will be applied, but after the grid-fitting with a pointer to fs_GlyphInfoType.  * so this is what styleFunc should be voidFunc StyleFunc (fs_GlyphInfoType *data);  * For normal operation set this function pointer to zero. #ifndef UNNAMED_UNION typedef struct { Fixed                   version; char*                   memoryBases[MEMORYFRAGMENTS]; int32                   *sfntDirectory; /* (sfnt_OffsetTable    *) always needs to be set, when we have the sfnt */ GetSFNTFunc             GetSfntFragmentPtr; /* (clientID, offset, length) */ ReleaseSFNTFunc         ReleaseSfntFrag; int32                   clientID; /* client private id/stamp (eg. handle for the sfnt) */ union { struct { uint16          platformID; uint16          specificID; } newsfnt; struct { Fixed           pointSize; int16           xResolution; int16           yResolution; Fixed           pixelDiameter;      /* compute engine char from this */ transMatrix*    transformMatrix; FntTraceFunc    traceFunc; } newtrans; struct { uint16          characterCode; uint16          glyphIndex; } newglyph; struct { void            (*styleFunc) (fs_GlyphInfoType*); FntTraceFunc    traceFunc; } gridfit; struct {                                    /* for fs_FindGraySize */ uint16          usOverScale;            /* outline magnification */ boolean         bMatchBBox;             /* force bounding box match */ } gray; int32*  outlineCache; struct {                                    /* for fs_FindBandingSize */ uint16          usBandType;             /* old, small or fast */ uint16          usBandWidth;            /* number of scanlines */ int32*          outlineCache;           /* cacheing works with banding */ } band; struct { int16           bottomClip; int16           topClip; int32*          outlineCache; } scan; } param; } fs_GlyphInputType; #else typedef struct { Fixed                   version; char*                   memoryBases[MEMORYFRAGMENTS]; int32                   *sfntDirectory; /* (sfnt_OffsetTable    *) always needs to be set, when we have the sfnt */ GetSFNTFunc             GetSfntFragmentPtr; /* (clientID, offset, length) */ ReleaseSFNTFunc         ReleaseSfntFrag; int32                   clientID; /* client private id/stamp (eg. handle for the sfnt) */ union { struct { uint16          platformID; uint16          specificID; struct { Fixed           pointSize; int16           xResolution; int16           yResolution; Fixed           pixelDiameter;      /* compute engine char from this */ transMatrix*    transformMatrix; FntTraceFunc    tracePreProgramFunc; struct { uint16          characterCode; uint16          glyphIndex; struct { void            (*styleFunc) (fs_GlyphInfoType*); FntTraceFunc    traceGridFitFunc; struct {                                    /* for fs_FindGraySize */ uint16          usOverScale;            /* outline magnification */ boolean         bMatchBBox;             /* force bounding box match */ int32*              outlineCache1; struct {                                    /* for fs_FindBandingSize */ uint16          usBandType;             /* old, small or fast */ uint16          usBandWidth;            /* number of scanlines */ int32*          outlineCache3;          /* cacheing works with banding */ struct { int16           bottomClip; int16           topClip; int32*          outlineCache2; } fs_GlyphInputType; #endif      /* unnamed union */ The fields in the fs_GlyphInputType record have the following significance: version Set to 1 for now. If there should be future versions of the Input record we can use this field to distinguish the different versions. *memoryBases A vector of pointers to blocks of memory. When the Font Scaler needs memory, it puts the sizes of the blocks of memory it needs into the vector memorySizes in the fs_GlyphInfoType record. You must allocate the requested memory and pass pointers to the memory blocks back to the Font Scaler through the *memoryBases field before calling the next client interface routine. The pointer to a block of memory must be in the element of the memoryBases vector that corresponds to the element of the memorySizes vector that contained the memory request.  *sfntDirectory This field is no longer used by the rasterizer and should be set to NULL.  GetSfntFragmentPtr A pointer to a function that the Font Scaler calls when it needs to extract data from the sfnt data structure. You must define this function in your program. The Font Scaler passes three long-word parameters to this function:  the client ID, the offset into the sfnt data structure, and the length of the data wanted. The function returns a pointer to the starting position in memory of the requested data. You must initialize this field before calling the fs_NewSfnt routine, and it must remain valid for all later calls to the Font Scaler. Important:  Your function must not move any memory blocks that you have allocated for the Font Scaler. Similarly, it must not move any data within those memory blocks. If you change the location in memory of any data needed by the Font Scaler while a Font Scaler routine is executing, the Font Scaler will crash. ReleaseSfntFrag A pointer to a function that the Font Scalar calls when memory for the sfnt data structure is no longer needed. The Font Scalar passes one longword parameter to this function: a pointer to the piece of the sfnt that was previously allocated with GetSfntFragmentPtr. This allows clients who only load in parts of the sfnt to reclaim that memory when the engine is through with it. clientID Any longword you want to use as an identifier. The Font Scaler passes the clientID field as a parameter to your GetSfntFragment function; the Font Scaler does not use this field for any purpose of its own. You might want to place the handle to the   resource in this field so that this handle is available to your GetSfntFragment function each time it is called by the Font Scaler. You must initialize this field before calling the fs_NewSfnt routine. platformID The subtable of the charToIndexMap table that you want the Font Converter to use. Set the platformID field to the Script code that describes the writing sytem the font was defined for (see description under Naming Table, pages 243-248 of TrueType specifications). You must initialize this field before calling the fs_NewSfnt routine. specific ID Platform specific ID (see platformID for more information). pointSize The point size, at 72 points per inch, at which you want to display the glyph. You must initialize this field before calling the fs_NewTransformation routine. xResolution The horizontal resolution in dots per inch of the display device. You must initialize this field before calling the fs_NewTransformation routine. yResolution The vertical resolution in dots per inch of the display device. You must initialize this field before calling the fs_NewTransformation routine. pixelDiameter The pixel size of the display device. The pixel size is defined as D * R, where D is the average pixel diameter and R is the resolution of the display device. An ideal pixel is defined as a circle that will just touch the diagonally adjacent pixels (see the figure). An ideal pixel has a diameter of (2, because (2 is the diagonal of a unit square (a square with sides equal to 1).  Ideal pixels The Font Scaler uses the pixel diameter to determine how much overlap or how wide a gap to expect between pixels, so that it can compensate for these defects when generating the outline of the glyph. In most cases, you can assume that a display screen has ideal pixels, so that the pixel diameter of a display screen is (2. This value is expressed in 16.16 fixed point, so the value for (2 is 0x00016A0A. You must initialize this field before calling the fs_NewTransformation routine. transformMatrix A 3x3 matrix that specifies any transformation of the glyph that you want the Font Scaler to perform. For example, you can stretch the glyph or rotate it.  The following transformation matrix stretches a glyph in the Y direction so that it is twice as tall as normal: The following transformation matrix skews a glyph to make an oblique character; a vertical line on the glyph is rotated by a degrees while the height of each point on the glyph remains constant: tan a The following transformation matrix rotates a glyph by a degrees: cos a sin a sin a cos a The transformation matrix is described by the struct transMatrix. The definition of a transMatrix struct is: typedef struct { Fixed      transform[HEIGHT][WIDTH] Please note that although the third column of the matrix is defined as Fixed numbers you will actually need to use  Fract numbers in that column. The higher resolution provided by Fracts is required to change the perspective of a glyph. Fracts are 2.30 fixed point numbers. Transformations are discussed in the following books: Principles of Interactive Computer Graphics, by Newman & Sproull, McGraw Hill, 2nd ed., 1979;  Fundamentals of Interactive Computer Graphics, by Foley & Van Dam, Addison Wesley, 1984. traceFunc A pointer to a routine (called the trace function) that the Font Scaler calls before it executes each instruction. You must define the trace function yourself. The Font Scaler passes one parameter to the trace function: a pointer to the Font Scaler s local graphics state. You must initialize this field before calling the fs_NewTransformation routine. The purpose of this function is to allow you to trace through the instructions for a glyph one at a time, examing the graphics state before each instruction is executed, as an aid to debugging the instructions for the glyph. If you do not want to define a trace function, set the traceFunc pointer to NULL. The Font Scaler runs much faster when no trace function is defined. characterCode The character code for the glyph used in the charToIndexMap table in the sfnt data structure. The character codes for the Apple standard character set are shown in Figure 1 of the preliminary developer note titled  Macintosh System Software Release 7.0 Outline Fonts.   You must initialize this field before calling the fs_NewGlyph routine. If you set the characterCode field to 0xFFFF, then the Font Scaler ignores the character code and uses the glyph index value that you specify in the glyphIndex field instead. glyphIndex The index value for the glyph as specified in the charToIndexMap table in the sfnt data structure.  If you specify 0xFFFF for the characterCode field and place a value in the glyphIndex field before you call the fs_NewGlyph routine, then the Font Scaler uses the glyph index value instead of the character code to find the glyph in the sfnt data structure. If you specify any other value for the characterCode field, then the glyphIndex field is ignored.  See also the description of the glyphIndex field in the fs_GlyphInfoType record. styleFunc Not supported in this version of the Font Scalar. Should be set to NULL. traceFunc Pointer to a routine called the trace function that the Font Scaler calls before it executes each instruction. You must define the trace function yourself. The Font Scaler passes one parameter to the trace function: a pointer to the FontScaler s local graphics state. You must initialize this field before calling the fs_NewTransformation routine. The purpose of this function is to allow you to trace through the instructions for a glyph one at a time, examining the graphics state before each instruction is executed, as an aid to debugging the instructions for the glyph. If you do not want to define a trace function, set the traceFunc pointer to 0. The Font Scaler runs much faster when no trace function is defined. *outlineCache A pointer to a block of memory that you have allocated for an outline cache. When you execute the fs_SizeOfOutlines routine, the Font Scaler places the amount of memory it needs in the outlineCacheSize field of the fs_GlyphInfoType record. You must allocate the memory and place a pointer to it in the *outlineCache field before you call the fs_SaveOutlines routine. bottomClip The bottom of the band to be processed, where the baseline of the bitmap is 0, the bottom of the next row of pixels is 1, and so forth. The purpose of the bottomClip and topClip fields is to allow you to specify a horizontal strip of the glyph to be converted to a bitmap in the case that you cannot allocate sufficient memory to process the entire glyph. For example, to process the strip that includes the 9th through 16th pixels from the basline of the bitmap, set bottomClip to 8 and topClip to 16. (Note that the baseline of the bitmap is not necessarily the bottom of the character; a character with a descender, for example, has pixels below the baseline.) You must initialize this field before calling the fs_ContourScan routine.  See also the discussion of steps 15 and 16 in the section  Using the Font Scaler Client Interface,  earlier in this document.  topClip The top of the band to be processed, where the top of the first row of pixels above the baseline is 1, the top of the second row is 2, and so forth. See the description of the bottomClip field for more information. *outlineCache A pointer to a block of memory that you have allocated for an outline cache. When you execute the fs_SizeOfOutlines routine, the Font Scaler places the amount of memory it needs in the outlineCacheSize field of the fs_GlyphInfoType record. You must allocate the memory and place a pointer to it in the *outlineCache field before you call the fs_SaveOutlines routine. The fs_GlyphInfoType record The Font Scaler places information in the fs_GlyphInfoType record, which is defined as follows: typedef struct { Fixed x, y; } vectorType; typedef struct { vectorType advanceWidth, leftSideBearing; vectorType devAdvanceWidth, devLeftSideBearing; /* experimental, do not use */ vectorType reserved3, reserved4; } metricsType;  * Output data structure to the Font Scaler. #define int16 short #define uint16 unsigned short #define int32 int #define uint32 unsigned long #define F26Dot6 long typedef uint8 *charPtr; typedef long (*longFunc) (); typedef int8 (*CharFunc) (); typedef charPtr (*CharPtrFunc) (); typedef void (*voidFunc) ();   typedef struct { int16 int16 left; int16 bottom; int16 right; } Rect; typedef struct { baseAddr; int16 rowBytes; bounds; } BitMap ; typedef struct { int32 memorySizes[MEMORYFRAGMENTS]; uint16 glyphIndex; uint16 numberOfBytesTaken; /* from the character code */ metricsType metricInfo; BitMap bitMapInfo; /* Spline Data */ int32 outlineCacheSize; uint16 outlinesExist; uint16 numberOfContours; F26Dot6 *xPtr, *yPtr; int16 *startPtr; int16 *endPtr; uint8 *onCurve; /* End of spline data */ /* Only of interest to editors */ F26Dot6 *scaledCVT; #ifdef FSCFG_GRAY_SCALE      uint16 usOverScale; #endif } fs_GlyphInfoType; The fields in the fs_GlyphInfoType record have the following significance: memorySizes A vector listing the sizes of blocks of memory needed by the Font Scaler. When the Font Scaler needs memory, it puts the sizes of the blocks of memory it needs into the vector memorySizes in the fs_GlyphInfoType record. You must allocate the requested memory and pass pointers to the memory blocks back to the Font Scaler through the *memoryBases field before calling the next client interface routine. The pointer to a block of memory must be in the element of the memoryBases vector that corresponds to the element of the memorySizes vector that contained the memory request. The Font Scaler uses the memorySizes field to request memory. It uses elements 0, 1, and 2 of this vector after you execute the fs_OpenFonts routine, elements 3 and 4 after you execute the fs_NewSfnt routine, and elements 5, 6 and 7 after you execute the fs_FindBitMapSize routine. glyphIndex The index value for the glyph returned by the fs_NewGlyph routine. If you specify 0xFFFF for the characterCode field in the fs_GlyphInfoType record and specify a value for the glyphIndex field in the fs_GlyphInfoType record, then that glyph index value is also returned in this field.  numberOfBytesTaken The number of bytes read by the Font Scaler for the character code. For certain character encoding schemes, the Font Scaler reads only 1 byte for some characters and reads 2 bytes for others. You can tell from this field how many bytes were taken by the Font Scaler. If only 1 byte was taken, you have to resend the second byte for the next character. If the character code was invalid, this field is set to 0. This field is returned by the fs_NewGlyph routine. metricInfo The first two elements of this structure contain the advance width and left side bearing. The advance width is returned by the fs_GetAdvanceWidth routine. Both the advance width and left side bearing are returned by the fs_ContourGridFit and fs_ContourNoGridFit routines. The other elements of this structure are reserved. Note that both the advance width and left side bearing have x and y components. The advance width vector goes from the current character s pen position to the next character s pen position. The left side bearing goes from the current character s pen position to the upper-left corner of the bitmap, no matter what transformation you are using.  bitMapInfo The bitmap returned by the fs_ContourScan routine. The bitmap structure consists of a pointer to the base address of the bitmap, a short integer that specifies the number of bytes of data per row of the bitmap, and four short integers that specify the corners of the bitmap in the following order: top, left, bottom, right. outlineCacheSize The amount of memory the Font Scaler needs for an outline cache. When you execute the fs_SizeOfOutlines routine, the Font Scaler places the amount of memory it needs in the outlineCacheSize field. You must allocate the memory and place a pointer to it in the *outlineCache field of the fs_GlyphInputType record before you call the fs_SaveOutlines routine. outlinesExists A Boolean value that indicates whether outlines exist for this glyph. If True (nonzero), outlines exist. If False (0), outlines do not exist. An example of a glyph for which no outlines exist is the space character. This field is returned by the fs_ContourGridFit and fs_ContourNoGridFit routines. numberOfContours The total number of contours that make up the outline of the glyph. This number is returned by the fs_ContourGridFit and fs_ContourNoGridFit routines. *xPtr A pointer to an array of fixed numbers that are in 26.6 format (that is, the first 26 bits represent the value before the decimal, and the last 6 bits represent the value after the decimal). These numbers are the x-coordinate values of the glyph s outline as returned by the fs_ContourGridFit and fs_ContourNoGridFit routines. *yPtr A pointer to an array of fixed numbers that are in 26.6 format. These numbers are the y-coordinate values of the glyph s outline as returned by the fs_ContourGridFit and fs_ContourNoGridFit routines. *startPtr A pointer to an array of short integers (16 bits) that identify the points that start the contours that make up the glyph outline. This data is returned by the fs_ContourGridFit and fs_ContourNoGridFit routines. *endPtr A pointer to an array of short integers (16 bits) that identify the points that end the contours that make up the glyph outline. This data is returned by the fs_ContourGridFit and fs_ContourNoGridFit routines. *onCurve A pointer to an array of unsigned characters (8 bits). The least significant bit of each character serves as a Boolean value. There are as many elements in this array as there are in the xPtr or yPtr arrays. If the least significant bit in a one-byte element in this array is 1, then the point specified by the corresponding elements in the xPtr and yPtr arrays lies on the curve. If a least significant bit is 0, then the corresponding point does not lie on the curve. The other bits in each byte are reserved. The *onCurve data is returned by the fs_ContourGridFit and fs_ContourNoGridFit routines. *scaledCVT A pointer to an array of fixed numbers that are in 26.6 format. The Font Scaler scales the values in the controlValue table in the sfnt data structure to the point size that you specify and returns the values in the scaledCVT array when you specify a trace function and execute the fs_NewTransformation routine.  If you have not specified a trace function (that is, if the traceFunc field in the fs_GlyphInputType record is 0), then the Font Scaler fs_NewTransformation routine does not fill in the scaledCVT array. The Graphics State The Font Scaler uses the local graphics state and the global graphics state to determine how to interpret certain instructions. The values of the variables defined in the local graphics state are valid only for the character with which they are associated; the variables defined in the global graphics state are valid for all characters in a font. The Font Scaler initializes the values in the local graphics state when it executes the fs_ContourGridFit routine. If you have specified a nonzero pointer to a trace function, the Font Scaler initializes the values in the global graphics state when it executes the fs_NewTransformation routine. If you have disabled the trace function, the Font Scaler initializes these values the first time it executes the fs_ContourGridFit routine after executing the fs_NewTransformation routine. The fnt_LocalGraphicStateType Data Structure The local graphics state is contained in the fnt_LocalGraphicStateType data strucure, which is defined as follows: typedef struct fnt_LocalGraphicStateType { fnt_ElementType *CE0, *CE1, *CE2;   /* The character element pointers */ VECTOR proj;                        /* Projection Vector */ VECTOR free;                        /* Freedom Vector */ VECTOR oldProj;                     /* Old Projection Vector */ F26Dot6 *stackPointer; uint8 *insPtr;                      /* Pointer to the instruction we are about to execute */ fnt_ElementType *elements; fnt_GlobalGraphicStateType *globalGS; FntTraceFunc TraceFunc; int32 Pt0, Pt1, Pt2;           /* The internal reference points */ int16 roundToGrid; int32 loop;                         /* The loop variable */ uint8 opCode;                       /* The instruction we are executing */ uint8 padByte; int16 padWord; /* Above is exported to client in FontScaler.h */ VECTORTYPE pfProj; /* = pvx * fvx + pvy * fvy */ FntMoveFunc MovePoint; FntProject Project; FntProject OldProject; InterpreterFunc Interpreter; #ifdef FSCFG_REENTRANT F26Dot6 (*GetCVTEntry) (struct fnt_LocalGraphicStateType*,int32); F26Dot6 (*GetSingleWidth) (struct fnt_LocalGraphicStateType*); #else  F26Dot6 (*GetCVTEntry) (int32 n); F26Dot6 (*GetSingleWidth) (void); #endif  FntMoveFunc ChangeCvt; Fixed       cvtDiagonalStretch; int16       MIRPCode;               /* for fast or slow MIRP's */ ErrorCode   ercReturn;              /* NO_ERR unless illegal instruction */ uint8       *pbyEndInst;            /* one past last instruction */ } fnt_LocalGraphicStateType; The fields in the fnt_LocalGraphicStateType data strucure have the following significance: *CE0, *CE1, *CE2 Pointers to character elements. There are two character elements, defined by the fnt_ElementType data structure shown at the beginning of this section. The fields in this data structure are described in the following section  The fnt_ElementType Data Structure.   The first character element (character element 0) contains points that are not included in the glyph definition, but that can be used by certain instructions for reference or for temporary storage. The second character element (character element 1) contains the points in the glyph definition. Each of the character element pointers (*CE0, *CE1, and *CE2) can point to either of the two character elements. Use the SCE0, SCE1, SCE2, and SCES instructions to set the character element pointers. Every instruction that acts on points uses one or more of the character element pointers to determine whether the points are in character element 0 or character element 1. The x and y components of a unit vector that points in the direction of the projection vector. The value used by the interpreter for the distance between two points is actually the projection of that distance along the projection vector. For example, if the projection vector is parallel to the x axis and a point is moved a distance of 1 pixel in a direction 60_ to the x axis, the distance along the projection vector is 0.5 pixel. Use the SVTCA, SPVTCA, SPVTL, and WPV instructions to set the projection vector. The x and y components of a unit vector that points in the direction of the freedom vector. Points are moved only in the direction of the freedom vector. Use the SVTCA, SFVTCA, SFVTL, SFVTPV, and WFV instructions to set the freedom vector. oldProj The x and y components of a unit vector that points in the direction of the old projection vector. *stackPointer The pointer to the next available location on the interpreter s private stack. For example, if the last byte pushed on the stack is at location stackBase + 3, then the value of *stackPointer is stackBase + 4. Each element on the stack is a long word (32 bits). *insPtr Pointer to the next instruction to be executed. *elements Pointer to character element 0. You can use this field to determine to which character element *CE0, *CE1, or *CE2 is pointing. For example, if *CE1 is equal to *elements, then *CE1 is pointing to character element 0; if they are not equal, then *CE1 is pointing to character element 1. *globalGS Pointer to the global graphics state. The global graphics state is described in the section  The fnt_GlobalGraphicStateType Data Structure,  later in this document. Pointer to a fnt_ParmeterBlock. pfProj Result of pvx*fvx+pvy*fvy. MovePoint Function that moves a point. *Project Function that returns F26Dot6 projection vector value. *OldProject Function that returns F26Dot6 projection vector value. Related to the old projection vector. Interpreter Interpreter function. TraceFunc TraceFunc. *GetCVTEntry Function that returns F26Dot6 CVTEntry value. *GetSingleWidth Function that returns F26Dot6 SingleWidth value. Array of 12 int pointers. Indicates which of the available rounding rules is to be used by the interpreter. Use the RTG, RDTG, RUTG, RTHG, RTDG, and ROFF instructions to set the rounding rule, as follows: The loop variable. Certain instructions automatically repeat the number of times specified by the loop variable. (If the loop variable is set to either 0 or 1, the instruction executes one time.)  Use the LLOOP instruction to set the loop variable. Pt0, Pt1, Pt2 Reference points used by certain instructions. The points referred to here are the sequence numbers of the points used in the sfnt data structure to define the glyph. The Pt0, Pt1, and Pt2 fields are used by some instructions to help determine the effect of the instruction. For example, the SHP instruction shifts a point by the same amount that one of the reference points has been shifted. Use the SRP0, SRP1, and SRP2 instructions to set reference points. Several other instructions change the values of the reference points.  opCode The instruction we are executing. padByte *changeCVT A function to change the contents of a CVT. cvtDiagonalStretch Used for non-square aspect ratio handling of CVTs. MIRPCode Indicator for type of MIRP code to use. ercReturn Set to NO_ERR unless there has been an illegal instruction. pbyEndInst Used for error handling. The fnt_ElementType Data Structure The fnt_LocalGraphicStateType data structure contains pointers *CE0, *CE1, *CE2, and *elements, each of which points to one or another of two data structures known as character elements. A character element is of type fnt_ElementType, defined as follows: typedef struct { F26Dot6 *x; /* The Points the Interpreter modifies */ F26Dot6 *y; /* The Points the Interpreter modifies */ F26Dot6 *ox; /* Old Points */ F26Dot6 *oy; /* Old Points */ F26Dot6 *oox; /* Old Unscaled Points, really ints */ F26Dot6 *ooy; /* Old Unscaled Points, really ints */ uint8   *onCurve; /* indicates if a point is on or off the curve */ int16   *sp; /* Start points */ int16   *ep; /* End points */ uint8   *f; /* Internal flags, one byte for every point */ int16   nc; /* Number of contours */ } fnt_ElementType; The fields in the fnt_ElementType data structure have the following significance: *x, *y Pointers to arrays that contain the current x and y coordinates for the points that define the outline. These coordinates include scaling and the effects of all the instructions the interpreter has executed so far.  *ox, *oy Pointers to arrays that contain old x and y coordinates for the points that define the outline. These coordinates include scaling but do not include the effects of any instructions.  *oox, *ooy Pointers to arrays that contain the original x and y coordinates for the points that define the outline. These coordinates do not include scaling or the effects of any instructions.  *onCurve A pointer to an array of unsigned characters (that is, bytes). The least significant bit of each byte serves as a Boolean value. There are as many elements in this array as there are in the x or y arrays. If the least significant bit in a one-byte element in this array is 1, then the point specified by the corresponding elements in the x and y arrays lies on the curve. If a least significant bit is 0, then the corresponding point does not lie on the curve. The other bits in each byte are reserved.  The total number of contours that make up the outline of the glyph.  A pointer to an array of short integers (16 bits) that identify the points that start the contours that make up the glyph outline. A pointer to an array of short integers (16 bits) that identify the points that end the contours that make up the glyph outline.  A pointer to an array of unsigned characters (that is, bytes). The least significant bit of each byte (bit 0) is a flag that indicates whether a point has been touched in the x direction; the next-least significant bit (bit 1) indicates whether a point has been touched in the y direction. If the bit is 1, then the point with the corresponding position in the x and y arrays has been touched. (A point is said to have been touched if an instruction acted on that point, whether or not the point was actually moved by the instruction.)  The other bits in each byte are reserved.  The IUP instruction acts only on untouched points, and only in the direction (x or y) specified by a Boolean parameter that you pass to the IUP instruction. The fnt_GlobalGraphicStateType Data Structure The global graphics state is contained in the fnt_GlobalGraphicStateType data structure, which is defined as follows: typedef struct fnt_GlobalGraphicStateType { F26Dot6* stackBase; /* the stack area */ F26Dot6* store; /* the storage area */ F26Dot6* controlValueTable; /* the control value table */ uint16  pixelsPerEm; /* number of pixels per em as an integer */ uint16  pointSize; /* the requested point size as an integer */ Fixed   fpem; /* fractional pixels per em    <3> */ F26Dot6 engine[4]; /* Engine Characteristics */ fnt_ParameterBlock defaultParBlock; /* variables settable by TT instructions */ fnt_ParameterBlock localParBlock; /* Only the above is exported to Client through FontScaler.h */ /* VARIABLES NOT DIRECTLY MANIPULABLE BY TT INSTRUCTIONS  */ fnt_funcDef*    funcDef; /* function Definitions identifiers */ fnt_instrDef*   instrDef; /* instruction Definitions identifiers */ GlobalGSScaleFunc ScaleFuncXBase; GlobalGSScaleFunc ScaleFuncYBase; GlobalGSScaleFunc ScaleFuncX; GlobalGSScaleFunc ScaleFuncY; GlobalGSScaleFunc ScaleFuncCVT; fnt_pgmList     pgmList[MAXPREPROGRAMS]; /* each program ptr is in here */ /* These are parameters used by the call back function */ fnt_ScaleRecord   scaleXBase; fnt_ScaleRecord   scaleYBase; fnt_ScaleRecord   scaleX; fnt_ScaleRecord   scaleY; fnt_ScaleRecord   scaleCVT; Fixed           cvtStretchX; Fixed           cvtStretchY; int8            identityTransformation;  /* true/false  (does not mean identity from a global sense) */ int8            non90DegreeTransformation; /* bit 0 is 1 if non-90 degree, bit 1 is 1 if x scale doesn't equal y scale */ Fixed           xStretch; /* Tweaking for glyphs under transformational stress <4> */ Fixed           yStretch; /* Tweaking for glyphs under transformational stress <4> */ int8            init; /* executing preprogram ?? */ /* !!! Should not be uint8, instead fnt_ProgramIndex */ uint8           pgmIndex; /* which preprogram is current */ int32           instrDefCount; /* number of currently defined IDefs */ uint8 bSameStretch; uint8 bCompositeGlyph; /* Flag that indicates composite glyph */ LocalMaxProfile *  maxp; uint16          cvtCount; Fixed           interpScalarX; /* scalar for instructable things */ Fixed           interpScalarY; /* scalar for instructable things */ Fixed           fxMetricScalarX; /* scalar for metric things */ Fixed           fxMetricScalarY; /* scalar for metric things */ /* int16  pad2; */ } fnt_GlobalGraphicStateType; The fields in the fnt_GlobalGraphicStateType data structure have the following significance: *function Pointer to the instruction definition area *stackBase Pointer to the stack area *store Pointer to a storage area that you can use for any purpose you like. You set the number of storage locations with the maxStorage field of the maxProfile table. Use the WS instruction to set the value of a storage location and the RS instruction to read a value. *funcDef A ptr to an array of fnt_FuncDef structs. Function definitions identifiers. *instrDef A ptr to an array of fnt_instrDef. Instruction definitions identifiers. *controlValueTable Pointer to the control value table. When you execute the fs_NewTransformation routine, the interpreter scales the values in the control value table to the point size that you specify. Use the WCVT and WCVTFOD instructions to set values in the control value table, and the RCVT instruction to read values in the control value table. *pgmList[ ] Array of program pointers. *ScaleFunc The callback function to do scaling. defaultParBlock fnt_ParameterBlock. Variables settable by TT instructions. localParBlock fnt_ParameterBlock. pixelsPerEm The resolution in pixels per em currently being used by the Font Scaler when scaling a glyph. pointSize The point size you specified, rounded to the closest integer. The pointSize field is used by the MPS instruction. ppemDot6 Fractional pixels per em. pointSizeDot6 Fractional user point size. engine[4] An array used by the Font Scaler to represent the pixel diameter for internal purposes. fixedScale Fixed scaling factor. nScale Numerator required to scale points to the correct size. dScale Denominator required to scale points to the correct size. shift log2 of dScale. identityTransformation Transform is identity true/false (does not mean identity from a global sense). non90DegreeTransformation Rotation component of transform is 0, 90, 180, or 270. xStretch Tweaking for glyphs under transformational stress. yStretch Tweaking for glyphs under transformational stress. *anglePoint Pointer to an fnt_FractPoint. Part of fnt_AngleInfo. *angleDistance Pointer to an int16. The other part of fnt_AngleInfo. Indicates whether the preprogram is being executed. This field is set to True (nonzero) while the preprogram is executing. pgmIndex Indicates which preprogram is currently executing. Currently, there are two possible preprograms: the Font program, which is executed only once, when the font is first used, and the Control Value Program which is executed whenever the font, point size or transformation matrix change. instrDefCount Count of IDEFs defined for this font. An IDEF is an instruction redefinition usually defined in the font program table. *maxp Pointer to MaxProfile data for font. cvtCount Number of CVT entries. bSameStretch Same stretch factor in x and y directions. bCompositeGlyph Flag that indicates this is a composite glyph. interpScalarX Scalar for instructable things in x. interpScalarY Scalar for instructable things in y. fxMetricScalarX Scalar for metric things in x. fxMetricScalarY Scalar for metric things in Y. Font Scaler Routines This section describes the routines that make up the client interface to the Font Scaler. For information about how to call these routines and the sequence in which you should call them, see the section  Using the Font Scaler Client Interface,  earlier in this document. The fields in the fs_GlyphInputType and fs_GlyphInfoType records are described in the section  Font Scaler Data Structures,  earlier in this document. The Font Scaler does not allocate the memory it needs to execute these routines. When the Font Scaler needs memory, it specifies the amount of memory, in bytes, in one or more elements of the memorySizes vector in the fs_GlyphInfoType record. You must allocate the memory and place pointers to the memory in the corresponding elements of the memoryBases vector in the fs_GlyphInputType record. Except for the OpenFonts and CloseFonts routines, no Font Scaler routine allocates memory, deallocates memory, or moves objects in memory. If you move any of the blocks of memory that you have allocated, be sure to update the pointers in the memoryBases vector before your next call to the Font Scaler. Every Font Scaler routine returns an error code as the function result. You must check the error after every call to the Font Scaler, and respond appropriately if the error is nonzero. The error codes are described in the section  Font Scaler Errors,  later in this document. fs_OpenFonts Description Opens the Font Scaler. Fields of the fs_GlyphInputType record to initialize before routine None necessary. Fields of the fs_GlyphInfoType record returned by routine memorySizes. The elements memorySizes[0..2] indicate the amount of memory needed. When to call Before any other Font Scaler routine. This routine does not ever have to be called again, unless the fs_CloseFonts routine is executed by your program. fs_Initialize Description Initializes the Font Scaler. Fields of the fs_GlyphInputType record to initialize before routine The memoryBases[0..2] fields must contain pointers to the memory blocks that were requested by the Font Scaler. The sizes of these memory blocks were specified by the memorySizes[0..2] fields of the fs_GlyphInfoType record after the fs_OpenFonts routine. Fields of the fs_GlyphInfoType record returned by routine None applicable. When to call After the fs_OpenFonts routine and before any other Font Scaler routine. This routine does not ever have to be called again, unless the fs_CloseFonts routine is executed by your program. fs_NewSfnt Description Indicates that there is a new sfnt data structure, and provides a pointer to the function that the Font Scaler uses to read data from the sfnt data structure. Specifies the amount of memory needed by the Font Scaler. Fields of the fs_GlyphInputType record to initialize before routine memoryBases, sfntDiriectory, GetSfntFunc, ReleaseSfntFrag, ClientID, platformID, specificID.  Fields of the fs_GlyphInfoType record returned by routine memorySizes.  The elements memorySizes[3] and memorySizes[4] indicate the amount of memory needed. When to call After the fs_Initialize routine and before the fs_NewTransformation routine. You must execute this routine each time you change to a different sfnt data structure or change the contents of the maxProfile table in the sfnt data structure.  fs_NewTransformation Description Informs the Font Scaler about the point size and device resolution; provides a pointer to your trace function (if any). See the description of the traceFunc field in the section  Font Scaler Data Structures  for information about the trace function. Fields of the fs_GlyphInputType record to initialize before routine xResolution, yResolution, pointsize, pixelDiameter, transformMatrix, and traceFunc. Set the traceFunc field to 0 if you do not want to activate the trace function.  Fields of the fs_GlyphInfoType record returned by routine scaledCVT. If you set the traceFunc field to a nonzero value, then the scaledCVT field contains the values from the controlValue table of the sfnt data structure scaled to the point size you specified. When to call After the fs_NewSfnt routine and before the fs_NewGlyph routine. You must execute this routine each time you change the point size, the resolution of the display device, the pixel diameter, or the transformation matrix. fs_NewGlyph Description Computes the glyph index value from the character code.  Fields of the fs_GlyphInputType record to initialize before routine characterCode. If you specify 0xFFFF for the character code, you must also initialize the glyphIndex field. In this case, the Font Scaler uses the glyph index value you specify rather than the character code. Fields of the fs_GlyphInfoType record returned by routine glyphIndex, numberOfBytesTaken When to call After the fs_NewTransformation routine and before the fs_GetAdvanceWidth, fs_ContourGridFit, or fs_ContourNoGridFit routines. You must call this routine each time you want to display a new glyph, or each time you change a glyph description in the sfnt data structure and want to recalculate the outline.  fs_GetAdvanceWidth Description Causes the Font Scaler to extract advance width from the sfnt data structure. Fields of the fs_GlyphInputType record to initialize before routine None. Fields of the fs_GlyphInfoType record returned by routine metricInfo. The first element of the metricInfo field contains the advance width. When to call Instead of the fs_ContourGridFit routine or the fs_ContourNoGridFit routine when you only want to know the width of the glyph and do not want to display it. (Note that widths returned by fs_GetAdvanceWidth do not take into account any hints that may change the advance width. fs_ContourGridFit should be called for that case.) fs_GetScaledAdvanceWidths Description Returns the hinted advance widths for the range of glyphs specified. The routine takes advantage of the hdmx and LTSH tables if they are present in the font file. Prototype FS_PUBLIC FS_ENTRY FS_ENTRY_PROTO fs_GetScaledAdvanceWidths (     fs_GlyphInputType * inputPtr,     uint16              usFirstGlyph,     uint16              usLastGlyph,     int16 *             psGlyphWidths); Fields of the fs_GlyphInputType record to initialize before routine MemoryBases[0]. Input Parameters inputPtr   Pointer to the Glyph Input Type used by other client interface calls; usFirstGlyph   Glyph index of the first glyph to return the hinted advance width; usLastGlyph   Glyph index of the last glyph to return the hinted advance width; pfxGlyphWidths   Pointer to the table to contain first glyph through last glyph advance widths. Returned Values pfxGlyphWidths   This array contains the fixed point representation of the hinted widths. Note that each glyph contains both an x and y position. When to call Anytime after the fs_NewTransformation routine. Notes This routine is different from other client interface routines, and should be considered more of a helper routine than a client interface call. The memory for the pfxGlyphWidths array must be allocated by the client. The glyph range is inclusive, returning both usFirstGlyph and usLastGlyph widths. usLastGlyph must not be less than usFirstGlyph. The possible errors returned by this routine would be consistent with the fs_ContourGridFit routine. fs_ContourGridFit Description Causes the Font Scaler to execute the instructions for the glyph and convert the glyph data into an outline. Compare this routine with the fs_ContourNoGridFit routine. Fields of the fs_GlyphInputType record to initialize before routine Fields of the fs_GlyphInfoType record returned by routine xPtr, yPtr, startPtr, endPtr, onCurve, numberOfContours, scaledCVT, outlinesExist. The fields xPtr, yPtr, startPtr, endPtr, onCurve, and numberOfContours contain the outline data. When to call After the fs_NewGlyph routine and before the fs_FindBitMapSize routine (if you want to prepare a bitmap). fs_ContourNoGridFit Description Causes the Font Scaler to convert the glyph description into an outline without executing the instructions. Compare this routine with the fs_ContourGridFit routine. Fields of the fs_GlyphInputType record to initialize before routine Fields of the fs_GlyphInfoType record returned by routine xPtr, yPtr, startPtr, endPtr, onCurve, numberOfContours scaledCVT, outlinesExist. The fields xPtr, yPtr, startPtr, endPtr, onCurve, and numberOfContours contain the outline data. When to call When you want to see what a glyph looks like when the instructions are not executed; after the fs_NewGlyph routine and before the fs_FindBitMapSize routine (if you want to prepare a bitmap). fs_ContourGrayScan Description Converts an outline into a gray scale bitmap. Fields of the fs_GlyphInputType record to initialize before routine The fields memoryBases[5], memoryBases[6], memoryBases[7], and memoryBases[8] must contain pointers to the memory blocks whose size is greater than or equal to the values returned by fs_FindGraySize or fs_FindGrayBandingSize. No pointers are required for memoryBases whose size is zero. The fields param.scan.topClip and param.scan.bottomClip define the range of lines to convert. Setting topClip to bitMapInfo.bounds.bottom and bottomClip to bitMapInfo.bounds.top (in accordance with the upside down convention of bitmap bounds) will scan convert the entire glyph. If topClip - bottomClip is smaller than the entire glyph, then a single band will be scan converted. The field topClip is the scan line above the top line of the resulting bitmap; bottomClip is the bottom scan line of the bitmap. Fields of the fs_GlyphInfoType record returned by routine The bitMapInfo structure contains a pointer to the gray scale bitmap, the number of bytes per row, and the bitmap bounds. The gray scale bitmap is an array of bytes, each containing the magnified pixel count of each pixel. The beginning of each scan line is double word (32 bits) aligned. When to call When ready to create a bitmap, after the last call of fs_FindGraySize, fs_RestoreOutlines, or fs_FindGrayBandingSize. Notes As with fs_ContourScan, dropout control may be disabled by returning a Null pointer for memoryBases[7]. Values of topClip and bottomClip outside the bounding box will be trimmed to the bounding box. Any illegal combination of topClip and bottomClip (such as topClip = bottomClip, or topClip < bottomClip) will cause the entire glyph to be scan converted. fs_FindBitMapSize Description Determines the amount of memory needed by the Font Scaler to create a bitmap of the glyph. Fields of the fs_GlyphInputType record to initialize before routine Fields of the fs_GlyphInfoType record returned by routine metricInfo, memorySizes. The element metricInfo[1] contains the advance width. The element metricInfo[2] contains the left side bearing. The elements memorySizes[5], memorySizes[6] and memorySizes[7] indicate the amount of memory needed. When to call After the fs_ContourGridFit or fs_ContourNoGridFit routine and before the fs_ContourScan routine.  fs_FindBandingSize Description Determines the amount of memory needed by the Font Scaler to scan convert a glyph bitmap using banding. Fields of the fs_GlyphInputType record to initialize before routine The field param.band.usBandType must be set to either FS_BANDINGSMALL or FS_BANDINGFAST (constants defined in fscaler.h). The field param.band.usBandWidth must contain the size in scanlines of the maximum band to be rasterized. If an outline has been cached, then the field param.band.outlineCache must contain a pointer to the current outline cache. If no outline has been cached it must be set to NULL. Fields of the fs_GlyphInfoType record returned by routine The elements memorySizes[5], memorySizes[6], and memorySizes[7] indicate the amount of memory needed to scan convert one band of the bitmap. When to call After the fs_FindBitMapSize routing and before the first call to fs_ContourScan. This routing may be called just prior to scan conversion to setup the Banding type and calculate new memory requirements. If no banding is being done then this call is not needed. Notes fs_FindBandingSize enables two new banding schemes. FS_BANDINGSMALL allows the client to rasterize a glyph with the minimum amount of workspace memory. It returns both memorySizes[5] and memorySizes[6], scaled down to the size of the band. FS_BANDINGSMALL does not work with dropout control on, so memorySizes[7] is always returned as zero. A client attempting to rasterize a large glyph in limited memory may make additional calls to fs_FindBandingSize with progressively smaller bands if the memory requirements from previous calls were still too great. When a band size small enough to use has been found, that size band (or smaller) should be used to rasterize the entire glyph. It should be understood that there is a substantial overhead per call to fs_ContourScan, so for performance reasons the band size should be kept as large as possible. FS_BANDINGFAST allows the client to rasterize a glyph more efficiently by using the full allocation of memoryBases[6] and memoryBases[7] to save the outline rendering data between banding calls. FS_BANDINGFAST also allows dropout control of any kind to work correctly. Dropout control was disabled during banding in the old rasterizer because the algorithm required access to the bitmap outside of the band. The new routine reserves extra work space in memoryBases[5] and memoryBases[7] for this requirement when dropout control is enabled. For exact pixel for pixel accuracy from banding with dropout control, the client must call the rasterizer with a series of consecutive non-overlapping bands from the top of the glyph to the bottom of the glyph (in the upside-down notation of the bounds structure, that s from bitMapInfo.bounds.bottom to bitMapInfo.bounds.top). The old banding scheme, whereby the client called fs_FindBitMapSize and then did its own calculation of memorySizes[5], is still supported. It still requires the full allocation of memoryBases[6], and it still forces dropout control off, so memoryBases[7] isn t used. The somewhat undocumented override feature, allowing a client to disable dropout control (and save some memory) by forcing memoryBases[7] equal to Null prior to the fs_ContourScan call, is still supported. fs_FindGrayBandingSize Description Determines the amount of memory needed to create a gray scale bitmap using banding. Fields of the fs_GlyphInputType record to initialize before routine The field param.band.usBandType must be set to either FS_BANDINGSMALL or FS_BANDINGFAST (constants defined in fscaler.h). The field param.band.usBandWidth must contain the size in scanlines of the maximum band to be rasterized. If an outline has been cached, then the field param.band.outlineCache must contain a pointer to the current outline cache. If no outline has been cached, it must be set to NULL. Fields of the fs_GlyphInfoType record returned by routine The elements memorySizes[5], memorySizes[6], memorySizes[7], and memorySizes[8] indicate the amount of memory needed to scan convert one band of the bitmap. When to call After fs_FindGraySize and before the first call to fs_ContourGrayScan. This routine is called just prior to scan conversion to set-up the banding type and calculate new memory requirements. If no banding is being done then, this call is not needed. Notes fs_FindGrayBandingSize used two banding schemes. FS_BANDINGSMALL allows the client to rasterize a glyph with the minimum amount of workspace memory. It returns memorySizes[5], memorySizes[6], and memorySizes[8], scaled down to the size of the band. FS_BANDINGSMALL does not work with dropout control on, so memorySizes[7] is always returned as zero. A client attempting to rasterize a large glyph in limited memory may make additional calls to fs_FindGrayBandingSize with progressively smaller bands if the memory requirements from previous calls were still too great. When a band size small enough to use has been found, that size band (or smaller) should be used to rasterize the entire glyph. It should be understood that there is a substantial overhead per call to fs_ContourGrayScan, so for performance reasons the band size should be kept as large as possible. FS_BANDINGFAST allows the client to rasterize a glyph more efficiently by using the full allocation of memoryBases[6] and memoryBases[7] to save the outline rendering data between banding calls. FS_BANDINGFAST also allows dropout control of any kind to work correctly. The routine reserves extra work space in memoryBases[7] and memoryBases[8] for this requirement when dropout control is enabled. For exact accuracy from banding with dropout control, the client must call the rasterizer with a series of consecutive non-overlapping bands from the top of the glyph to the bottom of the glyph (in the upside-down notation of the bounds structure, that s from bitMapInfo.bounds.bottom to bitMapInfo.bounds.top).  banding scheme is not supported for gray scale, since the client has no easy way to calculate the size requirements for memoryBases[8]. fs_FindGraySize Description Determines the amount of memory needed to create a gray scale bitmap. Fields of the fs_GlyphInputType record to initialize before routine The field param.gray.usOverScale contains the factor used to magnify the outline prior to scan conversion. The number of gray levels reported in the bitmap will be usOverScale2 + 1. The allowable values for this parameter will be indicated in the constant FS_GRAY_VALUE_MASK. The field param.gray.bMatchBBox is a boolean value which is set True to force the gray scale bounding box to match the bounding box of monochrome scan conversion. Setting this value to True has the benefit of guaranteeing identical bounding boxes at the cost of shaving off gray pixels at the extremes of the glyph. Fields of the fs_GlyphInfoType record returned by routine The elements memorySizes[5], memorySizes[6], memorySizes[7], and memorySizes[8] indicate the amount of memory needed to create the gray scale bitmap. MemoryBases[5] is used for the gray scale bitmap, memoryBases[6] and memoryBases[7] for workspace, and memoryBases[8] for the magnified bitmap. When to call fs_FindGraySize is called as an alternative to fs_FindBitMapSize. It should be called after fs_ContourGridFit of fs_ContourNoGridFit and before fs_SizeOfOutlines, fs_FindGrayBandingSize, or fs_ContourGrayScan. Notes Gray scaling is done by scan converting a magnified glyph outline and counting the number of magnified pixels which are turned on in each of the original pixels. This count is returned by fs_ContourGrayScan as an array of bytes; one byte per pixel. The magnification factor (usOverScale) determines the number of gray levels reported. For example, if usOverScale = 2, the number of magnified pixels per original pixel is 4 (2 x 2), and the number of these that may be turned on is 0, 1, 2, 3, or 4. So each byte in the array will contain one of these five values. Similarly, a magnification of 4 will yield 17 different values, and a magnification of 8 will yield 65. For reasons of efficiency, the best values for usOverScale are powers of 2. The values 2, 4, and 8 appear to be reasonable choices, depending upon how many gray levels the client can display. The allowable values of usOverScale for any particular implementation of the TrueType rasterizer will be indicated by a bitmask constant: FS_GRAY_VALUE_MASK. If, for instance, the rasterizer supports usOverScale values of 2, 4, and 8, then FS_GRAY_VALUE_MASK will have ones in bit poisitions 2, 4, and 8, giving a value of: 00000000 10001010 b = 008Ah. Note that for this constant, bit position 1 is the least significant bit, and bit position 16 is the most significant bit. fs_SizeOfOutlines Description Determines the amount of memory needed by the Font Scaler to cache an outline. Fields of the fs_GlyphInputType record to initialize before routine None. Fields of the fs_GlyphInfoType record returned by routine outlineCacheSize. The field outlineCacheSize contains the amount of memory needed. When to call After the fs_ContourGridFit routine or the fs_ContourNoGridFit routine and before the fs_SaveOutlines routine when you want to cache an outline instead of immediately preparing a bitmap. fs_SaveOutlines Description Caches an outline; that is, stores the outline in memory for later retrieval. Fields of the fs_GlyphInputType record to initialize before routine The outlineCache field must contain a pointer to the memory block that was requested by the Font Scaler. The size of this memory block was specified by the outlineCacheSize field of the fs_GlyphInfoType record after the fs_SizeOfOutlines routine. Fields of the fs_GlyphInfoType record returned by routine When to call After the fs_SizeOfOutlines routine when you want to cache an outline. Use the fs_RestoreOutlines routine to recover a cached outline. fs_RestoreOutlines Description Recovers a cached outline so that it can be used for preparing a bitmap of a glyph. Fields of the fs_GlyphInputType record to initialize before routine The outlineCache field must contain a pointer to the memory block that you used when you cached the outline with the fs_SaveOutlines routine. Fields of the fs_GlyphInfoType record returned by routine memorySizes. The elements memorySizes[5],  memorySizes[6] and memorySizes[7] indicate the amount of memory needed. Additionally, these fields are returned: outlinesExist, glyphIndex, outlineCacheSize, metricInfo, numberOfContours, xPtr, yPtr, startPtr, endPtr, onCurve. When to call When you are ready to prepare a bitmap from a cached outline; after the fs_SaveOutlines routine. fs_ContourScan Description Causes the Font Scaler to convert the outline into a bitmap. Fields of the fs_GlyphInputType record to initialize before routine The fields memoryBases[5],  memoryBases[6] and memoryBases[7] must contain pointers to the memory blocks that were requested by the Font Scaler. The sizes of these memory blocks were specified by the memorySizes[5],  memorySizes[6] and memorySizes[7] fields of the fs_GlyphInfoType record after the fs_FindBitMapSize or fs_RestoreOutlines routines   The fields bottomClip and topClip must contain the bottom and top scan lines (in pixels) of the glyph to be processed. To process the entire glyph, set bottomClip equal to yMin and topClip equal to yMax as returned by the fs_FindBitMapSize routine.  Set the field ReleaseSfntFrag to 0 unless you want to replace the Font Scaler s scan converter with your own routine. Fields of the fs_GlyphInfoType record returned by routine bitMapInfo. The bitMapInfo field contains a pointer to the bitmap data, i.e. the number of bytes per row, and the corners coordinates of the bitmap. When to call When you are ready to prepare a bitmap, after the fs_FindBitMapSize or fs_RestoreOutlines routines. fs_CloseFonts Description Closes the Font Scaler. Fields of the fs_GlyphInputType record to initialize before routine Fields of the fs_GlyphInfoType record returned by routine When to call At the end of your program, after the last call to the Font Scaler. Font Scaler Errors Each Font Scaler client interface routine returns an error code both as the function result and as the value of the error field in the fs_GlyphInfoType record. If this error code is anything other than 0, you should display an error message for the user and quit. This section lists and describes the errors that you can receive.  Error Explanation NULL_KEY_ERR 0x1001 Memory Base () unexpectedly contains a Null pointer. NULL_INPUT_PTR_ERR 0x1002 InputPtr is unexpectedly Null. NULL_MEMORY_BASES_ERR 0x1003 MemoryBases in InputPtr is Null. VOID_FUNC_PTR_BASE_ERR 0x1004 No longer used. OUT_OFF_SEQUENCE_CALL_ERR 0x1005 Client Interface call made out of sequence. BAD_CLIENT_ID_ERR 0x1006 No longer used. NULL_SFNT_DIR_ERR 0x1007 sfnt Directory is null from client callback routine. NULL_SFNT_FRAG_PTR_ERR 0x1008 GetSfntFragmentPtr is Null in InputPtr. NULL_OUTPUT_PTR_ERR 0x1009 OutputPtr is unexpectedly Null. INVALID_GLYPH_INDEX 0x100A Glyph requested exceeds MaxProfile entry for glyph index. BAND_TOO_BIG_ERR 0x100B Band is larger than was specified in the fs_FindBandingSize call. Error Explanation fnt_execute UNDEFINED_INSTRUCTION_ERR 0x1101 An illegal instruction is part of the TrueType program, or, more likely, the program has run amok. TRASHED_MEM_ERR 0x1102 No longer used. fsg_CalculateBBox POINT_MIGRATION_ERR 0x1201 A scaled and hinted point is outside the maximum bounding box (absolute value greater than 2^15 pixels). sc_ScanChar BAD_START_POINT_ERR 0x1301 No longer used. SCAN_ERR 0x1302 No longer used. BAD_SCAN_KIND_ERR 0x1302 No longer used. SFNT DATA ERROR and errors in sfntaccs.c SFNT_DATA_ERR 0x1400 Inconsistent glyph bounding box data in sfnt. POINTS_DATA_ERR 0x1401 Number of points in glyph exceeds MaxProfile data. INSTRUCTION_SIZE_ERR 0x1402 No longer used. CONTOUR_DATA_ERR 0x1403 Number of contours in glyph exceeds MaxProfile data. GLYPH_INDEX_ERR 0x1404 No longer used. Error Explanation BAD_MAGIC_ERR 0x1405 Problem with sfnt data, Magic number in   table not found. OUT_OF_RANGE_SUBTABLE 0x1406 Requested PlatformId/SpecificID not found in cmap. UNKNOWN_COMPOSITE_VERSION 0x1407 Illegal composite indicator in glyph data. CLIENT_RETURNED_NULL 0x1408 Client callback routine returned Null. MISSING_SFNT_TABLE 0x1409 Required table in sfnt not found. UNKNOWN_CMAP_FORMAT 0x140A Unknown cmap format. BAD_MAXP_DATA 0x140B Incorrect MaxProfile entries for maxComponentElements and maxComponentDepth. Spline call errors BAD_CALL_ERR 0x1500 No longer used. TRASHED_OUTLINE_CACHE 0x1600 Invalid outline cache stamp indicates that outline cache has been corrupted. Gray scale errors BAD_GRAY_LEVEL_ERR 0x1701 Requested gray level is not supported by this version of the rasterizer. GRAY_SEQUENCE_ERR 0x1702 Grayscale call made out of sequence or in a disallowed combination with a non-grayscale call. GRAY_OLD_BANDING_ERR 0x1703 Grayscale doesn t work with   banding mode. Sample of a Routine That Uses the Client Interface /***********************  Parameters  **************************/ #define CHAR_CODE #define POINT_SIZE #define FILE_NAME "times.ttf" #define PLATFORM_ID #define ENCODING_ID /***********************  Imports  ****************************/ #include <stdio.h>                      /* Standard imports */ #include <stdlib.h> #include <string.h> #include <errno.h> #include <assert.h> #include "fscdefs.h"                    /* TrueType imports */ #include "sfnt.h" #include "fscaler.h" /******************  Definitions and Prototypes  **********************/ typedef struct /* Client Data for a single job */ fs_GlyphInputType in; /* Client interface input */ fs_GlyphInfoType out; /* Client interface output */ transMatrix mat; /* Client Matrix Transform */ } CLIENTDATA; static CLIENTDATA cd;                   /* We support ONE client at a time */ static void NewClientData (size_t, size_t); static void* CallbackGetSfntFragment (long, long, long); static void CallbackReleaseSfntFragment (void*); static void* MyMalloc (size_t cb); static void MyFree (void* pv); static int DumpBitmap (char*, short, short, short, short, short, short, FILE*); #define SIGN(a)         ((a)<0 ? -1 : 1) #define ABS(a)          ((a) < 0 ? -(a) : (a)) #define ROUND_FIXPT(fx) ( (short) ( SIGN(fx) * (ONEFIX/2+ABS(fx)) / ONEFIX ) ) #define CHAR_CODE #define POINT_SIZE #define FILE_NAME "times.ttf" /*************************  Main Routine  *****************************/ int main() FILE* pfi; int32 lCode; short xLeft,sAdvanceWidth,cx; static char szFontFile[] = FILE_NAME; pfi = fopen (szFontFile, "rb"); if  (pfi == NULL) perror (szFontFile); return EXIT_FAILURE; lCode = fs_OpenFonts (&cd.in,&cd.out); assert (lCode == 0); NewClientData (0,2); lCode = fs_Initialize (&cd.in,&cd.out); assert (lCode == 0); cd.in.clientID = (int32)(pfi); cd.in.param.newsfnt.platformID = PLATFORM_ID; cd.in.param.newsfnt.specificID = ENCODING_ID; cd.in.GetSfntFragmentPtr = CallbackGetSfntFragment; cd.in.ReleaseSfntFrag = CallbackReleaseSfntFragment; cd.in.sfntDirectory = NULL; lCode = fs_NewSfnt (&cd.in, &cd.out); assert (lCode == 0); NewClientData (3,4); cd.mat.transform[0][0] = ONEFIX;    /* identity transform */ cd.mat.transform[0][1] = 0; cd.mat.transform[0][2] = 0; cd.mat.transform[1][0] = 0; cd.mat.transform[1][1] = ONEFIX; cd.mat.transform[1][2] = 0; cd.mat.transform[2][0] = 0; cd.mat.transform[2][1] = 0; cd.mat.transform[2][2] = ONEFIX; cd.in.param.newtrans.pointSize = (Fixed)(POINT_SIZE) << 16; cd.in.param.newtrans.xResolution = 72;              /* 1 pt = 1 ppem */ cd.in.param.newtrans.yResolution = 72; cd.in.param.newtrans.pixelDiameter = FIXEDSQRT2; cd.in.param.newtrans.transformMatrix = &cd.mat;    cd.in.param.newtrans.traceFunc = NULL; lCode = fs_NewTransformation (&cd.in,&cd.out); assert (lCode == 0); cd.in.param.newglyph.characterCode = CHAR_CODE; cd.in.param.newglyph.glyphIndex = 0; lCode = fs_NewGlyph (&cd.in,&cd.out); assert (lCode == 0); cd.in.param.gridfit.styleFunc = NULL; cd.in.param.gridfit.traceFunc = NULL; lCode = fs_ContourGridFit (&cd.in,&cd.out); assert (lCode == 0); lCode = fs_FindBitMapSize (&cd.in,&cd.out); assert (lCode == 0); NewClientData (5,7); xLeft =  ROUND_FIXPT(cd.out.metricInfo.devLeftSideBearing.x); sAdvanceWidth = ROUND_FIXPT(cd.out.metricInfo.devAdvanceWidth.x); cd.in.param.scan.bottomClip = cd.out.bitMapInfo.bounds.top; cd.in.param.scan.topClip = cd.out.bitMapInfo.bounds.bottom; cd.in.param.scan.outlineCache = NULL; lCode = fs_ContourScan (&cd.in,&cd.out); assert (lCode == 0); cx = cd.out.bitMapInfo.bounds.right - cd.out.bitMapInfo.bounds.left; DumpBitmap ((char*)cd.out.bitMapInfo.baseAddr,  xLeft, cd.out.bitMapInfo.bounds.bottom, (short)(xLeft + cx), cd.out.bitMapInfo.bounds.top, cd.out.bitMapInfo.rowBytes, sAdvanceWidth, stdout lCode = fs_CloseFonts (&cd.in,&cd.out); assert (lCode == 0); fclose (pfi); printf ("%s: Done\n", szFontFile); return EXIT_SUCCESS; /***********************  Memory Management  **************************/ NewClientData(): Call this function to allocate data in  the memoryBases[] rasterizer input array based on sizes found in the memorySizes[] rasterizer output array. static void NewClientData (size_t iLo, size_t iHi) size_t i, cbBuf; for (i=iLo;  i<=iHi;  i++) if  (cd.out.memorySizes[i] == 0) cd.in.memoryBases[i] = NULL; cbBuf = (size_t) cd.out.memorySizes[i]; assert ((FS_MEMORY_SIZE)cbBuf == cd.out.memorySizes[i]); cd.in.memoryBases[i] = MyMalloc (cbBuf); assert (cd.in.memoryBases[i] != NULL); static void* CallbackGetSfntFragment (long lClient, long lOff, long lSize) FILE* pfi = (FILE*) lClient; void* pvBuf; if  ((long)(size_t)lSize != lSize) return NULL; if  (fseek (pfi,lOff,SEEK_SET)) return NULL; pvBuf = MyMalloc ((size_t)lSize); if  (pvBuf == NULL) return NULL; if  (fread (pvBuf, 1, (size_t)lSize, pfi) != (size_t)lSize) MyFree (pvBuf); return NULL; return pvBuf; static void CallbackReleaseSfntFragment (void* pv) MyFree (pv); static void* MyMalloc (size_t cb) if  (cb == 0) return NULL; return malloc (cb); static void MyFree (void* pv) free (pv); /************************ Output Routines  ****************************/ static void DumpBinaryRaster (char*, unsigned short, FILE*); static void DumpBinaryShort (short, FILE*); static void DumpBinaryLong (long, FILE*); static void DumpPixels (FILE*, char*, unsigned short); static void DumpSpaces (FILE*, short); static void PutNewLine (FILE*); DumpBitmap(): Writes rasterizer output to the indicated file static int DumpBitmap (char* pchBits, /* The bitmap */ short xLeft, short yTop, short xRight, short yBottom, /* BoundBox */ short cbRaster, /* # bytes per row */ short sAdvWidth, /* integral advance width */ FILE* pfiOut /* Output file */ unsigned short i,cxWidth,cxBlack,cyBlack; short y,xRightSideBearing; unsigned short cxAdvWidth; cxBlack = xRight - xLeft; cyBlack = yTop - yBottom; fprintf (pfiOut, "\r\n[%hd %hd %hd %hd] %hd\r\n",  xLeft,yTop,xRight,yBottom,sAdvWidth cxAdvWidth = (unsigned short) (sAdvWidth); xRightSideBearing = cxAdvWidth - (xLeft + cxBlack); for (i=0;  i<cyBlack;  i++, pchBits+=cbRaster) DumpSpaces (pfiOut, xLeft); DumpPixels (pfiOut, pchBits, cxBlack); DumpSpaces (pfiOut, xRightSideBearing); PutNewLine (pfiOut); cxWidth = cxBlack + (xLeft + xRightSideBearing); for (y=0;  y<yBottom;  y++) DumpSpaces (pfiOut, (short)cxWidth); PutNewLine (pfiOut); if  (xLeft < 0) DumpSpaces (pfiOut,(short)-xLeft); putc ('L', pfiOut); DumpSpaces (pfiOut,(short)(((short)cxAdvWidth) - 1)); putc ('R', pfiOut); PutNewLine (pfiOut); return ferror(pfiOut)==0 && feof(pfiOut)==0; /*  DumpSpaces(): prints a given number of spaces to the indicated file static void DumpSpaces (FILE* pfiOut, short cxSpaces) short i; for (i=0;  i<cxSpaces;  i++) putc (' ', pfiOut); /*  DumpPixels(): emits an ASCII representation of a row of pixels static void DumpPixels (FILE* pfiOut, char* pchPels, unsigned short cxPels) unsigned short i,j; unsigned uBits,uMask; int iOut; for (i=0;  i<cxPels;  i+=8, pchPels++) uBits = (unsigned)(*pchPels); for (j=0, uMask = 0x80;  uMask && ((i+j) < cxPels);  uMask>>=1, j++) iOut = ( (uMask & uBits) == 0x00 ) ? (char)' ' : '#'; putc (iOut, pfiOut); static void PutNewLine (FILE* pfiOut) putc ('\r', pfiOut); putc ('\n', pfiOut); Summary of the Font Scaler Client Interface Constants #define FS_BANDINGOLD #define FS_BANDINGSMALL #define FS_BANDINGFAST #define FS_GRAY_VALUE_MASK 0x008B  #define ONCURVE  0x01      #ifdef FSCFG_GRAY_SCALE #define MEMORYFRAGMENTS 9 /* extra memory base for overscaled bitmap */ #else #define MEMORYFRAGMENTS #endif Macros #define F26Dot6 long #define boolean int #define FS_MEMORY_SIZE  int32 Data Types typedef signed char int8; typedef unsigned char uint8; typedef short int16; typedef unsigned short uint16; typedef long int32; typedef unsigned long uint32; typedef long Fixed; typedef void (*voidFunc) (); typedef void * voidPtr; typedef void (FS_CALLBACK_PROTO *ReleaseSFNTFunc) (voidPtr); typedef void * (FS_CALLBACK_PROTO *GetSFNTFunc) (int32, int32, int32); typedef struct Rect {     int16 top;     int16 left;     int16 bottom;     int16 right; } Rect; typedef struct {     Fixed       transform[3][3]; } transMatrix; typedef struct {     Fixed       x, y; } vectorType; typedef struct BitMap { char* baseAddr; int16 rowBytes; Rect bounds; } BitMap; typedef struct { vectorType      advanceWidth; vectorType      leftSideBearing; vectorType      leftSideBearingLine; vectorType      devLeftSideBearingLine; vectorType      devAdvanceWidth; vectorType      devLeftSideBearing; } metricsType; typedef struct { FS_MEMORY_SIZE  memorySizes[MEMORYFRAGMENTS]; uint16          glyphIndex; uint16          numberOfBytesTaken; /* from the character code */ metricsType     metricInfo; BitMap          bitMapInfo; /* Spline Data */ int32           outlineCacheSize; uint16          outlinesExist; uint16          numberOfContours; F26Dot6         *xPtr, *yPtr; int16           *startPtr; int16           *endPtr; uint8           *onCurve; /* End of spline data */ /* Only of interest to editors */ F26Dot6         *scaledCVT; #ifdef FSCFG_GRAY_SCALE /* gray scale outline magnification */ uint16          usOverScale; #endif } fs_GlyphInfoType; #ifndef UNNAMED_UNION typedef struct { Fixed version; char* memoryBases[MEMORYFRAGMENTS]; int32 *sfntDirectory; /* (sfnt_OffsetTable    *) always needs to be set, when we have the sfnt */ GetSFNTFunc GetSfntFragmentPtr; /* (clientID, offset, length) */ ReleaseSFNTFunc ReleaseSfntFrag; int32 clientID; /* client private id/stamp (eg. handle for the sfnt) */ union { struct { uint16          platformID; uint16          specificID; } newsfnt; struct { Fixed           pointSize; int16           xResolution; int16           yResolution; Fixed           pixelDiameter;      /* compute engine char from this */ transMatrix*    transformMatrix; FntTraceFunc    traceFunc; } newtrans; struct { uint16          characterCode; uint16          glyphIndex; } newglyph; struct { void            (*styleFunc) (fs_GlyphInfoType*); FntTraceFunc    traceFunc; } gridfit; struct {                                    /* for fs_FindGraySize */ uint16 usOverScale;  /* outline magnification */ boolean bMatchBBox;  /* force bounding box match */ } gray; int32*  outlineCache; struct {                                    /* for fs_FindBandingSize */ uint16          usBandType;             /* old, small or fast */ uint16          usBandWidth;            /* number of scanlines */ int32*          outlineCache;           /* cacheing works with banding */ } band; struct { int16           bottomClip; int16           topClip; int32*          outlineCache; } scan; } param; } fs_GlyphInputType; #else typedef struct { Fixed                   version; char*                   memoryBases[MEMORYFRAGMENTS]; int32                   *sfntDirectory; /* (sfnt_OffsetTable    *) always needs to be set, when we have the sfnt */ GetSFNTFunc             GetSfntFragmentPtr; /* (clientID, offset, length) */ ReleaseSFNTFunc         ReleaseSfntFrag; int32                   clientID; /* client private id/stamp (eg. handle for the sfnt) */ union { struct { uint16          platformID; uint16          specificID; struct { Fixed           pointSize; int16           xResolution; int16           yResolution; Fixed           pixelDiameter;      /* compute engine char from this */ transMatrix*    transformMatrix; FntTraceFunc    tracePreProgramFunc; struct { uint16          characterCode; uint16          glyphIndex; struct { void            (*styleFunc) (fs_GlyphInfoType*); FntTraceFunc    traceGridFitFunc; struct {                                    /* for fs_FindGraySize */ uint16          usOverScale;            /* outline magnification */ boolean         bMatchBBox;             /* force bounding box match */ int32*              outlineCache1; struct {                                    /* for fs_FindBandingSize */ uint16          usBandType;             /* old, small or fast */ uint16          usBandWidth;            /* number of scanlines */ int32*          outlineCache3;          /* cacheing works with banding */ struct { int16           bottomClip; int16           topClip; int32*          outlineCache2; } fs_GlyphInputType; #endif      /* unnamed union */ Functions fs_OpenFonts (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_Initialize (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_NewSfnt (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_NewTransformation (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_NewGlyph (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_GetAdvanceWidth (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_ContourGridFit (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_ContourNoGridFit (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_FindBitMapSize (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_FindBandingSize (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_SizeOfOutlines (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_SaveOutlines (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_RestoreOutlines (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_ContourScan (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_CloseFonts (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_FindGraySize (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_FindGrayBandingSize (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_ContourGrayScan (fs_GlyphInputType *inputPtr, fs_GlyphInfoType *outputPtr); fs_InitializeData (void); fs_GetScaledAdvanceWidths (fs_GlyphInputType * inputPtr,uint16 usFirstGlyph, uint16 usLastGlyph, int16 *psGlyphWidths); Font Scaler Client Interface  page \\* arabic Confidential Font Scaler Client Interface  page \\* arabic Font Scaler Client Interface  DATE  \l  1/21/94  DATE  \l  1/21/94 Font Scaler Client Interface page \\* arabic Microsoft Confidential Microsoft Confidential page \\* arabic Tms Rmn Unit square u Normal Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Heading 7 Heading 8 Heading 9 Default Paragraph Font TOC 8 TOC 7 TOC 6 TOC 5 TOC 4 TOC 3 TOC 2 TOC 1 Footer Header toc 9 Warning Important _ Apple Inc  Text  Text LAST 2 col Left Page Number Jeff Weaver C:\WORKING\FSCINTER\CLINTINT.DOC Jeff Weaver C:\WORKING\FSCINTER\CLINTINT.DOC Jeff Weaver C:\WORKING\FSCINTER\CLINTINT.DOC Jeff Weaver C:\WORKING\FSCINTER\CLINTINT.DOC Jeff Weaver C:\WORKING\FSCINTER\CLINTINT.DOC Jeff Weaver C:\WORKING\FSCINTER\CLINTINT.DOC Jeff Weaver C:\WORKING\FSCINTER\CLINTINT.DOC Jeff Weaver C:\WORKING\FSCINTER\CLINTINT.DOC Jeff Weaver C:\WORKING\FSCINTER\CLINTINT.DOC Jeff Weaver C:\WORKING\FSCINTER\CLINTINT.DOC @HP LaserJet 4Si/4Si MX LPT1: HPPCL5E HP LaserJet 4Si/4Si MX HP LaserJet 4Si/4Si MX Times New Roman Symbol Arial Courier New Times Times New Roman Helvetica Font Scaler Client Interface Jeff Weaver Jeff Weaver
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\gdiplus\engine\imaging\imaging.doc ===
Microsoft Word Document MSWordDoc Word.Document.8IImagingFactory Interface TitleIImagingFactory Interface davidx Normal.dot Min Liu Microsoft Word 9.0bjbjU IImagingFactory Interface To start using the imaging library, the first thing a client application should do is to get the interface to an imaging factory object. This is done by calling CoCreateInstance with CLSID_ImagingFactory. STDMETHOD(CreateImageFromStream)(     IN IStream* stream,     OUT IImage** image     ); STDMETHOD(CreateImageFromFile)(     IN const WCHAR* filename,     OUT IImage** image     ); STDMETHOD(CreateImageFromBuffer)(     IN const VOID* buf,     IN UINT size,     IN BufferDisposalFlag disposalFlag,     OUT IImage** image     ); These methods let the application create decoded image objects from external data sources: input stream, disk file, or resource data. When the decoded image object is created, it only keeps a reference to the external data source and doesn't immediately decode the image: If the data source is an input stream object, the decoded image object takes over the ownership of it and increment its refcount. The client application should Release the stream object after the CreateImageFromStream method successfully returns. If the data source is a disk file, the decoded image open it in read-only mode and allow shared-read access to it. If the data source is a memory buffer, then the client app can request the buffer to be automatically disposed when the decoded image object is released. disposalFlag parameter can be one of the following: DISPOSAL_NONE   do nothing to the memory buffer when the image object is released DISPOSAL_GLOBALFREE   release the memory buffer with GlobalFree (buf parameter is an HGLOBAL in this case) DISPOSAL_COTASKMEMFREE   release the memory buffer with CoTaskMemFree DISPOSAL_UNMAPVIEW   release the memory buffer with UnmapViewOfFile Note: If CreateImageFromResource fails, then the caller still has the ownership of the memory buffer no matter what disposalFlag is set to. It's important to notice that decoded image objects are read-only. In particular, you can't modify the image data. But you can display it onto a destination graphics context or push its data into an image sink. Refer to the section on IImage interface for more details. STDMETHOD(CreateNewBitmap)(     IN UINT width,     IN UINT height,     IN PixelFormatID pixelFormat,     OUT IBitmapImage** bitmap     ); This method lets the application create a new in-memory bitmap image object. Our bitmap image object supports the following interfaces: IImage IBitmapImage IImageSink Currently supported pixel formats are: PIXFMT_1BPP_INDEXED - 1 bit-per-pixel indexed color bitmap PIXFMT_4BPP_INDEXED - 4bpp indexed color PIXFMT_8BPP_INDEXED - 8bpp indexed color PIXFMT_16BPP_GRAYSCALE - 16bpp grayscale PIXFMT_16BPP_RGB555 - 16bpp RGB 5-5-5 (blue in low-order bits) PIXFMT_16BPP_RGB565 - 16bpp RGB 5-6-5 PIXFMT_16BPP_ARGB1555 - 16bpp ARGB 1-5-5-5 PIXFMT_24BPP_RGB - 24bpp RGB (blue in low-order byte) PIXFMT_32BPP_RGB - 32bpp RGB (high order byte unused) PIXFMT_32BPP_ARGB - 32bpp ARGB, non-premultiplied alpha PIXFMT_32BPP_PARGB - 32bpp ARGB, premultiplied alpha PIXFMT_48BPP_RGB - 48bpp RGB PIXFMT_64BPP_ARGB - 64bpp ARGB, non-premultiplied alpha PIXFMT_64BPP_PARGB - 64bpp ARGB, premultiplied alpha Pixel formats that support 16-bit per color component are called extended formats. Two 32bpp ARGB (both premultiplied and non-premultiplied alpha) formats and two 64bpp ARGB formats are called canonical formats. Color values for extended pixel formats are interpreted in XsRGB linear space (exactly definition is pending). Color values for other pixel formats are interpreted in sRGB space. Alpha values are always interpreted in linear space. STDMETHOD(CreateBitmapFromImage)(     IN IImage* image,     IN OPTIONAL UINT width,     IN OPTIONAL UINT height,     IN OPTIONAL PixelFormatID pixelFormat,     IN InterpolationHint hints,     OUT IBitmapImage** bitmap     ); This method creates an in-memory bitmap image object from another image object. Optional width and height parameters specify the desired bitmap image dimension in pixels. If they are 0, the the new bitmap image will have the same dimension as the source image. Optional pixelFormat parameter specifies the desired pixel format. If it's PIXFMT_DONTCARE, the new bitmap image will have the same pixel format as the source image. If width and height parameters are specified, then we have a couple of cases to consider: The source image is scalable (e.g. a metafile): We simply ask the source image to scale its data to the specified pixel dimension.  The source image is not scalable (e.g. a bitmap): We'll scale the source image ourselves to the specified dimension, using the built-in scaler. The hints parameter specifies which interpolation algorithm to use in this case. This method can actually be quite handy, despite its innocent-looking name. For example, you can use it to convert a decoded image to an in-memory bitmap image (perhaps so that you can modify the image data). Or you can use it to convert a bitmap image object to another one in a different pixel format. STDMETHOD(CreateBitmapFromBuffer)(     IN BitmapData* bitmapData,     OUT IBitmapImage** bitmap     ); This method creates a bitmap image object on top of an application memory buffer. The application is responsible for allocating and freeing the memory. And it must ensure the memory is valid throughout the lifetime of the bitmap image object. Maybe we should have a way to allow applications to give us the ownership of the memory so that we can free the memory when the bitmap image object is freed. STDMETHOD(CreateImageDecoder)(     IN IStream* stream,     IN DecoderInitFlag flags,     OUT IImageDecoder** decoder     ); This method creates and initializes an IImageDecoder object that can process the specified input data stream. We'll take care of locating the appropriate decoder based on the header bytes in the input data stream. Flags parameter contains various flag bits to specify the options for creating the image decoder: DECODERINIT_NOBLOCK If this bit is set and the decoder can support nonblocking behavior, then the decoder object will be initialize to have the nonblocking behavior. DECODERINIT_BUILTIN1ST If this bit is set, then we ll look for built-in decoders first (i.e. ones that are included inside imaging.dll) before searching for other plugin decoders. NOTE: There is still some debate over whether IStream is the right thing for us to use here. An alternative is to have something like an IInputBuffer interface which would have the following methods: Seek(offset) - provide random seek capability GetDataPtr(N) - get a pointer to the next N bytes of input data, starting from the current offset STDMETHOD(CreateMemoryPropertyStore)(     IN OPTIONAL HGLOBAL hmem,     OUT IPropertySetStorage** propSet     ); This is a convenience method intended to help image decoders. It allows you to create an object that implements IPropertySetStorage interface on top of a memory buffer. The optional hmem parameter must be a handle returned by GlobalAlloc. The handle must be allocated as movable and non-discardable. When this method returns successful, we have taken over the ownership of the memory handle. When propSet is Released, the memory will be automatically freed with GlobalFree. If hmem is NULL, then we ll allocate the memory ourselves. STDMETHOD(CreateImageEncoderToStream)(     IN const CLSID* clsid,     IN IStream* stream,     OUT IImageEncoder** encoder     ); STDMETHOD(CreateImageEncoderToFile)(     IN const CLSID* clsid,     IN const WCHAR* filename,     OUT IImageEncoder** encoder     ); This method creates and initializes an IImageEncoder object to output to a stream or a disk file. clsid parameter specifies the class ID for the encoder COM component. STDMETHOD(GetInstalledDecoders)(     OUT UINT* count,     OUT ImageCodecInfo** decoders     ); STDMETHOD(GetInstalledEncoders)(     OUT UINT* count,     OUT ImageCodecInfo** encoders     ); These methods let the application get the list of installed encoders or decoders. The pointer returned in decoders or encoders parameters points to an array of ImageCodecInfo structures. When application is done with it, it should call CoTaskMemFree to free the memory. typedef struct tagImageCodecInfo     CLSID Clsid;     GUID FormatID;     const WCHAR* CodecName;     const WCHAR* FormatDescription;     const WCHAR* FilenameExtension;     const WCHAR* MimeType;     UINT Flags;     UINT SigCount;     UINT SigSize;     const BYTE* SigPattern;     const BYTE* SigMask; } ImageCodecInfo; Clsid - Class ID for the encoder / decoder COM component FormatID - The file format ID that the encoder / decoder supports CodecName - Name of the encoder / decoder FormatDescription - Description string for the supported file format This is intended to be used for the filter string in OPENFILENAME.lpstrFilter. e.g.  Windows Bitmap FilenameExtension - Filename extensions for the file format Multiple extensions are separated by semicolons. e.g.  *.BMP;*.DIB MimeType - MIME type for the file format e.g.  image/bmp Flags - Miscellaneous flags IMGCODEC_ENCODER - whether the codec is an encoder IMGCODEC_DECODER - whether the codec is a decoder, some codecs are both encoders and decoders IMGCODEC_SUPPORT_BITMAP - whether the codec supports bitmap images IMGCODEC_SUPPORT_VECTOR - whether the codec supports scalable images IMGCODEC_SEEKABLE_ENCODE - whether the encoder requires seekable output stream IMGCODEC_BLOCKING_DECODE - whether the decoder has blocking behavior during decode IMGCODEC_BUILTIN - whether the codec is built into the imaging library IMGCODEC_SYSTEM - whether the codec is available system-wide to all users IMGCODEC_USER - whether the codec is only available to the current user SigCount   Number of file header signatures This is normally 1, but could be more for file formats that have multiple signatures. In the latter case, you should set SigSize to the largest of all file header signatures. SigSize   Number of bytes for each file header signature This is only required for decoders. SigPattern - Expected file header signature pattern. This array should contain sigCount*sigSize bytes   the first sigSize bytes is for the first signature, the second sigSize bytes is for the second signature, and so on. SigMask - Mask applied to the file header bytes before they're compared to the header pattern Again, this array should contain sigCount*sigSize bytes. STDMETHOD(InstallImageCodec)(     IN const ImageCodecInfo* codecInfo     ); STDMETHOD(UninstallImageCodec)(     IN const WCHAR* codecName,     IN UINT flags     ); These methods are mostly intended for third-party codec developers. To install an external codec DLL, you should perform the regular COM component registration stuff on your DLL. Then call InstallImageCodec method to complete the installation. To uninstall a codec DLL, you should reverse the steps: call UninstallImageCodec and then do the regular COM component deregistration. Information about installed codecs are kept under the registry key ROOT\Software\Microsoft\Imaging\Codecs where ROOT is: HKEY_CURRENT_USER: codecs are only available to the current user. HKEY_LOCAL_MACHINE: codecs are available to all users on the system. Under the top level key, each subkey corresponds to one installed codec. The name of the subkey is the same as ImageCodecInfo.codecName. Values under the subkey and their types are listed below. Each value correspond to a field in ImageCodecInfo structure. CLSID: REG_BINARY Format ID: REG_BINARY File Type Description: REG_SZ Filename Extension: REG_SZ MIME Type: REG_SZ Flags: REG_DWORD Signature Count: REG_DWORD Signature Size: REG_DWORD Signature Pattern: REG_BINARY Signature Mask: REG_BINARY IImage Interface This is the basic interface to an image object. It allows applications to display the image onto a destination graphics context, push image data into an image sink, and to access image properties and metadata. Our decoded image objects and in-memory bitmap image objects support IImage interface. STDMETHOD(GetPhysicalDimension)(     OUT SIZE* size     ); This method returns the image dimension in a device-independent unit   the Windows himetric unit, 0.01mm. We cannot return pixel unit here because the image could be scalable such as a metafile. STDMETHOD(GetImageInfo)(     OUT ImageInfo* imageInfo     );  This method returns some basic information about the image object. See the section on IImageSink interface for more details about ImageInfo structure. For ImageInfo.rawDataFormat field, we ll have a list of predefined IDs for well-known file formats (see IMGFMT_* constants). The special ID IMGFMT_MEMORYBMP means the image is an in-memory bitmap image. ImageInfo.flags field is divided into two halves: The bottom half contains non-modifiable information about the image object. The top half are various hints associated with the image. STDMETHOD(SetImageFlags)(     IN UINT flags     ); These methods let application set various image flags. Only the top half of the image flag is settable. IMGFLAG_READONLY   whether image is read-only IMGFLAG_CACHING   whether caching is enabled This is a hint. Image object has the final say in deciding whether or how the image is cached.  STDMETHOD(Draw)(     IN HDC hdc,     IN const RECT* dstRect,     IN OPTIONAL const RECT* srcRect     ); This method displays the image onto the specified area of a destination graphics context. srcRect parameter is optional and is specified in 0.01mm units. If it s NULL, the entire image is displayed.  The destination graphics context is currently specified as an HDC. But we ll eventually use an interface instead   something like an IGraphics interface from which you can get HDC, DirectDraw surface, GDI+ graphics context, etc. STDMETHOD(PushIntoSink)(     IN IImageSink* sink     ); This method tells the image object to push its data into an image sink. For details on how the data transfer occurs between the image object and the image sink, see the section on IImageSink interface. STDMETHOD(GetThumbnail)(     IN OPTIONAL UINT thumbWidth,     IN OPTIONAL UINT thumbHeight,     OUT IImage** thumbImage     ); This method returns a thumbnail image for the current image object. If the image object contains thumbnail data, then a thumbnail image is created from that. Otherwise, we ll generate a thumbnail image from the image itself on-the-fly. Optional thumbWidth and thumbHeight parameters specify the desired thumbnail size (in pixel units). If they are both 0, then the thumbnail size will be determined by the image object. STDMETHOD(GetProperties)( IN DWORD mode,     OUT IPropertySetStorage** propSet     ); This method retrieves the metadata / properties associated with the image object. mode Parameter specifies the desired access mode, which can be: STGM_READ, STGM_WRITE, or STGM_READWRITE. After this method successfully returns, the client application can use the methods in IPropertySetStorage interface to access individual property set and the methods in IPropertyStorage interface to access individual property. After the app is done using the property data, it should call Release on the returned IPropertySetStorage object. The return value from this method is computed as follows: if (the image object doesn t support properties) *propSet = NULL; return E_NOTIMPL; else if (mode == STGM_READ) if (there are currently no image property sets) *propSet = NULL; *propSet = current image property sets return S_OK; if (there are currently no image property sets) *propSet = create new empty image property sets *propSet = current image property sets return S_OK; Standard property sets and properties  IBitmapImage Interface This interface allows applications to access pixel data of a bitmap image object. It s implemented by our in-memory bitmap image object. STDMETHOD(GetSize)(     OUT SIZE* size     ); This method returns the bitmap image dimension in pixels. STDMETHOD(GetPixelFormatID)(     OUT PixelFormatID* pixelFormat     ); This method returns the pixel data format of the bitmap image object. The format is one of the predefined PIXFMT_* constants. STDMETHOD(LockBits)(     IN const RECT* rect,     IN UINT flags,     IN PixelFormatID pixelFormat,     IN OUT BitmapData* lockedBitmapData     ); This method lets applications lock an area of a bitmap image object. flags parameter can be a combination of the following constants. Either IMGLOCK_READ or IMGLOCK_WRITE must be present. IMGLOCK_READ   lock image data for reading IMGLOCK_WRITE   lock image data for writing IMGLOCK_USERINPUTBUF   application is supplying the memory buffer for the pixel data pixelFormat parameter specifies which pixel format the application wants. If it s PIXFMT_DONTCARE, then the current pixel format of the bitmap image object is used. Bitmap image objects don t have to support all pixel formats. But they re required to support the canonical pixel formats. If IMGLOCK_USERINPUTBUF bit of flags parameter is set, then lockedBitmapData->Scan0 and lockedBitmapData->Stride fields must contain valid values on input. Upon successful return from this method, lockedBitmapData will contain information about locked pixel data. The application must call UnlockBits method when it s done using the pixel data. Concurrent locks are not allowed on the same bitmap image object. typedef struct tagBitmapData     UINT Width;     UINT Height;     INT Stride;     PixelFormatID PixelFormat;     VOID* Scan0;     UINT_PTR Reserved; } BitmapData; This structure contains information to describe pixel data for a rectangular area of bitmap images. Width   width of the bitmap image area Height   height of the bitmap image area Stride   number of bytes from one scanline of the bitmap area to the next This can be a negative value for bottom-up bitmap images. PixelFormat   pixel data format Scan0   points to the beginning of the first scanline Reserved   reserved: application should sets it to 0 before calling LockBits and shouldn t touch it afterwards STDMETHOD(UnlockBits)(     IN const BitmapData* lockedBitmapData     ); This method unlocks an area of the bitmap image object locked by a previous LockBits call. STDMETHOD(GetPalette)(     OUT ColorPalette** palette     ); STDMETHOD(SetPalette)(     IN const ColorPalette* palette     ); These methods let applications get/set color palettes associated with a bitmap image object. For SetPalette call, a copy of the input color palette is made and attached to the bitmap image. For GetPalette call, a copy of the bitmap image s current palette is returned. Application is responsible for freeing the pointer to the returned color palette via CoTaskMemFree. For bitmap images in indexed color pixel format: PIXFMT_1BPP_INDEXED PIXFMT_4BPP_INDEXED PIXFMT_8BPP_INDEXED a color palette is required. If none is specified, we ll use an appropriate default color palette. For bitmap images in other pixel formats, a color palette is optional. If one is supplied, we may use it when the bitmap image is displayed onto a indexed color graphics context or when the image is converted to an indexed color pixel format. typedef struct tagColorPalette     UINT Flags;     UINT Count;     ARGB Entries[1]; } ColorPalette; Flags   Miscellaneous flag bits PALFLAG_HASALPHA   palette contains transparency PALFLAG_GRAYSCALE   palette contains only grayscale colors PALFLAG_HALFTONE   palette is used for halftoning Count   Number of palette entries Entries   Color values for palette entries IImageDecoder Interface This is the lower level interface to image decoder objects. Many of the simpler applications don t have to work with decoder objects directly and can work with the higher level decoded image objects instead. More sophisticated applications may want to use the IImageDecoder interface to have finer control over the interaction with the decoder objects. STDMETHOD(InitDecoder)(     IN IStream* stream,     IN DecoderInitFlag flags     ); This method initializes the image decoder object with an input data stream. The decoder can assume the input stream is always seekable. Once the decoder object is initialized with a stream, it's associated with that stream until TerminateDecoder method is called. flags parameter specifies how the decoder should be initialized. DECODERINIT_NOBLOCK  If this bit is set, the decoders should have the non-blocking behavior: i.e. when they run out of input data, they should return E_PENDING from the following methods: Decode GetImageInfo GetProperties Other methods??? Notice that this flag is has no effect on blocking decoders, i.e. the ones with IMGCODEC_BLOCKING_DECODE bit set in their ImageCodecInfo.Flags. See the notes in IImagingFactory::CreateImageDecoder section about whether to use IStream or not. STDMETHOD(TerminateDecoder)(); This method is called to unassociate the image decoder object with its input data stream. After calling this method, applications could call InitDecoder again to associate another stream with the decoder object. STDMETHOD(BeginDecode)(     IN IImageSink* sink,     IN OPTIONAL IpropertySetStorage** newPropSet     ); This method is called to start decoding the currently selected frame. The sink parameter specifies the image sink object that will receives the image data. See the section on IImageSink interface for more details. newPropSet is optional. If it s not NULL, the image decoder should use the specified image property sets instead of its own image property sets when calling sink->PushProperties method. STDMETHOD(Decode)(); This method tells the decoder object to continue decoding the current frame. A non-blocking decoder (one that doesn't have IMGCODEC_BLOCKING_DECODE flag set) should return E_PENDING when it runs out of input data. Here is what an application might do to decode an image frame: IImageDecoder* decoder; IImageSink* sink; HRESULT hr; hr = decoder->BeginDecode(sink, NULL); if (FAILED(hr)) handle error; for (;;)     hr = decoder->Decode();     if (hr == E_PENDING)         do something else;     else if (FAILED(hr))         handle error, break;     else         decoding successful, break; decoder->EndDecode(hr); STDMETHOD(EndDecode)(     IN HRESULT statusCode     ); This method tells the decoder object to stop decoding the current frame. The return value from EndDecode method should be computed as follows: if (decoder detected new error in EndDecode) return the new error code return the statusCode that was passed in STDMETHOD(QueryFrameDimensions)(     OUT UINT* count,     OUT GUID** dimensionIDs     ); STDMETHOD(GetFrameCount)(     IN const GUID* dimensionID,     OUT UINT* count     ); STDMETHOD(SelectActiveFrame)(     IN const GUID* dimensionID,     IN UINT frameIndex     ); These methods are intended for working with multi-frame images. Multi-frame images are accessed via multi-dimensional indices. Our interface can support arbitrary number of dimensions in non-rectangular arrangements. For example, in the following picture: We have a 3-page image and the second page has two representations in different resolution. In real-life, most apps probably will only have to deal with one-dimensional indices. There are a set of predefined dimensions: FRAMEDIM_TIME - time dimension FRAMEDIM_RESOLUTION - multi-res dimension FRAMEDIM_PAGE - multi-page dimension QueryFrameDimensions method returns the total number of frame dimensions. The most significant dimension comes first followed by less significant dimensions. GetFrameCount method returns the number of frames in the specified dimension. SelectActiveFrame method is used to select an active image frame. Here is what an application might do do select Frame2.2 in the example above: call QueryFrameDimension method returns 2 dimensions: FRAMEDIM_PAGE followed by FRAMEDIM_RESOLUTION call GetFrameCount(FRAMEDIM_PAGE) returns 3 call SelectActiveFrame(FRAMEDIM_PAGE, 1) frame index is zero-based call GetFrameCount(FRAMEDIM_RESOLUTION) returns 2 call SelectActiveFrame(FRAMEDIM_RESOLUTION, 1) selects Frame2.2 STDMETHOD(GetImageInfo)(     OUT ImageInfo* imageInfo     ); This method asks the decoder to return basic information about the image. The information returned in the imageInfo should be the same as what the decoder object would pass to IImageSink::BeginSink. See the section on IImageSink for more details. STDMETHOD(GetThumbnail)(     IN OPTIONAL UINT thumbWidth,     IN OPTIONAL UINT thumbHeight,     OUT IImage** thumbImage     ); This method asks the decoder for a thumbnail image. If the image doesn t contain thumbnail data, the decoder should return an error code. Optional thumbWidth and thumbHeight parameters specify the desired thumbnail size (in pixel units). If they are both 0, then the decoder is free to choose the thumbnail size. Note that the decoder is not required to return a thumbnail image that has the exact size as what s requested. The requested thumbnail size is used only as a hint. STDMETHOD(GetProperties)(     OUT IPropertySetStorage** propSet     ); This method asks the decoder to return the metadata / properties associated with the image. After the method successfully returns, the calling application owns the returned IPropertySetStorage object. The return value from this method should be computed as follows: if (the decoder doesn t support properties) *propSet = NULL; return E_NOTIMPL; else if (the image doesn t have any properties) *propSet = NULL; return S_OK; *propSet = create image property sets from image data return statusCode; IImageSink Interface This interface allows an image source (e.g. an image decoder) and an image sink to exchange data. The most important interaction happens during BeginSink method, where the source and the sink negotiates various data transfer parameters. STDMETHOD(BeginSink)(     IN OUT ImageInfo* imageInfo,     OUT OPTIONAL RECT* subarea     ); The image source calls this method when it's about to start pushing image data to the sink. Begin the call, the source should fill out the ImageInfo structure as follows: typedef struct tagImageInfo     GUID RawDataFormat;     PixelFormatID PixelFormat;     UINT Width, Height;     UINT TileWidth, TileHeight;     double Xdpi, Ydpi;     UINT Flags; } ImageInfo; RawDataFormat - file format ID for the native image data e.g. IMGFMT_JPEG, IMGFMT_PNG, etc. use IMGFMT_MEMORYBMP for in-memory bitmap image source PixelFormat - natural pixel format for the source use PIXFMT_DONTCARE if source doesn't have a preference Width, Height - source dimension Xdpi, Ydpi - source image resolution TileWidth, TileHeight - preferred tile size for the source Flags - Miscellaneous flags about the image source SINKFLAG_SCALABLE - whether source image is fully scalable SINKFLAG_PARTIALLY_SCALABLE   whether source image is partially scalable SINKFLAG_HASALPHA - whether source image contains transparency SINKFLAG_TOPDOWN - whether source prefers to supply image data in top-down order SINKFLAG_BOTTOMUP - whether source prefers to supply data in bottom-up order SINKFLAG_FULLWIDTH - whether source prefer to supply data in bands (in fully scanlines) SINKFLAG_MULTIPASS - whether source wants to supply data in multi-passes SINKFLAG_COMPOSITE - whether source wants to composite over existing image data in the sink Upon successful return from this method, the sink should fill out the ImageInfo structure as follows: RawDataFormat - The file format ID requested by the source if the sink can take raw image data in that format or IMGFMT_MEMORYBMP if the sink refuses to take the raw image data from the source. In the former case, the source should then call PushRawData method to pass raw image data to the sink. In the latter case, the source should call PushPixelData or Get/ReleasePixelData buffer. PixelFormat - The pixel format preferred by the sink. This may be the same format as what's requested by the source. But that's not required to be the case. The source can either supply pixel data in the format requested by the sink. Or it can supplied pixel data in one of the canonical pixel formats (which all sinks are required to support). Width, Height -  Xdpi, Ydpi - These are normally left unchanged by the sink. But if the source has set SINKFLAG_SCALABLE flag, then the sink can modify Width and Height values to request the source to scale the source image to a new dimension. If the sink changes width and height values, it should change Xdpi and Ydpi values accordingly. If the source has set SINKFLAG_PARTIALLY_SCALABLE, then the sink can modify the Width and Height values to tell the source the ideal width and height for the sink. The source will then call BeginSink again with the closest width and height the source can supply. When BeginSink is called for the second time, the SINKFLAG_PARTIALLY_SCALABLE flag will be clear. If the sink doesn t want to have its BeginSink called twice, it should leave the Width and Height values unchanged and also clear the SINKFLAG_PARTIALLY_SCALABLE flag. TileWidth, TileHeight - Preferred tile sink by the sink. If SINKFLAG_FULLWIDTH flag is set, then TileWidth must be the same as the Width and TileHeight is the preferred band height. Notice that tile size information is used as hint for potential perf gain. The source is not required to use the exact tile size requested by the sink. Flags - SINKFLAG_SCALABLE - left unchanged SINKFLAG_PARTIALLY_SCALABLE   see the paragraph above about Width and Height fields SINKFLAG_HASALPHA - If set by the source, then the sink can clear it to indicate that the sink cannot support alpha. But even in that case, the source can still supply alpha to the sink. The sink is free to do whatever it chooses with the alpha information (e.g. simply discard it). SINKFLAG_TOPDOWN - whether the sink wants the source to supply pixel data in top-down order SINKFLAG_FULLWIDTH - whether the sink wants data in bands All sources are required to support data transfer in top-down banding order, even if that's not their preferred order. SINKFLAG_BOTTOMUP - left unchanged SINKFLAG_MULTIPASS - If set by the source, the sink can clear it to indicate that it doesn't support multipass. In that case, the source is required to handle multi-pass on its own and give image data to the sink in a single pass. If the sink indicates it can support multipass but also requires top-down order, then the source must supply data one entire pass after another and for each pass one band after another with no gaps in between. SINKFLAG_COMPOSITE - left unchanged If set by the source and the sink can't support compositing behavior, the sink should return failure from BeginSink method. SINKFLAG_WANTPROPS   The sink can set this flag to indicate to the source that it s interested in getting image metadata /properties (i.e. it wants to get the PushProperties call). The optional subarea parameter is used for partial decoding if both the image source and sink can supported. If the image source can support partial image decoding, it will pass a non-NULL subarea parameter. In that case, the image sink must fill in the RECT to tell the source which portion of the image to decode. If the sink doesn t want partial image, it would fill in the RECT to include the entire source image. STDMETHOD(EndSink)(     IN HRESULT statusCode     ); This method is called when  the image source is done interacting with the sink. The return value from EndSink method should be computed as follows: if (new error is detected in EndSink) return new error code return the statusCode that was passed in STDMETHOD(SetPalette)(     IN const ColorPalette* palette     ); The source calls this method to pass color palette information to the sink. This method must be called before any image data transfer takes place. STDMETHOD(PushProperties)(     IN IPropertySetStorage* propSet     ); The source calls this method to pass image properties to the sink. This should only happen when the sink indicates that it wants property data during BeginSink negotiation. If the sink doesn t want property data but PushProperties is called anyway, then the sink should handle it gracefully (e.g. ignore the property data and return success). The sink should treat the property data as read-only. It can assume the lifetime of the IPropertySetStorage object will last until EndSink is called. STDMETHOD(PushRawData)(     IN const VOID* buffer,     IN UINT bufsize     ); The source calls this method to pass raw image data to the sink. It should be called if and only if the negotiation in BeginSink resulted in an agreement to do raw image data transfer. STDMETHOD(PushPixelData)(     IN const RECT* rect,     IN const BitmapData* bitmapData,     IN BOOL lastPass     ); STDMETHOD(GetPixelDataBuffer)(     IN const RECT* rect,     IN PixelFormatID pixelFormat,     IN BOOL lastPass,     OUT BitmapData* bitmapData     ); STDMETHOD(ReleasePixelDataBuffer)(     IN const BitmapData* bitmapData     ); The source calls these methods to pass image pixel data to the sink. They should be called if and only if the negotiated format in BeginSink was IMGFMT_MEMORYBMP. The source already has the pixel data in memory in the correct pixel format, then it can just call PushPixelData to pass a pointer to the pixel data directly to the sink. Otherwise, the source calls GetPixelDataBuffer method to ask the sink to allocate memory for the data transfer. Then it fills the buffer with the pixel values. Finally it calls ReleasePixelDataBuffer to tell the sink to take the pixel data. lastPass parameter tells the sink this is the last pass over the specified image area. IImageEncoder Interface This interface is used for encoding images. STDMETHOD(InitEncoder)(     IN IStream* stream     ); This method initializes an image encoder object and associates it with an output stream. If the encoder requires a seekable stream (IMGCODEC_SEEKABLE_ENCODE flag is set) and the stream is not seekable, then the encoder should fail this call. STDMETHOD(TerminateEncoder)(); Unattach the encoder object from an output stream. After calling this method, applications may call InitEncoder again with a different output stream. STDMETHOD(GetEncodeSink)(     OUT IImageSink** sink     ); This method asks the encoder object to return an IImageSink interface that can be used to encode the next image frame. After getting the image sink interface, application can then use it to push image data to the encoder. After the frame is encoded, application should call sink->Release. STDMETHOD(SetFrameDimension)(     IN const GUID* dimensionID     ); This method is used for encoding multi-frame images. To output the multi-frame image used as example in IImageDecoder section, an application might use the following sequence: encoder->SetFrameDimension(FRAMEDIM_PAGE); encode page 1 encoder->SetFrameDimension(FRAMEDIM_RESOLUTION) encode page 2.1 encode page 2.2 encoder->SetFrameDimension(FRAMEDIM_PAGE); encode page 3 STDMETHOD(QueryEncoderParam)(     OUT EncoderParams**  ppParams     ); This method is used for querying the capability of the current encoder.  Here  EncoderParams  is defined as: typedef struct tagEncoderParams     UINT Count;     EncoderParam Params[1]; } EncoderParams; where Count is the number of EncoderParam structure. ppParams is a pointer points to  Count  EncoderParam structures. typedef struct tagEncoderParam     GUID  paramGuid;     Char*  Value; } EncoderParam; paramGuid is one of the predefined GUIDs. Here are some predefined values: ENCODER_COMPRESSION-----Compression method ENCODER_COLORDEPTH------Color depth ENCODER_SCANMETHOD-----Interlaced or non-interlaced ENCODER_VERSION-------------Version of image format ENCODER_RENDERMETHOD--Progressive or non-progressive. ENCODER_QUALITY-------------The encoder compression quality. A 3rd party who implements its own codec can add its own defines if the new codec needs it. Value is a string which lists all the values it supports under this GUID category. Each value is separated by a   and the whole string is NULL terminated. For example, an EncoderParam could look like: ENCODER_COMPRESSION LZW:PACKBITS:JPEG:NOCompress An example for querying TIFF codec could return something like: Count = 2 Params[0] = { ENCODER_COMPRESSION,  CCITT3:Huffman:LZW:Packbits:JPEG:NoCompress Params[1] = { ENCODER_COLORDEPTH,  1:2:4:8:24:32 The caller is responsible for calling CoTaskMemFree() to free the memory pointed by  ppParams  and Value under each EncoderParam structure. STDMETHOD(SetEncoderParam)(     IN EncoderParams* Param     ); This method is used for setting encoder parameters.  It must be called before GetEncodeSink. EncoderParams is defined as above. Use the example above, the caller can call this function for a TIFF encoder like: EncoderParams myEncoderParams; MyEncoderParams.Count = 1; MyEncoderParams.Params[0].paramGuid = ENCODER_COMPRESSION; MyEncoderParams.Params[0].Value =  SetEncoderParam(&myEncoderParams); If the encoder doesn t support the combination of the encoding parameters, it should ignore the call and return S_FALSE. All the encoder should define a default set of encoder parameters in case the caller doesn t call this function or calls the function with the wrong parameters. By default, the encoder should save the image in the same color depth if it can support it. If not, then the encoder should define the closest color depth for the source. IBasicBitmapOps Interface This interface is used to perform some basic operations on bitmap images. Much of it is still quite tentative at this point. You can QI an IBitmap object to find out if it supports IBasicBitmapOps interface. STDMETHOD(Clone)(     IN OPTIONAL const RECT* rect,     OUT IBitmapImage** outbmp     ); This method make a copy of the bitmap image object. If the optional rect parameter is specified (non-NULL), then only the specified area of the image is copied. The unit for the rect is pixel. STDMETHOD(Flip)(     IN BOOL flipX,     IN BOOL flipY,     OUT IBitmapImage** outbmp     ); Flip the bitmap image in x- and/or y-direction. STDMETHOD(Resize)(     IN UINT newWidth,     IN UINT newHeight,     IN PixelFormatID pixelFormat,     IN InterpolationHint hints,     OUT IBitmapImage** outbmp     ); Scale the bitmap image to a different size. hint parameter specifies which interpolation algorithm to use: INTERP_DEFAULT  t care, use whatever default algorithm we pick INTERP_NEAREST_NEIGHBOR   use point sampling INTERP_BILINEAR   use bilinear interpolation INTERP_AVERAGING   use area-averaging when scaling down, bilinear when scaling up This is good for generating small thumbnail images. INTERP_BICUBIC   use bicubic interpolation STDMETHOD(Rotate)(     IN FLOAT angle,     IN InterpolationHint hints,     OUT IBitmapImage** outbmp     ); Rotate the bitmap image. Currently we only support rotation in multiples of 90 degrees.  STDMETHOD(AdjustBrightness)(     IN FLOAT percent     ); Adjust the brightness of a bitmap image. Assume the pixel intensity value is between 0 and 1. Then the operation is defined as: New intensity = old intensity + percent A positive value of percent parameter causes the image to become brighter and a negative value makes the image darker. STDMETHOD(AdjustContrast)(     IN FLOAT shadow,     IN FLOAT highlight     ); Adjust the contrast of a bitmap image. Old pixel value 0 is mapped to new pixel value  shadow  and old pixel value 1 is mapped to new pixel value of  highlight . Mappings for other old pixel values is computed using the derived linear function. STDMETHOD(AdjustGamma)(     IN FLOAT gamma     ); Adjust the gamma of a bitmap image. The mapping function is: New intensity value = old intensity valuegamma A gamma value large than 1 will make the image darker and a value less than 1 will make the image brighter. multi-res multi-page Frame2.2 Frame3 Frame2.1 Frame1
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\gdiplus\engine\imaging\gdipimg.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Internal GDI+ Imaging Interface Title _PID_HLINKSGDI+ Imaging Interface Gilman Wong Normal Gilman Wong Microsoft Word 9.0(j>"NbjbjU GDI+ Imaging Interface  TIME \@ "M/d/yy h:mm am/pm"  8/25/99 11:58 AM Table of Contents:  TOC \o "1-3" \h \z   HYPERLINK \l "_Toc460216555"  1.0 Introduction  PAGEREF _Toc460216555 \h   HYPERLINK \l "_Toc460216556"  2.0 The Image Class  PAGEREF _Toc460216556 \h   HYPERLINK \l "_Toc460216557"  2.1 Creating an Image object  PAGEREF _Toc460216557 \h   HYPERLINK \l "_Toc460216558"  2.2 Error status  PAGEREF _Toc460216558 \h   HYPERLINK \l "_Toc460216559"  2.3 Control of loading/decoding  PAGEREF _Toc460216559 \h   HYPERLINK \l "_Toc460216560"  2.4 Saving an Image object  PAGEREF _Toc460216560 \h   HYPERLINK \l "_Toc460216561"  2.5 Image object multiframe support  PAGEREF _Toc460216561 \h   HYPERLINK \l "_Toc460216562"  2.6 Image object properties  PAGEREF _Toc460216562 \h   HYPERLINK \l "_Toc460216563"  2.7 Thumbnail support  PAGEREF _Toc460216563 \h   HYPERLINK \l "_Toc460216564"  2.8 Drawing an Image  PAGEREF _Toc460216564 \h   HYPERLINK \l "_Toc460216565"  2.9 Sink support  PAGEREF _Toc460216565 \h   HYPERLINK \l "_Toc460216566"  3.0 The Bitmap class  PAGEREF _Toc460216566 \h   HYPERLINK \l "_Toc460216567"  3.1 Bitmap object creation  PAGEREF _Toc460216567 \h   HYPERLINK \l "_Toc460216568"  3.2 Bitmap properties  PAGEREF _Toc460216568 \h   HYPERLINK \l "_Toc460216569"  3.3. Direct pixel data access  PAGEREF _Toc460216569 \h   HYPERLINK \l "_Toc460216570"  3.4 Palette support  PAGEREF _Toc460216570 \h   HYPERLINK \l "_Toc460216571"  3.5 Bitmap processing operations  PAGEREF _Toc460216571 \h   HYPERLINK \l "_Toc460216572"  4.0 The Sink interface  PAGEREF _Toc460216572 \h   HYPERLINK \l "_Toc460216573"  5.0 Codec Management  PAGEREF _Toc460216573 \h   HYPERLINK \l "_Toc460216574"  6.0 The Graphics object  PAGEREF _Toc460216574 \h   HYPERLINK \l "_Toc460216575"  7.0 Open Issues  PAGEREF _Toc460216575 \h  1.0 Introduction This is the proposed GDI+ Imaging Interface.  It is intended to provide a simplified programming interface for imaging that integrates well with the rest of the GDI+ programming interface. There are three basic objects used by imaging in GDI+: Image class Bitmap class Sink interface The Image object is concerned mainly with loading and saving images.  It also offers control of the decoding process when non-blocking behavior is requested.  Non-blocking behavior allows control to return to the application in the event that the decoder does not have enough image data to continue (for example, a slow network connection).  In addition, the Image object can communicate with application-supplied Sinks object. The Bitmap object is a subclass of the Image.  It represents the image data decoded into a memory buffer.  It offers direct access to the pixel data (via Lock/Unlock semantics) as well as a set of basic processing operations. The Sink interface, alluded to before in the discussion of the Image object, allows an application to operate on the raw image data or the decoded data as it chooses.  Data is transferred from the Image or Bitmap object to the Sink via a push model.  That is to say the data transfer is controlled by source rather than in the form of callbacks from the sink requesting image data. In addition, there are some functions for management of codecs (image format encoders/decoders) and some proposed modifications to Graphics. 2.0 The Image Class The Image class is mainly concerned with loading and saving images, decoding, and interfacing with Sinks.  The different categories of functions are: Function summary Constructors Image(stream  Image(filename  Status Image.GetLastStatus Decode control Image.GetLoadStatus Image.ContinueLoad Saving Image.Save(stream  Image.Save(filename  Multi-frame support Image.QueryFrameDimensions Image.GetFrameCount Image.SelectActiveFrame Properties Image.GetPhysicalDimensions Image.GetImageInfo Image.SetImageFlags Image.GetProperties (TBD) Thumbnail support Image.GetThumbnailImage Drawing Image.Draw (to be replaced by Graphics.DrawImage) Sink support Image.PushIntoSink 2.1 Creating an Image object These are the functions used to load images from a stream or file.  The application may optionally request non-blocking behavior for the loading. Function Image::Image( IN IStream * stream,  IN UINT flags = 0) Description: Creates an Image object from the specified input stream.   Parameters: stream Specifies the input stream. flags May be any combination of the following: ImageNoBlock Decode of the image may terminate early if data stream runs out of data.  If so, Image::GetLoadStatus will return ImagePending. Function Image::Image( IN const WCHAR *filename,  IN UINT flags = 0) Description: Creates an Image object from the specified input file.   Parameters: filename Specifies the input stream. flags May be any combination of the following: ImageNoBlock Decode of the image may terminate early if data stream runs out of data.  If so, Image::GetLoadStatus will return ImagePending. 2.2 Error status Method Status Sink::GetLastStatus() Description: Retrieve the last status.  Calling will reset the status to Ok. Return value: Status.  Status value Ok is normal. 2.3 Control of loading/decoding Method Status Image::GetLoadStatus() Description: Returns status of load operation.  Calling will NOT reset the status. Return value: Return value is ImagePending if codec has run out of data.  Return value is Ok if codec is finished. Method VOID Image::ContinueLoad() Description: Continues loading image if load operation is pending. Return value: None.  Call GetLoadStatus() to check status of image load. Example: Image myImage("blah.jpg", ImageNoBlock); myImage.ContinueLoad(); // Do something the app wants to do, like maybe // display the portion of the image that is renderable. } while (myImage.GetLoadStatus() == ImagePending); 2.4 Saving an Image object These are the methods for saving an image to a file or stream. Method VOID Image::Save( IN IStream * stream, IN const CLSID * clsidEncoder, IN const EncoderParams * encoderParams = NULL) Description: Save the image to the specified stream via the encoder identified by clsidEncoder. Return value: None.  Call GetLastStatus() to check for errors. Parameters: stream Specifies the stream to which the image is saved. clsidEncoder Identifies the codec to use for encoding. encoderParams If NULL, use default encoding parameters.  Otherwise, the EncoderParams structure contains an array of encoder settings. Method VOID Image::Save( IN const WCHAR * filename, IN const CLSID * clsidEncoder, IN const EncoderParams * encoderParams = NULL) Description: Save the image to the specified file via the encoder identified by clsidEncoder. Return value: None.  Call GetLastStatus() to check for errors. Parameters: stream Specifies the filename to which the image is saved. clsidEncoder Identifies the codec to use for encoding. encoderParams If NULL, use default encoding parameters.  Otherwise, the EncoderParams structure contains an array of encoder settings. Structure typedef struct tagEncoderParams UINT Count; EncoderParam Params[1]; } EncoderParams; Description: A counted array of encoder parameters. Members: Count Specifies number of parameters in array. Params Array of parameters. Structure typedef struct tagEncoderParam WCHAR * Key; VARIANT * Value; } EncoderParam; Description: A single encoder parameter in a key-value pair. Members: Identifies encoder parameter. Value Specifies value for encoder parameter. 2.5 Image object multiframe support Please refer to the imaging.doc specification for a more complete description of multiframe concepts. Method UINT Image::QueryFrameDimensions( OUT GUID ** dimensionIDs) Description: Returns an array dimension types supported by the image. Return value: Count of supported dimensions. Comment: See imaging.doc for discussion of multiframe images. Parameters: dimensionIDs Returns the dimensions supported. For example, if image supports multiple pages and each page has several resolutions, the array returned might be {FRAMEDIM_PAGE, FRAMEDIM_RESOLUTION}. Method UINT Image::GetFrameCount( IN const GUID * dimensionID) Description: Returns count of frames for the specified dimension. Return value: Count of supported frames. Comment: See imaging.doc for discussion of multiframe images. Parameters: dimensionID Specifies the dimension. If there are multiple dimensions, then the count is the number of frames for the current selection of the other dimensions. Method VOID Image::SelectActiveFrame( IN const GUID * dimensionID, IN UINT frameIndex) Description: Sets the frame to the indicated index for the specified dimension. Return value: Count of supported frames. Comment: Changing the active frame resets the decode state of the Image object.  So any pending loads are ended and the load status becomes ImagePending.  To begin loading the new frame, call Image::ContinueLoad (if ImageNoBlock was specified in LoadImage, will still need to call Image::GetLoadStatus() to check for Ok status). Parameters: dimensionID Specifies the desired dimension. frameIndex Specifies the desired frame. 2.6 Image object properties These are functions to set and get various image properties. Method VOID Image::GetPhysicalDimension( OUT SIZE * size) Description: Returns the image dimensions in device-independent units, namely the Windows HIMETRIC unit, 0.01mm. Return value: None.    Call Image::GetLastStatus() to check for errors. Parameters: Returns the dimensions (0.01 units). Method VOID Image::GetImageInfo( OUT ImageInfo * imageInfo Description: Returns some basic information about the Image object. Return value: None.  Call GetLastStatus() to check for errors. Parameters: imageInfo Returns the ImageInfo structure for this Image. Structure typedef struct tagImageInfo UINT Version; GUID RawDataFormat; PixelFormatID FixelFormat; UINT Width, Height; UINT TileWidth, TileHeight; double Xdpi, Ydpi; UINT Flags; } ImageInfo; Description: Describes some basic information about an Image. Members: Version Must be 1 for current version of GDI+. RawDataFormat File format ID for the native image data.  For example, IMGFMT_MEMORYBMP, IMGFMT_JPEG, IMGFMT_PNG, etc. PixelFormat Specifies pixel format.  May be one of the following: PixelFormat1BppIndexed 1bpp indexed color PixelFormat4BppIndexed bpp indexed color PixelFormat8BppIndexed 8bpp indexed color PixelFormat16BppGrayscale 16bpp grayscale PixelFormat16BppRGB555 16bpp RGB 5-5-5 (blue in low-order bits) PixelFormat16BppRGB565 16bpp RGB 5-6-5 PixelFormat16BppARGB1555 16bpp ARGB 1-5-5-5 PixelFormat24BppRGB 24bpp RGB (blue in low-order byte) PixelFormat32BppRGB 32bpp RGB (high order byte unused) PixelFormat32BppARGB 32bpp ARGB, non-premultiplied alpha PixelFormat32BppPARGB 32bpp ARGB, premultiplied alpha PixelFormat48BppRGB 48bpp RGB PixelFormat64BppARGB 64bpp ARGB, non-premultiplied alpha PixelFormat64BppPARGB 64bpp ARGB, premultiplied alpha Width, Height Image dimensions in 0.01mm units. TileWidth, TileHeight Tile size (used only with Sink object). Xdpi, Ydpi Image resolution (dots per inch). Flags Used only with Sink object.  Can be any one of the following: Method VOID Image::SetImageFlags( IN UINT flags) Description: Set some image flags. Return value: None.  Call GetLastStatus() to check for errors. Comment: Add a quality hint (i.e., sRGB vs. XsRGB, etc.)? Parameters: flags Can be any combination of the following: ImageReadOnly Image is read-only. ImageCacheHint Hint that image should be cached.  May be ignored. Function GetProperties( , IN IPropertySetStorage propSet,  Description: 2.7 Thumbnail support This is the function used to retrieve a thumbnail image.  If the image contains a thumbnail, the image will be created from that.  Otherwise, GDI+ will rescale the image to generate the thumbnail. Method Image * Image::GetThumbnailImage( IN UINT thumbWidth = 0, IN UINT thumbHeight = 0) Description: Returns an Image object with the thumbnail image. Return value: If successful, returns a pointer to a valid Image object.  Call Image::GetLastStatus() to get extended error information. Parameters: width, height Specifies pixel dimensions of thumbnail.  If both are zero, then the Image object will determine the thumbnail size. 2.8 Drawing an Image This is the method to display an image. Method VOID Image::Draw( IN Graphics * graphics, IN const RECT * dstRect, IN const RECT * srcRect = NULL) Description: Renders image to the specified graphics context. Return value: None.  Call GetLastStatus() to check for errors. Comments: Whether or not Image was created with ImageNoBlock specified, the Image::Draw will always wait for drawing completion.  If ImageNoBlock was specified, the Image::Draw will implement the loading loop internally. Note that this is just a placeholder for Graphics.DrawImage.  It is easier to implement Image.Draw in the short term. Parameters: graphics Specifies the destination graphics context. dstRect Specifies the rectangle in the graphics context to which the image will be rendered. srcRect Specifies the rectangle in the image to be rendered to the destination rectangle.  If NULL, the entire image is rendered. 2.9 Sink support Method VOID Image::PushIntoSink( IN Sink * sink) Description: Pushes the image into the specified Sink object. Return value: None.  Call GetLastStatus() to check for errors. Parameters: Specifies the sink to which image data will be pushed. 3.0 The Bitmap class The Bitmap class is a subclass of Image.  It represents the image data decoded into a memory buffer.  There is no need use the decode function Image.ContinueLoad since the image data has already been decoded.  In addition to the Image functions inherited, the different categories of functions are: Function summary Contstructors Bitmap(width, height, pixelFormat  Bitmap(image  Properties Bitmap.GetSize Pixel data access Bitmap.Lock Bitmap.Unlock Palette support Bitmap.GetPalette Bitmap.SetPalette Processing opertions Bitmap.Resize Bitmap.Flip Bitmap.Rotate Bitmap.AdjustBrightness Bitmap.AdjustContrast Bitmap.AdjustGamma Graphics Bitmap.GetGraphics (TBD) 3.1 Bitmap object creation Method Bitmap::Bitmap( IN UINT width, IN UINT height, IN PixelFormatID pixelFormat) Description: Constructor that creates a new Bitmap. Parameters: width, height Specifies pixel dimensions of the new Bitmap. pixelFormat Specifies pixel format of the new Bitmap.  May be one of the following: PixelFormat1BppIndexed 1bpp indexed color PixelFormat4BppIndexed bpp indexed color PixelFormat8BppIndexed 8bpp indexed color PixelFormat16BppGrayscale 16bpp grayscale PixelFormat16BppRGB555 16bpp RGB 5-5-5 (blue in low-order bits) PixelFormat16BppRGB565 16bpp RGB 5-6-5 PixelFormat16BppARGB1555 16bpp ARGB 1-5-5-5 PixelFormat24BppRGB 24bpp RGB (blue in low-order byte) PixelFormat32BppRGB 32bpp RGB (high order byte unused) PixelFormat32BppARGB 32bpp ARGB, non-premultiplied alpha PixelFormat32BppPARGB 32bpp ARGB, premultiplied alpha PixelFormat48BppRGB 48bpp RGB PixelFormat64BppARGB 64bpp ARGB, non-premultiplied alpha PixelFormat64BppPARGB 64bpp ARGB, premultiplied alpha  Method Bitmap::Bitmap( IN Image * image, IN UINT width = 0, IN UINT height = 0, IN PixelFormatID pixelFormat = PixelFormatDontCare, IN InterpolationHint hints = InterpolateDontCare) Description: Constructor that creates a new Bitmap based on the specified image. Parameters: width, height Specifies pixel dimensions of the new Bitmap. pixelFormat May be one of the following: PixelFormatDontCare Image object chooses the format. PixelFormat1BppIndexed 1bpp indexed color PixelFormat4BppIndexed bpp indexed color PixelFormat8BppIndexed 8bpp indexed color PixelFormat16BppGrayscale 16bpp grayscale PixelFormat16BppRGB555 16bpp RGB 5-5-5 (blue in low-order bits) PixelFormat16BppRGB565 16bpp RGB 5-6-5 PixelFormat16BppARGB1555 16bpp ARGB 1-5-5-5 PixelFormat24BppRGB 24bpp RGB (blue in low-order byte) PixelFormat32BppRGB 32bpp RGB (high order byte unused) PixelFormat32BppARGB 32bpp ARGB, non-premultiplied alpha PixelFormat32BppPARGB 32bpp ARGB, premultiplied alpha PixelFormat48BppRGB 48bpp RGB PixelFormat64BppARGB 64bpp ARGB, non-premultiplied alpha PixelFormat64BppPARGB 64bpp ARGB, premultiplied alpha hints Specifies interpolation algorithm to use.  May be one of the following values: InterpolateDontCare t care.  Let Image object pick the default. InterpolateNearestNeighbor Use point sampling. InterpolateBilinear Use bilinear interpolation. InterpolateAveraging Use area averaging for scaling down, bilinear interpolation when scaling up. InterpolateBicubic Use bicubic interpolation. 3.2 Bitmap properties Method VOID Bitmap::GetSize( OUT Size * size) Description: Get the bitmap dimensions in pixels. Return value: None.  Call GetLastStatus() to check for errors. Parameters: Returns the pixel dimensions of the Bitmap. 3.3. Direct pixel data access Method VOID Bitmap::LockBits( IN const RECT * rect, IN UINT flags, IN PixelFormat, IN OUT BitmapData * lockedBitmapData Description: Lets caller directly access the specified area of the bitmap. Comment: The lock is exclusive.  Bitmap::LockBits will not succeed if Bitmap is already locked. Parameters: Specifies the area of interest in the Bitmap.  If NULL, the entire Bitmap will be locked. flags May be a combination of the following.  Either ImageLockRead or ImageLockWrite flags must be set: ImageLockRead Locking Bitmap for reading. ImageLockWrite Locking Bitmap for writing. ImageLockUserInput Application will supply buffer for the pixel data.  If set, the lockedBitmapData structure will specify the buffer via the Scan0 and Stride fields. pixelFormat May be one of the following: PixelFormatDontCare Format determined by Bitmap object. PixelFormat1BppIndexed 1bpp indexed color PixelFormat4BppIndexed bpp indexed color PixelFormat8BppIndexed 8bpp indexed color PixelFormat16BppGrayscale 16bpp grayscale PixelFormat16BppRGB555 16bpp RGB 5-5-5 (blue in low-order bits) PixelFormat16BppRGB565 16bpp RGB 5-6-5 PixelFormat16BppARGB1555 16bpp ARGB 1-5-5-5 PixelFormat24BppRGB 24bpp RGB (blue in low-order byte) PixelFormat32BppRGB 32bpp RGB (high order byte unused) PixelFormat32BppARGB 32bpp ARGB, non-premultiplied alpha PixelFormat32BppPARGB 32bpp ARGB, premultiplied alpha PixelFormat48BppRGB 48bpp RGB PixelFormat64BppARGB 64bpp ARGB, non-premultiplied alpha PixelFormat64BppPARGB 64bpp ARGB, premultiplied alpha lockedBitmapData Returns a BitmapData structure.   The lockedBitmapData->Reserved field should be initialized to zero before calling Bitmap::LockBits(). If IMGLOCK_USERINPUT is specified in flags, the lockedBitmapData->Scan0 and lockedBitmapData->Stride fields should be set to valid values to specify the application supplied buffer. Method VOID Bitmap::UnlockBits( IN const BitmapData * lockedBitmapData) Description: Unlocks a bitmap locked by a previous Bitmap::LockBits() call. Parameters: lockedBitmapData Specifies a BitmapData structure returned by a previous call to Bitmap::LockBits(). Structure typedef struct tagBitmapData UINT Width, Height; INT Stride; PixelFormatID PixelFormat; VOID * Scan0; UINT_PTR Reserved; } BitmapData; Description: Describes a bitmap locked by Bitmap::LockBits(). Members: Width, Height Dimensions of the bitmap image area in pixels. Stride Number of bytes separating two vertically adjacent pixels (i.e., bytes between scanlines).  Negative for bottom-up bitmap images. PixelFormat Pixel format. Scan0 Pointer to the beginning of the first scanline. Reserved Reserved.  Application must not change this while bitmap is locked. 3.4 Palette support Method VOID Bitmap::GetPalette( OUT ColorPalette ** palette) Description: Retrieve the color palette associated with the Bitmap. Return value: None.  Call GetLastStatus() to check for errors. Parameters: palette Returns a pointer to a copy of the color palette.  Caller is responsible for freeing this memory. Method VOID Bitmap::SetPalette( IN const ColorPalette * palette) Description: Set the color palette associated with the Bitmap. Return value: None.  Call GetLastStatus() to check for errors. Parameters: palette Points to the ColorPalette that will set for this Bitmap. Structure typedef tagColorPalette UINT Flags; UINT Count; ARGB Entries[1]; } ColorPalette; Description: Color palette information. Members: Flags May be any combination of: PALFLAG_HASALPHA Palette Entries have valid alpha values. PALFLAG_Grayscale Palette contains only grayscale colors. PALFLAG_HALFTONE Palette is used for halftoning. Count Number of palette Entries. Entries Array of Count color values for each palette index. 3.5 Bitmap processing operations These functions implement some simple bitmap processing operations. Method VOID Bitmap::Resize( IN UINT newWidth, IN UINT newHeight, IN PixelFormatID newPixelFormat = PixelFormatDontCare, IN InterpolationHint hints = InterpolateDefault) Description: Scale the bitmap to a new size. Parameters: newWidth, newHeight Specifies the new pixel dimensions of the bitmap. newPixelFormat Specifies the new pixel format of the bitmap (PixelFormatDontCare means that the current format will be preserved). hints Specifies interpolation algorithm to use.  May be one of the following values: InterpolateDontCare t care.  Let Image object pick the default. InterpolateNearestNeighbor Use point sampling. InterpolateBilinear Use bilinear interpolation. InterpolateAveraging Use area-averaging for scaling down, bilinear interpolation when scaling up. InterpolateBicubic Use bicubic interpolation. Method VOID Bitmap::Flip( IN BOOL flipX, IN BOOL flipY) Description: Flips the image along the x- and/or y-axis. Return value: None.  Call GetLastStatus() to check for errors. Parameters: flipX If TRUE, flip image along the x-axis. flipY If TRUE, flip image along the y-axis. Method VOID Bitmap::Rotate( IN FLOAT angle, IN InterpolationHint hints ) Description: Rotate the image by the specified angle. Return value: None.  Call GetLastStatus() to check for errors. Comment: Current implementation only supports angles that are multiples of 90 degrees.  Will fix for RTM. Parameters: angle Specifies the rotation angle (counter-clockwise). hints Specifies interpolation algorithm to use.  May be one of the following values: InterpolateDontCare t care.  Let Image object pick the default. InterpolateNearestNeighbor Use point sampling. InterpolateBilinear Use bilinear interpolation. InterpolateAveraging Use area-averaging for scaling down, bilinear interpolation when scaling up. InterpolateBicubic Use bicubic interpolation. Method VOID Bitmap::AdjustBrightness( IN FLOAT percentage) Description: Adjusts the bitmap brightness. Normalized to 1.0, the new value is: new value =  old value + percentage. The new value is clipped to the range [0.0, 1.0]. Return value: None.  Call GetLastStatus() to check for errors. Parameters: percentage Percentage to brighten the image (positive increases, negative decreases). Method VOID Bitmap::AdjustContrast( IN FLOAT shadow, IN FLOAT highlight) Description: Adjust the bitmap contrast. Normalized to 1.0, the old value 0.0 maps to the specified shadow color and the old value 1.0 maps to the specified highlight value.  Values in between are linearly interpolated. Return value: None.  Call GetLastStatus() to check for errors. Parameters: shadow Specifies the new value to which zero values are assigned. highlight Specifies the new value to which max values are assigned. Method VOID Bitmap::AdjustGamma( IN FLOAT gamma) Description: Adjust the gamma of the bitmap. Normalized to 1.0, the new value is: new value = old valuegamma Return value: None.  Call GetLastStatus() to check for errors. Parameters: gamma Specifies gamma by values are adjusted. TBD Function Graphics * Bitmap::GetGraphics() Description: A way to derive a graphics object that can draw on the bitmap. 4.0 The Sink interface The Sink interface allows an application to operate on the raw image data or the decoded data as it chooses.  Data is transferred from the Image or Bitmap object to the Sink via a push model. Method VOID Sink::BeginSink( IN OUT ImageInfo * imageInfo) Description: Call to begin pushing image data to the sink. Return value: None.  Call GetLastStatus() to check for errors. Parameters: imageInfo For now, please refer to the COM based interface for a description of the negotiation between sink and source.  I'd like to get feedback on how this can be simplified?  Or is there a need for everything in there? Method VOID Sink::EndSink( Status successCode) Description: Call when finished with the sink. Return value: None.  Call GetLastStatus() to check for errors. Parameters: successCode If no error, set status to this value. Method VOID Sink::SetPalette( IN const ColorPalette * palette) Description: Call to pass color palette information to the sink. Return value: None.  Call GetLastStatus() to check for errors. Parameters: palette Points to color palette information. TBD Method VOID Sink::PushProperties( ,  IN IPropertySetStorage * propSet,  Comment: TBD: The whole Properties thing is a little vague. Method VOID Sink::PushRawData( IN const VOID * buffer, IN UINT bufferSize) Description: Called only if caller and Sink agreed to pass raw image data. Return value: None.  Call GetLastStatus() to check for errors. Parameters: buffer Points to buffer containing raw image data. bufferSize Specifies buffer size. Method VOID Sink::PushPixelData( IN const RECT * rect, IN const BitmapData * bitmapData, IN BOOL lastPass) Description: Called only if caller and Sink agreed to pass ImageFormatMemoryBitmap.  For this function, the caller is responsible for providing the memory used to pass the pixel data. Return value: None.  Call GetLastStatus() to check for errors. Comment: If the caller does not have the bitmap already in memory and does not wish to allocate buffer space, it may instead want to use the GetPixelDataBuffer/ReleasePixelDataBuffer methods which require the Sink to provide the memory. Parameters: Specifies the area of the image being passed to the sink via bitmapData. bitmapData Specifies the bitmap that contains the pixel data.  lastPass If TRUE, then this is the last chunk of image data. Method VOID Sink::GetPixelDataBuffer( IN const RECT * rect, IN PixelFormatID pixelFormat, IN BOOL lastPass, OUT BitmapData * bitmapData) Description: Called only if caller and Sink agreed to pass ImageFormatMemoryBitmap.  The sink will return a bitmap that the caller fills with pixel data.  The caller must use ReleasePixelDataBuffer to tell the Sink it has finished copying the pixel data. Return value: None.  Call GetLastStatus() to check for errors. Parameters: Specifies the area of the image being passed to the sink via bitmapData. pixelFormat Specifies the format for the bitmap the Sink will return. lastPass If TRUE, then this is the last chunk of image data. bitmapData Sink will return the bitmap it allocates here. Method VOID Sink::ReleasePixelDataBuffer( IN const BitmapData * bitmapData Description: Called only if caller and Sink agreed to pass ImageFormatMemoryBitmap.  Caller will invoke when it has finished copying pixel data into the bitmap returned by GetPixelDataBuffer. Return value: None.  Call GetLastStatus() to check for errors. Parameters: bitmapData The bitmap returned by GetPixelDataBuffer.  The pixel data is in here. Method Status Sink::GetLastStatus() Description: Retrieve the last status.  Calling will reset the status to Ok. Comment: TBD: Perhaps we can break with GDI+ conventions here and allow the various Sink functions to return Status rather than use the GetLastStatus semantics. Return value: Status.  Status value Ok is normal. 5.0 Codec Management These functions are used to manage codecs.  It includes functions to enumerate the encoders and decoders as well as functions to add and remote application supplied codecs. Function UINT GetInstalledDecoders( IN UINT count, OUT ImageCodecInfo ** decoders Description: Enumerates available decoders. Return value: Number of decoders available. Parameters: count If decoders is non-NULL, specifies the capacity of the decoders return buffer. decoders If non-NULL, function will fill the buffer with an array of ImageCodecInfo structures. Function UINT GetInstalledEncoders( IN UINT count, OUT ImageCodecInfo ** encoders Description: Enumerates available encoders. Return value: Number of encoders available. Parameters: count If encoders is non-NULL, specifies the capacity of the decoders return buffer. encoders If non-NULL, function will fill the buffer with an array of ImageCodecInfo structures. TBD Function InstallCodec Description: TBD Function UninstallCodec Description: 6.0 The Graphics object The Graphics object will support drawing an Image via Graphics.DrawImage and will support some state that allows advanced color management: Graphics.ColorAjust and Graphics.Halftone. TBD Function Graphics::DrawImage Description: TBD Function Graphics::ColorAdjust Description: TBD Function Graphics::Halftone Description: 7.0 Open Issues There are still some outstanding design and/or scenario issues.  Feedback on these would be valuable in determining priorities and design constraints. What are the scenarios in which non-blocking behavior is required?  What problems would it solve? What are the scenarios in which Sinks are required?  What problem do they solve? Would CancelDC semantics for Graphics operations (including Imaging operations) be useful? What are the requirements for color adjustment and halftoning? What are the requirements for ICC support? What kind of Properties/metadata support is needed?  What will it be used for? Microsoft Confidential Page   PAGE   DATE  8/25/99
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\gdiplus\engine\imaging\testing.txt ===
Testing guidelines for image filters:

imgtest:  run imgtest on several images (there's a large collection of
images in \\alchemy\gold\graphics).  Test basic functionality including:

decoder:
- decoding into all scalers
- conversion into all in-memory formats (note--you will need to reload the
image after each conversion, or else you will be testing conversion between
in memory formats instead of conversion from your decoder to the in memory
format)
- all the processing filters (as above, make sure this is not done with a
converted image)
- properties (make sure it doesn't crash)
- export:  make sure you can encode into all available formats (testing
communication between your decoder and all the encoder sinks).

encoder:
- encoding from all in memory formats
- encoding directly from all decoders.
- encode into your format, and load the new file using imgtest.exe.  Encode
the new file one more time and reload that file (in case there are some subtle
bugs with your encoding)


thumbtst.exe:  run thumbtst.exe on all the files in \\alchemy\gold of your
format.  Make sure nothing crashes.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\gdiplus\engine\imaging\gif\docs\gifextensions.txt ===
Preface
]
As you know GIF standard allows multiple images to be stored in a single file which can be played as an animation. These files are called multiple image GIFs, multi-image GIFs, animated GIFs or GIF animations. This faculty was implemented in GIF87a standard. And play speed control faculty was implemented in GIF89a standard. But, GIF89a specification didn't define looping GIF animations which become popular on Web pages. They were defined by Netscape Communications Corporation. 
This page introduces a de facto standard format for the looping GIF animations which was defined by Netscape Communications Corporation for Netscape Navigator 2.0.

The information on this page is not described based on the official information by Netscape but it is described by me (the author of GIF Info) based on Mozilla source code. If you find errors or have suggestions, please contact me. "Yukinori Watanabe" <xyuki@geocities.co.jp> 

NETSCAPE2.0 Application Extension

a. Description.
This block indicates decoders to play back the entire GIF Data Stream iteratively or to wait image randering until its image buffer full. 
Since this block is defined based on the Application Extension, this block is transparent to decoders which don't support this block. Therefore such decoders don't play back the entire GIF Data Stream iteratively. 
This extension was defined for Netscape Navigator 2.0 by Netscape Communications Corporation. Microsoft Corporation implemented this extension into Internet Explorer 3.0. 
b. Required Version.
89a. 
c. Syntax.

      7 6 5 4 3 2 1 0        Field Name                    Type
     +---------------+
  0  |     0x21      |       Extension Introducer          Byte
     +---------------+
  1  |     0xFF      |       Application Extension Label   Byte
     +---------------+

     +---------------+
  0  |     0x0B      |       Block Size                    Byte
     +---------------+
  1  |      'N'      |
     +-             -+
  2  |      'E'      |
     +-             -+
  3  |      'T'      |
     +-             -+
  4  |      'S'      |
     +-             -+       Application Identifier        8 Bytes
  5  |      'C'      |
     +-             -+
  6  |      'A'      |
     +-             -+
  7  |      'P'      |
     +-             -+
  8  |      'E'      |
     +---------------+
  9  |      '2'      |
     +-             -+
 10  |      '.'      |   Application Authentication Code   3 Bytes
     +-             -+
 11  |      '0'      |
     +---------------+

     +---------------+ ------------------------+
  0  |       N       |   Data Sub-block Size   |
     +---------+-----+                         | Netscape Extension Data Sub-block
  1  |         |     |   <Packed Fields>       |
     +---------+-----+                         +-- Repeated as many times as
     |               |                         |   necessary, including zero.
     /               /   Data Bytes            |
  N  |               |                         |
     +---------------+ ------------------------+

     :   :   :   :   :

     +---------------+
  0  |     0x00      |       Block Terminator              Byte
     +---------------+


     <Packed Fields>  =      Reserved                      5 Bits
                             Netscape Extension Code       3 Bits


Netscape Extension Data Sub-blocks

  The Looping Extension Data Sub-block
     +---------------+
  0  |     0x03      |       Data Sub-block Size           Byte
     +---------+-----+
  1  |         |0 0 1|       <Packed Fields>               Byte
     +---------+-----+
  2  |               |
     +-             -+       Loop Count                    Unsigned
  3  |               |
     +---------------+

  The Buffering Extension Data Sub-block
     +---------------+       
  0  |     0x05      |       Data Sub-block Size           Byte
     +---------+-----+
  1  |         |0 1 0|       <Packed Fields>               Byte
     +---------+-----+
  2  |               |
     +-             -+
  3  |               |
     +-             -+       Buffering Size                Unsigned long
  4  |               |
     +-             -+
  5  |               |
     +---------------+

  NOTE:  The Data Sub-block Sizes of the Netscape Extension Data Sub-blocks
  described here  may not be always fixed values.  Code written based on this
  information should be designed in a flexible way to accommodate any changes
  in the future definition.


i. Extension Introducer
Defines this block as an extension. This field contains the fixed value 0x21. 
 
ii. Application Extension Label
Identifies the block as an Application Extension. This field contains the fixed value 0xFF. 
 
iii. Block Size
Number of bytes in this extension block, following the Block Size field, up to but not including the beginning of the Application Data. This field contains the fixed value 0x0B. 
 
iv. Application Identifier
Sequence of eight printable ASCII characters used to identify the application owning the Application Extension. This field contains the fixed value "NETSCAPE". 
 
v. Application Authentication Code
Sequence of three bytes used to authenticate the Application Identifier. This field contains the fixed value "2.0". 
 
vi. Data Sub-block Size
Number of bytes in this Data Sub-block, following the Data Sub-block Size field, up to but not including the Block Terminator or the next Data Sub-block. The size must be within 1 and 255 bytes. 
 
vii. Netscape Extension Code
Indicates the function of the Netscape Extention Data Sub-block.
Values
Meaning
1
Indicates decoders to play back the entire GIF Data Stream specified number of times. The Loop Count is given in the next Unsigned (16 bits) field.
See the Looping Extension data sub-block.
2
Indicates decoders to wait for specified number of bytes to enter buffer. The Buffering Size is given in the next Unsigned long (32 bits) field.
See the Buffering Extension data sub-block.
0, 3-7
To be defined.
viii. 
 
ix. Loop Count
Indicates the number of iterations the loop should be executed.
Values
Meaning
0
Indicates the loop is infinite.
1 .. 0xFFFF
Indicates the number of iterations the loop should be executed.
x. 
Note: Netscape Navigator 2.x ignores this values and the loop is infinite. This values are supported by Netscape Navigator 3.0 or later and Microsoft Internet Explorer 3.0 or later. 
 
xi. Buffering Size
Indicates the number of bytes that the GIF Data Stream should be buffered before the graphics rendering process is started. 
 
xii. Block Terminator
This zero-length data block marks the end of the Application Extension Block. 
 
d. Extensions and Scope.
The scope of the Looping Extension is the entire GIF Data Stream. The scope of the Buffering Extension is none. This block cannot be modified by any extension. 
e. Recommendations.
The Looping Extension must appear immediately after the Global Color Table. If there is no Global Color Table in the GIF Data Stream, this block must appear immediately after the Logical Screen Descriptor. It means that the Looping Extension must appear before any Graphic-Rendering Block appears. 
The Buffering Extension may appear at any place which the Application Extension can appear. 
If the Looping Extension is used, the Graphic Control Extensions should not be omitted to specify the Delay Time for each Graphic-Rendering Blocks. 

ANIMEXTS1.0 Application Extension

This extension is the same format that both the Application Identifier ("NETSCAPE") and the Application Authentication Code ("2.0") of the NETSCAPE2.0 Application Extension are replaced by "ANIMEXTS" and "1.0". 
This extension is supported by Netscape Navigator 2.0 or later. Microsoft Internet Explorer doesn't support this extension (the current version is 4.0x).
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\gdiplus\engine\imaging\gif\docs\todo.txt ===
Split the encoder and decoder apart.  Currently they are both partially integrated in the GpGifCodec class but they should be in separate classes because they don't share much functionality.

saucer1a.gif has a few lines of garbage data at the bottom of the first frame and anispark.gif has garbage all over it.  I think that these two are caused by the same problem having to do with restoring the background after a frame is complete.

Non-blocking decode needs to be implemented.

If the client asks for a specified frame and it is the last one that was decoded then that frame is already in the cache.  Right now the decoder re-decodes all of the frames up to that point to get to the current frame.

Figure out if the delay needs to be set to a minimum value when decoding animated gifs.

Calculate pixelaspect in encode.

Encoder needs to handle animation and alpha.
Encoder should only use gif89 when nescessary.
Encoding with interlacing does not work nor is there a way to specify it when encoding.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\gdiplus\engine\imaging\gif\docs\howtogif.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft If you are reading this then for some reason you need to work with the Imaging gif decoder TitleIf you are reading this then for some reason you need to work with the Imaging gif decoder Aaron Lieberman Normal.dot Aaron Lieberman Microsoft Word 9.0bjbjU GpGifCodec code documentation If you are reading this then for some reason you need to work with the imaging gif decoder.  This will be an introduction document on how it works and what you need to know to add to the code.  A good place to start is the gif format itself.  The structures to contain the headers are in the file giffile.h.  A gif file has a series of 'chunks', some required and some not.  Each is a  distinct element in the gif.  The grammar for the chunk organization, taken directly from the gif89 spec is listed below: <GIF Data Stream> ::=     Header <Logical Screen> <Data>* Trailer <Logical Screen> ::=      Logical Screen Descriptor [Global Color Table] <Data> ::=                <Graphic Block>  |                           <Special-Purpose Block> <Graphic Block> ::=       [Graphic Control Extension] <Graphic-Rendering Block> <Graphic-Rendering Block> ::=  <Table-Based Image>  |                                Plain Text Extension <Table-Based Image> ::=   Image Descriptor [Local Color Table] Image Data <Special-Purpose Block> ::=    Application Extension  |                                Comment Extension After looking through the data structures, proceed to gifcodec.hpp.  This is the header for both the functions that implement the COM interfaces and also for the private functions and member variables needed to do the actual work.  These functions are defined in gifcodec.cpp, gifdecoder.cpp, gifencoder.cpp and gifproc.cpp.  As the encoder is rather straight forward I am going to mainly talk about the decoder.  When a gif file is being read, the first decoder operation is InitDecoder which just initializes some variables.  The following call is usually to GetImageInfo which fills out an ImageInfo structure containing the basic info (width, height) of the image being decoder.  It also sets up an internal GifFileHeader structure for later use.  If the gif client understands animation then the next functions that would be called would be SelectActiveFrame probably followed by GetProperties but as this is relatively easy to understand if you follow the rest of the code, I'm going to skip over it to more complex matters. The next decoder function called is BeginDecode.  It is another initialization function like InitDecoder but it is called once per frame.  Decode is called next which calls DoDecode which does the brunt of the work (I will get to that in a second) and then next is EndDecode which just cleans things up after the frame is done. The first thing that DoDecode does is read in the gif header if it has not been read in yet by GetImageInfo.  Next, if the sink hasn t been started it does that and initialized the GifFrameCache for animation.  Then the actual gif reading starts.  Chunks are read in and processed one at a time by the main loop.  When the terminator chunk is found or if an error is encountered then the loop completes. To read in a chunk, a single byte is read in.  If that byte specifies an image chunk then it is decoded and if it is a terminator chunk then the loop exits.  If an extension chunk is read then another byte is read to figure out which application chunk was read and then the correct application extension is processed is processed. If the identifier specifies an image chunk then ProcessImageChunk (located in gifproc.cpp) is called.  When trying to understand ProcessImageChunk, first read the comment block at the top of the file to understand the variable  gifstate .  Then go down to the main function and start from there.  The first thing that happens is that the decoder reads in the image descriptor.  This gives info about how the frame relates to the entire gif image.  One thing that the descriptor specifies is whether the image has a palette of its own.  If it does then the palette immediately follows and is read in, processed and sent to the cache.  The current palette, whether it is the global one or a local palette is sent to the sink. The byte specifying the code size is read next and given to the constructor of LZWDecompressor which was taken from MSO9 (without any changes) and is located in the lzwlib subdirectory.  The way that the LZWDecompressor works is that it has 6 public members to do the buffer management.  The LZWDecompressor client (us) allocates an input and an output buffer and sets m_pbIn to the input buffer address and m_pbOut to the output buffer address.  m_cbIn and m_cbOut are set to the two buffers  sizes, respectively.  Then, we call Process() on the decoder and when it returns, either the file will be completely decompressed and the data located in the output buffer or m_fNeedInput or m_fNeedOutput will be true.  If m_fNeedInput is true then m_pbIn is pointing to the end of the input buffer and m_cbIn is 0.  m_cbOut will be equal to the number of free bytes left in the output buffer and m_pbOut will point to the next free byte in the buffer.   We then need to unload the input buffer and give the decompressor a clean one.  The respective opposite goes if m_fNeedOutput is true with one exception: if m_fNeedOutput is true, m_cbOut does not necessarily need to be 0.  Since the decompressor does not respect scan lines, it is possible to run out of output buffer space while having an incomplete scan line and just needing a few more bytes to complete it.  In this case, we have an overflow buffer (Overflow, defined in overflow.hpp) that we give to the decompressor to write into.  When the decompressor writes enough data to finish off the scan line that we are trying to complete then we copy that data to the scan line and give it to the sink.  The extra overflow in the overflow buffer beyond the data needed to finish the scan line is copied into the output buffer to be used in the next scan line.  Anytime a scan line is completed then it is given to the sink if gifstate is 1 or 2, or it is held in the GifBuffer (gifbuffer.hpp, gifbuffer.cpp) until the end of the frame when GifBuffer.FinishFrame() is called.  In these cases the whole image is sent to the sink at once. This concludes my introduction to the GpGifCodec code.  I hope that it is useful for you to read to understand my code.  I apologize for any bad or inconvenient coding that I may have done while writing the codec.  If you find something done strangely, please do me the favor and look at it twice before you decide that was done poorly because I tried to sacrifice code cleanliness for efficiency on several occasions, especially to avoid making extra copies of the image data.  Thank you for reading this.  Feel free to email me at alieberm@uiuc.edu if you have any questions. -Aaron Lieberman
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\windows\advcore\gdiplus\engine\imaging\gif\docs\gif89a.doc ===
Cover Sheet for the GIF89a Specification


    DEFERRED CLEAR CODE IN LZW COMPRESSION

    There has been confusion about where clear codes can be found in the
    data stream.  As the specification says, they may appear at anytime.  There
    is not a requirement to send a clear code when the string table is full.

    It is the encoder's decision as to when the table should be cleared.  When
    the table is full, the encoder can chose to use the table as is, making no
    changes to it until the encoder chooses to clear it.  The encoder during
    this time sends out codes that are of the maximum Code Size.

    As we can see from the above, when the decoder's table is full, it must
    not change the table until a clear code is received.  The Code Size is that
    of the maximum Code Size.  Processing other than this is done normally.

    Because of a large base of decoders that do not handle the decompression in
    this manner, we ask developers of GIF encoding software to NOT implement
    this feature until at least January 1991 and later if they see that their
    particular market is not ready for it.  This will give developers of GIF
    decoding software time to implement this feature and to get it into the
    hands of their clients before the decoders start "breaking" on the new
    GIF's.  It is not required that encoders change their software to take
    advantage of the deferred clear code, but it is for decoders.

    APPLICATION EXTENSION BLOCK - APPLICATION IDENTIFIER

    There will be a Courtesy Directory file located on CompuServe in the PICS
    forum.  This directory will contain Application Identifiers for Application
    Extension Blocks that have been used by developers of GIF applications.
    This file is intended to help keep developers that wish to create
    Application Extension Blocks from using the same Application Identifiers.
    This is not an official directory; it is for voluntary participation only
    and does not guarantee that someone will not use the same identifier.

    E-Mail can be sent to Larry Wood (forum manager of PICS) indicating the
    request for inclusion in this file with an identifier.









































                        GRAPHICS INTERCHANGE FORMAT(sm)

                                  Version 89a

                            (c)1987,1988,1989,1990

                                   Copyright
                            CompuServe Incorporated
                                Columbus, Ohio






























CompuServe Incorporated                           Graphics Interchange Format
Document Date : 31 July 1990                            Programming Reference










                               Table of Contents

Disclaimer.................................................................  1

Foreword...................................................................  1

Licensing..................................................................  1

About the Document.........................................................  2

General Description........................................................  2

Version Numbers............................................................  2

The Encoder................................................................  3

The Decoder................................................................  3

Compliance.................................................................  3

About Recommendations......................................................  4

About Color Tables.........................................................  4

Blocks, Extensions and Scope...............................................  4

Block Sizes................................................................  5

Using GIF as an embedded protocol..........................................  5

Data Sub-blocks............................................................  5

Block Terminator...........................................................  6

Header.....................................................................  7

Logical Screen Descriptor..................................................  8

Global Color Table......................................................... 10

Image Descriptor........................................................... 11

Local Color Table.......................................................... 13

Table Based Image Data..................................................... 14

Graphic Control Extension.................................................. 15

Comment Extension.......................................................... 17

Plain Text Extension....................................................... 18

Application Extension...................................................... 21

Trailer.................................................................... 23











Quick Reference Table...................................................... 24

GIF Grammar................................................................ 25

Glossary................................................................... 27

Conventions................................................................ 28

Interlaced Images.......................................................... 29

Variable-Length-Code LZW Compression....................................... 30

On-line Capabilities Dialogue.............................................. 33


















































                                                                         1


1. Disclaimer.

The information provided herein is subject to change without notice. In no
event will CompuServe Incorporated be liable for damages, including any loss of
revenue, loss of profits or other incidental or consequential damages arising
out of the use or inability to use the information; CompuServe Incorporated
makes no claim as to the suitability of the information.


2. Foreword.

This document defines the Graphics Interchange Format(sm). The specification
given here defines version 89a, which is an extension of version 87a.

The Graphics Interchange Format(sm) as specified here should be considered
complete; any deviation from it should be considered invalid, including but not
limited to, the use of reserved or undefined fields within control or data
blocks, the inclusion of extraneous data within or between blocks, the use of
methods or algorithms not specifically listed as part of the format, etc. In
general, any and all deviations, extensions or modifications not specified in
this document should be considered to be in violation of the format and should
be avoided.


3. Licensing.

The Graphics Interchange Format(c) is the copyright property of CompuServe
Incorporated. Only CompuServe Incorporated is authorized to define, redefine,
enhance, alter, modify or change in any way the definition of the format.

CompuServe Incorporated hereby grants a limited, non-exclusive, royalty-free
license for the use of the Graphics Interchange Format(sm) in computer
software; computer software utilizing GIF(sm) must acknowledge ownership of the
Graphics Interchange Format and its Service Mark by CompuServe Incorporated, in
User and Technical Documentation. Computer software utilizing GIF, which is
distributed or may be distributed without User or Technical Documentation must
display to the screen or printer a message acknowledging ownership of the
Graphics Interchange Format and the Service Mark by CompuServe Incorporated; in
this case, the acknowledgement may be displayed in an opening screen or leading
banner, or a closing screen or trailing banner. A message such as the following
may be used:

      "The Graphics Interchange Format(c) is the Copyright property of
      CompuServe Incorporated. GIF(sm) is a Service Mark property of
      CompuServe Incorporated."

For further information, please contact :

      CompuServe Incorporated
      Graphics Technology Department
      5000 Arlington Center Boulevard
      Columbus, Ohio  43220
      U. S. A.

CompuServe Incorporated maintains a mailing list with all those individuals and
organizations who wish to receive copies of this document when it is corrected







                                                                         2


or revised. This service is offered free of charge; please provide us with your
mailing address.


4. About the Document.

This document describes in detail the definition of the Graphics Interchange
Format.  This document is intended as a programming reference; it is
recommended that the entire document be read carefully before programming,
because of the interdependence of the various parts. There is an individual
section for each of the Format blocks. Within each section, the sub-section
labeled Required Version refers to the version number that an encoder will have
to use if the corresponding block is used in the Data Stream. Within each
section, a diagram describes the individual fields in the block; the diagrams
are drawn vertically; top bytes in the diagram appear first in the Data Stream.
Bits within a byte are drawn most significant on the left end.  Multi-byte
numeric fields are ordered Least Significant Byte first. Numeric constants are
represented as Hexadecimal numbers, preceded by "0x".  Bit fields within a byte
are described in order from most significant bits to least significant bits.


5. General Description.

The Graphics Interchange Format(sm) defines a protocol intended for the on-line
transmission and interchange of raster graphic data in a way that is
independent of the hardware used in their creation or display.

The Graphics Interchange Format is defined in terms of blocks and sub-blocks
which contain relevant parameters and data used in the reproduction of a
graphic. A GIF Data Stream is a sequence of protocol blocks and sub-blocks
representing a collection of graphics. In general, the graphics in a Data
Stream are assumed to be related to some degree, and to share some control
information; it is recommended that encoders attempt to group together related
graphics in order to minimize hardware changes during processing and to
minimize control information overhead. For the same reason, unrelated graphics
or graphics which require resetting hardware parameters should be encoded
separately to the extent possible.

A Data Stream may originate locally, as when read from a file, or it may
originate remotely, as when transmitted over a data communications line. The
Format is defined with the assumption that an error-free Transport Level
Protocol is used for communications; the Format makes no provisions for
error-detection and error-correction.

The GIF Data Stream must be interpreted in context, that is, the application
program must rely on information external to the Data Stream to invoke the
decoder process.


6. Version Numbers.

The version number in the Header of a Data Stream is intended to identify the
minimum set of capabilities required of a decoder in order to fully process the
Data Stream.  An encoder should use the earliest possible version number that
includes all the blocks used in the Data Stream. Within each block section in
this document, there is an entry labeled Required Version which specifies the







                                                                         3


earliest version number that includes the corresponding block.  The encoder
should make every attempt to use the earliest version number covering all the
blocks in the Data Stream; the unnecessary use of later version numbers will
hinder processing by some decoders.


7. The Encoder.

The Encoder is the program used to create a GIF Data Stream. From raster data
and other information, the encoder produces the necessary control and data
blocks needed for reproducing the original graphics.

The encoder has the following primary responsibilities.

            - Include in the Data Stream all the necessary information to
            reproduce  the graphics.

            - Insure that a Data Stream is labeled with the earliest possible
            Version Number that will cover the definition of all the blocks in
            it; this is to ensure that the largest number of decoders can
            process the Data Stream.

            - Ensure encoding of the graphics in such a way that the decoding
            process is optimized. Avoid redundant information as much as
            possible.

            - To the extent possible, avoid grouping graphics which might
            require resetting hardware parameters during the decoding process.

            - Set to zero (off) each of the bits of each and every field
            designated as reserved. Note that some fields in the Logical Screen
            Descriptor and the Image Descriptor were reserved under Version
            87a, but are used under version 89a.


8. The Decoder.

The Decoder is the program used to process a GIF Data Stream. It processes the
Data Stream sequentially, parsing the various blocks and sub-blocks, using the
control information to set hardware and process parameters and interpreting the
data to render the graphics.

The decoder has the following primary responsibilities.

            - Process each graphic in the Data Stream in sequence, without
            delays other than those specified in the control information.

            - Set its hardware parameters to fit, as closely as possible, the
            control information contained in the Data Stream.


9. Compliance.

An encoder or a decoder is said to comply with a given version of the Graphics
Interchange Format if and only if it fully conforms with and correctly
implements the definition of the standard associated with that version.  An







                                                                         4


encoder or a decoder may be compliant with a given version number and not
compliant with some subsequent version.


10. About Recommendations.

Each block section in this document contains an entry labeled Recommendation;
this section lists a set of recommendations intended to guide and organize the
use of the particular blocks. Such recommendations are geared towards making
the functions of encoders and decoders more efficient, as well as making
optimal use of the communications bandwidth.  It is advised that these
recommendations be followed.


11. About Color Tables.

The GIF format utilizes color tables to render raster-based graphics. A color
table can have one of two different scopes: global or local. A Global Color
Table is used by all those graphics in the Data Stream which do not have a
Local Color Table associated with them. The scope of the Global Color Table is
the entire Data Stream. A Local Color Table is always associated with the
graphic that immediately follows it; the scope of a Local Color Table is
limited to that single graphic. A Local Color Table supersedes a Global Color
Table, that is, if a Data Stream contains a Global Color Table, and an image
has a Local Color Table associated with it, the decoder must save the Global
Color Table, use the Local Color Table to render the image, and then restore
the Global Color Table. Both types of color tables are optional, making it
possible for a Data Stream to contain numerous graphics without a color table
at all. For this reason, it is recommended that the decoder save the last
Global Color Table used until another Global Color Table is encountered. In
this way, a Data Stream which does not contain either a Global Color Table or
a Local Color Table may be processed using the last Global Color Table saved.
If a Global Color Table from a previous Stream is used, that table becomes the
Global Color Table of the present Stream. This is intended to reduce the
overhead incurred by color tables. In particular, it is recommended that an
encoder use only one Global Color Table if all the images in related Data
Streams can be rendered with the same table.  If no color table is available at
all, the decoder is free to use a system color table or a table of its own. In
that case, the decoder may use a color table with as many colors as its
hardware is able to support; it is recommended that such a table have black and
white as its first two entries, so that monochrome images can be rendered
adequately.

The Definition of the GIF Format allows for a Data Stream to contain only the
Header, the Logical Screen Descriptor, a Global Color Table and the GIF
Trailer. Such a Data Stream would be used to load a decoder with a Global Color
Table, in preparation for subsequent Data Streams without a color table at all.


12. Blocks, Extensions and Scope.

Blocks can be classified into three groups : Control, Graphic-Rendering and
Special Purpose.  Control blocks, such as the Header, the Logical Screen
Descriptor, the Graphic Control Extension and the Trailer, contain information
used to control the process of the Data Stream or information  used in setting
hardware parameters.  Graphic-Rendering blocks such as the Image Descriptor and







                                                                         5


the Plain Text Extension contain information and data used to render a graphic
on the display device. Special Purpose blocks such as the Comment Extension and
the Application Extension are neither used to control the process of the Data
Stream nor do they contain information or data used to render a graphic on the
display device. With the exception of the Logical Screen Descriptor and the
Global Color Table, whose scope is the entire Data Stream, all other Control
blocks have a limited scope, restricted to the Graphic-Rendering block that
follows them.  Special Purpose blocks do not delimit the scope of any Control
blocks; Special Purpose blocks are transparent to the decoding process.
Graphic-Rendering blocks and extensions are used as scope delimiters for
Control blocks and extensions. The labels used to identify labeled blocks fall
into three ranges : 0x00-0x7F (0-127) are the Graphic Rendering blocks,
excluding the Trailer (0x3B); 0x80-0xF9 (128-249) are the Control blocks;
0xFA-0xFF (250-255) are the Special Purpose blocks. These ranges are defined so
that decoders can handle block scope by appropriately identifying block labels,
even when the block itself cannot be processed.


13. Block Sizes.

The Block Size field in a block, counts the number of bytes remaining in the
block, not counting the Block Size field itself, and not counting the Block
Terminator, if one is to follow.  Blocks other than Data Blocks are intended to
be of fixed length; the Block Size field is provided in order to facilitate
skipping them, not to allow their size to change in the future.  Data blocks
and sub-blocks are of variable length to accommodate the amount of data.


14. Using GIF as an embedded protocol.

As an embedded protocol, GIF may be part of larger application protocols,
within which GIF is used to render graphics.  In such a case, the application
protocol could define a block within which the GIF Data Stream would be
contained. The application program would then invoke a GIF decoder upon
encountering a block of type GIF.  This approach is recommended in favor of
using Application Extensions, which become overhead for all other applications
that do not process them. Because a GIF Data Stream must be processed in
context, the application must rely on some means of identifying the GIF Data
Stream outside of the Stream itself.


15. Data Sub-blocks.

      a. Description. Data Sub-blocks are units containing data. They do not
      have a label, these blocks are processed in the context of control
      blocks, wherever data blocks are specified in the format. The first byte
      of the Data sub-block indicates the number of data bytes to follow. A
      data sub-block may contain from 0 to 255