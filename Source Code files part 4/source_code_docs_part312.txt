TgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AUABRADMAWgBEAGgARwB5AHgATwBUAGwANgBMADkAMwArAEIAagB1AHQAawBNAFkAdgBBAGcAZgAyADAASQBuAFcAYQBiAHIAcgBFAHIATABXAEIATgBqAGoAQwBVAGsAUQBQAEEAQwBCAE4ANwBHAC8AawBrAHkAYgBCAFkAdwA4AFMASAB0ADgASgBTAFcAdwBSAHkAYQBsAFgAUgBFAGgAbwBDAEIAKwA0ADUAQwAxADQAYgArADUAQwBCAE8AagBoADYAbQB6AEwARwBmADAAcgBHAFcAWAAyAFoATwBPAFoANABZAEIATQBIAFMAVwB5AGgAbgArAEIAZABSADMAeAB3ADkAYQA1AEMAWQBCAHUAUwBBAEEAbQBpAGEARwBLAEYAUABWADcAMABMAC8AdgBaADIARgB5AFQAWQBkAGUANgBJAGoAKwBPAGoANgBaAGsAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAEEALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA0ADAAOAA0ADkAMwAwAGUALQBkAGYANABhAC0ANAAxAGUAOAAtADkAMAAxADEALQA2AGYAMgBlADYAYwBiAGYAZQA0ADgAZQB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA5AC0AMQAyAC0AMAAzAFQAMAAxADoAMgA3ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgByAHEAVABNAHAAZQBXADAAOQBrAE4AWQBBAEQAdgBQADcAaABZAFoAWQB0AGgAQwBjAEwAbwA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgB4AFgAWgBMAHEAZAA3AGUAVQBhAEgATgBKAHMAVwA3AG0AcgArAFQAZwBnACsANgBIAGkAdABGAEEAawBPAHIAQQBzAFkAMwBMAEgAMQBwAEwAWgAvAFkAMwByACsASgAyAHoANgBSAC8AcwBlADAANgBaAFYAVQBRAGgAegAyADUARgBHAFMAawBiAFIAdgA5ADQAWABDAGEAegArAEEAbwBXADAARQBaADIAZABnADEAZgBBAHkAbABtAFEAZABJAEEAQgBqAHEANgBJAG0AOABCAGkAOQBvAEYANgA3AG4AVwA4AEQAQgBjAGoAcgBiAGkAMgA1AFcATwBEAEgAVABlAHMAZQBBAFAAUwA2AGMATwBxAGkARwBzAFYAdgBZAFMASwBQAE4AawA1AE8AKwB0AGMAQwBLADUARQBQAHIAVgBpADAAcgBQAGIAMQBRAEsAUQAyADQATwBHAE0AZwAzAEwASQAzAHMAVgB3AHkAaQA1ADUAUQBiADEAdwBLAHQAZABaADUAVgBxAGQAWgBKAHYARQBjAGsAWQBFAGkAWQBRADEAZQBmAGEAdQB5AEkAdQBuAG4AbgBmAG4AegA1AEYAWABYAFUAUgBCADcANwBKAG8AUwBxAHQAYQBZAHgAdgB6AHUATgBCADgAKwAwAGkALwBsADAAYQBHAEIAWgBZAFMASQBsADMAawBZAEEAVgBkAGcAegBhAFkAdwBsAHAAVABzAGkAbwBTAHoATwBlAFEAMgB1AEEAbABkAHgAegAvAHoAcAB2AFcARAA3AGsAcABEAHcARQB4AHAAMAA0AGwAZwBYAE8AOQBrAFYAOQAxAEsAQgB2AG8AZABqAFIAUgB1AC8AUABKAEUAZQBMAEMASQA1AGEASQBPAG0AVAAzAG0AUQA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBTAEkARwBOAEEAVABVAFIARQA+ADwALwBYAHIATQBMAD4A</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMAA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAwADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAwADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGIAZgBkAGUAMwAxADcAMQAtADEAYwA4ADMALQA0AGYANwA2AC0AYgA1AGYAOQAtADMANAAyADgANwA3ADQAYQAzADIAOABhAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFIAbwBvAHQAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUgBvAG8AdAA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AWAB5AGwAQwB3AFMAbwBvAHcAMwBNAGQAbgBzAFYAUABrAFQAdAB3AEkAWQA1AHIAawA2ADQANwBiAFMANgA0AE4AZgA3AE0AMgBIAFMAOABrAGwAUgBrADUAYQBoAGgAYwBNAHgAOQBWAE8AbABuAHQAegBxAFgAMwBTAFkAeQBxAHgAbwBYAFEARgBEAFIALwBrAFQAVwBWAFQAcABiAFgAVgBNAHMAUwBZAEwAeABxAHIAKwBXAEQAMQBqAFQAZABIAHMAdgAvAC8ANwA5AFEAdwBIAHQAcgBLAGgATABNAFIANwBqAGMATABjAE0AbgBYAGYAQQBFADMAOQBLAGEAVQBBAFoAZwAzAGQARgBTAEUAdAArAEoAWQBiAFoAYgBvAFMAagBQAGUASgBvADYARAAxAGEAWgBtAGMAWgB2AGwAYQBkAHIASQBxACsASwBwAEIAcQBiAGcASQBFAHEAYQBiAHEAUABBAGcARwA4AC8ASQBiAGgAdABOAGIAbABhAEQAawBUAG8ANwBlAHYAKwBBAHUASQBXAGUAYwA5AEUAagBIAEoAQwBZAGsAMABUAFMAegBKAGYANAAyADMAaQBIAFoAWQBKAFgARABNAHoAMAA4ADEATwBCAHIASwBZACsAagBNAHQAcQBrADgAYQBNAHAAaQBxAHYAYwBYADYAbQB2ADcAbQBUADcASQB3AFkAdwA5AGEARQBrAGwAeAArADMAcABtAEwAcQBCAFkAOAA3AFYAVwB6AGwAeABGAEsAOAA4AGoAbAA1AEMATABIAGIASgBxAHgATAA1AGkAdwBDADMAVgBwAGYAVgB6ADAAVQBhAGwAbgBnADEASwB0AEQAcQBaAG0AYwBaAGQAagB3AFAAYwBRAGMAMwBSAE0AeABsAGcAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AC8ASQBTAFMAVQBFAFIAPgA8AEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUALQBBAHUAdABoAG8AcgBpAHQAeQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBhAHMAYwBpAGkALQB0AGEAZwAiAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAQwBBADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgBOAFEAcgBZAFMAQQBjADQAMwBWADcATgBSAFQAVwA4AFYAVAA1AEUAMgBYAGgATQBjAHcAbQBtAE8ATgA3AFQAawBRADcARQBUAFUASQBXAEcAcQBsAFAAVAB2AEYAUwB3ADcAOQA4AGcARgBnAEkAWABCAGMARgBNAHQAQwBkAEkAeQBmADMAVgBNAE8ANQBZAEcATwBLAEoARAAxAHcAbgBjADIAeQBkAGwAbwB6AGYAMQA2AFYASABGADUAVQByAEYAZwB0AGsAVAAvADkAdQBLADcAdQBSAHMAaABqAHkASAA1ADEANgBIAC8AYwBDAEsASgB5AEkAeQBQAGEAWQBFAGsAVwArAHAASQA3AHgAOAArAGMAZgBnAFYAYwBVAFgAWgAvAG8AQwByAEYASABkAHUAZQBYAEwAUwA0AGMAZQAvAG4AYQBsAHMANAA1AHEAeAA1AHEAcQBjAGQATQA3AFkAMAA4AG8ANQBhADEAawBYAC8AeQBvAGkAUABMAGIAbwA5AG0ASwBTAC8ATgBsAHoARQBmAGMAUgB2AFIATgBpAEEAQwA2AFcAcQBsAEkAdgA4AE0AZwBOAHgAcABBAG0AVQA3AEYAUgBVAEgAVABQAGMAawAvAGcATwA5AFgAMABhAGYAaAA3AFYAawB3AFIAcQAzADMAVABqAHIAQwBTACsAVQBpAGQAbwB4AHcATwBJADIARQAwAEQASwBNAG0AdABnAFUATQBBADIAdQAwADQATwAvAGYAZwBSADAATABlAFUAcgB1AFQAWQBZAGoAKwBRAHoAMgBJAEkAOAAyAHEAYwB6ADcAKwBmAGUAdABFAGQAVQBzAHYASwBLAGEAMQBaAEIASwA4AEYAbgBtAHcAMQBCAEYAUABlAG8AeQBYADkAZwA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBBAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYgBmAGQAZQAzADEANwAxAC0AMQBjADgAMwAtADQAZgA3ADYALQBiADUAZgA5AC0AMwA0ADIAOAA3ADcANABhADMAMgA4AGEAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAANQBUADAAMQA6ADAANwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANwAtADEAMgAtADAANABUADAAMQA6ADAANwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AdwBFAEMAegAvAEYAMgBwADEANQBnAGoAQQA3ADIAegBLAGoARwByAFkAMQBDAEMALwBEADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AawBMAHAANQBnAFoAdQA4AE4AMQBlAGsAWABDAEgAQgBaADkASgBYAEIAZQBHAFMAZABRAFoATABKAGEAMABkAGwAdQBKAHgANgAzAFQATQBkAHEAegB0AEYAQgBUAFMAVQBGAGkAagB0AHAASABJAE4AYQAxAGMANQBhAHcATQAzAE4AbABhAEsATAB2AE4AQQBaAG8AdgA2AE0AUgBEAFYAaQBSAGMAMgBOAEsAdgBwAFkAWQBMAEcAZwA5AEwAaABYAGUAUAAwADUAbQBsAE8AVQByAGwAZwBVAHEAOQAvAG8AaABUAFcASQB0AGsAdAA5AFUAVwA3AGgAWABoAHcANgBGACsAUAAyAFUAbwBHAEsAUwBzAE0AZwBIAHUAYQBmAGgAQwAwAHgAWgBKAEEAdwBOAEEAVQBrAGMAWQB4AEwANwB0ADYAYQBWAEEAeQBWAGgANgBEAE8AaABHAG0AawBzAEwAbQBWAFMAbQBSAEYAQQBzAEkANgBQAGoAMABFADkAWQBaAHQAdgBIAGIARwBOAEsAYQBGAGYAbQBxAC8AdgBGAHcALwBuAEcAYQBFAE8AOABaAHMANABtAHkAaABHAHMAYwBhAGkASABYAEwAWgBiAFUAVQBRAFQANQBCAHYARgBYAGsAawBJAEMATAAxAG4AdgBBAGcAUQB3AC8AYwAyAEUAbgBsADYAeABkAEoATQB2AHAAaABGAHgAKwB4AGsAWABIAHQAegAwAFgARgBtAHYASQBDAGEAYgBOAFoAWQBsAGwANgBvADkATQBDAEwAQQBSAEkAQQBJAFoAMAAwAFoAWQB2AG0AbABZAHUAbwBmAFIAQwBSAFQAawA0AG0ASQBjAFgAawA0AEkAYwA5AFkANwBCAGIARwBDAG8AVwBKAFEAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE></CERTIFICATECHAIN>VwBpAG4AZABvAHcAcwA6AHIAYQBtAGgAYQByAEAAeABiAG8AeAAuAGMAbwBtAA==y <?xml version="1.0"?><CERTIFICATECHAIN><CERTIFICATE></CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAA1AC0AMQAxAC0AMgAyAFQAMAAzADoAMQA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABEAEUAUwBDAFIASQBQAFQATwBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYwA4ADIAYgAzAGYAZQBmAC0AZgBlAGMAYwAtADQAZQA1ADEALQBiADQAZQA4AC0AMAAwADAAMAA2ADMAYwA2ADkAYwBhADEAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APAAvAEQARQBTAEMAUgBJAFAAVABPAFIAPgA8AEkAUwBTAFUARQBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA2AGYAZQBlADEAOQAyADAALQBlADEAOAA5AC0ANAA2AGYANQAtAGEAYQA4AGEALQA3AGQANgBjADEAYwBiAGYANABhADgAMQB9ADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAUwBlAHIAdgBpAGMAZQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AcQBWADEAMABJAG0AQQB1AGcAYgAyAHkAbABMADcAZAB3AHAAMQB2AHAATABhAEEATgBnAGkAbQBDAEoASwBpAEwAKwBSAG4ASwBnAFMAbwBlAHcAeABsAFQAVABZAGEAaAA3AEUAVQBDADkAOAB5AEoAKwAyAFkASwA2ADEAagBYAEQAVgB4AEcAMgB3AGQAawBEAEkAagB5AEEAcgBoAHEAaQBZAEgAVABZAFUAbQB6AFEARwBTADYAMgB1AG8AMwB2AEEALwBVAFkAVwBrAFMAbwB2AFUAWABCAFcAUgBQAFQAMwAvAGYAZQBRADUAcQBRAC8AMABoAEkAaQB4AE4AMwBVADQAUQBqAEcATwBzAE8AcwBnAGkAawA3ADkAUwA4ADIASQArACsANgAwAFkAQgA1AHoAVgBIAFoAMQBJAGEARABXAHcAdgBEAC8AOABiADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APABTAEUAQwBVAFIASQBUAFkATABFAFYARQBMACAAbgBhAG0AZQA9ACIAQwBlAHIAdABpAGYAaQBjAGEAdABlACAAUAByAGEAYwB0AGkAYwBlACAAUwB0AGEAdABlAG0AZQBuAHQAIgAgAHYAYQBsAHUAZQA9ACIAaAB0AHQAcAA6AC8ALwBnAG8ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZgB3AGwAaQBuAGsALwA/AGwAaQBuAGsAaQBkAD0AMQAxADkANAA0ACIAIAAvAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewBhAGEAYQAzADMAMQBmADMALQBlADYANQA5AC0ANABlAGEAOQAtADgANwA2AGIALQBlADgAYgAyADUAYwA3AGIANAA5ADkANgB9ADwALwBJAEQAPgA8AEEARABEAFIARQBTAFMAIAB0AHkAcABlAD0AIgBVAFIATAAiAD4AaAB0AHQAcABzADoALwAvAGMAbwByAHAAcgBpAGcAaAB0AHMALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AXwB3AG0AYwBzADwALwBBAEQARABSAEUAUwBTAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgBvAHgAeQB4AGIAVQBnAHUAeQBtAEYASABMAGgAdQA4ADAARQBIADkAbQA2ADIAYwAyAFgATABGAFgAYgBqAG0AOAA3AEsAbABFAGIAUwBGAFEAawBpAGUAdQByAHIAOABSAFoAZwB2AHQARQBNAFcAZABnADYAagBNAEEAawBMAEoANwB4AFAAbgBXAHMAMwBoAEUAagBPAEgAdwA5ADkAaQByAHcAWgAxAGcANQBaACsANgB5AFkAZwBrAHQAVwBsAEsAaQBiAG0AUABzADUATABwAGEAbQBkADYAdgA1ADMAUgA0ADAAZgBLAEUAUwAvAEgATgBXAGQAagBiAGMANgA4AHgATgA5AHQAeQBmAHQAcwA0AHAATwBmAHkASgB4AFQANQBYAGcAbwAwAHIASABWAHMAZQB0ACsAcgBEAGcAUwBoAEUAOQBCADMASgBRAGIAWQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AFMARQBDAFUAUgBJAFQAWQBMAEUAVgBFAEwAIABuAGEAbQBlAD0AIgBTAGUAcgB2AGUAcgAtAFYAZQByAHMAaQBvAG4AIgAgAHYAYQBsAHUAZQA9ACIAMQAuADAALgAzADAAMQAyAC4AMAAiACAALwA+ADwAUwBFAEMAVQBSAEkAVABZAEwARQBWAEUATAAgAG4AYQBtAGUAPQAiAFMAZQByAHYAZQByAC0AUwBLAFUAIgAgAHYAYQBsAHUAZQA9ACIAMQAyADMANAA1AC0AMQAyADMALQAwADAAMAAwADAAMAA3AC0AMQA4ADkANgA4ACIAIAAvAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIAUwBlAHIAdgBlAHIALQBMAGkAYwBlAG4AcwBvAHIALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewBjADgAMgBiADMAZgBlAGYALQBmAGUAYwBjAC0ANABlADUAMQAtAGIANABlADgALQAwADAAMAAwADYAMwBjADYAOQBjAGEAMQB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAzAC0AMAAyAC0AMAA1AFQAMAAwADoAMAAwADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA2AC0AMQAxAC0AMgAyAFQAMAAzADoAMQA3ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgB1AFQAUQBYAFQAdQBmAEEAMQBDAEYAbwA4AHcARABTAEMAYwBZAHgAZABjAGMAbgBoAFIAOAA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgBUAEkAMwB0ADkAegBjADIASQBpADgAWgBuADAAUQBYAEQAdwB5AG0ASABvAHAANQBSAHcAbQB1ADkAQQBQAEYAVwBBAHYAZwBuAE8ARgB3AC8AKwBoADYAdgBWAHkAdABSAGMALwBhAG4AYwBqAEQASQBWAGoAcABXADEAWgBtAHUAOAB3ADIAYgBpAEEAWQAvAFQAcwBEAHEAZwBrAGYAbABiAGsANABsAEsARwBYAFMAcAB4AFIAYgBBAEcANgBoAEIARQBKAEwAaABwAGkAZwBSAHkATAA4AGgANgA3AHcALwBlADkAcQBuAGsAUwAyAHUAOQBSAFcATgBUAFQAaQBNAG0AeQBQAG4AdwArADcAZgBYAEEAMgBsAFAANQB3AE4AbgBSAGsARgBXAGIANgBvAEYAcwBGAGkAVgByAFoAeQBZAGkAbQBHAHAASgB2AGwAdwA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAA0AC0AMQAxAC0AMQA4AFQAMQA4ADoAMAA4ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADQALQAxADEALQAxADgAVAAxADgAOgAwADgAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADEALQAxADYAVAAxADgAOgAwADgAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBTAGUAcgB2AGUAcgAtAEwAaQBjAGUAbgBzAG8AcgAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADkAMgBmADcAZgBkAGYAMgAtADcAMwA2ADIALQA0ADYAZgAyAC0AYgA5ADIAYgAtADAAMgA4AGEAZABiADcAMABmADkAYwBjAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABTAGUAcgB2AGUAcgAgAEUAbgByAG8AbABsAG0AZQBuAHQAIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AFAAUQAzAFoARABoAEcAeQB4AE8AVABsADYATAA5ADMAKwBCAGoAdQB0AGsATQBZAHYAQQBnAGYAMgAwAEkAbgBXAGEAYgByAHIARQByAEwAVwBCAE4AagBqAEMAVQBrAFEAUABBAEMAQgBOADcARwAvAGsAawB5AGIAQgBZAHcAOABTAEgAdAA4AEoAUwBXAHcAUgB5AGEAbABYAFIARQBoAG8AQwBCACsANAA1AEMAMQA0AGIAKwA1AEMAQgBPAGoAaAA2AG0AegBMAEcAZgAwAHIARwBXAFgAMgBaAE8ATwBaADQAWQBCAE0ASABTAFcAeQBoAG4AKwBCAGQAUgAzAHgAdwA5AGEANQBDAFkAQgB1AFMAQQBBAG0AaQBhAEcASwBGAFAAVgA3ADAATAAvAHYAWgAyAEYAeQBUAFkAZABlADYASQBqACsATwBqADYAWgBrAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBJAFMAUwBVAEUAUgA+ADwASQBTAFMAVQBFAEQAUABSAEkATgBDAEkAUABBAEwAUwA+ADwAUABSAEkATgBDAEkAUABBAEwAIABpAG4AdABlAHIAbgBhAGwALQBpAGQAPQAiADEAIgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBNAFMALQBEAFIATQAtAFMAZQByAHYAZQByACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsANgBmAGUAZQAxADkAMgAwAC0AZQAxADgAOQAtADQANgBmADUALQBhAGEAOABhAC0ANwBkADYAYwAxAGMAYgBmADQAYQA4ADEAfQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAFMAZQByAHYAaQBjAGUAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AHEAVgAxADAASQBtAEEAdQBnAGIAMgB5AGwATAA3AGQAdwBwADEAdgBwAEwAYQBBAE4AZwBpAG0AQwBKAEsAaQBMACsAUgBuAEsAZwBTAG8AZQB3AHgAbABUAFQAWQBhAGgANwBFAFUAQwA5ADgAeQBKACsAMgBZAEsANgAxAGoAWABEAFYAeABHADIAdwBkAGsARABJAGoAeQBBAHIAaABxAGkAWQBIAFQAWQBVAG0AegBRAEcAUwA2ADIAdQBvADMAdgBBAC8AVQBZAFcAawBTAG8AdgBVAFgAQgBXAFIAUABUADMALwBmAGUAUQA1AHEAUQAvADAAaABJAGkAeABOADMAVQA0AFEAagBHAE8AcwBPAHMAZwBpAGsANwA5AFMAOAAyAEkAKwArADYAMABZAEIANQB6AFYASABaADEASQBhAEQAVwB3AHYARAAvADgAYgAwAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAOQAyAGYANwBmAGQAZgAyAC0ANwAzADYAMgAtADQANgBmADIALQBiADkAMgBiAC0AMAAyADgAYQBkAGIANwAwAGYAOQBjAGMAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAANAAtADEAMQAtADEAOABUADEAOAA6ADAAOAA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAAOQAtADEAMQAtADEANwBUADEAOAA6ADAAOAA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AagBNAGUAcABnAEsAVABwAGYANAB2AFEAVQBGAGkAYQBJAE4ATwA5ADIAZwAyAFgAUQBiAEUAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AUgBEAEwAaQBpADQAKwBKAEgAUAAyAFIATQBQAEUAcwB5AHEAUgBCAGwALwBOAGwAcgBRADYAawB2AG0ATQBFAFcAcQB3AFIAWQBzAHYAbAB2AEYASQBvADEAbgBWAE4AVwBCAHgAYwBHAFYANgBGADkAYQB6AFoANwBvAHgANwAxADcAMQArAFYAZQAyAGYANABNAGgAeQBYADMANAAvAHUARwBLAHUAZQBKAEMAMgBnAEMAZQA5AHoAUgBGAGgARwA3AE4AVQBCAE8ARAB2AGoAVgBJAFQAZQBDAEsAUQBOADMAQQB1AEYAeQBwAEgAdgAxAEIAVgB0AFgAYgBFADgAMQBSAFUATgBzAG8AdQBPADgAQQBaAHMAVABpAFoAQwBLAFMAUwBxAE4ASgByAHcASwBLAHkAawBIAHYAOABFAEkAOQBFAEoAZwBHAEEAYQB3AEUAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFMASQBHAE4AQQBUAFUAUgBFAD4APAAvAFgAcgBNAEwAPgA=</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAyADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAyADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADQAMAA4ADQAOQAzADAAZQAtAGQAZgA0AGEALQA0ADEAZQA4AC0AOQAwADEAMQAtADYAZgAyAGUANgBjAGIAZgBlADQAOABlAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADIAMAA0ADgAIgA+AE4AUQByAFkAUwBBAGMANAAzAFYANwBOAFIAVABXADgAVgBUADUARQAyAFgAaABNAGMAdwBtAG0ATwBOADcAVABrAFEANwBFAFQAVQBJAFcARwBxAGwAUABUAHYARgBTAHcANwA5ADgAZwBGAGcASQBYAEIAYwBGAE0AdABDAGQASQB5AGYAMwBWAE0ATwA1AFkARwBPAEsASgBEADEAdwBuAGMAMgB5AGQAbABvAHoAZgAxADYAVgBIAEYANQBVAHIARgBnAHQAawBUAC8AOQB1AEsANwB1AFIAcwBoAGoAeQBIADUAMQA2AEgALwBjAEMASwBKAHkASQB5AFAAYQBZAEUAawBXACsAcABJADcAeAA4ACsAYwBmAGcAVgBjAFUAWABaAC8AbwBDAHIARgBIAGQAdQBlAFgATABTADQAYwBlAC8AbgBhAGwAcwA0ADUAcQB4ADUAcQBxAGMAZABNADcAWQAwADgAbwA1AGEAMQBrAFgALwB5AG8AaQBQAEwAYgBvADkAbQBLAFMALwBOAGwAegBFAGYAYwBSAHYAUgBOAGkAQQBDADYAVwBxAGwASQB2ADgATQBnAE4AeABwAEEAbQBVADcARgBSAFUASABUAFAAYwBrAC8AZwBPADkAWAAwAGEAZgBoADcAVgBrAHcAUgBxADMAMwBUAGoAcgBDAFMAKwBVAGkAZABvAHgAdwBPAEkAMgBFADAARABLAE0AbQB0AGcAVQBNAEEAMgB1ADAANABPAC8AZgBnAFIAMABMAGUAVQByAHUAVABZAFkAagArAFEAegAyAEkASQA4ADIAcQBjAHoANwArAGYAZQB0AEUAZABVAHMAdgBLAEsAYQAxAFoAQgBLADgARgBuAG0AdwAxAEIARgBQAGUAbwB5AFgAOQBnAD0APQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlAC0AQQB1AHQAaABvAHIAaQB0AHkAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIAYQBzAGMAaQBpAC0AdABhAGcAIgA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAQwBBADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AUABRADMAWgBEAGgARwB5AHgATwBUAGwANgBMADkAMwArAEIAagB1AHQAawBNAFkAdgBBAGcAZgAyADAASQBuAFcAYQBiAHIAcgBFAHIATABXAEIATgBqAGoAQwBVAGsAUQBQAEEAQwBCAE4ANwBHAC8AawBrAHkAYgBCAFkAdwA4AFMASAB0ADgASgBTAFcAdwBSAHkAYQBsAFgAUgBFAGgAbwBDAEIAKwA0ADUAQwAxADQAYgArADUAQwBCAE8AagBoADYAbQB6AEwARwBmADAAcgBHAFcAWAAyAFoATwBPAFoANABZAEIATQBIAFMAVwB5AGgAbgArAEIAZABSADMAeAB3ADkAYQA1AEMAWQBCAHUAUwBBAEEAbQBpAGEARwBLAEYAUABWADcAMABMAC8AdgBaADIARgB5AFQAWQBkAGUANgBJAGoAKwBPAGoANgBaAGsAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAEEALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA0ADAAOAA0ADkAMwAwAGUALQBkAGYANABhAC0ANAAxAGUAOAAtADkAMAAxADEALQA2AGYAMgBlADYAYwBiAGYAZQA0ADgAZQB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA5AC0AMQAyAC0AMAAzAFQAMAAxADoAMgA3ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgByAHEAVABNAHAAZQBXADAAOQBrAE4AWQBBAEQAdgBQADcAaABZAFoAWQB0AGgAQwBjAEwAbwA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgB4AFgAWgBMAHEAZAA3AGUAVQBhAEgATgBKAHMAVwA3AG0AcgArAFQAZwBnACsANgBIAGkAdABGAEEAawBPAHIAQQBzAFkAMwBMAEgAMQBwAEwAWgAvAFkAMwByACsASgAyAHoANgBSAC8AcwBlADAANgBaAFYAVQBRAGgAegAyADUARgBHAFMAawBiAFIAdgA5ADQAWABDAGEAegArAEEAbwBXADAARQBaADIAZABnADEAZgBBAHkAbABtAFEAZABJAEEAQgBqAHEANgBJAG0AOABCAGkAOQBvAEYANgA3AG4AVwA4AEQAQgBjAGoAcgBiAGkAMgA1AFcATwBEAEgAVABlAHMAZQBBAFAAUwA2AGMATwBxAGkARwBzAFYAdgBZAFMASwBQAE4AawA1AE8AKwB0AGMAQwBLADUARQBQAHIAVgBpADAAcgBQAGIAMQBRAEsAUQAyADQATwBHAE0AZwAzAEwASQAzAHMAVgB3AHkAaQA1ADUAUQBiADEAdwBLAHQAZABaADUAVgBxAGQAWgBKAHYARQBjAGsAWQBFAGkAWQBRADEAZQBmAGEAdQB5AEkAdQBuAG4AbgBmAG4AegA1AEYAWABYAFUAUgBCADcANwBKAG8AUwBxAHQAYQBZAHgAdgB6AHUATgBCADgAKwAwAGkALwBsADAAYQBHAEIAWgBZAFMASQBsADMAawBZAEEAVgBkAGcAegBhAFkAdwBsAHAAVABzAGkAbwBTAHoATwBlAFEAMgB1AEEAbABkAHgAegAvAHoAcAB2AFcARAA3AGsAcABEAHcARQB4AHAAMAA0AGwAZwBYAE8AOQBrAFYAOQAxAEsAQgB2AG8AZABqAFIAUgB1AC8AUABKAEUAZQBMAEMASQA1AGEASQBPAG0AVAAzAG0AUQA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBTAEkARwBOAEEAVABVAFIARQA+ADwALwBYAHIATQBMAD4A</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMAA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAwADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAwADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGIAZgBkAGUAMwAxADcAMQAtADEAYwA4ADMALQA0AGYANwA2AC0AYgA1AGYAOQAtADMANAAyADgANwA3ADQAYQAzADIAOABhAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFIAbwBvAHQAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUgBvAG8AdAA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AWAB5AGwAQwB3AFMAbwBvAHcAMwBNAGQAbgBzAFYAUABrAFQAdAB3AEkAWQA1AHIAawA2ADQANwBiAFMANgA0AE4AZgA3AE0AMgBIAFMAOABrAGwAUgBrADUAYQBoAGgAYwBNAHgAOQBWAE8AbABuAHQAegBxAFgAMwBTAFkAeQBxAHgAbwBYAFEARgBEAFIALwBrAFQAVwBWAFQAcABiAFgAVgBNAHMAUwBZAEwAeABxAHIAKwBXAEQAMQBqAFQAZABIAHMAdgAvAC8ANwA5AFEAdwBIAHQAcgBLAGgATABNAFIANwBqAGMATABjAE0AbgBYAGYAQQBFADMAOQBLAGEAVQBBAFoAZwAzAGQARgBTAEUAdAArAEoAWQBiAFoAYgBvAFMAagBQAGUASgBvADYARAAxAGEAWgBtAGMAWgB2AGwAYQBkAHIASQBxACsASwBwAEIAcQBiAGcASQBFAHEAYQBiAHEAUABBAGcARwA4AC8ASQBiAGgAdABOAGIAbABhAEQAawBUAG8ANwBlAHYAKwBBAHUASQBXAGUAYwA5AEUAagBIAEoAQwBZAGsAMABUAFMAegBKAGYANAAyADMAaQBIAFoAWQBKAFgARABNAHoAMAA4ADEATwBCAHIASwBZACsAagBNAHQAcQBrADgAYQBNAHAAaQBxAHYAYwBYADYAbQB2ADcAbQBUADcASQB3AFkAdwA5AGEARQBrAGwAeAArADMAcABtAEwAcQBCAFkAOAA3AFYAVwB6AGwAeABGAEsAOAA4AGoAbAA1AEMATABIAGIASgBxAHgATAA1AGkAdwBDADMAVgBwAGYAVgB6ADAAVQBhAGwAbgBnADEASwB0AEQAcQBaAG0AYwBaAGQAagB3AFAAYwBRAGMAMwBSAE0AeABsAGcAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AC8ASQBTAFMAVQBFAFIAPgA8AEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUALQBBAHUAdABoAG8AcgBpAHQAeQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBhAHMAYwBpAGkALQB0AGEAZwAiAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAQwBBADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgBOAFEAcgBZAFMAQQBjADQAMwBWADcATgBSAFQAVwA4AFYAVAA1AEUAMgBYAGgATQBjAHcAbQBtAE8ATgA3AFQAawBRADcARQBUAFUASQBXAEcAcQBsAFAAVAB2AEYAUwB3ADcAOQA4AGcARgBnAEkAWABCAGMARgBNAHQAQwBkAEkAeQBmADMAVgBNAE8ANQBZAEcATwBLAEoARAAxAHcAbgBjADIAeQBkAGwAbwB6AGYAMQA2AFYASABGADUAVQByAEYAZwB0AGsAVAAvADkAdQBLADcAdQBSAHMAaABqAHkASAA1ADEANgBIAC8AYwBDAEsASgB5AEkAeQBQAGEAWQBFAGsAVwArAHAASQA3AHgAOAArAGMAZgBnAFYAYwBVAFgAWgAvAG8AQwByAEYASABkAHUAZQBYAEwAUwA0AGMAZQAvAG4AYQBsAHMANAA1AHEAeAA1AHEAcQBjAGQATQA3AFkAMAA4AG8ANQBhADEAawBYAC8AeQBvAGkAUABMAGIAbwA5AG0ASwBTAC8ATgBsAHoARQBmAGMAUgB2AFIATgBpAEEAQwA2AFcAcQBsAEkAdgA4AE0AZwBOAHgAcABBAG0AVQA3AEYAUgBVAEgAVABQAGMAawAvAGcATwA5AFgAMABhAGYAaAA3AFYAawB3AFIAcQAzADMAVABqAHIAQwBTACsAVQBpAGQAbwB4AHcATwBJADIARQAwAEQASwBNAG0AdABnAFUATQBBADIAdQAwADQATwAvAGYAZwBSADAATABlAFUAcgB1AFQAWQBZAGoAKwBRAHoAMgBJAEkAOAAyAHEAYwB6ADcAKwBmAGUAdABFAGQAVQBzAHYASwBLAGEAMQBaAEIASwA4AEYAbgBtAHcAMQBCAEYAUABlAG8AeQBYADkAZwA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBBAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYgBmAGQAZQAzADEANwAxAC0AMQBjADgAMwAtADQAZgA3ADYALQBiADUAZgA5AC0AMwA0ADIAOAA3ADcANABhADMAMgA4AGEAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAANQBUADAAMQA6ADAANwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANwAtADEAMgAtADAANABUADAAMQA6ADAANwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AdwBFAEMAegAvAEYAMgBwADEANQBnAGoAQQA3ADIAegBLAGoARwByAFkAMQBDAEMALwBEADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AawBMAHAANQBnAFoAdQA4AE4AMQBlAGsAWABDAEgAQgBaADkASgBYAEIAZQBHAFMAZABRAFoATABKAGEAMABkAGwAdQBKAHgANgAzAFQATQBkAHEAegB0AEYAQgBUAFMAVQBGAGkAagB0AHAASABJAE4AYQAxAGMANQBhAHcATQAzAE4AbABhAEsATAB2AE4AQQBaAG8AdgA2AE0AUgBEAFYAaQBSAGMAMgBOAEsAdgBwAFkAWQBMAEcAZwA5AEwAaABYAGUAUAAwADUAbQBsAE8AVQByAGwAZwBVAHEAOQAvAG8AaABUAFcASQB0AGsAdAA5AFUAVwA3AGgAWABoAHcANgBGACsAUAAyAFUAbwBHAEsAUwBzAE0AZwBIAHUAYQBmAGgAQwAwAHgAWgBKAEEAdwBOAEEAVQBrAGMAWQB4AEwANwB0ADYAYQBWAEEAeQBWAGgANgBEAE8AaABHAG0AawBzAEwAbQBWAFMAbQBSAEYAQQBzAEkANgBQAGoAMABFADkAWQBaAHQAdgBIAGIARwBOAEsAYQBGAGYAbQBxAC8AdgBGAHcALwBuAEcAYQBFAE8AOABaAHMANABtAHkAaABHAHMAYwBhAGkASABYAEwAWgBiAFUAVQBRAFQANQBCAHYARgBYAGsAawBJAEMATAAxAG4AdgBBAGcAUQB3AC8AYwAyAEUAbgBsADYAeABkAEoATQB2AHAAaABGAHgAKwB4AGsAWABIAHQAegAwAFgARgBtAHYASQBDAGEAYgBOAFoAWQBsAGwANgBvADkATQBDAEwAQQBSAEkAQQBJAFoAMAAwAFoAWQB2AG0AbABZAHUAbwBmAFIAQwBSAFQAawA0AG0ASQBjAFgAawA0AEkAYwA5AFkANwBCAGIARwBDAG8AVwBKAFEAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE></CERTIFICATECHAIN>"~.tC f]Q"S fak;I ;U7to +]|z7 |0Mn)"pt AQYq7 AQYq7 v'Cp| V@2JTG >MRzFK lPjAc %<GKJ C%[AK |c$O, Vr|Im p&(UyE Qdw67 *AJ 6 H`"}2f #+b&Jzrr D/lW: eeiBJ P}3u7 D&_>` N9R*O rRS7z mUH4; _UQ|=S GYoP8 n1@D{% pF>c` 7E>S( \n%Z0 gSHGk ? 7<3iwp o6F?o; ^P4c`K# gSHGk P/Gvp  7<3iwp o6F?o; \BN !) gSHGk P/Gvp  7<3iwp o6F?o; \BN !) gSHGk P/Gvp  7<3iwp o6F?o; gSHGk P/Gvp  7<3iwp pG"Hh o6F?o; 25qV@w fydY~  6<//# )N7J? B*d9d- CvKu} u{WyE !["a05 lUK ~ *DP)) ka+k4# _Sw7L D{XaP} x`"mM qZcah xrD`v SYua. i7]ak M8gAa i4gRC ||c[h 0k@Zx z/#b`L "N?_{ e=QvK X+6~T xC|7~ |Y}*W[ @ 5LEKH[uk( jufte n9Th$ /Gis^ >uBH\u #.6blo LnK@? x+gnj> {P.W5 <nRW  qPSp( 9T}>}M L.a.4* IOyd: g-)WU 5[GtD r(Yvw k4WoO 'I.VmCK LSH3{ k/YMj`L 9.m)< @Xzw{w M:{nh zeOjE O385#xR N`p0M ]Y5_S v;dkN _)t9) :R8*F >5?c7 zqV+p p_9'&'R OkKCB %.'HB -4C#s\ o:e(? a8/+/ >:&/l;6m IXM{O ;'{GJ ^C=bS maqgR)Y #ha'6 |d ,N d? )T a ~k5{ @cZr( $v:Xu _;eL8 %]ALF 7/r^l Y%=\C- 0``}\ (Sfor XpU@Ms] Z6doJB(< $%9BK (Nk#@NR' osbeB vEwn] xAQ!S `jX$p `aLo\ &tCkeF r}MeQ (aQ:u {GQpj O_7|- @P(l: V|!M02*^$[* LX* +N %e[4?>V ^G.<ma* RyFP(L N`Vevi RyFP(L NBhZC6 */lzT f*jSR 4efby Hw/pVw B7IP* TZF4" jhEbIB :L)9a n'2!0uk *].\  r\^yqzh }E']`| /*#y!6 |'8WU CrU}X a@kg~ {ZWRo6 de=b/ 2$,s- `#,NM d2(%+ 6XmA_' ]p#>v /K'%P qB{%? ,`1S>} #_8Sx )z3xs 8.{`_ 8"f%@ rliQFN J`,7ic>5 m]y.k 9<Hn' vD,Q,| b`ONz? +MbHp h#p@E 0pjF1al ,UFWC 3+-nbN v;n$"[ slpiQ 2Gn!M Q]'N3F 6A#-a E>dX` %?-)PM mko4\ YI7eiN~L Ah^jk 2YMcu## g[dEA cZdUl E*cQ' zxrm@ NM;M< vH:=P Uq>@FN 4JS%=l iiSoA x$'C# q1]Z%9 ?RP)J# mK])ks /i69' =n]\J$ $f|d, KnnrB= 4bl?l R]LxPc@ [u6<| (5qb{ `o4$T N4{.Y n[[>0 K-LVd ;|2"_$X Xl&7E vE[(T #A.'kv `X,tY @ _NR O1IXe qGCpQGM J8orC |BSxS -B`!In kQg'! Vg~b5 ar^\p =gYTy KhahC \4]n' (uR^} =^!?fQ ^4W$3 x;2E% 3a8vC [W)!c P0=I~]D O't8; KHr[9 nl_J  0DfeW cfew& @~QyK :Um[4 Fx4TtaE _C/N>w[V Muo8j h)M1m 3)Rv& ^1i4M U37UZSB #a:7i8 6rwOBR ,9t_u] IkI;e 7?N0FZ. XQP5W 45-~nB )@E:D z0qmK 66'VJ -XH9U= uW<Ia -XH9U= uW<Ia -XH9U= uW<Ia -XH9U= uW<Ia -XH9U= uW<Ia -XH9U= uW<Ia -XH9U= uW<Ia -XH9U= uW<Ia k-MA& k-MA& k-MA& [U_UW Ys91 l2$O& TDWLP C.E#7 +^)Xa PpuAE.B$ ^QyQn ^QyQn ZtS&t 4pOH` |m\/Q kdK,! 9]&t4 Nvw7z G7t*[ KeQkT H/~=d 6c40[ 6mK@. cA-pi IXWS| h{B8m $NSlq, h%ZB9_nZ` 2w:rc qdv'" sMPyh $BEk6 =$2"% ~\cQ32 `:/?* .A>'J SN[hZ -|u-^ kiDv~ =D=m3R GzjpR sV8J^.N (<nG\6 sT}w[ IS8=P L6J3X 1N/kz m!qk- Sb'6n-_ ~U,KAy .t<JG ~U,KAy ~U,KAy ~U,KAy VDcY9 ~U,KAy ~U,KAy ~U,KAy ~U,KAy ))(rV ey[_5 4sm[3 `tY26 ?FS|| WGHn3^C ^WpCSQC Epmc^ )BA|)X+c F$0\A, :m?^rS :7E`Y: lO!,+2 `tY26 4NT@-v x[xL- `tY26 bNrZ9K d4K7Hs 5hR+1 ~/)wo {oH]W ^]cIwvd ~/)wo {oH]W Epmc^ )BA|)X+c F$0\A, ?&q9{ Y6ICj; 4sm[3 `tY26 \ CvN r["o_4&@ 9 XC>Es lvj'J 9)tO} Cews7s >vm<98_$_e Y1w*% djCo5ZP* XUu^D D= g! O5K3!+p q#HkgB iKksCW 4sm[3 `tY26 `tY26 yybJV&M `tY26 a7fdC NWN,tl qo)yO +Is,tD PH)v: k\{b` 8VY:# lO!,+2 `tY26 ={zNTDq (rZ9K >vm<98_$_e 3Js3#8 a7fdC > %![l ^WpCSQC NinM< lrZ9K "LZ.+ Z~2w\Q O|(/6 {rZ9K rE[_5 4sm[3 `tY26 )Q~B"*` 5yybJV&M `2b\f -`zza uoTFt ri;Dh FbKf; Sa3c" hNp o <v&3g In#q] {4e`^9 L ^6,\ .PXVJ kqAN) f:{(n KWXs\ : Z$3% iIF+ray* S1)sa ]*&So +Y0$C LYN`P f]Q"S fak;Iu6h!OCl} >HS"4 gy}'9 "AW*| MAab[ R(~~<6 a>t"W( K?kT= -vy%>01U y>M7.W <_WmO qHG;d9 jQT0` _O-4,w g^zEZ yGl(N hFAu/? .P:F: 9pP6^v4 qbVZ:~ b4N/}] [CQ%n fZKSu |^TD]ynR PueOY QJ;R_~ _esYr s}T#W P}>,"U8h L<)!Z Rg 3Yo e=R+$ Eb#Ib 7Hbh| a)%dd ylu5> YO nI !T1V*X $viKB k~4qM  d)c8noI nMf4#1T pka3t NcJt7 OR&;EV 9&AhY **Yf%k b58"W gg#,x l6`:>,\ )p$XSQk ~7B:)o ^\8CMY ABiu{ x`)I9S  9A)Z! Z5mk~ )?8G+  \eIx8 a}S~W q.>Z` b}&R'# Z_|,?X e3f%n JKbFZ }CKF8 U<4imFX yA0>g spHS> I:m=e 4}[ih L(Y(/? D*A>?L x#QbS @HI.+k ufP[_J) Mu9c"q Lsvlu s:vJ3 nI(vB `G7ihp hAdd- ,xd,z| ao1,R c`:C;# ^0+&{ m.AwR fIo~\ +Zs`n Tgoy|yz ^KiA3/ {tQ7(X /*<1^ g"W%uAfm /=ify )/A8J IVYhk H:~!s  *M*L$LQ `qz7E X8 %"! h[EIK dJp"j 4T]a9 UZ9Qx ^}p2j X,O$L#$ 7=Sos LBign >k0+:b ) &}r yI!u' tm3jb Zgdc!o \Ij=d Htkz' 41..t9$ (Vv*$b uapWXnA 58y]$ xcQCsll [0yR{f|  ,}.~R  3v2hn &S/n6!e YfUOs x9]{v *BmCf| +Z9Ux aUf^aQ 1C)@:] CXXLR ,=o^w ny^h[  u>H7 )> Ag 4e`R1$ .o,a# xPFH/ JP-Y,h |G'Ia jFW|Vo h*63F) 3"*iLa +BvMm ,'o@/ d*O0[  0,a3 a-=Gy {YY{dn LM>i/  J\<R! +LU71D sknU. CL$+x *Wq~& **qV* >\jSjYhS$ !+?Q=3 e~F+q w[2oo; No+>S2< 3-%nb UX)WW !t&RC 0d`00 kQegw}i +Y-7D O9@7c xw/"v [@*HG E#S$2 |C3WvNa R3Y{o5w Fbw7! )N9=3 L0_Q* *FQ1+ iJRk6 +=S'* WQ&uI 5 .'Ty jht\2D >cu{c \8MB6 IaS6A} (K207 _"$IHaP wBW;o':j 0Btb) {k|;W! a_^KJ- :0X0{| &}%Jo`; !=2H~9 T!`!~,S t5=d)Q2 kRn:f]W _LK2p4 DPV*d Lz'DXF UD!2@%fq& wT>3M eO+Z* C@MzQw !':yV @a&16 3^?9w-V X2Ht6 ub9W} /hR?K x-f1IO O7Q&R l?SBeK  DD;)[)| @XY',@` ^c}eF w81O,a9 *Xb,)W dKX#M!j c1I(W <|p&? 69inqwG .0p7a P,Z%^ O-[Z Vk +DCRj &AlQ/7 ?DhGr 1Dy.'<{ J1^m<- KkVo<]TV 4*qkU I5l&a ?S0h ey =E&n< jyR:yfsU:* ?_A*}:  RIm7 'PX2v 1ynRZ t0#m\ w65Zr 7I)C=1 aP7%8/ .k?H{ ~[0)h |DecV F6[HT swJ#) 6R6=J *<3-H #^:%7 zNt2v (qitn+ ~ji](8 0LeKgDb :0xf& |Z~rUFV T`V/}K /^[.@8 il2}a @<jVl CP9zJ ~C'e/ 'aLq/ //?g[r 8-H|3W fcM&6 rq*h8 @xYc$ bJAJD|e 9jsOS9 R"Jin+ l!r+[ Hk)\n! 97-Vi f/^VY K<\N2 /RgL:_~ v=t~/"He# XnI`j| $t&q{X '!&a#< RK<i/ S,\DF k@I2] }h^N@ U#5@2Ph 6pP,p M?hG~ ~q\AG k-Zmga 7(vIi% *$T&u 0Jt#{ !}Pc) {c&?~) "Eya'D c=%]v6 GfE%t #E&2_ z^,yKU c/R); n1d~C fTSE6-u YQ'B?Y* ^W*@] _kW&F=P[J2 &X=6ON 3Snc|/ =*)(jS frJz' $0wY9 Bg)8E 'u!+0 x]aWo RTf_6% ?#NCC 'F[AM $!!{~ZCr w.fRg -P]X>9 3T$.y Z[n[i  hJdv+ [#l:: HMyt1 n%\Kw QU}O.b -]o90 s;C)e MC'P% b+Yj7 A_uRj |oQ%?5 U+x;7 ;AK 7 NiJAw,< \LEp" It8-No b^S;n$ QZ#w`: kLNTk ~bxU/?0 K)yEv J]3DI| a)Qde dZ%5Im 06.-n re}G& )n ^fz fZRZ+ 9Q!XH i5:<{!<A` \1()W3 gS?Rp Io_G;7g :iA3{ fJvX. UNlh# PJrg& 4EKFA .9^>B %;qrd Jtnid asF;/ CimFIr > PE#,? r~5*m E}d4A ]<a4~ k `H= <|D~U" "We|2 [A*=M.Z _Kkh) D[fZE e7mHo c~Ix" EIJe? dk%tL0CM xI6t_Iz `"a&]~ )t3WdP JiEgX4 n&$5,s )z]Nr XR;E7%h Hng$" zv,'0 '[d5c +$}Sg &Lj&Y XJg+  5!").l k}g/:f* 1;{z) F(h#,z+, +HU8`" sZ?gb .f'm( `%.yt ww^P/X 4D`6+ GX"S^ <Sl5@ vtaoy pzuM{GX[ P?^^O Dv'Eg. %+N8'Uu KM@z*` nn/$X {L;nFl R?DR8 Mz ReMV `|WA(A1 Z\j2#( Xr;:ts gF{fg ti?ho -}XL: =pU!= 8U`Ic JF6,L xZMAB dEnZe v.{W^ >@({U T~V\} vEQki Wz>}w bo:@r x{nw-vK qC&0R 7jq*i XdtH5 (K,Hs) q ^;3 }u.8IfD \=KR! *t;j] QW|>A aP UH njfsd<b:Sources xmlns:b="http://schemas.microsoft.com/office/word/2004/10/bibliography" xmlns="http://schemas.microsoft.com/office/word/2004/10/bibliography"/><?xml version="1.0" encoding="UTF-8" standalone="no"?> <ds:datastoreItem ds:itemID="{37C9EA6D-76E9-4192-959E-725FF1123C56}" xmlns:ds="http://schemas.openxmlformats.org/officedocument/2006/2/customXml"><ds:schemaRefs><ds:schemaRef ds:uri="http://schemas.microsoft.com/office/word/2004/10/bibliography"/></ds:schemaRefs></ds:datastoreItem>Permission for this document is currently restricted. If you are not running Microsoft Office 2003 or an application that supports documents with restricted permission, you can read this document by downloading the Rights Management Add-on for Internet Explorer.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\reporting\TsunamiReportingSystem.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKS Document Description Type of Document Status Date Created Feature Spec Template Feature Spec solid 2004-04-16T00:00:00ZXbox Online Spec Template Jerry Johnson Xbox Live Feature Spec Template.dot Nataly Pogrebinsky Microsoft Office Word<?xml version="1.0"?><XrML version="1.2" xmlns=""><BODY type="Microsoft Rights Label" version="3.0"><ISSUEDTIME>2004-08-03T21:39</ISSUEDTIME><DESCRIPTOR><OBJECT><ID type="MS-GUID">{52E8ACC9-B688-4230-9105-FCFB8C54A052}</ID><NAME>LCID 1033:NAME Do Not Distribute:DESCRIPTION Permission is currently restricted. Only specified users can access this content.; </NAME></OBJECT></DESCRIPTOR><ISSUER><OBJECT type="Group-Identity"><ID type="Windows">S-1-5-21-397955417-626881126-188441444-2873485</ID><NAME>tonychen@xbox.com</NAME></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">pYNd4rFXIIK6HZ8jWRAiqwXkrOQSRjVXS5xBRrxJEat3syybrF8ZnU8vSG7cb6M86Pwc4XQO7guQ2XS6tTApbLn8JlRZbrCdKlCobgLXKuDQxhxFN1hnzUQrkKe4gQ6X4OPNnqk2qidPTj8V3NholBUGoOgHHrV22ZYMhujLaKs=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="SDK" value="3.0.3135.0" /></ISSUER><DISTRIBUTIONPOINT><OBJECT type="License-Acquisition-URL"><ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights/_wmcs/licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><DISTRIBUTIONPOINT><OBJECT type="Extranet-License-Acquisition-URL"><ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs/Licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><ISSUEDPRINCIPALS><PRINCIPAL internal-id="1"><OBJECT type="MS-DRM-Server"><ID type="MS-GUID">{aaa331f3-e659-4ea9-876b-e8b25c7b4996}</ID><NAME>CorpRights</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs</ADDRESS></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">oxyxbUguymFHLhu80EH9m62c2XLFXbjm87KlEbSFQkieurr8RZgvtEMWdg6jMAkLJ7xPnWs3hEjOHw99irwZ1g5Z+6yYgktWlKibmPs5Lpamd6v53R40fKES/HNWdjbc68xN9tyfts4pOfyJxT5Xgo0rHVset+rDgShE9B3JQbY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="X509-Issuer" value="OU=Secure Server Certification Authority, O=&quot;RSA Data Security, Inc.&quot;, C=US" /><SECURITYLEVEL name="X509-Subject" value="CN=corprights.microsoft.com, OU=Terms of use at www.verisign.com/rpa (c)00, OU=OTG, O=Microsoft, L=Redmond, S=Washington, C=US" /><SECURITYLEVEL name="Server-Version" value="1.0.3012.0" /><SECURITYLEVEL name="X509-Serial-Number" value="09353CA42E3548605AFAAAFCD1BE93C3" /><SECURITYLEVEL name="Server-SKU" value="12345-123-0000007-18968" /><ENABLINGBITS type="sealed-key"><VALUE encoding="base64" size="1536">rJkFArBJBeb1Qtx/dJXZot7IHs90+1c4A32i2IEHPDlZhpsZV3AlQ1KrQThSjMOyUtVrOV+oXeo5YTuSvmWtytBTbO8uaxFfskDgfblchpM44higjZDABgHDE0zk+b3nSmt6ahyMA2s9B/4K96S0cq+ZzVaGtET7V052zCoXepgbnlDY6/1tLxyskkQLW+gPPaWsjONhijUEG7Yz7VlDpf7WGOoxTiP0VHLJcxURTBInuGLYurtcLcclNdn9Pucq</VALUE></ENABLINGBITS></PRINCIPAL></ISSUEDPRINCIPALS><DISTRIBUTIONPOINT><OBJECT type="Referral-Info"><ID type="MS-GUID">{81C42010-208A-458A-BAB6-C3C60F06DD5F}</ID><NAME>Author</NAME><ADDRESS type="URL">mailto:tonychen@xbox.com</ADDRESS></OBJECT></DISTRIBUTIONPOINT><WORK><OBJECT type="Microsoft Office Document"><ID type="MS-GUID">{4B102CAF-20B0-4A51-9D72-80285DF39C51}</ID><NAME>Microsoft Office Document</NAME></OBJECT><METADATA><OWNER><OBJECT><ID type="Windows" /><NAME>tonychen@xbox.com</NAME></OBJECT></OWNER></METADATA></WORK><AUTHENTICATEDDATA id="Encrypted-Rights-Data">bKKhALjJ7gT37aIZjP5ort03q9xizW7crAgBcAfX8LxXvqVBaL3I4o05MFwMz2wl8B0AospI2uO7JYcdEcF53O4aGqa8OKv6Xho6T+CvOZ6aapO47dIVV4HbzMYWCFiM+Gzeg6p02AcXHrRyTSvl3ZDiSC6OoU4crq3MruQWsDIp5aqDbxQiV8XrJ/+gh6DjxfgFOaWnPBEzI/CXBXIqRQK+MXwN2DU72q2W/Nlm2nS9W92AI/TbiqeRbmRKGUrGPHFi+HcuNqXaBciOD6NAnGHToCk77mVEtlKo3Cvoq5ev2rIL3KcPANH0XoSZIwUvF0/d51/znUZUU5YRS2y+x2nUm5lNzksp9wu+/RuILiNTvjJBViRkXlGZK7oA/sgT7bh12s1avCI/kewv2L87+vgMFNY3CLndD7shf30S8pa05SdfKRZEXvZtef8OKij3KM6+7Aj3pl0iKHbnC7qiezHckpHHRaCWpGiBkkfJI5vM5WZbZQLEvOdBXPj2iQ2Lo7ZORjC5U3syoE9GJskwRFqlc5BE06PHiGZml5gnqX2cjSYX44hQxS2nidEXe3oGTH4WPKn/eac+CT21+Gc99RXPMPOqSZfexxZzxDac+Q8RTFVZy1hNChe0g7h+hJ2Y0niJO2Ck+yHyaO4DwroHYoEpdR+4BxJPNwNdesZMD4k09q+UN9Nl1DLdXDcSHF99tmljBc2kS1UDS7vIDfRwwo30SjFXMcSPHHWzJmh2GWfW8iWMkloI2pOnuZTGQk1zK7jF97k6Nnn8KgWm//DNPgB0bzjDgf8UHCf1bvhY0w5+ZQ+i35TZ1KaIwa+rLq1zZFGqrlS97MTTwyXx54M1+DwYz/ipMeFO5XREUvSFs0SKDMbyj3/WD492QdA7y+erB+xfYjobrBrk3Pcbb99eHRWi8P8GQSMatralGFdcE1DsrZn1CGW+HtEsbMdMaRTzRHa6rMMBtfwQn6YpmhkO/36PZPIQjytzvrNme/K/TmRqRVaJXr3lvyDWo0XgVLFCZGkN5lubZgkDFwTTLbN1POF32GEu1+kVtIHecDPd/pRAXTXNtv10/0bfdGdVxxT93AR74TQxzqW2AgW6gCNTrxy1kH0A0UvNCMQ/rcoy7pFBEpD6lbDoJ6p1mfOXe4xHVapd76DBQO51/NM2VNSpejmbAIH4D1QYJrSae9PXZ72MJg+fbkwjkuXg8vx6WsHmv6viVxKNXpyPqKzfazU+pUgxwa6rPkWg9pXi+iCE/Ju5XiuK/rSTzjzweuq+eITZLlMXtr45WExvUuwxskBsA82P+JXqcvlLoj3C32OMequmPHREo47i1pYC0tccZ8dxYV+taf9ZTlPsyqdZXTcUGvVHZMsPHqw3H/qvc2DZbF6yXIct24hayKjgSybvCXmbq51b8AIorqk/OJF26K2sRy8dfza5XqA0PGxXxQBblLfa0udxIrMttjVrjhJizkKd3NAPKgpjQ1qpus8w9lhXrF4U7ZOWv9bEbjyvacrXxzamACkB0l8qa3fYePXvIjTLnqwvRf+cgwlnorm27TZJOxGUB/+sE2wniIUCtUagW0tybI4lghWdqSfu259IKikme/KtG01G5V5DOGPQOkrZAirT99DAXXyVBDjD3ZA14xEaLF6fQny6u1AhnV6E4StYPhSR55ZEqwEEqVmmpdjXs/tKEE95UjQ8k6bOulRFXcBtDz06u5JYCieAWE+AHF6NVE6xxsfwU/Qn4T0MqJFyTwsZYlOSy8F8QQf2zo3GBVHOofJkcWOOyZkYKkOu0FTDi/sjMIozDw4dafdgZEUYVteUhHZgOXu9OZd13Xn9d3FNRX77NsW5Js6p2QjTGF3B4BKt9Ru/C3fOU3KPja9eLXi9FbGzzkSvzTtPLGwQbxL30+0InJmXflYXNsuwIFXHT0njO1nwsbtNic2WfT+gCNzQDyoKY0NaqbrPMPZYV6yJwTSL1iTqgFp3bIontPPdzWpEnbIZcRESfZ4rCqZvrQxhpx/zrO7gu2mgc5W+bbI+jf84Pl9qQGMe1ztWlgxAqZmSXLj/wLGNGanuqvqJqntCtUXy1VsErTrB8ajSjJge6hjOoAgR0IuRY4eaJi7Mq51b8AIorqk/OJF26K2sR5kYkvvUGAfZHaHzdOuThyj/q4IcAUBlJRHt50kGLBc0XMLQfwFBy2E+KIbfuKsRIdrLLT0e2zqjeJSv4NU2LBEd9kAJxoAQXPJrvkl+dmkqaD2FojriaMqRwsA4WfXbuQ7ZcSp7TXW1pM0uKMzT6HBlfhXHZF9nTP7eQY915SpLsbF3qUnDYKnBZf+j9aRGabASOG9NAhyplFCuzXH/hD0IhbnQynG7KFt5SOVRH6AypzUif9QK6yqNCvgePycImebigQgXufDI2ZxC0cyw+koOzW65EjXroJcjSSP6dM2SCdcjJKUOeBiVhm2Hn6SEVLtM3rH/DrJd70A+C78gqEYoeQ3Wg+ruJbwz02wSWzNGhUHpCHnfKbeUgmAh26WbNdwcDjMwxjfkImZUD6kW9hpz39pcxd0v8R+ojkxCeZYTRzIhPODFeXaKrnjJVHRG5zGlkjjHSdOcNpB8LMMMxyp3toOecyrkBuDOatTFxzNLPK7jA/wRU7IUqKA4t7DdR09J4ztZ8LG7TYnNln0/oAjc0A8qCmNDWqm6zzD2WFestyRjq4UZ1WH6ifBWznGJKHOS2QGecfFU053Q4Mkm5Iy2pmOJdKxl4t7Gh+TIoZO+yc4PW2V1RIlGgucp8B/RoL+Nw5lherlckE3U4OVomUVSA4AGZcsbCPIWj1y/XvxpP2BMOz+JWTVYg8H+8djtvH8//ZmLfyKZIDc6e1qiy6CDEfOo8I4ypfeDnX8ab789wNeEVFbucJZfU8IYPOo8z/F3VAGqo8L7rffB47aNeLNkU8Czjr5nwMUgI7VsrfRngjZHZ+rni38n33anqWGj8rHx2EEgoAVagGb+BFEmN/VASUV7K2Y3R2sMvipjZM/6XHlP1HW9wUiDf1cDsEkLcLeOaiWlu9NwRecwjT5MIs8BUPGIK/z9rw9tTU25puHomQtS1gGnLjbJBNxnGiB3f6atyD5+YeC5KYKVwFylyffxjIYeStdzBbImsHGgFFv+zbl4t9PvxbhANAaWDy18bsjvP5cIYrmKUciVBTIf17WEeOnF2CYFM9Nqg9rSmYNfLE3romWoIUHPVM6RUBzLEABjUHbt6DRAt6H/gvYcz7vPYHBxbpc6FdNevw0rnVIcxJ1WjChZm4CXj2jWRSm4QY/hK5yAnORm4yDYyZB7BehAGAqDYjLtKqNWpqk9lBqbbfQFdgBs3ZhrHrXpQamcLVf2LHYhJyReqQO5/mF6Jd4PUKz/uWiZ50mZlNEGGLKkU74yQVYkZF5RmSu6AP7IE+24ddrNWrwiP5HsL9i/O/o+TAWkxQepTMlVjY/rxYhjuPPnKR39kgCZ523hKfEi/kfgmSW07EemctkUrAO++heEA3e63wYgBH6L2yUh9ezUidAU2UyExfHGSgQitiSIJ62i6nwhg6kYYzUL3XbE3UQVovD/BkEjGra2pRhXXBNQMeEOwMahAgb9YVYiNCi0qw9QrP+5aJnnSZmU0QYYsqQStikHyLJThIzoqPjQu0r4cx4FDD0vSNgOrgKvpEK1bDAMvMApRlxGAxOP6+aOE62OB/urTRUjEEHBCjkPz1XzHRlQehL6hWC5UEtFRgnYUMnOD1tldUSJRoLnKfAf0aCOArlm3kGPwMqyNBAIFTfUUMZEVpo7EciXOzBoN2Ks2Rb0A2ZtornY9tHPQ1PF/R7DS4QMBcIiRZcBvkqiw9GvHLWQfQDRS80IxD+tyjLukXSxJK6sRght3PWwh2vRYzxXFFz1c5Uu9kG7ePb6Lcshd6jqig+1w+AHZskch0VYSEi0RIAZqkkb8W1kWl+/6DfgEq31G78Ld85Tco+Nr14tbwmEvaLMGhyt2x6F8Y8xjFGQ+TWt6lL4PDUkTG/tjfnDnSlCQwCHwYzmpAH9AOo3FvQDZm2iudj20c9DU8X9HvCz/5SEUAQcIgX6yfVTXnG6ecbb3zrtLLlRkAJegPHVCdcjJKUOeBiVhm2Hn6SEVGMLTE9hV8f+Rih9H2k6lLzQ7CfBIF/VZgDsB6bjtcPsetGH3MBghkJ58mIkdyXmNzAMvMApRlxGAxOP6+aOE63Eg19svNg21sR5oyRgLtrHBMTBvxMps0UHCXqK9N1rSyZWY1wNueV9U2POytB7D5RKoXdt6vTvGu88SXZdYW7cSAYnrZXNkaEvDZ2AtCKSdbbwE51HoRLpP5ZyEd5E40eJhiiIBy7u4U78gTGAx0jv9qhypfGMC6i8ozQxWQ2zmM5azycQdTLQHVmGwUtavTeUgz/xZMUwIT0pEXXNs6LJfvduIgiwus/iW2ZKqg/mkFO+MkFWJGReUZkrugD+yBNUV6Ilh7avtJpXZAmXTpvoDXVN14wV3au6DcpB99XxgXIoXKjFHDSQXa5sHIvFqoVAGAqDYjLtKqNWpqk9lBqbHyy/7yCQiD3JSww3Jy3qMzF3sfSzsAfX2Rs0r46jFewzmLg7V2ArRPTpvqy2pv4O+L4PKdyojvVKZS/3HOJAaV4+8kqMvy1Nxqx2zWNYXd+NiGHeS0qiNemdMGoZtbIlWBhvSml+p18Rigk0WLfSX3zsBsup/cnVUwm/SZN4n1SUKC69iYgZMPPU01un4SRf1Io9Th+uTn/QKKiEko1yWWtOstIlxKng8MofgpHrEFQfj4p484fCxgKekGf8qF3H2LpvoBxTD0GhO6HJgE5BEeFThRCS6VhF//G594ziESvy9oU6RSF2/zPmWO1MDVlEAVDxiCv8/a8PbU1Nuabh6JkLUtYBpy42yQTcZxogd3+mrcg+fmHguSmClcBcpcn38YyGHkrXcwWyJrBxoBRb/s25eLfT78W4QDQGlg8tfG7I7z+XCGK5ilHIlQUyH9e1hHjpxdgmBTPTaoPa0pmDXyxN66JlqCFBz1TOkVAcyxDsAateNveMyIBRv+Qsxg2aD8WtJiiArM27CvzyXL1MDFqOy+L/G6bYDOkCeic8XQcLTc2qvsUaJnp8aVWM1OmxRnqOZ0z4vFl0cCCLYtPLItF2+YWZ7Z3XmhLvWfSOBVg48r682cZi0750oGUd9rAFxyEwbuMkzYWa22Zw98SKM1sJnr9i8sCE1wLRaoSRMWki1VZ4HAZoQU9Kw4LtPHIRZFPAs46+Z8DFICO1bK30Z73FlU+8pYisvckD4H2V6JLM/5+0AcEWTujWrBxyLv50Mjb1WoAoLQSPQ2Rn4guroOeFVpYEiAgwtkuu8yI/aiRB22CJw/H5Px605uAkszdtt8wOxlaSf6KIVYmw1uHv/SSGugrky2SgkwIbMrpm8283COubDPS02rg8QwPzOakqLPDVyHMB6L4gZCUFSy4RZMz/GikRvyz1cTHgoxTF74qmrcg+fmHguSmClcBcpcn3FXZnrc8UZdsirlzk1bPxKoQzjZbOCgwI42Jp67ci4hSV6PKuTTS4VB5+UmbMcGfz5Gaj45U+Aee02UegE4Y4hI0keob4x/sTWV0AMCR7XqlOnif2/jWRS1dHYwkpSK0745hc4IkE0JPJQ9yxzKNUvp1VtjdwgJbmVUcIReVW5kbCikfP6BMIylfP8NMu59f4TZphIcn83D1w9kH1uJ5Vh2WD5VCGsBIHShbQUmbVXSX0UkqpyYf4svOVYhZ0Liwn+GNI6DkcCL7Cznna/cbHEUcS7Uohg9h4CBvNrl2bhIt0O4uS1UPFLRUujKJpNv6cFgpNDhv0N+h0pdiFFRSErZtg9gvTPkmz2hgSy5wxUBQXKRAC5/aA60Od4qq206rkt4rUMTPJHaRpesmNaJIDNKMZuUQSBPC+yUTP8F9/3f36vNoKullIILLPmS2GFUSpO+Ydmvc9GzmYnIyiM4TrrW984clGYEDCTPasP4Q4UKIRv1/6BdSaevogvLPpyLHV</AUTHENTICATEDDATA><POLICYLIST type="exclusion"><POLICY><OBJECT><ID type="filename">winword.exe</ID><VERSIONSPAN min="0.0.0.0" max="11.0.4919.0" /></OBJECT></POLICY></POLICYLIST></BODY><SIGNATURE><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><DIGEST><ALGORITHM>SHA1</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="160">ugzjSYMOLWWpv+D9HE2XWFN+3Go=</VALUE></DIGEST><VALUE encoding="base64" size="1024">Pcxj1ib1RUywy3ZH+0BGXfBXXPg/Ho0u3CCoGnEqVSix/eRM9gKe661RvhfRZEVvCoWMKn7XMNKhV00DjJv3HDOjFtVEkKqeF4uJlDhfFWAi7m0/+kb9LurKlYVPtlJEtAX1o8ZP83lyzVFFSkoCaFtDwJIKLb7hQu1ML1Wy00Y=</VALUE></SIGNATURE></XrML><XrML xmlns="" version="1.2"><BODY type="LICENSE" version="3.0"><ISSUEDTIME>2003-12-11T18:05</ISSUEDTIME><DESCRIPTOR><OBJECT type="Client-Licensor-Certificate"><ID type="MS-GUID">{c090de7d-4b57-44e3-8c75-8b69c1edf8f1}</ID></OBJECT></DESCRIPTOR><ISSUER><OBJECT type="MS-DRM-Server"><ID type="MS-GUID">{aaa331f3-e659-4ea9-876b-e8b25c7b4996}</ID><NAME>CorpRights</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs</ADDRESS></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">oxyxbUguymFHLhu80EH9m62c2XLFXbjm87KlEbSFQkieurr8RZgvtEMWdg6jMAkLJ7xPnWs3hEjOHw99irwZ1g5Z+6yYgktWlKibmPs5Lpamd6v53R40fKES/HNWdjbc68xN9tyfts4pOfyJxT5Xgo0rHVset+rDgShE9B3JQbY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="X509-Issuer" value="OU=Secure Server Certification Authority, O=&quot;RSA Data Security, Inc.&quot;, C=US" /><SECURITYLEVEL name="X509-Subject" value="CN=corprights.microsoft.com, OU=Terms of use at www.verisign.com/rpa (c)00, OU=OTG, O=Microsoft, L=Redmond, S=Washington, C=US" /><SECURITYLEVEL name="Server-Version" value="1.0.3012.0" /><SECURITYLEVEL name="X509-Serial-Number" value="09353CA42E3548605AFAAAFCD1BE93C3" /><SECURITYLEVEL name="Server-SKU" value="12345-123-0000007-18968" /></ISSUER><DISTRIBUTIONPOINT><OBJECT type="License-Acquisition-URL"><ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights/_wmcs/licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><DISTRIBUTIONPOINT><OBJECT type="Extranet-License-Acquisition-URL"><ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs/Licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><ISSUEDPRINCIPALS><PRINCIPAL internal-id="1"><OBJECT type="Group-Identity"><ID type="Windows">S-1-5-21-397955417-626881126-188441444-2873485</ID><NAME>tonychen@xbox.com</NAME></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">pYNd4rFXIIK6HZ8jWRAiqwXkrOQSRjVXS5xBRrxJEat3syybrF8ZnU8vSG7cb6M86Pwc4XQO7guQ2XS6tTApbLn8JlRZbrCdKlCobgLXKuDQxhxFN1hnzUQrkKe4gQ6X4OPNnqk2qidPTj8V3NholBUGoOgHHrV22ZYMhujLaKs=</VALUE></PARAMETER></PUBLICKEY></PRINCIPAL></ISSUEDPRINCIPALS><WORK><OBJECT type="Client-Licensor-Certificate"><ID type="MS-GUID">{c090de7d-4b57-44e3-8c75-8b69c1edf8f1}</ID></OBJECT><RIGHTSGROUP name="Main-Rights"><RIGHTSLIST><RIGHT name="ISSUE"><CONDITIONLIST><TIME><RANGETIME><FROM>2003-12-10T18:04</FROM><UNTIL>2004-12-10T18:04</UNTIL></RANGETIME></TIME><ACCESS><PRINCIPAL internal-id="1"><ENABLINGBITS type="sealed-key"><VALUE encoding="base64" size="6144">edWNDFNa8I0Bb0JprMyxbQZdT7w76AVTofALz+SVXyaeQMiJNeZlmS0q3U7WXHY2USze3HqN9fxvhUEwpur+0NNXCAx4pofDMrFX2Lut4EJiWfjY6Jnbu4setPUkSWMAIbLQYFRaXFwc+vWDlowGRnSirFycxNM1PxJvnn3hL7pV74A9TxFZN9PLzCwzk6Sj0n4aKlB+GbfFau/GQaSKWy2+eqJ7ZgKLFAu0rw/O2vP30tyuZ63dvtsCkzO+wWcGpPwxGDWqaOvzTGV/0brDWYFRQR9W0rbYeSGXQpGceNNsNlFKboJ4AR9o2fUkIjwOYFRf8+w4Ogyduob4x53jwkvONw1o7whSjFj2nnjmhBq4uWwYSShkzr5SzRLS+j3v9fZkJ4evTjxf70jy+A9z5YrQiQg7L6dZSjS7upFgFjKC6yf9aloQIr/AbNStX/DWsImirB9XzeW4+/KhS48PNih99VqWa48+4cKMwT6/zlqAR7KrjPeukO53c1wgJ53cvkIgtZmS+5iciQYotIhpdUkCzj91HZb2uTYP8mwGu5TZZdSNY9AjLU/N1ZIDc/w9/jgVHXqowHf/dc2cdBdjDFrsozz+16W54g48DBCruLMea0MwdWaWNlOxHiR8ZvHOm79LLQbeaDxv0BSDntOAxaEEf+1f0UNX/u7prAw8+opRFz8rt420V19v4PZyWlfquAuV6oMiV0EdnJshkusj+vsk7jw1Xs1Lyk4H10VZXEejnw9owtog2yO4kOW7t3VtHyxmFf9uv/fJqjAiT35gP97aIHn1c89ymtU4V1Op7kZQt/mx3sQL3zKc9DzJBRgRBkN6frDiJ1O9jg6Nz0wAhxj3X2enG/Flzx2Dt+DmBpXX8HusZX4Ia0b892OxEJ8tmlARGj0CYFCniPlp5gSVR32fXqGoGuCVqnE7cjvzK+1AE47Qhxc6vTpDMOlbh/78XcpWjblGpS2SKsqsTufgoOBGjO8V8Mq5pWvV471cQ++8s1zvFZFQLH7D1VK34vHM</VALUE></ENABLINGBITS></PRINCIPAL></ACCESS></CONDITIONLIST></RIGHT></RIGHTSLIST></RIGHTSGROUP></WORK></BODY><SIGNATURE><DIGEST><ALGORITHM>SHA1</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="160">keXRmkF4Ogfzo7tGIdKAKobGgIM=</VALUE></DIGEST><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><VALUE encoding="base64" size="1024">YVV0NC3W8SsZs6X7K+ryraCkmkN45+BSnBsi/vjadQnc0ZdKzPYIklSu+nAErWwGRXAXMta6bF2TOj2EIUO0i1ZB5lxqFscBv7muidtBl9g7EyrF1aGWvNruTXyGP1RsAlKDwi9wFPpczwidRZXKLiUdH3ob+Dw4hI5WSu7wqC0=</VALUE></SIGNATURE></XrML>VwBpAG4AZABvAHcAcwA6AHQAbwBuAHkAYwBoAGUAbgBAAHgAYgBvAHgALgBjAG8AbQA=` <?xml version="1.0"?><CERTIFICATECHAIN><CERTIFICATE>PABYAHIATQBMACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgAgAHgAbQBsAG4AcwA9ACIAIgAgAHAAdQByAHAAbwBzAGUAPQAiAEMAbwBuAHQAZQBuAHQALQBMAGkAYwBlAG4AcwBlACIAPgA8AEIATwBEAFkAIAB0AHkAcABlAD0AIgBMAEkAQwBFAE4AUwBFACIAIAB2AGUAcgBzAGkAbwBuAD0AIgAzAC4AMAAiAD4APABJAFMAUwBVAEUARABUAEkATQBFAD4AMgAwADAANAAtADAAOAAtADAAMwBUADIAMQA6ADMAOQA8AC8ASQBTAFMAVQBFAEQAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBDAG8AbgB0AGUAbgB0AC0ATABpAGMAZQBuAHMAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADYAOQAxAEMARgAxADkARAAtADYANwA1ADcALQA0ADEANABGAC0AQQBCADQAMQAtAEQAQgA0ADcAOQAxADAAQQA3AEUANAA4AH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBHAHIAbwB1AHAALQBJAGQAZQBuAHQAaQB0AHkAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIAVwBpAG4AZABvAHcAcwAiAD4AUwAtADEALQA1AC0AMgAxAC0AMwA5ADcAOQA1ADUANAAxADcALQA2ADIANgA4ADgAMQAxADIANgAtADEAOAA4ADQANAAxADQANAA0AC0AMgA4ADcAMwA0ADgANQA8AC8ASQBEAD4APABOAEEATQBFAD4AdABvAG4AeQBjAGgAZQBuAEAAeABiAG8AeAAuAGMAbwBtADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgBwAFkATgBkADQAcgBGAFgASQBJAEsANgBIAFoAOABqAFcAUgBBAGkAcQB3AFgAawByAE8AUQBTAFIAagBWAFgAUwA1AHgAQgBSAHIAeABKAEUAYQB0ADMAcwB5AHkAYgByAEYAOABaAG4AVQA4AHYAUwBHADcAYwBiADYATQA4ADYAUAB3AGMANABYAFEATwA3AGcAdQBRADIAWABTADYAdABUAEEAcABiAEwAbgA4AEoAbABSAFoAYgByAEMAZABLAGwAQwBvAGIAZwBMAFgASwB1AEQAUQB4AGgAeABGAE4AMQBoAG4AegBVAFEAcgBrAEsAZQA0AGcAUQA2AFgANABPAFAATgBuAHEAawAyAHEAaQBkAFAAVABqADgAVgAzAE4AaABvAGwAQgBVAEcAbwBPAGcASABIAHIAVgAyADIAWgBZAE0AaAB1AGoATABhAEsAcwA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AC8ASQBTAFMAVQBFAFIAPgA8AEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARwByAG8AdQBwAC0ASQBkAGUAbgB0AGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAFcAaQBuAGQAbwB3AHMAIgA+AFMALQAxAC0ANQAtADIAMQAtADMAOQA3ADkANQA1ADQAMQA3AC0ANgAyADYAOAA4ADEAMQAyADYALQAxADgAOAA0ADQAMQA0ADQANAAtADIAOAA3ADMANAA4ADUAPAAvAEkARAA+ADwATgBBAE0ARQA+AHQAbwBuAHkAYwBoAGUAbgBAAHgAYgBvAHgALgBjAG8AbQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4ASQA4ADkASgA3ADIAUwBKAC8AaQAvAC8AUwA1AHUAMAB3ADQAUgBHAFkAdABMAFYANABXAHIAZgBVAG8AMQBSAE4AdQBaADMAawBSAE4AUABRAE0AMwBoAGkAcABrAGgAYwBjAHUALwBuAG0AUABoAEwAUABtAEkAcwBNAEMAeQArAGgAWgBKAFoAZQBwAGQAbQBTAHYAZwArAG0AbwBuAGgAOAAvAHkAeABRAFgARgAvAGIAVABoAGYAeQB3ADkAZgBvADEAMABNADUAZgBQAFgAZgBHAFoAWQBiAGkAZwBHAG4AVQBZAFMAcAB3AEcASQBSAHEAdwBFADQARgBHAG4ATwBJAFIAdQA4AE4ATgAvAG0AYgBDAGQAYQBLADQAVABjAGYANwBhAE0AQgBXAGMAZwBFAGkAUQBRAHQAMwBnAHkAQQBJAGsASQBVAEQAVABLAG8APQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APABTAEUAQwBVAFIASQBUAFkATABFAFYARQBMACAAbgBhAG0AZQA9ACIARwByAG8AdQBwAC0ASQBkAGUAbgB0AGkAdAB5AC0AVAB5AHAAZQAiACAAdgBhAGwAdQBlAD0AIgBHAHIAbwB1AHAAIgAgAC8APgA8AFMARQBDAFUAUgBJAFQAWQBMAEUAVgBFAEwAIABuAGEAbQBlAD0AIgBHAHIAbwB1AHAALQBJAGQAZQBuAHQAaQB0AHkALQBDAHIAZQBkAGUAbgB0AGkAYQBsAC0AVAB5AHAAZQAiACAAdgBhAGwAdQBlAD0AIgBQAGUAcgBzAGkAcwB0AGUAbgB0ACIAIAAvAD4APABTAEUAQwBVAFIASQBUAFkATABFAFYARQBMACAAbgBhAG0AZQA9ACIARwByAG8AdQBwAC0ASQBkAGUAbgB0AGkAdAB5AC0AUABvAGwAaQBjAHkAIgAgAHYAYQBsAHUAZQA9ACIARwByAG8AdQBwAC0ASQBkAGUAbgB0AGkAdAB5AC0AQwByAGUAZABlAG4AdABpAGEAbAAiACAALwA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABEAEkAUwBUAFIASQBCAFUAVABJAE8ATgBQAE8ASQBOAFQAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIAUgBlAGYAZQByAHIAYQBsAC0ASQBuAGYAbwAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADgAMQBDADQAMgAwADEAMAAtADIAMAA4AEEALQA0ADUAOABBAC0AQgBBAEIANgAtAEMAMwBDADYAMABGADAANgBEAEQANQBGAH0APAAvAEkARAA+ADwATgBBAE0ARQA+AEEAdQB0AGgAbwByADwALwBOAEEATQBFAD4APABBAEQARABSAEUAUwBTACAAdAB5AHAAZQA9ACIAVQBSAEwAIgA+AG0AYQBpAGwAdABvADoAdABvAG4AeQBjAGgAZQBuAEAAeABiAG8AeAAuAGMAbwBtADwALwBBAEQARABSAEUAUwBTAD4APAAvAE8AQgBKAEUAQwBUAD4APAAvAEQASQBTAFQAUgBJAEIAVQBUAEkATwBOAFAATwBJAE4AVAA+ADwAVwBPAFIASwA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBNAGkAYwByAG8AcwBvAGYAdAAgAE8AZgBmAGkAYwBlACAARABvAGMAdQBtAGUAbgB0ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsANABCADEAMAAyAEMAQQBGAC0AMgAwAEIAMAAtADQAQQA1ADEALQA5AEQANwAyAC0AOAAwADIAOAA1AEQARgAzADkAQwA1ADEAfQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABPAGYAZgBpAGMAZQAgAEQAbwBjAHUAbQBlAG4AdAA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwATQBFAFQAQQBEAEEAVABBAD4APABPAFcATgBFAFIAPgA8AE8AQgBKAEUAQwBUAD4APABJAEQAIAB0AHkAcABlAD0AIgBXAGkAbgBkAG8AdwBzACIAIAAvAD4APABOAEEATQBFAD4AdABvAG4AeQBjAGgAZQBuAEAAeABiAG8AeAAuAGMAbwBtADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APAAvAE8AVwBOAEUAUgA+ADwALwBNAEUAVABBAEQAQQBUAEEAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlACAAPQAgACIATwBXAE4ARQBSACIAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABFAE4AQQBCAEwASQBOAEcAQgBJAFQAUwAgAHQAeQBwAGUAPQAiAHMAZQBhAGwAZQBkAC0AawBlAHkAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQA1ADMANgAiAD4ATABNAEwATwBCAHMAYQByAFcASQBYAG4AcQB5AFEARwBIADIASgBEAHAASQBYAGoAKwBiAHkASQAxAE0AMgBvAHEATQBQAEgAZgBRAEkAeQB6AEYAVgBIAGQATgBEADkASgBpAGsAOQAwAHAAdQBxAFgANQAvAEEAQQBnAFAAcgBsAGYAaABYAEgAMwBrADMAZgBlAFoAbwA2AEkAZwBpAFMAZAA0AEUATQBKAGUAawAzAHQAbAA2AHkAcABoAGkAVQA1AEgAQwBZAGoAUQBuAHYAegBPAEcAUQBwAGoAMABLAC8ATQBuAFAAZABwAGkAYwB5AEQANgAyAEoAbgBqAHEAYwA0ADcAMABOADUAMQByAEkAdwBFAEUAaABNAHEASQBPAFQAOABSAFQAZwBWAEQAMgA0AGwANwBKAGEAZwBmADQASgAwAFYAbgArAEsASABVAHEAbgB6AHUAUAAwAG0AVQA4AEkASAB0ADkATQBmAG0AMQBaAFcAOQBZADYAcQAwAGUAQgBhAG4ARwA3AHcARgBGAGEANwBaAEMAQwBvAHoATQBRAG8AVAAxAG0AZQBUAE4AbABrAC8ARwB1AEkAeAB6ADAAVAA2AGkARgBKAGUARwBTAHoAbQBLAHEAWgB5ADEATgArAGoARgBkAFEARQBSAFUAUQBjAHUAYgA8AC8AVgBBAEwAVQBFAD4APAAvAEUATgBBAEIATABJAE4ARwBCAEkAVABTAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APABDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APABSAEUARgBSAEUAUwBIAD4APABEAEkAUwBUAFIASQBCAFUAVABJAE8ATgBQAE8ASQBOAFQAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIAUgBlAHYAbwBjAGEAdABpAG8AbgAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBhAHMAYwBpAGkALQB0AGEAZwAiAD4ASQByAHIAZQB2AG8AYwBhAGIAbABlADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AC8ARABJAFMAVABSAEkAQgBVAFQASQBPAE4AUABPAEkATgBUAD4APABJAE4AVABFAFIAVgBBAEwAVABJAE0ARQAgAC8APgA8AC8AUgBFAEYAUgBFAFMASAA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APABBAFUAVABIAEUATgBUAEkAQwBBAFQARQBEAEQAQQBUAEEAIABpAGQAPQAiAEEAUABQAFMAUABFAEMASQBGAEkAQwAiACAAbgBhAG0AZQA9ACIAVgBJAEUAVwBFAFIAIgA+ADEAPAAvAEEAVQBUAEgARQBOAFQASQBDAEEAVABFAEQARABBAFQAQQA+ADwAQQBVAFQASABFAE4AVABJAEMAQQBUAEUARABEAEEAVABBACAAaQBkAD0AIgBBAFAAUABTAFAARQBDAEkARgBJAEMAIgAgAG4AYQBtAGUAPQAiAE0AUwBPAEQARgBMAFQAVQBTAEUAUgAiAD4AVgBJAEUAVwA8AC8AQQBVAFQASABFAE4AVABJAEMAQQBUAEUARABEAEEAVABBAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUwBIAEEAMQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAYwBvAGQAaQBuAGcAdAB5AHAAZQAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAHMAdAByAGkAbgBnACIAPgBzAHUAcgBmAGEAYwBlAC0AYwBvAGQAaQBuAGcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQA2ADAAIgA+AFEAOAB3AE4AbQBiAEgAWgB4AHkAbQA0AFMAZwBkAHYAaAB2AFUAawAvAEYAQgAxAHUAcwAwAD0APAAvAFYAQQBMAFUARQA+ADwALwBEAEkARwBFAFMAVAA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AagByAEQAMwA3AHUATgAzAGYAVgB5AGcAYgBaACsAWABDAHkANwBhAGMATwBkAEgAWQBrAGIATgBPADQASAArAEoAQgBlAEoAbQBDAEUAeQAyAG8AcAA4AEQARQBzAHQALwA0AEcAYwBrAGUARwBRACsAYgAvAEYAbQBIAHEAOQBBAHIATQB1AGIAWAB2AEMANgB2AGMAbQBZADIATgBvAHcANABrAG4AdgBNAEYAdQBYAEwATQA5AGoAaQBRAFgANgA4ADEAYQBhAHEATQB2ADAATABxAHcAawBhAEwAVAB2AEcAYwBtAHoAbgAwAHgASwBMAEkAbgBWAFMAOQA0AE4AdABGAHQAUgBMAHgALwBUAE8ANwBPAHUARABNAEgAZgBzAHkAVABFAHkANwBrACsAUQA4AGoATwBCADkAVgA0AGkAYwBuADYAYQA0AHUAUgByAFEAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFMASQBHAE4AQQBUAFUAUgBFAD4APAAvAFgAcgBNAEwAPgA=</CERTIFICATE><CERTIFICATE></CERTIFICATE><CERTIFICATE></CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA5AFQAMgAxADoAMQAzADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADkAVAAyADEAOgAxADMAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAwADkALQAxADIALQAwADcAVAAyADEAOgAxADMAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBTAGUAcgB2AGUAcgAtAEwAaQBjAGUAbgBzAG8AcgAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGEANQA3ADIAYgBhADkANwAtADEAZABiADAALQA0ADcAMQBiAC0AOAA0ADkANQAtADQAYwBhADEAYQA2AGQAMwBkADcANgA4AH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABTAGUAcgB2AGUAcgAgAEUAbgByAG8AbABsAG0AZQBuAHQAIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AFAAUQAzAFoARABoAEcAeQB4AE8AVABsADYATAA5ADMAKwBCAGoAdQB0AGsATQBZAHYAQQBnAGYAMgAwAEkAbgBXAGEAYgByAHIARQByAEwAVwBCAE4AagBqAEMAVQBrAFEAUABBAEMAQgBOADcARwAvAGsAawB5AGIAQgBZAHcAOABTAEgAdAA4AEoAUwBXAHcAUgB5AGEAbABYAFIARQBoAG8AQwBCACsANAA1AEMAMQA0AGIAKwA1AEMAQgBPAGoAaAA2AG0AegBMAEcAZgAwAHIARwBXAFgAMgBaAE8ATwBaADQAWQBCAE0ASABTAFcAeQBoAG4AKwBCAGQAUgAzAHgAdwA5AGEANQBDAFkAQgB1AFMAQQBBAG0AaQBhAEcASwBGAFAAVgA3ADAATAAvAHYAWgAyAEYAeQBUAFkAZABlADYASQBqACsATwBqADYAWgBrAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBJAFMAUwBVAEUAUgA+ADwASQBTAFMAVQBFAEQAUABSAEkATgBDAEkAUABBAEwAUwA+ADwAUABSAEkATgBDAEkAUABBAEwAIABpAG4AdABlAHIAbgBhAGwALQBpAGQAPQAiADEAIgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBNAFMALQBEAFIATQAtAFMAZQByAHYAZQByACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsANgBmAGUAZQAxADkAMgAwAC0AZQAxADgAOQAtADQANgBmADUALQBhAGEAOABhAC0ANwBkADYAYwAxAGMAYgBmADQAYQA4ADEAfQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAFMAZQByAHYAaQBjAGUAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AHEAVgAxADAASQBtAEEAdQBnAGIAMgB5AGwATAA3AGQAdwBwADEAdgBwAEwAYQBBAE4AZwBpAG0AQwBKAEsAaQBMACsAUgBuAEsAZwBTAG8AZQB3AHgAbABUAFQAWQBhAGgANwBFAFUAQwA5ADgAeQBKACsAMgBZAEsANgAxAGoAWABEAFYAeABHADIAdwBkAGsARABJAGoAeQBBAHIAaABxAGkAWQBIAFQAWQBVAG0AegBRAEcAUwA2ADIAdQBvADMAdgBBAC8AVQBZAFcAawBTAG8AdgBVAFgAQgBXAFIAUABUADMALwBmAGUAUQA1AHEAUQAvADAAaABJAGkAeABOADMAVQA0AFEAagBHAE8AcwBPAHMAZwBpAGsANwA5AFMAOAAyAEkAKwArADYAMABZAEIANQB6AFYASABaADEASQBhAEQAVwB3AHYARAAvADgAYgAwAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYQA1ADcAMgBiAGEAOQA3AC0AMQBkAGIAMAAtADQANwAxAGIALQA4ADQAOQA1AC0ANABjAGEAMQBhADYAZAAzAGQANwA2ADgAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAAOQBUADIAMQA6ADEAMwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANAAtADEAMgAtADAAOABUADIAMQA6ADEAMwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AZwAzAFAAVwBGADUAVgBkAEoAZQBvAFQAVAA0AHoAcAB0AHIAcQBiAGkAaAAwAGEAbgBwADgAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4ASwAvAGEAWABpAFAAegBUAEgAZQBaAFMASgB5AEMASQBDAHcAOQAyADEATABSAHEAeABBADcAOQBxAEUAZgBvAFgAeQBBAFgAcQArAHQAbgA4AEQAbgArAGEAMQA2AFMAagA0AFAAVwB3AFoASgBRADkAcwBNAEEAQQBvAHAARQBPAEUASwBsAE4AWAA2AEkATgBzAEEAQQBXADEAMAB6AGsATQBDAGkAeAAyAFUAQgBsAEwASgBDADMAVwBUAHAAdwBoAHMAbABUAEYANgBSAG0ASwBIAGgAUgBYAHIAcQBuAGkAVABVAGsAdgBQAEQALwBxAGoAdwBUAGoAZQBWAEgAOQBKADUAcwBXAFEAdwBsAHgANABrAEsAawBIAFUAaQBFAHoAZQBlAFIANwBPAEkATABrAEUAMAB2AGgAdQBUAHIAVQA1AGQAZwA4ADYAbQB1AFkAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFMASQBHAE4AQQBUAFUAUgBFAD4APAAvAFgAcgBNAEwAPgA=</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAyADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAyADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADQAMAA4ADQAOQAzADAAZQAtAGQAZgA0AGEALQA0ADEAZQA4AC0AOQAwADEAMQAtADYAZgAyAGUANgBjAGIAZgBlADQAOABlAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADIAMAA0ADgAIgA+AE4AUQByAFkAUwBBAGMANAAzAFYANwBOAFIAVABXADgAVgBUADUARQAyAFgAaABNAGMAdwBtAG0ATwBOADcAVABrAFEANwBFAFQAVQBJAFcARwBxAGwAUABUAHYARgBTAHcANwA5ADgAZwBGAGcASQBYAEIAYwBGAE0AdABDAGQASQB5AGYAMwBWAE0ATwA1AFkARwBPAEsASgBEADEAdwBuAGMAMgB5AGQAbABvAHoAZgAxADYAVgBIAEYANQBVAHIARgBnAHQAawBUAC8AOQB1AEsANwB1AFIAcwBoAGoAeQBIADUAMQA2AEgALwBjAEMASwBKAHkASQB5AFAAYQBZAEUAawBXACsAcABJADcAeAA4ACsAYwBmAGcAVgBjAFUAWABaAC8AbwBDAHIARgBIAGQAdQBlAFgATABTADQAYwBlAC8AbgBhAGwAcwA0ADUAcQB4ADUAcQBxAGMAZABNADcAWQAwADgAbwA1AGEAMQBrAFgALwB5AG8AaQBQAEwAYgBvADkAbQBLAFMALwBOAGwAegBFAGYAYwBSAHYAUgBOAGkAQQBDADYAVwBxAGwASQB2ADgATQBnAE4AeABwAEEAbQBVADcARgBSAFUASABUAFAAYwBrAC8AZwBPADkAWAAwAGEAZgBoADcAVgBrAHcAUgBxADMAMwBUAGoAcgBDAFMAKwBVAGkAZABvAHgAdwBPAEkAMgBFADAARABLAE0AbQB0AGcAVQBNAEEAMgB1ADAANABPAC8AZgBnAFIAMABMAGUAVQByAHUAVABZAFkAagArAFEAegAyAEkASQA4ADIAcQBjAHoANwArAGYAZQB0AEUAZABVAHMAdgBLAEsAYQAxAFoAQgBLADgARgBuAG0AdwAxAEIARgBQAGUAbwB5AFgAOQBnAD0APQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlAC0AQQB1AHQAaABvAHIAaQB0AHkAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIAYQBzAGMAaQBpAC0AdABhAGcAIgA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAQwBBADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AUABRADMAWgBEAGgARwB5AHgATwBUAGwANgBMADkAMwArAEIAagB1AHQAawBNAFkAdgBBAGcAZgAyADAASQBuAFcAYQBiAHIAcgBFAHIATABXAEIATgBqAGoAQwBVAGsAUQBQAEEAQwBCAE4ANwBHAC8AawBrAHkAYgBCAFkAdwA4AFMASAB0ADgASgBTAFcAdwBSAHkAYQBsAFgAUgBFAGgAbwBDAEIAKwA0ADUAQwAxADQAYgArADUAQwBCAE8AagBoADYAbQB6AEwARwBmADAAcgBHAFcAWAAyAFoATwBPAFoANABZAEIATQBIAFMAVwB5AGgAbgArAEIAZABSADMAeAB3ADkAYQA1AEMAWQBCAHUAUwBBAEEAbQBpAGEARwBLAEYAUABWADcAMABMAC8AdgBaADIARgB5AFQAWQBkAGUANgBJAGoAKwBPAGoANgBaAGsAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAEEALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA0ADAAOAA0ADkAMwAwAGUALQBkAGYANABhAC0ANAAxAGUAOAAtADkAMAAxADEALQA2AGYAMgBlADYAYwBiAGYAZQA0ADgAZQB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA5AC0AMQAyAC0AMAAzAFQAMAAxADoAMgA3ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgByAHEAVABNAHAAZQBXADAAOQBrAE4AWQBBAEQAdgBQADcAaABZAFoAWQB0AGgAQwBjAEwAbwA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgB4AFgAWgBMAHEAZAA3AGUAVQBhAEgATgBKAHMAVwA3AG0AcgArAFQAZwBnACsANgBIAGkAdABGAEEAawBPAHIAQQBzAFkAMwBMAEgAMQBwAEwAWgAvAFkAMwByACsASgAyAHoANgBSAC8AcwBlADAANgBaAFYAVQBRAGgAegAyADUARgBHAFMAawBiAFIAdgA5ADQAWABDAGEAegArAEEAbwBXADAARQBaADIAZABnADEAZgBBAHkAbABtAFEAZABJAEEAQgBqAHEANgBJAG0AOABCAGkAOQBvAEYANgA3AG4AVwA4AEQAQgBjAGoAcgBiAGkAMgA1AFcATwBEAEgAVABlAHMAZQBBAFAAUwA2AGMATwBxAGkARwBzAFYAdgBZAFMASwBQAE4AawA1AE8AKwB0AGMAQwBLADUARQBQAHIAVgBpADAAcgBQAGIAMQBRAEsAUQAyADQATwBHAE0AZwAzAEwASQAzAHMAVgB3AHkAaQA1ADUAUQBiADEAdwBLAHQAZABaADUAVgBxAGQAWgBKAHYARQBjAGsAWQBFAGkAWQBRADEAZQBmAGEAdQB5AEkAdQBuAG4AbgBmAG4AegA1AEYAWABYAFUAUgBCADcANwBKAG8AUwBxAHQAYQBZAHgAdgB6AHUATgBCADgAKwAwAGkALwBsADAAYQBHAEIAWgBZAFMASQBsADMAawBZAEEAVgBkAGcAegBhAFkAdwBsAHAAVABzAGkAbwBTAHoATwBlAFEAMgB1AEEAbABkAHgAegAvAHoAcAB2AFcARAA3AGsAcABEAHcARQB4AHAAMAA0AGwAZwBYAE8AOQBrAFYAOQAxAEsAQgB2AG8AZABqAFIAUgB1AC8AUABKAEUAZQBMAEMASQA1AGEASQBPAG0AVAAzAG0AUQA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBTAEkARwBOAEEAVABVAFIARQA+ADwALwBYAHIATQBMAD4A</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMAA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAwADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAwADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGIAZgBkAGUAMwAxADcAMQAtADEAYwA4ADMALQA0AGYANwA2AC0AYgA1AGYAOQAtADMANAAyADgANwA3ADQAYQAzADIAOABhAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFIAbwBvAHQAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUgBvAG8AdAA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AWAB5AGwAQwB3AFMAbwBvAHcAMwBNAGQAbgBzAFYAUABrAFQAdAB3AEkAWQA1AHIAawA2ADQANwBiAFMANgA0AE4AZgA3AE0AMgBIAFMAOABrAGwAUgBrADUAYQBoAGgAYwBNAHgAOQBWAE8AbABuAHQAegBxAFgAMwBTAFkAeQBxAHgAbwBYAFEARgBEAFIALwBrAFQAVwBWAFQAcABiAFgAVgBNAHMAUwBZAEwAeABxAHIAKwBXAEQAMQBqAFQAZABIAHMAdgAvAC8ANwA5AFEAdwBIAHQAcgBLAGgATABNAFIANwBqAGMATABjAE0AbgBYAGYAQQBFADMAOQBLAGEAVQBBAFoAZwAzAGQARgBTAEUAdAArAEoAWQBiAFoAYgBvAFMAagBQAGUASgBvADYARAAxAGEAWgBtAGMAWgB2AGwAYQBkAHIASQBxACsASwBwAEIAcQBiAGcASQBFAHEAYQBiAHEAUABBAGcARwA4AC8ASQBiAGgAdABOAGIAbABhAEQAawBUAG8ANwBlAHYAKwBBAHUASQBXAGUAYwA5AEUAagBIAEoAQwBZAGsAMABUAFMAegBKAGYANAAyADMAaQBIAFoAWQBKAFgARABNAHoAMAA4ADEATwBCAHIASwBZACsAagBNAHQAcQBrADgAYQBNAHAAaQBxAHYAYwBYADYAbQB2ADcAbQBUADcASQB3AFkAdwA5AGEARQBrAGwAeAArADMAcABtAEwAcQBCAFkAOAA3AFYAVwB6AGwAeABGAEsAOAA4AGoAbAA1AEMATABIAGIASgBxAHgATAA1AGkAdwBDADMAVgBwAGYAVgB6ADAAVQBhAGwAbgBnADEASwB0AEQAcQBaAG0AYwBaAGQAagB3AFAAYwBRAGMAMwBSAE0AeABsAGcAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AC8ASQBTAFMAVQBFAFIAPgA8AEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUALQBBAHUAdABoAG8AcgBpAHQAeQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBhAHMAYwBpAGkALQB0AGEAZwAiAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAQwBBADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgBOAFEAcgBZAFMAQQBjADQAMwBWADcATgBSAFQAVwA4AFYAVAA1AEUAMgBYAGgATQBjAHcAbQBtAE8ATgA3AFQAawBRADcARQBUAFUASQBXAEcAcQBsAFAAVAB2AEYAUwB3ADcAOQA4AGcARgBnAEkAWABCAGMARgBNAHQAQwBkAEkAeQBmADMAVgBNAE8ANQBZAEcATwBLAEoARAAxAHcAbgBjADIAeQBkAGwAbwB6AGYAMQA2AFYASABGADUAVQByAEYAZwB0AGsAVAAvADkAdQBLADcAdQBSAHMAaABqAHkASAA1ADEANgBIAC8AYwBDAEsASgB5AEkAeQBQAGEAWQBFAGsAVwArAHAASQA3AHgAOAArAGMAZgBnAFYAYwBVAFgAWgAvAG8AQwByAEYASABkAHUAZQBYAEwAUwA0AGMAZQAvAG4AYQBsAHMANAA1AHEAeAA1AHEAcQBjAGQATQA3AFkAMAA4AG8ANQBhADEAawBYAC8AeQBvAGkAUABMAGIAbwA5AG0ASwBTAC8ATgBsAHoARQBmAGMAUgB2AFIATgBpAEEAQwA2AFcAcQBsAEkAdgA4AE0AZwBOAHgAcABBAG0AVQA3AEYAUgBVAEgAVABQAGMAawAvAGcATwA5AFgAMABhAGYAaAA3AFYAawB3AFIAcQAzADMAVABqAHIAQwBTACsAVQBpAGQAbwB4AHcATwBJADIARQAwAEQASwBNAG0AdABnAFUATQBBADIAdQAwADQATwAvAGYAZwBSADAATABlAFUAcgB1AFQAWQBZAGoAKwBRAHoAMgBJAEkAOAAyAHEAYwB6ADcAKwBmAGUAdABFAGQAVQBzAHYASwBLAGEAMQBaAEIASwA4AEYAbgBtAHcAMQBCAEYAUABlAG8AeQBYADkAZwA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBBAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYgBmAGQAZQAzADEANwAxAC0AMQBjADgAMwAtADQAZgA3ADYALQBiADUAZgA5AC0AMwA0ADIAOAA3ADcANABhADMAMgA4AGEAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAANQBUADAAMQA6ADAANwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANwAtADEAMgAtADAANABUADAAMQA6ADAANwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AdwBFAEMAegAvAEYAMgBwADEANQBnAGoAQQA3ADIAegBLAGoARwByAFkAMQBDAEMALwBEADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AawBMAHAANQBnAFoAdQA4AE4AMQBlAGsAWABDAEgAQgBaADkASgBYAEIAZQBHAFMAZABRAFoATABKAGEAMABkAGwAdQBKAHgANgAzAFQATQBkAHEAegB0AEYAQgBUAFMAVQBGAGkAagB0AHAASABJAE4AYQAxAGMANQBhAHcATQAzAE4AbABhAEsATAB2AE4AQQBaAG8AdgA2AE0AUgBEAFYAaQBSAGMAMgBOAEsAdgBwAFkAWQBMAEcAZwA5AEwAaABYAGUAUAAwADUAbQBsAE8AVQByAGwAZwBVAHEAOQAvAG8AaABUAFcASQB0AGsAdAA5AFUAVwA3AGgAWABoAHcANgBGACsAUAAyAFUAbwBHAEsAUwBzAE0AZwBIAHUAYQBmAGgAQwAwAHgAWgBKAEEAdwBOAEEAVQBrAGMAWQB4AEwANwB0ADYAYQBWAEEAeQBWAGgANgBEAE8AaABHAG0AawBzAEwAbQBWAFMAbQBSAEYAQQBzAEkANgBQAGoAMABFADkAWQBaAHQAdgBIAGIARwBOAEsAYQBGAGYAbQBxAC8AdgBGAHcALwBuAEcAYQBFAE8AOABaAHMANABtAHkAaABHAHMAYwBhAGkASABYAEwAWgBiAFUAVQBRAFQANQBCAHYARgBYAGsAawBJAEMATAAxAG4AdgBBAGcAUQB3AC8AYwAyAEUAbgBsADYAeABkAEoATQB2AHAAaABGAHgAKwB4AGsAWABIAHQAegAwAFgARgBtAHYASQBDAGEAYgBOAFoAWQBsAGwANgBvADkATQBDAEwAQQBSAEkAQQBJAFoAMAAwAFoAWQB2AG0AbABZAHUAbwBmAFIAQwBSAFQAawA0AG0ASQBjAFgAawA0AEkAYwA5AFkANwBCAGIARwBDAG8AVwBKAFEAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE></CERTIFICATECHAIN>VwBpAG4AZABvAHcAcwA6AG4AYQB0AGEAbAB5AHAAQABtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAA==! <?xml version="1.0"?><CERTIFICATECHAIN><CERTIFICATE></CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAA0AC0AMAAxAC0AMgAyAFQAMAA3ADoANAA1ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABEAEUAUwBDAFIASQBQAFQATwBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAOAA0ADIANgAwADgAMwA2AC0AOQA4AGMAYgAtADQAZgAyADMALQBiAGYAZQA5AC0ANgA0ADUAZgAzADAAZgBmADYAOQAyADAAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APAAvAEQARQBTAEMAUgBJAFAAVABPAFIAPgA8AEkAUwBTAFUARQBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA2AGYAZQBlADEAOQAyADAALQBlADEAOAA5AC0ANAA2AGYANQAtAGEAYQA4AGEALQA3AGQANgBjADEAYwBiAGYANABhADgAMQB9ADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAUwBlAHIAdgBpAGMAZQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AcQBWADEAMABJAG0AQQB1AGcAYgAyAHkAbABMADcAZAB3AHAAMQB2AHAATABhAEEATgBnAGkAbQBDAEoASwBpAEwAKwBSAG4ASwBnAFMAbwBlAHcAeABsAFQAVABZAGEAaAA3AEUAVQBDADkAOAB5AEoAKwAyAFkASwA2ADEAagBYAEQAVgB4AEcAMgB3AGQAawBEAEkAagB5AEEAcgBoAHEAaQBZAEgAVABZAFUAbQB6AFEARwBTADYAMgB1AG8AMwB2AEEALwBVAFkAVwBrAFMAbwB2AFUAWABCAFcAUgBQAFQAMwAvAGYAZQBRADUAcQBRAC8AMABoAEkAaQB4AE4AMwBVADQAUQBqAEcATwBzAE8AcwBnAGkAawA3ADkAUwA4ADIASQArACsANgAwAFkAQgA1AHoAVgBIAFoAMQBJAGEARABXAHcAdgBEAC8AOABiADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APABTAEUAQwBVAFIASQBUAFkATABFAFYARQBMACAAbgBhAG0AZQA9ACIAQwBlAHIAdABpAGYAaQBjAGEAdABlACAAUAByAGEAYwB0AGkAYwBlACAAUwB0AGEAdABlAG0AZQBuAHQAIgAgAHYAYQBsAHUAZQA9ACIAaAB0AHQAcAA6AC8ALwBnAG8ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZgB3AGwAaQBuAGsALwA/AGwAaQBuAGsAaQBkAD0AMQAxADkANAA0ACIAIAAvAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewBhAGEAYQAzADMAMQBmADMALQBlADYANQA5AC0ANABlAGEAOQAtADgANwA2AGIALQBlADgAYgAyADUAYwA3AGIANAA5ADkANgB9ADwALwBJAEQAPgA8AEEARABEAFIARQBTAFMAIAB0AHkAcABlAD0AIgBVAFIATAAiAD4AaAB0AHQAcABzADoALwAvAGMAbwByAHAAcgBpAGcAaAB0AHMALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AXwB3AG0AYwBzADwALwBBAEQARABSAEUAUwBTAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgBvAHgAeQB4AGIAVQBnAHUAeQBtAEYASABMAGgAdQA4ADAARQBIADkAbQA2ADIAYwAyAFgATABGAFgAYgBqAG0AOAA3AEsAbABFAGIAUwBGAFEAawBpAGUAdQByAHIAOABSAFoAZwB2AHQARQBNAFcAZABnADYAagBNAEEAawBMAEoANwB4AFAAbgBXAHMAMwBoAEUAagBPAEgAdwA5ADkAaQByAHcAWgAxAGcANQBaACsANgB5AFkAZwBrAHQAVwBsAEsAaQBiAG0AUABzADUATABwAGEAbQBkADYAdgA1ADMAUgA0ADAAZgBLAEUAUwAvAEgATgBXAGQAagBiAGMANgA4AHgATgA5AHQAeQBmAHQAcwA0AHAATwBmAHkASgB4AFQANQBYAGcAbwAwAHIASABWAHMAZQB0ACsAcgBEAGcAUwBoAEUAOQBCADMASgBRAGIAWQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AFMARQBDAFUAUgBJAFQAWQBMAEUAVgBFAEwAIABuAGEAbQBlAD0AIgBTAGUAcgB2AGUAcgAtAFYAZQByAHMAaQBvAG4AIgAgAHYAYQBsAHUAZQA9ACIAMQAuADAALgAzADAAMQAyAC4AMAAiACAALwA+ADwAUwBFAEMAVQBSAEkAVABZAEwARQBWAEUATAAgAG4AYQBtAGUAPQAiAFMAZQByAHYAZQByAC0AUwBLAFUAIgAgAHYAYQBsAHUAZQA9ACIAMQAyADMANAA1AC0AMQAyADMALQAwADAAMAAwADAAMAA3AC0AMQA4ADkANgA4ACIAIAAvAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIAUwBlAHIAdgBlAHIALQBMAGkAYwBlAG4AcwBvAHIALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA4ADQAMgA2ADAAOAAzADYALQA5ADgAYwBiAC0ANABmADIAMwAtAGIAZgBlADkALQA2ADQANQBmADMAMABmAGYANgA5ADIAMAB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAzAC0AMAAyAC0AMAA1AFQAMAAwADoAMAAwADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA1AC0AMAAxAC0AMgAxAFQAMAA3ADoANAA1ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgBLAGcAUwAzAHIAdAA5AHMAZwBrAEIAVQB2AHMAQgBwAHMAQgBRAGMASgBvAGoAZAAwAFoAOAA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgB0AFoAOQA2ADYASwB5AC8AbAA3ADMAaABNAEIAUABQAGoAegAyAHAAeABpAEIAMwBxADQAYgBUAGQANQBVAEsASQBmAEcAWAB0AGIAYwA5AHIAbQBkAG8ARQA1AE0AOABCAHcAQgArAG0AWABxAEcAeAArADAARQBQAHoAOABTAEMAcwBJAHIAaQA1AFoAbAA0ADgANwBMAFMAZwAwAGEAagBZAGwAMgBDAGIAQwB0AFAAYwB3AEoAQQBkADYANQBUAEwARwA4AHEAeQBtAFQAegBTAEkASgBLACsAbABSAEIAZwAzAEIAUgA0AE0AbQA0AFUAdwB4AGsATQBjACsATQBJAGsAUwBKADMAZgBWAGkAagBtAEQAbQBNAE0AYwBBAHIATABOAHQAZQBKAFMALwBNAFEAZwBsAG8ANABXAEEAWABVAHkATQBlADcAOQA2AHAAVQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA5AFQAMgAxADoAMQAzADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADkAVAAyADEAOgAxADMAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAwADkALQAxADIALQAwADcAVAAyADEAOgAxADMAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBTAGUAcgB2AGUAcgAtAEwAaQBjAGUAbgBzAG8AcgAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGEANQA3ADIAYgBhADkANwAtADEAZABiADAALQA0ADcAMQBiAC0AOAA0ADkANQAtADQAYwBhADEAYQA2AGQAMwBkADcANgA4AH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABTAGUAcgB2AGUAcgAgAEUAbgByAG8AbABsAG0AZQBuAHQAIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AFAAUQAzAFoARABoAEcAeQB4AE8AVABsADYATAA5ADMAKwBCAGoAdQB0AGsATQBZAHYAQQBnAGYAMgAwAEkAbgBXAGEAYgByAHIARQByAEwAVwBCAE4AagBqAEMAVQBrAFEAUABBAEMAQgBOADcARwAvAGsAawB5AGIAQgBZAHcAOABTAEgAdAA4AEoAUwBXAHcAUgB5AGEAbABYAFIARQBoAG8AQwBCACsANAA1AEMAMQA0AGIAKwA1AEMAQgBPAGoAaAA2AG0AegBMAEcAZgAwAHIARwBXAFgAMgBaAE8ATwBaADQAWQBCAE0ASABTAFcAeQBoAG4AKwBCAGQAUgAzAHgAdwA5AGEANQBDAFkAQgB1AFMAQQBBAG0AaQBhAEcASwBGAFAAVgA3ADAATAAvAHYAWgAyAEYAeQBUAFkAZABlADYASQBqACsATwBqADYAWgBrAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBJAFMAUwBVAEUAUgA+ADwASQBTAFMAVQBFAEQAUABSAEkATgBDAEkAUABBAEwAUwA+ADwAUABSAEkATgBDAEkAUABBAEwAIABpAG4AdABlAHIAbgBhAGwALQBpAGQAPQAiADEAIgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBNAFMALQBEAFIATQAtAFMAZQByAHYAZQByACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsANgBmAGUAZQAxADkAMgAwAC0AZQAxADgAOQAtADQANgBmADUALQBhAGEAOABhAC0ANwBkADYAYwAxAGMAYgBmADQAYQA4ADEAfQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAFMAZQByAHYAaQBjAGUAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AHEAVgAxADAASQBtAEEAdQBnAGIAMgB5AGwATAA3AGQAdwBwADEAdgBwAEwAYQBBAE4AZwBpAG0AQwBKAEsAaQBMACsAUgBuAEsAZwBTAG8AZQB3AHgAbABUAFQAWQBhAGgANwBFAFUAQwA5ADgAeQBKACsAMgBZAEsANgAxAGoAWABEAFYAeABHADIAdwBkAGsARABJAGoAeQBBAHIAaABxAGkAWQBIAFQAWQBVAG0AegBRAEcAUwA2ADIAdQBvADMAdgBBAC8AVQBZAFcAawBTAG8AdgBVAFgAQgBXAFIAUABUADMALwBmAGUAUQA1AHEAUQAvADAAaABJAGkAeABOADMAVQA0AFEAagBHAE8AcwBPAHMAZwBpAGsANwA5AFMAOAAyAEkAKwArADYAMABZAEIANQB6AFYASABaADEASQBhAEQAVwB3AHYARAAvADgAYgAwAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYQA1ADcAMgBiAGEAOQA3AC0AMQBkAGIAMAAtADQANwAxAGIALQA4ADQAOQA1AC0ANABjAGEAMQBhADYAZAAzAGQANwA2ADgAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAAOQBUADIAMQA6ADEAMwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANAAtADEAMgAtADAAOABUADIAMQA6ADEAMwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AZwAzAFAAVwBGADUAVgBkAEoAZQBvAFQAVAA0AHoAcAB0AHIAcQBiAGkAaAAwAGEAbgBwADgAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4ASwAvAGEAWABpAFAAegBUAEgAZQBaAFMASgB5AEMASQBDAHcAOQAyADEATABSAHEAeABBADcAOQBxAEUAZgBvAFgAeQBBAFgAcQArAHQAbgA4AEQAbgArAGEAMQA2AFMAagA0AFAAVwB3AFoASgBRADkAcwBNAEEAQQBvAHAARQBPAEUASwBsAE4AWAA2AEkATgBzAEEAQQBXADEAMAB6AGsATQBDAGkAeAAyAFUAQgBsAEwASgBDADMAVwBUAHAAdwBoAHMAbABUAEYANgBSAG0ASwBIAGgAUgBYAHIAcQBuAGkAVABVAGsAdgBQAEQALwBxAGoAdwBUAGoAZQBWAEgAOQBKADUAcwBXAFEAdwBsAHgANABrAEsAawBIAFUAaQBFAHoAZQBlAFIANwBPAEkATABrAEUAMAB2AGgAdQBUAHIAVQA1AGQAZwA4ADYAbQB1AFkAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFMASQBHAE4AQQBUAFUAUgBFAD4APAAvAFgAcgBNAEwAPgA=</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAyADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAyADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADQAMAA4ADQAOQAzADAAZQAtAGQAZgA0AGEALQA0ADEAZQA4AC0AOQAwADEAMQAtADYAZgAyAGUANgBjAGIAZgBlADQAOABlAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADIAMAA0ADgAIgA+AE4AUQByAFkAUwBBAGMANAAzAFYANwBOAFIAVABXADgAVgBUADUARQAyAFgAaABNAGMAdwBtAG0ATwBOADcAVABrAFEANwBFAFQAVQBJAFcARwBxAGwAUABUAHYARgBTAHcANwA5ADgAZwBGAGcASQBYAEIAYwBGAE0AdABDAGQASQB5AGYAMwBWAE0ATwA1AFkARwBPAEsASgBEADEAdwBuAGMAMgB5AGQAbABvAHoAZgAxADYAVgBIAEYANQBVAHIARgBnAHQAawBUAC8AOQB1AEsANwB1AFIAcwBoAGoAeQBIADUAMQA2AEgALwBjAEMASwBKAHkASQB5AFAAYQBZAEUAawBXACsAcABJADcAeAA4ACsAYwBmAGcAVgBjAFUAWABaAC8AbwBDAHIARgBIAGQAdQBlAFgATABTADQAYwBlAC8AbgBhAGwAcwA0ADUAcQB4ADUAcQBxAGMAZABNADcAWQAwADgAbwA1AGEAMQBrAFgALwB5AG8AaQBQAEwAYgBvADkAbQBLAFMALwBOAGwAegBFAGYAYwBSAHYAUgBOAGkAQQBDADYAVwBxAGwASQB2ADgATQBnAE4AeABwAEEAbQBVADcARgBSAFUASABUAFAAYwBrAC8AZwBPADkAWAAwAGEAZgBoADcAVgBrAHcAUgBxADMAMwBUAGoAcgBDAFMAKwBVAGkAZABvAHgAdwBPAEkAMgBFADAARABLAE0AbQB0AGcAVQBNAEEAMgB1ADAANABPAC8AZgBnAFIAMABMAGUAVQByAHUAVABZAFkAagArAFEAegAyAEkASQA4ADIAcQBjAHoANwArAGYAZQB0AEUAZABVAHMAdgBLAEsAYQAxAFoAQgBLADgARgBuAG0AdwAxAEIARgBQAGUAbwB5AFgAOQBnAD0APQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlAC0AQQB1AHQAaABvAHIAaQB0AHkAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIAYQBzAGMAaQBpAC0AdABhAGcAIgA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAQwBBADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AUABRADMAWgBEAGgARwB5AHgATwBUAGwANgBMADkAMwArAEIAagB1AHQAawBNAFkAdgBBAGcAZgAyADAASQBuAFcAYQBiAHIAcgBFAHIATABXAEIATgBqAGoAQwBVAGsAUQBQAEEAQwBCAE4ANwBHAC8AawBrAHkAYgBCAFkAdwA4AFMASAB0ADgASgBTAFcAdwBSAHkAYQBsAFgAUgBFAGgAbwBDAEIAKwA0ADUAQwAxADQAYgArADUAQwBCAE8AagBoADYAbQB6AEwARwBmADAAcgBHAFcAWAAyAFoATwBPAFoANABZAEIATQBIAFMAVwB5AGgAbgArAEIAZABSADMAeAB3ADkAYQA1AEMAWQBCAHUAUwBBAEEAbQBpAGEARwBLAEYAUABWADcAMABMAC8AdgBaADIARgB5AFQAWQBkAGUANgBJAGoAKwBPAGoANgBaAGsAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAEEALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA0ADAAOAA0ADkAMwAwAGUALQBkAGYANABhAC0ANAAxAGUAOAAtADkAMAAxADEALQA2AGYAMgBlADYAYwBiAGYAZQA0ADgAZQB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA5AC0AMQAyAC0AMAAzAFQAMAAxADoAMgA3ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgByAHEAVABNAHAAZQBXADAAOQBrAE4AWQBBAEQAdgBQADcAaABZAFoAWQB0AGgAQwBjAEwAbwA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgB4AFgAWgBMAHEAZAA3AGUAVQBhAEgATgBKAHMAVwA3AG0AcgArAFQAZwBnACsANgBIAGkAdABGAEEAawBPAHIAQQBzAFkAMwBMAEgAMQBwAEwAWgAvAFkAMwByACsASgAyAHoANgBSAC8AcwBlADAANgBaAFYAVQBRAGgAegAyADUARgBHAFMAawBiAFIAdgA5ADQAWABDAGEAegArAEEAbwBXADAARQBaADIAZABnADEAZgBBAHkAbABtAFEAZABJAEEAQgBqAHEANgBJAG0AOABCAGkAOQBvAEYANgA3AG4AVwA4AEQAQgBjAGoAcgBiAGkAMgA1AFcATwBEAEgAVABlAHMAZQBBAFAAUwA2AGMATwBxAGkARwBzAFYAdgBZAFMASwBQAE4AawA1AE8AKwB0AGMAQwBLADUARQBQAHIAVgBpADAAcgBQAGIAMQBRAEsAUQAyADQATwBHAE0AZwAzAEwASQAzAHMAVgB3AHkAaQA1ADUAUQBiADEAdwBLAHQAZABaADUAVgBxAGQAWgBKAHYARQBjAGsAWQBFAGkAWQBRADEAZQBmAGEAdQB5AEkAdQBuAG4AbgBmAG4AegA1AEYAWABYAFUAUgBCADcANwBKAG8AUwBxAHQAYQBZAHgAdgB6AHUATgBCADgAKwAwAGkALwBsADAAYQBHAEIAWgBZAFMASQBsADMAawBZAEEAVgBkAGcAegBhAFkAdwBsAHAAVABzAGkAbwBTAHoATwBlAFEAMgB1AEEAbABkAHgAegAvAHoAcAB2AFcARAA3AGsAcABEAHcARQB4AHAAMAA0AGwAZwBYAE8AOQBrAFYAOQAxAEsAQgB2AG8AZABqAFIAUgB1AC8AUABKAEUAZQBMAEMASQA1AGEASQBPAG0AVAAzAG0AUQA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBTAEkARwBOAEEAVABVAFIARQA+ADwALwBYAHIATQBMAD4A</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMAA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAwADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAwADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGIAZgBkAGUAMwAxADcAMQAtADEAYwA4ADMALQA0AGYANwA2AC0AYgA1AGYAOQAtADMANAAyADgANwA3ADQAYQAzADIAOABhAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFIAbwBvAHQAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUgBvAG8AdAA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AWAB5AGwAQwB3AFMAbwBvAHcAMwBNAGQAbgBzAFYAUABrAFQAdAB3AEkAWQA1AHIAawA2ADQANwBiAFMANgA0AE4AZgA3AE0AMgBIAFMAOABrAGwAUgBrADUAYQBoAGgAYwBNAHgAOQBWAE8AbABuAHQAegBxAFgAMwBTAFkAeQBxAHgAbwBYAFEARgBEAFIALwBrAFQAVwBWAFQAcABiAFgAVgBNAHMAUwBZAEwAeABxAHIAKwBXAEQAMQBqAFQAZABIAHMAdgAvAC8ANwA5AFEAdwBIAHQAcgBLAGgATABNAFIANwBqAGMATABjAE0AbgBYAGYAQQBFADMAOQBLAGEAVQBBAFoAZwAzAGQARgBTAEUAdAArAEoAWQBiAFoAYgBvAFMAagBQAGUASgBvADYARAAxAGEAWgBtAGMAWgB2AGwAYQBkAHIASQBxACsASwBwAEIAcQBiAGcASQBFAHEAYQBiAHEAUABBAGcARwA4AC8ASQBiAGgAdABOAGIAbABhAEQAawBUAG8ANwBlAHYAKwBBAHUASQBXAGUAYwA5AEUAagBIAEoAQwBZAGsAMABUAFMAegBKAGYANAAyADMAaQBIAFoAWQBKAFgARABNAHoAMAA4ADEATwBCAHIASwBZACsAagBNAHQAcQBrADgAYQBNAHAAaQBxAHYAYwBYADYAbQB2ADcAbQBUADcASQB3AFkAdwA5AGEARQBrAGwAeAArADMAcABtAEwAcQBCAFkAOAA3AFYAVwB6AGwAeABGAEsAOAA4AGoAbAA1AEMATABIAGIASgBxAHgATAA1AGkAdwBDADMAVgBwAGYAVgB6ADAAVQBhAGwAbgBnADEASwB0AEQAcQBaAG0AYwBaAGQAagB3AFAAYwBRAGMAMwBSAE0AeABsAGcAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AC8ASQBTAFMAVQBFAFIAPgA8AEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUALQBBAHUAdABoAG8AcgBpAHQAeQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBhAHMAYwBpAGkALQB0AGEAZwAiAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAQwBBADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgBOAFEAcgBZAFMAQQBjADQAMwBWADcATgBSAFQAVwA4AFYAVAA1AEUAMgBYAGgATQBjAHcAbQBtAE8ATgA3AFQAawBRADcARQBUAFUASQBXAEcAcQBsAFAAVAB2AEYAUwB3ADcAOQA4AGcARgBnAEkAWABCAGMARgBNAHQAQwBkAEkAeQBmADMAVgBNAE8ANQBZAEcATwBLAEoARAAxAHcAbgBjADIAeQBkAGwAbwB6AGYAMQA2AFYASABGADUAVQByAEYAZwB0AGsAVAAvADkAdQBLADcAdQBSAHMAaABqAHkASAA1ADEANgBIAC8AYwBDAEsASgB5AEkAeQBQAGEAWQBFAGsAVwArAHAASQA3AHgAOAArAGMAZgBnAFYAYwBVAFgAWgAvAG8AQwByAEYASABkAHUAZQBYAEwAUwA0AGMAZQAvAG4AYQBsAHMANAA1AHEAeAA1AHEAcQBjAGQATQA3AFkAMAA4AG8ANQBhADEAawBYAC8AeQBvAGkAUABMAGIAbwA5AG0ASwBTAC8ATgBsAHoARQBmAGMAUgB2AFIATgBpAEEAQwA2AFcAcQBsAEkAdgA4AE0AZwBOAHgAcABBAG0AVQA3AEYAUgBVAEgAVABQAGMAawAvAGcATwA5AFgAMABhAGYAaAA3AFYAawB3AFIAcQAzADMAVABqAHIAQwBTACsAVQBpAGQAbwB4AHcATwBJADIARQAwAEQASwBNAG0AdABnAFUATQBBADIAdQAwADQATwAvAGYAZwBSADAATABlAFUAcgB1AFQAWQBZAGoAKwBRAHoAMgBJAEkAOAAyAHEAYwB6ADcAKwBmAGUAdABFAGQAVQBzAHYASwBLAGEAMQBaAEIASwA4AEYAbgBtAHcAMQBCAEYAUABlAG8AeQBYADkAZwA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBBAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYgBmAGQAZQAzADEANwAxAC0AMQBjADgAMwAtADQAZgA3ADYALQBiADUAZgA5AC0AMwA0ADIAOAA3ADcANABhADMAMgA4AGEAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAANQBUADAAMQA6ADAANwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANwAtADEAMgAtADAANABUADAAMQA6ADAANwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AdwBFAEMAegAvAEYAMgBwADEANQBnAGoAQQA3ADIAegBLAGoARwByAFkAMQBDAEMALwBEADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AawBMAHAANQBnAFoAdQA4AE4AMQBlAGsAWABDAEgAQgBaADkASgBYAEIAZQBHAFMAZABRAFoATABKAGEAMABkAGwAdQBKAHgANgAzAFQATQBkAHEAegB0AEYAQgBUAFMAVQBGAGkAagB0AHAASABJAE4AYQAxAGMANQBhAHcATQAzAE4AbABhAEsATAB2AE4AQQBaAG8AdgA2AE0AUgBEAFYAaQBSAGMAMgBOAEsAdgBwAFkAWQBMAEcAZwA5AEwAaABYAGUAUAAwADUAbQBsAE8AVQByAGwAZwBVAHEAOQAvAG8AaABUAFcASQB0AGsAdAA5AFUAVwA3AGgAWABoAHcANgBGACsAUAAyAFUAbwBHAEsAUwBzAE0AZwBIAHUAYQBmAGgAQwAwAHgAWgBKAEEAdwBOAEEAVQBrAGMAWQB4AEwANwB0ADYAYQBWAEEAeQBWAGgANgBEAE8AaABHAG0AawBzAEwAbQBWAFMAbQBSAEYAQQBzAEkANgBQAGoAMABFADkAWQBaAHQAdgBIAGIARwBOAEsAYQBGAGYAbQBxAC8AdgBGAHcALwBuAEcAYQBFAE8AOABaAHMANABtAHkAaABHAHMAYwBhAGkASABYAEwAWgBiAFUAVQBRAFQANQBCAHYARgBYAGsAawBJAEMATAAxAG4AdgBBAGcAUQB3AC8AYwAyAEUAbgBsADYAeABkAEoATQB2AHAAaABGAHgAKwB4AGsAWABIAHQAegAwAFgARgBtAHYASQBDAGEAYgBOAFoAWQBsAGwANgBvADkATQBDAEwAQQBSAEkAQQBJAFoAMAAwAFoAWQB2AG0AbABZAHUAbwBmAFIAQwBSAFQAawA0AG0ASQBjAFgAawA0AEkAYwA5AFkANwBCAGIARwBDAG8AVwBKAFEAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE></CERTIFICATECHAIN>b9mj/ i;)*~ Z+B'H %0K'C m]TUw m]TUw KXU-|{G U`#VJC2J cC Cb x)T0n{ %`FN$8 .^b(r ^x_S2Vs 6a"Ge nmM'f ]#o7(+ Xjy+m cLAnO +9dq9 53Crb SoV]6 N[ ;(1 Pt;9mC qf^i\ M~|$n0G A%nkwI /\KIe ,.<kP ZGdhH 3u)VV y<FM! K3L"_ !3IFT -qOyb <Y)?=z ^-PVg 'VuUO (%Cks0" YH@Lg L%?S# W-BK% oo*fe  5cUnaM F9G u w;Liw f(+J+ )[5zn I4JhpO 9ytk[ sk1D8E >O7C& ZJQz{ R{V{( 7;hT6 QKxCC\ +?5YjV HmW}r1$< a>0n^ 6f/h=Ny Bxp)a! Nx^RU Y_2"u T9{bT AIr*H: 4 z2) M\~"! @0?}3 t~v#F h7uBX URC/> cla>k wo{P~A: D<pAe y>y!V v\;Eu ch8[i Ta}(: C|*{E '?P9Tf '\" kM &A>q: 4"{le Itzk5 ]<l:Y G8xR. rE^'  wf.=( =&Q<B ;'dx%NQ NU(.,* |Mijz HauI3 28cs( /!6,W #SH=|l9 984Uz k<.>+ :HOQ_, La}W@i) s%{K3t r*S)z` 3&4D#47 JFFSb$ _wtW3n/ 0|S[! F!(`oB shCtE B*2#| RR2^0 Wgo'h  :#a~ V9<>r zcQ0B >E*v?>, 8~UKG 7}CU  q`5.D Y_v^IB' _Z2oz I:a!I .i%@4 MFJQp mx$}#  +^.aZ{ F:]o0W Oz3@: q9<\x_ q7dX*U \+6n>i LLr_H@ )KcU/6 Ztr]j eEYO-m /OC:9 =W!8jO} P/\!z c0[{:% LLr_H@ Ztr]j eEYO-m /OC:9 =W!8jO}  948~ LLr_H@ Ztr]j LLr_H@ Ztr]j  94i4 LLr_H@ Ztr]j wCWOZ [F[+}L GA&mB xG[;nb/ Zrd.Y fnAb_^ O{003 ^O$Os 9@3]k @R{_O [WZ-Ed cB[4PI7 +N5fR ;Zexc ~6DVI }4sn~ C%kG8K QzG%, x#rwW 0{003 52FI\ HY7o& -d{7v REs=D `UP>{ vh]>| j1&[A bK,z* jiADL; <iAsvR U#3~8 qK#?2Q ~Je#B l*sbT ~d3g" <-.F! fO@7mrEHW :Q2(E) w?DDn prL(" #_'5i )+(|vqY r<rYo +#5A` 0sVxm LsdjHN VTz:n J)M[S kU.i! dsY>S11\ G(0e8 &wF]L :r?Xsj NoH,K2 prL(" LsdjHN j""5^ GA9eXf -0v*) $aX0a Utly> '8HS[ ^\kEW{[ /#Ch[ {'%~<c v3@XZ YOR=N "P[5* eYHbDX2F vek6ZOX +8V/J ro#xb fIQ%, (--w~~)o: vV/F  d pj~^ UV~A| Qfi"3 <E+;XU`8B  d:xv KlYG1} >F~Bl LZzZ% N3fh< IwyI5 5.FO` QfNE< x&9r0= glu(."[| 0nkG1 M*jNxE MgD%If N w^6 }Yu(t +7W7J ?j_e6~ Jg$>;Cf ;2TNM> IV%u(<5 MT2T;7/|f {CEW; mL*t}sqv XfM]" L<i6GvY@Y  7)#aNs 7-;YZ T@xRG Fz~&Z H3Yh-zEk eC$){. _&.yh IJQ:Rvu e;<oq u|VO[3 EEl[L 9|Kcj %6\Oy ||,_; +m-F\% TIAfH #H<P/ Pck~y Cy7%`q ]f),X gQ_SQtI /u~Q6 Y;r!5Ex U0fr0 R6=A9 tYRBZWZ K}EWE B"_[fz nP3`} 2S`<$iKep2 /@F$< y+bKO1 w:s\XJ x`<-= NR,bX" 0<T!h 2-,sa 6T=a(?1 L)DTC F+kIF hi5 ; ~Bwx{  2a3@:Q f~Fc<uS}e Zp#$:  ^~o.d :OU!L pnu"E "0\J? /r=^^ 2^o*J V\@?o 6w'Bp ~k(#\ =3{`UC R#CKZ ;9}jp0 CA_.T &3o5I `^E<" a5!?C ZDiD_ os2Vzc L8OkN Z=tp39 '&SbzB {d#oW N1GC8Lr=V8  (q|1 NPZF9 cm[t> >%}Ic LkLTR 3AFuB!s eTr{4 jA~<v%N% OOT~Jc BUNao !C{H[ /^MW6 7sIdQ ;NQ#t .C9K% P6J@mp ^Zv07g~ \_ px o~yhO {7KqF -!z$C. [`.s?Y W6T~. wAYw7 6&xYjJ wmov#|+ %&RR{ 5fpD2:~ AOxiG: 7"S\F xD"'\ dtxVe @dEJDm B'dpU4# xJgMrjS 2v#/rty Kze[y 71TqCW*# #?:=y- +F]Hp- rFs#z= _8va= Y|QH` <225> 47|dJ u`#Ph3? LyM5~Yer 1DO%^ d^&*A jWiVk6Q 0B<)UZW $`;>" Gkh+H pacOC H!=![ ?c,Tc=)}Ju ~"$|2 [ck*! mbO:^ X%jK_ 4z)c7 pPK?Q 2!.a| \+#ra XZ%#"U6 j/Up, %3E,F ^1kDk G)H}0 J7cS,\w M`<9" #LRs; 4-8A.< +]>][ v?(F8 Xn +&X krIX( T);i5 4^P>` g}L,*k [oZ5Cv $7/RHq NRqA' (Bzyd u"S-g #S$:ak :f5B^- ;b!*j >j*9^ jkS;W S\pB, &sG!*B 4laM6 n{Mz: p.d>vZ P$~t7 {)8%K) 06'sC GqdrM zWskKp[O GJL{0AE 8moaH NmN99D QL5)lNA p77p;  #do/ 1[V!{] s$,;%2 {B,*e1 Q0|QyYqr' /g$RJt 4k:SV J.+X] aVLEn H/[=] |4'2l1 HN#ZM' X67m= a<x='7 $n:6& =$ZuF@ C b5>W Lnaf1fj 7XC[w dojK_X /l'"] (IUB- $X` = (`3H@ B;rZ>eJ Q4hvR )5Jy5 43Ri[M MdTXJ(wa )J~hR If TK: d'*2G T39c{>AN ^q0xw* XN}.wV 1U$Ur 2Ok'd, -:}|r* )r/|b _ib$he d23a{j m}os, H,oHLo lf1fl ,dCgU kBY8z k&t@Y ]>r'qg( _yTum0k LMh0t*tWF /7==t` @R@27 xH2`| kB;,*qC `7B,>7] LA<,p "8n?\ BjL_Duf* F"g=E] C.YRI2( vXPiwA_ HTD_R }%SIV" om`p{  >q=RY )KQGY 6*@Z< 5oqJ: Xn*h8) n`2A% PR7bs kN>PU 9Xhb) P\x_2 *NZRY P82^< >>.82 }"M:wG6 Z.Vf2r6A d=Dn8 T`UzD$[ NI`,{s oU2I+ n4r~d MW4CX Df&lC V-c:! axN>% nn?1Ru {,YHGS1 k*i9z4 2#pt6 Z+sp{ zG8.*  :BV- 9~)y"Q RmR ? X+Nw3 Yhl<|| p:l>{dk ;Y/X0 ZI15Ml qn_RM (([aS^ wpg}> x[gEFy.= P{/h4 Io-*AiX 5h8]o h~8 P u!R:H t'>~Zl C!+&9 y6%#YZ \Z f= *Ezn_j"k 'x:r1 )#lh, tM7y8 )qD5Y| NCUTR TNrWbv \9%iZ )8LjQ^ E("i& 1Dp|w ;bTfg `kNew Jo"v1% Df)*c iWZ-C MuDwA sF69/ #):1(t' sU8rO HdG^G ?i]OX/ MIBU_F ed(}ev bwD1[yH>F: Cr<G3 W?.LJ a4Hi_+ Eo3Vx p,%zQ y;p,E% OjX%$ /iLE\ lG~vRlVz- +`mO] *NfgV Lu~b[n >W?63EO}N :Df?R &K*;! sE(\M WtqDd #G/Y1I G0W9v# lQ/3HG8 u]G_qH v:w+0e "uYe: L_MVGhx 3H~Ifu! c"nd>5)z4%Z wSnx+ gjG^`/ 6XSOg $[)I/N zs.3sJ F)\-F w*05K D1:oI Lzo9$+ )?[yrYR o'e%- ncNfB&l QKg.Q Wcz;c eg|8o{/ %8U:{DlUE /UKEd NKuPyn _uo$F )u]<F3@ 5,:YIE AHf!H 4ydkD 9^#.% dx0Ye N[im& ?]27_ ybKhV' x=}Y@ J4jUJ*A {*%2|) $S~Y^-U y&a@dlN 5?oBl h<^-p Y,CRp >;/qG (O-NmR {l3HX '8:*f .l+H:YT-;6 V@L>e g5~|U9I 5g/E8S @!v/p pxZA@X +UnPQ G>^@q :Lf(\ 8z5?8 S#7OYG `%1a*zL -LSRG L 04\9 9zVFM[w WEzf& %Qbd@ pB^38N D>no| =3 am [lu,s e&S^} 5$t|Rp *hb9p -=dR\ Z+yPB p^drq gw#3r dv<%x [#_i(/ ^zc5&E ?6K7A {,)/R afP~Y\P z`T+A lXwWF Y0\{A N\dmo {_HyF( P|}yI 7E*~_ A9gz^ $}%c) <Uapq NYG1, @AB{vN Z"qK' e:;j$ %T?J("i Eni|yDhh]Q L h<* S1a\rb DQs"6 p~#!] %m!U'E wLsw>) fV<m"!3 RWB+@L t&|Evz 50+`,rzE!;w]  #A&g_)  ,Vmg )sxSz50 ?nF!+]J ,V#Y6 -y\l% l8X<3Pg It(EG Q)peM/ P++zn- |BQwr [STrTmA+ b9s2/ 14&b; {Pk&2 aolW( *)xw. Gw'^' N~s#q Wzxp_ l"i`:-\j f|IE\%2 qP:"Oo &Y*tg gi(2[ ti7I  3axY] d>z4^ -m}TQ $B-ZI K7.}q (BsVQ mj*S2 QL:}VS W*l;I5 8<I., )i#d{ m"%%P Y<6yb [<zI7 )_o%[ T3>ur| GWqi:! 9$:m@h ^{EWe wMK#xK^~ lqk%\?Z =:V=Y T(o?:3j tT>wot ?T[(j D~<(% .43mE $=4+> CU^X7b Cp*de c[W{k 4tHgx $>NHwk `l28rY <x+Co o'q\i *ZZ17 on:8F )Yp'-O &fB@Y Uz)R"g XNh|V eB^S ~\ L9,-O NJVNv K(5>B 8p>lF ^^.+#h qvw5+) X#g*8{ pf(II; $9eT}w vH%eH vP@ER  jTR6 Rb}D^(A] zq-w: Fc"'aJ <_+)~ s>O1X ]cmjS ecp$O v!6Kq ;tJw/a 56n,, X,A/x" [Y(W! ^$Nu\ qyX-`e +=c@Vn NoB!M -9=~xq Lv=Q7+ ys(2GT} -ryQ){C :q]UX QL0S/ ]{M?} wZ^Vs, nJYt?s q]hPC hU&!B# <<=L3 Igiw"F dlGuO"e/K @ZJ6" g?'|j?r U?F#*V r|?=O v$=+a G8\*U$ ~DCEi =]L5- A~Rw\Y }8,?6> `Hns" NZECI aXfl} ZtM87( $p0IY E_&33 hf=t: |a80Zw e|Q(] 2jCO  KMj^O FZTf06 +?E[&?' +&fxP m5wOyI i4Bc;p te$hvK ;xC8j( HqC!H 8vj:P mqOxh (d@B# H?dM7 mOz$. sZgH>V` AU/t+ SWWuO GFpNP 4OZh$ 2&%7M ;1q<V oH&?@ B\S6j=n 7,]|ce V/MnDw Oy>~! ]YI<[ 6{MDm gKafVE :Gk{f Wwyk: d1K`K?L `/D1wP 0Sp   =Gk}G (_GR"? +sCdN 7xiwF @vNwE 0RbX? 0,>>2 72r7K }SjPK W%^_6e^h; 5-PF* oIQko5 !XI+= Y5|K* it2)ZY(jYxNm ;EPR+ 5Q`_` :YU,S {M3q\i -z0k` I6@/le p0WWH H:(ll X>@+j f&E~F  \s;F !;Wz~ lCGma &qR=. ;g=hS 882V2 lc_9h KlP%-s Kl^Df uhs:P |0+a^6 36&([~ 8;+SQ gRw"o#[ nuAJ" dgS9SIn DI^9r jdwoc "'vFH Lf*@g eT&A} w0&bjL \i|9[$ k^=i. 2"i0rR LtW\* `s(y4 ]'TzE <H2*?$\ cLvt.  MsEl)z6 ;bnx$ <9igfP XlQKy{P rtAJ@ EZsY\ VQDD` R6'7n q|04[ Zjoox[ 4(`L2 :6b:X b3-@G fkJwO \;8TY] .IJQ8 SR`xR ;"0QQ @,x(Q 4$S;7 R;"]s S.]\d Pa8dv Shh;+r## SXq&y B+CNd8p(IKT0 :Ulf3 0n{4I oi[CO CtTMc 9=a$u ^y?JAz \LbyUE >_M_$ :pP;Il ->0+P ,cF~l ]rPuI b2:"c$41 N+4@d i]Li}v b0Mw8 H(ShLT ,$Dq% %4JvkUz k8sZ%$ t?>t?: waS4_ N(t+sL]whl q"p!"fE B(L<k G)oqv 2TfBWP &g4k 3v( PF^9w v~#ugA 5x:^< wyI#_O 0)ul~ V/UV$O 3QfUM&++J_ $@t3|W: `c(HZ a^be}G c)+.jF uaz#VB $<?Vk x~d8J1 yYWUF .+XvJ a{GBV\i; ,\zT_ SeaZ/ EA#dI Hs(%OX" P`|K"- 'w|cq g-k7< :$@?! S}<.k '8fw5 sZAH) :Tz6A OsRlQ| /1D}/M h$Cpo lJw/D !3F.o <qL?C (sD%"7 EM\:8 *Yh*# Rd)'TX ;<}~9 v554{ KkK%uq X9y:Y? Oc~?, [0eIq 1e8bw(68h ZUQ$} Z\Mv>H Dz)a8 ,D*WE |o'le  zwFc jvq<K[ $avk* gtNjco58EAt :>5Lo }?cL;W  d6j+ dNQh$ g)wj& 8hL*'} $)$PBFE F5|s  [f1]{/fJG )wQi7 HL'aI ^TG0u] Fz\k%N QNue7 #E B* H]oBHJ 7}%brb |b'HcCu Buqaq BXj1H .ldX0}wb4 >8TR; 3b=!j 00?t{ uW`\  MJ$C# bb6;_m #C|6> oMkKf j@Pt2"K iMv1PI 05^&A1 BZ<|i s+C=c v\V07 .<(:e y|\5| .xb_iE, Gj2hFh N6_J= y5C&" 4)m\UO N6_J= &n@q| ^_ioa 1JO{t &EL$+e?a l2[r> BDC,C ?EmL`i ,Uv.(! N.P[- BDC,C kh}fO BZ^'l hu$D$ T7Mj[# Y ~\g N.)5eD '"xH" MIBYTAC ?'cc! aAAZN ('j5X/ OEfL.F N.P[- s1~P? ?'cc! @O*Cj a%!c$ =NQNQ chkS? B>ED{ K2tG> ubBw}> gb[wG pYu8. O/ H0|7 O/ H0|7 dSkG; L2b@` ,wnk{ RkX]x "*a#o y5C&" .37Q4 y5C&" ?'cc! ?EmL`i @^7Hu &`E:o Swp!;QJ8# EY7n2Vi] '"xH" N]y"P4W q?SeP N6_J= ?'cc! _Sz j CioP%\=_ 3/y.@ x~RRP, y5C&" ?'cc! ?'cc! kh}fO E"hy[ th}d> s]\ck wUB]4A_ {N>2&` cU^[v vHf<X Jd44l cU^[v ;)7O0_@| 1kXR@R. vHf<X ,X=;K cU^[v &,&!r [5L>Eb vHf<X Q"KRpGO [#z^^ cU^[v vHf<X cU^[v vHf<X k5iW) [.j2Z h(T8O l`G#% Cu*8v l2[r> ?EmL`i ,Uv.(! 3nv;Ch kv]yc _);hm ?'cc! tZ/*B mgrw6 ik74f Ax$y4 T7Mj[# \i7yE I7K#3 1@)@h# 5i8O) "."I-K ~I}W: ":=kf `/3W2 \-1*M ?'cc! @O*Cj F)vY4 RBp*cd 4&GJD 8]C@(?: 8]C@(?: L2b@` O&!f. &]#XM%8 gxe<< a!-;} F[zR% !?106, i<F?Ow} rryVh V}X^|q Ldpfv{ kh}fO L2b@` &]#XM%8 KDj6  _);hm y5C&" :Bac9 ?'cc! ?EmL`i Yo/w8 y5C&" 4mb@U v8%dk ao&jL +_2dj c|Qbqp 1="Plr O.([U &,&!r ZAM9=W 0M7ey, UcuP1 vHf<X LES*] cU^[v vHf<X cU^[v vHf<X CmT|__ CioP%\=_ 0mt9x }hCZKJ vHf<X cU^[v ?]$Ne vHf<X cU^[v }hCZKJ `#!+HC Y;Y6o.+ *1!aJ` .T][: Q_VR<5 ?EmL`i5K y5C&" l`G#% WgA=kw xKfU| 5M.RY] 2dw:8`3 [(<IR .T][: 8/-\A G<zZ38,g Kb])_ 3:eUZ 1_j(A M})/U )CV9M! }xC'6 A(Esg N6_J= J!Bsu "n+Hh N6_J= kfTd" 3hie? veG(w l2[r> G&n9q XbVCZ B\~?bwJ  w\_z G7x?l /Q>OJ ?'cc! @O*Cj NQ45!1 8P/y< ?g Cr L2b@` &]#XM%8 CioP%\=_ @Y rL EMIBe \+.Ow K2tG> KX"#zag i&XZ_g bLFur >1r{& 'wfn|a /c}X^|q #zd(L 5Th9| Sx FPxjlX BZ^'l \p'HN 4<N.@ _);hm y5C&" ?'cc! ?EmL`i y5C&" u!1'<p N6_J= A5"kZ A5"kZ !!kBRr X[KR  )yET% N6_J= kh}fO BZ^'l $v|k@JB {NUyw 4[KR  ]"#q& (iJj[ a8ochk [ZC+{ os<<4 %\ZO+1=h w>78& $umO8b Q_H&wD ?im;I >J %AD#j)rm( vHf<X dh"_d cU^[v vHf<X 6?0!Ir cU^[v &,&!r ~,7y!d$ vHf<X T%5uuS1 cU^[v vHf<X B,{6? cU^[v +J$`e jAxhn D,AwF jt[G_Vny l`G#% `B[`O`u {.NS)c Zz|)x l`G#% =l[<zX eES3]E _);hm =l[<zX eES3]E vLB/C _);hm ?'cc! oLj`AP =GD78 .T][: O]Q{e MK,bRb 0&pO[S u*!r^3 DQFJ/ =&cfL +Dyol  8;5l XQ[DF2 E\k<  =&cfL@ _);hm 7mI]h ?EmL`i5K y5C&" E&!QpEp i%):' I MD;8W l`G#% sm2== WgA=kw B|-(ai[ 5fai[ 2dw:8`3 .T][: gyq+K z=?Of( :SB+yz A.)yD `$Hw' _D*kR l`G#% nf?`Q hVh-DTD _);hm ?'cc! N,IVA ZwM!cf |>mQIv M1X ! l,CJx%+ "~vnB ZY,'!a"O HD^m;{ "9v=_ YZ_YH uS;Z7 Eni<M(8 +:Z}C ufKiqy %S~^< "=DC, Z\='B J/<?Y^ -t|RH iIbz+ 1H/b[ jZ5Y1 t__tu -b}qO >JB"<< :rz|!W0 Ku(1< DS(l! {S?;a o.f]A( \w8ef AG^qJ IK ZA /A#+i "MaL( *xP0u *d?qGwN ,=fRL W&-*:"0 v5Fv/ ZuE,#g @'exl9 cI%hj S05F5 M&`.. oM>bZ 8eO.; E`v.~ a!$#, _/k~` $(obwE ;i`:l !,emc Bl%#! Wxu^a C05m? `t+oVd D@0~rm ,;V&`r\ '<^(kz ;>]{_tq U> {vj /1XiX =w Be+  8w2f^ .$pUp O ed5 <oEC? ha/je S@D}OK N,|c* B|,Enz f Y^> |@*-y ;r.K\ 1@1l5 X>rRC ;R~k) VB."J u<FU]A -++l\ Rata{/Q 0$LZi 71stx 6fnqO '=Sz! e%gN~^ o[JT$= 62e|]^ 9$cPcVbB *j+u% k^2tX ag];Nm a1zmb@; -.5G`B=H P^I}i _J0$#m _N~SR sbI@Me r]+KF ~@,wn[ WD"mM +5o>A Q~]q+1 771E\ O]K<S D%"9y S Y-]; Y!uO,>6 hw2H_ 8.R/@w Pi4Ks glL [ `O!780j~  >ZV(E dWu0O *o{:S Y#$Md (5i?C =[}TA G#^2M Uc,;! 1=9C) :/Jm, I~*#" <!"^H {E1)r D3bCo kk)mC /lH(*& _5"=e| m`-99$ f>w#DEIf 63DvX{ A5sbho d-L_[ vV(<# +[joGB !.DBQ #X$Ga N^B}e gu?8$ "OmUfb &s=iX 6*=LKT6/: |wi+- EP^#<sc ]Sl@U B,O|B X0eiU Q8#,h KOyh"@ ehl?d /ERXuCN0l1 }iKJ_ []$O{^ G(|+{;=N ! ^KW'M TdwJ5E i25Q6 )A].y2 WfaL4 p&ZF/i XYl_  .L,~D YPdTT 7329p "'^_IZ yO]yW d3t>9( F,_Ov u"/T) t2hIJ W~/zN  Uov/9 n;*bS 9mT[U 7c`Z[/ ?2^kH 2pA4? D&}:bh c~?2cY 2ui+) zSCez mZxFq8 }-1)? %q}nq~ za!{& lLsbH S5}Ni SE:&? }jIc"-n G?(FQ \4z_T $j&9L ,4vO$V KGg0Y @1{#u l/{F  p-6X. F=0:] 'dCH| d|:R+sc o-^j5 1q_g~ A ~b'r% q>P1-v. *b]e* C\[!XX '@Pq5W jd'8V jdd~} RhACee X2$lN }4qLY U`|^u B3jVT '=yt[.x G:iU7 }QVPt JmK0_ LpWx;O8 ]q4uM _e-Hw KxrB:! t6!KS -&.xI bfC.2 aK*GW3 .%(l<vfIG( o~,*K6  ]-e( 9b2K)| T(:\A CkAH#q W2lb"Z Lo};[ ??*'R a Tco A>V\\ cba(] sl'|~ S}uQM g=ho2 {|/%D 9TSNG zTPx( |)IIn o3y%.k YYXX|/ R,{>][12x >+ k+ -/l*> iawKd Yo/GA 0!T}k}#$ Z_u<.! !e`L^nN ^$VOl;4iJsr G#WQ- JHdqF 1i1MR 2U&<H E29!= fF.P|#? 6MD#Z }}|&f h[x(MZU0; X9L@q$v *+8sL ^%@Q4 IWL+V5 `|=9[ clq</"+ I!T:L vm'U'J >(EM3 <:UeP I3%\p_ :Jt\ Y Oy-}& SIClLi ccn[j `N]s-@ <.COl ^D!u7 rYr5, h)1rcsB 5\e[d M$*)< 9)D@6jg ]?GgIXIi s}r~u R:/%'* =#IrZ <EOOX 5$;*H TQ4Ml v,`V0 h m_} }pTx~ 31T,C [{1z>& 9jObo }LyY9 */7nH ePU.S +6tS! ~mme!# 7NCfsEsZ#[ pwg]% k3b*'in PMq#x 3U)Jq m$:/, Yd3>f VPYo9 g.0d] !Bd86 w=e}Q MQ4:q1=#| nbjI# lHIY9 DrRgb soN;s sB<O58 !8c4< +6WQTf ^EtA. bnF"8 i\|C; {1QR.eg Wd%$zGr =#fZn Z&V7F /L.}Y UpH!sB (!42z AF3,qm pXj=] ~le6y 3;foa ?b\J ILs YABvi K0"D. r"]h[ TKu~6 }_O.; M9ITIe %v(_# B+#6c@ 2hlbX h~&Sd ]1YWj+B OcF6b y3rO02 +XQ6>/ c5Bm& N'??v c/yy_P A?fZU S#_*j PKUE$k_ q^gr\Qd> HzDy| SOU \ e'WHX&6 }j!hea `{Ns3 >i.DY Fy'}|Xx(A ia't7 s>%.:Z 6h %) zx 1b kcXZH 7gj\_d kd[-[X bEz<8 FZ.&* 2&Kp1 2]hY' 9|r7Z %RhqV6$F ]\l5A $~  } r'A*ts7 ^p>Gm vv:8D =rkRNz v9W}h F;;r| 5Quz&[ _c2t@R ,f"SK qpu't rM cH- Io!B[ KIt3e KIt3e W|Sn# =rkRNz M~I@a kdZ@- 5m0|1 uy^jE lhl~' ^Lc/G@ 3[xg^C"5\r wIh\+ }9A@A5 `3@Ha $~  } r'A*ts7 ^p>Gm ;0V5' d~dFE3XJI =rkRNz Y^'T&+ Z[PUc~ ^mFJ%r Z[PUc~ Z[PUc~ /?z9G }K~dYGvG|P ;,zRd* ef{%b ?0*;/ `V7Q- o?Ve? xN%W9U CaGUJ vEa*, 6<2~* K:A(ZE Ds#$p XZ@$%Z %bDEF ruNUQ, "w^.Fk q<S$J yS})1 [Kx!n [Kx!n [Kx!n 'yTMr ~}Fjv ~=Tbv ^f"u, ^f"u2 YmWESJ z_~WD 8~z+>gA ,B}zV QX]$]: [D}k1 E~A5s= ei9?h XN[\3EXt G0K?x` D~n\L 8WS{/r d_?F|Jr NT/sj7 w[WT^H _j6.X ^c;on QSg|HQW G0K?x` XN[\3EXt ,+)8y X7]|p dG>Ki^ ZY,'!a"O :q>wq ZY,'!a"O /AleC 6YIU3 AC65BJ`v GgKZd3 +xKhj NG.)3 gR1iNQ Td-wT] i=xf5 `3I_O- |tNo9 e,,RR Ej_`h s53S] d_?F|Jr dG>Ki^ |)pp_a X `q%kk tbwmN A{nb*E _y\@{ rEVm1 Pi702u n}-B }YAGQn5 :if|A }YAGQn5 hmfne 2o!xz %^ $r _l15bs 75)p" 2K$Mz q(x<F+ bx8!h bu%'{.' zkGea M-[40 XN[\3EXt d_?F|Jr ,B}zV d-mv$ +kmY/, t$09rg EXdab 8WS{/r i\chL%fi ,+)8y X7]|p dG>Ki^ t$09r d_?F|Jr dG>Ki^ |)pp_a =|3QR  7^#^M OHrGAl 8WS{/r d_?F|Jr f8?(4 /`:]" 7T1M~ )fOO= SpO:T,{{ UG/)u ^c;on CLZ>]g -*KtYw %_6~|B g_a|~ 4.<@~ \I_qm L(_qm s!<KR L(_qm L(_qm EVV`sN nN`w+v iVZn9 k4eeg _E%aN M~RB%d: S#^4O hn\[dF 0Rz-, q%Q=ac/ lHBNlq  \$Y( !qqB]  <P_^?3 $ICLf t{(4< uKWxf (RO . TU9B_q x1cn; i;)*~i~9 ( kOtT*dG Oy9w|u tv+Y7 |C\Bu K]+Xn+  fWat 2HHlJEC cNDq, "q?Gf fQfr=2 RKW6Y* l+lz? 1bm`t =S{&! ie)#m: `cB-J 0*<{m ,p;+W LmoyNrN Pk5vL ZT;|1 89=ne' ?_IZC s<Jw@ ]>Y`aYna Y6,g~_ /#A`X }lX{Q:N jE/Z8 &B*T3 f ^;J E8fkQ GY$3mf C\*Dy A}u9Q vdOS_ Jk&^WT '-$vS 8F^w1 L<&]@ O8#`, d#a}> C0w1+ N5^&F eaPYU d;oP1F ma~,_ 3pMIK t91Ol WUH>I tER,Jc &[##D *SnQ70 /N1s, 1MP8pW UiDQi 01$+i $j/fe |X6=% B5![#/' R?*"a^ uko<< 1"iku %mDce? B:K#JG& :pMEA (.29lICG bwN2<2 kR;{> 2 j0* j\/=U7 )Vhg)} rd#Vf V4DV> A1!Z( U]qAjU {'"RA 's[V. PwujN H^Gdd. @0zc{j v PHE3 hF4=Vl] o`ynK F2^o= NPt+e czr]kcB _<ix+j _Pz@  |Y&UV& }L66C kyPhznB dp k{Ac L~GOk V)?'; Hs\X" HFq). wFqm9 v05t6 H+LKS:!s P_WlSi GE;mm /mx<X z'l5/ 9P}a< &60zG /w[.BW ro`-d F (75& #96&& <YPXB 6%E!_r y8T-6 Ah4BTZ JAqq. u=Lr:r =/CQE\ )tf87 =||D} O#}4X -**615 ]cohOc Q;LRIF n*MZ= 19L!0 ja]?E 3)H\'5 lA-T^ u'Ulx |,|D^ R_*A|1 Zo1WO BJ:z7 RZo<r vC :a X9T4f yAj3(  vds-u /[[xo p1}ZI" z zi#M !391W3- Q^+OL gnDC e 5[cl$ (G]LM U(X!zE. 2^"7z- _,~*j kP,_' $%5o?X ->o`" e%Jz$U] o OvAv^ 7MTeOg= #y!gO eSRvq 4B!en oA2-9 :s%x. 2=|qI _=\!U CjN>+ epn$8  dEpl rvbIx -2%X-dU- [Ts%s uP6?w NGt?eB PKKs% vekPBw) MG?CU )Sk o 2k_Sd ]'O"+8 ^\~kJa n_M<6 TJYT>s Nj5Y7a <!qMLL? `4n(^ +TCT" |dmA7 68W)b n0qr6 U|_T.n u0z2h Ol"vdB FZzS` :]uHBrNJ kj`Lf Y/9(6 }yXeS BfEx1 PUa%WX> Cqv=kv z"{w2Tg%e5&$F m0usC \&S^%[ iGwa[& mBF('\-) P%4k_ ;0mW"n $$zph _~H"Z q}e ]l |4K5n lX$.H%hJ k8Fy^_KZ:z kDwi7 h6MtX Z,"{8 3;^Rg c^y{$ xzi6) CD7~\ 2'(rU +,X8_ ,2T4V X2R3A 1QYl' Tt[-2 %<.#x] KTMjs ^9w|g4 adS6K o6')l3 CV|<I wjxt)~~ >X1MY 3=A\3 F?g"@ GQN<' :308)%el &DXyw\+ f4{p  :(]+\ {Xi?J <)z"[Z_ ^WW5ilt /c=Gql_ i).#} +3$Na, 2S+v-kG[ *#lZ6 psht|e -GMyOv .lL5<6. o&r":\ [{"D%o oXqi' +6TeZ8 $SZ2K l8!d]x aLlnW /Mf4X .c6{B @YjS1 |MB3" oys_TJ%t DERI4 u6^Rc TG|,A pPQbQ L0;SpP yBEd  64uMZG p'MJu rtN`. O\OBj b_5)DEL =8n\S o0\DvzPWi% n.:32\ sFgw& 2wvd= ,/N66 {~V/Zf3 H;r1"P XI^8! y]]AG a1>q6 >9$?9 ]bDDbU' lLZC]{E M/CC+ $8yF9 qKH6x ^.q/Lq 49Cgm I>4[GC ,le~I_ rB60G3 x3Pz_ sSJ'W 6Hj{/ 3noJ! S-Ujn' d)G43 z`I8B 6FO|' jf3v<Pq/<9V J/!?;X VAYk~ w!v??S &;o2sp< Z2P1nw )RZ#. #3E,;0 )G!vPM84 %<MkP cV43_ MN~r# "(-;5Z 3V^?~ q]>9Qb PYe;kh hi|nO ghqou/ 8LpE' 9~:j] 7{W-TQxQ ^'VuF G_wN5 qY>}O1 x$Bf}= QT|4hL pfS%[ E|.7J OtpWx:4 2J[Yg [ovO. Tp_R:M }b2pn* ,C.p- 9=x;K /RS}%vZ ffSc+  }Vsul6 6DwW{ N4o*CB i1DRP =3^:{Wl PD5EY JoVvw@ `&onu 3j0%. :n92- J}}}P Ql>j/ %H732 |!?'rJ[O N9H &:3l wDO58 Tmwn7 O$>5? }\5nN '5mrQ rsG&B "\yYu SQ;e2K  aSQU Rvj,w} [%")f t'z>lYA- ,sF:[:| 1f$R3 Fc4$Z| ~P.y.+ Lg{Yi] zGNeB !J]s))T  QYwYJR GA^<u .4\Z{ GS5[U Q~%KA ^,RV, 2!P?@" %iExq[ qulk+ fL!Vp !*n5l G+8R8YP`amS x7 *$G )M}Hq S@cQH 3VkzE=I m}eB} { YP2I !S5mT *3D!& PJRyD$F Dbf$W d:w`D `q].h $kEF; O&}U6 fePR6vWj )eU`1 3@-cR <d?Ou jo'RB $]Ct9y uf;GI jms^=; gqO'| U"'`# yBaaP fAH:^ G"vTD X!pK/< w*7Ol 6U>@? 3S0=| ECxuiY dS/L6 uRp#r ,Uh}_ eqlG:> a61'Wb{?E TT2O) _YL9, Qv2_g Fm`z{e tE,9o x"BB= }GUwMBn a2{dc]F 5?Px' lM{\U <j4*+7tp20['- |mIS*] F)VW- KhF7w ?S:j, sm5`Th @{Vn;I QOf}U0 L:.8$ ^D*4m ]TO\R jQ,n" /R73f h{DYJ! y~n{ftPtH2 CoNQ,1Sd ?#s. ` -04UD( w^BZ6 xhC-|yp $S_/Q pz}.\ *[nmN eEm z u&}x" CZ S< RhSk. JnMu` `,$<@mw :m% Q M]|J2 [g8>aZ (f_ZM $M/*"C 1MO(@{ 6]FsW9 !#SBq~$y@ dym]y _W1)L c}Gc: dZ_':@*K 9 etq *)yn1 .I`,/2 zC"X! G%?1UA45 9F,bK P'Nx[62G 5s3\p8 1[V`4 )N<aAT I'%FQ VD^TK .E#G71C y{o]5 8I>Pnb ,oma'A X *yB?l [Pe-i yrLD3F QS4nY }ON5$lL k`z/"$ $,1nK=x=W Fb3lY PmAt  D{1z7 kf&p|Dm F*HpZ C(Oww JA4L1V lOIdI Sp@Rk TV@*c ,&D!y$ [,|`x2 Nt0=s eR%xN &n|`o nJnF/ m%jtC S<}4zfu &MAc1 5r_?& RDC5[f 'hTTQta; ~D^FtJv m*k#p W(.ST* t].D| jT,Es *|YDS nY3IO" 1'IB& WT"-I G!8O^ `5ou9 DPy~& BvD$mB RXb4Z 79V+.:J5 Zs[F2B i{9n7 i$4Ye Pev-_ C5ho`-V .qS0lW dM!x| q)h\G 1W$^e i/P+a +*{>;SU +^xF;> sEsWP NIeF| {?j<* |<hD!7 ZM}ue: 1>uWw UeM'i e*/`O qejR   a6K_|2 knR00 `e@;z 7|V&^ =CEBG `3s<w<i llhBl( R2^k* !(W=*[ .IBZU 3T"86: rq(ct m: h]q 6 QJ$ |:GU=c% IDC{3 |MG+  v5c8v )2B+Q `$t!k %yy9, r"\\6 vaTg%!Qx @Nb/R ;v}_Wp0 ~<o+s+ 8D+x& +7kfm W:i|l k/LD6 }n&Jz !YqZZQ 0Su}1, X|cp/ F,d'? [DZpv !F+0?O [zoRN ;jmbs Y*Z?} :}qX)/ uJ&zN> t$nrd 1>7`s 5%_U>{ o2,ZE!/KT %$sUH 3vLLx AeH^` -S 'BEQ,L {F sp p@qDZG erltI5: H*mF` Fz<|T[ Sa$Y#H VI$7V ;>f=,1+y bosg+ i;M<"G Yb)Fe 8;FF& ^A/OT vt2&R? >43J} Ib{:H 1;4$"H$$ 2Vm;) I+D^0T I\a^] kJE3' 84jJyZ T.1\| {}oj~IB `W@Bd P*$'Uu bTUR,c,OJ +rDY^ zT&Rx eAX#}C )GEo]` Kq(A.oq ROdW8 sUu/4 {3$w|+ jjy[Ea u_P.:kWV Vu}?l [~1kq 1CD2Oz 44m[]& {n>fp *rN"| I?@2N t[{N8 o;)n5 ~*/Hb :%'x& QE6He9 +D !l ?nhxd +a74l_ I'';X Sb+rc x2+ua A;Kun :kE7e !.>%> 1pQc=  ipoM|6 QTfYU GYykw 5zQ36 r&G%S _>f#l Eitlc \b! j-Qx 2SsG= b($}  Tjsh;$! XLzM: T3qeY# |S;#  T]`zQ ZeNZw0 9i-Rl )HoBt "i^eY tQ:qNy ,!TH= gaA~} RGkbV O9s:+% %f>[7, )n8{qN sIQs\/ `r^+Q o$&+zn+yXF %+E#U xk\fy 3LZ/X /me{/  T0U9 Dn8C| m$k?I bYA&m HNqd0p r=[SnQ Gsh`< \7c3\PGN [=X\O +X^cW @x1A[> ^u;sc %Tet< 5/Deo wAx;J(PJ Q!5E5 Zv6Dq@ rNp]g@>Q Dzja@J f:}=z EXt=]e#EvW AtH[3 i,{=@ Q'kkiPO imaL_>L WjC#j" z-0x@ cC:M/o Pig)= Clrj9S6  sb)CS> @QtlZ TDDq@R C$7Fn` qOl$G OfX89 j2e[& <J(v| 2u&O9B%Q qz*|Y u~+z1 c^e.1y {;Mr\ ri"axl nlp2/ l};Ke yDf1a ^SYpZy 6iR'X '==ift>c |c/!w3# J\vIV ?5]UQ3n MYkewu o6T!S 7P1I} }'=a;F oJ^zI]L "3_bp;*/iT$GM @V(^) (8fnm 0~NUS TA_I| IZA4b FLqylJ 1q%Yu, GV{;G gqxQj\q= fIm]]V )-0$d5@C 9[zLX G8hzAP1 1Zx&% s-H_+ h\^kR} !cO}" yS97> o`CcW hM[x` I0"TMd l]"1= q,MQ# W@:V\j! 2)${o []j3! 69YMRH x1%T? o3jI_g jC3a/ hYNqw ExJ4cG cdJ*o w>:$: BT$}^Tv kbH!3$o ;@wd; S:"7a O1`t7 Ma:%y "RdR7a S16%o <5nP-= -o5wV U3:a4 2Le6F 9.`"e h5Bye 5GU@# GL *;M` BAQ}_ 2+ Cu wS91h g3]Ds iN<e Q %8<:q f40Ks PCV,o l2NShY| @>$_TO @m(jaxx 9Yh:Z>' 7K\S9- A^Hr0J 4{+8e/t h2Ym/ mn"JB *X4jZA I^PU! 0.'P| 1H}<z HeZ[% ]=@0^7 s4fr@S.Tc XP(/h b(!Z&n UZWwgF LG.oY rT]v9C fmZ`p{ 'BC_x #l(@k xl;P& lyV#7@y C^@I;e ~v6lu q|A(f ZHe~p rS0 ^ SN|,&` ID>jgf T:Kk/ c}&Q( A(;`@ s{k^I wZ'hf :t7Ur m.}8T(I f(TqSj SW>w_ HMb)I -usSi @Q*ZF` KKb\g r4?]; w:|BF xwO^. A)Yk2 dN_Kf Be6u) GoLta6Aq &)>/Kj ./[_aPmI -d[x<V d0yGf M]Kv5 yjP_~(Z #D'2gz Xo8lx !M7wo I,n(6 eftx_3 SVAg'R/4 YS"K1 Mqj\sq AdW)J* BLgrj Dl>oA nA:Y)Y {2bf- -KI$,) v8<NS C-|c+ OUBs| <EGb?0 nkQE_le yh+KH  <bzP #!R.| `[GHy _"FE8#o K8f*q 9Nz|x :67Br 97$F|. KLt6Q ?H.]` )dA:~c> e'q-y #ew>mS /\+]x6| oEf)\lW %?;y% ;=oT~) \M6n@ ~]h$P1 j=vc- QW#Mc$ &6!ej3 ~~^-Mb w9Npg2 Jo[,3 c,O>, q~xFy XW6[H pg*{Z R,$cT fV=^$H ek5KA< rc*\h eSR7+ -QfgK[ xMGzy -vfX~ ]q:7m2 ?dT7?n# Zr,vJ vG^d{ 8O.Xm +&vZ9(F {=MiV  PzVis}E? 8*P0Kc Nfy#p Zmw,.0 pU'-%c 8OL-LC /MH54 v;sbp h-=U2 2z%M@T/ ]>{BYQ KxN~2 &[%mE c;]#s +H$@} -<_71 |q,Bv2 @2YZdG 0$/)*PN <6aXt \xeB_0 A2^q>jyq 0\,x8@: T3x ~ >~pc# s==X*V V=[Yd;  vB(`3[ m`evj 14"UM b[|dP p0EM; sU&*K *=w;6i6 kgE=eE ">T9= I(<U&CVB 66}AX w42?- &A{IN&5 cUI|rd Rj{]H x&vuy' 0 BP! uOPzv 5erQ@ rqg~E Eyzay 3NojBRb; 6>Kd; Y<?9l PnQLD 9>WUE $S=&4 2\y't ^$$#( Z!*Mke"0S %'r6M9^ ONS:ZDy^ W6_4v t\ana{ GA_D{  Yk)3 #W5$X +!`qr %+&H{Z NdlS) .|Ysu _82vxj FumK8z Lsc77 ZW(x^ MD}eEB L,~N? }::\j  {KF= qct+ikD P&VL'z 7z=cszdmm IO<iz/ b45n3 YTf<I ,ccq.  o49e, nZn#eC 02."<&h VHpcGT K{a?S )oPcg ;!.fn lIUc= M3:TZ s\k31 \`WB1 2XX@a %Bp,L OaD=k# c440n 28 Bw gPZU& YOXF  V1;"p( 'Y|zre !ZmJK B8mAp `Vg4. hIanP 3duI8 ,p%Xr :d=l1 *_u&c _bB#l |s\as As'%e 7L%8z .ss/@ xGr[l '=suHX NJbtwG -2+rns oBfu9@ iPgyB }N{ajQ d6g5>P k6ni@ g;*]A"Z (<fk.8) Raw#B !&!4i a.Je'* ]28*u `l`.w o\UJ$ MUm8G +GIj[" /Q?9< Ln;r8| f':E, nV{:}Wq r/+@V ~1J2R qj3oG)v A])'_ P&G]T 7_Fz! KD:>2Ry N__T2K ,D?LW TM! %<`Iy -c~Bkb~z NUO_@/ 'q-lD IZdDt:.  fS^f \gTT! gVYISz n Btec 12%LftaVp @Tj6^Eo %'dvT Ej#-P{M: ^*6UK u:`~5p ew\/9 f]2FA V u+| K*NAn t5_kC L'uM. `X6,o =|6s! ?IILvA 0\+YO .cC{: _S^;, MZ'2S( {!M~Y<M &n\7wJ hyqeuN -y44tb! J([6R }-K4Xm !j_sN +1m7. k#,X1 T,p \ ;=}!~ [*m7pz b'1Cfd `Apz@ lc\=s _5e\mJ }tPWne #@jQHK Dw6W, I<(?CAM m"%KK #hB`x v1'UW S[i+\ &;7S)g;N PX2LSq |RI = n-xBh .yc#J & :bDE Z(~`c^i hh/Jy f631Ju >KC>RG$)a K;9a^ *RJhb J$1_n cu7"-R, %X/lf ~N(Qu YQy&N ^gfv] YFC&w p/6-B rA4A]6 "fUaZ _"m|M *@0De 6lI'v l5M*K a<L|0t. S/JFi} yyyL' mdv8' 0R*7$ )1wP)f )e)YF ]%qUA 289>IMA Id-nc ]O<T9] u}ja0e ~sE`5 Nq{Ghj bGLbUDtP T2Y{1 ,L!'( *@De#5 p Hse ,}0"6 njZQZ tJ@p/T A?)\wA *WM7& =olA[ 0H/b3 YybA'-[ LCMY0f x;:T[ ZYpqX >};~v "5V2y *S_h:C w,7E~  =[Cl' 6j4|x <nJxq TC]qJ #v}qU vxT,oK ULt<ms Rtq^%_ Ju"wG Jh(sg Wc,O*/ S6"*LMIO ewR>+r )~1}zI  Rwr/ ${}83q q:[>" @5Bq' aLW*\ ];!F, %5R.i?B ,C~vW$s t4-9` xjUOCl u6jWX Euk&} zJ#>% &x|Zh -^;=m jQA3] 3(=wt )n:c^  $=qQ ?CyQc x3Gj9 M]{(> lj>Qh :Do3s9 y6L*d HfYtd vn=Sm] $"%GA3 ;YCHP  3rvo+  k(i}bt <URz= QV.[L y$5g-O J!Yt$Z1 'A3i' cgkm%v "p6F6: '8YKn[ 5p:H; EiS-+ U$.|, Jz_5m 6G:"U BtD|e HoQYF 5'N@z $'bv: !_z~[X L9Jw~ di|49. :(fCpu Eqw04o 1y5CZ S$H7a o>C". rTp*% NHQw^ S{>1k H?M1~ T8t4pY4m/}gk \XjPe+M W[&+| `Yui8 uN?^J m#]L4 d-^PDp p5f^N 7:p=X z"T/m/ :w]}A 8Wj+LV HH}b3t yRir? R^)Pw N>E{RC5 54,sNz K.Q`t (lJ`_ h$m;ZE QGIKz `zSq; <XIJb jUh%;L OVMij ]N84T I<m!2 }Zk>% 0)mEK "2f-)B #,\z.l H" "j jh^Dm tkKw+I. uA#.a _8*_$ Mc<w* 0Si7% aG}!*2 [.Zk> a- vX \2<Urr +7>)Gb G+pOR NEc>) >UNIlr 8QwU" 1CwU$ p>w!> L/Lj# 4c]5H+l :$BU; V=-2|: REG_Y3 j^>Y\ 9='_1 ^o]DG )b|o^{ hc%,6&on" :Qod;! { 3'y~3 {9Fiu CDWd]W Af^I.6 wo~3z foD~PlIa xsnc3 80F/' T{}_`K o#4/J Sa|0l ~oDiG 9L ^@1 OQ.+GS< BF@<Ql eE+O2 ~SU.= a$?lKA j=Q>R Ciq#>HC6 0>F]M~ i4%cH )^\., J&H 1 0?b!~ Ry.8xU nICZ% ~4"):* syGa= +/@4; cJ'R'U {'p!"P|  *"8@ i[PbV< O@ ^lR.z, C.\\\ K;jQe .,7{C z_Bl8%Y &-`&*) N+}H2, 6d:OL &XX"A d~;<wK K(+$# y+w2g Gs5s( )>i&I0 pKr)+ ]Z2cZ +^^I9 v `lnT  H@T\ c9Z:Z Z9!Db BqQOVpY '^RP[P w#v$T- jwhP(^ lphP8 K .N=A< $ `hl `kY,( {YZL=M -OO~Q #M~Kd u[|O0 Mld-e ]5YOk D/H*oDt RlTFg a*<\?}) 7(w(v VXTV| L>c6H RU/qH 'uuv\ , Q|R lSYnf ^Si*|  ]BD=f7; XLbM  |&]vc/ 9dh`/ <9h:${ #oa?B _MOe_}+ -D9`h+f GQ@Q= sQT][ "$=@h 9S[UNzes 8(JHR g-?*u iP|p$d !k='J &%I?h @P5 f CO'yrwT /{<g-Y ||9,q[{ 4|;>nr h\7Uu Ea?CN |Al#HP 9zIbxv, Z}yk# qgDh3ab 2vW"8+ :{+_/B Y*HJUf !~`[D n_~'^ !u?4t UF'xE 5X{%2 n&h;? H!KN!8 &UPOU ;XAny +"qH}  ^Qsr! hHX8/0X wKK,Xt "hG#N) PJSl1 23shp w1MG| #K>Sh ApSL3G]P .9U#0 F.`K| a7Jdb TnNNe uq9y{8+> :YHUY _~/'7 of7h^ 3`Kjj j-VP&y ])d:p  ZrcA &19)2l _ZC3< \{BCv $u:Qd@ S&IBj s!3&: b5/vY M?J?Yp ;<L7oi  R,"M Z]&&'a }$gwG ts}SUU 5V8Em 0a03} )pCpPh E2@^R <vc'0 qn@`? ?FxU< X~r"s#a: gCA]  %SX_B&. rMDy4 _qf[+ !6c7AT L{Bq> [_&>I tK(g& KtbTv ;<wIX TR31F &WL#"K (%re1 UVm3* ?O{AS% i{jl1' &lV$| hwS|t Rb"1\ [PK2G 88)4d ;qUWL [:b0$ %C>OC AJ/}E [06F0 pZ7,&!>5 Hr$`l RK;K\/D 6Xtq,S ;N8AJ \<x)) eho#C Wsoun 8l Dl Kbj:@ n3'n@[R dgJ'e e?IILG BTfJ5| <_sJ* FiFnm ubNHc N}tMK Mha@i uIcm#0 cGCMp #_P#.Z cK_Z"t O\|oI|) Y);:Q ED5,[ 8WB$< 11W#>$F z[e7VVh K8|q< tF2AK .}4@@iF2]sFPermission for this document is currently restricted. If you are not running Microsoft Office 2003 or an application that supports documents with restricted permission, you can read this document by downloading the Rights Management Add-on for Internet Explorer. HYPERLINK "http://r.office.microsoft.com/r/rlidRestrictedPermissionViewer?clid=1033" \o "Download the Rights Management Add-on for Internet Explorer" Download the Rights Management Add-on for Internet Explorer HYPERLINK "http://r.office.microsoft.com/r/rlidDRMMoreInfoLicenseReq?clid=1033" \o "Learn more about documents with restricted permission" Learn more about documents with restricted permission U}HSQ $"$,GE(TP VU*[ptP jq7z#J MG5$|
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\reporting\ReportingTarget.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKS Document Description Type of Document Status Date Created Feature Spec Template Feature Spec solid 2004-04-16T00:00:00ZXbox Online Spec Template Jerry Johnson Xbox Live Feature Spec Template.dot Jeremy Im Microsoft Office WordIDATx^ ]U 53 GKnX+ VwP}E^6-u ; {gJ*[D 2XA{I7 %asY` bGIXvt W'?zf "U' ? ve)c) ]aj;7- v%aG) aFK/b= -t%zYqa jAym@ f1|A\ 6[Zj{ <+4zP  s}yCi G6L(L N'Y6@ #*4>8 G"~r)Aj4 C#d}$ dxr&4r,<z,41 '"<OO P;UYG d.Bon3/ &f+{: t[>66 l0$9d P}q0/ 80pxp qIYFQoh_ j7I]r GS"|0 *%DAp) PA,'V Xht*29 LtdJZ tv$KY H<IRC# _$/*P+ m#+ZlzA9 @@r4R IR,^<q 7{ovww 2r{9* DZ#V`$ v $`  uNS pv9_ZYX  ^o{e 12y|$  quwI bd;[{ ''&'' 9G'o` hsgsf N_J]|&[ ;~b43 Lm-XH =|+MU Y/sLlb:F 4'w80, 9y>3y 7j|q: r<S|a X!R9J M4h26A ^xZ9i i9W]_ n@pH0 MbjqP f+eFG R% ,U dtQ3: hbHc> Ln`oi TMTd@ hHL/)}m8 [}Oah pz$ld $Dn@i <1r@, n)T~h 4x(.I 21-WVV >ww/nvsw p#%U" *!^@; "zV%Ql,qS\2 =!V ? zC~d_@ >+-uJ >n!}sS pN*Y' M<77K HD`w) @/LG!LQ {no9Va5 7A0\^ 1*ODC !*x.E! uT&7r h-K _ *1vZb -Msoi ,vSX' n7)'8~Jv CRK4c 12Q`U 4}=/$ 0x^W; Y(4`? T5}YV wR?R[ s@ga. @H$nZ (hSte 5"U`F };Z{a a^m:q `6m4O -fc~Z! *hGc~m ?c]-7 !?]wb <t!]K q'eeCW 9'-7^ GS}y? wNk5x% PLHf& 82n5, Lv]@o 6-`H~ am Ciw[ /A+@-' 'ZfUR qHkzS l3^O: gvbH. -%Qe3 /]@ A7J#U Ao`|8A ,\vF7 `exLD|o Lt9j% #.2e{ bE^[Q2/O'G maLPQPL 7[Tl6 sCf2^ Yqz!+ kGI:q .POu]t AX\p5u Rj;V1 N\Kgo%] GK&{o g-=7b }gs{o <yzfN g=9:{, 4qu9|Microsoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11EMF+0@ EMF+*@ EMF++@ EMF+*@ EMF++@ EMF+*@ EMF++@ GCB}wC GCB}wC EMF+*@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ O'UC9 jBO'UC BO'UC B:yQC O'UCb CO'UCm "CO'UCm "CO'UCb ^mCY#dC $[CY#dC slCEu`CB}wCY#dC slCEu`CMicrosoft Corporation Page-1 Rectangle Dynamic connector Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESJeremy Im Jeremy Im Microsoft VisioVisio (TM) Drawing "/.?L I[C!F ZOlO~C$ 8+W7? /,/jLM%9 ? ?2? ib_E-M oE_W_:/L& BoTofo (TOfO -l'/m# _oO7[E @=ll1 eR%,n 0Yoko|] a?5,e ?D1f@M)@c<0oN+@o fdBUArX@ Aad@iV@n3@  @ \Hs Be+@e<0v @dH3@J@ SV6U8 W_74b (s.sU ;D1t8H1 ;H1t8 ;L1t8P1 ;P1t8 ;T1t8X1 ;X1t8 ;\1t8 x4@d1 ;d5x4 L1H1H1 P1DP1u T1T1D1 X1DX1H1 \1\1L1 QU,?>7R eu`ta  \udeu  mU` ? etzDo@ T=IF?X? 2%Us2 /]/o/ yi7OIO _/_A_ ?oQocouo c31ac1 @rp c1c1 Bpc3! tN\ps zsPq?r p`4c1 c5E_WV a5ob4 l/}Tr -_[nS 4'O9OKO]OD NVE_W_> o"o4oFo- 7FKAD-Microsoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11EMF+0@ ?.s"C _hC.s"C ?.s"C EMF+*@ ?.s"C >@kM? EMF++@ B:yUC B:yUC Bv+yB Bv+yB EMF+*@ Bv+yB EMF++@ B.s"C EMF+*@ >@A!? EMF++@ EMF+*@ 6|C6@ EMF++@Microsoft Corporation Page-1 Rectangle Dynamic connector 45 degree single Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESJeremy Im Jeremy Im Microsoft VisioVisio (TM) Drawing "/.?L I[C!F ZOlO~C$ 8+W7? /,/jLM%9 ? ?2? ib_E-M oE_W_:/L& BoTofo (TOfO -l'/m# _oO7[E @=ll1 eR%,n 0Yoko|] a?5,e U ?D1f@M)@c<0 fdBUArTX@ Aad@iV@n3@] f@A @ \HUs Be+@e<0v d3@J@ SV6U8 V5au\ U dS 4 a gK ea , ns ly"b$U ~!c 7xf#5 P3}PMuPcsPoK smPf{RlQroP Qa{PimPn PesPv g83f${ F@JuIv `4D1k;D1\8H1 k;H1\8L1k;L5`4 @noPe 5c(Dh  pyRt  t_0l U'a'a qE4D1 !!$d(9 $/6/H/ ?l/~/ ? ?2? _*_<_N_ o!o3oEoWoio@ 5-3 + OpM9O 4UewC v*OX_NO o-o?oQocouo .$Fi4_ *'"D~Microsoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11EMF+0@ EMF+*@ EMF++@ EMF++@ EMF+*@ @@%!? EMF++@ EMF++@ EMF+*@ BA'?C(+ EMF++@ EMF+*@ >CBYaA6@ EMF++@ EMF+*@ EMF++@ EMF+*@ BA'?CPV EMF++@ EMF+*@ EMF++@ EMF+*@ >@r.? EMF++@ EMF++@Microsoft Corporation Page-1 Rectangle Dynamic connector Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESJeremy Im Jeremy Im Microsoft VisioVisio (TM) Drawing p"/.?L ZOlO~C$ 8+W7?X /,/jLM%9 ? ?2? i b_E-M oE_W_:/L& BoTofoxo lI ,; ). 2` 3. M& c$    Y!a, i }..   lt U $(sx"eL e$  bb .2 h ?D1f@M)@c<0oN+@o fdBUArX@ Aad@iV@n3@  @ \Hs Be+@e<0v @dH3@J@ SV6U8 V5au\ .y(s@ k;D1\8H1k;H1\8L1 k;L5`4 @nbPe ned`8d@Q3i oE,?>7 UL12b( t_0k1 YyFmhA @foxo c`Ef/B ``u&@w` f1@0' +cK"E %?7?I?[?m? KF`+M 9YWFW W_i_{V -o?oQc 6yc1*/</N/`/r/ U?g?y? O$O6OHO _(_:_L_^U "o4oFoXojo|o 0, *'"D x3H%a!Microsoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11Microsoft Corporation Page-1 Process Decision Dynamic connector Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESJeremy Im Jeremy Im Microsoft VisioVisio (TM) Drawing #/8/?M >S@#B: iz4}1 ,3Y&4Y&5 ?%?7?I?[; SEn%cO _!_3_E_W_ 4/F/? o o2oDo "+z1c 82abd 1/C/U/g/y/ 1?C?U?g?y? <ONO`OrO >_P_<b_os o&o8oJo\o jHB/T/ f/x.m $?6?H?Z?l?~? O#OFa1:BQ q[\OnO _%_7_I_ o*o<oNo (0_B_ ?/qd/ 56rCD? m1"uI (sT"e  vf dY Rf"o* PU0%!p d2"aJ "s:V"i2*b i!T]#S-S $]g0", S"`?C 0H03k 40c20o :2+1r.0g1a:0i 0 28s Z0e20v vC;YFvFv # o0tM +1s:0 %@;AD } fV6 U ?D1f@M)@c<0 fdBUArTX@ Aad@iV@n3@] f@A @ \HUs Be+@e<0v d3@J@ SV6U8 c0xo) W,_74b ?)?;= QXhXAgk XAXhu \d,agk E\d4agk 4aXh8agk8aXh \dDagk DaXhHagkHe\d OqOE_NI o0oBo `5joRB T/f/Z CE30 w `zphv b?o&% V3131 o&o08oJo\m Xk[vP  i) s  >!:O S U$ ! i "CS"r !"rS   @z3@ o/oAoSo MB!)W ./@/R/d%YQp/O O_a_s_ 2$I)_ @*O<J _cueY/3 Zolo~o oYH%a!Microsoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11EMF+0@ EMF+*@ EMF++@ EMF++@ EMF+*@ EMF++@ EMF++@ EMF++@ EMF+*@ EMF++@ EMF++@ EMF++@ EMF+*@ >@\#? EMF++@ EMF++@ EMF++@ EMF++@ >@Gk? EMF++@ EMF++@ EMF++@ ?@. ?@ ?@g.?@ EMF++@ ,?@'3?@ ,?@`A?@ EMF++@ EMF+*@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ EMF+*@ ->@5/? ->@cv? EMF++@ EMF++@ EMF+*@ >@!Z? EMF++@ EMF++@ Ce^-C !Ce^-C EMF+*@ EMF++@ BHakC EMF+*@ EMF++@ EMF+*@ EMF++@ EMF+*@ EMF++@ EMF+*@ EMF++@ EMF+*@ EMF++@Microsoft Corporation Page-1 Process Decision Dynamic connector Terminator Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESJeremy Im Jeremy Im Microsoft VisioVisio (TM) Drawing #/8/?M >S@#B: iz4}1 ,3Y&4Y&5 ?%?7?I?[; SEn%cO _!_3_E_W_ 4/F/? o o2oDo "+z1c 82abd 1/C/U/g/y/ 1?C?U?g?y? <ONO`OrO >_P_<b_os o&o8oJo\o jHB/T/ f/x.m $?6?H?Z?l?~? O#OFa1:BQ q[\OnO _%_7_I_ o*o<oNo (0_B_ ?/qd/ 56rCD? m1"uI (sT"e  vf dY Rf"o* PU0%!p d2"aJ "s:V"i2*b i!T]#S-S $]g0", S"`?C 0H03k 40c20o :2+1r.0g1a:0i 0 28s Z0e20v vC;YFvFv # o0tM +1s:0 %@;AD } fV6 U ?D1f@M)@c<0 fdBUArTX@ Aad@iV@n3@] f@A @ \HUs Be+@e<0v d3@J@ SV6U8 c0xo) W,_74b ,%"usi"iO*b |!p#f-S $gM", M`0c^0o %sX0ff2W1rZ0 1uaf0iX0n 0 ^8Us 0e^0v _O*J y EHgA^_R  0euXojf W15sYR Dq!X(b uQuQ"2 'r/s+ ?)?R;= Q\hXAkkXA\h `d,akk,a\h E`d4akk4a\h 8akk8a\h `dDakkDa\h HakkHa\hLakkLe`d !kgAA o12`I @l7`q9d )?6/H/Z/ ~?'e, O`OrO xg_y_ 9iIe[ oU@KH u\/0j\ oM_/oAoV?Peowo  Fb.s  ?2?@Q U@_R_ 7`ue?`zp Bp!a!a :h;WE )O;OMO_Oq@ u=ey/ o-o?o ?%?b?I?8[?m? q)Fq` /-/`?/Q/c  ?0?B? dH%a!Microsoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11EMF+0@ EMF+*@ EMF++@ EMF+*@ *{>@)&? EMF++@ EMF++@ EMF++@ EMF++@ EMF++@Microsoft Corporation Page-1 Square Rectangle Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESJeremy Im Jeremy Im Microsoft VisioVisio (TM) Drawing #//?M >S@#B: iz4}1 hyT,W ,3Y&4Y&5 ?%?7?I?[; SEn%cO _!_3_E_W_ '/9/? U_g_y_ o-oqq-) /,/>/P/b/t/ L?^?p? %O7OIO[OmO !_3_E_ o@/oAoSoeowo /P//A/S/e*ms) C?U?g?y? S7OIO[O /a1rB~ _$_6_H_ o%o7oIo 7H!xd ?U?g6z T.3g6 uGvFe mU/g/y/ ?,?>?P?" :OLO^OpO _$_6_H_ 1BaQ# X(4xD 1BrE# R"q5D E(Oz7 Osd{i bWKa|51~~ B1BTA -l'/m# BO(4MD _oO7[E 21PO> @=ll1 0Yoko|] a ?5,eU\ (s.sU ?)?;= WAAXA o@'o9oKo h_,J5I Mpd?uReporting Target for XManagement         Last Updated:   DATE  \@ "M/d/yyyy"  2/7/2005 Spec Owners Client-side Contacts Content Contacts UI Contacts Development Jeremy Im Operations  Spec Status Draft   Reviewed   Closed Created 2/2/2005  TOC \o "1-2" \h \z \u   HYPERLINK \l "_Toc95547175"  Overview  PAGEREF _Toc95547175 \h   HYPERLINK \l "_Toc95547176"  Architecture  PAGEREF _Toc95547176 \h   HYPERLINK \l "_Toc95547177"  Feature Design  PAGEREF _Toc95547177 \h   HYPERLINK \l "_Toc95547178"  Core Design Details  PAGEREF _Toc95547178 \h   HYPERLINK \l "_Toc95547179"  CXomReportTarget Design Details  PAGEREF _Toc95547179 \h   HYPERLINK \l "_Toc95547180"  Message Protocol Details  PAGEREF _Toc95547180 \h   HYPERLINK \l "_Toc95547181"  Database Schema Details  PAGEREF _Toc95547181 \h   HYPERLINK \l "_Toc95547182"  Using the Reporting Target  PAGEREF _Toc95547182 \h   HYPERLINK \l "_Toc95547183"  Security  PAGEREF _Toc95547183 \h   HYPERLINK \l "_Toc95547184"  External Use  PAGEREF _Toc95547184 \h   HYPERLINK \l "_Toc95547185"  Dependencies  PAGEREF _Toc95547185 \h   HYPERLINK \l "_Toc95547186"  Performance Goals  PAGEREF _Toc95547186 \h   HYPERLINK \l "_Toc95547187"  Capacity Planning  PAGEREF _Toc95547187 \h   HYPERLINK \l "_Toc95547188"  Operations  PAGEREF _Toc95547188 \h   HYPERLINK \l "_Toc95547189"   PAGEREF _Toc95547189 \h   HYPERLINK \l "_Toc95547190"  Terminology  PAGEREF _Toc95547190 \h   HYPERLINK \l "_Toc95547191"  Related Documents  PAGEREF _Toc95547191 \h   HYPERLINK \l "_Toc95547192"  Revision History  PAGEREF _Toc95547192 \h  Overview The entire reporting process is being overhauled for Xenon to make reports more timely and the process more robust. One of the primary changes is to have components which require instrumentation to send log information directly to the reporting  cleansing server . The cleansing server is responsible for sanitizing logs from various components and inserting them into a database for later aggregation and reporting. By having log information sent directly to the cleansing server, it opens up the ability to obtain basic real time reporting, as well as removing a dependency on a log file collection system. The reporting instrumentation component must be robust; any issues must be easily and quickly caught by monitoring and the solution to the problem simple. Architecture The following is a simple diagram of the XManagement infrastructure in Xenon, as related to instrumentation.  EMBED Visio.Drawing.11   When any instrumentation is executed, the component logs to the XManagement area specified in the instrumentation line, and any targets which are enabled for that area receive the instrumentation information as well. Since the reporting target is a basic XManagement target, it can be plugged into any existing component with very little code change, if any is required. Feature Design Core Design Details The following is a class diagram of the primary classes used in instrumentation for reporting:  EMBED Visio.Drawing.11   CXomReportTarget is the parent class, and the only exposed one. It implements the XManagement target methods and maintains pointer to instances of a CReportConnection and a CServerSocket. From external appearances, its sole role is to take a message from the component and log it and return to the caller without blocking the thread. CReportConnection is a helper class used inside of CXomReportTarget. It takes the message from the target, and prepares it for transmission over the network. As such, this class is also responsible for handling errors that may occur during transmission. It maintains a pointer to a CServerSocket object. CReportConnection derives from the CTCPCnt class, and existing implementation. CServerSocket is a helper class built on top of Winsock APIs, and is an existing implementation. It handles the actual transmission of data over the network. CXomReportTarget Design Details From the point of view of the component, the following data flow occurs:  EMBED Visio.Drawing.11   Internally, CXomReportTarget creates a thread (called the heartbeat thread) which is responsible for periodically checking the connection state of the underlying socket, as well as sending keep-alive messages to the cleansing server during periods of inactivity.  EMBED Visio.Drawing.11   Message Protocol Details The reporting target uses unidirectional communication with the cleansing server.   EMBED Visio.Drawing.11   On startup, the target will notify the cleansing server of its initialization. As it receives instrumentation from the component, it sends data messages. Should the target not have sent a message for a while, it will send a keep-alive message to the cleansing server to indicate that although it is inactive, it is alive. Finally, on termination of the component, the target will send a disconnect message to the server. The wire protocol for the messages is as follows:  EMBED Visio.Drawing.11       typedef struct {         byte bMsgType;         byte bReserved;         u_short usSize;         ULONGLONG ullTime;     } RPT_MSG_HEADER;     enum ReportMessageType {         RPT_MSG_CONNECT = 1,         RPT_MSG_DISCONNECT = 2,         RPT_MSG_DATA = 3,         RPT_MSG_KEEPALIVE = 4     }; The first byte in the message header represents the type of message, as defined in the ReportMessageType enum. The second byte is currently unused. The third and fourth bytes indicate the length of the payload   an unsigned. This is followed by a 64 bit long which is the timestamp of the message in FileTime format in UTC (in host byte order). For keep-alive and disconnect messages, the payload length will be 0. For the connect message, the payload will consist of two unsigned longs: the first long corresponds to the server id, while the second corresponds to the component id. This allows the cleansing server to associate the connection with a specific server/component pair. All data is sent in host byte order. Database Schema Details The reporting target retrieves all settings from the configuration database. Configuration of the reporting target itself takes place in t_settings table. Setting Value Purpose xmgmt_area report=Type=report; HeartBeatIntervalSec =15; KeepAliveIntervalSec =300 Type=report indicates to XManagement to add the reporting target to the target list for the component. HeartBeatIntervalSec is the number of seconds between each heart beat (verification of connectivity). KeepAliveIntervalSec is the number of seconds of inactivity after which point the reporting target will send a keep-alive message to the reporting server. xmgmt_area_<areaname> target=report  and if  enable  is present, set it to yes target=report to indicate that the area <areaname> is to send instrumentation data to the reporting target. enable=yes to turn on instrumentation for this area. Further configuration occurs in the t_interface_buckets table. Here, each server retrieves the cleansing server information. Here are how various columns are used for the reporting target. Column Value / Purpose vc_interface This must be set to  reporting i_title_id This must be set to 0. i_bucket This must be set to 0. vc_server This must be the name of the cleansing server. vc_next_server This value is currently ignored. vc_info1 This value is the cleansing server s port. Using the Reporting Target These are the steps required to enable the reporting target in a Xenon component: Initialize the XManagement infrastructure. Define an area for the purposes of instrumentation. They should be named componentReport  As per the t_settings, enable the reporting target on the report specific area. To send instrumentation data, merely use the XomLog macros, with the report specific area. For example:  * Some header code XomDefineArea(MycomponentReport);  * Service startup or main stuff     g_xomcentral.Init( MyComponent  * Some random function  function     XomLog1( MycomponentReport,  Server %d did something interesting , iParam1 ); Security All network traffic is done in cleartext, and there is no handshake protocol to determine the validity of the cleansing server. External Use Dependencies Performance Goals This target must have minimal impact in terms of CPU and memory usage, while being able to handle the expected instrumentation load. Capacity Planning This section should identify usage expectations and how this feature should be integrated into the overall capacity planning model. Operations The following events are thrown in error cases: EventType: XEVENT_COMM_FAILED_ERROR EventText: CXomReportTarget::HeartBeatThread() - Reporting target has lost connection to the cleansing server. Attempting to reconnect Reason: There is some issue with connectivity. The cleansing server may be down. There may be network connectivity issues. EventType: XEVENT_CONFIG_ERROR EventText: CXomReportTarget::Init() Reason: We either received an invalid I/O completion port object, we were unable to CoCreate the CommonConfig object, or we don t have correct settings specified in t_interface_buckets EventType: XEVENT_CODE_ERROR EventText: CReportConnection::Send failed, hr=0x%08X Reason: Send failed   this requires a lookup of the error code. Any parts of the feature that are cut from the spec should be moved to this section for consideration in future releases. Terminology Provide a list of new terminology used in this document along with the definitions for those terms. Related Documents People who read this spec should also read the following documents: Title Location Owner One Pager on this area Dev Spec Test Plan Sample Client Spec  HYPERLINK "http://sts/someplace/"  http://sts/someplace/ Owner Revision History Changes made Author 2/2/05 First Draft Jeremyim Microsoft Confidential. Unpublished work.   2001 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2001 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  tcUcJ `YQIEA zvrnfnQIfn |u|u|uqiq wokokokokg_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\reporting\XOCMonitoring.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Monitoring procedures for reporting processes TitleMonitoring procedures for reporting processes Nataly Pogrebinsky Normal.dot Nataly Pogrebinsky Microsoft Office WordMonitoring procedures for reporting processes TukInfrPrDmg001 Monitored subject Failure severity XOC Actions SQL job  Copy and restore DBs  till step 7  Log file prep (inclusive) Critical Identify the cause and fix it ASAP Free disk space on drives h:, o:, f: Critical Each drive should have at least 20G of free space Databases should be in a healthy state Critical if UODB1-UODB4,XProfile1-XProfile7, WebDB are invalid or inaccessible Find the cause, contact Matmak if necessary Standard h/w health tests Critical XOC knows better than me what to do LogVault removes old log files from drive f: Critical if drive F: has less than 20G of free space If XOC is unable to resolve the issue, contact Natalyp TukInfrPrHST001 Monitored subject Failure severity XOC Actions Free space on E: drive  Critical if running below 2G Cleanup the drive Standard h/w health Critical Network monitoring XsRptData01 Monitored subject Failure severity XOC Actions Mail with subject  Daily Processing Stopped  is received by the XOC The most critical Call Natalyp ASAP during business and non-business hours Standard h/w health Depending on a failure Send an e-mail to xonrpt@microsoft.com. Notify if down time is required to fix the problem Network monitoring Critical Notify Natalyp if downtime is required to fix the problem Drive O:, H: is running low of disk space Critical when there is less than 50G of free space Open a bug, assign it to natalyp SQL job  Bi weekly   Mon/Thu- Full Backups  task Severe Open a bug, assign it to Natalyp SQL job  Daily Differential Backups  task Critical Open a bug, assign it to Natalyp SQL job starts with   in their name. XOC will be notified about new tasks added Severe Open a bug and assign to Natalyp Scheduled task starts with   in their name. XOC will be notified about new tasks added Severe Open a bug and assign to Natalyp gdnc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\reporting\XeReporting.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation TitleNataly Pogrebinsky Normal.dot Nataly Pogrebinsky Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags place http://www.5iantlavalamp.com/:(~*F Ezo0O? 8)$?tf .OkQsm Y\F;/ >@V?` C8~ka o3\{B' y\V\u @Gl01 ]sR;Ks] .JlO= TUcO=o iO5|nKN p~{$y ~@+_Hk eH4`L& :Ckam b?;KL# 8EI|oZ N>}8BMicrosoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11EMF+0@ )\gAf& A)\gA33 \gAf& EMF+*@ {>@U,? EMF++@ EMF+*@ EMF++@ EMF+*@ >@U7? >@<?? EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ ?@|k? ?@cs? EMF++@ EMF++@ EMF+*@ EMF++@ C%HYC D%HYC D%HYC D%HYC D%HYC C%HYC D%HYC D%HYC D%HYC D%HYC EMF+*@ EMF++@ EMF+*@ EMF++@ EMF+*@ +OC6@ EMF++@ +OC6@ EMF++@ +OC6@ =@rV? =@Y^? =@@f? =@yt? EMF++@ +OC6@ EMF++@ +OC6@ EMF++@ EMF+*@ ]}C6@ EMF++@ ]}C6@ EMF++@ ]}C6@ EMF++@ ]}C6@ =@[C? EMF++@ ]}C6@ =@{Y? EMF++@ ]}C6@ EMF++@ ]}C6@ EMF++@ ]}C6@ EMF++@ ]}C6@ .}>@9 .}>@  EMF++@ EMF+*@ "B>@u EMF++@ !j#R! !j#R! EMF+*@ EMF++@ c(D=j [%E)[%q( *[%E)< [%E)[%q( *[%E)% EMF+*@ EMF++@ EMF++@ DC^cC D {`C EMF+*@ EMF++@ EMF++@ =@:b? =@!j? EMF++@ EMF++@ %!"S& D+nyC [}CA~ EMF+*@ EMF++@Microsoft Corporation Page-1 Boundary Object Datastore Pointer (1-D) Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESNataly Pogrebinsky Nataly Pogrebinsky Microsoft VisioVisio (TM) Drawing #//?M >S@#B: 8,W8? d,A(w (?18}: /ML0%0 ?}O9?K? iE_(- o(_:_ 7d2O( Io[omoT?t i_{_q (?:?L?^9 D/V/h/  -o?o6 _-_?_ Ooaoso / SO1/wN ?)?;? O\_>O# j?|?z /%/7/@ Ai/{/ _1_C_U_g_ /[OmO ?9?K6 @HAua HUsgBe;@e @vy@Qd[@ CiATA Cc@u:;@t}B AR%TA (( )Y 2: W0 fW"H!rTK  !aW iI n& ] Y A   O(Us  eO v  Qd&  ])% 2 01 3%   P!a#  Ulk   (so"e ]n7"r Urc0gX (q0])o 0oe0o 0no0 o 9$#D1 ;#%{@'& !(}-*!0 gY_?#q_ C&^/n E9kok_ <1[E<1xm 0aq0t 0dc0n 1JCPU"42GH GFbe"> E""44GF E"45GF "46GF %">x%"> GOF3z "o4b{ mi0m]0r }yk0o G{#2N Q\Q\W; 0vX`d$ UQVgT CiK6s 0@i"l> RBB`o bi2fS  PnX`  i4i1Hu: q>-"f7Q1 >I1e8 !t;M1e8 >Q1e8 "-!V##f H-biz <-!|K )Vt-! $acTr U&DUI1 'Eaob|' ay}M1  iQ n 1K Um !XD-q@ 2&Y<z?3V ^}eC- o o2o <AVAo ?$?6?H5< O1OCO UOgO9 Zolo  &p@z3ap  _2_D_ j%( 3 ?-<j% F1@]l 4/n"k `a$`b UqUqIR!  ?2?D? E%Ut @Uv XCA8* W@z39 $%:uj KaH%a!Mission Per BenKil there are 3 most critical features reporting team should concentrate on and provide solution for Xe launch: Subscribers  churn and subscription tiers usage. That information will help executives analyze the business.  Help marketing target different audiences.  Provide real-time reports about XBL service usage  System philosophy and main pillars Data warehouse should be maintainable. Data should be partitioned vertically (by time) at least, horizontal partitioning should be considered as well (final decision should be made based on system capacity analysis). Table size of an individual table should not exceed 10M records. How long we keep raw data? How long we keep aggregated data? What is the purging mechanism? Shall we archive data into a separate location and keep it available for longer time? How are we going to retrieve the data from archived location?  Automatic purging process should remove the data from the main reporting database. Based on data nature it should be permanently deleted or archived to different media. Reporting should add minimal load to Production servers. To minimize load created by reporting system on Production servers  all memory and CPU intensive operations should be handled by reporting servers.  Reporting system should track timestamp for every data source. At any given time it should know what data have been collected so far. In general daily processing should not start until all required data have been collected. If the data is missing due to service maintenance or outage, then processing of partial data available should be possible. Reporting system should have knowledge about actual status of every server. If the service goes offline for maintenance, reporting system should not expect any data coming from that particular server.  Shall we define a certain timeout (that could be configured) after which the processing starts regardless of availability of all collected data? It should be possible to rerun daily processing for certain day or range of days in the past to fix specific report(s) for specific date(s) without touching unrelated reports for the same time range. Reporting system should handle gracefully input errors. If a server generated specific input line that does not comply with a predefined format, the system should alert about invalid input and continue execution (as opposed to invalidating an entire batch of data received from that server). In many cases data generated by production server should undergo filtering by reporting system. That transformation should be schematized and configurable. Addition of new fields or even new type of server to collect data from should require configuration change at most and not writing a new parsing/filtering module.  SQL does not naturally support translation from/to local time to GMT.  All XBL servers use GMT format. To avoid inconsistencies the data in reporting system should be stored in GMT format. It should be possible to present data in PDT or other time format for end users.  To make reporting system scalable, it should be possible to split daily processing between multiple machines.  Regardless of current processing state, an end user should be able to view reports 24x7. A separation between machines in charge of daily processing and in charge of data querying should be considered.  Those 2 types of servers could have different indexes optimized for the type of operations performed. Users who need access to the reports could or could not have access to the corpNet. Today external partners receive their reports via e-mail.  Shall we continue with that delivery mechanism? Shall we setup a web site that our external partners can hit whenever they need the data?  It is extremely hard to send a data feed for 3rd party companies who do not have access to the CorpNet. Do we plan to send data feeds to any 3rd party company in the future? The system should provide 2 types of reports: historical and near-real time. Data set completeness is critical for historical reports. Timing is critical for near-real time reports.  Reporting system upgrade and release schedule should be the same as for the rest of XBL service. However it should be possible to have a separate release schedule. It should be possible to upgrade reporting system without touching core components of XBL service. That means that data collection and processing could be changed without modifying service bits.  All reporting system components should have a failover mechanism. It is unacceptable to stop processing due to h/w failure, etc. It should be possible to monitor daily processing status and statistics. The system should warn about unexpected data pattern change. E.g. suddenly the number of new subscribers that averages at X is 0.01% of X for the current processing day. That might indicate a bug in the system. Proper perf counters should indicate processing rate and volumes. Reporting dev team should implement the solution and not be involved in ongoing maintenance and support issues. Ops should have personal responsible for reporting system maintenance and support. Ops should be involved at the design phase and define tools required to run reporting as any other services. What team is going to develop those tools? One of the tools required is updating static data that comes from sources other than datacenter. An example would be broadband providers IP ranges. Currently, whenever new IP range added, a manual intervention required to update BroadBandProvider and IPRanges tables. Current reporting system has valuable data that should be migrated to the new system.  For what type of reports it is interesting/ necessary to separate Xbox1 from Xe users? What tools/technologies to use for the front end? It should be possible to perform add hoc queries and setup recurrent data feeds for various marketing/financial groups. The system will generate hourly, daily, monthly (fiscal and calendar month), quarterly (fiscal and calendar quarter), annual (fiscal and calendar) and LTD aggregations. Does anybody care about weekly aggregations? Current system complies none of the requirements mentioned above. It cannot scale to the sizes and dimensions required for Xe timeframe. <Add more explanation here about why we cannot continue using existing reporting solution. Short answer is  it won t work How do we deal with reporting schema upgrades or maintenance procedures? How do we make sure that we are not missing data processing during those upgrades?  System capacity and perf requirements Subscribers: Total number of subscribers: 1.8M today, estimated 10M in 5 years Daily new subscribers:   today: 5K-25K for the last month, estimated:  to reach 10M subscribers in 5 years daily increase should average at 4K daily, let s peak it at 50K How often subscribers migrate from one subscription tier to another or perform any action that changes the status of their account?  Let s assume 50K transaction/day for the new users and let say 5% of all existing users (that is 500K) change their subscription status daily. How does the points system add to this equation? XBL service metrics: Daily unique users: today 520K, estimated 4M Daily sessions played: today 2M, estimated 16M Daily users: 4M users play in average 4 games = 16 M daily sessions Peak hours are: 5pm PDT-12am PDT Off peak hours are: 12am-8am PDT.  Current usage ratio between off peak hours and peak hours is 1:5-1:10. That means that in 7 peak hours we should receive a little bit less than 50% of the traffic, that means 7% of daily traffic/hour = ~1.12M/hour = ~350 game sessions/sec. Content download daily: today download 60K, referrals 31K, estimated download 600K/referrals 310K per day.  Data transfer between corpNet and DataCenter.  Design proposed in this document assumes that entire reporting system resides in the datacenter. The biggest open question is how to expose data to the end-user. According to ops team it is not possible to have a middle-tier network that connects between the datacenter and corpNet. We need to find a different solution to that problem. Here are scenarios when data should be retrieved from or push into reporting system. Absence of reliable data exchange mechanism between corpNet and Production will make reporting system unusable. Internal MSFT and external users (TBD) should be able to view various reports  SPG data feed should be transferred from corpNet to Production and imported into reporting system. Frequency: once a week. Estimated size: up to 30G Recurrent data feeds should be retrieved from reporting system and delivered to partners inside and outside of MSFT.  Today s examples include various CIQ  data feeds ( frequency: weekly, estimated size:  700M, from reporting system to a corpNet share), Loc Bui data feed ( frequency: bi-weekly, estimated size: 10G, from reporting system outside of the company),  marketing data feed ( frequency: weekly, estimated size: 20G , from reporting system to a corpNet share) Ad-hoc queries. Run a query on a reporting server, send results to marketing, finance or other groups. Data size and frequency could very.  A copy of the full reporting system should be available in test environment for testing, investigations, etc. Ideally daily, at a minimum weekly Send daily reports to the publishers  Existing reports New reports Financial requirements SPG data feeds Near real time reporting Data collection from XBL service Reporting system relies on numerous sources of information that should be combined, matched and processed together. Sources for reporting data are as following: Production databases.  Full set of databases and tables will be dictated by the features to be implemented. That should be defined in Xe PM spec. Data from the following databases is collected today: UODB, XProfile, WebDB.  For Xe we will need data from UODB, WebDB, catalog DB at least. Reporting server should have access to ConfigDB to retrieve data related to system topology and configuration.  To retrieve data from Production databases the following methods are available (listed in the priority order from best option to worst):  a. Replications b. Log shipping c. Production databases polling Activities tracked by production servers other than databases.  Today we collect servers  application logs from the following servers: Logs: PRES: (logs are copied from tukprpresinhXXX)  Lines including |KIA| only SPS: (logs are copied from tukprxuaciisXXX)  Lines including |CreateAccount| only XBOS: (logs are copied from tukprxbosiisXXX)  |904|CONTENTREF| FDBK: (logs are copied from tukprfdbkiis and tukprmessiisXXX)  Filter out lines including |1481375749| Look for lines including |801|FEEDBACK| CUST: (logs are copied from tukprcustiisXXX) Lines including |MAC| or |RPW| DOWN: (logs are copied from XXXPrDownIISXXX)  IIS logs STFD: ( logs are copied from SeaPrStoriisXXX) Lines including |WRF|0| or |RDF|0| WBCA: (logs are copied from SeaPrWbcaIISXXX)  Collection of applications logs is not a reliable source of information. Currently there is no way to track completeness of collected data set. The logs are at least 2 hours old when they copied to the machine that is in charge of reporting data collection and filtering. Since real time reporting is one of the 3 requirements that should be fulfilled, generated data should be entered into reporting system and processed as fast as possible.  See following section  Collecting data from production servers  for production servers  data collection  Performance counters (not collected today). For real time reports it could be a good source of information. Investigate if it helps or complicates the matter Events fired by production servers will not be collected. Any information contained in events and relevant for reporting should be available through other channels. Number of dependencies makes reporting system very complicated and challenging to maintain. Database includes user ID in XboxLive world and servers have knowledge about that particular user activities on XBL service. Only combination of those 2 sources can give a complete picture of users  activities on the service. Collecting data from production servers: Data should be streamed continuously from production servers to the reporting system.  To prevent additional load on production servers minimal or no processing at all should be performed on production servers themselves. It should be possible to throttle reporting activities on the production servers. Throttling should be configurable and reporting system should be able to deal with partial data.   For data collection from production servers 2 new entities are introduced:  Cleansing service and FilterDB.   EMBED Visio.Drawing.11   Cleansing server contains a set of filters. A filter is responsible for cleansing and transforming data uploaded from a production server. Each filter knows how to transform uploaded data generated by a production server into format suitable for reporting. One filter corresponds to one core XBL component the data should be collected from.  Thus if there are 4 presence INH machines, 4 instances of presence filter will exist on the cleansing server.  For cleansing feedback logs, a feedback filter will exist.  A filter receives new data from a core XBL component via TCP/IP. For that purpose we are going to utilize xmgmt infrastructure. A new xmgmt target type called reporting will be defined. Utilizing xmgmt infrastructure gives us a flexible way to push more data to reporting servers without changing core XBL components. Thus if after launch we find out that useful information presents in a trace statement, we just need to associate particular xmgmt area with xmgmt reporting target and additional data will be uploaded into reporting system. Xmgmt reporting target should be able to handle intermittent TCP failures and make sure that all data is safely uploaded to the cleansing server.  Fundamental assumption of this architecture is core XBL service can establish (and maintain) a reliable TCP connection with Cleansing server. Since both machines resides in our datacenter, that assumption should be valid.   Upon receiving new data from core XBL component, the filter applies transform, batches cleansed data in memory and bulk inserts it into corresponding raw tables (aka as Fact tables in OLAP). The number of cleansing servers should be determined based on system load. Multiple cleansing servers can simultaneously filter the data.  Raw (or fact tables are replicated into reporting DB). At that point data is ready for reporting processing. Reporting service runs on the machine where reporting database resides. It peeks up replicated data and manages all necessary processing. Reporting service generates data that an end user can retrieve. Reports themselves could be viewed via web site. Web site for reports will be built using SQL server s reporting service (Rozetta). Investigate other options for front end applications (low priority for Xe launch). Reports will be exposed to internal MSFT employees only. The web site will be ACLed based on IP range of corpNet addresses and end user will need to present his/hers corpNet credentials to access the site. Security policies for that web site should be consistent with other XBL datacenter components of similar nature (e.g. authoring web site for xbox.com).  Open issue: do we want to expose subset of reports to external MSFT partners?. Bandwidth, security complications  Content download servers: Content download servers are pure IIS servers. Currently IIS logs are collected and processed by the reporting system. We do not have control on how IIS generates the logs and how often it rolls them over. ISAPI filter should be implemented.  That filter will intercept a request and will record only necessary data from the http request. We ll use same xmgmt infrastructure to log the data. Thus data collection from content download servers will be identical to the rest of production servers. Content download servers could reside outside of the datacenter. Investigate with ops how to stream the data into reporting servers from content download servers residing outside the datacenter. Xmgmt reporting target Message  opcode Value When the message is sent RPT_CONNECT First message to be sent from core service to cleansing server RPT_DATA Upload data RPT_ALIVE No data to upload, keep alive message for cleansing server to keep track of what data is available so far RPT_DISCONNECT Component stops sending data to the cleansing server. E.g. ops have changed configuration of the component and it uploads data to a different cleansing server or reporting target for the component is disabled RPT_SHUTDOWN Component in the process of  shutting down Cleansing server Cleansing server is in charge of managing data coming from production servers. It handles all servers except of production databases. Cleansing server receives data from a production server, applies transform and filters incoming data, caches data in memory when needed and updates raw tables. Raw tables are replicated to the central location called reporting server.  Cleansing server keeps track of data uploaded by each core XBL components. It alerts if no data has been uploaded for more than configurable time interval by specific filter. Cleansing filter alerts when its  client disconnected. Cleansing filter reject data posted not in chronological order and alerts about data inconsistency. Different filters could have different policies on how much data is kept in memory and how often raw tables are updated. Column name Remark si_server_id smallint Internal id for enumeration Presence filter When user STRT|AuthData|ulSessionId|bIsMultiPlayerMode END|AuthData|ulSessionId|bIsMultiPlayerMode gdW<z gd%]4 gd%]4 gdW<z gd`]z gd`]z gd`]z gd`]z gd`]z gd`]z gd`]z gd`]z
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\reporting\Xbox Live Reporting - Final.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Network design standards Ken Riesen Microsoft - Xbox Live Operations  PIX Implementation  Title _PID_HLINKS MultipleFS Operations PIX Implementation  Ronaldr  Normal.dot Kim Amsberry Microsoft Office WordjJF:r~t @5TfI 1VPm~ @\\prn-corp1\mild-3187-a Ne02: winspool Xerox Document Centre 255 PSmEALw /0<!^ K?U][ Zz&!uyo exNe1 9rD9z =LqKY8 -_Onjq7 X;t^kG9 mT>vW< ?i91, nFX^8 "4TjM I"Dz2} g-Q6j MY$wgp Y_p-{ oD~_dx o#jD~_d  jD~_d |od8,d8  jL~_dx uBkw]< 3P{SM 7g|gj >E4&8 f4N)X 8Qf'* ~^m~B. BSH@J W96o! 0?h>s =/omi D66hK ;Vr#CK m42 _ wQ}A} ~ex~~ Y/qB/z fTG+K1 b.0r> (V_0gq XO_`w -nm$' 'cPhd x}p`H })odX#dX %XCcB DW6CS <?2Em A'>l~ Y^]}#/ Q9Q.6 -y{%n 5oLV; O|-;9 Ct$O_E z}ximfV cmPPJCmp0712 IDATx^ AXEE| [Urrru MWV''x ZA(// JM(H4 `,0YZ ~4_%I. ?q--. VP(/) (o5:7Yk =p5nwf YQ$to hu`tZ( Wfi-F Zl[TZ^ {F2UlEy Us@qK> ,\8GM] [pige M|v<A Pm#bb &tu{zT UdaZ2 ylhvb g.L#3 1"5[H _[f\O y3-U} `B~Zi K/B/AlA1Z Q,7^a5 mQ,#+ x@6[hZ SSGsP Io2Ef s0h`D$ "8TkO x*e`y C*!lS  Fr7r ^lZP\ M:uJ% ;+1rA Ct$O_E z}ximfV cmPPJCmp0712 IDATx^ AXEE| [Urrru MWV''x ZA(// JM(H4 `,0YZ ~4_%I. ?q--. VP(/) (o5:7Yk =p5nwf YQ$to hu`tZ( Wfi-F Zl[TZ^ {F2UlEy Us@qK> ,\8GM] [pige M|v<A Pm#bb &tu{zT UdaZ2 ylhvb g.L#3 1"5[H _[f\O y3-U} `B~Zi K/B/AlA1Z Q,7^a5 mQ,#+ x@6[hZ SSGsP Io2Ef s0h`D$ "8TkO x*e`y C*!lS  Fr7r ^lZP\ M:uJ% ;+1rAMicrosoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11EMF+0@ EMF+*@ EMF++@ B_pCC B_pCCE B_pCC EMF++@ $}BWbYC $}BWbYC lBWbYCC lBWbYC&qwB pIC&qwB C\BWbYC C\BWbYC KBWbYC, KBWbYC l4BWbYC l4BWbYC BWbYCE BWbYC B3xRC B3xRC. q=1Z<; EMF++@ CPC_T EMF++@ 51=dX EMF++@ EMF++@ P#Bc(XC P#Bc(XC 3333332 4UUUUV2F EMF++@ OCfs&BDVMCfs&BDVMC OCfs&Bz OCfs&Bz OCfs&Bz OCfs&B EMF++@ 8B9hUC 7:B;hUC EMF++@ >B)?WC >B)?WC OB)vPC OBDfXCS OBDfXC^ `SBK}PC #Egwww """"""""" EMF++@ 2'B(=SC (B(=SC [UCLPCB6 WCLPCB6 [UCLPCB! eUBDfXC eUBDfXC EMF++@ %>fff EMF++@ EMF++@ B_pCCE B_pCC EMF+*@ EMF++@ >@dc? EMF++@ BEt0C p7C ^ EMF++@ e)CxN e)Cf? $*Cf? $*Cf? $*Cf? $*Cf? B[~+C B[~+CxN B[~+C B[~+C q=1Z<; EMF++@ EMF++@ BAn-Cc BAn-C BAn-C BAn-C BAn-C @.CR" BAn-C 51=dX EMF++@ BAn-C BAn-CS BAn-CS BAn-CS BAn-CS BAn-C EMF++@ EMF++@ EMF++@ B#3333332" EMF++@ EMF++@ EMF++@ B#O0Ci rB#O0Ci rBKE3CO BKE3CO rBKE3Ci %>fff EMF++@ ;/C~a ;/C~a BDY1C~a BDY1C~a BDY1C v3C~a v3C~a EMF++@ EMF+*@ EMF++@ EMF++@ EMF+*@ EMF++@ EMF++@ =@c]? EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ C)\gA3 EMF+*@ EMF++@ {TIC3 CHARC3 CHARC33 C{TIC3c C{TIC3 CHaJC3 HaJC3 CHaJC3c CHaJC3 CHaJC3 CHaJC3c .1C3c {T4C3 :GC3S C{T4C3S C{T4C3 {T4C3S DDT>UU EMF++@ :2C3c EMF++@ CM5=Cl CM5=C B'=xq B'=B7 EMF++@ C:3=C C"\>C C"\>C C:3=C EMF++@ Cf&=CE Cf&=C Cf&=C EMF++@ """"""0F EMF++@ {4<C3 ';C3; C{4<C C{4<C3 C{4<C3 C{4<C3 C{4<C3 EMF++@ m7CX4 CK;?C aACX4 aACX4 m7CX4 eC #EgwweC #333333 " EMF++@ EMF++@ C>m?C3; C>m?C EMF++@ z7C3# {T4C3s C]F:C3s C]F:C` C{T4C` C{T4C3s C{T4C C]F:C C]F:C C{T4C C{T4C C{T4C C]F:C C]F:C$4 C{T4C$4 C{T4C C{T4C C]F:C C]F:C3+ C{T4C3+ C{T4C C{T4C C]F:C C]F:CB" C{T4CB" C{T4C C{T4C$| C]F:C$| C]F:CQ C{T4CQ C{T4C$| C{T4C C]F:C C]F:C C{T4C C{T4C {T4C3s EMF++@ EMF++@ :2C3c .1C3c CHARC3 CHARC3 C{TIC3 EMF+*@ EMF++@ EMF++@ CFa C CIa C CFa C CIa C CFa Cg& 7<Cg& EMF+*@ EMF++@ EMF++@ EMF+*@ EMF++@ EMF++@ >@X,? >@xB? EMF++@ >@j]? EMF++@ ?@@4? EMF++@ CHa C EMF+*@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ 5hB_p1C 5hB_p1C)Microsoft Corporation Page-1 Server Boundary Communication Link Process Datastore Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESNataly Pogrebinsky Nataly Pogrebinsky Microsoft VisioVisio (TM) Drawing >S@#B: F' @% 8,W,8?; d,A(w (?18}: /ML0% ?}O9?K? iE_(- o(_:_ ]7d2O( 7oIo[omoT?t W_i_{_q  ?2?D9 g?(y? */</N/ X_j_N ?\OnO O"O4OFO R/d/v/6U ?!?3? OB_$O /#o5oGos _Bl|%| P?b?` TOfN9) 7+=F/ l40c<0t"40o l^!$L 0#)@8 xs[re pv"mpd tdhege Rmp@qs `Hu k r!r!T u3pa" `t{ lq f%'o# Pr+rd{  N{ Gm f%.!r  PEp!r uj.?V&P pHuv? `pqf? ^ OV&@ SqriEpZq^O pO3%V *]B{  `napJ_ 1pa4mmpny o-dHQ "pqrj n@22U  v10d )(lEP  %lN+_ 5OGOYO #M[f> o-o?oQocouo Ej<[O 0f 3B R cP o X"I!rL  !aX i   P(s x eP v ?s4l> _WO7_{N E\F@3_wOW_ Ej<[O  `bsd W@cU@o ]BNArQ@ Aa]@i @ UHs Be*}@eU@v MbY"WbM v%o1e P_~Dh Ej<[O E[<LO[ n@W22  v10d )(lEH  %lN+_ 5OGOYO o-o?oQocouo #7#2N U0Q03k M=0c;0 s50fC241r 70p1aC0i50n 0U ;8s 2ec0e;0uv E@5"[bF9_}O]_4h>[O  M{ c.y o  is n   y(s H'X:A E>Er4sO 0Q03k uM=0c;0o s50IfC241r70p1aC0 0 ;8s 2Uec0e;0v ?@fb8 M=0c;0o 50fC241r70p1a C0i50n 0 ;8s 2ec0e;0v #7#0O M=0c;0o 50fC241r70p1a C0i50n 0 ;8s 2ec0e;0v  v)0d "O8OJO\M )o;oMo_oqo %kUUU )  2d  K!ua .  _  (Usj"e> e QA?OQE OERUO Ul;0  (s?2e  vQ0d30 (s/2Ue  vA0d#0/ )#o)| (s?2e  vQ0d30 OfZp+ (Us/2e 8sT2Ue(0e 0vf0dH0/ }DC~W  v-0d^ %(BhE ET5hN'_ O1OCOUO o)o;oMo_o 8sW2e+0e 0vi0dK0 _Lgla /'/9/K/ ?0?B?k& ?9?K6 @HAua HUsgBe;@e @vy@Qd[@ CiATA Cc@u:;@t}B AR%TA (( )Y 2: W0 fW"H!rTK  !aW iI n& ] Y A   O(Us  eO v  Qd&  (G@)x@2 @3x@M9@cL0oN;@o fvBgArj@ Aav@ih@nE@  @ nHs Be;@eL0v m#pO2 UlC   ]n7"r Urc0gX (q0])o 0oe0o 0no0 o 9$#D1 ;#%{@'& !(}-*!0 gY_?#q_ C&^/n E9kok_ <1[E<1xm 0aq0t 0dc0n 1JCPU"42GH GFbe"> E""44GF E"45GF "46GF %">x%"> GOF3z "o4b"6tR tc!=b| 8g{]b 18QJGq KK8Lu T\u`q 2a2aQ" 2^1^1 uYQGq @V^Cy X/zZD /*/</ Z?f?x? O'O9OKO]O o)o;o Mo_o3 /E]:&. X?E]z6b O0OBOTOfOxO _.o+_ @mb~ao H"f+J # ^Ss "%}+%u $,u4. bF/X/j/|/ -3OEOWOiO{O _ _2_ D_V_h_z_ 5(O:JHP!V1+ 6?H?Z?l?~? [!jo|j ##~OU O+O=OOOaO G_Y_k_}_ /@-/?/Q/ ?4;1J9 gZ5[kEX 5Gy.P +g[oI:8 Qv1{L 1J9v1v5 "/3P3T @BjH;uQ o.o@e $!~eV `Q`Qe a9rn; 8X/4S S1iqJ @V^Cy I/[/m/ q-O9OKO _0_B_T_f_ \oCoUogo`l m%R/d/v/ ?bO_? ?@Fy)` La(:W up_U@ V[\ipo  o2oDo@ 70?B?T?f?x? _EQ,2_D_V_hX Tozxqo .%\/n* 7N#IO _/_A_ ;/M/_/q/ 9_`fV o*o<o q5g8w z7)W@ Ky8)W Gyb0t 599MI? H.!.!E /&/8/J/\/ O%O7OIO _1_C_U_g_y_ C~W-pZg id<eo  /2/D/w _+_=_ O_aQ| ?@fb8 ;oMo_oqo Rq_AN ejKK[ L?^?p?l /:O9$C5/ G/q!,^/p/ Sh&?`3f <Rw?@ 2)_;_M_ 7?PI?[?q ~HwDNA  ^60%H ?eOwL O"O4OFOXO /S_e_ $o6oHoZolo~o ?*~6< /,/>/  ?2?@D?V?h?z?8OI (o:oLo^mhf mFdO/^ ?Y Q  i'D*A -A^*/S #8q $ Ud&`d /(/:/"zxT ,q9rv u[@`u(  2E8_ o ?2? RT?f3 9OKF" %o7oIo[omoXbox Live Reporting TITLE  \* MERGEFORMAT  DOCPROPERTY "Type"  \* MERGEFORMAT  Document Information: Filename: Author: Kim Amsberry Created: 10.December.2004 Revision: Revision Date: Last Saved By: Related Documents: TsunamiReportingSystem.doc by Nataly Pogrebinsky (NatalyP) Revision History AUTHOR DESCRIPTION 14.Dec.04 Kim Amsberry Document Draft Lead Review & Acceptance Completed (Y/N Comments Quinn Scott Shawn Table of Contents  TOC \t "Heading 1,2,Heading 2,3,Heading 3,4,Heading 0,1,Appendix 1,3"  Document Information:  PAGEREF _Toc91323305 \h  Revision History  PAGEREF _Toc91323306 \h  Lead Review & Acceptance  PAGEREF _Toc91323307 \h  1. Document Scope  PAGEREF _Toc91323308 \h  2. Service Description  PAGEREF _Toc91323309 \h  2.1 Collection of Data from Xbox Live  PAGEREF _Toc91323310 \h  2.2 Processing Data on CorpNet  PAGEREF _Toc91323311 \h  2.2.1 Example of Successful Completion  PAGEREF _Toc91323312 \h  3. Alerts, Errors and Actions  PAGEREF _Toc91323313 \h  3.1 Alerts  PAGEREF _Toc91323314 \h  3.2 Errors  PAGEREF _Toc91323315 \h  4. Monitoring and Actions  PAGEREF _Toc91323316 \h  5. User Impact  PAGEREF _Toc91323317 \h  6. Communication & Expectations  PAGEREF _Toc91323318 \h  7. Resolution  PAGEREF _Toc91323319 \h  Document Scope  This document provides a high-level view of the Reporting system, along with XOC escalation/notification, troubleshooting and support information. This document is not intended to be an in-depth look at the Reporting service. For that, please see the service spec at XXX. The spec is in source depot \\depot\xonline\main\private\doc\reporting\ TsunamiReportingSystem.doc. Is there a good place accessible by the XOC team? Service Description Xbox Live s Reporting service is the way we provide information to internal and external audiences on the popularity of the service. Internal teams, such as Account Management, Operations and Marketing, access the internal Reporting web   HYPERLINK "http://xsrptiis01.redmond.corp.microsoft.com/reports/Pages/Folder.aspx"   to see how many users connect to Live during a given period of time. The data at the site can be queried by a large number of parameters. Publishers receive daily emails that give them details on the popularity of their titles, the number of content downloads, or the amount of  bounty  money due to them. Xbox Live is legally bound to provide this information to our business partners through the contracts we sign with them. This makes the Reporting service even more important. Collection of Data from Xbox Live There are two main components of the service   the collection of data from the Production databases and the processing of that information on CorpNet. All data collection is done in the Tukwila data center. At 0700 each day, a SQL job called  Copy and Restore DBs  is automatically executed. This script copies the database backup file from WebDB to the DMG server. Once that copying work is complete, the script restores WebDB. UODB partitions 1-4 and XProfile partitions 1-7 are synchronized with corresponding production servers by using SQL log shipping mechanism and a set of tools developed by MatMak on top of it. After copies of all required databases are available,  Copy and Restore DBs  SQL tasks execute step 6, that is script (UploadOneDay.js). This script performs six important steps: Exports tables from UODB, XProfile and WebDB; Retrieves logs and filters information not needed for Reporting; (LogVault is responsible for transferring the files to the DMG server.) The script checks all necessary log files availability of DMG server prior to collection. The script waits until all logs are available. Filters data from Feedback, Presence, XBOS, SPS and XPNF to avoid transferring irrelevant data; Renames the log files and packs them into one large file with a file name of F:\Reporting\prodscripts\done\<machine name><component name>log<time range>; Zips the log files;Resulting zip files are temporarily placed in 2 following locations: f:\reporting\prodscripts\zips   8 zip files for the logs f:\reporting\prodscripts\dbs   4 database zips files Copies the zipped files to the HST server. f:\reporting\prodscripts\zips\*.zip are copied to e:\xonfud\reporting\download\today on HST f:\reporting\prodscripts\dbs\*.zip are copied to e:\xonfud\reporting\download\dbs on HST The very last file to be copied from f:\reporting\prodscripts\results.txt to e:\xonfud\reporting\download\today on HST.  All zip files from F:\reporting\prodscirpts\zips and f:\reporting\prodscripts\today are deleted after copying to HST The HST server is the staging machine   the link between Xbox Live Production and Microsoft s CorpNet. No processing is done on this server. The last file copied to the HST machine is results.txt. The existence of this file on HST indicates that all log and DB files are collected and ready to go to CorpNet for processing.  EMBED Visio.Drawing.11   Processing Data on CorpNet Two servers on CorpNet process and display the Reporting data. XsRptData01 is the database server that processes the received information and runs SQL stored procedures. XsRptIIS01 runs the web service that provides a GUI interface to the reports.  At 0600 each day, the script DownloadAndProcessOneDay.js kicks off the processing. It looks for the file results.txt on the HST server, and when it is found the data on the HST server is securely copied to the XsRptData01 server on CorpNet. The full list of downloaded files: Databases: UODB non-partitioned tables in uodbnp-c.zip UODB partitioned tables in uodb-c.zip XProfile tables in profiledb.zip Webdb tables in webdb.zip Logs: PRES: (logs are copied from tukprpresinhXXX)  Lines including |KIA| only SPS: (logs are copied from tukprxuaciisXXX)  Lines including |CreateAccount| only XBOS: (logs are copied from tukprxbosiisXXX)  |904|CONTENTREF| FDBK: (logs are copied from tukprfdbkiis and tukprmessiisXXX)  Filter out lines including |1481375749| Look for lines including |801|FEEDBACK| CUST: (logs are copied from tukprcustiisXXX) Lines including |MAC| or |RPW| DOWN: (logs are copied from XXXPrDownIISXXX)  IIS logs STFD: ( logs are copied from SeaPrStoriisXXX) Lines including |WRF|0| or |RDF|0| WBCA: (logs are copied from SeaPrWbcaIISXXX)  The following actions are performed on XsRptData01: Download database files to e:\reporting\fromprod\reporting\dbs Download logs to e:\reporting\fromprod\reporting\today Count downloaded files. There should be 8 logs zips and results.txt and 4 database zip files. Abort the process if all required files are not present Move all files to e:\reporting\zips Execute UpdateDBS.cmd-import database zips into Xreport3 database Extract log files into e:\Reporting\Transformer\work, remove files that are outside of the processing day boundaries. Every day process uses yesterday and the day before yesterday logs. Execute TandL.cmd that imports log files into Xreport3 Delete e:\Reporting\Transformer\work\* Execute MoveBcps.cmd Execute WorkflowForDateRange.cmd All daily processing activities are logged in e:\reporting\result_<dateTime>.txt file on XsrptData01. That file represents current activities on the reporting server. Daily processing is completed when the end of that file includes the following line  Daily report process complete.  Elapsed time = XXX minutes. Example of Successful Completion An example of successful run would be: 13:44:51:      13:44:51:277:                      Completed: Daily Trials Users Processing 13:44:51:      loop 13:44:51:       ReportingIncomplete  13:44:51:       -------------------  13:44:51:                         0  13:44:51:       13:44:51:       13:44:51:       13:44:51:       13:44:51:   13:44:51:  Daily report process complete.  Elapsed time = 464.84496666666666 minutes. An example of unsuccessful run would be  7:50:10:      07:50:09:990:                      Error occured in p_PreScanRawTables. 7:50:10:      Aborting daily processing. 7:50:10:       ReportingIncomplete  7:50:10:       -------------------  7:50:10:                         1  7:50:10:       7:50:10:       7:50:10:   7:50:10:  ERROR: (505) Error:Workflow for date range ended unexpectedly. 7:50:10:  Executing command "cscript.exe //NoLogo e:\reporting\SendSMTPMail.vbs "xonrpt@microsoft.com" "xonrpt@microsoft.com;xoc@microsoft.com" "XSRPTDATA01: Daily Processing Stopped" "DownloadAndProcessOneDay.js ERROR: (505) Error:Workflow for date range ended unexpectedly."": 7:50:10:   7:50:11:       7:50:11:       7:50:11:       7:50:11:   7:50:11:  Daily report process complete.  Elapsed time = 110.17458333333333 minutes. To read more about the Reporting system, get the Reporting Spec from NatalyP. Alerts, Errors and Actions The following alerts and errors are generated by the Reporting service. These are color coded to help the XOC quickly identify any action they may need to take:  Error that is causing the Reporting service to fail or is impacting users. Follow the directions to alert the developer or fix the issue. Errors in this category have an ID range of 500+. Yellow   an alert that is causing problems but is not causing the Reporting service to fail. Alerts in this category have an ID range of 100-499. Green   Alert that shows successful completion of a task. Alerts in this category have an ID range of 0-99. The absence of these alerts indicates a problem. Alerts Event Text Event Definition XOC Action UploadOneDay.js starting.  Production side processing starting. TukPrInfrDMG01 This event should fire within 15 minutes of scheduled start time. If not, check to see the SQL job exists and has the correct credentials. UploadOneDay.js done. Production side processing completed. TukPrInfrDMG01 This event should fire before 0800. If not, check to see 8 log zips, results.txt and 4 DB zips are located in the upload directory. DownloadAndProcessOneDay.js starting.  Results file =  <full path to file> CorpNet side processing starting. XsrptData01 This event should fire between 0600 and 0615. If not, check to see the scheduled task exists and has the correct credentials. DownloadAndProcessOneDay.js:  Done. CorpNet side processing ended. XsrptData01 Ideally, we could perform an action if this event doesn t fire, but not until we get daily processing more consistent Completed database export. Production side: Completed DB export This event should fire within 30 minutes from scheduled start time. If not, check the databases for possible corruption. Finished downloading files. CorpNet side: Completed file download XsrptData01  This event should fire before 0900. If not, check the download directories for existence of files. If files exist, the connection is slow; if not, the connection does not exist to Production. All logs are ready for collection. Beginning log packaging. Production side: LogVault is ready XsrptData01 This event should fire before 0800. If not, run the stored procedure  p_XR_GetMissingLogNames  in the LogVault DB to determine which files Reporting believes are missing.  Errors Event Text Event Definition XOC Action ERROR: (<errno>) <errname>: <errormsg> Generic script exception Unhandled error. Contact dev. Invalid number of arguments specified. Invalid number of arguments specified. This should not occur unless the script was updated without updating the scheduled task, or the scheduled task was changed. Please specify /date parameter in MM/DD/YYYY format Invalid date format. This should not occur unless the scheduled task was changed. DownloadError: Did not download expected number of files Mismatch in number of files downloaded and expected. Not all files were copied successfully. It could be a disk space problem on DMG or HST box. Check location and existence of zip files There should be 4 database zip files. We don t have the correct number of database zip files. Database export failed. Usually it indicates a problem with SQL log shipping streams. Check log shipping and restore tasks. Go to Query Analyzer and check that UODB1-UODB4 and XProfile1-Xprofile7 are not grayed out (i.e. inaccessible) on TukPrInfrDMG01. Workflow for date range ended unexpectedly. Our main workflow stored procedure has ended with an unexpected result. Contact dev. Monitoring and Actions The three servers in Production that require monitoring from the XOC for Reporting to run correctly are TukInfrPrDMG001, TukInfrPrHST001 and XsRptData01. These are the areas to watch on each of those servers: TukInfrPrDmg001 Monitored Subject Failure Severity XOC Actions SQL job  Copy and restore DBs  till step 7  Log file prep (inclusive) Critical Identify the cause and fix it ASAP. If necessary, contact NatalyP. Free disk space on drives h:, o:, f: Critical Each drive should have at least 20G of free space. If less than that, take steps to reduce file size on the drive or open a bug to get additional space added. Databases should be in a healthy state Critical if UODB1-UODB4,XProfile1-XProfile7, WebDB are invalid or inaccessible Find the cause, contact MatMak if necessary Standard hardware health tests Critical LogVault removes old log files from drive f: Critical if drive F: has less than 20G of free space If XOC is unable to resolve the issue, contact NatalyP. TukInfrPrHST001 Monitored Subject Failure Severity XOC Actions Free space on E: drive  Critical if running below 2G Clean the drive Standard hardware health Critical Network monitoring XsRptData01 Monitored Subject Failure Severity XOC Actions Mail with subject  Daily Processing Stopped  is received by the XOC The most critical Call NatalyP ASAP during business and non-business hours. Standard hardware health Severity depends on the nature of the failure Send an e-mail to xonrpt@microsoft.com. Notify if down time is required to fix the problem. Network monitoring Critical Notify NatalyP if downtime is required to fix the problem. Drive O:, H: is running low of disk space Critical when there is less than 50G of free space Open a bug, assign it to NatalyP SQL job  Bi weekly   Mon/Thu- Full Backups  task Severe Open a bug, assign it to NatalyP. SQL job  Daily Differential Backups  task Critical Open a bug, assign it to NatalyP. SQL job starts with   in their name. XOC will be notified about new tasks added Severe Open a bug, assign it to NatalyP. Scheduled task starts with   in their name. XOC will be notified about new tasks added Severe Open a bug, assign it to NatalyP. User Impact When the Reporting service doesn t perform as expected: Reports are not sent to external partners (game publishers) as agreed to by contract; The internal Reporting web site (  HYPERLINK "http://xsrptiis01.redmond.corp.microsoft.com/reports/Pages/Folder.aspx"  http://xsrptiis01.redmond.corp.microsoft.com/reports/Pages/Folder.aspx ) does not have information for the latest date; Inaccurate information is used by internal audiences (number of new accounts, downloads and unique users, for example). XOC and development staff are pulled away from other work in order to fight fires and revive the service. Communication & Expectations When a Reporting issue is discovered by the XOC and action is needed to correct it, a Product Studio ticket needs opened to track the work. Once their investigation is complete, they need to send mail to the xonrpt alias or call NatalyP, depending on the situation. If the Reporting team needs the XOC to investigate an issue or perform an action, someone on that team needs to open a bug to track the issue, using the Reporting template. Once the bug is completed, send mail to the xoc alias.  Going forward, the XOC will be responsible for getting Ops War approval for any scripts that need re-executed in the Production environment. For tasks the XOC commonly performs, they will get a bug to track the issue with standing Ops War approval. In the bugs tracking the work, both the XOC and the Reporting dev need to provide a realistic time for resolving the issue. When setting the due date/time in bugs, there are two things to consider: The XOC is responsible for monitoring the entire Xbox Live service. There may be higher priority tasks or emergencies that preclude them from immediately attending to Reporting issues. The reports that go out are important to our business customers and internal audiences. Xbox is contractually obligated to provide game data to publishers. The Reporting team and the XOC will communicate with each other to establish the priority of the work that needs to be completed. Resolution The XOC will know the Reporting service is back to normal when: Data is collected without errors; Data is copied to the HST server without errors; All files are deleted after successful download.  A better indication would be to check e:\reporting\results_<dateTimeStamp>.txt on XsRptData01. A total of 12 files are present on the RPT server on CorpNet - eight logs zips and four database zip files; The processing of the data completes without error; There is a mail sent to xbldaily alias. Does XOC want /need to be on that alias? Updated information is visible via the internal Reporting web site. Any bugs tracking daily process issues are Resolved back to the originator, along with detailed description of the work performed. Page  NUMPAGES Confidential THE INFORMATION CONTAINED HEREIN IS Confidential TO Microsoft Corporation AND SHALL NOT BE REPRODUCED OR DISCLOSED IN WHOLE OR IN PART OR USED FOR ANY DESIGN OR MANUFACTURE EXCEPT WHEN SUCH USER POSSESSES DIRECT, WRITTEN AUTHORIZATION FROM Microsoft Corporation gdLW/ gdq>$ gdq>$ gdLW/ gdLW/ gdLW/ gdLW/ gdLW/ gdLW/ gdLW/ gdLW/ gdLW/ gdLW/ gd^GZ |ume]VN gdist gdist gd^GZ gdist gdcC=
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\achievements\Test\XBL Achievement test plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Pankaj Naik XBL GamerProfile Test Plan Pankaj Naik Microsoft Office WordVqPpv _"?optents  TOC \o "1-3" \h \z \u   HYPERLINK \l "_Toc96939928"  Table of Contents  PAGEREF _Toc96939928 \h   HYPERLINK \l "_Toc96939929"  Summary  PAGEREF _Toc96939929 \h   HYPERLINK \l "_Toc96939930"  Schedule  PAGEREF _Toc96939930 \h   HYPERLINK \l "_Toc96939931"  Goals  PAGEREF _Toc96939931 \h   HYPERLINK \l "_Toc96939932"  Non-Goals  PAGEREF _Toc96939932 \h   HYPERLINK \l "_Toc96939933"  Related Documents  PAGEREF _Toc96939933 \h   HYPERLINK \l "_Toc96939934"  Functional Testing  PAGEREF _Toc96939934 \h   HYPERLINK \l "_Toc96939935"  Protocol Definatio  PAGEREF _Toc96939935 \h   HYPERLINK \l "_Toc96939936"  7.1.1 WriteSettingsRequest / ReadSettingsRequest  PAGEREF _Toc96939936 \h   HYPERLINK \l "_Toc96939937"  7.1.2 SyncTitleRequest / EnumTitleRequest  PAGEREF _Toc96939937 \h   HYPERLINK \l "_Toc96939938"  Test Case Matrix  PAGEREF _Toc96939938 \h   HYPERLINK \l "_Toc96939939"  7.2.1 M3 Milestone  PAGEREF _Toc96939939 \h   HYPERLINK \l "_Toc96939940"  7.2.2 M2 Milestone  PAGEREF _Toc96939940 \h   HYPERLINK \l "_Toc96939941"  Stress Testing  PAGEREF _Toc96939941 \h  Summary Xenon Achievements is a Xenon-wide system for rewarding player progress with emphasis on individual accomplishment rather than global rankings.  It is intended to encourage all Xenon players to play more and play more deeply, online and offline. In addition, the Gamer Cred system built on top of Xenon Achievements is intended to provide a well-understood measure of accomplishment in Xenon games to Xenon Community  Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M3 Milestone:  In this milestone I will be implementing positive and negative test cases for the API s sync, Enum and Clear Achievements. titles. No stress testing will be done in this milestone. Goals M3 Milestone:  Write all positive and Negative test cases for sync, enum and Clear Achievements. Non-Goals Related Documents Achievement Spec http://team/sites/xbxe/Shared%20Documents/Digital%20Identity/Achievements%20spec.doc Functional Testing Protocol Definition SyncAchivements This API takes a set of achievements achieved by a user and updated the UODB.    Each Achievement is compared against the list of achievements a title has configured in the XLAST file stored in NPDB.    If a achievement doesn t exist in XLAST file the API returns in error. XRL DEFINATION public const ushort XONLINE_MAX_ACHIEVEMENTS        = 32; public class Achievement           public uint  AchievementId = 0; public DateTime Achieved   = DateTime.MinValue; public int   Flags         = 0; public byte  Type          = 0; public int   Cred          = 0;          public byte ImagePathLen   = 0; public string ImagePath    = "";          public byte TitleLen       = 0; public string Title        = "";          public byte DescriptionLen = 0; public string Description  = "";          public byte NextIdsLen     = 0; public uint[] NextIds      = null;          public byte ReplaceIdsLen  = 0; public uint[] ReplaceIds      = null; SyncAchievementRequest public class SyncAchievementsRequest          public uint  TitleId = 0;         public ulong UserId  = 0;         public DateTime Version = XOn.MinDateTime;         public uint AchievementCount = 0; (max =32)   public Achievement[] Achievements = null; public class SyncAchievementsResponse          public DateTime Version = XOn.MinDateTime;         public uint AchievementCount = 0; (Max=32)         public Achievement[] Achievements = null; EnumAchievementRequest public class AchievementEnumRequest          public uint  TitleId = 0;         public ulong Puid    = 0;         public ulong ForPuid = 0;         public ushort StartingIndex = 0;         public ushort MaxAchievements = XOn.XONLINE_MAX_ACHIEVEMENTS; public class AchievementEnumResponse          public uint AchievementsCount = 0; (max=32)         public Achievement[] Achievements = null; ClearAchievementRequest public class AchievementClearRequest          public uint  TitleId = 0;         public ulong Puid    = 0; Test Case Matrix M3 Milestone  TESTCASES :- Sync/Enum Achievements Valid_Sync/EnumAchievements Description: - The test will set single achievement for a user using SyncAchievementsRequest and read back using AchievementEnumRequest Verify:-the set achievement should be marked as achieved.  Valid_ Sync/EnumMultipleAchievements Description: - The test will set 5 different achivements using SyncAchievementsRequest and read back using SyncAchievementsRequest Verify: - the set achievement should be marked as achieved. Valid_Update/EnumAchievements Description: - The test will update single achievement for a user using SyncAchievementsRequest and read back using SyncAchievementsRequest Verify: - the set achievement should be marked as achieved. Valid_Update_AddNew /EnumMultipleAchievements Description: - The test will update 2 achievements and add new 2 achievements for a user using SyncAchievementsRequest and read back using AchievementEnumRequest Verify: - the set achievement should be marked as achieved Valid_Sync/EnumMax-1 Achievements Description: - The test will set Max-1 different achievements using SyncAchievementsRequest and read back using AchievementEnumRequest Verify: - the set achievement should be marked as achieved. Valid_Sync/EnumMax Achievements Description: - The test will set Max different achievements using SyncAchievementsRequest and read back using AchievementEnumRequest Verify: - the set achievement should be marked as achieved. Valid_Server version older then client Description: - The test will set achievement for a user using SyncAchievementsRequest with client version date time ahead of server  Verify:-Sync Response should have zero achievements records. Valid_Server version newer then client Description: - The - The test will set achievement for a user using SyncAchievementsRequest with client version date time older then server  Verify:-Sync Response should return achievements records that were updated after the date specified. Valid_Server version same as the client Description: - The test will set achievement for a user using SyncAchievementsRequest with client version date time older then server  Verify: - Response should have zero achievements records. Valid_MaxSyncResponse Description: - The test will set max number of achievements using SyncAchievementsRequest with client version date time min date time value.  Verify: - Response should have max achievement records. Valid_Sync/EnumMax+1Achievement Description: - The test will try to set Max plus 1 different achievements using SyncAchievementsRequest. Verify:-Make sure that Proper Error is returned. ShortMessage Description: - the test will send a short XRL Message to SyncAchievementsRequest and AchievementEnumRequest. Verify: - Proper error code is returned LongMessage Description: - the test will send a XRL Message with size grater then expected to SyncAchievementsRequest and AchievementEnumRequest. Verify: - Proper error code is returned DuplicateProperties Description: - The test will set 5 valid achievements out of which 2 will be duplicates using SyncAchievementsRequest. Values of duplicate are same. Valves of duplicate are different. Verify: - Proper error should be returned. SGAuth_Different_User1 Description: - The test tries to write achievement for a user setting using SyncAchievementsRequest with user different in request and SGAuth. Verify:-Proper error is returned.  Max_Schema_Params Description: - the XLAST Schema will have max values for following attributes ImagePath Title Description NextIds Replace ids. Verify:-Make sure that correct values are returned..  Valid_Sync/Enum Different Loace Description: - The test will set single achievement for a user using SyncAchievementsRequest and read back using AchievementEnumRequest with a Locale  fr-FR Verify:-that every field returned is correct. Valid_Sync/Enum nonexistant Loace Description: - The test will set single achievement for a user using SyncAchievementsRequest and read back using AchievementEnumRequest for a nonexistent Locale Verify:-Make sure that the data returned is for default local Special Cases for EnumTitle Enum nonExisting User  Description: - The test tries to enumerate achievement using AchievementEnumRequest with user that not present in the DB Verify:-Verify that 0 titles are returned.  Enum nonExisting title  Description: - The test tries to enumerate achievement using AchievementEnumRequest for a title that is not set for the user. Verify:-Verify that 0 titles are returned.  Enum Different Start Positions  Description: The test tries to enumerate achievement using AchievementEnumRequest for a title with 10 achievement records with different start position and max count, with variable number of achievements achieved. Start Postion =0 max title =10   (return 10 titles ) Start Postion =1 max title =10   (return 10 titles ) Start Postion =9 max title =10  (return 2 titles ) Start Postion =10 max title =10 (return 1 titles ) Start Postion =5 max title =5  (return 5 titles ) Start Postion =1 max title =0 (return 0 titles ) Start Postion =10 max title =1 (return 1 titles ) Start Postion =1 max title =9 (return 9 titles ) Start Postion =1 max title =Max-1(return Max-1 titles ) Start Postion =1 max title =Max  (return Max titles ) Verify:-Verify that proper number of achievements are returned depending upon start position and max size, Also make sure that proper achievements are marked as achieved. Enum_Activity_none Description: - The test will set an activity setting for a user with permission set to Share activity none and enumerate achievements Verify:-The test will verify that   The same user can enumerate achievements. Friend cannot enumerate achievements and the request fails with error Access denied. Non Friend cannot enumerate achievements and the request fails with error Access denied Enum_Activity_friends Description: - The test will set an activity setting for a user with permission set to Share activity friends only and enumerate achievements Verify: - The test will verify that   The same user can enumerate achievements. Friend can enumerate achievements. Non Friend cannot enumerate achievements and the request fails with error Access denied Enum_Activity_all Description: - The test will set an activity setting for a user with permission not set and enumerate achievements Verify:-The test will verify that The same user can enumerate achievements. Friend can read enumerate achievements. Non Friend can enumerate achievements. Enum Parental Control Friend only Description: - The test will try to and enumerate achievements with a user whose parental setting set to view friends only  Verify:-The test will verify that   Can enumerate his own achievements Can enumerate Friends achievements. Cannot enumerate non friend s achievements. Enum Parental Control Activity Description: - The test will try to and enumerate achievements with a user whose parental setting is set to don t view activity. Verify:-The test will verify that   Can enumerate his own achievements Cannot enumerate other user s achievements. TESTCASES :- Clear Achievements Valid_ClearAchievement Description: - The test will set a single achievement for a user using SyncAchievementsRequest and then clear achievement for the title using AchievementClearRequest API. Verify:-Make sure that all the achievements for the title is deleted from the database. Valid_ClearAchievement2 Description: - The test will set multiple achivement for a user using SyncAchievementsRequest and then clear achievement for the title using AchievementClearRequest API. Verify: - Make sure that all the achievements for the title is deleted from the database InValid_Clear Nonexistent Title Description: - The test will try to clear achievements for a non existing title using AchievementClearRequest API. Verify:-Make sure that proper error is returned.  InValid_Clear NonUser Description: - - The test will try to clear achievements for a non existing user using AchievementClearRequest API. Verify:-Make sure that proper error is returned.  ShortMessage Description: - the test will send a short XRL Message to AchievementClearRequest Verify: - Proper error code is returned LongMessage Description: - the test will send a XRL Message with size grater then expected to AchievementClearRequest Verify: - Proper error code is returned SGAuth_Different_User1 Description: - The test tries to clear user s achievements using AchievementClearRequest with user different in request and SGAuth. Verify:-Proper error is returned.  Stress Testing M3 Milestone:  NO stress testing will be done in this release. Revision History Changes made Author 03/01/05 First Draft Pankajn Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. gdrIy tdtXtFtX> yeUeUe vh]hI8 rdVrdB gd: ) gd&Y. ug\Qg=, mbWm{ gd&Y. gd&Y. yj[NH gd&Y. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\alerts\Alerts.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template phansen Xbox Online Spec Template.dot Peter Hansen Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags Minute MonthUiS%E Xy(by(byh N!ueYS gh{J, 5J?rk0 : 5Vbt zm"S= iGoZNq 2n!EJ gj5%liP0y Atf}=E J#~jS s(byh~; m_=[f} <[C6% |wzFK< kN-_k O^Ez@\ w`Dg_W 3:kuC#nE oUc~r HRW & -t9u}{ +1)={nJN( m4rQbk uk^qz \<#p> %F7GmMicrosoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6EMF+0@  L-0" ,0"^,0"^,0"^,0"^,Y 0"^,0"  L-0" ,0"^,0"^,0"^,0"^,Y 0"^,0" '0"M'0" EMF+*@ EMF++@ B~!HB aC~!HB B~!HB EMF+*@ >""b> >""b> >""b>r ?""b> EMF++@ EMF+*@ >""b> >""b> >""b>r ?""b> EMF++@ Copyright   1996 Microsystems Engineering Company All Rights Reserved EMF+&@ =q,!? EMF++@ EMF+*@ EMF++@ EMF++@ =8~k? EMF++@ =q<?? EMF++@ EMF+*@ EMF++@ >Ue ? EMF++@ EMF++@ 3DH``C DM``C 3DH``C DM``C DH``C EMF+*@ EMF++@ .5DFh3D .5DGJBD 3DGJBD u1DHJBD u1DHJBD u1DGJBD u1DGJBD u1DGJBD DHJBD DHh3D %")F&") .5DFh3D .5DGJBD 3DGJBD u1DHJBD u1DHJBD u1DGJBD u1DGJBD u1DGJBD DHJBD DHh3D DFh3D DGJBD DGJBD DHJBD DHJBD DGJBD %")F&") EMF+*@ >:^+? EMF++@ EMF+*@ EMF++@ EMF++@ G0OD0t CG0OD0t CG0OD EMF+*@ BG0OD0t EMF++@ Copyright   1996 Microsystems Engineering Company All Rights Reserved EMF+&@ =q,!? EMF++@ C~!HBH D~!HBH C~!HB EMF+*@ =""b> #7>""b> >""b>Uu >""b> >""b> >""b> ?""b>8 ?""b> ?""b> %?""b> 5?""b>q E?""b>8^U?""b> EMF++@ Hp/D~!HBG0OD~!HBG0OD @Hp/D @Hp/D~!HB EMF+*@ BHp/D =""b>r $>""b> cc>""b> >""b>U >""b> >""b>q >""b> ?""b> ?""b> ?""b> %?""b>r|:?""b>9 @?""b>  G?""b> V?""b> f?""b> EMF++@ GP?D~ gBGP?D~ gBGP?D EMF+*@ BGP?D~ P>""b> >""b>U >""b> >""b>q >""b> >""b> ?""b> ?""b> ?""b>UU$?""b> '4?""b> C?""b> EMF++@ G0OD_(!CG nD_(!CG BG0OD BG0OD_(!C EMF+*@ BG0OD @M>""b>U >""b> >""b>q >""b> >""b>8n >""b> >""b> ?""b> ?""b>U .?""b> w>?""b> EMF++@ Copyright   1996 Microsystems Engineering Company All Rights Reserved EMF+&@ EMF++@ CGHCD0 CGHCD0 EMF+*@ EMF++@ >8.%?33 #K?33 >q\Y?33 EMF++@ C~!HB D^GBC D^GBC AHp/D BGP?D CG0OD_X CyyfC 6pCjI Hh3D0 CHh3D} 6pCHh3DyyfC EMF+*@ EMF++@ =DHh3D =DHh3DYO7D 7DHh3D ,L-(- DHh3D CHh3D0 'DGJBD )/1F)/1 EMF+*@ EMF++@ EMF++@ >Uu-? >8.E? EMF++@ >Tu<?33 >p\D?33 _b?33 EMF++@ EMF++@ (F)") EMF+*@ =Vus? EMF++@ EMF++@ =sL(? EMF++@Pages Masters Page-1 Database Cloud Process Dynamic connector _VPID_ALTERNATENAMES _VPID_PREVIEWS _PID_LINKBASEphansen TTTTTT hhh@@@@@@@@@@@@@@@@@@@@@HHH ppp@@@@@@@@@@@@@@@@@@@@@@@@ xxx@@@@@@@@@::::::@@@@@@@@@xxx @@@hhh PPP   888 @@@hhh XXX(((((( xxx   888``` ```000    XXXppp hhhPPP ///@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@000777 777888@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((hhh hhh000 000@@@@@@``` @@@@@@@@@ ppp888 (((@@@@@@XXX HHH@@@@@@    @@@@@@PPP PPP@@@@@@    ppp    @@@@@@@@@@@@@@@@@@@@@888 000``` @@@@@@@@@@@@@@@@@@@@@@@@ (((XXX HHH    @@@@@@@@@444444@@@@@@@@@    PPP ______ >>>xxx >>>xxx 888sss CCCggg OOO000    ppp PPP``` ```PPP www___ ppp    @@@@@@@@@@@@ @@@@@@@@@@@@ @@@@@@@@@000HHH 777}}} ```www ```OOO ttt}}} @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ !!!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    (((888@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((hhh HHH000@@@@@@@@@@@@@@@@@@@@@@@@000000@@@@@@@@@@@@@@@@@@@@@@@@000HHH ______ 999rrr gggggg }}}}}}    @@@@@@@@@PPP ```xxx @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ hhh@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@PPP ```xxx xxx``` @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ xxx``` 888@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@888((( xxx``` HHH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@``` @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ```@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@HHHVisio (TM) Drawing Wingd Monotyp e Sort '5/G% ^?Tp2 N7OIJ`2 _HOZOlI ?`?r6 :/L/^/ ?uWRLu O(O:O ///A/S/e/w/ ?+?=?O?a?s? "O4OFOXOjO|O -_?_Q_c_u_ 6oHoZolo~o `G/Y' ci/{& ?,?>?P?  )O;O %_7_I_[_m_ Tofoxo @OROdOC "/4/F/  T?f?x?@ /%/7/I/ ?!?3? O@.O@OROdOvO   Displa twork Adds a  databas  sour or oth torag e device  to y etwork d iagram. propert y inform ation. Vis_S BN.chm!# 26537 "`?Copyr ight (c)  2001 Mi crosoft  Corporat ion.  Al l r2s res erved. PA8A96 (q}%* ;&V/y  @"Vz " zazb6e Manuf acturer Enter  the m  nGame oduct Nu Serial+ Bu?ilding0 Room\A mentA l$"VE perties base,A dds,d ource,st orage,de Pnetwo rk,diagr am,Basic ,configu ,WANs,YL ed,syste twork A high -level v iew of a  network  or syst em whose  details ed not  appear, ten us+ o repres{en0 the Inte 5$@@8 _D61.chm !#29253 pyright  (c) 2001  Microso ft Corpo ration.   All  reservedO. bf't!l! ropertie NETWO RK SHAPE  PROPERT?IES Hide Equ ipment L Shownn jbTex !ntrol H andle V:Qk=+`gEditno Manufa cturer uct Numb Descri q2",K QtRuQf CVI077  inal  DRW fil relea se vers 25/99 Date  Uniq?ue Key" Symbo Shape  Icon ID" FM; C ogClass" ,Logi cal,5 $;~P' 5$@@43 ?Copyrig ht (c) 2 001 Micr osoft Co rporatio n.  All  s reser?ved. Copyri 96 Micro systems  Engineer ing Comp All R Reserved Cloud chart Any pr ocessing  functio y kin ouble-cl ick to a dd sub-p ?Copyrig ht (c) 2 001 Micr osoft Co rporatio n.  All  s reser Vis_SF B.chm!#2 7rtF" Enter th p ass ociated  process# ~[" sstep#  esour wnumb people  quir sta+sk# n %Propert r'#hx ing,func !,Basic, Flowchar t,inform gram,dat es,joi ners, nector Connec tor that  automat ically r outes be tween s, usi ng a rig ht-angle d line. s_SFB.ch m!#26514 pyright  (c) 2001  Microso ft Corpo ration.   All <Bs  reserved ?7g;2 ynamic,c onnector ,autom[@c ally,rou tes,betw us,<B, angled,l ine,Bas Flowchar t,infor,q on,fgp,di agram,da ta,proce ss:pjo\prs ,associ[B's SGView p'M/sU Networ  ?2?D0 owchartV9 ConnectoIr D0>J1 aRB"Rt Yb#_t DCOUO nUoU@ kO}Ea Ja'a'a 5$@83 QYeB3W YeCOD qQT~% :#&5H. QPIQ* b_</N/ curity G?ateway _/_DI foxoB ?@U[B (n[EAoSo ernet Ne?tworks O0&O8E 7_I_[_m_ ence & N otificat ion Serv r ;q+ F_X_j_C file Sto ?%?7?I?[?m? _"_4_ o0oBo' rts Serv !/3/k ebdPcurit y Gatewa Q}T2b M55V5Kcd0Tc(m< 5$@83` %i9sW% M53V5. c\*6nternKeti %o\88 ?*0j( 6\DcR PC Web  SignupP 8_K"% e?,,o>o dYjW&z XkW&N  O"O4O& X/j/|/ ??Q?c? senger C lient  Phones O/a/s/ ?'?6OK? Mo 4,b k 5$@83s S ?@UUr Ju@pUs d_`v_ Ye8.N ET Alert!s|2> ?S3]5 u%b;ISA F irewall  (outboun d only)cR Y11"9 ?2r2RIp;Vr !?3?E?W? O,O`, COULp \(_:_ 6wDKO LGE_  (?:?L?^? _#_5_ `W_[a Lo^opo TEA0o @OOaOsI{ oTtqr tqio{o 1D.6= -???t 2CS9F !/3/E/W/i/ A?%6=q[5L  4_F_X_j_|_T =oOi/ $bj4B*F WebCac heu"|q *)u-/ `ufIA-eN@zp G?Y?k? O .O@OROdN 9_K_]_ /N32/PD/V/h/2 o$o6o]g @@U@m BO`TO @]S$Sq ItQ2)GU _j_"o Title N ame Data  (OLEDB) ?)?;?M?_?pq? _'_9_ vo5oGo ert Even ts (UDP utbound  71]!H } )."qp 0[@z) T62RX r.iV]! ubscript ions  8Web Ser vices (S?OAP) k@@xc ?t\!Jw4!;x !Jw\!;x} ;x(QJw A;x$1Jw a;xB1 aJw(Q;x Jw$1;x qJwB1;x ?t'qJw q;x/qJw q;x.Gz 1Jw'q;x4Gz+q;x@ aJw/q;x Guide TheDoc Page-1 ure Form Net Normal Visio 90 Connector Visio 00 Visio 01 Visio 02 Visio 03 Visio 10 Visio 11 Visio 12 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Flow Normal Hairline  connect or text Database Manufacturer uctNumbe PartNumber uctDescr iption AssetNumber SerialNumber Location Building Department visKeywords visVersion Cloud Drwfile RelVersion Gener visShapeID roductLi visIconID visEquipType MCategor visFMClass Process Duration Resources Process.6 Database.13 Database.14 Process.8 Process.16 Process.22 Process.23 Process.24 Process.29 mic conn?ector Process.41 Process.12 Process.15 Process.21 mic conn ector.31 mic conn ector.32 mic conn ector.33 mic conn ector.34 mic conn ector.35 mic conn ector.36 mic conn ector.37 mic conn ector.38 mic conn ector.39 mic conn ector.40 mic conn ector.42 mic conn ector.43 mic conn ector.44 mic conn ector.45 mic conn ector.46 mic conn ector.47 mic conn ector.52bjbjqPqP o "1-2" \h \z \u   HYPERLINK \l "_Toc529857241"  Table of Contents  PAGEREF _Toc529857241 \h   HYPERLINK \l "_Toc529857242"  Executive Summary  PAGEREF _Toc529857242 \h   HYPERLINK \l "_Toc529857243"  Schedule  PAGEREF _Toc529857243 \h   HYPERLINK \l "_Toc529857244"  Milestone  PAGEREF _Toc529857244 \h   HYPERLINK \l "_Toc529857245"  Goals  PAGEREF _Toc529857245 \h   HYPERLINK \l "_Toc529857246"  Non-Goals  PAGEREF _Toc529857246 \h   HYPERLINK \l "_Toc529857247"  Scenarios  PAGEREF _Toc529857247 \h   HYPERLINK \l "_Toc529857248"  Architecture Diagram  PAGEREF _Toc529857248 \h   HYPERLINK \l "_Toc529857249"  Design  PAGEREF _Toc529857249 \h   HYPERLINK \l "_Toc529857250"  Security  PAGEREF _Toc529857250 \h   HYPERLINK \l "_Toc529857251"  Spoofing Identity  PAGEREF _Toc529857251 \h   HYPERLINK \l "_Toc529857252"  Tampering with Data  PAGEREF _Toc529857252 \h   HYPERLINK \l "_Toc529857253"  Repudiability  PAGEREF _Toc529857253 \h   HYPERLINK \l "_Toc529857254"  Information Disclosure  PAGEREF _Toc529857254 \h   HYPERLINK \l "_Toc529857255"  Denial of Service (DoS)  PAGEREF _Toc529857255 \h   HYPERLINK \l "_Toc529857256"  Elevation of Privilege  PAGEREF _Toc529857256 \h   HYPERLINK \l "_Toc529857257"  Operations  PAGEREF _Toc529857257 \h   HYPERLINK \l "_Toc529857258"  Events  PAGEREF _Toc529857258 \h   HYPERLINK \l "_Toc529857259"  Text Logging  PAGEREF _Toc529857259 \h   HYPERLINK \l "_Toc529857260"  Performance Counters  PAGEREF _Toc529857260 \h   HYPERLINK \l "_Toc529857261"   PAGEREF _Toc529857261 \h   HYPERLINK \l "_Toc529857262"  Interactions  PAGEREF _Toc529857262 \h   HYPERLINK \l "_Toc529857263"  Usability Issues  PAGEREF _Toc529857263 \h   HYPERLINK \l "_Toc529857264"  External use  PAGEREF _Toc529857264 \h   HYPERLINK \l "_Toc529857265"  Dependencies  PAGEREF _Toc529857265 \h   HYPERLINK \l "_Toc529857266"  International  PAGEREF _Toc529857266 \h   HYPERLINK \l "_Toc529857267"  Terms  PAGEREF _Toc529857267 \h   HYPERLINK \l "_Toc529857268"  User Interface  PAGEREF _Toc529857268 \h   HYPERLINK \l "_Toc529857269"  Technical Certification Requirements  PAGEREF _Toc529857269 \h   HYPERLINK \l "_Toc529857270"  Required UI  PAGEREF _Toc529857270 \h   HYPERLINK \l "_Toc529857271"  Recommended Practices  PAGEREF _Toc529857271 \h   HYPERLINK \l "_Toc529857272"  Samples  PAGEREF _Toc529857272 \h   HYPERLINK \l "_Toc529857273"   PAGEREF _Toc529857273 \h   HYPERLINK \l "_Toc529857274"  Revision History  PAGEREF _Toc529857274 \h  Executive Summary Integration with MSN Messenger to provide XBOX users with timely information about what it happening in the XBOX Live network is a key community building feature that will help gamers connect with each other more frequently, and help drive usage across the service.  Schedule status  Milestone Description In Progress 3/24/2003  Design Initial stab at design for Messenger Integration.  Design Scoping the technologies and procedures required to build the Alerts Service and messenger integration components. The result of this milestone is this document + a working prototype.  Goals Build the XBOX Live community into a vibrant interconnected network of gamers.  Alerts has the following goals: Helps gamers find each other on the XBOX Live service by extending the presence system to the PC via integration with the Instant Messenger client Builds community by allowing gamers to communicate from XBOX Live to the PC via targeted alerts.  Non-Goals Alerts has the following non-goals: Pushing any kind of alerts from the PC back into the XBOX network Scenarios Scenario 1: Setup Alerts: Peter (gamertag: Kestrel) is an avid XBOX live user, but doesn t keep his XBOX online most of the time. He spends most of his time at his PC. He uses Instant Messenger for communication with friends and relatives on the PC. Since he wants to make the most of his XBOX game time, he wants to know when important events happen. He navigates to   HYPERLINK "http://www.xbox.com/alerts"  http://www.xbox.com/alerts  with his browser, and signs up for XBOX alerts. This establishes the link between his passport identity on the web and his gamertag in the XBOX world. Peter can now receive xbox notifications on his PC.  Scenario 2: Basic Presence Alerts: Peter s friend Vince (gamertag: Ecniv) has been taunting Peter about finally holding a higher rank in MotoGP after many months of practice. Kestrel and Ecniv have each other on their friends lists, but rarely bother to setup times to game together. Vince logs onto his XBOX one night to improve his MotoGP scores. Peter is on his PC working, and is logged into Messenger. When Vince logs onto Live with his XBOX, Peter receives an alert through messenger  Ecniv is logged on in MotoGP  This allows Peter the opportunity to stop what he is doing on the PC, and get online with his XBOX to prove his superiority.   Scenario 3: Game Invite Alerts Continuing the scenario above, Peter is actually doing something important on his PC, and decides to not kick Vince s butt right at this moment. Vince, seeing that he has nobody to race against, and being bored with time trials, decides to send Peter a game invite, on the off chance that he might logon while Vince is racing. The game invite is transmitted through the Presence system, and is turned into another alert at Peter s IM client  Ecniv has invited you to play MotoGP  which prompts Peter to stop what he is doing on the PC, and proceed to boot up his XBOX for a quick schooling session.  Architecture Diagram  EMBED Visio.Drawing.6   Design This is the real meat of the feature spec.  This section is where you detail the design of the feature. The content of this section will depend heavily on the type of spec being written.  If applicable, this is the section that should contain APIs, UI, schema, etc. as needed by the feature in addition to the behavior of the feature. Problem Definition We want to allow XBOX Live services to distribute alerts to consumers using Instant Messenger on their PC with a minimal amount of overhead to existing servers. It is also likely that in the future, alerts will come from various components both inside and potentially outside the XBOX Live network such as editorial alerts or game articles published by the XPlace team. As such, the alerts feature is envisioned as a separate service from any existing XBOX Live service.  Alerts delivery is a less critical piece of the XBOX Live service than core platform features such as presence or stats. As such, it is acceptable for the service to be designed without maximum redundancy. If we lose the ability to deliver alerts for a period of time it is an acceptable outage. Fundamentally, this service will depend on downstream services, so even if the XBOX service is fully redundant, a risk of outages will still exist.  Constraints Must be easy to generate alerts events from various XBOX live services. In the future, the service will likely source events from presence, stats, messaging and other services Alerts must be able to be delivered to Messenger clients Some event sources will need to be extremely performance sensitive (ie. alerts events associated with game invites) and will not be able to afford the overhead associated with a SQL call The XPlace team must be able to host and own the web pages that control user signup and management of alerts New servers should live in the Level 3 datacenter if at all possible, not Tukwilla. Options The most basic option for building an Alerts Service would be to partner with the Messenger team directly to deliver XML formatted alerts to their backend service which would then be represented as messenger toast on the desktop. The xbox service would be completely responsible for alert generation, localization, administration and transport. The Messenger service would only handle delivery. The Messenger team handles this sort of integration with external partners through the .NET Alerts service. Microsoft already has a significant investment in the .NET Alerts system, which provides transport services to various devices, including Messenger. Using the .NET Alerts service for alerts transport would also enable delivery of alerts to email and mobile devices. The .NET Alerts service also allows for central management of users alerts at   HYPERLINK "http://alerts.microsoft.com/Alerts"  http://alerts.microsoft.com/Alerts For alerts generation, Microsoft has SQL Server Notification Services (SQLNS) available as an option. SQLNS is a programming framework for creating applications that generate and send notifications, as well as a platform for hosting those applications. SQLNS sinks events from an external source and takes care of notification generation for the set of subscribers and subscriptions in its system. SQLNS applications are built on top of SQL Server using XML and the .NET Framework to define the application. It is a flexible architecture and allows for plugging in custom code as necessary to expand the core functionality.  The .NET Alerts service and SQLNS are not competing products. One is a notification transport service, and the other is a notification generation platform. They are complimentary and designed to work together. Proposal The XBOX team should build its alerts solution on a single SQL server in the Seattle Level 3 datacenter. This server would utilize both SQLNS as the core application for managing notifications, and would use .NET Alerts as the primary alerts transport.  Using both existing technologies has many benefits over building our own solution from the ground up. They include: Less code to write and test. SQLNS Applications are built primarily with XML and a setup tool. This means we can define the application in XML, and feel fairly confident that the result will behave as expected without a huge test burden testing the internals of the system.  Tool based application generation means we can potentially be more flexible for the XPlace team as they want to introduce new alert subscriptions that don t necessarily align with our major service release schedules.  SQLNS is capable of using .NET Alerts as a notification transport out of the box using their HTTP transport provider and additional code provided by the .NET Alerts team. SQLNS handles many of the hard problems associated with alert generation including localization of notifications by user, and time zone mapping to the subscriber s time zone if desired. Implementation Details There are many parts beyond just the Alerts service to building the overall alerts infrastructure for XBOX Live. The major components that must be build are listed below, and explained in more detail in later sections of this document: The Subscription Management Process Defining Events and Subscriptions Alert Generation at Presence Replication of PUID mapping table from UODB to Profile DBs Basic Notification Services ADF and Config file Title Manager Changes to support Alerts Interfacing with .NET Alerts The Subscription Management Process Before a user can receive alerts, they must sign up for XBOX Live alerts somewhere on the web. This web site would be a Passport integrated website that would be integrated with .NET Alerts. Users that wish to sign up with .NET Alerts would visit the site, sign into passport, and then complete three steps to be successfully signed up for alerts.  First, the users must link their Passport ID to their XBOX gamertag. This work is being covered in another spec. See Van s spec at   HYPERLINK "http://sts/Xbox_Online/Specs/Xbox%20Live%202003%20Web%20Services.doc"  http://sts/Xbox_Online/Specs/Xbox%20Live%202003%20Web%20Services.doc  for more details.  Once the user has linked their Passport ID to their XBOX gamertag, they must provision their passport for Alerts delivery with .NET Alerts. This is done by a redirect on the website to   HYPERLINK "http://alerts.microsoft.com/"  http://alerts.microsoft.com/ . The Alerts SDK provides for the passing of arguments to the signup URL such that when the user is finished that task, they are redirected back to the original website to complete step 3.  The final step that the user must complete is to sign up for the application specific alerts. This page would be hosted by the XPlace team, and would result in a web services call through the Web SG to setup or modify the users alerts subscriptions.  Steps 2 and 3 of this process are prototyped at   HYPERLINK "http://phansen1.dns.microsoft.com/"  http://phansen1.dns.microsoft.com/  in the Passport preproduction environment.  Defining Events And Subscriptions Defining events to generate alerts was an interesting topic to consider given the constraints of the service design. Several different approaches were considered, but after analyzing our network topology, and talking at length with the SQLNS dev team, it was decided that the most efficient mechanism for delivering alert events to the alerts server would be through a custom  non-hosted  provider that lives on the SQLNS box. This provider would be a NT service that would be able to hold a persistent connection to the PRESINH servers, and read UDP packets on the wire and translate them into SQLNS events locally using OLEDB to talk to the SQLNS application.  Why? Talking SQL directly from the PRESINH boxes would add additional load to the presence service in the logon code path, which is already critical path. Also, the PRESINH boxes are in the Tukwilla datacenter, and the Alerts service will be in Level 3. That means that communication between those services will be via the cross datacenter VPN, and should be bandwidth limited as much as possible. Using UDP over a custom connection also means that the alert data can be sent asynchronously, and can be treated as  fire and forget . If we drop a packet along the way, then a notification will not be generated to send to the .NET Alerts cloud. Not a big deal.  Presence already is proficient at holding open persistent TCP connections between the various machines that make up the presence service, so one more for Alerts is a straightforward code change.  The service at the alerts side can also make use of the extensive service and networking classes built to support other live services.  The next big question was to answer what exactly an alert packet consists of. Since we have complete control of the protocol, we can perform additional optimizations. One of the key considerations as to what is included in the alert packet is what data is available at the Alerts service. In order to minimize data integrity issues caused by replication of the friends list, it was decided to not replicate friends list state from the Profile DB to the Alerts service. Doing so would have required extensive changes to Presence to include message generation whenever a users  friends list is updated. It would inevitably lead to data being out of sync between the two services, with no easy way to fix that problem. Instead, the Presence servers will do the list expansion of a users  friends list when they log on. This work is done anyway to populate the Alive cache internally to Presence. The alerts event will then contain the gamertag of the user that logged on, the titleid they logged on to, and the web PUID of the friend that will receive the alert. These events would be generated for every user that has associated their XBOX with a web PUID. The Alerts service takes care of figuring out which of those users is actually signed up to receive alerts on their messenger client, and will discard the unnecessary ones.  Logon Event: Parameter Name Description Friend Web PUID QWORD Friends Passport PUID Sender Title Id DWORD Title Id the sender user is in Sender gamertag Up to 32 Bytes Null terminated Gamertag string of the sender At the Alerts service, each user would  subscribe  to live alerts via the XPlace website, and corresponding subscription calls through the Web SG to the Alerts service. Once subscribed, the user would have data persisted in the Alerts service including their Web PUID, timezone, and language ID they want alerts received in. This data about the subscriber would be relevant for all alert subscriptions the user signs up for (as the service is extended to include game invite alerts, content alerts, etc) Alert Generation at Presence This discussion focuses on presence live alerts: For users who are signed up for alerts, we want to have those users receive a notification whenever one of their friends logs onto their XBOX. This is a core function of the Presence servers. A chief difference for the live alerts is that they would be sent to each of a user s friends, regardless of their current online state, as they may otherwise have no presence in the XBOX system.  The wire protocol for sending logon events to the Alerts Service contains must encapsulate the data described in the logon events in section 9.2. There is only one message defined in the alerts wire protocol in v1: FriendAlert. The message is variable length, governed by the number of friends listed, and the senders gamertag length.  Presence Alert: Parameter Name Description Sender Title Id DWORD Title Id the sender user is in Alert Type Flags Alert Flags (currently unused) cReceipients Number of Recipients Sender Chars Count of Chars in SenderName Data Chars Count of WChars in Data Sender XUID QWORD Senders User ID Receipient Web PUID QWORD* Recipient Passport PUID per Recipient Recipient XUID QWORD* Receipient User ID per Receipient Up to 255 WCHARs No Reply This message encapsulates the data for generating logon events for all the users friends when a user logs on. This allows us to minimize packets to the Alerts Service, and keep bandwidth usage to a minimum. The message can be easily broken down at the Alerts Service side into the corresponding N events before being inserted into the SQLNS application.  The Presence Alert message is sufficiently generic to be reused for new event types in the future, for example, when events relating to game invites, messages, or other presence specific alerts are supported. It is envisioned that each of these additional event types would simply use a new Alert Type value in the protocol, and that these Alert Types would map to different alert subscriptions in the Alerts Service.  Replication of PUID mapping table from UODB to Profile DBs One of the fundamental challenges to solve in order to support the FriendAlert messages is to ensure that the Web PUIDs are available at the Presence service in an efficient manner. We know that we need to lookup the destination user s Web PUID at some point in the event generation process, and having this data available in Presence would be the most efficient use of bandwidth, since it would allow us to discard friends that have not linked their XBOX PUID to a passport PUID at the source, rather than later in the process.  Since a users  PUID mapping changes very rarely, we can simply write the users Web PUID mapping into the Profile DB the same way we denormalize gamertag names for friend lookups. This means that at the time a user links their XBOX PUID to a Passport PUID, we perform a cluster scan across the Profile DB and write the updated mapping in every friends list that user appears in.  The UODB will still contain the  master  copy of users XBOX to Passport mappings, so that if we ever have data integrity issues between the database clusters due to hardware failure, etc. we can recover the correct state from UODB. If a user experiences weird behavior due to mismatched PUIDs in their Profile DB, they can correct the problem by re-linking their accounts via the XPlace UI.  We may need some PSS tools to help lookup a users PUID mapping in the Profile DB and verify consistency across the database. This should be the same set of tools we use to verify gamertag consistency (which I believe doesn t currently exist in any tool) Title Manager Changes to support Alerts The last piece of data required to be able to generate alerts is a mapping between Title ID and title names. Again, this is infrequently changing data, but we do not want this mapping at the Presence Service, since that would mean including the title name in the logon event messages.  Title names are managed through Title Manager, and it is simple to have Title Manager maintain the up to date version of the names in the Alerts Service directly through OLEDB calls to stored procedures on that box. The data will be stored internally in the Alerts Service in a  chronicle table  which is a fancy term for persistent application data. The data will be used when generating alerts from events to map between the title id in the event to the title name in the alert.  Basic Notification Services ADF and Config file Now that we have the basic changes to Presence defined, and the wire protocol for sourcing events defined, it is time to consider what the SQLNS application looks like on the Alerts Service itself. SQLNS is configured entirely through two XML files: a config file and an Application Definition File (ADF) The following are the basic config and ADF file required for the Alerts Service, as defined for the prototype application. These will need to change slightly as the application is finalized. You should refer to the checked in versions for the most up to date copy of the files Config.xml: <?xml version="1.0" encoding="utf-8"?> <NotificationServicesInstance xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.microsoft.com/MicrosoftNotificationServices/ConfigurationFileSchema">     <InstanceName>xbox</InstanceName>     <SqlServerSystem>%SqlServer%</SqlServerSystem>     <Applications>         <Application>             <ApplicationName>Alerts</ApplicationName>             <BaseDirectoryPath>%BaseDirectoryPath%\AppDefinition</BaseDirectoryPath>             <ApplicationDefinitionFilePath>appADF.xml</ApplicationDefinitionFilePath>             <Parameters>                 <!-- These parameters are defined as environment variables or                 as command line arguments.  They are passed to the ADF file. -->                 <Parameter>                     <Name>_DBSystem_</Name>                     <Value>%SqlServer%</Value>                 </Parameter>                 <Parameter>                     <Name>_NSSystem_</Name>                     <Value>%NSHost%</Value>                 </Parameter>                 <Parameter>                     <Name>_BaseDirectoryPath_</Name>                     <Value>%BaseDirectoryPath%</Value>                 </Parameter>                 <Parameter>                     <Name>_EventsDir_</Name>                     <Value>%BaseDirectoryPath%\Test\Events</Value>                 </Parameter>                 <Parameter>                     <Name>_RootSite_</Name>                     <Value>http://phansen1.dns.microsoft.com/alerts</Value>                 </Parameter>             </Parameters>         </Application>     </Applications>           <Protocols>         <Protocol>             <ProtocolName>MSAlerts60</ProtocolName>              <ClassName>Microsoft.Alerts.NotificationServices.AlertsDeliveryProtocol</ClassName>              <AssemblyName>%BaseDirectoryPath%\MSAlerts\Microsoft.Alerts.NotificationServices.AlertsDeliveryProtocol.dll</AssemblyName>         </Protocol>     </Protocols>     <DeliveryChannels>         <DeliveryChannel>             <DeliveryChannelName>MSAlerts</DeliveryChannelName>              <ProtocolName>MSAlerts60</ProtocolName>              <Arguments>                 <Argument>                     <Name>UserPostURL</Name>                      <!-- PPE environment -->                     <Value>http://nrouter.microsoft-ppe.com/nrouter/AlertsWS-Notification.asmx</Value>                                     </Argument>                 <Argument>                     <Name>BLPostURL</Name>                     <!-- PPE environment -->                     <Value>http://blnrouter.alerts.microsoft-ppe.com/nrouter/AlertsWS-Notification.asmx</Value>                                     </Argument>                 <Argument>                     <Name>ConnectionLimit</Name>                      <Value>2</Value>                  </Argument>                 <Argument>                     <Name>BLConnectionLimit</Name>                      <Value>2</Value>                  </Argument>                 <Argument>                     <Name>AsyncPosts</Name>                      <Value>16</Value>                  </Argument>                 <Argument>                     <Name>BLAsyncPosts</Name>                      <Value>16</Value>                  </Argument>                 <Argument>                     <Name>MaxShutdown</Name>                      <Value>180</Value>                  </Argument>                 <!-- Need to fill in the correct proxy information for the XBOX Live environment                 <Argument>                     <Name>ProxyPort</Name>                      <Value>8080</Value>                  </Argument>                 <Argument>                     <Name>ProxyServer</Name>                      <Value>http://proxy.example.com</Value>                  </Argument>                             -->             </Arguments>         </DeliveryChannel>         <DeliveryChannel>             <DeliveryChannelName>FileChannel</DeliveryChannelName>             <ProtocolName>File</ProtocolName>             <Arguments>                              <Argument>                     <Name>FileName</Name>                     <Value>%BaseDirectoryPath%\Test\Notifications\FileNotifications.txt</Value>                 </Argument>             </Arguments>         </DeliveryChannel>     </DeliveryChannels>     <EncryptArguments>false</EncryptArguments>   </NotificationServicesInstance> The config file defines three major items: The xalerts application, the .NET Alerts protocol as an HTTP protocol and the .NET Alerts delivery channel for delivering alert. That delivery channel will be unused in the production application.  The ADF file is by far the more interesting file of the two. It defines the events and subscriptions, and how alerts (called notifications by SQLNS) are generated.  ADF File: <?xml version="1.0" encoding="utf-8" ?> <Application xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.microsoft.com/MicrosoftNotificationServices/ApplicationDefinitionFileSchema">     <EventClasses>         <EventClass>             <EventClassName>xTitleEvents</EventClassName>             <Schema>                 <Field>                     <FieldName>TitleId</FieldName>                     <FieldType>int</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>TitleLocale</FieldName>                     <FieldType>nchar(10)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>TitleName</FieldName>                     <FieldType>nvarchar(30)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>             </Schema>             <IndexSqlSchema>                 <SqlStatement>CREATE INDEX xTitleEventsIndex ON xTitleEvents ( TitleId, TitleLocale )</SqlStatement>             </IndexSqlSchema>             <ChronicleRule>                 <RuleName>xTitleChronRule</RuleName>                 <Action>                     INSERT xTitleChron                     (TitleId, TitleLocale, TitleName)                     SELECT xTitleEvents.TitleId, xTitleEvents.TitleLocale, xTitleEvents.TitleName                     FROM xTitleEvents                     WHERE xTitleEvents.TitleId NOT IN (SELECT TitleId FROM xTitleChron)                                          UPDATE xTitleChron                     SET xTitleChron.TitleName = xTitleEvents.TitleName,                     xTitleChron.TitleLocale = xTitleEvents.TitleLocale                     FROM xTitleEvents JOIN xTitleChron                     ON xTitleEvents.TitleId = xTitleChron.TitleId                  </Action>                 <ActionTimeout>PT5M</ActionTimeout>             </ChronicleRule>             <Chronicles>                 <!--The Transact-SQL statement that determines the                 structure of the event chronicle table. -->                 <Chronicle>                     <ChronicleName>xTitleChron</ChronicleName>                     <SqlSchema>                         <SqlStatement>                         IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES                         WHERE TABLE_NAME = &apos;xTitleChron&apos;)                         DROP TABLE xTitleChron                         </SqlStatement>                         <SqlStatement>                         CREATE TABLE xTitleChron                         (                         TitleId bigint,                         TitleLocale nchar(10),                         TitleName nvarchar(30)                         PRIMARY KEY (TitleId, TitleLocale)                         )                         </SqlStatement>                     </SqlSchema>                 </Chronicle>             </Chronicles>         </EventClass>         <EventClass>             <EventClassName>xLiveEvents</EventClassName>             <Schema>                 <Field>                     <FieldName>Type</FieldName>                     <FieldType>int</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>Flags</FieldName>                     <FieldType>smallint</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>Sender</FieldName>                     <FieldType>nchar(16)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>Data</FieldName>                     <FieldType>nvarchar(255)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>TitleId</FieldName>                     <FieldType>int</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>SenderXUID</FieldName>                     <FieldType>bigint</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>SubscriberXUID</FieldName>                     <FieldType>bigint</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>SubscriberId</FieldName>                     <FieldType>nchar(22)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>             </Schema>             <IndexSqlSchema>                 <SqlStatement>CREATE INDEX xLiveEventsIndex ON xLiveEvents ( SubscriberId )</SqlStatement>             </IndexSqlSchema>         </EventClass>         <EventClass>             <EventClassName>xContentEvents</EventClassName>             <Schema>                 <Field>                     <FieldName>Type</FieldName>                     <FieldType>int</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>Locale</FieldName>                     <FieldType>nchar(10)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>Message</FieldName>                     <FieldType>nvarchar(255)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>DeliveryTime</FieldName>                     <FieldType>datetime</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>             </Schema>             <IndexSqlSchema>                 <SqlStatement>CREATE INDEX xContentEventsIndex ON xContentEvents ( DeliveryTime )</SqlStatement>             </IndexSqlSchema>         </EventClass>     </EventClasses>     <SubscriptionClasses>         <SubscriptionClass>             <SubscriptionClassName>xLiveSubscriptions</SubscriptionClassName>             <Schema>                 <Field>                     <FieldName>Type</FieldName>                     <FieldType>int</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>DeviceName</FieldName>                     <FieldType>nvarchar(255)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>SubscriberXUID</FieldName>                     <FieldType>bigint</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>Subscriber</FieldName>                     <FieldType>nchar(16)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>SubscriberLocale</FieldName>                     <FieldType>nchar(10)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>             </Schema>             <EventRules>                 <EventRule>                     <RuleName>xLiveSubscriptionsEventRule</RuleName>                     <Action>                          SELECT dbo.xLiveNotificationsNotify(                         s.SubscriberId, s.DeviceName, s.SubscriberLocale, e.Type, e.Flags, e.Data, e.Sender, s.Subscriber, t.TitleName)                         FROM xLiveEvents e                         INNER JOIN xLiveSubscriptions s ON e.SubscriberId = s.SubscriberId and e.Type = s.Type                         INNER JOIN xTitleChron t ON e.TitleId = t.TitleId and s.SubscriberLocale = t.TitleLocale                     </Action>                     <EventClassName>xLiveEvents</EventClassName>                 </EventRule>             </EventRules>         </SubscriptionClass>         <SubscriptionClass>             <SubscriptionClassName>xContentSubscriptions</SubscriptionClassName>             <Schema>                 <Field>                     <FieldName>Type</FieldName>                     <FieldType>int</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>SubscriberLocale</FieldName>                     <FieldType>nchar(10)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>                 <Field>                     <FieldName>DeviceName</FieldName>                     <FieldType>nvarchar(255)</FieldType>                     <FieldTypeMods>not null</FieldTypeMods>                 </Field>             </Schema>             <EventRules>                 <EventRule>                     <RuleName>xContentSubscriptionsEventRule</RuleName>                     <Action>                          SELECT dbo.xContentNotificationsNotify(s.SubscriberId, s.DeviceName, s.SubscriberLocale, e.Type, e.Message)                          FROM xContentEvents e                         INNER JOIN xContentSubscriptions s ON                                      e.Type = s.Type                                     and e.Locale = s.SubscriberLocale                                     and GetUtcDate() > e.DeliveryTime                     </Action>                     <EventClassName>xContentEvents</EventClassName>                 </EventRule>             </EventRules>         </SubscriptionClass>     </SubscriptionClasses>     <NotificationClasses>         <NotificationClass>             <NotificationClassName>xLiveNotifications</NotificationClassName>             <Schema>                 <Fields>                     <Field>                         <FieldName>Type</FieldName>                         <FieldType>int</FieldType>                     </Field>                     <Field>                         <FieldName>Flags</FieldName>                         <FieldType>smallint</FieldType>                     </Field>                     <Field>                         <FieldName>Data</FieldName>                         <FieldType>nvarchar(255)</FieldType>                     </Field>                     <Field>                         <FieldName>Sender</FieldName>                         <FieldType>nchar(16)</FieldType>                     </Field>                     <Field>                         <FieldName>Subscriber</FieldName>                         <FieldType>nchar(16)</FieldType>                     </Field>                     <Field>                         <FieldName>TitleName</FieldName>                         <FieldType>nvarchar(30)</FieldType>                     </Field>                 </Fields>             </Schema>             <ContentFormatter>                 <ClassName>XsltFormatter</ClassName>                 <Arguments>                     <Argument>                         <Name>XsltBaseDirectoryPath</Name>                         <Value>%_BaseDirectoryPath_%\AppDefinition\Formatters\</Value>                     </Argument>                     <Argument>                         <Name>XsltFileName</Name>                         <Value>xLiveAlerts.xslt</Value>                     </Argument>                 </Arguments>             </ContentFormatter>             <Protocols>                 <Protocol>                     <ProtocolName>MSAlerts60</ProtocolName>                     <Fields>                         <Field>                             <FieldName>NotificationId</FieldName>                             <SqlExpression>NotificationId</SqlExpression>                         </Field>                         <Field>                             <FieldName>ToId</FieldName>                             <FieldReference>SubscriberId</FieldReference>                         </Field>                         <Field>                             <FieldName>ContentProviderId</FieldName>                             <SqlExpression>'32763'</SqlExpression>                         </Field>                         <Field>                             <FieldName>ContentProviderUri</FieldName>                             <SqlExpression>'%_RootSite_%'</SqlExpression>                         </Field>                     </Fields>                 </Protocol>                 </Protocols>             <ExpirationAge>PT5M</ExpirationAge>         </NotificationClass>         <NotificationClass>             <NotificationClassName>xContentNotifications</NotificationClassName>             <Schema>                 <Fields>                     <Field>                         <FieldName>Type</FieldName>                         <FieldType>int</FieldType>                     </Field>                     <Field>                         <FieldName>Message</FieldName>                         <FieldType>nvarchar(255)</FieldType>                     </Field>                 </Fields>             </Schema>             <ContentFormatter>                 <ClassName>XsltFormatter</ClassName>                 <Arguments>                     <Argument>                         <Name>XsltBaseDirectoryPath</Name>                         <Value>%_BaseDirectoryPath_%\AppDefinition\Formatters\</Value>                     </Argument>                     <Argument>                         <Name>XsltFileName</Name>                         <Value>xContentAlerts.xslt</Value>                     </Argument>                 </Arguments>             </ContentFormatter>             <Protocols>                 <Protocol>                     <ProtocolName>MSAlerts60</ProtocolName>                     <Fields>                         <Field>                             <FieldName>NotificationId</FieldName>                             <SqlExpression>NotificationId</SqlExpression>                         </Field>                         <Field>                             <FieldName>ToId</FieldName>                             <FieldReference>SubscriberId</FieldReference>                         </Field>                         <Field>                             <FieldName>ContentProviderId</FieldName>                             <SqlExpression>'32763'</SqlExpression>                         </Field>                         <Field>                             <FieldName>ContentProviderUri</FieldName>                             <SqlExpression>'%_RootSite_%'</SqlExpression>                         </Field>                     </Fields>                 </Protocol>                 </Protocols>             <ExpirationAge>PT5M</ExpirationAge>         </NotificationClass>     </NotificationClasses>     <Providers>         <NonHostedProvider>             <ProviderName>xLiveEP</ProviderName>         </NonHostedProvider>         <NonHostedProvider>             <ProviderName>xContentEP</ProviderName>         </NonHostedProvider>         <NonHostedProvider>             <ProviderName>xTitleEP</ProviderName>         </NonHostedProvider>     </Providers>     <Generator>         <SystemName>%_NSSystem_%</SystemName>     </Generator>     <Distributors>         <Distributor>             <SystemName>%_NSSystem_%</SystemName>             <QuantumDuration>PT15S</QuantumDuration>         </Distributor>     </Distributors>     <ApplicationExecutionSettings>         <QuantumDuration>PT15S</QuantumDuration>         <PerformanceQueryInterval>PT5S</PerformanceQueryInterval>     </ApplicationExecutionSettings> </Application> The ADF file defines three different event classes. The first is for the chronicle table that stores the mapping between title ids and title names. It creates a chronicle table for storing the data, and defines an event by which title name mappings can be created or inserted. This is the mechanism that title manager uses to keep the title data current. This table also needs to be initialized with data when the application is first created. The data is stored in SQL server, so it persists across restarts and reboots.  The second event class is the one defining live events. These define how events sent from Presence are stored in the SQLNS application. These events will also be inserted by the Alerts NT service that will reside locally on the SQLNS box called XEvents, consuming the custom Alert messages from Presence, and generating OLEDB calls to SQL SPs to insert events.   The third event class defines content alerts, which are simpler than the live events, and envisioned to be inserted into the system by producers of xbox.com. These messages will alert users to new games, levels, and any other type of content information that is deemed to be relevant to the alerts system.  The subscription class describes the events that users can subscribe to. In this case, there is only one subscription class covering logon events. A user that subscribes will store their locale and device information as part of their subscription, and the subscription also defines how events are converted into notifications via the EventRule element.  The notification class describes what data comprises the alerts, how they are formatted, and how they are delivered. It defines an XSLT used to transform the notification XML into the actual Alert text as part of the ContentFormatter aggregate. The notification class also defines the notifications to be delivered via the MSAlerts protocol, and the additional fields required for that protocol to be used.  Finally, the ADF file defines the event providers used in the system. This section is not strictly necessary, as both event sources are calling SQL SPs directly, however this section defines a non-hosted provider for documentation purposes.  Interfacing with .NET Alerts One of the topics glossed over in the above description of the SQLNS application is the interface with .NET Alerts. The config file and ADF file both refer to the MSALERTS HTTP provider, but there are no additional details of how this provider is actually implemented.  The .NET Alerts team has implemented a custom alerts protocol based on the build in HTTP Protocol provided as part of the SQLNS solution. The new protocol is written in C#, and exposed via the Microsoft.Alerts.NotificationServices.AlertsDeliveryProtocol.dll assembly. Future Alerts  The discussion in section 9 focused on logon and messaging alerts. There is no doubt that new features will cause there to be the need for additional alert types and subscriptions in the future. There will be two types of alert types added to the SQLNS application External Alerts The first of this type of alerts is what the XPlace team is referring to as their content alerts. These alerts will form a new alerts subscription in the SQLNS application, and will subscribed to separately from live alerts through the front end UI on the xbox.com website. The events for this type of external alerts will be most likely generated via an internal tool that a producer or similar can run at their desktop to create notifications for the service. Adding new external alerts should not require any code changes to core XBOX Live services. They should be completely supported via changes to the SQLNS config file and ADF file, and rebuilding the SQLNS application. It is conceivable that the operations team could undertake this kind of change out of band from the Live teams normal release cycle.  Core Service Alerts The other type of alerts will be service generated alerts similar to live alerts where the events are generated by other XBOX Live services. This includes features like alerts tied to messaging, teams, tournaments, or other new features. Supporting these alerts will likely mean code changes in the services that are sourcing the events, and potentially protocol changes and changes to the Alerts service that runs on the SQLNS machine in addition to the config and ADF file changes. These types of alerts will be tied to the Live teams release schedules due to the impact across the network.  Security This section should cover potential security issues and how these will be addressed.  This section should consider at a minimum the threat groupings (STRIDE) put together by the Secure Windows Initiative team.  For more information on security, see the SWI team web site at   HYPERLINK "http://swiweb"  http://swiweb .  The STRIDE groupings are detailed in the sections below: Spoofing Identity An example of user identity spoofing is the breaching of a user's authentication information. In this case, the hacker has obtained the user's personal information or something that enables him or her to replay the authentication procedure. Spoofing threats are usually associated with a wily hacker being able to impersonate a valid system user or resource to get access to the system and thereby compromise system security. Tampering with Data Tampering with data involves the malicious modification of system or user data with or without detection. An unauthorized change made to stored or in-transit information, the formatting of a hard disk, the introduction by a malicious intruder of an undetectable network packet in a communication, and an undetectable change made to a sensitive file are all examples of tampering threats Repudiability  Repudiability threats are associated with users malicious or otherwise who can deny performing an action without administrators having any way to prove otherwise. An example of a repudiability threat is a user performing an illegal operation in a system that lacks the ability to trace such operations. Information Disclosure Information disclosure threats involve the compromising of private or business-critical information through the exposure of that information to individuals who are not supposed to see it. A user's ability to read a file that she or he was not granted access to and an intruder's ability to read data in transit between two computers are both disclosure threats. Note that this threat differs from a spoofing threat in that in this case the perpetrator gets access to the information directly rather than by having to appear as a legitimate user. Denial of Service (DoS) Denial of service (DoS) threats when carried out deny service to valid users for example, by making the system temporarily unavailable or unusable or by forcing a reboot or restart of the user's machine. You must protect against certain types of DoS threats simply to improve system availability and reliability. Other types of DoS threats, however, are very hard to protect against; at a minimum, you should identify and rationalize such threats. Elevation of Privilege In this type of threat, an unprivileged user gains privileged access and thereby has sufficient access to compromise or destroy the entire system. The more dangerous aspect of such threats is the compromising of the system in undetectable ways whereby the user can take advantage of privileges without the knowledge of system administrators. Elevation of privilege threats include those situations in which an attacker has effectively penetrated all system defenses and become part of the trusted system itself at that point, the attacker can cause extreme system damage. Operations This section is owned by an Operations Program Manager, but is written as a team effort by all members of the component team   PM, Dev, Test, & Ops. Events This section details all events that may be written to any of the OS event logs   primarily but not constrained to the System, Application, and Security logs. Events must be written at any point where a response is necessary from an resource external to the component.  Events are the triggers for actions   corrective or preventative, machine or human.  If an event does not directly trigger an action, consideration should be given as to whether there is a better way to provide the information. Events should contain enough information to be reasonably intuitive.  Events that do not utilize the description field are not intuitive. Event List: Event ID Source Category Description 50100 Information The Xbox KDC has started. Text Logging This section details the items that will be written to the text logs. Text logs are used as a record of interactions with Xboxes and other components of the Xbox Online service.  The text logs will be utilized for a number of purposes, including debugging and data mining. Text logs are not processed in real-time, therefore they cannot be used to trigger corrective or preventative action.  If that is necessary, an event should be written to the event log. Sample Text Log: #Xbox Online Log Version 1.0 #Date: 01-01-2002 09:00:00 #Logged By: server,servicename 00:00:01,10.1.1.1,xbox_id,player_id,match,game,gamemode,result Performance Counters This section details all performance counters that will be exposed by the component. Performance counters serve several purposes: Real-time monitoring Baselining and capacity planning Any item worthwhile of a performance counter should likely have more than one counter.  For instance, a Matchmaking server will have a counter for  Active Matchmaking Sessions .  Logical siblings would be  Average Active Matchmaking Sessions  and  Peak Active Matchmaking Sessions All APIs that affect eventing, text logging, or performance monitoring should be detailed here.  Examples include: SetTextLoggingMode(mode) Where mode = Default, Verbose, Debug ConsolidateEvents(event,duration) Where event = Event we want to consolidate to avoid log flooding And duration = how long consolidation should remain in effect Interactions All interactions with other components of the Xbox Online service should be called out here.  This includes the following: Other components that rely on this component Components that are relied upon by this component In each case, the effect of a failed interaction should be described. Usability Issues Call out issues that need to be determined by usability or other testing. External use This section should cover if/how the feature can be hosted, supported, or maintained by third parties.  For example, can a game publisher host their own content download servers and if so   How? What technologies are required?  Do we give then code? Etc. Dependencies If needed:  This section should cover any Internal / External dependencies that the feature has.  This section should also address schedule issues with the dependencies. International If needed:  This section should detail any considerations that should be made for International (all non-English Languages). This could include detailing encoding of data on the wire, how strings are stored in the databases, considerations for UI, Legal, etc. Terms Terms required in the TCRs, Required UI and Recommended Practices will be in  Terminology.doc User Interface What UI elements will have to pass through localization. Technical Certification Requirements This section should outline all client and server certification requirements imposed by the feature. Required UI This section should outline all Required UI that the game developer will have to follow. Policy Any policy decisions should be here. Recommended Practices This section should outline the recommended practices that are not TCRs or Required UI, but still nice to consider. Samples Each sample in the XDK should be described here. Any parts of the feature that are cut from the spec should be moved to this section for consideration in future releases. Revision History Changes made Author 4/1/2003 First Draft phansen Microsoft Confidential. |t|ht`tV|V| gd_!A gd_!A gd_!A sokoc[ gdul1 gdul1 Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\alerts\test\Xbox Live Alerts Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Sean Wohlgemuth Xbox Live Test Plan Template.dot Sean Wohlgemuth Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags placeof Contents  TOC \o "1-4" \h \z \u   HYPERLINK \l "_Toc74719417"  Table of Contents  PAGEREF _Toc74719417 \h   HYPERLINK \l "_Toc74719418"  Summary  PAGEREF _Toc74719418 \h   HYPERLINK \l "_Toc74719419"  Schedule  PAGEREF _Toc74719419 \h   HYPERLINK \l "_Toc74719420"  Goals  PAGEREF _Toc74719420 \h   HYPERLINK \l "_Toc74719421"  Non-Goals  PAGEREF _Toc74719421 \h   HYPERLINK \l "_Toc74719422"  Related Documents  PAGEREF _Toc74719422 \h   HYPERLINK \l "_Toc74719423"  Functional Testing  PAGEREF _Toc74719423 \h   HYPERLINK \l "_Toc74719424"  Summary  PAGEREF _Toc74719424 \h   HYPERLINK \l "_Toc74719425"  Test Case Matrix  PAGEREF _Toc74719425 \h   HYPERLINK \l "_Toc74719426"  7.2.1 New Test Cases per Milestone  PAGEREF _Toc74719426 \h   HYPERLINK \l "_Toc74719427"  7.2.1.1 Functional Configuration Database Test Cases  PAGEREF _Toc74719427 \h   HYPERLINK \l "_Toc74719428"  7.2.2 Existing Reusable Test Cases  PAGEREF _Toc74719428 \h   HYPERLINK \l "_Toc74719429"  7.2.2.1 Functional Content Alert Test Cases  PAGEREF _Toc74719429 \h   HYPERLINK \l "_Toc74719430"  7.2.2.2 Functional Live Alerts Test Cases  PAGEREF _Toc74719430 \h   HYPERLINK \l "_Toc74719431"  7.2.2.3 Functional Title Event Test Cases  PAGEREF _Toc74719431 \h   HYPERLINK \l "_Toc74719432"  7.2.2.4 Functional Xevents Test Cases  PAGEREF _Toc74719432 \h   HYPERLINK \l "_Toc74719433"  7.2.2.5 Functional Integration Test Cases  PAGEREF _Toc74719433 \h   HYPERLINK \l "_Toc74719434"  Stress Testing  PAGEREF _Toc74719434 \h   HYPERLINK \l "_Toc74719435"  Revision History  PAGEREF _Toc74719435 \h  Summary M1 Milestone:  For this milestone, the only alerts service change is the integration of the configuration database to load configuration settings as opposed to the current local configuration file method that is in use today. M2 Milestone: TBD Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M1 Milestone: Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases. There is no required stress testing for M1 so the  Test Stress Code Complete  and  Test Stress Complete  deliverables do not apply to this milestone. M2 Milestone: TBD Goals M1 Milestone:   Rerunning existing tests against the Xevents in-house server will validate that there has been no behavior change in the server since the previous release.  The new test cases developed with validate the proper integration of the configuration database technology into the alerts server for loading and changing configuration settings. M2 Milestone: TBD Non-Goals M1 Milestone:   Stress is not a goal for this milestone. M2 Milestone: TBD Related Documents Xbox Live Alerts (Dev Spec) ($private\doc\server\alerts\Alerts.doc) Functional Testing Summary The Alerts server uses an in-house server named Xevents to process UDP packets send from both the notification and presence servers.  Xevents then puts these events into a SQL Notifications Services (SQLNS) system for processing.  If a user has a subscription for the alert being generated that alert is formatted into the proper language and handed of the MSN Alerts Service for delivery.  Content alerts will be injected directly into SQLNS for processing.  Subscriptions for alert types are setup by an Xbox.com web interface and the Alerts Widget.  Testing will focus around the Xevents service as the point of entry for most test cases and SQLNS as the point of entry for content alerts and title string population.  The test methodology will be to have the generated alerts be handed off for delivery back to the test application vs. the MSN Alerts service.  Once the test application receives the alerts, they will be validated against what was expected. Test Case Matrix New Test Cases per Milestone Functional Configuration Database Test Cases M1 Milestone:  P_ConfigDB_Initialize_Setting_Port Using the management commands, verify that the port setting matches what is in the configuration database after server has initialized. P_ConfigDB_Initialize_Setting_Buffers Using the management commands, verify that the buffers setting matches what is in the configuration database after server has initialized. P_ConfigDB_Initialize_Setting_Threads Using the management commands, verify that the threads setting matches what is in the configuration database after server has initialized. P_ConfigDB_Initialize_Setting_Alerts Using the management commands, verify that the alerts setting matches what is in the configuration database after server has initialized. P_ConfigDB_Reconfigure_Setting_Port Using the management commands, snapshot the current port setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect. P_ConfigDB_Reconfigure_Setting_Buffers Using the management commands, snapshot the current buffers setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect. P_ConfigDB_Reconfigure_Setting_Threads Using the management commands, snapshot the current threads setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect. P_ConfigDB_Reconfigure_Setting_Alerts Using the management commands, snapshot the current alerts setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect. P_ConfigDB_Reconfigure_Undo_Setting_Port Using the management commands, snapshot the current port setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect.  Now change the setting back to the original value and using the management commands, verify that it is set back to the original value and does not require a restart of the service. P_ConfigDB_Reconfigure_Undo_Setting_Buffers Using the management commands, snapshot the current buffers setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect.  Now change the setting back to the original value and using the management commands, verify that it is set back to the original value and does not require a restart of the service. P_ConfigDB_Reconfigure_Undo_Setting_Threads Using the management commands, snapshot the current threads setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect.  Now change the setting back to the original value and using the management commands, verify that it is set back to the original value and does not require a restart of the service. P_ConfigDB_Reconfigure_Undo_Setting_Alerts Using the management commands, snapshot the current alerts setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect.  Now change the setting back to the original value and using the management commands, verify that it is set back to the original value and does not require a restart of the service. M2 Milestone: TBD Existing Reusable Test Cases Functional Content Alert Test Cases P_Verify_xContentAlerts_DADK Send content alert to a subscriber in the DADK locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_DEAT Send content alert to a subscriber in the DEAT locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_DECH Send content alert to a subscriber in the DECH locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_DEDE Send content alert to a subscriber in the DEDE locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ELGR Send content alert to a subscriber in the ELGR locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ENAU Send content alert to a subscriber in the ENAU locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ENCA Send content alert to a subscriber in the ENCA locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ENGB Send content alert to a subscriber in the ENGB locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ENIE Send content alert to a subscriber in the ENIE locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ENNZ Send content alert to a subscriber in the ENNZ locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ENUS Send content alert to a subscriber in the ENUS locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ESCO Send content alert to a subscriber in the ESCO locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ESES Send content alert to a subscriber in the ESES locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ESMX Send content alert to a subscriber in the ESMX locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_FIFI Send content alert to a subscriber in the FIFI locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_FRBE Send content alert to a subscriber in the FRBE locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_FRFR Send content alert to a subscriber in the FRFR locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ITIT Send content alert to a subscriber in the ITIT locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_JAJP Send content alert to a subscriber in the JAJP locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_KOKR Send content alert to a subscriber in the KOKR locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_NBNO Send content alert to a subscriber in the NBNO locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_NLBE Send content alert to a subscriber in the DADK locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_NLNL Send content alert to a subscriber in the NLNL locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_PTPT Send content alert to a subscriber in the PTPT locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_SVSE Send content alert to a subscriber in the SVSE locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ZHHK Send content alert to a subscriber in the ZHHK locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ZHSG Send content alert to a subscriber in the ZHSG locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_ZHTW Send content alert to a subscriber in the ZHTW locale and validate that it was delivered using the proper locale template. P_Verify_xContentAlerts_MinContentType Send content alert of type System.Int32.MinValue to a subscriber and validate that the content alert was delivered. P_Verify_xContentAlerts_MaxContentType Send content alert of type System.Int32.MaxValue to a subscriber and validate that the content alert was delivered. P_Verify_xContentAlerts_EmptyMessage Send content alert to a subscriber with a message length of 0 and validate that the content alert was delivered. P_Verify_xContentAlerts_MaxMessage Send content alert to a subscriber with a message length of 255 and validate that the content alert was delivered. N_Verify_xContentAlerts_TooBigMessage Send content alert to a subscriber with a message length of 256 and validate that the content alert was delivered but that only 255 characters were present in the message string upon delivery. P_Verify_xContentAlerts_UnicodeMessage Send content alert to a subscriber with the message being non-ANSI characters and validate the message contents on delivery. P_Verify_xContentAlerts_Message_1Day_InThePast Send content alert to a subscriber where the delivery date is the current time minus 1 day.  Confirm that the message is still delivered. P_Verify_xContentAlerts_Message_2Minutes_InTheFuture Send content alert to a subscriber where the delivery date is 2 minutes in the future.  Confirm that the message is not delivered before the 2 minutes has elapse and within the standard timeout period after the 2 minutes have elapsed. Functional Live Alerts Test Cases P_Verify_xLiveAlerts_DADK Send all defined live alert types to a subscriber in the DADK locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_DEAT Send all defined live alert types to a subscriber in the DEAT locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_DECH Send all defined live alert types to a subscriber in the DECH locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_DEDE Send all defined live alert types to a subscriber in the DEDE locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ELGR Send all defined live alert types to a subscriber in the ELGR locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ENAU Send all defined live alert types to a subscriber in the ENAU locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ENCA Send all defined live alert types to a subscriber in the ENCA locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ENGB Send all defined live alert types to a subscriber in the ENGB locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ENIE Send all defined live alert types to a subscriber in the ENIE locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ENNZ Send all defined live alert types to a subscriber in the ENNZ locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ENUS Send all defined live alert types to a subscriber in the ENUS locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ESCO Send all defined live alert types to a subscriber in the ESCO locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ESES Send all defined live alert types to a subscriber in the ESES locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ESMX Send all defined live alert types to a subscriber in the ESMX locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_FIFI Send all defined live alert types to a subscriber in the FIFI locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_FRBE Send all defined live alert types to a subscriber in the FRBE locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_FRFR Send all defined live alert types to a subscriber in the FRFR locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ITIT Send all defined live alert types to a subscriber in the ITIT locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_JAJP Send all defined live alert types to a subscriber in the JAJP locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_KOKR Send all defined live alert types to a subscriber in the KOKR locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_NBNO Send all defined live alert types to a subscriber in the NBNO locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_NLBE Send all defined live alert types to a subscriber in the NLBE locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_NLNL Send all defined live alert types to a subscriber in the NLNL locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_PTPT Send all defined live alert types to a subscriber in the PTPT locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_SVSE Send all defined live alert types to a subscriber in the SVSE locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ZHHK Send all defined live alert types to a subscriber in the ZHHK locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ZHSG Send all defined live alert types to a subscriber in the ZHSG locale and validate that they were delivered using the proper locale template. P_Verify_xLiveAlerts_ZHTW Send all defined live alert types to a subscriber in the ZHTW locale and validate that they were delivered using the proper locale template. Functional Title Event Test Cases P_TitleEvent_ValidLocale Call entry point to add a title string to a title id with a valid locale then verify in the database that the title string has been added. N_TitleEvent_InvalidLocale (35657 punted to M1) Call entry point to add a title string to a title id with an invalid locale then verify in the database that the title string was NOT added. P_TitleEvent_UpdateExisting Call entry point to add a title string to a title id.  Then call entry point to add a title string again for the same title id and same locale with a different string value.  Verify in the database that the later string is the one that is now updated in the database. P_TitleEvent_MultipleLocales Call entry point to add a title string for valid locale A for a title id.  Then call entry point to add a title string for valid locale B for the same title id.  Verify that there are 2 title strings in the respective locales for the title id. P_TitleEvent_MaxTitleName Call entry point to add a title string with 30 characters to a title id.  Verify in the database that the title string has been added. P_TitleEvent_TooBigTitleName Call entry point to add a title string with 31 characters to a title id.  Verify in the database that the title string has been added but is only 30 characters with the last character having been stripped off. P_TitleEvent_EmptyTitleName Call entry point to add a title string with 0 characters to a title id.  Verify in the database that there is an entry for the title string but it is empty. Functional Xevents Test Cases P_XEvents_MinTitleId Send Xevents packet with title id set to System.UInt32.MinValue.  Confirm that alert is delivered. P_XEvents_MaxTitleId Send Xevents packet with title id set to System.UInt32.MaxValue.  Confirm that alert is delivered. N_XEvents_InvalidTitleId Send Xevents packet with title id set to a non existent title id.  Confirm that alert is NOT delivered. P_XEvents_MinType Send Xevents packet with type set to System.UInt16.MinValue.  Confirm that alert is delivered. P_XEvents_MaxType Send Xevents packet with type set to System.UInt16.MaxValue.  Confirm that alert is delivered. N_XEvents_InvalidType Send Xevents packet with type set to a type not subscribed to by recipient.  Confirm that alert is NOT delivered.  P_XEvents_MinFlags Send Xevents packet with flags set to System.UInt16.MinValue.  Confirm that alert is delivered. P_XEvents_MaxFlags Send Xevents packet with flags set to System.UInt16.MaxValue.  Confirm that alert is delivered. P_XEvents_EmptyGamertag (Resolved By Design 35378) Send Xevents packet with sender gamertag string set to null.  Confirm that alert is delivered. N_XEvents_StartsWithNumberGamertag (Resolved By Design 35378) Send Xevents packet with sender gamertag string starting with a number.  Confirm that alert is NOT delivered. P_XEvents_MinDefinedGamertag Send Xevents packet with sender gamertag string being only a single Alpha character.  Confirm that alert is delivered. P_XEvents_MaxDefinedGamertag Send Xevents packet with sender gamertag string containing 15 Alpha/Numeric characters.  Confirm that the alert is delivered. P_XEvents_16CharGamertagTruncate Send Xevents packet with sender gamertag string containing 16 Alpha/Numeric characters.  Confirm that the alert is delivered.  Verify that the sender gamertag in the alert has been end truncated to 15 characters.  This case is to deal with a trailing null character however; development has recommended that this be the implementation. N_XEvents_TooBigDefinedGamertag Send Xevents packet with sender gamertag string containing 17 Alpha/Numeric characters.  Confirm that the alert is NOT delivered. N_XEvents_SizeMismatchGamertag Send Xevents packet with a too small size mismatch on the gamertag string length field.  Confirm that the alert is NOT delivered. N_XEvents_SizeMismatchGamertag2 Send Xevents packet with a too large size mismatch on the gamertag string length field.  Confirm that the alert is NOT delivered. N_XEvents_MaxGamertag Send Xevents packet with sender gamertag string containing System.Byte.MaxValue Alpha/Numeric characters.  Confirm that the alert is NOT delivered. N_XEvents_SymbolsGamertag (Resolved By Design 35378) Send Xevents packet with sender gamertag string containing a non valid Xbox Live symbol.  Confirm that the alert is NOT delivered. P_XEvents_MinSenderUserId Send Xevents packet with sender user id set to System.UInt64.MinValue.  Confirm that the alert is delivered. P_XEvents_MaxSenderUserId Send Xevents packet with sender user id set to System.UInt64.MaxValue.  Confirm that the alert is delivered. P_XEvents_EmptyData Send Xevents packet with data field set to 0 bytes.  Confirm the alert is delivered. P_XEvents_MaxData Send Xevents packet with data field set to System.Byte.MaxValue bytes.  Confirm the alert is delivered. N_XEvents_DuplicateRecipient (Resolved By Design 35382) Send Xevents packet with a duplicate recipient.  Confirm that only one alert is delivered, not two.  P_XEvents_NoRecipient Send Xevents packet with 0 recipients.  Confirm that server does not crash. P_XEvents_MaxRecipients Send Xevents packet with recipients = ((XEvents.XONLINE_MAX_ALERT_SIZE-baseSize)/recipientSize)).  Confirm that alert is delivered. N_XEvents_TooManyRecipients Send Xevents packet with recipients = ((XEvents.XONLINE_MAX_ALERT_SIZE-baseSize)/recipientSize)) + 1.  Confirm that alert is NOT delivered. N_XEvents_WrongWebId Send Xevents packet where the web id does not match the user id during the subscription phase.  Confirm that alert is NOT delivered. N_XEvents_WrongUserId Send Xevents packet where the user id does not match the web id during the subscription phase.  Confirm that alert is NOT delivered. N_XEvents_MissingTitleLocale Send Xevents packet where the locale is missing for the title id.  Confirm that alert is delivered in default locale language (ENUS). N_XEvents_DisabledSubscription Send Xevents packet to user subscription that is disabled.  Confirm that alert is NOT delivered. P_XEvents_MultiSubscriptionValidLocales Send Xevents packet to user subscription that has multiple valid locales.  Confirm that alert is delivered to all subscribed locales. N_XEvents_MultiSubscriptionMissingLocales Send Xevents packet to user subscription that has multiple locales all of which are invalid for that title id.  Confirm that alerts are NOT received. N_XEvents_MultiSubscriptionMixedLocales Send Xevents packet to user subscription that has multiple locales some of which are invalid for that title id.  Confirm that the alerts are only received by valid locales. Functional Integration Test Cases P_CompReminderAlert Subscribe to competition alerts, setup a competition and verify that reminder alerts are generated. P_FriendInviteAlert Subscribe to friends invite alerts, have another person invite you and verify that a friend invite alert is generated. P_FriendGameInviteAlert Subscribe to game invite alerts, have a friend send you a game invite and verify that a game invite alert is generated. P_NonFriendGameInviteAlert Subscribe to game invite alerts, have a non friend send you a game invite and verify that a game invite alert is generated. P_LoginAlert Subscribe to login alerts, have a friend login and verify that a login alert is generated. P_CustomMessageAlert Subscribe to custom alerts, send a MSG_TYPE_TITLE_CUSTOM message and verify that a custom alert is generated. N_NonExportableCustomMessageAlert Subscribe to custom alerts, send a MSG_TYPE_TITLE_CUSTOM message that is flagged as non exportable and verify that a custom alert is generated. P_TeamRecruitAlert Subscribe to team recruit alerts, have another user send a team recruit message and verify that a team recruit alert is generated. P_CompRequestAlert Subscribe to competition request alerts, have another user send a competition request message and verify that a competition request alert is generated.  P_UserBasedLiveAlert Subscribe to live message alerts, have another user send a live message and verify that a live message alert is generated. P_ToolBasedLiveAlert Subscribe to live message alert, send a live message with no user attached and verify that a live message alert is generated. N_NeverFriendInviteAlert Subscribe to friends invite alerts, have another person who is on your never list invite you and verify that a friend invite alert is NOT generated. N_NeverGameInviteAlert Subscribe to game invite alerts, have a non friend who is on your never list send you a game invite and verify that a game invite alert is NOT generated. N_NeverCustomMessageAlert Subscribe to custom alerts, send a MSG_TYPE_TITLE_CUSTOM message from a user on your never list and verify that a custom alert is NOT generated. N_NeverTeamRecruitAlert Subscribe to team recruit alerts, have another user who is on your never list send a team recruit message and verify that a team recruit alert is NOT generated. N_NeverCompRequestAlert Subscribe to competition request alerts, have another user who is on your never list send a competition request message and verify that a competition request alert is NOT generated.  N_NeverUserBasedLiveAlert Subscribe to live message alerts, have another user who is on your never list send a live message and verify that a live message alert is NOT generated. N_SystemMessageAlert Subscribe to title custom alerts, send a system wide or title wide message and verify that a title custom alert is NOT generated. P_SendToMSNAlerts Send an alert through to the MSN Alerts service and visually verify delivery in the MSN messenger client, email and mobile devices. Stress Testing M1 Milestone:  No stress testing will be performed for this milestone due to the functional changes being validated in this timeframe. M2 Milestone: TBD Revision History Changes made Author 06/10/04 First Draft Sean Wohlgemuth Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  |m|\m|m gdrIy zrg_[WSOSOSOSOK gdesA gdesA gdlok gdG#/ gdG#/ gdK=p gdK=p Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\arbitration\Arbitration Dev Spec.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Tournaments Design Doc Title _PID_HLINKSXbox Online Tournaments Design Doc slamb Xbox Online Spec Template.dot slamb Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags PersonName http://www.microsoft.com Xmu.xais document is meant to supplement the two documents:   HYPERLINK "http://sts/Xbox_Online/Specs/Session%20Arbitration.doc"  http://sts/Xbox_Online/Specs/Session%20Arbitration.doc  and   HYPERLINK "http://sts/Xbox_Online/Specs/Trust%20Rating%20Factor.doc"  http://sts/Xbox_Online/Specs/Trust%20Rating%20Factor.doc . It will present more technical details about the implementation of the arbitration feature. Information in the previous two documents will not be repeated here and thus readers are assumed to have read those two documents first. Eventually, information from this document will be integrated into those documents. Architecture The arbitration server service consists of a stateless front door tier and a stateful INH tier.     The front door is a simple IIS application written in C#.  It s primary purpose is to forward requests to the appropriate INH box based on the session id.  It supports 4 different APIs using 4 different URLs: /XArb/Register.ashx: All clients must individually register to be in a session before it can do anything else in the session. The arbitration server retrieves the auth data of the users (and thus the TRF) at this point in time. /XArb/TimeExtend.ashx: This is used to extend the play time of the session if needed. /XArb/ReportResult.ashx: This is the final communication to the arbitration server to report the results of the session (from each client s perspective). /XArb/DebugResult.ashx: This is used for debugging on TestNet to examine the current state of the session. The INH arbitration servers is an in are memory stateful servers,  (similar to presence, but hosted by IIS ) and written in C#. It supports 4 different APIs using 4 different URLs: /XArb/Register.ashx: All clients must individually register to be in a session before it can do anything else in the session. The arbitration server retrieves the auth data of the users (and thus the TRF) at this point in time. /XArb/TimeExtend.ashx: This is used to extend the play time of the session if needed. /XArb/ReportResult.ashx: This is the final communication to the arbitration server to report the results of the session (from each client s perspective). /XArb/DebugResult.ashx: This is used for debugging on TestNet to examine the current state of the session.    It supports the same list of URL as the front door. Each client individually registers with the arbitration server for all APIs. The arbitration server records everybody s impression of what happened at the end of the session and then determines and submits the final arbitrated stats and competition bundles to the stats and query service respectively. Then the arbitration server updates all participants trust rating factor based on its interpretation of what happened in the session. The submitted trust rating changes are batched up to decrease traffic to UODB (which holds the TRF). The KDC places the TRF in the auth data portion of the Kerberos ticket such that it can be used by any backend service. For scalability reasons, we must support multiple arbitration INH servers. But since the state of each arbitrated session is maintained in memory, all clients in the same session must always talk to the same arbitration server.  This load balancing is performed by partitioning sessions into buckets The SG can do this load balancing for us if we make the arbitration client talk to different arbitration service ports based on the value of (SessionID mod 120) and forwarding incoming requests to the server associated with each bucket. The SG can then further decide which one of the N Arbitration servers to send the request to based on the value of the port mod N. Section 5 discusses this in more detail. The UDP Adaptor is a separate NT service that lives on the Arbitration servers and listens at the same port as the IIS server except it listens for UDP packets. It converts the UDP requests to an HTTP Post on the local front door and turns the HTTP response back to a UDP reply packet. Trust Rating Factor Many numbers are recorded per user per title: SuccessfulSessionCount (C1): The number of normal successful arbitrated sessions this user played in for this title, where a majority quorum agreed on the session results. MinoritySessionCount (C2): The number of abnormal but successful arbitrated sessions this user played in for this title, where no majority quorum agreed on the session results, but a minority quorum did agree. FailedSessionCount (C3): The number of failed arbitrated sessions this user played in for this title, where not even a minority quorum agreed on the results. ProblematicSessionCount (C4): The number of times this particular user registered in a session in which some user in the session reported lost connectivity during the game session. Any user in the session reporting connectivity problems will result in all users in the session getting this counter incremented. UDPReportCount (C5): The number of times this particular user registered in a session in which some user need to send their session report in UDP. Any user reporting in UDP will result in all users in the session getting this counter incremented. This typically implies that some user in the session is packet flooding the victim. DisconnectCount (C6): The number of times this particular user registered in a session but never reported results for that session later. A  Disconnect  only affects the user that didn t report; all other users are unaffected (except for the fact that the session might become a Non Majority or failed Session due to many missing reports). Type1SuspicioustCount (C7): The number of times this particular user registered in a session that had type 1 suspicious activity reported in the game session. Type2SuspicioustCount (C8): The number of times this particular user registered in a session that had type 1 suspicious activity reported in the game session. Type3SuspicioustCount (C9): The number of times this particular user registered in a session that had type 1 suspicious activity reported in the game session. i_TotalSessions: The un-weighted un-decayed integer number of times this particular user registered in a session. i_TotalSessionDisconnects: The un-weighted un-decayed integer number of times this particular user registered in a session by failed to report results or voluntarily quit the session. i_TotalCompetitions: The un-weighted un-decayed integer number of times this particular user was involved (or suppose to be involved) in a competition session. This number is incremented by either the arbitration server (when an actual competition session is played), or the query server (when the user or it s opponent never showed up). i_TotalCompetitionNoShows: The un-weighted un-decayed integer number of times this particular user never showed up for a competition session. This number is incremented only by the query server (when the user never showed up for a competition session). i_SessionBase: The sum of this number for all users of a particular title will reveal how many total arbitrated sessions were played for this title. The individual numbers do NOT reveal anything meaningful about the particular user. i_SessionXboxCount: The sum of this number for all users of a particular title will reveal the sum of all the non-unique number of Xboxes in all sessions for this title. The individual numbers do NOT reveal anything meaningful about the particular user. The sum of this number divided by the sum of i_SessionBase will reveal the average number of Xboxes that play in an arbitrated game session. i_SessionSeconds: The sum of this number for all users of a particular title will reveal the sum of all the played seconds in all sessions for this title. The individual numbers do NOT reveal anything meaningful about the particular user. The sum of this number divided by the sum of i_SessionBase will reveal the average number of seconds in an arbitrated game session for each title. i_SessionFreeForAll: The sum of this number for all users of a particular title will reveal how many total free for all arbitrated sessions were played for this title. The individual numbers do NOT reveal anything meaningful about the particular user. The sum of this number divided by the sum of i_SessionBase will reveal the ratio of free for all arbitrated game sessions. Note that for each session, exactly one of four counters C1, C2, C3, C4, and C5 will get incremented. C6, C7, C8, and C9 are independent counters that will get independently get incremented if the situation happens. Also, C6 is the only counter that can be modified for specific users. All other counters are either modified for all users in the session, or not at all for all users in the session. We want to decay the value of these counters such that what happens recently is more important than what happen in the past. This means that along with our counters C1 through C9, we will store a timestamp T. The effective counter value at time Tnow is: C * Decay(Tnow - T) Any stored procedure that needs to use these counter values should use the above formula to compute C. Each time we need to modify the counter value by delta we compute: C = C * Decay(Tnow - T) + Delta T = Tnow The Decay function should probably be: Decay(DeltaT) = Exp(-( DeltaT / Lambda )) With Lambda being a positive constant that kind-of represents the "Half-Life" of how fast the decaying happens. When Lambda amount of time passes, the value of V decays to (1/e) of its original value (where e = 2.7128 ). The default value for Lambda would be 3 months. Besides the decay described above, all C value increments are amplified by the TrustModificationFactor before the arbitration server makes the stored procedure call to change the C values. The TrustModificationFactor that all counters are modified by is a weight that is logarithmically proportional to the length of the game session. The value is: TrustModificationFactor = 1.0 + Math.Log ( Math.Max ( 1.0 , sessionSeconds / i_BaseSessionTime ) ) Note that this value will be 1 for all sessions that are shorter than i BaseSessionTime (default is 2 minutes), and grow logarithmically with the length of the game session. The length of the game session is defined as the time the session was created to the time of the first report submission. In addition to the above TrustModificationFactor , we also multiply the counter modification by a  User Competition Amplification  factor (say 2) or a  Publisher Competition Amplification  (say 4) factor when the game is a tournament session. A user s trust rating factory (TRF) will be positively influenced by the C1 counter and negatively influenced by all the other counters. The ratio of how much each negative counter will influence the TRF will be adjusted based how large the summation of that counter is for all users for that title. The ratio will be represented by the numbers R2, R3, R4, R5, R6, R7, R8 and R9 and will be re-computed on a daily basis. The Preliminary TRF (PTRF) will be computed using the following formula (this will be the value stored in the Kerberos ticket auth data): PTRF = C1   (R2 * C2 + R3 * C3 + R4 * C4 + R5 * C5 + R6 * C6 + R7 * C7 + R8 * C8 + R9 * C9) The Ri values are a weight modification factor that gets updated daily using the formula: WSUM = W2 + W3 + W4 + W5 + W6 + W7 + W8 + W9 Ri = (Wi * S1) / (WSUM * Si) Wi represents a weighting factor associated with each negative counter to advise us on how heavy to weigh that particular negative activity. Typically, the Wi values are always 1.0 for all negative activity except for custom suspicious info. Si is the sum of Ci for all users for that title. The value of all Ri is chosen such that the sum of PTRF for all users is 0. Note that the Ri values are also chosen such that the more people that get involved in a negative activity, the less penalty is applied for that particular negative activity. The final TRF number for each user is computed on the arbitration server using the following formula: TRF = B + ( 1 / (1 + exp( - PTRF/ K ) ) ) B is the  BaseUserTrust  that rewards you a basic trust factor for simply being a user. B will be configurable on a per title basis. As an example, when B is 1, every users TRF value will be between 1 and 2. This will make it such that we place more trust on 2 very untrustworthy users compared to one very trustworthy user. K is the constant that determines the slope of the Fermi function used in computing TRF. K will be adjusted daily to be: K = S1 / TotalNumberOfUsers Each Xbox gets a TRF value of the average TRF value for all users playing on that Xbox. Arbitration is performed using Xboxes as units of arbitration. The arbitration server will simply compute the sum of all TRF values for all Xboxes in a session and a majority quorum is simply a set of Xboxes where the sum of the TRF for the Xboxes is greater that 50% of the total TRF. A minority quorum is simply a set of Xboxes where the sum of the TRF for the Xboxes is less than or equal to 50% but greater than MinorityQuorum Percentage (say 25%) of the total TRF. The arbitration servers will update the Si, Ri, K, and other summation values every 24 hours for all titles. The new values will get stored back into t_title_trust_constants.  UODB Database Schema The following table is created in UODB to store information needed to compute the TRF for each user for each title. The table is partitioned on bi_user_puid.     create table t_user_trust_ratings     (         bi_user_puid                         bigint    not null,         i_title_id                           int       not null,         f_C1_SuccessfulSessionCount          real      not null default(0),         f_C2_MinoritySessionCount            real      not null default(0),         f_C3_FailedSessionCount              real      not null default(0),         f_C4_ProblematicSessionCount         real      not null default(0),         f_C5_UDPReportSessionCount           real      not null default(0),         f_C6_DisconnectCount                 real      not null default(0),         f_C7_Type1SuspiciousCount            real      not null default(0),         f_C8_Type2SuspiciousCount            real      not null default(0),         f_C9_Type3SuspiciousCount            real      not null default(0),         i_TotalSessions                      int       not null default(0),         i_TotalSessionDisconnects            int       not null default(0),         i_TotalCompetitions                  int       not null default(0),         i_TotalCompetitionNoShows            int       not null default(0),         i_SessionBase                        int       not null default(0),         i_SessionXboxCount                   int       not null default(0),         i_SessionSeconds                     int       not null default(0),         i_SessionFreeForAll                  int       not null default(0),         constraint pk_user_trust_ratings primary key (             bi_user_puid,         i_title_id         ),         constraint fk_UserTrustRatings_Users foreign key (             bi_user_puid                     ) references dbo.t_users (             bi_user_puid                     ) not for replication,                  constraint fk_UserTrustRatings_Titles foreign key (             i_title_id                     ) references dbo.t_titles (             i_title_id                     ) not for replication,                  -- WEBSTORE                 si_hash_bucket                       smallint  not null default(0),          dt_Change_datetime                   datetime  not null default(getutcdate()),     ) The following table is created in UODB to store the constants needed to compute TRF for each title. This table is not partitioned.     create table t_title_trust_constants     (         i_title_id                    int        not null,         f_W2                          float      not null default(1.0),         f_W3                          float      not null default(1.0),         f_W4                          float      not null default(1.0),         f_W5                          float      not null default(1.0),         f_W6                          float      not null default(1.0),         f_W7                          float      not null default(0.0),         f_W8                          float      not null default(0.0),         f_W9                          float      not null default(0.0),         f_BaseUserTrust               float      not null default(1.0),         f_MinorityQuorum              float      not null default(0.25),         f_UserCompetitionAmp          float      not null default(2.0),         f_PublisherCompetitionAmp     float      not null default(4.0),         i_Lambda                      int        not null default(2592000),         i_BaseSessionTime             int        not null default(120),         -- The following numbers are summations from t_user_trust_ratings         f_S1                          float      not null default(0.0),         f_S2                          float      not null default(0.0),         f_S3                          float      not null default(0.0),         f_S4                          float      not null default(0.0),         f_S5                          float      not null default(0.0),         f_S6                          float      not null default(0.0),         f_S7                          float      not null default(0.0),         f_S8                          float      not null default(0.0),         f_S9                          float      not null default(0.0),         bi_TotalSessions              bigint     not null default(0),         bi_TotalSessionDisconnects    bigint     not null default(0),         bi_TotalCompetitions          bigint     not null default(0),         bi_TotalCompetitionNoShows    bigint     not null default(0),         bi_SessionBase                bigint     not null default(0),         bi_SessionXboxCount           bigint     not null default(0),         bi_SessionSeconds             bigint     not null default(0),         bi_SessionFreeForAll          bigint     not null default(0),         i_TotalUsers                  int        not null default(0),         -- The following are the scaled weights computed from summation         f_R2                          float      not null default(2.0),         f_R3                          float      not null default(8.0),         f_R4                          float      not null default(16.0),         f_R5                          float      not null default(32.0),         f_R6                          float      not null default(64.0),         f_R7                          float      not null default(0.0),         f_R8                          float      not null default(0.0),         f_R9                          float      not null default(0.0),         f_K                           float      not null default(1.0),         -- weights for determining a titles star rating         ti_lower_bottom               tinyint    not null default(8),         ti_lower_mid                  tinyint    not null default(4),         ti_lower_top                  tinyint    not null default(2),         ti_mid_bottom                 tinyint    not null default(1),         ti_mid_top                    tinyint    not null default(1),         ti_upper_bottom               tinyint    not null default(2),         ti_upper_mid                  tinyint    not null default(4),         ti_upper_top                  tinyint    not null default(8),                 constraint pk_title_trust_constants primary key (     i_title_id         ),         constraint fk_TitleTrustContants_Titles foreign key (             i_title_id                     ) references dbo.t_titles (             i_title_id                     ) not for replication,         -- WEBSTORE         dt_Change_datetime      datetime        not null default(getutcdate()),     ) The Arbitration Server Sessions are load balanced onto a particular stateful arbitration server based on SessionID alone. However, the (TitleID,SessionID,SessionNonce) 20 byte triplet is what is used to uniquely identify an arbitrated session. From the arbitration servers perspective, two sessions with the same SessionID but a different nonce is considered to be completely different sessions. The reason to load balance solely on SessionID is to keep users that play many rounds in the same match session locked on the same arbitration server such that the UODB TRF updates can be batched together more efficiently. Arbitration Logic During the arbitration of a session, there are two commit points. The first commit point is when the stats and tournament bundle to be forwarded to the stats and query front door has been determined and submitted. This commit point will be reached if either: A majority quorum reports the same bundle submission ((The session has timed out) or (all clients have reported results)) and (the bundle that the most (in terms of accumulated TRF) clients agree to satisfy the minority quorum percentage). The second commit point is when everybody s trust rating will be updated. This happens when either one of the two conditions below becomes true: The session has timed out All clients that registered have reported results For the purpose of updating user trust, each session can end with one of the following 4 results: Problematic: If one of the following conditions is true: More than one bundle was submitted for the session At least 1 client reported in UDP At least 1 client reported losing connectivity with another client that did report results Normal: If the session is not problematic and a majority quorum reports the same bundle. Minority: If the session is neither problematic nor normal, and a minority quorum exists for a bundle. Failed: If none of the above is true. Note that a problematic session might still have a majority bundle determined and submitted to the corresponding front doors even though the session is considered problematic. A session times out when the maximum time of all the following times for all clients it finally reached: Client registration call time + MaxSessionSeconds specified in registration + SessionTimeoutExtensionSeconds Client Time Extension call time + MaxSessionSecondsFromNow specified in time extend request + SessionTimeoutExtensionSeconds If a session reaches the second commit point earlier due to all clients reporting results, the above timeout is ignored and the session is left around for an additional TrailingReportRetriesWaitSeconds to enable trailing report retries to still locate this session and not generate a  Session Not Found  error. Wire Protocol In the following wire protocol description, the PUID of an Xbox is used in many places. Xbox PUIDs are not exposed to title developers directly but the XNADDR (which contains the Xbox PUID) of an Xbox is exposed. The arbitration client APIs will most likely accept XNADDRs in the API, but only send the Xbox PUID on the wire. The following data will be sent for an arbitration Registration request (The number in parenthesis is the byte count): ProtocolVersion (2): Will be 1 initially. RequestFlags (2): The following values are defined: 0x0001: Is tournament 0x0002: Time can be extended 0x0004: Session Host used to forward packets 0x0008: Team Membership info included 0x0010: Session is a free for all session 0x0020: Session is a publisher tournament TitleID (4): The title ID of the game being played. SessionID (8): The random session ID handed out by matchmaking SessionNonce (8): A random nonce generated by the match host to uniquely represent this particular arbitrated game round within this session ID. MaxSessionSeconds (2): This time should include any lingering timeout period at the end of the session. The arbitration server will only accept ReportResult request up to MaxSessionSeconds + SessionTimeoutExtensionSeconds from the time of the last user registration. SessionTimeoutExtensionSeconds is typically 60 seconds and is configured in the server ini file. The maximum value that can be specified for MaxSessionSeconds is 3600 (1 hour), the client should check this and assert if value is larger than 3600. NumberOfTeamTickets (1): This and everything after it is only present if team membership info included FirstTeamTicketSizeInBytes (2) FirstTeamTicket (FirstTeamTicketSizeInBytes): This is the signature server signed ticket that contains proof of which Teams a user is a membership of. LastTeamTicketSizeInBytes (2) LastTeamTicket (LastTeamTicketSizeInBytes): This is the signature server signed ticket that contains proof of which Teams a user is a membership of. The team tickets will only be submitted if the session is played on behalf of team statistics or is a team competition. Also, only team tickets for users on the current client will be submitted. The following data will be returned by the arbitration Registration request: NumberOfXboxesThatRegisteredForThisSession (2) PUIDOfFirstXboxThatRegisteredForThisSession (8) TrustworthynessOfFirstXbox(1): Number between 0 to 255 with the least trustworthy Xbox shifted to 0 NumberOfUsersOnFirstXbox (1) XUIDOfFirstUserOnFirstXbox (8+4=12) XUIDOfSecondUserOnFirstXbox (8+4=12) XUIDOfLastUserOnFirstXbox (8+4=12) PUIDOfSecondXboxThatRegisteredForThisSession (8) TrustworthynessOfSecondXbox(1) NumberOfUsersOnSecondXbox (1) XUIDOfFirstUserOnSecondXbox (8+4=12) XUIDOfSecondUserOnSecondXbox (8+4=12) XUIDOfLastUserOnSecondXbox (8+4=12) PUIDOfLastXboxThatRegisteredForThisSession (8): This should be the PUID of the current Xbox making the registration call, unless this Xbox has already registered earlier and is re-registering again. TrustworthynessOfLastXbox(1) NumberOfUsersOnLastXbox (1) XUIDOfFirstUserOnLastXbox (8+4=12) XUIDOfSecondUserOnLastXbox (8+4=12) XUIDOfLastUserOnLastXbox (8+4=12) The following data will be sent for an arbitration TimeExtension request: ProtocolVersion (2): Will be 1 initially. RequestFlags (2): The following values are defined: TitleID (4): The title ID of the game being played. SessionID (8) SessionNonce (8) MaxSessionSecondsFromNow (2) The following data will be returned by the arbitration TimeExtension request: None. An HTTP response will still be sent to acknowledge the receipt of the report, but no response data will be in the HTTP response body. An X-Err HTTP header line will be placed in the response header if an error occurred. The following data will be sent for an arbitration ReportResult request: ProtocolVersion (2): Will be 1 initially. RequestFlags (2): The following values are defined: 0x8000: I voluntarily quit from this game, I ll take disconnect penalty and I m willing to accept stats submission from other players. I can t submit any bundle info myself. The reason I m sending this report is to tell the server about the bad things (like custom suspicious info) that happened in this game. 0x4000: I was a session host during the game 0x2000: I lost connectivity to some peers during game play 0x1000: Lost connectivity info submitted 0x0800: Type 1 suspicious info submitted 0x0400: Type 2 suspicious info submitted  0x0200: Type 3 suspicious info submitted 0x0100: Stats bundle info submitted 0x0080: Tournament bundle info submitted TitleID (4): The title ID of the game being played. SessionID (8) SessionNonce (8) NumberOfXboxesILostConnectivityTo (1): Only present if lost connectivity bit on PUIDOfFirstXboxILostConnectivityTo (8): Only present if lost connectivity bit on  PUIDOfSecondXboxILostConnectivityTo (8): Only present if lost connectivity bit on PUIDOfLastXboxILostConnectivityTo (8): Only present if lost connectivity bit on  Type1SuspiciousInfoMessageLength (1): Only present if Type 1 suspicious info bit on Type1SuspiciousInfoMessage (Type1SuspiciousInfoMessageLength):  Type1SuspiciousInfoRelatedXboxes (1): Only present if Type 1 suspicious info bit on. This value will be 0 if suspicion is not Xbox specific. Type1SuspiciousInfoFirstRelatedXbox (8):  Type1SuspiciousInfoSecondRelatedXbox (8):  Type1SuspiciousInfoLastRelatedXbox (8):  Type1SuspiciousInfoRelatedUsers (1): Only present if Type 1 suspicious info bit on. This value will be 0 if suspicion is not user specific. Type1SuspiciousInfoFirstRelatedUser (8):  Type1SuspiciousInfoSecondRelatedUser (8):  Type1SuspiciousInfoLastRelatedUser (8):  Type2SuspiciousInfoMessageLength (1): Only present if Type 2 suspicious info bit on Type2SuspiciousInfoMessage (Type1SuspiciousInfoMessageLength):  Type2SuspiciousInfoRelatedXboxes (1): Only present if Type 2 suspicious info bit on. This value will be 0 if suspicion is not Xbox specific. Type2SuspiciousInfoFirstRelatedXbox (8):  Type2SuspiciousInfoSecondRelatedXbox (8):  Type2SuspiciousInfoLastRelatedXbox (8):  Type2SuspiciousInfoRelatedUsers (1): Only present if Type 2 suspicious info bit on. This value will be 0 if suspicion is not user specific. Type2SuspiciousInfoFirstRelatedUser (8):  Type2SuspiciousInfoSecondRelatedUser (8):  Type2SuspiciousInfoLastRelatedUser (8):  Type3SuspiciousInfoMessageLength (1): Only present if Type 3 suspicious info bit on Type3SuspiciousInfoMessage (Type3SuspiciousInfoMessageLength):  Type3SuspiciousInfoRelatedXboxes (1): Only present if Type 3 suspicious info bit on. This value will be 0 if suspicion is not Xbox specific. Type3SuspiciousInfoFirstRelatedXbox (8):  Type3SuspiciousInfoSecondRelatedXbox (8):  Type3SuspiciousInfoLastRelatedXbox (8):  Type3SuspiciousInfoRelatedUsers (1): Only present if Type 3 suspicious info bit on. This value will be 0 if suspicion is not user specific. Type3SuspiciousInfoFirstRelatedUser (8):  Type3SuspiciousInfoSecondRelatedUser (8):  Type3SuspiciousInfoLastRelatedUser (8):  StatsBundleByteCount (4): Only present if bundle submitted flag is on StatsBundle (StatsBundleByteCount): Only present if bundle submitted flag is on TournamentBundleByteCount (4): Only present if bundle submitted flag is on and Tournament bit was on. TournamentBundle (TournamentBundleByteCount): Only present if bundle submitted and Tournament bit was on. The following data will be returned by the arbitration ReportResult request: None. An HTTP response will still be sent to acknowledge the receipt of the report, but no response data will be in the HTTP response body. An X-Err HTTP header line will be placed in the response header if an error occurred. But, submitting a non accepted bundle is NOT considered an error. The client will NOT be informed about whether their bundle is accepted or not. If the client needs to switch to sending the ReportResult request in UDP due to failures in sending with TCP, some data might need to be removed from the report to make the request fit in a UDP packet. When such a need arises, the order of removal should be: Remove Stats and Tournament bundle (they must both be either in or out together) Remove Type 3 suspicious info Remove Type 2 suspicious info Remove Type 1 suspicious info Remove Lost connectivity info The corresponding bits in the flags will need to be updated correspondingly. The wire protocol between the arbitration server and the stats server and query service is basically a simple HTTP post request where the arbitrated bundle submitted by the clients is sent in the POST payload. The response to the POST is thrown away and ignored by arbitration. The arbitration server will include a new HTTP header line called  BundledAuthData  in the post request. This auth data will contain a base64 encoded blob of information that describes the list of authenticated users that participated in the game session. It is up to the stats server and query server to use this information to verify that users involved in the stats/tournament bundle really did play in the session. Another optional HTTP header line called  TeamTickets  will exist if the client submitted Team membership tickets during registration. Again, it is up to the stats/query service to verify and use this info if the submitted bundle involves team statistics and team competitions. A 4th API exist for the sole purpose of debugging the state of a session. The API is  DebugResult  and has the following wire protocol:     public enum ArbitrationSessionOutcome { Undetermined, Successful, Minority, Failed, Problematic }     public class ArbitrationXUIDAndTrust : WireData     {         [WireInfo(HexString=true)]         public ulong qwUserID;         [WireInfo(HexString=true)]         public uint dwUserFlags;         public float userTrust;     }     public class ArbitrationBundle : WireData     {         public int index;         public uint count;         public double totalTrust;     }     public class ArbitrationXboxInfo : WireData     {         public byte timeExtendCount;         public byte reportCount;         [WireInfo(HexString=true)]         public ushort reportFlags;         [WireInfo(HexString=true)]         public ulong xboxID;         public int userCount;         [WireInfo(SizeParam="userCount")]                 public ArbitrationXUIDAndTrust[] users;         public double trust;         public byte normalizedTrust;         public int bundleIndex;         public int diconnectedXboxCount;         [WireInfo(SizeParam="diconnectedXboxCount", HexString=true)]                 public ulong[] diconnectedXboxes;     }     public class ArbitrationSuspiciousInfo : WireData     {         public int type; // 1, 2, or 3         public string message;         public int xboxCount;         [WireInfo(SizeParam="xboxCount", HexString=true)]                 public ulong[] xboxes;         public int userCount;         [WireInfo(SizeParam="userCount", HexString=true)]                 public ulong[] users;     }     public class ArbitrationTitleParameters : WireData     {         public double BaseTrust; // Base trust rewarded per Xbox         public double MinorityQuorum;         public double UserTournamentAmplification;         public double PublisherTournamentAmplification;         public uint BaseSessionTime;         public double FermiK; // Constant in Fermi function     }     //     // Request for DebugResult     //     public class ArbitrationDebugResultRequest : XRLObject2     {         public ushort version;         [WireInfo(HexString=true)]         public ushort flags;         [WireInfo(HexString=true)]         public uint titleID;         [WireInfo(HexString=true)]         public ulong sessionID;         [WireInfo(HexString=true)]         public ulong sessionNonce;     }     //     // Response from DebugResult request     //     public class ArbitrationDebugResultResponse : XRLObject2     {         [WireInfo(HexString=true)]         public uint titleID;         [WireInfo(HexString=true)]         public ulong sessionID;         [WireInfo(HexString=true)]         public ulong sessionNonce;         public ArbitrationTitleParameters titleParameters;         [WireInfo(HexString=true)]         public ushort flags;         public ushort maxSessionSeconds;         public DateTime startTime;         public double sessionSeconds;                  public int xboxCount;         [WireInfo(SizeParam="xboxCount")]                 public ArbitrationXboxInfo[] xboxes;         public int teamTicketCount;                  public double totalTrust;         public uint reportCount;         public bool arbitrated;                  public int result; // ArbitrationSessionOutcome         public int nonProblematicResult; // ArbitrationSessionOutcome         public float trustModificationScale;         public int bundleCount;         [WireInfo(SizeParam="bundleCount")]                 public ArbitrationBundle[] bundles;         public int submittedBundleIndex;                  public int suspiciousInfoCount;         [WireInfo(SizeParam="suspiciousInfoCount")]                 public ArbitrationSuspiciousInfo[] suspiciousInfo;     } The flags field in the request is not used. The response contains detailed information about the session at this point in time. This API call must be made before the session times out or within TrailingReportRetriesWaitSeconds from the time all Xboxes in the session report results. The configuration parameter  EnableDebugResult  defaults to no and can be used to enable this API. The server fires an event at startup time if this feature is enabled. This feature should only be enabled in testnet. Performance Counters RegisterRequestsPerSecond: Register calls per second RegisterRequestsTotal: Register calls total TimeExtendRequestsPerSecond: TimeExtend calls per second TimeExtendRequestsTotal: TimeExtend calls total ReportResultRequestsPerSecond: ReportResult calls per second ReportResultRequestsTotal: ReportResult calls total NormalSessionsPerSecond: Arbitration Normal Sessions/sec NormalSessionTotal: Arbitration total Normal Sessions MinoritySessionsPerSecond: Arbitration Minority Sessions/sec MinoritySessionTotal: Arbitration total Minority Sessions FailedSessionsPerSecond: Arbitration Failed Sessions/sec FailedSessionTotal: Arbitration total Failed Sessions ProblematicSessionsPerSecond: Arbitration Problematic Sessions/sec ProblematicSessionTotal: Arbitration total Problematic Sessions UDPReportSessionsPerSecond: Arbitration UDP Report Sessions/sec UDPReportSessionTotal: Arbitration total UDP Report Sessions ActiveSessions: Currently active sessions ActiveXboxes: Currently active Xboxes ActiveUsers:Current active Users QueuedBundleCount: Queued Bundles QueuedTrustUpdateCount: Queued Trust Updates Configurable Parameters The following parameters along with its default values are configurable in the xarb.ini file: StatsBundleSubmissionURL1: URL to submit stats bundle using the VIP on the first switch. StatsBundleSubmissionURL2: URL to submit stats bundle using the VIP on the second switch. QueryBundleSubmissionURL1: URL to submit query bundle using the VIP on the first switch. QueryBundleSubmissionURL2: URL to submit query bundle using the VIP on the second switch. MaxStatsBundleSize=100000: Maximum Stats bundle size allowed. MaxTournamentBundleSize=100000: Maximum Tournament bundle size allowed. SessionTimeoutExtensionSeconds=60: The amount of grace time we add to  MaxSessionSeconds  for each session to keep on listening for lagging reports. TrailingReportRetriesWaitSeconds=30: The amount of time we wait for lagging reports when everybody in the session has already reported. BundleRetryPeriodInSeconds=120: The minimal amount of time we wait before another bundle submission retry. MaxBundleRetrySeconds=28800: The maximal amount of time we hold a bundle and keep trying to resubmit it. NumberFlushBundleThreads=30: The amount of threads dedicated to flushing queued bundles. MemoryUsageLowWaterMark=500000000: The amount of memory usage we need to hit when we start forcing GC and start randomly throwing away some bundles. MemoryUsageHighWaterMark=600000000: The amount of memory usage we need to hit to start throwing away all resubmitted bundles. GarbageCollectionIntervalInSeconds=15: The amount of time between each GC when we hit the MemoryUsageLowWaterMark. TitleParameterReloadPeriodInSeconds=3600: The amount of time between each UODB query to reload title parameters. TrustIdleSecondsBeforeFlush=1800: The amount of time a user s trust rating remains idle before we flush it out to UODB. TrustFlushPeriodInSeconds=120: The period in which we periodically flush queued trust ratings that have been idle longer than TrustIdleSecondsBeforeFlush or has more than MaxDelayedTrustUpdates updates. MaxDelayedTrustUpdates=16: The threshold in which a users trust is flushed at the next flush period anyway, even if it has not been idle for more than  TrustIdleSecondsBeforeFlush  seconds. NumberFlushTrustRatingThreads=2: The number of threads performing trust rating flushes. UODBDatabase=UODB: The database name used for UODB UODBTimeoutSeconds=30: The timeout period for each and every UODB operation. VerboseLogging=No: You can optionally turn on verbose logging which will generate several detailed log lines per session. EnableDebugResult=No: You can enable the DebugResult API using the configuration parameter. This should only be done in TestNet. TrustSummationPeriodInSeconds=86400: The amount of time between periodic retries to perform trust summation. TrustSummationExecutionTimeInSeconds=1800: The maximum amount of time assumed to perform a trust summation. Once a trust summation is started, Another one will not be started until this amount of time has passed. TrustSummationRetryInSeconds=60: If we encounter troubles starting a trust summation, We retry again after this amount of time. TrustSummationTimeoutSeconds=300: We wait up to this amount of time for p_xarb_get_trust_tally to execute. Management Commands The following management commands can be issued to the arbitration server using the management console ReloadTitleParameters: Reload all title related constants from UODB. Otherwise the arbitration server reloads these parameters once every  TitleParameterReloadPeriodInSeconds  seconds. PerformTrustSummation: Immediately perform a trust summation on the user trust ratings to accurately adjust the weights. Otherwise the arbitration server performs this operation once every  TrustSummationPeriodInSeconds  seconds. FlushBundles: Flushes the queued bundles to the relevant front doors. Otherwise, these bundles are flushed once every  BundleRetryPeriodInSeconds  seconds. FlushTrustUpdates: Flushes all the user trust updates to UODB. Otherwise, these updates are flushed once every  TrustFlushPeriodInSeconds  seconds and only flushed for users that have not made a new trust update in  TrustIdleSecondsBeforeFlush  seconds. The following log lines are generated under normal circumstances: Load Title parameters: One line generated for each title when title trust constants are loaded XomLog( xarblog, "LTP|"     + titleID.ToString("X") + "|"     + titleParameters.BaseTrust + "|"     + titleParameters.MinorityQuorum + "|"     + titleParameters.TournamentAmplification + "|"     + titleParameters.FermiK + "|"     + timeElapsed.MillisecondsElapsed     ); Update User Trust: One line each time a user trust is updated into the DB XomLog( xarblog, "UUT|"     + PUID.ToString("X") + "|"     + TitleID.ToString("X") + "|"     + batchCount + "|"     + hr.ToString("X") + "|"     + timeElapsed.MillisecondsElapsed     ); Stats/Query front door submission: One line each time a bundle is forwarded to any front door             XomLog( xarblog, "FDR|"                 + submitInfo._titleID.ToString("X") + "|"                 + url + "|"                 + submitInfo._submissionTryCount + "|"                 + submitInfo._bundle.Length + "|"                 + hr.ToString("X") + "|"                 + timeElapsed.MillisecondsElapsed                 ); Request Trust Update: One line for each stored proc call to request permission to perform the trust summation                 XomLog( xarblog, "RTU|"                             + TrustSummationPeriodInSeconds + "|"                             + TrustSummationExecutionTimeInSeconds + "|"                             + nextSummation + "|"                             + timeElapsed.MillisecondsElapsedXom                      ); Get Trust Tally: One line per title, per logical WS partition containing trust summation info                         XomLog( xarblog, "GTT|"                                     + titleID.ToString("X") + "|"                                     + titleTrustSummation.TotalUsers + "|"                                     + titleTrustSummation.S1 + "|"                                     + titleTrustSummation.S2 + "|"                                     + titleTrustSummation.S3 + "|"                                     + titleTrustSummation.S4 + "|"                                     + titleTrustSummation.S5 + "|"                                     + titleTrustSummation.S6 + "|"                                     + titleTrustSummation.S7 + "|"                                     + titleTrustSummation.S8 + "|"                                     + titleTrustSummation.S9 + "|"                                     + titleTrustSummation.TotalSessions + "|"                                     + titleTrustSummation.TotalSessionDisconnects + "|"                                     + titleTrustSummation.TotalCompetitions + "|"                                     + titleTrustSummation.TotalCompetitionNoShows + "|"                                     + timeElapsed.MillisecondsElapsed                                     ); Update Trust Weight: One line per title containing trust summation info written back into t_title_trust_constants.                     XomLog( xarblog, "UTW|"                                 + titleTrustSummation.TitleID.ToString("X") + "|"                                 + titleTrustSummation.TotalUsers + "|"                                 + titleTrustSummation.S1 + "|"                                 + titleTrustSummation.S2 + "|"                                 + titleTrustSummation.S3 + "|"                                 + titleTrustSummation.S4 + "|"                                 + titleTrustSummation.S5 + "|"                                 + titleTrustSummation.S6 + "|"                                 + titleTrustSummation.S7 + "|"                                 + titleTrustSummation.S8 + "|"                                 + titleTrustSummation.S9 + "|"                                 + titleTrustSummation.TotalSessions + "|"                                 + titleTrustSummation.TotalSessionDisconnects + "|"                                 + titleTrustSummation.TotalCompetitions + "|"                                 + titleTrustSummation.TotalCompetitionNoShows + "|"                                 + hr.ToString("X") + "|"                                 + timeElapsed.MillisecondsElapsed                                 ); Register Request: One line each time a register request call is made from a client XomLog( xarblog, "REG|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + _flags.ToString("X") + "|"     + (ulong)((DateTime.Now - _startTime).TotalSeconds) + "|"     + _maxSessionSeconds + "|"     + _xboxes.Count + "|"     + (_teamTicketList == null ? "0" : _teamTicketList.Count.ToString())     ); Time Extend Request: One line each time a time extend request call is made from a client XomLog( xarblog, "TMX|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + flags.ToString("X") + "|"     + (ulong)((DateTime.Now - _startTime).TotalSeconds) + "|"     + ((XboxInfo)_xboxes[xboxIndex]).timeExtendCount + "|"     + MaxSessionSecondsFromNow     ); Report Result Request: One line each time a report result request call is made from a client XomLog( xarblog, "REP|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + flags.ToString("X") + "|"     + (ulong)((DateTime.Now - _startTime).TotalSeconds) + "|"     + xbox.reportCount + "|"     + (xbox.diconnectedXboxes == null ? "0" : xbox.diconnectedXboxes.Length.ToString()) + "|"     + (statsBundle == null ? "0" : statsBundle.Length.ToString()) + "|"     + (tournamentBundle == null ? "0" : tournamentBundle.Length.ToString()) + "|"     + _reportCount + "|"     + _bundles.Count + "|"     + (_submittedBundle == null ? "0" : "1")     ); Arbitration Result: One line at the end of each arbitrated session XomLog( xarblog, "ARB|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + _flags.ToString("X") + "|"     + (ulong)((DateTime.Now - _startTime).TotalSeconds) + "|"     + _maxSessionSeconds + "|"     + _xboxes.Count + "|"     + (_teamTicketList == null ? "0" : _teamTicketList.Count.ToString()) + "|"     + _reportCount + "|"     + _bundles.Count + "|"     + (_suspiciousInfo[0] == null ? "0" : _suspiciousInfo[0].Count.ToString()) + "|"     + (_suspiciousInfo[1] == null ? "0" : _suspiciousInfo[1].Count.ToString()) + "|"     + (_suspiciousInfo[2] == null ? "0" : _suspiciousInfo[2].Count.ToString()) + "|"     + bestBundleTrust + "/" + _totalTrust + "|"     + result     ); The following log lines are generated for each failed, problematic or suspicious session or if verbose logging in on: Verbose Logging 0: One line for each session XomLog( xarblog, "VL0|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + _flags.ToString("X") + "|"     + (ulong)((DateTime.Now - _startTime).TotalSeconds) + "|"     + _maxSessionSeconds + "|"     + _xboxes.Count + "|"     + (_teamTicketList == null ? "0" : _teamTicketList.Count.ToString()) + "|"     + _reportCount + "|"     + _bundles.Count + "|"     + (_suspiciousInfo[0] == null ? "0" : _suspiciousInfo[0].Count.ToString()) + "|"     + (_suspiciousInfo[1] == null ? "0" : _suspiciousInfo[1].Count.ToString()) + "|"     + (_suspiciousInfo[2] == null ? "0" : _suspiciousInfo[2].Count.ToString()) + "|"     + bestBundleTrust + "/" + _totalTrust + "|"     + (_submittedBundle == null ? "NA" : _submittedBundle.index.ToString()) + "|"     + result     ); Verbose Logging 1: One line for each Xbox that actually registered in the session XomLog( xarblog, "VL2|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + xbox.xboxID.ToString("X") + "|"     + xbox.timeExtendCount + "|"     + xbox.reportCount + "|"     + xbox.reportFlags.ToString("X") + "|"     + xbox.trust + "|"     + xbox.bundle.index + "|"     + (xbox.users.Length<=0 ? "0|0" :         (xbox.users[0].qwUserID.ToString("X") + "|" + xbox.users[0].userTrust)) + "|"     + (xbox.users.Length<=1 ? "0|0" :         (xbox.users[1].qwUserID.ToString("X") + "|" + xbox.users[1].userTrust)) + "|"     + (xbox.users.Length<=2 ? "0|0" :         (xbox.users[2].qwUserID.ToString("X") + "|" + xbox.users[2].userTrust)) + "|"     + (xbox.users.Length<=3 ? "0|0" :         (xbox.users[3].qwUserID.ToString("X") + "|" + xbox.users[3].userTrust))     ); Verbose Logging 2: One line for each pair of reported disconnects XomLog( xarblog, "VL3|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + xbox.xboxID.ToString("X") + "|"     + xbox.diconnectedXboxes[j].ToString("X") + "|"     ); Verbose Logging 3: One line for each bundle that was collected XomLog( xarblog, "VL4|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + bundle.index + "|"     + bundle.count + "|"     + bundle.totalTrust + "|"     + (bundle.stats == null ? "0" : bundle.stats.Length.ToString()) + "|"     + (bundle.tournament == null ? "0" : bundle.tournament.Length.ToString())     ); Verbose Logging 4: One line for each suspicious info submission XomLog( xarblog, "VL5|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + i + "|"     + j + "|"     + suspiciousInfo.message     ); Verbose Logging 5: One line for each Xbox reported in a suspicious info submission XomLog( xarblog, "VL6|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + i + "|"     + j + "|"     + suspiciousInfo.xboxes[k].ToString("X")     ); Verbose Logging 6: One line for each User reported in a suspicious info submission XomLog( xarblog, "VL7|"     + _titleID.ToString("X") + "|"     + _sessionID.ToString("X") + "|"     + _sessionNonce.ToString("X") + "|"     + i + "|"     + j + "|"     + suspiciousInfo.users[k].ToString("X")     ); Load Balancing Arbitration Requests using the SG For scalability reasons, we must support multiple arbitration servers. But since the state of each arbitrated session is maintained in memory, all clients in the same session must always talk to the same arbitration server. This load balancing can be achieved using the SG in the following manneris achieved by the stateless Arbitration front doors, using the bucket table stored in ConfigDB. For the Register API, the Front Door first sends the request to the active server (specified in the vc_server column in ConfigDB..t_buckets).  If this server returns status code 301 (Moved) and the vc_next_server column is not blank or the same server, the front door then forwards the request to this next server.    For all other APIs on the front door, each request is forwarded to both servers specified in vc_server and vc_next_server (if different).   Only one is expected to respond with status code 200; if both, or neither server, responds with 200, an event is logged and an error is returned to the client. On the INH arbitration server, when the Register API is called, the server first determines if this is the appropriate server to handle the request.   This is performed by first determining the bucket associated with the session id, then checking if an existing session exists in memory; if so, the INH box is already hosting this session, and returns 200. Otherwise, the server checks the vc_server configuration for the session bucket.   If the server specified is the localhost, and dt_next_server_start is in the future, the server hosts the new session and returns 200.   Otherwise, 301 is returned. If the local INH server is the one specified in dt_next_server_start, the Register request is assumed to be at it s proper destination (irrespective of dt_next_server_start), and the new session is created. For all other APIs on the INH box, if the session id exists in memory, the request is handled as usual.  Otherwise, 301 is returned.  : Assume the KDC issues port P as the port the client should talk to in order to reach arbitration. The client should actually communicate with port  P + ( SessionID mod 120 )  when talking to the arbitration server for that particular session. Assuming that we have 3 arbitration servers in our datacenter. The sgconfig.ini file will be written such that: Ports P through P+39 are directed to the first arbitration server. Ports P+40 through P+79 are directed to the second arbitration server. Ports P+80 through P+119 are directed to the third arbitration server. Each arbitration server will be configured to bind to 40 different ports. And the SG will be configured to map each of the client incoming ports to one of the arbitration server ports. Different arbitration server ports are needed because the SG needs to know which client port to send the response back to when the arbitration server sends response packets. Even though this example uses 3 arbitration servers, we should be able to easily change the number of servers we load balance to on the server side as long as the number is divisible by 120. The number 120 was chosen for this specific reason since it has lots of factors. UDP Adaptor Service In thinking about the problems encountered by the arbitration server, the following problem came up. If 8 people play in a game and at the end of the game 7 users report consistent results and claim that the 8th user disconnected in the middle of the game, and the 8th user never reported anything to the arbitration server. What do we know? Can we really believe that it is a simply case of that one user powering off the box in the middle of the game? We must realize that there is the possibility that it could be one of the other 7 players packet bombing the 8th player (probably because he was leading) to the point that he couldn t even report the fact that he is having connectivity problems to the arbitration server. However, it seems pretty obvious that this will be a very common case, and the fact that we can t discriminate between a user that has simply powered off his box, versus a user that is being packet bombed, is very discouraging. In the simple disconnect case, the remaining 7 players would get positive trust modification and the disconnected user would get negative trust modification. In the connectivity problem case, all 8 players would probably get a negative trust modification. If only we could tell the difference between these two cases! Thinking about the problem some more, you realize that the packet bomber can only chew up the victims  downstream  bandwidth, but cannot touch the victim s upstream bandwidth (to be verified by Eric). However, due to the fact that we use HTTP to communicate to the arbitration server, a TCP connection must be established to even POST information up to the server. In a packet bomb scenario, the SYN packet will probably make it to the server, but the SYNACK will have a hard time making its way back down to the client, and thus the TCP connection will never get established and the POST to the arbitration server will never get through. If only the client could tell the arbitration server the true story of what is happening using ONE upstream UDP packet! Enter the UDP to HTTP Adaptor! The fundamental idea of the UDP adaptor is the following: We write a simple server that listens on UDP port 80 (or whatever port the HTTP front door is listening on) and accepts UDP packets coming from the SG, upon receiving the UDP packet; it transforms the payload into an HTTP POST onto the IIS server running on the local machine through TCP port 80. The IIS server handles the request like normal and sends back a response. Upon receiving the HTTP response, the UDP adaptor packages the response into another UDP packet and sends the response packet back through the SG to the client. Notice that we just compressed the entire HTTP connection, payload transfer, and teardown, down to just one UDP round trip packet. Using this UDP adaptor would require absolutely no change whatsoever on the SG. Only the client would need to be changed, and the exact same UDP adaptor can be placed on any IIS front door machine we wish to optimize using this scheme. We do however; have a few restrictions and things to look out for: This can only be used when both the request and the response packet fits within a single UDP packet. We will need to add some header information in front of both incoming and outgoing UDP packets to convey the information that was originally contained in the HTTP headers (e.g. URL, HRESULT, etc The client will need to perform retries when it doesn t receive the UDP response packets. In the case of packet bombing, the response will never be received, and the client will give up after a certain number of retries, but at least the server got the upstream packet (which is what was important in the arbitration case). The nature of the original HTTP POST request must be idempotent. This means that if the request is repeated multiple times, the same result is obtained, and nothing bad happens. All requests to the arbitration server as well as all requests to the signature server satisfy this criteria. For example, a password reset request to the UACS server would not be idempotent. The UDP adaptor will add a new HTTP Header line  SGIPPort  to the outbound HTTP header to inform the target HTTP server of where the   SG is if it wants to ask the SG for auth data. The UDP adaptor will also add an extra  AdaptedFromUDP  HTTP header line to inform the target that the request was converted from UDP, in case it needs to know for some reason. On the client side, we could simply write an XOnlineUploadFromMemoryUsingUDP function that is used in exactly the same way as XOnlineUploadFromMemory, but uses UDP to achieve the goal. The current plan is to always use UDP for TimeExtend calls to the arbitration server, but always use regular HTTP for Register calls. ReportResult calls will be attempted in HTTP first, but if it fails then the client will fall back to using UDP. ReportResult arbitration requests could be larger than what fits in a UDP packet if the bundles are included and large enough. The client will need to specially handle this case to remove the bundles from the payload (while setting the  Bundle info omitted to fit in UDP  flag) if the request does not fit in UDP packet. If this still doesn t make the packet small enough, then the list of Xboxes in which connectivity was lost can be omitted also (with the correspond bit in the flags turned on). This will guarantee that some arbitration report will reach the arbitration server as long as the user still has upstream connectivity to our data center. Microsoft Confidential. Unpublished work.   2003 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2003 Microsoft Corporation. All rights reserved. Page  q^KqK gdPQS gdPQS gdPQS gdPQS gd7w[ gd7w[ gd7w[ gdTr/ gdyf1 gdyf1 gdyf1 gdceG gdceG }si_U}U} vcvPc=c= gdK#J  PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\Billing and Authorization Design.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSslamb Xbox Online Spec Template.dot slamb Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags PersonName urn:schemas-microsoft-com:office:smarttags State urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags place Month {ov$$L^ %06 {i9E{ tFse<: 457G@ #VuV?Z xS`k= edn$w ^$gk? @f|.Y ~/~+<+ t5;S} '>iPr fieeeV ae<kS VWB25 WY|G7 ?NWDoo cAFk: 7~w'3~ 4Ur<i 6`9.AW\j ?Z}v\ W69mZ Te_j* /pz|# |=!>? dg=V3 ZAs,aY0Z nlnzqzO# ?rhy9vf fr\F5? WG5>* r#zfN> D z"G q,~{J N4/:o c[U25 :H"x y! z<-gs {qZK> p|,xe &_}F+ U!skq +G9*b#96 79.AW /koi( !Z>o< jsD}B uV~lo iN2^O :F"x y! >WO~B ~q4=7n& Y[G_o =ksku +==a3 Jn.*g k~n5o =tOwEy ^;?j' ~*[9e gN>gZ ^#]:iV4 yr%-/ W -tPo+6 AW=*tU h~nU: }-86Z '53Np I"x y! KJzn< 8zr/* oR+E_\h9 $L=,2 'li9O Q"x y! *>dR|N .h=ak _cyp\U #4\K.b /RC97 :}d<= /q]'n !1#jCbq >@tQl I?6Vo Wcb3w (Mrru >(tH}  [Y/62 `|&i^ ^L7La _g:7$ &wvMW q"wM7 U?rz} ';;FO ,@W<s[ e?j6k ^q@Ywation  Spec Status Draft   Reviewed   Complete  Table of Contents  TOC \o "1-2" \h \z \u   HYPERLINK \l "_Toc522015971"  Table of Contents  PAGEREF _Toc522015971 \h   HYPERLINK \l "_Toc522015972"  Executive Summary  PAGEREF _Toc522015972 \h   HYPERLINK \l "_Toc522015973"  Goals  PAGEREF _Toc522015973 \h   HYPERLINK \l "_Toc522015974"  Non-Goals  PAGEREF _Toc522015974 \h   HYPERLINK \l "_Toc522015975"  Scenarios  PAGEREF _Toc522015975 \h   HYPERLINK \l "_Toc522015976"  Basic subscription signup  PAGEREF _Toc522015976 \h   HYPERLINK \l "_Toc522015978"  Basic + Title subscription signup  PAGEREF _Toc522015978 \h   HYPERLINK \l "_Toc522015980"  Multiple features on one service  PAGEREF _Toc522015980 \h   HYPERLINK \l "_Toc522015981"  Content extension purchase  PAGEREF _Toc522015981 \h   HYPERLINK \l "_Toc522015982"  Subscription cancellations  PAGEREF _Toc522015982 \h   HYPERLINK \l "_Toc522015983"  Definitions and acronyms  PAGEREF _Toc522015983 \h   HYPERLINK \l "_Toc522015984"  Overview  PAGEREF _Toc522015984 \h   HYPERLINK \l "_Toc522015987"  Database schema  PAGEREF _Toc522015987 \h   HYPERLINK \l "_Toc522015988"  User accounts  PAGEREF _Toc522015988 \h   HYPERLINK \l "_Toc522015989"  Account Creation  PAGEREF _Toc522015989 \h   HYPERLINK \l "_Toc522015990"  Billing account creation  PAGEREF _Toc522015990 \h   HYPERLINK \l "_Toc522015991"  Family accounts  PAGEREF _Toc522015991 \h   HYPERLINK \l "_Toc522015992"  Banned accounts  PAGEREF _Toc522015992 \h   HYPERLINK \l "_Toc522015993"  Restoring accounts  PAGEREF _Toc522015993 \h   HYPERLINK \l "_Toc522015994"  Offers & Subscriptions  PAGEREF _Toc522015994 \h   HYPERLINK \l "_Toc522015995"  Enumerating available offerings  PAGEREF _Toc522015995 \h   HYPERLINK \l "_Toc522015996"  Purchasing offerings  PAGEREF _Toc522015996 \h   HYPERLINK \l "_Toc522015997"  Vouchers  PAGEREF _Toc522015997 \h   HYPERLINK \l "_Toc522015998"  Canceling offerings  PAGEREF _Toc522015998 \h   HYPERLINK \l "_Toc522015999"  Closing accounts  PAGEREF _Toc522015999 \h   HYPERLINK \l "_Toc522016000"  Authorization  PAGEREF _Toc522016000 \h   HYPERLINK \l "_Toc522016001"  Service-level authorization  PAGEREF _Toc522016001 \h   HYPERLINK \l "_Toc522016002"  Parameter-level authorization  PAGEREF _Toc522016002 \h   HYPERLINK \l "_Toc522016003"  Example application   service functionality  PAGEREF _Toc522016003 \h   HYPERLINK \l "_Toc522016004"  Example application   content purchases  PAGEREF _Toc522016004 \h   HYPERLINK \l "_Toc522016005"  Customer Service Interface  PAGEREF _Toc522016005 \h   HYPERLINK \l "_Toc522016006"  Title maintenance  PAGEREF _Toc522016006 \h   HYPERLINK \l "_Toc522016010"  Security  PAGEREF _Toc522016010 \h   HYPERLINK \l "_Toc522016011"  Spoofing Identity  PAGEREF _Toc522016011 \h   HYPERLINK \l "_Toc522016012"  Tampering with Data  PAGEREF _Toc522016012 \h   HYPERLINK \l "_Toc522016013"  Repudiability  PAGEREF _Toc522016013 \h   HYPERLINK \l "_Toc522016014"  Information Disclosure  PAGEREF _Toc522016014 \h   HYPERLINK \l "_Toc522016015"  Denial of Service (DoS)  PAGEREF _Toc522016015 \h   HYPERLINK \l "_Toc522016016"  Elevation of Privilege  PAGEREF _Toc522016016 \h   HYPERLINK \l "_Toc522016017"  Operations  PAGEREF _Toc522016017 \h   HYPERLINK \l "_Toc522016018"  Errors and Alerts  PAGEREF _Toc522016018 \h   HYPERLINK \l "_Toc522016019"  Performance and Load Considerations  PAGEREF _Toc522016019 \h   HYPERLINK \l "_Toc522016020"  Client API summary  PAGEREF _Toc522016020 \h   HYPERLINK \l "_Toc522016021"  XONLINE_OFFERING structure  PAGEREF _Toc522016021 \h   HYPERLINK \l "_Toc522016022"  XOnlineEnumerateOfferingsBegin  PAGEREF _Toc522016022 \h   HYPERLINK \l "_Toc522016023"  XOnlineGetOfferingParameterValues  PAGEREF _Toc522016023 \h   HYPERLINK \l "_Toc522016024"  XOnlineVerifyOfferingParameterValue  PAGEREF _Toc522016024 \h   HYPERLINK \l "_Toc522016025"  XRL summary  PAGEREF _Toc522016025 \h   HYPERLINK \l "_Toc522016026"  Dependencies  PAGEREF _Toc522016026 \h   HYPERLINK \l "_Toc522016027"  International  PAGEREF _Toc522016027 \h   HYPERLINK \l "_Toc522016028"  Certification Requirements  PAGEREF _Toc522016028 \h   HYPERLINK \l "_Toc522016029"   PAGEREF _Toc522016029 \h   HYPERLINK \l "_Toc522016030"  Revision History  PAGEREF _Toc522016030 \h  Table of Contents Executive Summary Goals Non-Goals Scenarios Basic subscription signup Basic + Title subscription signup Multiple features on one service Content extension purchase Subscription cancellations Definitions and acronyms Overview Database schema User accounts Account Creation Billing account creation Family accounts Coupons Banned accounts Restoring accounts Subscriptions One-Time charges Error! Bookmark not defined. Closing accounts Authentication Error! Bookmark not defined. User account verification Error! Bookmark not defined. Subscription verification Error! Bookmark not defined. One-time purchases Error! Bookmark not defined. Customer Service Interface User Lookup Error! Bookmark not defined. Credits Error! Bookmark not defined. Banning accounts Error! Bookmark not defined. Title maintenance Adding titles Creating subscription offerings Creating package deals XRL summary Security Spoofing Identity Tampering with Data Repudiability Information Disclosure Denial of Service (DoS) Elevation of Privilege Operations Errors and Alerts Performance and Load Considerations Dependencies International Certification Requirements Revision History Executive Summary The Online gaming is expected to be a major revenue source for XBox and publishers alike.  In order to gather this revenue, we must provide a simple and quick way to initiate and utilize billing relationships with consumers, in a way that is secure, friendly, intuitive and unobtrusive.     The intent of this document is to describe a design to support the billing and authorization functionality required by the XBox Online service, its publishing partners and the user s machines.   It covers user signup, the creation of passport and billing accounts and purchasing subscriptions and content.   This document is intended to describe the design of the system to support this functionality; however, since a functional spec does not yet exist, the assumed functionality is described where necessary to aide in understanding the design approach.   Additionally, Wwhile it may suggest user interface at times, it s understood this UI will also be spec d and developed separately.     Goals XBox billing and authorization is designed with the following goals: Easy   It should be brain-dead simple for the user to sign up for the XBox Online service and to make purchases.   The dashboard and public APIs should be designed to make this experience simple for the title developers to provide. Secure   To be successful, users will have to trust our service and any titles that use our service.  It should ensure the user s information is only accessible by the intended audience.  This includes making it easy for title developers to get it right. Addictive   It should be a simple decision to subscribe, and a difficult decision (emotionally) to unsubscribe.     This means providing the functionality to enable up-selling to premium content, ample advertisement opportunity, and the ability to save a subscription when the user thinks they want to cancel. Enabling   It should be easy enough for title developers to implement quickly but powerful enough to enable creative scenarios. Profitable   Ultimately, it s why we re in this business.   The same policy that achieves the above goals should also bring in as much money as possible, while keeping expenses to a minimum, for both us and our publishing partners. Non-Goals Billing and Authorization system has the following non-goals: Scenarios The following section describes the primary scenarios for billing and authentication. Basic subscription signup Joe has mastered Outlaw Golf, and wants to start showing off his putting prowess with real players online.   He selects the  Find an opponent  option in the game s main menu.   This is his first time going online with his XBox, so he goes through the account signup wizard, where he enters his name, address, credit card info and agrees to some standard terms and conditions.   He then selects the level of XOnline subscription he wishes to sign up for.   He chooses the basic, which includes matchmaking.     After completing the signup wizard, his xbox resets back into the game, and he s shown a list of opponents that closely match his skills.     Basic + Title subscription signup Jane receives Asheron s Car for her birthday.  She s thrilled, as it s the latest and greatest thing in online gaming for the XBox.   She opens the case and starts up her XBox with the game in the tray.   The game detects she doesn t yet have an online account, so it s rebooted to the account signup wizard in the dash.    She proceeds through the wizard, entering the requested information, and in addition to selecting the  XBox Basic Subscription , she also signs up for the  Asheron s Car Mercedes Subscription  option.    After completing signup, the game is reloaded, and she soon finds herself racing against Lugians through the streets of Dereth.    Multiple features on one service EA has integrated online play into their NFL and NHL titles.     They offer a basic subscription for $5.95/month, which gives you access to one of the two titles.   They also offer a premium package for their devoted sports fans, which gives access to both titles at a discounted rate of $7.95/month.    Their infrastructure is built as a single cluster of front-end servers that serves all of their games.  This reduces operational complexities and helps them scale, however, security is controlled by a single shared key.    Thus, they depend on extra data about the user accessing the service to differentiate between subscription levels.  This is provided through the  service parameter  concept. Content extension purchase John has been playing Unreal for weeks now, and has mastered all the levels included with the game.     He finds himself at the familiar map selection menu, however instead of selecting one of the normal maps, he notices another more interesting looking map available for a small fee.   Fortunately, he quite familiar with this whole online thing, and has even convinced his wife (who owns the billing account) to give him a $20/month spending limit.  The $4.95 price tag is well within his range, so he selects the map, confirms he wishes to purchase it, and the charge is added to his next statement (and deducted from his monthly allocation). Over time, John downloads numerous other content packages for the many titles he owns, filling up his drive several times over.   For nostalgia sake, he decides to pick up one of his favorite tracks he downloaded from the content ref. service.   He selects the track within the title, waits a few seconds for it to download, and is off and playing again in no time. Subscription cancellations Jack wants to reduce his monthly expenses.   He goes to the dash and decides to unsubscribe to his entire online account, which includes subscriptions to several games.   The dash walks him through canceling each game, however, when he goes to unsubscribe to Asheron s Car, the game shows a movie reminding him of what a wonderful world he s leaving and how he ll be even less popular with the girls if he stops playing.     He gives in and decides to cancel his magazine subscription to GQ instead.provides him with a 1-900 number he can call to get his subscription cancelled.   He calls this and reaches a friendly Xbox Service Representative, which then entices him with a free month and a few downloads to give the xbox online service another try.  Jack is convinced, and decides to stick around.  Definitions and acronyms XBox Online (XO) Service (XOS):  The service built by the XBox Online team.  Includes matchmaking, buddy lists, billing, content download, authc and authz functionality, etc. Authentication (authc): Ensuring a user, machine or server really is who it claims to be.    Authorization (authz): ensuring a user or machine has the rights necessary to do what they re requesting. Service: specific functionality provided by a given site.    XBox Online services include matchmaking, buddy lists, and the content referral service.  Site: a collection of front-end servers that handles incoming requests for one or more services.  Typically a publisher will have a single site to service all of its services.   Sites have a single shared secret with the XBox TGS for issuing tickets. Subscription: A set of services a user is given access to.   A subscription is the smallest entity in which a user may control their access; for instance, a  basic subscription  could include the matchmaking and buddy list services.    The user can unsubscribe to the basic subscription, and thus both services, but not an individual service.  DealOffer: The terms under which a user is offered signup to one or more subscriptions and/or content packages.  For instance,  Pay $15.95/month for MSN Broadband and a basic subscription to XBox Online , or  Sign up now for premium service and get a free tony hawk download.     An instantiation of a deal offer results in one or more a subscriptions for a user. User DRM: rights managed on a per-user basis.  Only the authenticated user for whom the rights exist is able to use a given piece of functionality. (Example: managing a user s buddy list.) Machine DRM: rights managed on a per-machine basis.    That is to say, all users on that machine have rights to machine-drm d functionality.  (Example: access to a downloaded track on the machine s hard drive.) Provisioning: the act of allocating an account to a user Policy: the logic that dictates the access a user s has with their subscription XName: A name selected by the user to identify themselves to the XO community.   In the format of nickname@zone. Overview The billing and authentication architecture consists of 6 major components; the database, the billing provider, the front-end servers, XBOX client APIs, Service APIs and the PC Face.   The relationship between these components can be viewed as follows:  EMBED Visio.Drawing.6   Figure   SEQ Figure \* ARABIC  : Conceptual component relationship The database stores authorization information, such as available subscription SKUs, the list of titles with online functionality, users of XOS, subscription information, etc.   Much of this data is used for policy enforcement, for instance, what services can be used with a gold subscription or a list of existing nicknames to avoid duplication.   Other information stored is more for redundancy and lookup speed, i.e. a user s subscription level and status could be queried from the billing partner, but since this would be accessed frequently and (relatively) seldom change, we store it in our own database as well. The billing provider handles the actual billing, resolving charges against a customer s account, collecting funds, etc.    Our current billing system target is MSNIA 2.x.     We notify them, via SOAP calls, of new account creation, subscriptions, removal of subscriptions, and any one-time charges (if/when they add support for these).     They notify us of accounts closed due to external forces (such as failure to collect, cancellation via call to billing provider, etc.).   We use these notifications to update the copy of user information stored in the local database.   Need to define uptime goals for functionality.   For instance, if the external billing system is down, should we still be able to add/remove subscriptions?   Create new accounts?  Authorize?   (I currently assume yes to authorize, no to everything else Information this database is accessed via stored procedures by the front-end servers.  The stored procedures and code on these servers is where the majority of business logic and policy management is implemented.   The technology here will likely be a combination of C# and C++ COM objects, as determined by performance, complexity and maintainability needs.   These front-end servers are stateless; all persistent state is maintained in the database, billing provider or other external service (i.e. reporting). User XBOXes will access the billing service front-end servers via XRLs.    All client/server communication is abstracted from the dashboard or client libraries via a set of APIs; this allows the client to intelligently handle caching and security without exposing these complexities to the title developers, but also means that many of the client APIs which may do round-trips to the server or access the hard drive must be executed asynchronously.   In such cases, the XOnlineTask*() work pump APIs are used.  Other services may need to communicate with the billing service directly on the back-end.   Local service-to-service communication will take place via COM.   Remote service communication will take place via SOAP calls over https.    Would a  client  wrapper around the SOAP interfaces be useful/necessary?  Finally, a PC Face is provided for management of title accounts by the publishers, xbox accounts by the users, and the tools necessary for providing customer support.   These interfaces will be in HTML generated using ASPX and encrypted using SSL for security.    These will be authenticated by the traditional passport manager available today.  Should we consider NTLM or a more secure authentication method for CSRs and/or publishers? Database schema  LINK Visio.Drawing.6 "http://sts/Xbox_Online/Dev/billing and authroization schema.vsd" "" \a \f 0 \p  Table name Description Replicated or partitioned? Users The list of XO users as identified by user_puid_high and user_puid_low.    Contains the machine puid they signed upon, and the puid of the account holder.  Also specifies the locale of the user (lcid) and the preferred language locale (lang_lcid).   Partitioned on user_puid_high/user_puid_low. services Services known to the XO system.   Examples include matchmaking, content ref, etc.   Replicated service_attributes Conditions placed on a service offering. Replicated attributes Friendly names for attribute_ids Replicated offers Deals offered through an Xbox, i.e. $9.95/mo for basic service.    The lcid dictates which locale the deal should be offered in, the price is the cost in the currency of the locale, and the deal is offered on or after start_date and until until end_date.  Replicated offer_descriptions The name and description for the deal, in the language dictated by the lcid. Replicated offer_services The list of services a user gains access to when the offer is purchased/subscribed to. Replicated offer_types Friendly names for the type of offering (subscription, content, etc)  Replicated offer_terms Friendly names for the time-based term of an offer (monthly, yearly, permanent, etc.) Replicated offer_relations Relates offers to each other, with a relationship type, i.e. offer X is available to subscribers of offer Y as an upgrade. Replicated relation_types Friendly names for the types of offer relationship. Replicated titles List of titles serviced through the XO service.  Title_id corresponds to the ID allocated to the xbox title at publication. Replicated title_status Friendly names for the status of the title.  (shipped, beta, etc) Replicated sites The list of available sites, their key and IP address. Replicated title_offers The list of offers that should be shown for a given title. Replicated User_subscriptions The list of offerings a user has purchased and currently has access to. Partitioned on user puid subscription_status Friendly names for subscription status types (active, canceled, etc) Replicated account_status Friendly names for user account status (active, banned, etc) Replicated Vouchers_spent Vouchers used by some user Partitioned on user_puid  vouchers_outstanding Vouchers (aka coupons) which have been printed or reserved but not sold Replicated Vocher_status Friendly names for voucher status ids (printing, circulating, pending submission, etc)  Replicated transactions A historical audit trail of actions taken by a given user, i.e. subscribe, unsubscribe, purchasing content, etc.  Partitioned on user puid. name_suggestions A pool of names to suggest for xname creation Replicated adjective_suggestions A pool of adjectives to join with names for xname creation. Replicated User_names The list of xnames already in use by existing users.   Should match the list of nicknames in users, however listed separately to facilitate fast name-based lookups. Partitioned on zone, nickname forbidden_names Names disallowed in any zone. Replicated public_zones Zones available to everyone.  Replicated User accounts User accounts are the central point of access for an XBox.   Each account is associated with a user PUID and a billing account PUID, an XName, and possibly one or more subscriptions.   Accounts are created exclusively via the dash, so the title developer need not worry about the details of how to create an account, simply weather or not the current user has an account.  If, from within the title, user wishes to create a new account, the title reboots into the account creation section of the dashboard to do so. User account information is stored in both the client xbox/mu, and the user account database.  In general, all necessary information to authenticate a user is stored on the client box; the information stored in the users database is mainly used for billing, account status, and restoring user accounts in case of a refurbishment or lost credentials (see Restoring accounts below).  Account Creation Accounts will be created through a series of XRL calls made from the dashboard.  The entire process of creating an account is committed in 4 phases   creating an XName, a passport, associating with a billable account, and adding subscriptions.   The phases may or may not be presented in this order to the user; it s possible, for instance, the user may select the desired subscription before creating a passport.   In these cases, the client simply retains the information collected in memory or on the hard drive until the appropriate phase.  Each of these phases of is individually transactional, however the entire process is not rolled back if one single phase fails or is otherwise not completed.    In these cases, the completed phases are still persisted, and the user may return to complete the process from where they left off, at a later time.     Thus, for example, it is entirely possible to have a user account with no billable account, or a billable account with no subscriptions.   Authorization on paid services will simply fail until all phases of account creation are completed successfully.  Machine accounts Before a xbox can go online with user accounts, it must have a machine account.  This machine account creation is described in detail in the   HYPERLINK "http://sts/xbox_online/Security/Specs/Xbox-Passport%20Online%20Authentication%20Protocol.doc"  XBox-Passport Online Authentication Protocol spec Xbox Machine Account Creation spec.  Once this account is created, it s used to authenticate and encrypt the data used against the user account creation service.   This document assumes this process has successfully completed before any user account can be created.  Finding an XName A user creates an XName by entering their name of choice, and specifying a zone.   The list of available zones is specified in the zones table.  Since this is a restricted list, presumably shown in a listbox-type UI, the dashboard must first gather the list of available zones via an XRL call to /uaccts/Zones with the language lcid of the user.   This returns a list of publicly available zones from the public_zones table.   This list could potentially be cached on the client for a limited period of time as a performance optimization. The user is then allowed to enter in the name of their choice, and select a zone.  This information is submitted to /uaccts/CreateXName.   To ensure a valid XName, we check the forbidden_names table for any matching substrings, and check the user_names table for any matching name/zone entries that have already been reserved.  If the requested XName fails either of these checks, the following steps take place to generate the requested number of suggestions: If requested name wasn t found in forbidden_names, check user_names table for existing entries with the same name combined with randomly selected zones, until the requested # of alternate zones is found, or all other zones are checked.   If requested name wasn t in forbidden_names, find up to half of alternate names desired by joining requested name with random entries in adjective_suggestions table.   Find remainder of alternate name entries by joining randomly suggested entries from adjective_suggestions table with randomly selected entries from name_suggestions table. Potential performance optimizations include pre-generating the list of suggestions, or pre-shuffling the name and adjective suggestion lists.  Each step is filtered against the user_names table to remove existing entries; however, nothing is done to prevent a given name from being suggested to more than one person at a time.   Therefore, it s possible (although highly unlikely) two users would choose same suggestion, in which case the first person to choose the suggestion wins, and the other is given additional suggestions.   This process is repeated until a name is found that passes both the forbidden names and existing user name checks.  When this happens, the name is entered into the user_names table to prevent anyone else from reserving this name.   In addition, if the user s puid is specified in the request, the corresponding entry in the users table is updated with the selected name/zone.   A success result is then returned to the client. Need a consistent way of returning result codes and/or error strings to the client.  Passport Registration When the user enters the passport registration phase of account creation, they are first asked if they have an existing passport.  If they indicate they do, they re given the opportunity to enter the user name and password.     This information is submitted to /uaccts/PPExists for verification, which uses the  member-exists  interface of passport manger to verify the user name/password are valid credentials.   If they are, PUID given by passport is encrypted (to prevent tampering) and returned in the response.   Next, we prompt for any required information necessary to create their xbox passport.  Currently this is limited to the user s age.   This information, along with the XName selected by the user, the encrypted PUID returned by PPExists (if applicable), the machine ID, and the user s locale as set in the language section of the dash, is submitted to /uaccts/CreatePPAcct.    This XRL uses passport s delegated admin to create an account using the format,  name@zone.xbox.com .    Once the account is created, the returned PUID is added to the users table with the machine account id, the nickname, the user s language locale, and 0s for the acct_puid, representing no account is set up yet.    In all normal circumstances, this system of creating and reserving an xname up front should ensure the account   HYPERLINK "mailto:name@zone.xbox.com"  name@zone.xbox.com t already exist.   However, this depends on our list of users being in sync with passport s; if, somehow, these got out of sync, or a malicious user modified the name being requested, DA will fail accordingly, and we log the error and add the user to our user_names table.   The client should take the user back to the XName selection screen, notifying the user the account already exists. Upon a successful return from CreatePPAcct, the user s credentials are encrypted using the session key and transferred to the client box, where they are persisted along with the user selected PIN, if any.   Billing account creation Once the user s PUID has been determined, the billing account can be created.    The first thing the dash should do when entering this phase is query for an existing billing account with the user s puid and account PIN (if applicable), via /uaccts/GetBillingInfo.   The users table is queried for acct_puid associated with the user s puid, and if the acct_pin matches, the billing information associated with the acct_puid is retrieved from the external billing system and returned to the client xbox for display. Should the acct_pin be stored & compared on the hard drive before (or in lieu of) the server check?  How would wallet play into this?  Should the same XRL query wallet if no info exists in billing system? s worthwhile to note, when this information is retrieved from the external billing partner, there may already be an account and subscriptions associated with it.   For instance, if a user purchases an MSNIA deal that includes an XBOX Online subscription, the billing system will already have knowledge of that user, and the fact they have an XO subscription to activate.    This information is used to populate the user_subscriptions table with a subscription_status indicating the subscription needs to be activated.   It s then communicated to the client in the GetBillingInfo response, and the client should present the appropriate UI notify the user of this free subscription.  Activation happens when the user subscribes (see below), and they simply are charged according to the special offering. In any case, the client xbox displays the billing information (if any) or a blank slate where the user can enter in their billing information.   All of the required information, including CC#, name on cc, address, the PIN used to protect the account (if any), etc. is sent to /uaccts/UpdateBIllingInfo.   The server submits this info to the external billing system for the current user s PUID.    TODO: fill in the exact list of required data.   What happens if the user already has a billing account in external system, but wishes to allocate a new account for their XO subscription?  Do we prompt for update vs. create new, always assume create new, or..? Submitting billing information to the external billing system is a relatively time-consuming process, as it verifies the account is valid, open and in good standing with the charge-card company or clearing house.   As such, when the client submits updated billing information to UpdateBillingInfo, it will keep the connection open until a final status ( success failed ) is communicated; in the meantime, the service will respond with a  pending  status to test the client is still alive and to notify the client the server is still working on getting status. Once a response is received form the external billing system, users.acct_status_id is updated with the new billing status and a corresponding response is sent to the client. Family accounts Family accounts are accounts which group together several users under a  bundle deal , which provides a discounted rate for each additional user.   The pricing plan is mainly handled by the billing system; however, we require a way to track this in our own database, for several reasons: The billing account associated with a user might be accessed under a different puid than that user Billing information, and the ability to add/remove charges from that bill, might be controlled by a user other than the user associated with the billing account.  Updates to the status of that billable account (i.e. closed by a user or clearance by the billing system is declined) should be reflected with a users associated with that user account.  To achieve these goals, for each user we track a billable puid (stored as acct_puid in the users table), which is the PUID of the first user to have set up the billable account.   Note it is not a requirement that this be an active user; for instance, a user could sign them self up, then several other users, and then cancel their own account.   The acct_puid would still be that of the original user.  The only requirement around this is the puid is consistent between all users on the account, and it be the puid that is used to access the external billing system. When a user edits the billing information within the dashboard, they re offered the option to protect this account with a PIN (stored as the acct_pin in the users table).  This is a PIN similar to the one used to access a user account, however it may be a different code.   The idea behind this is to allow a parent to control access to this billing account using a pin only they know.  The user may still access his own account, however any activity that views or updates the billing account   adding/removing users, adding/removing subscriptions, one time charges, etc   will require the acct_pin be entered.   When editing billing information, if a user subscribes to a family type account, the user is given the opportunity to add additional users to the account.     They can either select from existing users, or create new ones.   The exact UI is TBD; however, once a user is selected to associate with the account, the dash can call /uaccts/UpdateBillingInfo, with the user puid and acct_puid to update the user s billing account to.  Banned accounts Banned accounts are tracked and handled by the external billing system.  If we detect abuse, we can submit this account for banning.  Any future attempts to use the credit card associated with the banned account will then fail. Restoring accounts If a box goes through refurbishment, or the user purchases a new box, the user needs some way of transferring the existing user to the new box.    We re currently considering 3 methods of doing this: Have the user inform us they wish to restore an existing account is by entering in their former XName, their credit card, and billing information via some fork in the UI.    How this UI is accessed is TBD   it could be a menu item during the signup process, or a controller key combination which brings them into the UI.  In either case, the necessary information is collected and sent to /uaccts/RestoreAcct.  This XRL will look up the PUID of the specified XName in user_names, find the acct_puid in the users table for this puid, get the billing information from the external billing system for this puid, and verify the match.   Have the user call customer support.   Once the user s account is verified over the phone, they set up an entry in a TBD table which indicates the user s account is available for restoration, via some key.   The CSR then communicates this key back to the user plus a controller combination to get to the appropriate UI.    The user enters in this key, and it s submitted to the XRL above for verification. Have the user call customer support.  Once the user s account is verified, the CSR asks the user for the box serial #.   An entry is made in a TBD table with the user s accounts, and the serial #.   When the machine goes online, the new accounts are sent down.   In any case, if everything checks out, a new set of credentials is created for the user and saved in passport via DA, and sent back to the client.   Any temporary information set up by the CSR is then removed from the appropriate tables. TODO: find the right solution.   Need to balance the expense of CSR calls with security and ease-of-use.  Offers & Subscriptions Once one or more user accounts have been established on an Xbox, the user is permitted to purchase one or more offerings.   Offerings are really a catch-all phrase for something that may be purchased or acquired   access to a service, a piece of content, vouchers, or an entry into a tournament.   A subscription is an instantiation of an offering for a user, that gives a user temporary or permanent access to a service, piece of content, or tournament.   The offering may have conditions associated with it, i.e. up to 4 players in matchmaking with the basic offering, or up to 16 with the premium.      These conditions are stored as attribute name/values pairs, which are mapped to an individual offering via the offer_attributes table.    Enumerating available offerings To gather a list of subscriptions available, the title or dashboard calls XOnlineEnumerateOfferings() with the title id and the type of offerings requested.   This API calls the XRL /uaccts/EnumOfferings, which responds with the list of offering_ids, names, descriptions and price for the deals offered during or after the start_date and before the end_date of the offerings for title id as listed in title_offerings.      The offerings listed are those applicable to the current user, based on their current subscription status and the data listed in offering_relations table.   There are 5 types of relations: Base: Initial offerings a user may purchase without previous subscription requirements. Upgrade: represents additional benefits, usually at a higher rate.   A purchase of this offering replaces the offering being upgraded. Downgrade: represents a loss of functionality, usually at a cheaper rate.  For instance, the user can downgrade from the premium to a basic offering; doing so will limit him to playing 3 games with matchmaking, instead of 5.  A purchase of this offering replaces the offering being downgraded. Renewal: allows the user to renew their offering, say, to extend the end_date. Add-On: Allows the user to purchase an additional service based on the currently own service.   For instance, subscribing to the basic service may make the user eligible for purchasing additional content.   If the user currently isn t a subscriber (no entries for the current user and title in user_subscriptions, with the start_date <= current date <= end_date), only the   offerings are returned.   If the user is a subscriber, then the non-base offerings are returned.   Could cache this list on the client as a performance optimization. May need to fire an event to allow modification of the offering list by a custom component.   However, doing so would make the aforementioned caching optimization very difficult, if not impossible.  Purchasing offerings  A title, or the dashboard, can purchase an offering via a call to the API XOnlinePurchaseOffering(), passing the offering_id of the deal to be purchased.   The title or dash must collect and verify the acct_pin before doing so, if one exists.   XOnlinePurchaseOffering() evokes the XRL /uaccts/PurchaseOffering.  This method goes through several steps on the server, including a pre and post events to support custom purchase functionality.  (i.e. enforce purchasing rules) Verify the offering_id really exists in the deals table Look up the acct_puid of the current user Fire the server event PreOfferingPurchase() to support custom purchase or authroziat Notify the billing system of the deal purchase for the acct_puid and wait for approval  Add an entry mapping the offer_id to the user_id in user_subscriptions.   Start_date is set to the current date, end_date is set to the term of the subscription (end of month, year, etc) or to MAX_DATE if it s a permanent purchase. Fire the server event PostOfferingPurchase() Notify the client of the result. Vouchers Vouchers support the ability to provide incentives for users to sign up for the xbox online service, or to try out some new feature or content.   They will most commonly be distributed with game titles, however they may also go out as gifts with other hard-goods (i.e. the gamevoice controller, or taco bell happy meals), or may be distributed as  gift cards , which are pre-produced in a set increment ($5, $10, $20, $50) and sold over the counter at a game store.        In all cases, the voucher is generated with a unique key. For version 1, the ID will be a code the user must enter into the dashboard (or in title   pri2), similar to the PID entered in when installing Microsoft software.   In future versions, the key may be written to the BCA area of a title dvd, thus allowing the user to cash in a voucher included with the DVD without having to enter in the code. In order to track and audit the distribution of these keys, when the voucher is produced, the key on the voucher is generated using some TBD algorithm and entered into the vouchers_outstanding table.  Then, when a user enters in the voucher key through the dash or title, it is submitted to /uaccts/PurchaseOffering.    The voucher key is queried in the vouchers_outstanding table, and if a match exists, the following steps take place: voucher_status_id  in vouchers_outstanding is updated to  pending Any policy surrounding the voucher type is then enforced (i.e. limit one per customer).     purchase  of this offering is submitted to the external billing system.  The corresponding entry is added to the vouchers_spent table and removed from the vouchers_outstanding table and, with the user s puid, the date and amount.    A response is sent back to the client with the coupon amount and an indicator of the action taken.    If any one of these steps fails (i.e. the external billing system fails to apply the credit), the voucher_status_id is reverted back to  outstanding  and the error code/message is sent back to the client. How do we detect brute force attempts to crack voucher keys, and handle abusers? Canceling offerings A title or the dash may cancel a user s subscription to an offering by calling XOnlineCancelOffering(), with the corresponding offer_id.    This calls the XRL /uaccts/CancelOffering, which notifies the external billing system of the cancellation, and then updates the end_date of the user_offerings table to the current date, or the end of month, depending on the policy of the offering.     Canceling may not be applicable to some offerings; for instance, purchased content may not be refundable and therefore not cancelable; these offerings are flagged with the  cancelable  flag to false, and any attempt to cancel the offering results in an error is returned to the client.  It might help our retention #s if we provide a mechanism for  saving  users, i.e. when they attempt to cancel, provide them with some final text and/or imagery to entice them to stay.   Priority? Closing accounts A user never really  closes  an account; they simply unsubscribe to offerings.   Credentials remain on the client, and are used if they need to do things like re-download previously purchased content.   Is this accurate? Do we need to provide a mechanism for deleting accounts?    Authorization Authorization is the act of verifying if a user can access a protected feature.  There are two tiers of authorization:  service authorization, and attribute authorization.    Service authorization gives a user access to a site, i.e. the matchmaking or catref servers.   It s expected to be the most common type of authorization, thus authorization against services is performed automatically with XOnlineLogon().     Parameter authorization Sometimes, however, it s desirable to offer provides authorization of functionality on a more granular basis.   , fProperties are of a given service; a title or another service must make a separate API call to verify a user s subscription includes the functionality (parameter) of interest.or instance, subscribers to one offering may only be able to play with up to 4 players, whereas another offering offers up to 16.   It s for these scenarios that attribute authorization is designed; a title, the dash, or a 3rd party game server can call a separate API to discover exactly what conditions are placed on a given offering. The purchase of an offering can include one or more services and/or properties.     These indicate exactly what type of access a user has to the services included in his subscription, based on his purchases.    XOnlineLogon(), and authentication in general, is documented separately.  Need to figure out how guests fit in to all this.  Service-level authorization As noted above, service authorization happens as a part of XOnlineLogon().    This API call includes the user(s) attempting to log in, and the list of services the client wishes to gain tickets to.   (See the   HYPERLINK "http://sts/xbox_online/Dev/online%20authentication%20api%20spec.doc"  Online Authentication API Spec ).   The TGS looks at this list of services, and compares it to what each user has subscribed toThis list is compared to what each user has subscribed to, as listed in  according to user_subscriptions.   If a requested service is part of an offering the user has a current subscription to, the client is given a ticket to this service; otherwise an error code is returned. Attribute Parameter-level authorization Attributes The properties of a user s subscription can be accessed on the client by calling XOnlineGetOfferingParameterAttributeValues(), with the id of the attribute parameter they re interested in.  This returns a list of the values for the requested attributeparameter, according to the offering(s) the user is currently subscribed to.   They can also call XOnlineVerifyOfferingParameterValue() with both a parameter id and value to check, which will return a positive result if the user has the given parameter/value pair in their list of properties. Similarly, a server can call GetUserOfferingParameterValues with the parameter they query, or GetUserHasOfferingParameterValue with both a parameter and value.   This should provide the same information as the corresponding client APIs, and supports server-based authorization of the same functionality.   The definition and application of the attributes properties is service-specific; the functionality of the billing service only sees it as a series of name/value pairs associated with an offering.  For an example application of attributes, consider the matchmaking service.   A basic subscription could include 4 player matchmaking, and a premium subscription could include 16 player matchmaking.  The number of players one could include in matchmaking, according to their subscription level, would be stored as a  max multiplayer  attribute, with the value of 4 or 16.  As another example, say a subscription to a title s offering includes downloading the monthly  map of the month .     The CatRef service could define a  free content  attribute, and list the map(s) included with the offering.    Example application   service functionality As an example, consider this theoretical subscription offering: Bronze Subscription Offering Services Matchmaking Buddy lists Content download Properties  Max # of people in buddy list: 10 Content: Tony Hawk NY track Content: Tony Hawk SF track If a user, who is a subscriber to this offering, wants to use his buddy list, the title calls XOnlineLogon(), specifying the buddy list service as one of the services.  On the server, the TGS checks the user_subscriptions table is checked to ensure the user has subscribed to an offering that includes access to the buddy list service.  If it does, a ticket to the buddy list service is included in the returned ticket.  Now say the user wants to add people to his buddy list.   However, the buddy list API knows there might be a configurable limitation on the number of people he can add, depending on the offering the user is subscribed to.   So, the client calls XOnlineGetOfferingParameterValues(Max # of people in buddy list).  This does a round-trip to the server, checks the offerings listed in user_subscriptions for the Max # of people in buddy list parameter, and returns the value of 10.   The client is then able to allow the additional members, or if he s at the max, encourage an upgrade.   (Note: this same authz check could be done by the buddy service on the server via soap, in lieu of (or in conjunction with) the client check.) If, at some later date, marketing decided people who have bronze packages typically have more than 10 friends, they can increase it to the desired count without requiring further changes. Example application   content purchases s say the user has a subscription to the bronze offering above.    He also purchases the following map offering: Tony Hawk Space Track Properties Content: Tony Hawk London track This adds the corresponding offer_id to user_subscriptions, which effectively adds this map (specifically, the package_id of the map) to the list of content the user can access.    Now, if the title were to call XOnlineGetOfferingParameterValues(Content), it would receive ids for the  Tony Hawk NY track , the  Tony Hawk SF track , and the  Tony Hawk London track .  This might be useful if Tony Hawk is displaying a list of content available to the user for download.      Alternatively, it can verify the rights to the London Track by calling XOnlineVerifyOfferingParameterValue(Content, Tony Hawk London Track).     (NOTE: this might be called as a part of XOnlineVerifyContent(), but the application is the same).  Customer Service Interface   our billing partner should provide most of this.  Is there anything necessary on our end? Title maintenance For the first rev, maintaining the list of titles, subscription and content offerings will be done manually.   We may put together a quick Access front-end to a pre-production database help ensure integrity, but we anticipate doing anything more would be overkill for the # of online titles we ll have in the first year.  Adding titles Creating subscription offerings Creating package deals Security This section should cover potential security issues and how these will be addressed.  This section should consider at a minimum the threat groupings (STRIDE) put together by the Secure Windows Initiative team.  For more information on security, see the SWI team web site at   HYPERLINK "http://swiweb"  http://swiweb .  The STRIDE groupings are detailed in the sections below: Spoofing Identity Spoofing existing PUID   a hacker could conceivably modify the PUID of an existing member submitted to /uaccts/CreatePPAcct, thus associating their Xbox user with some else s billing account.    We ll attempt to prevent this by having the server encrypt the results of /uaccts/PPExists with the server s private key (?). Spoofing existing member name/password   if a hacker discovered another member s PC-based user name/password that already had a billing account associated with it, they could associate their xbox account with this hacked account.   Unfortunately there s not much we can do about this, except depend on the strength of the existing account s password.   It s the same problem any other MS service would have.  Modification of XName -- Tampering with Data Tampering with data involves the malicious modification of system or user data with or without detection. An unauthorized change made to stored or in-transit information, the formatting of a hard disk, the introduction by a malicious intruder of an undetectable network packet in a communication, and an undetectable change made to a sensitive file are all examples of tampering threats Repudiability  Repudiability threats are associated with users malicious or otherwise who can deny performing an action without administrators having any way to prove otherwise. An example of a repudiability threat is a user performing an illegal operation in a system that lacks the ability to trace such operations. Information Disclosure Information disclosure threats involve the compromising of private or business-critical information through the exposure of that information to individuals who are not supposed to see it. A user's ability to read a file that she or he was not granted access to and an intruder's ability to read data in transit between two computers are both disclosure threats. Note that this threat differs from a spoofing threat in that in this case the perpetrator gets access to the information directly rather than by having to appear as a legitimate user. Denial of Service (DoS) Denial of service (DoS) threats when carried out deny service to valid users for example, by making the system temporarily unavailable or unusable or by forcing a reboot or restart of the user's machine. You must protect against certain types of DoS threats simply to improve system availability and reliability. Other types of DoS threats, however, are very hard to protect against; at a minimum, you should identify and rationalize such threats. Elevation of Privilege In this type of threat, an unprivileged user gains privileged access and thereby has sufficient access to compromise or destroy the entire system. The more dangerous aspect of such threats is the compromising of the system in undetectable ways whereby the user can take advantage of privileges without the knowledge of system administrators. Elevation of privilege threats include those situations in which an attacker has effectively penetrated all system defenses and become part of the trusted system itself at that point, the attacker can cause extreme system damage. Operations This section is owned by the OPMs and will be fleshed out by them based on the operations needs of the feature. There are a couple of high level sections listed below but the OPMs will have final determination on what is needed in this section. Errors and Alerts This section should detail all the errors and alerts that will be thrown by the feature   this includes server to Xbox, Xbox to server, server to server, server to monitoring, etc.  This is a very important section for server features.  All components that run on the servers should send useful errors and alerts so that the service can be properly monitored and managed.  Remember, real people will be supporting the service in the data center so human readable / understandable messages are very important. Performance and Load Considerations This section should contain best estimates of how the feature will perform and impact the service once deployed.  This section should include (but is not limited to) items like the following: Average size of data transferred from Xbox to server and/or server to server Average size of data that is stored on the server by the feature The frequency of this data exchange Maximum data size allowed to be transferred / stored Number of data exchanges the servers will have to support over a given time (i.e. 50 requests / second) Client API summary XONLINE_OFFERING structure The XONLINE_OFFERING contains the information for subscription, content or other offerings.  typedef struct { DWORD dwOfferingId; WCHAR szName[XONLINE_MAX_OFFERING_NAME_LENGTH]; WCHAR szDescription[XONLINE_MAX_OFFERING_DESC_LENGTH]; IN float fPrice; XONLINE_OFFERING_TERM eTerm; DWORD dwType; } XONLINE_OFFERING, *PXONLINE_OFFERING; Members dwOfferingId Specifies the offering identifier.  szName The name of the offering. szDescription Description of the offering. fPrice The offering price, in the user s locale. dwType The type of offering.  Can be one or more of the following values. Meaning XONLINE_OFFERING_TYPE_SUBSCRIPTION The offering is a subscription available on a renewal basis. XONLINE_OFFERING_TYPE_CONTENT The offering is for a content package available for purchase. XOnlineEnumerateOfferings The XOnlineEnumerateOfferings function kicks off the asynchronous task of gathering the list of offerings available for the current title.      HRESULT XOnlineEnumerateOfferings ( IN ULONGLONG qwUserPUID, IN DWORD dwOfferingType, IN DWORD cOfferings, OUT PXONLINE_OFFERING Offerings, OUT XONLINETASK_HANDLE *phTask Parameters qwUserPUID The user to get the offerings for.   The resulting list is adjusted based on this user s current subscriptions and purchases.  dwOfferingType The type of offering to enumerate.   Can be one or more of the following values. Meaning XONLINE_OFFERING_TYPE_SUBSCRIPTION The offering is a subscription available on a renewal basis. XONLINE_OFFERING_TYPE_CONTENT The offering is for a content package available for purchase. cOfferings The number of offerings allocated in pOfferings. pOfferings A pointer to an array of offerings to fill with the results phTask Filled with a handle to be used with the XOnlineTaskContinue work pump.  Return values If the function succeeds, the return value is S_OK. If the function fails, the return value is one of the following error codes. {List of error codes TBD} XOnlineGetOfferingParameterValues The XOnlineGetOfferingParameterValues function gets the list of values for a given offering parameter, according to the offerings a user has purchased.    HRESULT XOnlineGetOfferingParameterValues ( IN ULONGLONG qwUserPUID, IN DWORD dwOfferingParameterId, IN DWORD cOfferingValues, OUT PDWORD pdwOfferingValues OUT XONLINETASK_HANDLE *phTask Parameters qwUserPUID The user to get the offering parameters for. dwOfferingParameterId The service-specific parameter id to check. cOfferingValues The count of dwords in the pdwOfferingValues array.  pdwOfferingValues Pointer to one or more dwords to populate with the resulting offering value(s). phTask Filled with a handle to be used with the XOnlineTaskContinue work pump.  Return values If the function succeeds, the return value is S_OK. If the function fails, the return value is one of the following error codes. {List of error codes TBD} XOnlineVerifyOfferingParameterValue The XOnlineVerifyOfferingParameterValue function checks for a matching parameter / value pair in a user s list of offerings.   HRESULT XOnlineVerifyOfferingParameterValue ( IN ULONGLONG qwUserPUID, IN DWORD dwOfferingParameterId, IN DWORD dwOfferingValue, OUT PBOOL pbHasParameterValue, OUT XONLINETASK_HANDLE *phTask Parameters qwUesrPUID The user whose offering parameters should be checked. dwOfferingParameterId The service-specific offering parameter. dwOfferingValue The offering value to check against the parameter. phTask Filled with a handle to be used with the XOnlineTaskContinue work pump.  Return values If the function succeeds, the return value is S_OK. If the function fails, the return value is one of the following error codes. {List of error codes TBD} XOnlinePurchaseOffering The XOnlinePurchaseOffering function adds an offering to the user s account and, upon approval, gives them access to the associated resources. HRESULT XOnlinePurchaseOffering ( IN ULONGLONG qwUserPUID, IN PBYTE pbAcctPin, IN DWORD dwOfferingId, OUT XONLINETASK_HANDLE *phTask Parameters qwUesrPUID The user who s purchasing the offering. pbAcctPIN The account control pin code, if any. dwOfferingId The offering being purchased. phTask Filled with a handle to be used with the XOnlineTaskContinue work pump.  Return values If the function succeeds, the return value is S_OK. If the function fails, the return value is one of the following error codes. {List of error codes TBD} Remarks If there s an account control pin, this must be collected using XOnlineStartPINInput and related APIs and passed as the pbAcctPIN parameter. How does the client know when a pin is required? Once the task completes, the return value of the XOnlineTaskContinue function completed properly, otherwise it is one of the following error codes.   {List of error codes TBD} Better to provide an out parameter for the result of the purchase?   Use of the return value of XOnlineTaskContinue seems like excessive overloading of the return result.. XRL summary Parameters Description /uaccts/zones Lcid: user s language locale Returns a list of zones & corresponding zone_ids from the public_zones table.  /uaccts/CreateXName (optional) PuidHigh/PuidLow: id of user this XName should be associated with. Name: user s name of choice Zone: selected zone_id AltNamesCount: number of alternate names to suggest. AltZonesCount: number of alternate zones with the same name to suggest. Reserves the zone name for the user, or returns a list of alternate names/zones to choose from if the xname is already reserved.  /uaccts/PPExists Membername: passport member name Password: password associated with member name  Verifies the passport member name/password exists.  If it does, it returns the PUID of the passport, encrypted.  /uaccts/CreatePPAcct (optional) UserPUID: existing encrypted puid as returned by PPExists.  XName: The xname reserved by a call to CreateXName MachinePuidHigh/MachinePuidLow: the machine puid Lcid: the user s language locale id Age: the user s age Creates the passport account using passport s delegated admin interface, and adds the resulting puid to the users table. /uaccts/GetBillingInfo UserPUID: puid for which to display the account information (optional) AcctPIN: the pin used to protect the account information. Queries for existing billing account information.  /uaccts/UpdateBIllingInfo UserPUID: the user to update. AcctPUID: the puid under which the billing info is (or should be) stored. AcctPIN: the pin number (if any) to protect the billing info. CCType: credit card type CCName: name on the credit card CCAddress: credit card address CCNum: Credit card number {other info, dependent on locale, cc type, debit vs. credit, billing system requirements, etc.}  Updates or creates new account info for the given puid in the billing system. Dependencies If needed:  This section should cover any Internal / External dependencies that the feature has.  This section should also address schedule issues with the dependencies. International If needed:  This section should detail any considerations that should be made for International (all non-English Languages). This could include detailing encoding of data on the wire, how strings are stored in the databases, considerations for UI, Legal, etc. Certification Requirements Titles must detect, prompt for and verify the acct_pin of a user before allowing any modifications to the billing account (i.e. adding/removing subscriptions, making content purchases, etc.) Any parts of the feature that are cut from the spec should be moved to this section for consideration in future releases. Revision History Changes made Author 8/6/01 First Draft Slamb 8/8/01 Made changes based VanVan s comments Slamb 8/9/01 Added Client API section Slamb Microsoft Confidential. CXfph CXfmH CXfph CXfph ~mWmF7mW u_uN?u_ ^H^7(^H m\F\5 u_uN?u_ ^H^7(^H o^H^7( ^H^7(^H u_uN?u_ ~mWmF7mW u_uN?u_ ^H^7(^H ^H^7( ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH a]U]B;7; ;XFmH ;XFmH ;XFmH ;XFmH ;XFmH c[WcRWw DXfnH tZC;73 DXfnH DXfnH DXfnH ;XFnH ;XFnH ;XFnH {unh`X`PHXHX ;XFnH ;XFnH t]>t< DXfnH DXfnH DXfnH ;XFnH {sjsbsVMVEsE DXfnH DXfnH gd[6S ;XFnH gc_[_ gd<Qx gd[6S ysmgs_S gd9.9 iZVL@ h9DXf dh8DXf dh8DXf h8DXf hZDXf h8DXf gd9.9 gd9.9 gdtKK {hPhLB8 h\DXf hZDXf dhVDXf dhVDXf% dhVDXf hWDXf hVDXf dh9DXf h9DXf h8DXf dh8DXf) h8DXf WDXfd& ~tjc_U_QI; hyDXf dhBDXf% dh9DXf% dh9DXf+ dhuDXf huDXf htDXf hsDXf h[DXf hZDXf gd Y_ qDXfd& zrgTJ@< h{DXf dh{DXfnH hzDXf hzDXf hzDXf hyDXf hzDXf dxdxd huDXf huDXf huDXf hvDXf hwDXf huDXf gd;>3 vDXfd& gd;>3 gd;>3 gd;>3 huDXf huDXf huDXf huDXf huDXf huDXf huDXf gd;>3 gd;>3 gd;>3 gd;>3 ;XFd& oe[QGe DXfd& DXfd& DXfd& DXfd& vrnjc_[QG=GQ= h0DXf h1DXf h/DXf DXfd& DXfd& /DXfd& {w{sis h1DXf dh1DXfo( dh1DXf% dh1DXf h/DXf gd[*! n`R`RDR`DRDRn: xndZPF<P<P rdVH5H gdl(/ gdl(/ qcU=%. gdl(/ gdl(/ gdl(/ gdl(/ }lbXbN@ sZLZL>L nVF8( j`j`jVLBL tfXND:0N Unpublished work.   2001 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2001 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\Billing and Offerings API Dev Spec.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Billings and Offerings API Dev Spec TitleXbox Online Billings and Offerings API Dev Spec Ben Zotto Normal.dot slamb Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags State urn:schemas-microsoft-com:office:smarttags country-region urn:schemas-microsoft-com:office:smarttags PersonName urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags place Month BaFxCaFXbox Online Billing and Offerings API Dev Spec 1/04/2002  Program Management Van Van, Brent Curtis  Development Ben Zotto, Keith Lau, Steve Lamb  Test  Operations  TCRs  Usability  International / Localization  Spec Status DRAFT  Document Authors Ben Zotto (some text lifted from Brent s Content API Spec and Keith s code), Steve Lamb Billing and Offerings API Overview The following is a list of the relevant XBOS APIs.  All are asynchronous tasks except where otherwise noted. Function Description Memory Allocation XonlineOfferingEnumerate Gets a set of available offerings for a given user. XOnlineOfferingEnumerateGetResults Gets the results of an enumerate call. Synchronous. XOnlineOfferingEnumerateMaxSize Calculates the required size of an enumeration buffer. Synchronous. XOnlineOfferingGetDetails Retrieves a set of user-specific details for a particular offering, including pricing and further title-specific data. XOnlineOfferingDetailsGetResults  Retrieves the results from a Details call (above).  This call is synchronous. XOnlineOfferingDetailsMaxSize Calculates the required size of a details buffer. Synchronous. XOnlineOfferingPriceFormat An utility function to provide an offering price in an account-localized string format (following a Details call).  Synchronous. XOnlineOfferingPurchase Purchases an offering for a given user. XOnlineOfferingCancel Cancels an existing offering owned by a given user. XOnlineOfferingVerifyLicense Verifies the rights to use an offering. Detailed API Description Enumerating Offers XOnlineOfferingEnumerate HRESULT  XOnlineOfferingEnumerate(     IN XONLINEOFFERING_ENUM_DEVICE Device,     IN DWORD dwUserIndex,     IN PXONLINEOFFERING_ENUM_PARAMS pEnumParams,     IN OPTIONAL PBYTE pbBuffer,     IN DWORD cbBuffer,     IN OPTIONAL HANDLE hWorkEvent,     OUT XONLINETASK_HANDLE *phTask Synopsis: This call allows the title to enumerate all the of the available offerings for the given user, both locally and remotely.  The remainder of this write-up will discuss only the online/server-based case pending further updates.  Until then, please see the (somewhat outdated but applicable)  Content API Spec  or talk to KeithLau for HD/DVD enumeration info. Parameters: Device The device from which to enumerate content. Currently, the following devices are supported: XONLINECONTENT_ENUM_DEVICE_DVD   enumerate from DVD title disc XONLINECONTENT_ENUM_DEVICE_HD   enumerate content installed on the hard disk XONLINECONTENT_ENUM_DEVICE_ONLINE   enumerate content available for download dwUserIndex The controller index of the user who is requesting the enumeration.  This function does NOT allow guest access.  The user specified must be the paying customer. pEnumParams This argument points to a structure of enumeration paramters, discussed in the next section. pbBuffer An optional work buffer used to build request packets and receive results. If the caller specifies NULL, a buffer will be allocated internally to send and receive data. cbBuffer This specifies the size of the buffer to use. If pbBuffer is not NULL, then cbBuffer specifies the size of the buffer provided. If pbBuffer is NULL, then cbBuffer indicates the size of the buffer to be allocated internally. The value of cbBuffer must be large enough to contain the enumeration request packet or the function will fail. Please see Remarks below. hWorkEvent This optional parameter allows the caller to specify an event handle which will be set to signaled state when work is available.  phTask Upon success, this out parameter returns a handle to the content enumeration task. (Extended) Offering enumeration parameters typedef struct DWORD       dwOfferingType; DWORD       dwBitFilter;         DWORD       dwDescriptionIndex;// Publisher-specific index     DWORD       dwMaxResults;   // Desired max number of results     FILETIME    ftActiveAfter;  // Return items newer than this date  } XONLINEOFFERING_ENUM_PARAMS, *PXONLINEOFFERING_ENUM_PARAMS; dwOfferingType This is a bitfilter on service-wide offering types.   dwBitFilter This is a publisher-specific bitfilter that is used to filter the results that come back from the server.  The intention is to use this for game/title-specific categories of content/subscriptions.  (Say,  weapons armor magic , etc.)  Meaning is publisher-defined. dwDescriptionIndex This is a title-specific value used as a selector between alternate descriptions of a single offering.  Intended primarily to distinguish between supported languages, it determines what binary enumeration blob is returned from the server on a per-offer basis.  Meaning is title-specific, and is not enforced to be language. dwMaxResults Enumeration results are returned in chunks and this parameter specifies the maximum number of results that are returned in each chunk.  A value of zero tells the server to ignore the number of records and fit as many as possible. ftActiveAfter This parameter allows the caller to specify a date-timestamp to filter results based on date. Return Values: The task is successfully created and the task handle is returned in phTask. The caller must service the asynchronous task by periodically calling XOnlineTaskContinue.  E_OUTOFMEMORY There are insufficient system resources to start the enumeration. ERROR_INSUFFICIENT_BUFFER This specific error code indicates that the size specified in cbBuffer is not large enough to hold the enumeration request. See remarks below on choosing an appropriate value for cbBuffer. Any error HRESULT code The specific failure described by the HRESULT has occurred. XOnlineTaskContinue Behavior: Upon success this function returns a handle to the asynchronous task. The caller must call XOnlineTaskContinue periodically to service this task. The result of the Continue call is used to determine further action. If XONLINETASK_S_RUNNING is returned, continued servicing of the task is required. If XONLINETASK_S_RESULTS_AVAIL is returned, then the caller should go ahead and call XOnlineOfferingEnumerateGetResults to pick up the current result set. That function may indicate that further results are available; if so, further servicing of the enumeration task will get the next set.  (See the GetResults description for more information.)  During this process, the XONLINETASK_S_RUNNING will once again be returned by the Continue function until more results are subsequently available. If an error occurs during the enumeration, it is returned via an error HRESULT from the Continue function. The Enumeration task can be Closed at any point.  Note that this frees any memory allocated by the API. Internal Protocol Information: This is the wire structure for an enumeration request: typedef struct     XONLINE_WIRE_HEADER         Header;              ULONGLONG                   Puid;                DWORD                       dwTitleId;           DWORD                       cbClientBuffer;         DWORD                       dwRating;                XONLINEOFFERING_ID          ResumePosition;      XONLINEOFFERING_ENUM_PARAMS Params;          } XONLINEOFFERING_ENUM_REQ, *PXONLINEOFFERING_ENUM_REQ; The wire header consists of two DWORDS, a cbSize and a reserved DWORD.  The Puid is translated from the controller index.  TitleId and Rating are culled from the XBOX (the current title and current ESRB rating).  cbClientBuffer indicates the upper bound on bytes returned.  ResumePosition is the most recent Offering ID seen on the client so that the server knows where in an enumeration to start getting results. The server s response consists of a header, followed by some number of enumeration records (see the GetResults section for information on those).  If there are no results, the server returns a successful HTTP response with no payload at all.   The response header is: typedef struct     XONLINE_WIRE_HEADER         Header;     // Wire struct header     WORD                        cRecords;   // Number of records returned     WORD                        fFlags;     // Enumeration response flags } XONLINEOFFERING_ENUM_RESP_HEADER, *PXONLINEOFFERING_ENUM_RESP_HEADER; The cbSize in the WIRE_HEADER is the size of the entire set returned.  The fFlags is a set of  bitflags giving the client some information about this result set.  The current options for those are: XONLINEOFFERING_RESP_FLAG_MORE_RESULTS         [More results are available] XONLINEOFFERING_RESP_FLAG_DONT_CACHE         [These results should not be cached         on the client] Server Activity Overview An enumeration request initiates the following sequence on the server: The request is unpacked and sanity-checked. The user s billing country is retrieved from the UODB to determine which offers apply to him/her. All the request information is used to generate a key string that uniquely identifies this enumeration request. The FD cache is checked for this enumeration resultset.   If the resultset is in the cache, that is used.  Otherwise the UODB is hit for the resultset, based on all the criteria passed in with the enumerartion parameters.  The DB is asked for the entire enumeration. The result is cached if it wasn t already. Using the entire enumeration, the correct first record is found using the ResumePosition value.  From there, results are written to the output stream until either the max results is exceeded, the max bytes is exceeded, or the end of the enumeration is reached.  The appropriate status of  partial results  is set in the header. The results are all sent back to the client. XOnlineOfferingEnumerateGetResults HRESULT  XOnlineOfferingEnumerateGetResults(     IN XONLINETASK_HANDLE hTask,     OUT PXONLINEOFFERING_INFO **prgpOfferingInfo,     OUT DWORD *pdwReturnedResults,     OUT BOOL *pfMoreResults Synopsis: This is called when the Enumerate task returns a XONLINETASK_S_RESULTS_AVAIL or an XONLINETASK_S_SUCCEEDED from TaskContinue.  Data Structures: The following data structure is used to represent an offering record: typedef struct {     XONLINEOFFERING_ID  OfferingId;             // Offering ID     DWORD               dwOfferingType;         // Offering type     DWORD               dwBitFlags;             // Package-specific flags     DWORD               cbPackageSize;          // Package wire size (bytes)     DWORD               cbInstallSize;          // Installed size (bytes)     FILETIME            ftActivationDate;       // Activation date of package     DWORD               dwRating;               // Package rating     DWORD               cbTitleSpecificData;    // Size of data blob (bytes)     PBYTE               pbTitleSpecificData;    // Pointer to data blob } XONLINEOFFERING_INFO, *PXONLINEOFFERING_INFO; The results returned by this function will be a series of these records.  Each record is followed  immediately by the binary enumeration blob of title-specific descriptive data, if any. Parameters: hTask The enumeration task handle. prgpOfferingInfo       A pointer to a vector of pointers to  XONLINEOFFERING_INFO structures (vs. pointer to an array of pointers to structs). i.e. ((*prgpOfferingInfo)[i])->wszName is the name of the ith returned record. pdwReturnedResults This receives the number of records returned in this chunk. Note that a value of zero is valid an it indicates that there are no more results to enumerate. pfMoreResults This out parameter tells the caller whether this is the last chunk of results. If this is TRUE, then the caller should expect more results, otherwise, this will be the last chunk of results. Return Values: The task is successfully performed. Any error HRESULT code The specific failure described by the HRESULT has occurred. Remarks: Note: Callers will NOT have to free prgpOfferingInfo when they are done, but they must call XOnlineTaskFree(hTask) AFTER they are done with prgpOfferingInfo. XOnlineOfferingEnumerateMaxSize DWORD  XOnlineOfferingEnumerateMaxSize(     IN PXONLINEOFFERING_ENUM_PARAMS pEnumParams,     IN OPTIONAL DWORD cbTitleSpecificDataMaxSize     ); Synopsis: Utility function to determine the absolute upper bound memory requirements for receiving a specified number of offering entries. Data Structures: See section 2.1.1 for information about PXONLINEOFFERING_ENUM_PARAMS.   Parameters: pEnumParams The same parameters that will be passed into the Enumeration call. cbTitleSpecificDataMaxSize This parameter allows the caller to specify an upper bound on the per-offer size of the enumeration blob, allowing the title to tune the results of this function if it knows that its maximum size is less than the absolute allowable maximum.  Passing in zero here uses the default global maximum value.    Return Values: A DWORD specifying the most memory possibly required to retrieve the number  of enumeration records being asked for. Offering Details Once a user indicates interest in an offer, the title should call the Details APIs to get further information about that offer as it applies to the particular user.  The  Details  of an offer include the following information: net price of the offer (before tax), gross price (after tax), currency, and a title-specific   of binary information which is stored on the publisher s behalf in the XBOS servers. The blob probably contains descriptive content about the offer and/or cross-sell/upsell information. XOnlineOfferingGetDetails HRESULT XOnlineOfferingGetDetails (      IN DWORD dwUserIndex,     IN XONLINEOFFERING_ID OfferingId,     IN WORD wLanguage,     IN DWORD dwDescriptionIndex,     IN PBYTE pbBuffer,     IN DWORD cbBuffer, IN HANDLE hWorkEvent,     OUT XONLINETASK_HANDLE *phTask      ); Synopsis: This API goes to the server for user-specific details about an offer.  It s asynchronous.  The resulting details are per-user, per-offer, per-language, and per-description index. Parameters: dwUserIndex The controller index of the user who is requesting the details.  This function does NOT allow guest access.  The user specified must be the paying customer. OfferingId The offering for which to obtain details.  This will probably come from an enumeration, but it could be hard-coded by savvy publishers, etc.   wLanguage This language parameter, along with the server-stored billing locale, is used to determine the formatting for the prices which are returned as parts of the details results.  The language must be one of the following: LANGUAGE_CURRENT       LANGUAGE_ENGLISH LANGUAGE_JAPANESE LANGUAGE_GERMAN       LANGUAGE_FRENCH       LANGUAGE_SPANISH       LANGUAGE_ITALIAN       These are the currently-supported XDash languages, defined        in an enumeration in the client header file.         LANGUAGE_CURRENT will use the current setting in the        XDash.  Ideally, parameter will be the current operating        language of the title, whether or not that is the Dash setting.       Note: This parameter is used only for price formatting, and is        not to be confused with the description blob selector, below. dwDescriptionIndex This is a title-specific index that determines which details blob to grab from the server for this offer.  This value will probably be used most often to differentiate between description languages for a single offer (which may be available in many regions).  However, the semantics of this field are not enforced by the service and are thus title-specific (indeed, they are technically offer-specific). pbBuffer A pointer to a buffer to use for receiving the details blob.  If this pointer is set to NULL, the Details function will do the allocation for you, using the value of cbBuffer as the details size.  THIS BUFFER MUST BE BIG ENOUGH no verification is done.  See below.  cbBuffer The size, in bytes, of the buffer pointed to by pbBuffer (above).  If pbBuffer is NULL, this many bytes are allocated by the API.  Use XOnlineOfferingDetailsMaxSize to determine how big a buffer you will need. hWorkEvent This optional parameter allows the caller to specify an event handle which will be set to signaled state when work is available.  phTask Upon success, this out parameter returns a handle to the details task. Return Values: The task is successfully created and the task handle is returned in phTask. The caller must service the asynchronous task by periodically calling XOnlineTaskContinue. Any error HRESULT code The specific failure described by the HRESULT has occurred. XOnlineTaskContinue Behavior: Upon success this function returns a handle to the asynchronous task. The caller must call XOnlineTaskContinue periodically to service this task.  The HRESULT from that function determines what further action to take. While the task is still running, you will receive the XONLINETASK_S_RUNNING result.  The caller should continue to call XonlineTaskContinue until receiving a  XONLINETASK_S_RESULTS_AVAIL result.  This indicates that the task has completed and  results are available by calling XonlineOfferingDetailsGetResults (below).  Once the results have  been retreived, the result from continued servicing should be XONLINETASK_S_SUCCESS.  The  task is now completely finished, so the handle can be Closed.   Remarks: IMPORTANT: If you rely on the API to allocate the details buffer for you, you cannot Close the  task handle until you are done using the buffer.  (Closing frees all memory associated with the  task, including any buffers allocated by the API.) Internal Protocol Information: This is the wire structure for a details request: typedef struct {     DWORD       cbSize;     ULONGLONG   qwUserPUID;     DWORD       dwOfferId;     DWORD       dwDescriptionIndex;     SHORT       sLanguageId; } XO_DETAILS_REQUEST;  cbSize is used for versioning, and in this case is always == 22.  The qwUserPUID is translated on  the client from the controller index.  The other values are just passed through from the caller.   The Details server s response consists of a header, followed immediately by binary blob data  from the server, if any.  The header looks like this: typedef struct {     DWORD cbSize;     DWORD dwGrossWholePart;     BYTE  bGrossFractionalPart;     DWORD dwNetWholePart;     BYTE  bNetFractionalPart;     BYTE  bCurrencyFormat;     CHAR  rgchISOCode[3];     DWORD dwSizeOfBlob; } XO_DETAILS_HEADER, *PXO_DETAILS_HEADER;  cbSize is the total size of the entire response, including any binary data.  Parsing/re-arranging for  caller convenience is done on the client side, promoting the first two BYTE-sized fields to  DWORDs, and promoting the CHAR array to wide chars.   Server Activity Overview A purchase request initiates the following sequence on the server: The request is unpacked and sanity-checked. A simulated purchase is made.  This involves all of the major steps listed under purchase, except the call to the billing provider is flagged to not commit the purchase.  Likewise, no changes are made to the UODB.  The purpose of this is to verify the user to make the purchase, but retrieve localized price/tax information about the offer without actually buying anything.   The gross and net prices returned are parsed, along with their currency type.  Taking into account the user s billing country, the language value sent up from the client, and the currency, a set of formatting logic determines the best way to format the price for the user.  This result is packed into a format byte to be sent back to the client, and the prices are split from text into integers.  All this information is put into the response structure. The actual details blob is filled into the response structure, by querying the UODB for the details blob (which is actually stored as a sequence of 8000 byte chunks) and reconstituting it from its parts.  The response is packed up and sent back down to the client. XOnlineOfferingDetailsGetResults HRESULT XOnlineOfferingDetailsGetResults (      IN XONLINETASK_HANDLE hTask,     OUT PBYTE *pDetailsBuffer,     OUT DWORD *pcbDetailsLength,     OUT XONLINE_PRICE *pGrossPrice,     OUT XONLINE_PRICE *pNetPrice  Synopsis: This gets the results from a successful details call. Data Structures: The following data structure is used to represent a price (returned by GetResults): typedef struct {     DWORD dwWholePart;     DWORD dwFractionalPart;     BYTE  bCurrencyFormat;     WCHAR rgchISOCurrencyCode[3]; } XONLINE_PRICE, *PXONLINE_PRICE; dwWholePart An integral value representing the whole part of the price (the number to the left of the decimal place). dwFractionalPart An integral value representing the decimal part of the price, if applicable (this will be zero for currencies which do not use it). bCurrencyFormat This is a byte which stores customized formatting information for the price, based on format logic stored in the server.  Its meaning is opaque to title developers, and it s used only internally by XOnlineOfferingPriceFormat (below), which is the recommended means of creating a text string from a price. rgchISOCurrencyCode This 3-wchar array stores the ISO code for the currency of the price.  For example, US Dollars are  , Japanese Yen are  , and Euros are  Parameters: All four output pointers are optional.  Supplying NULL for any of them will force them to be ignored.   hTask This is the GetDetails task from which to pull the results.  The task MUST have returned XONLINETASK_S_RESULTS_AVAIL from the most recent Continue call. pDetailsBuffer This PBYTE pointed to is set to point to the binary details blob. pcbDetailsLength The DWORD pointed to is set to the length, in bytes, of the binary details blob. pGrossPrice The price structure pointed to is set to the gross (tax inclusive) price of the offer for this user. pNetPrice The price structure pointed to is set to the net (exclusive of tax) price of the offer for this user. Return Values: an HRESULT Reserved.  For now, always S_OK. Remarks: In addition to getting results, this function will  complete  the task so that subsequent calls to Continue will no longer show XONLINETASK_S_RESULTS_AVAIL, but XONLINETASK_S_SUCCEEDED.   The task can be Closed at either stage; once the task is Closed, unretrieved results are lost.  As noted above, if you rely on the API to allocate your buffer, do not Close a GetDetails task until you are done using the results buffer. XOnlineOfferingDetailsMaxSize DWORD XOnlineOfferingDetailsMaxSize(     IN DWORD cbTitleSpecificDataMaxSize Synopsis: This provides the client with the upper-bound memory requirement for a GetDetails buffer. A title can call this function to find out how much memory they should allocate (or request from the API), before making a GetDetails call. Parameter: cbTitleSpecificDataMaxSize This is the maximum number of bytes that a title expects in its binary details blob.  If the title does not enforce its own maximum, but instead defers to the service-wide maximum for these blobs, simply pass in zero here and the default value will be used. Return Values: a DWORD The number of bytes to use in allocating (or requesting) a Details buffer. XOnlineOfferingDetailsPriceFormat  HRESULT XOnlineOfferingPriceFormat(      IN XONLINE_PRICE *Price,     IN LPWSTR        lpwszFormattedPrice,     OUT DWORD        *cbLength,     IN DWORD         dwExtendedCharsFilter Synopsis: This is a helpful utility function to format a price appropriately in text, having retrieved it from a GetDetails call.  A title may or may not need to call this API, depending on their formatting needs, but if they do convert the price of an offer to a string before display, this is the recommended way of doing so. Parameters: Price This is the price to be formatted.  It is of type XONLINE_PRICE, returned from a details GetResults call. lpwszFormattedPrice This is a string in which the formatted price will be placed.  It needs to be large enough to contain the formatted price; its size in bytes is passed in through cbLength. cbLength cbLength contains the size of the lpwszFormattedPrice buffer.  If this value is not big enough, an appropriate size will be placed here on return (in conjunction with an error).  It will be written with the new string length in case of success. dwExtendedCharsFilter This is a set of bitflags indicating the extended characters that are acceptable for use in constructing the price string.  The API expects support for basic 7-bit ASCII (ie, including the dollar sign), but beyond this will use extended and Unicode symbols if necessary and if supported by the title.  The API uses appropriate failure cases where support is not provided for the native currency symbol. Indicate support by setting the following bitflags appropriately: XO_CURRENCY_EUR  (Euro) XO_CURRENCY_GBP  (UK Pound)   XO_CURRENCY_JPY   (Japanese Yen) XO_CURRENCY_KRW   (Korean Won) Return Values: an HRESULT This will indicate success (S_OK) if all went well, or an insufficient buffer error if the string passed in was too small to contain the formatted price.  In both cases, the correct price length will be passed back via cbLength. Purchasing and Canceling Offerings XOnlineOfferingPurchase HRESULT  XOnlineOfferingPurchase(      IN DWORD dwUserIndex,      IN XONLINEOFFERING_ID OfferingId,      IN HANDLE hWorkEvent,     OUT XONLINETASK_HANDLE *phTask  );    Synopsis: This asynchronous task purchases an offering on behalf of a currently-logged-in user. Parameters: dwUserIndex The controller index of the user who is requesting the purchase.  This function does NOT allow guest access.  The user specified must be the paying customer. OfferingId The offering to purchase.  This will probably come from an enumeration, but it could be hard-coded by savvy publishers, etc.   hWorkEvent This optional parameter allows the caller to specify an event handle which will be set to signaled state when work is available.  phTask Upon success, this out parameter returns a handle to the purchase task. Return Values: The task is successfully created and the task handle is returned in phTask. The caller must service the asynchronous task by periodically calling XOnlineTaskContinue. Any error HRESULT code The specific failure described by the HRESULT has occurred. XOnlineTaskContinue Behavior: Upon success this function returns a handle to the asynchronous task. The caller must call XOnlineTaskContinue periodically to service this task.  The HRESULT from that function determines what further action to take. While the task is still running, you will receive the XONLINETASK_S_RUNNING result.  The caller should continue to call XonlineTaskContinue until receiving either a success result, or one  of the applicable error states.  XBOS-specific errors are defined in the header, and are in the  XOFF_E_* family.  The task can be Closed once it has completed.  You may NOT call Close on a purchase task  before it has completed there is no meaning to canceling a purchase request in process; once  called, the purchase request must be completed.    Internal Protocol Information: This is the wire structure for a purchase request: typedef struct {     DWORD        cbSize;     ULONGLONG    qwUserPUID;     DWORD        dwOfferingId; } XO_PURCHASE_REQUEST; cbSize is used for versioning, and in this case is always == 16.  The qwUserPUID is translated on  the client from the controller index.  The OfferingId is passed through from the caller.   Server response is only through the XRL result: an HTTP 200 on success and an HTTP 500 on  error, with the X-Err header field set to the appropriate HRESULT. Server Activity Overview A purchase request initiates the following sequence on the server: The request is unpacked and sanity-checked. The UODB is queried with the offer ID.  This serves two functions, first to verify that the  offer ID exists, and second to get back the  billing offer id  (which is the separate offer tracking number used by SPS) and the  friendly name  string that internally describes the offer for SPS. The UODB is queried again, this time with the user s PUID.  In return, we get a bunch of  SPS-useful data, like account ID (separate from puid), pay info id, contact phone id, and address id.      4.  The UODB is queried yet again, to ensure that this user has permission to make this           purchase.  The following conditions need to be met: a. The current date/time must be within the offer's validity window b. The offer must be a base offer, OR the offer must require one which the     user already owns. c. The user must not already own this offer. d. The user has the  purchase enabled  flag set e. The offer matches the title    5. If everything checks out, SPS is contacted with the info from step 2-3 and instructed to         log the purchase in the billing record.    6. The UODB is updated to reflect the user owning the offer.  The status is set to  enabled         the offer. If an error occurs at any point along this path, an exception is thrown and the error is communicated back via XRL. XOnlineOfferingCancel HRESULT  XOnlineOfferingCancel(      IN DWORD dwUserIndex,      IN XONLINEOFFERING_ID OfferingId,      IN HANDLE hWorkEvent,     OUT XONLINETASK_HANDLE *phTask  );    Synopsis: This asynchronous task cancels an offering held by a currently-logged-in user. Parameters: dwUserIndex The controller index of the user who is requesting the cancel.  This function does NOT allow guest access.  The user specified must be the paying customer and must own the offer already. OfferingId The offering to cancel.   hWorkEvent This optional parameter allows the caller to specify an event handle which will be set to signaled state when work is available.  phTask Upon success, this out parameter returns a handle to the cancel task. Return Values: The task is successfully created and the task handle is returned in phTask. The caller must service the asynchronous task by periodically calling XOnlineTaskContinue. Any error HRESULT code The specific failure described by the HRESULT has occurred. XOnlineTaskContinue Behavior: Upon success this function returns a handle to the asynchronous task. The caller must call XOnlineTaskContinue periodically to service this task.  The HRESULT from that function determines what further action to take. While the task is still running, you will receive the XONLINETASK_S_RUNNING result.  The caller should continue to call XonlineTaskContinue until receiving either a success result, or one  of the applicable error states.  XBOS-specific errors are defined in the header, and are in the  XOFF_E_* family.  The task can be Closed once it has completed.  You may NOT call Close on a cancel task  before it has completed there is no meaning to stopping a cancel request in process; once  called, the request must be completed.    Remarks The cancel functionality will only cancel an offering that the user currently holds and that is marked cancelable.  If the user holds multiples of the given offering, an arbitrary one of them will be canceled.  If titles user per-instance state for their offerings (ie, owning multiple items, each with evolving characteristics), this state is maintained by the title alone; there is no way of knowing which entry is canceled (ie, differentiated by purchase date, etc). Internal Protocol Information: This is the wire structure for a cancel request: typedef struct {     DWORD        cbSize;     ULONGLONG    qwUserPUID;     DWORD        dwOfferingId; } XO_CANCEL_REQUEST; cbSize is used for versioning, and in this case is always == 16.  The qwUserPUID is translated on  the client from the controller index.  The OfferingId is passed through.   Server response is only through the XRL result: an HTTP 200 on success and an HTTP 500 on  error, with the X-Err header field set to the appropriate HRESULT. Server Activity Overview A cancel request initiates the following sequence on the server: The request is unpacked and sanity-checked. The offer is checked through the UODB to be deemed  OK to cancel  for the user.  The following conditions must be met: The user must hold at least one instance of the offer The offer must be marked as cancelable A cancel request is passed through to the billing provider, giving it the unique ID of the specific line-item subscription to cancel. The offer status in the UODB for that line-item is changed to  canceled , and the end date of the subscription is changed to the current date/time. If an error occurs at any point along this path, an exception is thrown and the error is communicated back via XRL. XOnlineOfferingVerifyLicense HRESULT  XOnlineOfferingVerifyLicense(      IN DWORD dwOfferingId,      IN DWORD dwUserAccounts,     IN HANDLE hWorkEvent, OUT XONLINETASK_HANDLE *phTask );    Synopsis: This asynchronous task ensures one or more of the currently logged-in users have rights to the given offering. NOTE: for v1, this API is private to save on testing efforts, as it s only expected to be used by XOnlineContentVerify().     It will, however, eventually be publicly exposed and documented.  Parameters: dwOfferingId The offering id to verify rights to. dwUserAccounts Flags specifying one or more accounts to use in the rights verification.   Is one or more of the following values, OR d together: XONLINE_LOGON_CONTROLLER1 logged on user at controller 1 XONLINE_LOGON_CONTROLLER2 logged on user at controller 2 XONLINE_LOGON_CONTROLLER3 logged on user at controller 3 XONLINE_LOGON_CONTROLLER4 logged on user at controller 4 XONLINE_LOGON_MACHINE machine account XONLINE_LOGON_ALL all users and the machine account. hWorkEvent This optional parameter allows the caller to specify an event handle which will be set to signaled state when work is available.  phTask Upon success, this out parameter returns a handle to the verification task. Return Values: The task is successfully created and the task handle is returned in phTask. The caller must service the asynchronous task by periodically calling XOnlineTaskContinue. XOFF_E_PERMISSION_DENIED None of the users specified in dwUserAccounts has permissions to use the offering.   Any other error HRESULT code The specific failure described by the HRESULT has occurred. XOnlineTaskContinue Behavior: Upon success this function returns a handle to the asynchronous task. The caller must call XOnlineTaskContinue periodically to service this task.  The HRESULT from that function determines what further action to take. While the task is still running, you will receive the XONLINETASK_S_RUNNING result.  The caller should continue to call XonlineTaskContinue until receiving either a success result, or one  of the applicable error states.  XBOS-specific errors are defined in the header, and are in the  XOFF_E_* family.  The task can be Closed at any time.   If done before XOnlineTaskContinue returns XONLINETASK_S_SUCCESS, the license check is canceled. Remarks The license check will verify any accounts specified in dwUserAccounts has rights to use the offering id.   There two types of rights that can apply to an offering: Machine Rights   an offering is purchased for a machine.  Any user on that machine can then use that offering, irrespective of who originally purchased it.  The offering can be used indefinitely; no subscription is required once downloaded.   Furthermore, it is not required for the machine to be logged in (via XOnlineLogon) for the offering to be used, unless the offering needs to be re-downloaded (in which case the purchasing user s subscription must still be active).      However, the offering can only be downloaded to the original machine, and does not   with the purchasing user. User Rights   an offering is purchased for a user.   That offering can only be used if that user is logged in and is at one of the controllers specified in dwUserAccounts parameter. Any content associated with the offer can be downloaded by that user on to any machine.    Once the user s subscription is expired, the offering can no longer be used. s possible to use an offering that has machine rights without calling XOnlineLogon.   Any associated content must already be on the local hard drive, and the title must have knowledge that the offering is protected using machine rights, not user rights; otherwise XOFF_E_PERMISSION_DENIED will be returned.  Internal Protocol Information: When a license is requested, the dwUserAccounts are first translated to the corresponding user and/or machine PUIDs. Offering licenses are stored in a local cache using the Cache* APIs.   These licenses are as follows: struct XO_OFFERING_LICENSE    // Versioning    DWORD cbSize;    // Content Information    DWORD dwTitleID;    DWORD dwOfferingId;    // Content Usage Conditions    WORD       wConditionFlags;    BYTE       byRightID;    BYTE       byUseCount;    FILETIME   filetimeRefresh;    FILETIME   filetimeFrom;    FILETIME   filetimeTo;    ULONGLONG  qwPassportUserID;    // signature to prevent tampering    XCALCSIG_SIGNATURE Signature; cbSize size of the XO_OFFERING_LICENSE struct. dwTitleId the title associated with the offering wConditionFlags Flags specifying application of the license: Flag Name Flag Value Description XO_LIC_TIMEREFRESH 0x0001 The systimeRefresh field contains data that needs to be enforced. XO_LIC_USECOUNT 0x0002 The byUseCount field contains data that needs to be enforced. XO_LIC_TIMEFROM 0x0004 The systimeFrom field contains data that needs to be enforced. XO_LIC_TIMETO 0x0008 The systimeTo field contains data that needs to be enforced. XO_LIC_USERID 0x0010 The qwPassportUserID contains data that needs to be enforced. The other bits of this field are reserved for future usage.  byRightId Specifies the right described by this DRM token: Right Name Field Value Description XOD_PLAY_RIGHT  right indicates the DRM token can be used to enable content play.  Note that this field isn t an array of bit fields. Each license shall only contain one right.  For the same game, a game publisher might want to issue   licenses as well as paid-for   licenses. For each right, the game publisher may want to have different condition flags. For example, any user can use the demo for an unlimited amount of time, but a specific user can   the full-featured game only for a month. byUseCount Specifies the number of times this offering shall be used.  filetimeRefresh Specifies the time until which this license can be used.  filetimeFrom Specifies the lower time bound from which this content can be used. filetimeTo Specifies the upper time bound until which this content can be used. qwPassportId Specifies the user to which this license applies.  Signature The signature of the license, to prevent tampering.     Licenses are indexed using the offeringId + puid combination.   A license for each PUID is checked; if a license is found, the following verification steps take place: Signature is checked, by generating a signature of the license (excluding the Signature field) and compared with the signature specified in the license.   If the signatures don t match, the license is deleted from the cache, and validation of this license is aborted. If dwConditionFlags includes XO_LIC_USERID, qwPassportUserId is compared with the user being checked.    If there s a mismatch, validation of the license is aborted. if dwConditionFlags includes XO_LIC_TIMEREFRESH, filetimeRefresh is compared with the current filetime.   If the refresh has expired, validation of the license is aborted. if dwConditionFlags includes XO_LIC_TIMEFROM, filetimeFrom is compared with the current filetime.   If the current time is before the value specified, validation is aborted. if dwConditionFlags includes XO_LIC_TIMETO, filetimeTo is compared with the current filetime.  If the current time is after the value specified, validation is aborted. if validation was not aborted, the license check completed successfully and the user has rights to the given offering.   The cache is closed, and XOnlineTaskContinue returns XONLINETASK_S_SUCCESS. If, after checking each of the PUIDs, no valid license is found, the request for the license is passed on to the server, to the XRL /xbos/VerifyLicense.ashx This is the wire structure for the license request: struct XO_VERIFY_LICENSE_REQUEST     DWORD       cbSize;     DWORD       dwTitleId;     DWORD       dwOfferId;     ULONGLONG   qwPuids[5]; cbSize  the size of the struct, used for versioning.  dwTitleId the id of the title making the request. dwOfferId the offering id to verify qwPuids[5]  the machine puid and  4 user puids to be included in the license check.    Any unused puids are set to 0. If the license check is successful, the server responds with status code 200, and a completely valid XO_OFFERING_LICENSE in the body.    This license is then added to the cache using the puid specified in the qwPassportUserId field of the returned license.  Server Activity Overview A verify license request initiates the following sequence on the server: The request is unpacked and sanity-checked. for each non-zero PUID, the stored procedure p_xbos_verify_license is called with the puid, machine puid and offer id. this procedure checks for a matching user   offering   machine (or machine=0) combination in user_subscriptions (for purchased offers) and t_offer_relations (for related offers).    This check is done via p_xbos_authorize_user. if the user is authorized, the i_policy parameter is set to the corresponding value in offerings..i_policy_flags. Upon successful authorization, the wConiditionFlags field of the offering license is set to the low word of i_policy_flags.  If these flags include XO_LIC_REFRESH, the refresh time is set to the dt_end_date field of the corresponding entry in t_user_subscriptions.   If these flags include XO_LIC_USERID, the qwPassportUserId field is set to the approved user.  NOTE: XO_LIC_USECOUNT, XO_LIC_TIMEFROM, XO_LIC_TIMETO are currently not supported.  If an error occurs at any point along this path, an exception is thrown, an event is logged and the error is communicated back via XRL. Operations Events EventID Source Category Description Performance Counters Text Logging Bracketed features are not currently implemented.  Purchase flag checking should/will be, and title matching is still up for debate. Should we publicly expose and simply not document / support? This is not yet implemented. wrjfjfjfjfrfb gdtl$ gdtl$ ve~ve~ev }umbZm gd+:x gd+:x gdr:2 gdr:2 gd+:x gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2 gdr:2
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\arbitration\test\Arbitration Bucket Migration Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation TitleMichael Fisher Normal.dot Michael Fisher Microsoft Office Wordbjbj\ Arbitration Bucket Migration Test Plan Introduction Bucket migration allows a stable and stateful method to take an Arbitration server out of service over time.  Each server has several buckets it is responsible for and sessions are allocated across all buckets.  The most common scenario is where a server needs to be taken out of the pool of Arb INH servers to allow it to be serviced without interrupting gameplay.  If a server needs to be taken out of rotation, its buckets can be reassigned to one or more of the remaining servers.  Any new sessions hashing to the remapped buckets will be created on the new destination servers.  Previously created sessions will continue to be handled by the server to be removed, however these will eventually complete or expire and with no new sessions being created on the server, it can be shutdown without affecting any player s experience. For example: There are 3 servers in the Arb INH pool.  Each server is assigned 20 buckets for a total of 60 buckets.  Server A needs to be taken out of rotation to be serviced.  Buckets 0   9 for Server A are remapped to Server B.  Buckets 10   19 are remapped to Server C.  This prevents new sessions from being created on Server A.  Once all the existing Arb sessions on Server A have completed or expired, servicing begins. Special Load Requirement Because bucket migration is expected to occur primarily during periods of normal traffic, the test harness executing the test cases will also create many additional sessions to insure correct behavior under this scenario.  This will be similar to Arb stress, however the load will not necessarily rise as high as stress levels require (900 TPS).  As sessions are created/extended/reported, the individual test cases will execute and verify their results under normal load.  Actual TPS of  background noise  is still TBD but estimated to be between 450   720 TPS. Test Cases Each of the test cases will execute a registration, time extend, and reportresults call for all buckets for verification.  All servers assume preexisting bucket ownership and the time for a migration to begin is 5 mins from now except where otherwise specified.  Cases in bold are mainline test cases (Ops scenarios).   Multiple servers  means 2 or 3, depending on the needs of the test case. Single Server Migration Scenarios Single server s single bucket remapped to single new destination server (no preexisting bucket ownership) Map a single bucket from one server to a new server Start: 1 End: 1 P_One_To_OneNew_SingleBucket Single server s single bucket remapped to single destination server Map a single bucket from one server to another server Start: 2 End: 2 P_One_To_One_SingleBucket Single server s all buckets remapped to single destination server Replace a single server with a new server Start: 1 End: 1 Original: Out of rotation P_One_To_OneNew_AllBuckets Single server s half of all buckets remapped to single destination server Add in a single new server with an existing server Start: 1 End: 2 Original: In rotation P_Mainline_One_To_OneNew_PartialBuckets Single server s 2/3 of all buckets remapped to multiple destination servers Add in multiple new servers Start: 1 End: 3 Original: In rotation P_One_To_TwoNew_PartialBuckets Single server s all buckets remapped to multiple new destination servers Replace one server with multiple new servers Start: 1 End: 2 Original: Out of rotation P_One_To_TwoNew_AllBuckets Single server s all buckets remapped to single destination server Remove a single server from a pool of two servers Start: 2 End: 1 Original: Out of rotation P_Mainline_One_To_Two_AllBuckets Single server s all buckets remapped to multiple destination servers Remove a single server from a pool of three servers Start: 3 End: 2 Original: Out of rotation P_One_To_Three_AllBuckets Single server s half of all buckets remapped to a single server that is itself in bucket migration (  of A s buckets ->B while   of B s buckets ->A). Exchange 1/2 of two servers' buckets with each other Start: 2 End: 2 Original: In rotation P_One_To_One_Bidirectional_PartialBuckets Single server s all buckets remapped to a single server that is itself in bucket migration (A->B while B->A). Exchange all of two servers' buckets with each other Start: 2 End: 2 Original: In rotation P_One_To_One_Bidirectional_PartialBuckets Multiple Server Migration Scenarios Multiple servers  single bucket remapped to single destination server Map a single bucket from two servers to a third server Start: 3 End: 3 Originals: In rotation P_Many_To_One_SingleBucket Multiple servers  single bucket remapped to multiple destination servers Map a single bucket from three servers to different servers (round robin) Start: 3 End: 3 Originals: In rotation P_Many_To_Many_SingleBucket Multiple servers  1/3 of all buckets remapped to a single new server Add in a single new server to a pool of two servers Start: 2 End: 3 P_Mainline_Many_To_OneNew_PartialBuckets Multiple servers  all buckets remapped to single destination server Replace two servers with a single server Start: 2 End: 1 Originals: Out of rotation P_Mainline_Many_To_OneNew_AllBuckets Multiple servers  all buckets remapped to multiple new servers Add in a single new server to a pool of two servers Start: 2 End: 2 Originals: Out of rotation P_Many_To_ManyNew_AllBuckets Multiple servers  half of all buckets remapped to multiple new servers Add in a single new server to a pool of two servers Start: 2 End: 4 Originals: In rotation P_Many_To_ManyNew_PartialBuckets {tmtf gdRK5 gd"Ie gd5]1 gdYXv
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\Billing Signup API.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. <<Spec Name>> Title _PID_HLINKS<<Spec Name>> ravim Template - Quick Spec.dot slamb Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags PersonName3IQ'H #H|4; VX7Vb AJj~Lg uadJo QQ'{U =P[[Ky NE#y6v %_pXf^ ^IuaU |?MY7M |UJOUI 7*jQ\ \gu79 -bhZ5 $MN`z kh/Ee %ZL{3V:v af6?V r[L*# XB6]O ?q=8U QN$Iz TC$Ek\ Zk.IS _O3Kc u"{gv -g)VD [<9O" :P/R{ IH|pN E[huP- 7)>89 (_!gQ :i,Kqq z|\rf (|f0[ ^]Z~Q _ePL- }2hzq0E :r),C. @OD]C .RSz$} }%4/+ wm*~' 7{6-c 3#n+6' bI^l, OLE+[: A(S<? &7N_G^h5 Xbox-Passport Online Authentication Protocol.doc Xbox-Passport Online Authentication Protocol.docMicrosoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6EMF+0@ EMF+*@ >U%%? EMF++@ %CR(tB EMF+*@ EMF++@ EMF++@ 1CC1UC CC1UC_ 1CC1UC_ EMF+*@ 1CC1UC >r\c> EMF++@ EMF+*@ EMF++@ >U5!?33 EMF++@ EMF+*@ >r\F? EMF++@ Cp~[AP EMF+*@ EMF++@ EMF+*@ EMF++@ EMF+*@ EMF++@ %CR(tB EMF+*@ EMF++@ EMF+*@ EMF++@ CR(tB EMF+*@ EMF++@ CR(tB EMF+*@ >UE?? EMF++@ @s>33 (%?33 H;?33 EMF++@ ";DL+ EMF+*@ >U5!? EMF++@ EMF++@ EMF++@ CC1UC DC1UC04 CC1UC04 EMF+*@ CC1UC EMF++@ CC1UC6@ @s>33 (%?33 H;?33 EMF++@ J'DC1UC GDC1UC J'DC1UC EMF+*@ J'DC1UC EMF++@ J'DC1UC6@ EMF++@ J'DC1UC6@ EMF++@ EMF+*@ >""b>U >""b> >""b>9~ ?""b> ?""b> EMF++@ CY8DA.T EMF+*@ c=(}R>r =(}R> 8G>(}R> >(}R> >(}R>r >(}R> ?(}R>9 #?(}R> x/?(}R>9 K?(}R> hU?(}R> #m?(}R> ?(}R>rL ?(}R> EMF++@ CC1UC0T EMF+*@ 9>9NM> EMF++@ EMF++@ UU'>UU EMF++@ yC`~[A` EMF+*@ EMF++@ EMF+*@ EMF++@microsoft Pages Masters Page-1 Process Dynamic connector Decision Terminator Title block sphere _VPID_ALTERNATENAMES _VPID_PREVIEWS _PID_LINKBASEslamb @@@``` @@@@@@@@@@@@@@@@@@@@@@@@???@@@@@@@@@@@@@@@@@@@@@ ^^^PPP {{{___ {{{___    @@@@@@@@@!!!BBB>>> [[[   @@@@@@@@@@@@@@@@@@!!!BBB>>> [[[   @@@@@@@@@@@@888 @@@@@@@@@(((ppp @@@XXX @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<<<@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    PPP000@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<<<@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ eee,,, wwwsss mmm777 ---$$$ 888((( HHHxxx XXXhhh hhhXXX    888@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ppp HHHxxx XXXhhh `````` PPPppp XXXhhh `````` pppPPP pppPPP hhhXXX pppPPP pppPPP hhhXXX pppPPP pppPPP hhhXXX xxx@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@hhh UUUCCC hhh@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@xxx ```@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ xxxHHH xxxHHH XXXhhh{{{@@@ @@@666 ???111 XXXhhh XXXhhh ?????? ___NNN ___NNN @@@LLL SSSiii    ppp wwwooo ppp    gggooo gggooo 888ccc vvvwww pppPPPwww :::XXX ,,,000 ooo@@@GGG pppPPP hhhXXX pppPPPhhhXXX xxx@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@xxx xxx@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@xxx ```@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ mmm777 LLL+++ ?????? ?????? @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@``` >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ___lll XXX@@@222000000000000@@@@@@@@@    WWWsss   @@@@@@???::::::::::::;;;@@@ppp sss___    ppp ppp   Visio (TM) Drawing Arial Wingdz onotype  '5/G% N7OIJ`2 _HOZOlI ?`?r6 :/L/^/ q@Z?l3 qB,a%u x\BYF O(O:O #O[@h !D/V/h/z/ ?.?@? R?d?v? sq%O7OIO uB_T_ o'o9oKo]o Q1C/?A?S?e?w?  PObO _(_:_L_ ?I6o{, M=T/7/I/ [/m/G !?3?Xi /-/?/Q/c/u/   Displa chart Any pr ocessing  functio y kin ouble-cl ick to a dd sub-p ?Copyrig ht (c) 2 001 Micr osoft Co rporatio n.  All  s reser Vis_SF B.chm!#2 nter the p asso ciated w pis p?rocess# ["? step#  Reosour wnumb people  oquir Properti g,func Basic,Fl owchart, inform ,diagr am,data es,joine nector Connec tor that  automat ically r outes be tween s, usi ng a rig ht-angle d line. s_SFB.ch m!#26514 pyright  (c) 2001  Microso ft Corpo ration.   All <Bs  reserved ?7g;2 ynamic,c onnector ,autom[@c ally,rou tes,betw us,<B, angled,l ine,Bas Flowchar t,infor,q on,fgp,di agram,da ta,proce ss:pjo\prs ,associ[B's chart Decisi on point  between  two or  more pat hs in yo ur flowc hart. IC"`?Co pyright  (c) 2001  Microso ft Corpo ration.   All  reserved Vis_SFB. chm!#265 52WO#U q%H(^ ^UfUf %1#:T am#hd 3,Enter  the co ssociate d with s procesYsQ0 stepQ0/ esour people H0quir skQ0n ropertin rDecis80, point,be tween,tw o,more,p aths,flo wchart,B asic,inf orm62  agram,da owchart Indica tes the  beginnin g or end  of a pr ogram fl ow in yo ur dia onment. ?Copyrig ht (c) 2 001 Micr osoft Co rporatio n.  All  C2s reser Vis_S FB.chm!# 26531 _;*6 y s=s&E 683,E nter the p asso ciated w pis p?rocess}0 D]ua3 sst#ep}0nq wnumb eoplet0qu[ir stask}0 qQH(^ Properti 3wTermin ator,Ind ps,beg inning,e pgram ,flow,di Basic, chart, informb2, data] oiners, Graphi c text b ox into  h you  can type  a titl nd date.  Drag lection  opyright  (c) 200 1 Micros oft Corp oration.   All O2s  reserve Vis_SE.c hm!#2688 7-1%1 ize to f it text 0=|"` width scm0ch.x `yTitle, block,sp here,Gra phic,ia,b ox,into, type,dat e,Drag,s eleco1,ha 0^`,Bo rders,` ,backgro utto9n 5ll"tv$@ `?Copyri ght (c)  2001 Mic rosoft C orporati on.  All "s rese rved. @0J&: R!.l> H(:T#@ GVOhG Copyrigh t (c) 20 01 Micro soft Cor poration .  All  s reserv ,06&: 4(4@# opyright  (c) 200 1 Micros oft Corp oration.   All 2"s  reserve `?Copyr ight (c)  2001 Mi crosoft  Corporat ion.  Al 2s res erved. o^M<O+ `?Copy right (c ) 2001 M icrosoft  Corpora tion.  A ll (Bs re served. @9&d: o^M<+ #d30N `?Copyri ght (c)  2001 Mic rosoft C orporati on.  All 2s rese rved. (*d3<&<' `?Copyr ight (c)  2001 Mi crosoft  Corporat ion.  Al l (2s res erved. mpany Na me/Title kp82O Flowc 9Con?nector pA~UXOjC 8"zqzq ine titl e loads tApAxIhX mu;``u p&5t@I X&8/G? Are us ers Subs/crib #ub_U@ Reload t o XDash _%_7_I_ H:692 1|v{rp< ;_M___ Bi?lling  0'@z3 d^E/W/ i/{/ -?G?Y?k?pR O(O:OLO^OpK H}!*3 .?@?&R? knF,x {nFeFo TeeRebo ot to Ti od?v? }!f%Ngx"]oooj% u./@  ;User L/ogin "/4/F/ Qo<?} /./@/ iO {O ow game  terms, p olicy, e :_L_^_p_  e:f<a $~<a9~ b8#"s0O *Kak>C cription T_f_, @?R?d?U \8!Ta oL(o:o +Nc8! "MaMa Show  terms, p olicy, e tc.K" Lo^oI /!/3/E/ :OLO^OpO Present  Xonline  Subscipt_ion o _fv'! }C_b?` -VeR4 #\!Q5]QVT =akC. sm*a*e o",GjNl oS.EIn -Dash Si?gnup AnqrT #VvDo  users h ave onli ne accou Aj_|_ Guide TheDoc Page-1 ure Form Process Visio 90 Connector Visio 00 Visio 01 Visio 02 Visio 03 Visio 10 Visio 11 Visio 12 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Flow Normal Hairline  connect or text Duration Resources visKeywords visVersion mic conn?ector Decision Terminator Border Dark er Annot?ation er Text  Transpar ent C er Text  Transpar ent Left e block  sphere Scale AntiScale Process.4 Decision.6 Process.5 mic conn ector.7 mic conn ector.8 mic conn ector.9 mic conn ector.10 Process.11 mic conn ector.12 mic conn ector.13 Process.14 mic conn ector.15 mic conn ector.16 mic conn ector.17 Process.18 Decision.41 Process.20 mic conn ector.19 mic conn ector.22 Process.23 mic conn ector.24 Process.25 mic conn ector.26 mic conn ector.21Microsoft Visio Drawing VISIO 6.0 Shapes Visio.Drawing.6EMF+0@ EMF+*@ >U%%? `(:w3 EMF++@ "CR(tBW/ EMF+*@ 9>r|+? EMF++@ EMF++@ EMF++@ "C_(!C "C_(!C EMF+*@ B_(!C >r\c> EMF++@ EMF+*@ EMF++@ >U5!?33 EMF++@ EMF+*@ >r\F? EMF++@ MC_(!C C9jWC CpJGCp~[A` EMF+*@ EMF++@ C9jWC LD9jWC EMF+*@ EMF++@ EMF+*@ EMF++@ "CR(tBW/ 23DxX OGD8U EMF+*@ BQ4@D EMF++@ EMF+*@ EMF++@ CR(tB EMF+*@ EMF++@ EMF+*@ }>r|+? EMF++@ Gs>33 EMF++@ CR(tB EMF+*@ >UE?? EMF++@ @s>33 (%?33 H;?33 EMF++@ Cp~[A` EMF+*@ BCa=C EMF++@ EMF+*@ >U%%? >9^3? EMF++@ EMF++@ EMF+*@ EMF++@ EMF+*@ EMF++@ @s>33 (%?33 H;?33 EMF++@ C9jWC EMF+*@ EMF++@ EMF++@ EMF++@  D9jWC EMF+*@ EMF++@ >UU:>33 '%?33 EMF++@ 23D<, i4D!z EMF+*@ BQ4@D EMF++@ EMF+*@ EMF++@ EMF+*@ >""b>U >""b> >""b>9~ ?""b> ?""b> EMF++@ DR(tB EMF+*@ EMF++@ CY8DA w:B3\ EMF+*@ c=(}R>r =(}R> 8G>(}R> >(}R> >(}R>r >(}R> ?(}R> 34?(}R>9 @?(}R> W?(}R> o?(}R> }?(}R> ?(}R>rd ?(}R> ?(}R>r ?(}R> ?(}R> EMF++@microsoft Pages Masters Page-1 Process Dynamic connector Decision Terminator Title block sphere _VPID_ALTERNATENAMES _VPID_PREVIEWS _PID_LINKBASEslamb PPP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@XXX 000ppp hhh888    XXX PPPppp XXXhhh PPPppp PPPppp PPPppp XXXhhh HHHxxx PPPppp PPPppp `````` {{{___ HHHxxx 333///@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    XXX@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@000000 @@@@@@@@@@@@@@@@@@&&&CCC 888@@@@@@(((CCC kkk   @@@@@@@@@@@@@@@@@@ www    hhhhhh    ooo www``` `````` pppPPP xxxHHH `````` hhhXXX 888XXX@@@    ppp PPP``` ```GGG000 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ggg@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@HHH @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ggg @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ xxxHHH pppPPP pppPPP pppPPP hhhXXX {{{pppPPP pppPPP hhh``` pppPPP pppPPP ```XXX AAA]]] YYY    `````` hhhPPP xxxHHH ,,,@@@::: 666888BBB `````` hhhXXX xxx@@@ `````` xxx``` @@@mmm000 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@PPP xxx@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@``` ```@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    CCC{{{    ppp ```@@@ ```PPP GGG---;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ```@@@000000000000000222@@@@@@@@@@@@ WWWOOO(((@@@@@@@@@>>>:::::::::::::::<<<@@@    @@@@@@@@@@@@ UUUwww zzzXXX 000888@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@000PPP ppp(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Visio (TM) Drawing Arial Wingdz onotype  '5/G% N7OIJ`2 _HOZOlI ?`?r6 :/L/^/ q@Z?l3 qB,a%u x\BYF O(O:O #O[@h !D/V/h/z/ ?.?@? R?d?v? sq%O7OIO uB_T_ o'o9oKo]o Q1C/?A?S?e?w?  PObO _(_:_L_ ?I6o{, M=T/7/I/ [/m/G !?3?Xi /-/?/Q/c/u/   Displa chart Any pr ocessing  functio y kin ouble-cl ick to a dd sub-p ?Copyrig ht (c) 2 001 Micr osoft Co rporatio n.  All  s reser Vis_SF B.chm!#2 nter the p asso ciated w pis p?rocess# ["? step#  Reosour wnumb people  oquir Properti g,func Basic,Fl owchart, inform ,diagr am,data es,joine nector Connec tor that  automat ically r outes be tween s, usi ng a rig ht-angle d line. s_SFB.ch m!#26514 pyright  (c) 2001  Microso ft Corpo ration.   All <Bs  reserved ?7g;2 ynamic,c onnector ,autom[@c ally,rou tes,betw us,<B, angled,l ine,Bas Flowchar t,infor,q on,fgp,di agram,da ta,proce ss:pjo\prs ,associ[B's chart Decisi on point  between  two or  more pat hs in yo ur flowc hart. IC"`?Co pyright  (c) 2001  Microso ft Corpo ration.   All  reserved Vis_SFB. chm!#265 52WO#U q%H(^ ^UfUf %1#:T am#hd 3,Enter  the co ssociate d with s procesYsQ0 stepQ0/ esour people H0quir skQ0n ropertin rDecis80, point,be tween,tw o,more,p aths,flo wchart,B asic,inf orm62  agram,da owchart Indica tes the  beginnin g or end  of a pr ogram fl ow in yo ur dia onment. ?Copyrig ht (c) 2 001 Micr osoft Co rporatio n.  All  C2s reser Vis_S FB.chm!# 26531 _;*6 y s=s&E 683,E nter the p asso ciated w pis p?rocess}0 D]ua3 sst#ep}0nq wnumb eoplet0qu[ir stask}0 qQH(^ Properti 3wTermin ator,Ind ps,beg inning,e pgram ,flow,di Basic, chart, informb2, data] oiners, Graphi c text b ox into  h you  can type  a titl nd date.  Drag lection  opyright  (c) 200 1 Micros oft Corp oration.   All O2s  reserve Vis_SE.c hm!#2688 7-1%1 ize to f it text 0=|"` width scm0ch.x `yTitle, block,sp here,Gra phic,ia,b ox,into, type,dat e,Drag,s eleco1,ha 0^`,Bo rders,` ,backgro utto9n 5ll"tv$@ `?Copyri ght (c)  2001 Mic rosoft C orporati on.  All "s rese rved. @0J&: R!.l> H(:T#@yd GVOhG Copyrigh t (c) 20 01 Micro soft Cor poration .  All  s reserv ,06&: 4(4@# pyright  (c) 2001  Microso ft Corpo ration.   All 2"s  reserved 71719 `?Copyr ight (c)  2001 Mi crosoft  Corporat ion.  Al 2s res erved. o^M<O+ `?Copy right (c ) 2001 M icrosoft  Corpora tion.  A ll (Bs re served. @9&d: o^M<+ #d30N `?Copyri ght (c)  2001 Mic rosoft C orporati on.  All 2s rese rved. (*d3<&<' 4.+I[ `?Copyri ght (c)  2001 Mic rosoft C orporati on.  All  (2s rese rved. pany Nam e/Title kp82O chart nnector ine titl e loads U$XOjC QpAxI uO``u 0[@z9 h&_?nOg re all u sers o Reload  to XDas g ?Signup /*/</N/`/ 4OFOL uccessfu !=&b)/ tNJ@^ Un%$/ j%>v* ?*?<?c<]8 _$_6_H_Z_l[g goyo0 ?vCH; 5b/t 0 OK<f1 eboot to? Title mZ!Z%.} 20`u_ D/V/h/z/ s1uE] [1$.S %[?m00 @mt42_D_V_ iQiQ|R ser Logi o@OfB  Z_l_~] OQYmd *P`ufZI a?s9" VY)_B je`oro  all up  subscib A.t+:WT_x 1/ C) 8Show  game te rms, pol icy, etc iO{Os resent P urchase  options r signup @z3Ka" azEsKf WM7OUOU Show t erms, po licy, et (/:/g O.O@OG U_g_y_ o*o<oNo `orl[ resent X online S ubscipti/on o] :_L_^_ 8?J?\?n? Q]S1v PmZ_l_~_  Signup  successf ?@0>x E?W?i> %sWCd dGoYoko Play! #O5OGOYO i4#q: %18DP U@bD} o.o@oRodovo :4VOo PO`^k In-Ga me purch?ases m9qct scgzan @`uez`zp%v1 _rkRis tYNz` @361W <73lQ* Guide TheDoc Page-1 ure Form Process Visio 90 Connector Visio 00 Visio 01 Visio 02 Visio 03 Visio 10 Visio 11 Visio 12 Visio 13 Visio 20 Visio 21 Visio 22 Visio 23 Visio 50 Visio 51 Visio 52 Visio 53 Visio 70 Visio 80 Flow Normal Hairline  connect or text Duration Resources visKeywords visVersion mic conn?ector Decision Terminator Border Dark er Annot?ation er Text  Transpar ent C er Text  Transpar ent Left e block  sphere Scale AntiScale Process.4 Decision.6 Process.5 mic conn ector.7 mic conn ector.8 mic conn ector.9 mic conn ector.10 Process.11 mic conn ector.12 mic conn ector.13 Process.14 mic conn ector.15 Decision.16 mic conn ector.17 Process.18 mic conn ector.19 Process.20 Process.21 mic conn ector.22 Process.23 mic conn ector.24 Process.25 mic conn ector.26 mic conn ector.27 Decision.28 mic conn ector.29 mic conn ector.30 mic conn ector.32 mic conn ector.41Xbox Billing Signup API Author: Steve Lamb Table of Contents  TOC \o "1-1" \h \z   HYPERLINK \l "_Toc516307875"  Table of Contents  PAGEREF _Toc516307875 \h   HYPERLINK \l "_Toc516307876"  Owners  PAGEREF _Toc516307876 \h   HYPERLINK \l "_Toc516307877"  Revision History  PAGEREF _Toc516307877 \h   HYPERLINK \l "_Toc516307878"  Executive Summary  PAGEREF _Toc516307878 \h   HYPERLINK \l "_Toc516307879"  Scenarios  PAGEREF _Toc516307879 \h   HYPERLINK \l "_Toc516307880"  Goals  PAGEREF _Toc516307880 \h   HYPERLINK \l "_Toc516307881"  Non Goals  PAGEREF _Toc516307881 \h  Error! Bookmark not defined.  HYPERLINK \l "_Toc516307882"  Design  PAGEREF _Toc516307882 \h   HYPERLINK \l "_Toc516307885"  Detailed Design  PAGEREF _Toc516307885 \h   Owners Functional Group Alias Program Management Van Van Vanvan Development Boyd Multerer  Slamb Lit Wong Lithangw User Education Localization Kevin Kim Kevinki Revision History Version Author Comments 0.0.1 06/06/01 slamb Created  Executive Summary Online gaming is expected to be a major revenue source for XBox and publishers alike.  In order to gather this revenue, we must provide a simple and quick way to initiate billing relationships with consumers, in a way that is friendly, intuitive and unobtrusive.     The intent of this document is to describe the API required by the client-side interface to enable this experience.   While it may suggest user interface at times, it s understood this UI will be spec d and developed separately.    The intent is to provide the programming interface to support the functionality of the UI, primarily in regards to client-server functionality.  Scenarios The following section describes the primary scenarios for billing signup. Basic subscription signup Joe has mastered Outlaw Golf, and wants to start showing off his putting prowess with real players online.   He selects the  Find an opponent  option in the game s main menu.   This is his first time going online with his XBox, so he goes through the account signup wizard, where he enters his name, address, credit card info and agrees to some standard terms and conditions.   He then selects the level of XOnline subscription he wishes to sign up for.   He chooses the basic, which includes matchmaking.     After completing the signup wizard, his xbox resets back into the game, and he s shown a list of opponents that closely match his skills.     Basic + Title subscription signup Jane receives Asheron s Car for her birthday.  She s thrilled, as it s the latest and greatest thing in online gaming for the XBox.   She opens the case and starts up her XBox with the game in the tray.   The game detects she doesn t yet have an online account, so it s rebooted to the account signup wizard in the dash.    She proceeds through the wizard, entering the requested information, and in addition to selecting the  XBox Basic Subscription , she also signs up for the  Asheron s Car Mercedes Subscription  option.    After completing signup, the game is reloaded, and she soon finds herself racing against Lugians through the streets of Dereth.    Content extension purchase John has been playing Unreal for weeks now, and has mastered all the levels included with the game.     He finds himself at the familiar map selection menu, however instead of selecting one of the normal maps, he notices another more interesting looking map available for a small fee.   Fortunately, he quite familiar with this whole online thing, and has even convinced his wife (who owns the billing account) to give him a $20/month spending limit.  The $4.95 price tag is well within his range, so he selects the map, confirms he wishes to purchase it, and the charge is added to his next statement (and deducted from his monthly allocation). Subscription cancellations Jack wants to reduce his monthly expenses.   He goes to the dash and decides to unsubscribe to his entire online account, which includes subscriptions to several games.   The dash walks him through canceling each game, however, when he goes to unsubscribe to Asheron s Car, the game shows a movie reminding him of what a wonderful world he s leaving and how he ll be even less popular with the girls if he stops playing.     He gives in and decides to cancel his magazine subscription to GQ instead. Goals The Billing Signup API has is designed with the following goals: Easy   It should be brain-dead simple for the user to sign up for the XBox Online service and to make purchases.   The dashboard and public APIs should be designed to make this experience simple for the title developers to provide.  Secure   To be successful, users will have to trust our service and any titles that use our service.  It should ensure the user s information is only accessible by the intended audience.  This includes making it easy for title developers to get it right.  Addictive   It should be a simple decision to subscribe, and a difficult decision (emotionally) to unsubscribe.     This means providing the functionality to enable up-selling to premium content, ample advertisement opportunity, and the ability to save a subscription when the user thinks they want to cancel.  Enabling   It should be easy enough for title developers to implement quickly but powerful enough to enable creative scenarios.  Design Billing signup will typically happen the first time a user discovers the availability of online content and decides to purchase it.     Usually this will be introduced through menu options in a title or disc included with a magazine, but may also happen when a user is simply exploring the dash.  In either case, signing up for a billing relationship involves 4 major phases: XBox machine account provisioning Passport account provisioning Billing account provisioning Performing subscriptions or one-time purchases. 1 happens automatically within the dash, the first time online functionality is required.   2 & 3 are typically done once per user   these have specific UI requirements, and therefore will happen within the dash and be implemented by the XBox online team.   The 4th is done one or more times for each online title   this may happen within the dash or within the title. The following flowchart outlines the process that occurs if a user were to make a content purchase or sign up for a subscription through the dashboard:  EMBED Visio.Drawing.6      The chart shows this in the context of loading a title; however the same could happen without the title in the drive.     In such cases, the user starts within the dash and navigates to either the  Accounts  area, or to making a purchase associated with a specific game within the  games  area.     The in-dash signup works best when the first time a user decides to make an online purchase.   In such cases, especially when the purchase is initiated through the title, we can show the aggregate purchase amount (basic subscription + title purchase) during the sign up process.   This allows us to feed the user the  bitter pill  once, instead of two separate occasions within a short time span.    Furthermore, it allows the presentation of cross-title deals, as well as providing all aspects of account maintenance in one central place.  Alternatively, a user may decide to make a purchase within a game.   The process outlined below represents a similar flow as above, except with the title-specific purchases happening in-game.   This process is ideal when the user has an established billing account, and sees something he wishes to purchase while in the title.   EMBED Visio.Drawing.6   The purchase will typically happen within a set of menus at the start of the title, for instance, within a map selection screen.   However these purchases may also happen while immersed in the game itself, i.e. to purchase the virtual Hammer of Thor for the r/l price of $4.95 in the RPG s General Store, or to buy another set of tokens to stay at the virtual blackjack table.  Are there legal requirements on the UI that we must follow any time a user adds charges to their account? Ideally, the only time the user would be required to leave the game is if they haven t yet set up the initial billing relationship.   In these cases, the purchase would then take place in-dash as outlined above.    In any case, the steps for creating a billable account and making purchases are very similar between both cases.   Each step is described in greater detail below.   All APIs are private unless otherwise specified.    In addition, the implementation of these APIs will almost exclusively communicate with mutually authenticated servers via secured HTTP requests using XRLs. Verifying existing accounts Before an Xbox can use online functionality, it must first attempt to log in users.   The XBE can enumerate through the available users via XOnlineGetUsers(), and attempt to sign-in selected users via XOnlineLogon(), passing the title s serviceName for custom services, and/or the XBox Online serviceName for content download, matchmaking and other XBox online services. (NOTE: XOnlineLogon() should implicitly call XOnlineCreateMachineAccount() when necessary.    This is a departure from the original specification, in which machine accounts could only be created inside the dash.   According to BoydM, however, the complexities originally thought to exist with creating machine accounts no longer exist, so this can be done implicitly.   The client implementation of XOnlineLogon() is probably the best to do this.) If one or more of the users wishing to log in doesn t have an established account, the title can reboot to the dash via XLAUNCHDASH(ACCOUNTS) to create the desired accounts.   Once this process is complete, the user reboots back to the title by hitting the   button, where the title can proceed with checking for purchases and/or making new purchases.  Can the title cache/pass  user login info to the dash?     Otherwise the user may be required to enter their pin 3 times (title, dash, then title again). It might be worthwhile to note, any activity associated with the user s account which causes the account to be deactivated or placed on hold (i.e. failure to pay a bill) will also place any 3rd-party service subscriptions on hold until the issue is resolved.   Therefore, successful authentication on any service indirectly includes verification of a good-standing subscription with the XBox Online service.    New account provisioning All accounts (user and machine) are created within the dashboard.    Each box and every user name are associated with a unique Passport account, and as such, will have a unique 64-bit passport ID.   In addition, each user is associated with billable account.    This may be their own account, a family s account, or a guest account.  Do guest accounts get their own passport ID? Machine account provisioning Machine accounts are created via an implicit call to the API XOnlineCreateMachineAccount().   This creates a unique passport sign-in name using a 12 digit serial number and a unique, randomly generated 128-bit password stored on the XBox EEPROM.   Other passport-required values (such as secret question/answer, region, etc.) will be randomly generated and/or given default values, and everything is passed to XOnlineCreatePassport() to allocate the passport account.   What happens if the machine account already exists in the PP db? See the   HYPERLINK "http://sts/xbox_online/Dev/Xbox-Passport%20Online%20Authentication%20Protocol.doc"  Online Authentication Protocol  for more information on the XBox key and usage of machine accounts.  User account provisioning In creating a new user account, the user enters in their preference for a user name and zone.  This is represented to the user as user@zone.   The combination of these will be their unique identity within the XBox community, and is what they ll use to identify themselves within a game as well as to customer support.   This identity will not be tied to a specific box; the user is free to upload it to their MU and roam to any other XBox. Roaming might cause problems when attempting to log on to a box with a different locale.  Should this be limited to the original locale? The password for each user account will be randomly generated and will be 128 bits long.   At account creation time the random key will be generated on the server and sent back to the XBox, where it can be stored on the hard drive or on an XMU.   In lieu of a password, users have the option of protecting their account by entering a PIN-like code entered on the game controller.  This may be a sequence of button presses and d-pad controls.    The series of bytes representing the PIN is hashed and stored with the user account, and compared to the PIN captured any future time the user attempts to log in.  Is it safe to store the PIN on the client box? What happens if the user forgets his PIN?  At account creation time, the user will also be required to select a question from a pre-defined list of  secret questions , and enter in their answer at account creation time.      The purpose behind the secret question/answer is to enable the user to prove their identity when calling customer support. Selecting a user name and zone The user is presented with the opportunity to enter in the name and zone of their choice.   The name is limited to 64 characters, and follows under the same character restrictions as an email name.    The zone can be selected from a list of suggested zones, or the user can enter the name of another zone they re aware of.   However, the zone must be a pre-existing zone.  Do we really need to follow email names?   We can just encode/decode this under the covers, to allow for spaces and such The name and zone combination must be unique among all XBox Online accounts.      When a user has selected a name/zone combination, the interface calls XOnlineCreatePassport(), which will return an error if the account name already exists.   In these cases, XOnlineSuggestNames(zone) should be called to get a list of suggested names for the selected zone, or XOnlineSuggestZones(name) can be called to get a list of suggested zones where the name is not used.     Should we just transmit the data for the suggestions when the CreatePassport api fails? Should we provide access to the list of all available zones? Server note: Passport provides alternate name suggestion functionality, however these are usually created by appending numbers to the user s name.   To provide Cooler names, we may want to build a large db of gaming handles.   Turbine might have already created such a list for their RPG Billing account provisioning Once the user has allocated their user name and zone, they will need to create or be associated with a billing account.   This may be their own account, a member of a family account, or a guest account.  They may also come in to the bill provisioning section with an existing account, i.e. to modify their billing address.  In these cases, the existing user information can be retrieved via XOnlineGetUserBIllingInfo(PUID, &USER_BILLING_INFO).   On the other hand, new information is submitted via individual APIs; while this may incur more round-trips to the server, it should provide a better user experience, as this allows the interface to catch data entry errors before the user proceeds to the next screen. DESIGN ISSUE:  It s expected the interface for entering billing information will span several screens.   To provide a good user experience, each screen should be able to do any necessary data validation before proceeding to the next screen.    The text that follows assumes each screen roughly corresponds to the data used by each API, however, it may prove difficult to correctly factor these.   Would it be better to fill in the same USER_BILLING_INFO struct, and pass this to a single function (XOnlineUpdateUserBillingInfo()) which contains logic to validate and update only specified fields? Association with existing passport The user is first presented with the opportunity to associate the user account with an existing passport created on the PC.    This should be presented before gathering billing information, as it s possible the existing passport will already have billing information associated with it via passport wallet,  which can then be used to provide defaults (or bypass the remainder of account setup altogether).    Furthermore, this should allow us to tie in XBox billing with the billing of other services (such as MSNIA) and to tie in to  package deals  (i.e. 6 free months of XBox Online service with msn broadband subscription).  If a user chooses to enter an existing passport, the interface is pre-populated with the contents of USER_BILLING_INFO.SignIn.   Only the sign-in name is filled in; the password is left blank. Once the user has filled in the sign-in name and password, the information is passed to XOnlineAssociatePUIDWithPassport(PUID, signIn, password).    The PUID of the associated passport is never used on the client   this only serves as an association used by functionality provided by the server.  Association with existing XBox user account An account can be associated with an existing billable already created on the XBox.   This is useful for family or guest account cases, where one account pays for multiple logins.    How this is presented to the user is up to the UI design.   Its possible associated accounts are only created when the user is logged in with an existing billable account, or the new user is able to select an existing user to associate with.   In either case, one both the new user and existing users are selected, the association can be updated via XOnlineAssociatePUIDWithUser(new_PUID, existing_PUID).   Collecting billing information If the user wishes to create a new billing account, the interface will proceed to collect billing information, passing the information to XOnlineCreateAccount(PUID, account_data).  This API will do any necessary verification of the address and billing information, and allocate a new account within the billing service.     Will probably need more than one API for this functionality.   This would probably be the right place to give the user opportunity to enter coupon data.. Purchasing Presenting options A title can start gathering the currently available purchasing options by calling the XOnlineGetPurchaseOptions(TID, UID).     These functions gather the title s subscription or one-time purchase options, including price in the user s local currency, any applicable taxes, and adjusted for any special deals applicable to the title and/or user.   Due to the round-trip operation, this routine operates asynchronously using the XOnlineTaskContinue() API, and continues until options are retrieved from the server. Need to determine the metadata these APIs return. Should we differentiate between subscription and one-time purchase data?  Do these need to come from different services?  Checking permissions Only certain users will have the ability to add (and remove) purchase options from an account.    For instance, members of a family account may not have permissions to add additional charges to the family s billable account if they aren t the direct owner.  Actually, will we support anyone adding charges to a non-billable account?   Not doing so would simplify things.. To sign up for a service, the user needs access to the  UserAccountMaintenance  service.   Titles potentially wishing to add (or remove) subscriptions to a user s account should include this service in the list of services passed to XOnlineLogon().   Users not authorized for this service do not have the necessary permissions to add and remove subscriptions to their account, as would be the case of guest or child accounts.    This may not be a separate service, but simply a flag included within the ticket to the main xbox service. Making a purchase When the user chooses to make a purchase, this results in a call to XOnlinePurchase(), specifying the appropriate SKU gathered from XOnlineGetPurchaseOptions().   The purchasing operation happens asynchronously -- the API will either return an error or a PENDING status code, along with a handle to continue monitoring status using calls to XOnlineTaskContinue().     When the purchase has cleared with user s billing account (i.e. the charge has been placed on the user s credit card) the status changes to COMPLETE, DENIED or an error, depending on the situation.   After the next call to XOnlineLogon(), XOnlineHasPurchase() will return the updated purchase status accordingly. Checking for existing purchases A title (or the dashboard) can check for a purchased item by calling XOnlineHasPurchase().    This is documented in the Billing Authorization API spec (to be written).   Detailed Design  Thanks to Tony Chen and his very well written   HYPERLINK "http://sts/xbox_online/Dev/Xbox-Passport%20Online%20Authentication%20Protocol.doc"  Online Authentication Protocol  document, from which much of the following section was pilfered. Microsoft Confidential Xbox Online Authentication API Page   PAGE   NUMPAGES  eVeEV gdL%[ gdv9U gdNqh gdNqh
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\Xbox Online SPS Service Provider.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online SPS Service Provider (Callback) Server Title _PID_HLINKSXbox Online SPS Service Provider (Callback) Server Ben Zotto Normal Ben Zotto Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags PersonName http://www.microsoft.com MonthXbox Online SPS Service Provider (Callback) Server 2/08/2002  Program Management  Development Ben Zotto  Test Jay Patterson  Operations  TCRs  Usability  International / Localization  Spec Status DRAFT  Document Authors Ben Zotto  Overview Our billing back-end is integrated with the Subscription Platform Group s (SPG) billing system, called the Subscription Platform Service (SPS).  The integration is accomplished by our service acting in two roles: that of a Tenant, and that of a Service Provider.  Tenants of the SPS are front-end systems which pass along purchase and account management requests on behalf of end-users.  Service Providers are deemed to be the entities which perform the act of provisioning, deprovisioning on behalf of SPS.   This distinction comes from the separation between the act of purchasing something (charging money for it), and the act of provisioning it (actually giving the user what they paid for).  SPS separates these acts sharply in SPS 2.5, and doing so provides a flexible and wide-reaching billing and fulfillment platform. Because the Xbox Online service both initiates purchases and is responsible for providing users with what they purchase, we must act as both Tenant and Service Provider.  Details of how we (and title developers) use the Tenant entry points to the system are straightforward are detailed in the  Xbox Online Billing and Offerings API Dev Spec .  Tenant functionality in the datacenter is represented by the XBOS and XUAC front-door servers. In order to act as a Service Provider (SP), we must also provide a  callback  server (XCBK), which services asynchronous requests from SPS for provisioning, deprovisioning, and other account management.  Because we act as both the Tenant and SP, we don t necessarily enforce the sandboxing of the two, and this Dev Spec will cover both the functioning of the XCBK server, and how its role interacts with the role of our front-door servers. Lay of the Land in Datacenterville The XCBK server is mandated to be a SOAP server, exposing an XML Web Service with methods that SPG defines.  SOAP is essentially HTTP, with formatted XML as a payload, used to make lightweight remote procedure calls. SPG mandates that the SP web service be available only via HTTPS (SSL encrypted).  The URL for the service provider looks something like this:  HYPERLINK "https://zotto/xcbk/sprov.asmx"  https://zotto/xcbk/sprov.asmx The WSDL contract for the service is available by following the service URL with the following query:  HYPERLINK "https://zotto/xcbk/sprov.asmx?WSDL"  https://zotto/xcbk/sprov.asmx?WSDL Further details about Provisioning and the ISvcProvider interface (SP) are available on SPG s intranet site, at:  HYPERLINK "http://spg/sps/SPS%2025%20Documents/Forms/AllItems.htm"  http://spg/sps/SPS%2025%20Documents/Forms/AllItems.htm under the  Provisioning  area. As SPS s datacenter is not contained within our own, the current plan involves using a VPN connection between datacenters to allow them to access our XCBK server. XBOS, XCBK and How Provisioning Works For Us This section describes the interactions between XBOS, SPS, XCBK and external entities (CSRs, etc) in terms of who purchases, provisions, and tracks what in the Xbox Online Universe.  Definitions OfferID An Xbox Online representation of an offering (a DWORD) Billing Offer GUID s representation of a single subscription  (a GUID) Service Component ID Within the SPS system, one can define a single subscription to  contain any number of  service components  (things to be  provisioned as part of the subscription). Here in Xbox Online world, however, we (almost always) have a one-to-one mapping between Service Component ID and Billing Offer GUID (a GUID) Service Instance ID The unique ID of an instance of a service component. (16-character opaque string) Subscription ID The unique ID of an instance of an entire subscription. (16-character opaque string) Provisioning/Deprovisioning The actual act of granting and removing user rights to an offer within our UODB.  (An addition/update to the user subscriptions table). Purchase Purchase on the front door will involves translating an Offer ID into a Billing Offer GUID for a call to SPS s PurchaseOffering method.  The PurchaseOffering method does not do provisioning implicitly.  This must be done by an explicit call to ProvisionService.  However, we trump this to avoid asynchronous provisioning and immediate provision the offer (put it in the UODB) on behalf of the user. The PurchaseOffering call returns to us with information about the service component(s) that need to be provisioned and the service instance IDs that SPS has associated with it/them.  SPS also hands back a subscription ID as a way of tracking the entire subscription.  Remembering that we maintain an essentially one-to-one relationship between offers, services, and subscriptions, we record the subscription ID and the service instance ID along with the offer ID in the user subscriptions table. We do, however, call ProvisionService redundantly, because we want SPS to record that the service has been provisioned.  This will, of course, generate an extraneous call to the XCBK server, which is unavoidable for now.  The motivation for having SPS record the provision will become apparent soon. This is done by filling in an XML fragment using some of the data that we got back from SPS.  We send along the original data, plus some PUID/passport name information to the Provision call, and we note in the <details> element that the service has already been provisioned. ( ALREADY PROVISIONED [XBOS] While our current (final?) DRM story implies that we only need to generate dummy provision calls for subscriptions (as opposed to content), there are plausible business (customer support) reasons for doing so in all cases.  This allows us the safety net of being able to deprovision even content access later via CSR. Cancel Cancellation at the XBOS front door is simple.  We simply up the subscription ID in the user subscriptions table, and request a cancellation for that subscription ID. Because all subscriptions will be noted as Provisioned (see above), SPS will always automatically generates a Deprovision call.  This will be caught by XCBK (see cancel description there). Note that no changes to the UODB need to happen at XBOS for a cancellation Because of the way that we have set up dummy provisioning calls, ALL purchasing and cancellation requests, both from XBOS and from external sources (CSRs) will come through the SP interface here. Purchase On receiving a provision request, we first need to see whether this is a dummy notification.  If it is, the <details> field should have that indicated via a note-to-self (see above).  In this case, we simply drop the request, no-op, and return OK. Purchase requests from other, external entities, however, will be legitimate and will need to be handled.  This is done in the following manner: Get service component ID from the request, and use the UODB to translate this into an Offer ID. Use the PUID and service instance ID, and call SPS GetSubscriptions  to retrieve the corresponding subscription ID. Store the set (offer id, subscription ID, service instance ID) in the UODB s user subscriptions table.  This constitutes all the information needed to deprovision, even if the cancel is called from XBOS. Cancel A deprovision request on the callback server can be generated from anywhere.  The following process happens: Use service component ID to retrieve Offer ID from the UODB Search the user subscriptions table by offer ID, user, and service instance ID Mark that offer as cancelled. ISvcProvider Methods SPG (not us) defines the remote methods that we expose for Provisioning. The SPS 2.5 system requires the presence of six methods.  These are outlined below only in the context of how we use them; for the complete and full definitions of the APIs and their use, please see the Subscription Platform Kit (SPK) documentation (spk.chm) and the specs/docs mentioned in the previous section. ProvisionService / DeprovisionService These will perform as described above in terms of Purchase and Cancel.  In our world, the terminology is virtually synonymous. EnableService / DisableService These will be implemented strictly as SPS intends; flipping the subscription_status ID to the appropriate state, per their definitions. ValidateProvisioningData Because we do not use provisioning to do  resource reservation  currently, this API should always succeed.  May do a sanity check to ensure that the service component ID requested is actually in existence, but that may just be a waste of cycles. CheckProvisioningStatus At the moment, we do not do provisioning for things that are   through SPS, at least in the sense they intend.  This API will thus be another no-op.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\callback\test\XCBK Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Jacob Repp Xbox Live Test Plan Template.dot Jacob Repp Microsoft Office WordbjbjqPqP RLINK \l "_Toc74653658"  Table of Contents  PAGEREF _Toc74653658 \h   HYPERLINK \l "_Toc74653659"  Summary  PAGEREF _Toc74653659 \h   HYPERLINK \l "_Toc74653660"  Schedule  PAGEREF _Toc74653660 \h   HYPERLINK \l "_Toc74653661"  Goals  PAGEREF _Toc74653661 \h   HYPERLINK \l "_Toc74653662"  Non-Goals  PAGEREF _Toc74653662 \h   HYPERLINK \l "_Toc74653663"  Related Documents  PAGEREF _Toc74653663 \h   HYPERLINK \l "_Toc74653664"  Functional Testing  PAGEREF _Toc74653664 \h   HYPERLINK \l "_Toc74653665"  Summary  PAGEREF _Toc74653665 \h   HYPERLINK \l "_Toc74653666"  Test Case Matrix  PAGEREF _Toc74653666 \h   HYPERLINK \l "_Toc74653667"  7.2.1 New Test Cases per Milestone  PAGEREF _Toc74653667 \h   HYPERLINK \l "_Toc74653668"  7.2.2 Existing Reusable Test Cases  PAGEREF _Toc74653668 \h   HYPERLINK \l "_Toc74653669"  Stress Testing  PAGEREF _Toc74653669 \h   HYPERLINK \l "_Toc74653670"  Revision History  PAGEREF _Toc74653670 \h  Summary M1 Milestone: This service is not going to change in details of operation or network topology. XCBK does not fall into the service consolidation plan,  it is a soap service that is called by the billing partner backend. M1 only covers consolidation of front-doors and stateful services. In addition to the technical differences the billing servers must be isolated for security reasons. I currently do not have specifications for configuration database changes to XCBK so those are not yet covered in this test plan. M2 Milestone: TBD Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Test review required before reaching this milestone.. Test Functional Code Complete   Functional test code is already written but not run against M1 installed code. Test Stress Code Complete  This service has passed and exceed stress numbers for Tsunami. New perf requirements are needed for this milestone. Test Functional Test Complete   Function test code modified and running against service and approved.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M1 Milestone: Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases. There is no required stress testing for M1 so the  Test Stress Code Complete  and  Test Stress Complete  deliverables do not apply to this milestone. M2 Milestone: TBD Goals Discuss your test goals for each milestone.   Example:  M1 Milestone: I will continue to run regression using the already completed test code as well as light stress to simulate partial service load. There may be more config database testing requirements but since a no spec is available this is TBD. M2 Milestone: TBD Non-Goals M1 Milestone: It is not a goal to heavily stress the performance of XCBK as it s current performance far outstrips any kind of load that would be required by even magnitudes more account operations from our billing partner. M2 Milestone: TBD Related Documents There are no existing specifications for the callback server. Functional Testing Summary The callback server is called by the billing partner through a secure soap protocol. It provides the provision and deprovising accounts based on actions and billing states in a remote system. The bulk of testing involves creating accounts in all of the various states and then enumerating the APIs on the callback server to modify the account status. One the account has been modified the database is queried to check the consistency of the modification. Test Case Matrix New test cases will be available once a the configuration database changes for this service are defined by the development team. New Test Cases per Milestone M1 Milestone: TBD M2 Milestone: TBD Existing Reusable Test Cases ProvisionService A ProvisionService request tells us that we re to start providing a particular service to a single user. ProvisionService ignores the status code and it clears the transaction flag. ProvisionService expects  <AlreadyProvisioned>1<AlreadyProvisioned>  in the details field, requests that do not contain this information will be ignored. Positive cases: ProvisionService.P.Mainline Desc: Call ProvisionService for a user  Verify: Make sure the call passes and the relevant flags (status and transaction) are set.  ProvisionService.P.ZeroTFlags Desc: Call ProvisionService for a user; make sure that the subscription has a zero transaction flag. Verify: Make sure the call passes and the relevant flags (status and transaction) are set.  ProvisionService.P.ProvisionMultiple Desc: Call ProvisionService for a user that has multiple services. Verify: Make sure the all calls pass and the relevant flags (status and transaction) are set.  ProvisionService.P.ProvisionMultiple2 Desc: Call ProvisionService 5 times for a single service. Verify: Make sure the all calls pass and the relevant flags (status and transaction) are set.  ProvisionService.P.ProvisionSingle Desc: Call ProvisionService once for a user that has multiple services. Verify: Make sure the only a single service has been provisioned, and that all others are left intact.  Negative cases: ProvisionService.N.BadPuid Desc: Call ProvisionService for an unknown user  Verify: Make sure the call fails (1021) ProvisionService.N.BadDetails Desc: Call ProvisionService; send bad details information  Verify: Make sure the call fails (1021) ProvisionService.N.BadInstanceId Desc: Call ProvisionService with a bad instance id Verify: Make sure the call fails ProvisionService.N.BadOfferId Desc: Call ProvisionService with a bad offer id Verify: Make sure the call fails ProvisionService.N.EmptyInstanceId Desc: Call ProvisionService with an empty instance id Verify: Make sure the call fails ProvisionService.N.LongFieldsId Desc: Call ProvisionService with string fields set to long strings (500,000 characters) Verify: Make sure the call fails gracefully EnableService A EnableService request tells us that we re to start providing a particular service to a single user. EnableService sets the status code to 2 (Enabled). It does not modify the transaction flag. Positive cases: EnableService.P.Mainline Desc: Call EnableService for a user  Verify: Make sure the call passes and the relevant flags (status and transaction) are set.  EnableService.P.ZeroTFlags Desc: Call EnableService for a user; make sure that the subscription has a zero transaction flag. Verify: Make sure the call passes and the relevant flags (status and transaction) are set.  EnableService.P.EnableMultiple Desc: Call EnableService for a user that has multiple services. Verify: Make sure the all calls pass and the relevant flags (status and transaction) are set.  EnableService.P. EnableMultiple2 Desc: Call EnableService 5 times for a single service. Verify: Make sure the all calls pass and the relevant flags (status and transaction) are set.  EnableService.P.EnableSingle Desc: Call EnableService once for a user that has multiple services. Verify: Make sure the only a single service has been Enabled, and that all others are left intact.  Negative cases: EnableService.N.BadPuid Desc: Call EnableService for an unknown user  Verify: Make sure the call fails (1021) EnableService.N.BadInstanceId Desc: Call EnableService with a bad instance id Verify: Make sure the call fails EnableService.N.BadOfferId Desc: Call EnableService with a bad offer id Verify: Make sure the call fails EnableService.N.EmptyInstanceId Desc: Call EnableService with an empty instance id Verify: Make sure the call fails EnableService.N.LongInstanceId Desc: Call EnableService with an empty instance id Verify: Make sure the call fails DeprovisionService A DeprovisionService request tells us that we re to stop providing a particular service to a single user. DeprovisionService leaves the transaction flag alone, and it sets the status code to 4 (deprovisioned). Positive cases: DeprovisionService.P.Mainline Desc: Call DeprovisionService for a user  Verify: Make sure the call passes and the relevant flags (status and transaction) are set.  DeprovisionService.P.DeprovisionMultiple Desc: Call DeprovisionService for a user that has multiple services. Verify: Make sure the all calls pass and the relevant flags (status and transaction) are set.  DeprovisionService.P.DeprovisionMultiple2 Desc: Call DeprovisionService 5 times for a single service. Verify: Make sure the all calls pass and the relevant flags (status and transaction) are set.  DeprovisionService.P.DeprovisionSingle Desc: Call DeprovisionService once for a user that has multiple services. Verify: Make sure the only a single service has been deprovisioned, and that all others are left intact.  Negative cases: DeprovisionService.N.BadPuid Desc: Call DeprovisionService for an unknown user  Verify: Make sure the call fails (1021) DeprovisionService.N.BadInstanceId Desc: Call DeprovisionService with a bad instance id Verify: Make sure the call fails DeprovisionService.N.BadOfferId Desc: Call DeprovisionService with a bad offer id Verify: Make sure the call fails DeprovisionService.N.EmptyInstanceId Desc: Call DeprovisionService with an empty instance id Verify: Make sure the call fails DeprovisionService.N.LongInstanceId Desc: Call DeprovisionService with an empty instance id Verify: Make sure the call fails DisableService A DisableService request tells us that we re to stop providing a particular service to a single user. DisableService sets the status code to 2 (disabled). It also clears the transaction flag bit 1 to 0 (transactionFlag &= ~2) Positive cases: DisableService.P.Mainline Desc: Call DisableService for a user  Verify: Make sure the call passes and the relevant flags (status and transaction) are set.  DisableService.P.ZeroTFlags Desc: Call DisableService for a user; make sure that the subscription has a zero transaction flag. Verify: Make sure the call passes and the relevant flags (status and transaction) are set.  DisableService.P.LargeDetails Desc: Call DisableService for a user; set the details field to a large random string. Verify: Make sure the call passes and the relevant flags (status and transaction) are set.  DisableService.P.DisableMultiple Desc: Call DisableService for a user that has multiple services. Verify: Make sure the all calls pass and the relevant flags (status and transaction) are set.  DisableService.P.EnableMultiple2 Desc: Call DisableService 5 times for a single service. Verify: Make sure the all calls pass and the relevant flags (status and transaction) are set.  DisableService.P.DisableSingle Desc: Call DisableService once for a user that has multiple services. Verify: Make sure the only a single service has been disabled, and that all others are left intact.  Negative cases: DisableService.N.BadPuid Desc: Call DisableService for an unknown user  Verify: Make sure the call fails (1021) DisableService.N.BadInstanceId Desc: Call DisableService with a bad instance id Verify: Make sure the call fails DisableService.N.BadOfferId Desc: Call DisableService with a bad offer id Verify: Make sure the call fails DisableService.N.EmptyInstanceId Desc: Call DisableService with an empty instance id Verify: Make sure the call fails DisableService.N.LongInstanceId Desc: Call DisableService with an empty instance id Verify: Make sure the call fails CompositeTests These tests test out-of-order execution of XCBK callbacks. Positive cases: CompositeTests.PFullCycle Desc: Provision a service, disable it, enable it, deprovision it. Verify: Call passes CompositeTests.PDeprovisionBeforeDisable Desc: Deprovision a service before disabling it. Verify: Call passes CompositeTests.NEnableBeforeProvision Desc: Enable a service before provisioning it. Verify: Call passes Negative cases: CompositeTests.NDeprovisionBeforeProvision Desc: Deprovision a service before provisioning it. Verify: Call fails (retry) CompositeTests.NDisableBeforeProvision Desc: Disable a service before provisioning it. Verify: Call fails (retry) CompositeTests.NEnableBeforeDisable Desc: Enable a service before disabling it. Verify: Call fails (retry) NoOp Test Cases These tests test the no-op APIs (ValidateProvisioningData and CheckProvisioningStatus): NoopAPIs.VPDEmpty Desc: Call ValidateProvisioningData with all fields set to empty strings. Verify: Call fails (no retry) NoopAPIs.VPDLong Desc: Call ValidateProvisioningData with all fields set to long strings. Verify: Call fails (no retry) NoopAPIs.CPSEmpty Desc: Call CheckProvisioningStatus with all fields set to empty strings. Verify: Call fails (no retry) NoopAPIs.CPSLong Desc: Call CheckProvisioningStatus with all fields set to long strings. Verify: Call fails (no retry) Manual Tests Puid Partitioning Verify that the algorithm used to partition t_subscriptions really works, and that the t_subscriptions tables contain approximately the same number of entries on all servers. A 15% difference will be tolerated. Stress Testing M1 Milestone: Light stress testing will continue on this component to verify that no serious impacts to performance are checked in. This component currently exceeds any reasonable stress requirements. M2 Milestone: TBD Revision History Changes made Author First Draft Jacob Repp Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  gdrIy c_W_SKG gdesA
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\cust\test\CUST Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Jacob Repp Xbox Live Test Plan Template.dot Jacob Repp Microsoft Office WordbjbjqPqP Table of Contents  PAGEREF _Toc74121912 \h   HYPERLINK \l "_Toc74121913"  Summary  PAGEREF _Toc74121913 \h   HYPERLINK \l "_Toc74121914"  Schedule  PAGEREF _Toc74121914 \h   HYPERLINK \l "_Toc74121915"  Goals  PAGEREF _Toc74121915 \h   HYPERLINK \l "_Toc74121916"  Non-Goals  PAGEREF _Toc74121916 \h   HYPERLINK \l "_Toc74121917"  Related Documents  PAGEREF _Toc74121917 \h   HYPERLINK \l "_Toc74121918"  Functional Testing  PAGEREF _Toc74121918 \h   HYPERLINK \l "_Toc74121919"  Summary  PAGEREF _Toc74121919 \h   HYPERLINK \l "_Toc74121920"  Test Case Matrix  PAGEREF _Toc74121920 \h   HYPERLINK \l "_Toc74121921"  7.2.1 New Test Cases per Milestone  PAGEREF _Toc74121921 \h   HYPERLINK \l "_Toc74121922"  7.2.2 Existing Reusable Test Cases  PAGEREF _Toc74121922 \h   HYPERLINK \l "_Toc74121923"  Stress Testing  PAGEREF _Toc74121923 \h   HYPERLINK \l "_Toc74121924"  Revision History  PAGEREF _Toc74121924 \h  Summary Discuss the changes being done in your service area for each milestone. Example: M1 Milestone: The XMAC and XKDC services are being combined into one server cluster.  There will be minimal changes to the service code itself but there will be big changes in the way configuration is being loaded.  With the addition of the configuration database, the new combined XMAC/XKDC service will load its configuration information from a configuration database instead of a local initialization file.  The XMACS and XKDC components will also now rely on the XMOSS server to load its encrypted service keys.  With out this XMOSS service, the XKDC and XMACS will fail to initialize properly.  This test plan will document my approach to make sure these changes will be well tested for eventual production deployment. M2 Milestone: TBD Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M1 Milestone: Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases. There is no required stress testing for M1 so the  Test Stress Code Complete  and  Test Stress Complete  deliverables do not apply to this milestone. M2 Milestone: TBD Goals Discuss your test goals for each milestone.   Example:  M1 Milestone: Since my server is being rewritten from C++ to C#, my goal is to use 90% of my existing tests by re-running them against the front door and develop 10% new cases to that will talk directly to the SQL server.  Rerunning existing tests against the front door will validate that there has been no behavior change in server since the previous release.  The new test cases being developed for the SQL server will provide an additional level of coverage since the rewrite now depend more heavily on data being stored in SQL vs. caching in the front door.  I will also be writing new test cases to validate the new configuration settings being pulled from the configuration database vs. the previous local initialization file method. M2 Milestone: TBD Non-Goals Clearly state the dividing line between what you will be covering and what you won t be covering for each milestone. Example:  M1 Milestone: It is not a goal to run a complete set of statistics API s through both the front doors and the INH server.  90% of my tests will talk directly to the in-house server providing the highest level of direct API coverage for the statistics service.  Only basic integration tests will be run against the front door to validate that the front door will act as a reliable pass through mechanism.  Only ELO leader boards will be tested in conjunction to the other mentioned integration tests on the front doors since these leader boards perform front door cache specific operations. M2 Milestone: TBD Related Documents Reference any documents (via its path in CoreXT) that relate to your test plan. Example:  If this is the arbitration test plan, then referencing (as follows) the arbitration dev spec would be useful.   Xbox Live Arbitration Development Spec ($corext\private\doc\server\arbitration) Functional Testing Summary Write a summary for your test methodology as it relates to the complete test matrix. Example: The Arbitration server has four main APIs that control the registration, time extension, debugging, and result reporting for game sessions.  Functional testing will strive to test the matrix surrounding this API set. Test Case Matrix [DELETE THIS LINE: This section is broken up into what new test cases will need to be written for this milestone vs. what test cases you will be reusing from previously developed tools.] New Test Cases per Milestone M1 Milestone:  Insert new test case matrix here. M2 Milestone: TBD Existing Reusable Test Cases GetPuidFromXName GetPuidFromXName resolves a name into a puid. On failure it returns zero. Positive cases: GetPuidFromXName.P.Mainline Desc: Call GetPuidFromXName for a user  Verify: Make sure the call passes and the returned puid matches.. Negative cases: GetPuidFromXName.N.BadName Desc: Call ProvisionService for an unknown user  Verify: Make sure the call fails. GetPuidFromXName.N.BlankName Desc: Pass in a blank user name. Verify: Make sure the call fails. GetPuidFromXName.N.LongName Desc: Pass in a long (65K) user name. Verify: Make sure the call fails. GetAccount GetAccount retrieves information (banned state, must change tag, etc.) about a user from the UODB. This API is also used to verify ModifyAccount functionality. Positive cases: GetAccount.P.Mainline Desc: Call GetAccount for a user  Verify: See if the results match data stored in the UODB. Negative cases: GetAccount.N.BadPuid Desc: Call GetAccount for an unknown user  Verify: Make sure the call fails. GetRelatedAccounts Users under the legal age requirements get two puids associated with their account: their own   the user puid, and an owner puid that s supposed to represent their parent or guardian. This API resolves an owner puid into a user puid. Positive cases: GetRelatedAccounts.P.Mainline Desc: Call GetRelatedAccounts for a user that has an associated owner. Verify: See if the results match data stored in the UODB. GetRelatedAccounts.P.SingleUser Desc: Pass in a puid of a user that does not have an owner (ie. The user is his own owner) Verify: See if the results match data stored in the UODB. Negative cases: GetRelatedAccounts.N.BadPuid Desc: Call GetRelatedAccounts for an unknown user  Verify: Make sure the call fails. GetTransactions Retrieves the first n transactions that haven t been processed (mail hasn t been set) yet. Transactions are logged by UACS and XBOS whenever a user purchases or cancels something. GetTransactions is used in conjunction with EmailsSent: GetTransactions returns a list of transactions, and then EmailsSent is used to let CUST know which emails have been sent. Positive cases: GetTransactions.P.Mainline Desc: Call GetTransactions, request 10 returns Verify: Make sure the call passes and the data returned matches the state of the UODB. GetTransactions.P.Zero Desc: Call GetTransactions, request 0 transactions Verify: Make sure the call passes and the data returned matches the state of the UODB. Negative cases: GetTransactions.N.TooMany Desc: Call GetTransactions, request 1001 transaction (there is a server limit of 1000 transactions per call). Verify: Make sure that the right amount of data is returned EmailsSent Once confirmation emails have been sent, the CUST server needs to be notified of the changes. CUST will then mark these entries as  email sent , and they won t be returned by GetTransactions any more. This API will be tested by executing a set of GetTransactions   EmailsSent   GetTransactions. Positive cases: EmailsSent.P.Mainline Desc: Call EmailsSent with 10 puids. Call GetTransactions, make sure that the emails that have been sent are not returned by GetTransactions. Verify: Make sure the call passes and the data returned matches the state of the UODB.  Negative cases: EmailsSent.N.BadServiceIDs Desc: Call EmailsSent, with 10 puids, but get service IDs wrong. Verify by using GetTransactions. Verify: Make sure the call fails and that subsequent GetTransactions calls return the same data set since it was not processed.  ModifyAccount ModifyAccount is related to GetAccount: it allows the CSRs to lock out an account, voice ban it, or force a name change. This API will be tested by calling the following APIs: CreateOwnerAccount   ModifyAccount   GetAccount   custom UODB query that simulates GetAccount. The results of the last two operations should match. Positive cases: ModifyAccount.P.Mainline Desc: Call ModifyAccount multiple times with various flags set or cleared. Verify: Look up accounts in the UODB, make sure that the right flags have been modified. Also verify using GetAccount.  Negative cases: ModifyAccount.N.BadPuid Desc: Call ModifyAccount with a bad puid. Verify: Make sure the call fails.  ResetPassword Resets the user s password. Due to the nature of this API, it is difficult to test whether the password change is successful. Therefore we only rely on the return code. Client side testing should be able to test this API to the full extent. Positive cases: ResetPassword.P.Mainline Desc: Reset the user s password. Verify: Make sure the call passes.  Negative cases: ResetPassword.N.BadPuid Desc: Call ResetPassword with a bad puid. Verify: Make sure the call fails.  GetSubscriptionCodeStatus Subscription codes are used by UACS in the process of creating accounts. This API returns all relevant information concerning a sub code. This includes flags that are set if a sub code is valid, used too many times, has been used at all, who was the last user that used it, and when it was last used. The tests listed here rely on UACS to create accounts and use up vouchers. Positive cases: GetSubscriptionCodeStatus.P.Mainline Desc: Create a new sub code with a use count of 2. Call GetSubStatus to make sure that it s valid and unused. Use it once, call GetSubStatus and verify data. Repeat once again. Make sure that the sub code is valid, but used up after the second call. Verify: Make sure the call passes.  Negative cases: GetSubscriptionCodeStatus.N.BadVoucher Desc: Call ResetPassword with a bad voucher. Verify: Make sure the call fails.  GetSubscriptionCodeStatus.N.EmptyVoucher Desc: Call ResetPassword with a blank voucher. Verify: Make sure the call fails.  GetSubscriptionCodeStatus.N.LongVoucher Desc: Call ResetPassword with a long (66,000 character) voucher. Verify: Make sure the call fails.  Stress Testing [DELETE THIS LINE: There is no official M1 milestone stress testing requirements for this milestone, however, if your area of ownership has minor changes you can choose to take on additional stress work in this milestone to make your life easier in the next milestone.] Example: M1 Milestone: No stress testing will be performed for this milestone due to the functional changes being validated in this timeframe. Example: M1 Milestone: Since minimal changes are being performed for this milestone, even though there is no official stress testing requirement, it is my goal to establish a TPS baseline for this version of the code. M2 Milestone: TBD Revision History Changes made Author First Draft Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  gdrIy gdesA gdesA
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\cust\test\Cust New Tools API Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Title _PID_HLINKSMichael Fisher Normal.dot Michael Fisher Microsoft Office WordCust   API Changes for Tools Test Plan PM:  Shaykatc Dev:  Ramhar Test:  Mifish Introduction Whenever new functionality is introduced to allow users to provide content for use in the Xbox Live system, new enforcement methods must be created to allow us to appropriately deal with inappropriate content.  With the addition of user supplied gamercard mottos on Xbox.com and user created personal gamer pictures when Cyclops is released, it is therefore necessary that we have the ability to remove inappropriate content and prevent offenders from immediately repeating the offense via a temporary communications ban. Cust API Tools Additions Dev Spec:  HYPERLINK "http://team/sites/xbxe/Shared%20Documents/Tools/Community%20Management/CM_ChangesForVision.doc"  http://team/sites/xbxe/Shared%20Documents/Tools/Community%20Management/CM_ChangesForVision.doc QuickEnforcement Data Flow Model (inc. Cust):  HYPERLINK "http://team/sites/xbxe/Shared%20Documents/Tools/Community%20Management/XenonQuickEnforcementsDataFlow.vsd"  http://team/sites/xbxe/Shared%20Documents/Tools/Community%20Management/XenonQuickEnforcementsDataFlow.vsd The 2 new methods will require new test cases to cover them.  The change to ModifyAccount() is already covered by existing test cases. API Changes & Test Cases The following 3 methods and corresponding test cases are being added: New Method:  public uint RemoveGamerPicture(ulong puid, out string errorString) Purpose:  Remove an inappropriate gamer picture, which will now default to the public gamer tile.  Can only apply to Silver, Gold, and Gold Migrated users.  XboxCom users don t have Xboxes, thus no camera and the camera doesn t work on the Xbox 1. Positive: Verify valid puid with personal gamer picture present and verify 1) success result and 2) Storage server confirms picture the picture isn t there any longer. Verify valid puid with no personal gamer picture present Negative: Verify valid puid with no access to Storage server Verify min/max puid values Verify random valid but non-existent puid New Method:  public uint SetUserMotto(ulong puid, string newMotto, out string errorString) Purpose:  Change an inappropriate user motto to something different.  Applies to all users types. Positive: Verify valid puid with valid gamer motto string  Verify valid puid with valid gamer motto string with Unicode string (JP, CH, etc.) Negative: Verify valid puid with invalid gamer motto string using characters like:  Verify valid puid with empty gamer motto string Verify valid puid with over-sized (22 or more chars) gamer motto string Verify valid puid with no access to Stats server Verify min/max puid values Verify random valid but non-existent puid The following API is being modified: Modified Method:  public uint modifyAccount(ulong puid, bool isLockedOut, bool isVoiceBanned, bool isNicknameBanned, bool mustChangeXName, out string errorString) Purpose:  The  Voice Ban  flag is being repurposed to become a more general  Communications Ban  to disable all voice, video, photo, messages, and text communications.  When an inappropriate photo, voice, text, etc. message has been sent, the sending account will be temporarily banned from all forms of communicating.  The first time an account is banned, the ban lasts for 1 day.  A second ban lasts for 7 days.  All subsequent bans last for 14 days.  If an account is already in a communications ban state and isVoiceBanned is set to true, calling this method does nothing, however if isVoiceBanned is set to false it will set the VoiceResumeDate field in the user s account to  1 minute ago now , lifting the ban. Existing ModifyAccount tests already cover this functionality.  No new test cases are required by this change to the API. gd8Z& gd8Z&
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\Xenon UACS API Dev Spec.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Daniel Caiafa Microsoft Corporation Xenon UACS Dev Spec Title _PID_HLINKSXenon UACS Dev Spec Gary Thompson, Dan Walther Normal.dot Dan Walther Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags PlaceType urn:schemas-microsoft-com:office:smarttags PlaceName urn:schemas-microsoft-com:office:smarttags place http://www.5iantlavalamp.com/V urn:schemas-microsoft-com:office:smarttags PersonName http://www.microsoft.com ]=3nAn@ N"Whbl,w ^LEi~ }\z:fZIDATx^ ]U 53 GKnX+ VwP}E^6-u ; {gJ*[D 2XA{I7 %asY` bGIXvt W'?zf "U' ? ve)c) ]aj;7- v%aG) aFK/b= -t%zYqa jAym@ f1|A\ 6[Zj{ <+4zP  s}yCi G6L(L N'Y6@ #*4>8 G"~r)Aj4 C#d}$ dxr&4r,<z,41 '"<OO P;UYG d.Bon3/ &f+{: t[>66 l0$9d P}q0/ 80pxp qIYFQoh_ j7I]r GS"|0 *%DAp) PA,'V Xht*29 LtdJZ tv$KY H<IRC# _$/*P+ m#+ZlzA9 @@r4R IR,^<q 7{ovww 2r{9* DZ#V`$ v $`  uNS pv9_ZYX  ^o{e 12y|$  quwI bd;[{ ''&'' 9G'o` hsgsf N_J]|&[ ;~b43 Lm-XH =|+MU Y/sLlb:F 4'w80, 9y>3y 7j|q: r<S|a X!R9J M4h26A ^xZ9i i9W]_ n@pH0 MbjqP f+eFG R% ,U dtQ3: hbHc> Ln`oi TMTd@ hHL/)}m8 [}Oah pz$ld $Dn@i <1r@, n)T~h 4x(.I 21-WVVXenon UACS Dev Spec Last Updated:   DATE \@ "M/d/yyyy"  11/15/2004 Spec Owners Client-side Contacts Content Contacts UI Contacts Development Dan Walther, Gary Thompson Operations  Spec Status Draft   Reviewed   Closed Created 11/4/2004 Overview Architecture and Description Handling CSR changes to a user s SCG account Customer service (CSR) will have the ability to change a user s SCG account.  If the CSR moved the user from silver to gold, we need to have a way of knowing that the user s tier has changed, so that we can start treating them as a gold user. In a meeting with Arun Sacheti, from MPG, it was suggested that we can change our design (from Xbox 1) such that rather than having a single SCG component ID for all of our offers, we model each of our tiers with different component IDs.  This would have the effect of giving us a callback whenever a user s component ID changed. Since we don t want to receive a deprovision call from the source tier when moving to the destination tier, we should also place all of our offers into the same  component class.   This will ensure that the user being moved from silver to gold will create a single callback to Live with the information that gold service should be provisioned. SCG Account State Component ID1 Component ID2 Component Class "Light-weight" account in SCG with no associated subscription Bronze SCG account with a subscription to silver (monthly, yearly, etc) Silver SCG account with a subscription to gold (monthly, yearly, etc) Issue: I m not sure how to add existing Xbox 1 offers to this chart. We already store the component ID associated with the offer in t_offers.  Since it is possible to have multiple component IDs associated with an offer, and since we want to simplify our offer modeling of old Xbox offers, we will keep the old component ID to mean  access to Live .  Silver and gold offers will also have additional component IDs to distinguish them.  A schema change will be needed to associated a single offer with multiple component IDs. When we receive a callback from SCG, we will be given the component IDs of the offer the user is being moved into, as well as the  instance ID  associated with the user s subscription.  This instance ID is associated with a user in the t_subscriptions table, and so we will be able to change the user s subscription accordingly.  The next time the user logs on, their new subscription should take effect and grant them the new set of privileges associated with the change. Live Service APIs Public APIs for Game Developers If needed:  Describe any client APIs exposed to game developers here. Also call out what old Xbox APIs are deprecated or replaced by these new APIs. Private APIs for Guide XOnlinepSetUserSettings2 This SPI updates a user s tier, userflags, and set of privileges on the server, by calling the uacs method SetUserSettings2. XBOXAPI DWORD WINAPI XOnlinepSetUserSettings2(     const XUID *pUserXuid,     WORD bTier,     WORD dwUserFlags,     const DWORD *rgPrivileges,     PXOVERLAPPED pXOverlapped     ); Client Side Caching and Throttling If needed:  Describe any client side caching or throttling that will get implemented. Public Web Service APIs for Partners If needed:  Describe any SOAP widgets that need to get developed to expose public SOAP APIs to web partners. Private Web Service APIs for Xbox.com If needed:  Describe any SOAP widgets that need to get developed to expose private SOAP APIs to Xbox.com. Such widgets should generally not need to exist except for cases when extreme caching is required. Database Schema Information on database schema to support tiers and privileges can be found in the  HYPERLINK "http://team/sites/xbxe/Shared%20Documents/Developer/Xe%20Authorization%20Dev%20Spec.doc" Xe Authorization Dev Spec Server Components Repeat this section for any new server side component that needs to get developed. Design SetUserSettings2 The purpose of this API is to allow the launcher to set up a user in a specific way, usually to be used when testing out changes to a user s privileges. The API will take the user s puid, and will allow changing the tier, the userflags, and allow fine-grained control over each privilege. The p_xuacs_set_user_privileges sproc will specifically grant/deny the privileges specified in the request, thereby overriding any tier/subscription, parental controls, or free weekend type settings. This API can only be called by the Dash TitleID. Issue: Once this API has been called, there is no way to revert the user back to observe normal tier/subscription, parental controls, or free weekend type settings. Is that a problem? Wire Protocol This section will describe the wire protocol of any/all API s that have changed in Xenon.  These wire protocols may fall out of date over time to see the latest uacs protocol definitions, look in UacsProtocol.cs. SetUserSettings2     public class SetUserSettings2Request : XRLObject2     {         public ulong    userPuid           =0;        // user we're talking about                  public ushort   tier               =0;        // the new tier of the user                  public ushort   userFlags          =0;        // the new user flags                      [WireInfo(ArraySize=XOn.PRIVILEGE_DWORD_LENGTH)]                     public uint[]   userPrivileges;               // the new user privileges                  //         // Helpers for client & widget code         //         public string Xrl         {             get { return "/xuacs/SetUserSettings2.ashx"; }         }     } Configuration Parameters Describe any configuration settings this component uses. Describe the default value as well as any value that will have TestNet, PartnerNet, or CertNet values different than those used in Production. Management Commands Describe any management commands this component exposes. Think about how OPS is going to manage this server component and what an OPS person might want to do with such a live running server component (flushing a cache, etc ). Avoid creating management commands that simply return a number. You should use performance counters for that. Events If needed: In general, the standard events defined in xeventids.h should be used for all events. If any special events are thrown, they should be described here. Remember, event texts should contain as much detail as possible including the Call Stack, the SG Auth Info of the caller and even the full incoming wiredata payload (using the ToString() function of WireData). If the XOC wakes you up at 3 am and tells you this event fired in the production data center, you should have enough info in the event text to help you determine what to do next. Performance Counters Describe the performance counters this component exposes. In general, we at least want a total counter and TPS counter per API as well as a total counter and TPS counter per title per API. This enables us to evaluate which title is abusing which API at what rate. Also, if the cost of carrying out the API call is drastically different depending on the parameters of the API, then you should create another per title per API total counter and TPS counter that more accurately reflects the   of the API call. For example, if the storage server can handle 1000  ReadData  API calls per second when 0 bytes is read, but can only handle 500  ReadData  API calls per second when 20000 bytes is requested in each read, then you should create a counter that gets incremented by (1 + bytesRead / 20000) for each ReadData API call. Under the performance category  Xuacs:SetUserSettings2 , the following counters are created: Counter Name Description SetUserSettings2 requests/sec SetUserSettings2 requests per second SetUserSettings2 total Total SetUserSettings2 error events recorded in the the current AppDomain SetUserSettings2 failures/sec Number of unsuccessful results returned by SetUserSettings2 per second in the current AppDomain SetUserSettings2 total failures Total number unsuccessful results returned by SetUserSettings2 in the current AppDomain  SetUserSettings2 avg. Execution time Average time taken to Execute SetUserSettings2 Describe the log lines this component writes out. This should be as simple as cut and pasting the  XomLog  lines in any C# code (assuming you named all your variables an easy to understand name). In general, a log line should be generated for each API call. The log line doesn t necessarily need to contain all the parameters of the API call, but should contain the most important ones. Read the LogPrinciples.doc document for more rules to follow. SetUserSettings2 511|SetUserSettings2| <UserPUID>|<UserFlags>|<Tier>|<Privileges>|<HResult> Setup If needed:  Anything special about how this component is setup should be described here. Web Client Components for Xbox.com If needed: Xbox.com dev team only. Describe the HTML structure, the Java scripts and the CSS structure used.  Interesting Test Cases If needed: If you have any non-obvious test cases that you would like the test team to test, mention it here. Security If needed: Most of the components in our system are already protected from massive internet hacking and DoS attacks by the SG and the KDC. But you should always assume a few good hackers can send any data they want through the SG. Think about what these hackers can do to this feature and these components. In general, you should only trust the SG auth data retrieved from the SG, and not blindly trust any data sent in the wire data. You should use the SG auth data to verify any assumptions that should be true. In general, you should never allow a request to directly modify user information without using SG auth data to verify that you are really talking to said user. Production Upgrade  If needed:  Think about how the production site will need to get changed to support this new feature. Does any data need to get migrated? What migration scripts will need to get written? Can it be done without any downtime? Describe how new bits for this feature can be deployed without downtime if it is possible. Reporting If needed:  This section should detail what aspects of this feature will be reported upon. The reporting service will be responsible for gathering data from each feature and displaying it in a consistent way, however each feature and service needs to think about what data is important to report on, and how that data will be made accessible to the reporting service.  What databases, logs, performance counters will need to be analyzed? How frequently will reports be relevant?  Will this feature/service be doing any aggregations that the reporting service can use? TitleMgr Impact If needed:  Think about whether any titlemgr changes are needed for this feature. Whenever a new title is added to the system, does anything need to be done for that title? Tools If needed:  Think about how OPS is going to run this feature after it is deployed. What tools will they need? Is there any cleanup needed on and database tables? Are any tools needed to migrate the data from one machine to another? Is this a valid scenario for the feature? Microsoft Confidential. Unpublished work.   Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  xpxpxpx gdVup gdVup gdVup rfrfrfrfrZr
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\drm\Diet Orange Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Title _PID_HLINKSMichael Fisher Normal.dot Michael Fisher Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags placeDiet Orange Test Plan PM:  slange Dev:  dcaiafa Test:  mifish Introduction Diet Orange is the codename for the next XBOS DRM service method GetRevocationList.  This method returns a list of hashed values from the blacklisted digests table in NPDB to allow the revocation of special executables.  It is intended for the 360 hypervisor to call this method to ascertain if an executable being loaded has been revoked.  For some executables, this call can fail and execution will proceed.  For others, this call must succeed or the executable will not be run. PM Spec:  HYPERLINK "http://team/sites/xsoft/Sebastian/Shared%20Documents/dietorange.doc"  http://team/sites/xsoft/Sebastian/Shared%20Documents/dietorange.doc Dev Spec:  HYPERLINK "http://xblwiki/default.aspx/XboxLive/XBosFD.html"  http://xblwiki/default.aspx/XboxLive/XBosFD.html APIs & Test Cases The following XBOS DRM method and corresponding test cases are being added: New Method:  public uint XeGetRevocationList(byte[20] clientNonce) Purpose:  Retrieve a list of hashed executable values for revocation. Positive: Verify 0 digests returns 0 blacklisted digests Verify 25 blacklisted and 25 non-blacklisted digests returns 25 blacklisted digests Verify 25 blacklisted and 0 non-blacklisted digests returns 25 blacklisted digests Verify 0 blacklisted and 25 non-blacklisted digests returns 0 blacklisted digests Verify 400 digests returns 400 blacklisted digests Verify 400 blacklisted and 100 non-blacklisted digests returns 400 blacklisted digests Verify 500 blacklisted and 0 non-blacklisted digests returns a truncated list of 400 blacklisted digests Verify min nonce (0x0) value succeeds Verify max nonce (0xFF repeated 20 times) value succeeds Negative: Verify appropriate failure with XRL empty payload Verify appropriate failure with XRL payload too small Verify appropriate failure with XRL payload too large |x|t|x|t
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\offering\test\XBOS Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Jacob Repp Xbox Live Test Plan Template.dot Jacob Repp Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags country-region urn:schemas-microsoft-com:office:smarttags PlaceType urn:schemas-microsoft-com:office:smarttags PlaceName urn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags State urn:schemas-microsoft-com:office:smarttags MonthbjbjqPqP C \o "1-3" \h \z \u   HYPERLINK \l "_Toc74121912"  Table of Contents  PAGEREF _Toc74121912 \h   HYPERLINK \l "_Toc74121913"  Summary  PAGEREF _Toc74121913 \h   HYPERLINK \l "_Toc74121914"  Schedule  PAGEREF _Toc74121914 \h   HYPERLINK \l "_Toc74121915"  Goals  PAGEREF _Toc74121915 \h   HYPERLINK \l "_Toc74121916"  Non-Goals  PAGEREF _Toc74121916 \h   HYPERLINK \l "_Toc74121917"  Related Documents  PAGEREF _Toc74121917 \h   HYPERLINK \l "_Toc74121918"  Functional Testing  PAGEREF _Toc74121918 \h   HYPERLINK \l "_Toc74121919"  Summary  PAGEREF _Toc74121919 \h   HYPERLINK \l "_Toc74121920"  Test Case Matrix  PAGEREF _Toc74121920 \h   HYPERLINK \l "_Toc74121921"  7.2.1 New Test Cases per Milestone  PAGEREF _Toc74121921 \h   HYPERLINK \l "_Toc74121922"  7.2.2 Existing Reusable Test Cases  PAGEREF _Toc74121922 \h   HYPERLINK \l "_Toc74121923"  Stress Testing  PAGEREF _Toc74121923 \h   HYPERLINK \l "_Toc74121924"  Revision History  PAGEREF _Toc74121924 \h  Summary M1 Milestone:The only change to the server in this time frame is the addition of a configuration database. This work has not been clearly defined so that is not yet reflected in this test plan. M2 Milestone: TBD Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M1 Milestone: Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases. There is no required stress testing for M1 so the  Test Stress Code Complete  and  Test Stress Complete  deliverables do not apply to this milestone. M2 Milestone: TBD Goals M1 Milestone:  It is a goal of this milestone to verify base functionality against the new test environment. Once development has specified configration database changes to this server new test scenarios will be generated to validate those new settings and operation. M2 Milestone: TBD Non-Goals M1 Milestone:  It is not a goal to validate operation with SPS. Actual offers are not tested, all offers are generated in code.  M2 Milestone: TBD Related Documents Functional Testing Summary The billing server is tested by first creating a large permuted set of test offers covering all offer combinations. These are then run through a full set of functional tests with different types of users in different countries. Test Case Matrix  New tests will need to be written to support configuration database changes. New Test Cases per Milestone M1 Milestone: TBD M2 Milestone: TBD Existing Reusable Test Cases OfferingEnumerate ENUMERATE_INVALID_USER Description:  Enumerate for an invalid user.  Input:  qwUserPuid            11               System State: UODB does not have a user PUID that is 11. It s usually a much bigger number and one assumes this. Verify:  The XBOS server returns HTTP_ERROR 500.  The expected X-Error is  XONLINE_E_OFFERING_INVALID_USER (0x80153002) if we turn off the SG authentication; however, with SG spoofing the error returned is HTTP_X_ERROR(0x8015000A). NOTED as nothing that can be done if we use the SG. ENUMERATE_VALID_5_OFFERS Description:  Enumerate 5 valid offers. Input:  qwUserPuid                    888888888888881  dwTitleId                     801              cbClientBuffer                340              dwRating                      0                ftLastChangedDate             01/01/1900       dwOfferingType                3                dwBitFilter                   -1               dwDescriptionIndex            0                wStartingIndex                0                wMaxResults                   5                System State: UODB is first charged with 5 offers using a sample data file. Verify:  XBOS server returns HTTP_ERROR 200. cRecords, fFlags, ftLastChangedDate, cbRecordSize, iRecordIndex, qwOfferingId, dwOfferingType,                dwBitFlags, cbInstallSize, cbPackageSize,                 ftActivationDate, dwRating, cbTitleSpecificData[0 -4],        dwTitleSpecificDataOffset[0 -4], pbEnumBlob[0 -4] Are all correct to the charged data.                  ENUMERATE_VALID_NEGATIVE_TITLEID Description:  Check if a negative title id is supported. Input:  qwUserPuid                 888888888888881 dwTitleId                  -1              cbClientBuffer             400             dwRating                   0               ftLastChangedDate          01/01/1900      dwOfferingType             1               dwBitFilter               -1               dwDescriptionIndex         0               wStartingIndex             0               wMaxResults                5                              System State: UODB is first charged with offers containing a max dwTitle Id using a sample data file. Verify:  XBOS server returns HTTP_ERROR 200. cRecords, fFlags, ftLastChangedDate, cbRecordSize, iRecordIndex, qwOfferingId, dwOfferingType,                dwBitFlags, cbInstallSize, cbPackageSize,                 ftActivationDate, dwRating, cbTitleSpecificData[0 -4],        dwTitleSpecificDataOffset[0 -4], pbEnumBlob[0 -4] Are all correct to the charged data. ENUMERATE_VALID_5_ASK_FOR_3_MAX Description:  Enumerate 5 offers but ask for 3 max results.  Input:  qwUserPuid                        888888888888881   dwTitleId                         801               cbClientBuffer                    340               dwRating                          0                 ftLastChangedDate                 01/01/1900        dwOfferingType                    3                 dwBitFilter                       -1                dwDescriptionIndex                0                 wStartingIndex                    0                 wMaxResults                       3                 System State: The UODB is first charged with 5 valid offers. Verify:  XBOS server returns HTTP_ERROR 200. Are returned data is correct to the charged data. And most importantly that fflags reports 1 indicating more to come. ENUMERATE_INVALID_OFFERINGTYPE Description:  Enumerate with an offering type of 2. This should produce no response as there is no data for TitleID 801 with Offeringtype 2.   Input:  qwUserPuid              888888888888881    dwTitleId               801                cbClientBuffer          300                dwRating                0                  ftLastChangedDate       01/01/1900         dwOfferingType          2                 dwBitFilter             -1                 dwDescriptionIndex      0                  wStartingIndex          0                  wMaxResults             4                  System State: The UODB is not charged with any offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. Expect ContentLength is 0.  ENUMERATE_VALID_MAX_TITLEID Description:  Testing the max a title ID can be. There are 5 offers set to receive only 4.   Input:  qwUserPuid                        888888888888881  dwTitleId                         -1               cbClientBuffer                    300              dwRating                          0                ftLastChangedDate                 01/01/1900       dwOfferingType                    1                dwBitFilter                       -1               dwDescriptionIndex                0                wStartingIndex                    0                wMaxResults                       4                  System State: UODB is not charged with 5 valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. Expect 4 correct results in the response. Expect fflags to be 1.  ENUMERATE_VALID_MAX_QWUSERPUID Description:  Maximum a value of a qwUserPuid   Input:  qwUserPuid                        -1            dwTitleId                         801           cbClientBuffer                    340           dwRating                          0             ftLastChangedDate                 01/01/1900    dwOfferingType                    1             dwBitFilter                       -1            dwDescriptionIndex                0             wStartingIndex                    0             wMaxResults                       5 System State: UODB is charged with valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. Expect correct results filling UODB data in the response. ENUMERATE_VALID_NEXT_O_INDEX_WSTARTINGINDEX Description:  Test setting the next value of the wStartingIndex. Start at index 1. For 801 offers are 180005,180006,180007,180008,180009.  Input:  qwUserPuid                        888888888888881       dwTitleId                         801                   cbClientBuffer                    340                   dwRating                          0                     ftLastChangedDate                 11/16/2001            dwOfferingType                    1                     dwBitFilter                       -1                    dwDescriptionIndex                0                     wStartingIndex                    0                     wMaxResults                       3 System State: UODB is charged with 5 valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. Expect qwOfferingId  is 0x000003210002BF26. (180006). Rest is matched to what is in the UODB. ENUMERATE_VALID_FINAL_5_INDEX_WSTARTINGINDEX Description:  Test setting the final value of the wStartingIndex. For 801 offers are 180005,180006,180007,180008,180009. Input:  qwUserPuid            888888888888881 dwTitleId             801             cbClientBuffer        340             dwRating              0               ftLastChangedDate     01/01/1900      dwOfferingType        3               dwBitFilter           -1              dwDescriptionIndex    0               wStartingIndex        5               wMaxResults           3               System State: UODB is charged with 5 valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. Expect ContentLength to be 0. Since Index is zero based. This should return nothing. ENUMERATE_VALID_SMALLER_CDCLIENTBUFFER Description:  Set clientBuffer to 30 (Only enough room for 1 response). Input:  qwUserPuid                        888888888888881  dwTitleId                         801              cbClientBuffer                    30               dwRating                          0 ftLastChangedDate                 01/01/1900                dwOfferingType                    3                dwBitFilter                       -1               dwDescriptionIndex                0                wStartingIndex                    0                wMaxResults                       5                System State: UODB is charged with 5 valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. cRecords returns 1 and valid response data for 1 record is returned.  ENUMERATE_SAMPLES_TITLE_ID_CHECK Description:  Check if the samples Title id of 0xA7049955 or  -1492870827 is alive and well. Input:  qwUserPuid                        888888888888881 dwTitleId                         0xA7049955      cbClientBuffer                    340             dwRating                          0               ftLastChangedDate                 01/01/1900      dwOfferingType                    3               dwBitFilter                      -1               dwDescriptionIndex                0               wStartingIndex                    0               wMaxResults                       5                System State: UODB is charged with 5 valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. cRecords returns 5 and valid response data for 5 record is returned. ENUMERATE_CONTENT_DOWNLOAD_TITLE_ID_CHECK Description:  Check if the content download sample title id of 0xffff010C or -65268 is alive and well.    Input:  qwUserPuid                          888888888888881 dwTitleId                           0xffff010C      cbClientBuffer                      340             dwRating                            0               ftLastChangedDate                   01/01/1900      dwOfferingType                      3               dwBitFilter                         -1              dwDescriptionIndex                  0               wStartingIndex                      0               wMaxResults                         5                              System State: UODB is charged with 5 valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. cRecords returns 5 and valid response data for 5 record is returned. ENUMERATE_VALID_NEXT_WSTARTINGINDEX_FEE_OFFERID Description: DEPRECATED  Setting the next value of the wStartingIndex value. When the offer is a FOR FEE (highbit in the offerid =1); For 804 offers are 138888880,138888881,138888882,138888883,138888884 Input:  qwUserPuid                            default              dwTitleId                             804                  cbClientBuffer                        340                  dwRating                              0                    ftLastChangedDate                     01/01/1900           dwOfferingType                        1                    dwBitFilter                           -1                   dwDescriptionIndex                    0                    wStartingIndex                        1                    wMaxResults                           5                    System State: UODB is charged with 5 valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. Returns 5 valid records and starts win 138888881 ENUMERATE_VALID_MAX_DESCRIPTION_INDEX Description: Setting the description index to max value. Implicitly this is tested for the normal cases in testing above requests. Input:  qwUserPuid                        888888888888881     dwTitleId                         801                 cbClientBuffer                    30                  dwRating                          0                   ftLastChangedDate                 01/01/1900          dwOfferingType                    3                   dwBitFilter                       -1                  dwDescriptionIndex                -1                   wStartingIndex                    0                   wMaxResults                       5                   System State: UODB is charged with valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. Returns data matching UODB sample data. Last changed date cases. The last changed date in Enumerations is a complex issue involving dynamic real time changes to the UODB to munge with dates. It s the LCD of the set that is returned. The algorithm is as follows.  For each row (tuple)  If its starts in the future it ignored. If start < NOW < end. LCD = MAX (Start, dt_change_datetime) If offer expired LCDrow = MAX ( End, dt_change_datetime)  LCDset = Max (ALL LCDrow)  Offer date set #1 Time0 Time1 (end earlier) Time2 (start later) TODAY START DT_CHANGE LCD row Offer date set #2 Time0 Time1 Time2 TODAY START DT_CHANGE LCDrow Case that can arise from the above: If you re on (current) LCD [HTTP 200, ContentLength = 0]. Nothing if LCD matches server. If your not current (before) Returned is a header with a new LCD and records. But if there are no offers and there is a new LCD then only a header is returned with a new LCD to update. ENUMERATE_LASTCHANGED_DATE_ONE_OFFER_CURRENT_BETWEEN_START_END Description:  If the date is current to the LCD and between start and end.  Input:  qwUserPuid              888888888888881   dwTitleId               801               cbClientBuffer          300               dwRating                0                 ftLastChangedDate       4/1        dwOfferingType          1                 dwBitFilter             -1                dwDescriptionIndex      0                 wStartingIndex          0                 wMaxResults             3 System State: UODB is charged with an offer similar to offer Date #1 but start date is before current date and end date is in future.  Explicitly bump the lastchanged date by using a SQL update. Verify:  XBOS server returns HTTP_ERROR 200. And CONTENT_LENGTH = 0; ENUMERATE_LASTCHANGED_DATE_ONE_OFFER_EXPIRED Description:  If the offer has expired and we send and update with a non current LCD request.  Input:  qwUserPuid              888888888888881   dwTitleId               801               cbClientBuffer          300               dwRating                0                 ftLastChangedDate       before expire date        dwOfferingType          1                 dwBitFilter             -1                dwDescriptionIndex      0                 wStartingIndex          0                 wMaxResults             3 System State: UODB is charged with an offer similar to offer Date #1 but start date is before current date and end date is explicitly bumped to before the current date using a SQL update. Verify:  XBOS server returns HTTP_ERROR 200. Header with new LCD returned ENUMERATE_LASTCHANGED_DATE_NOT_CURRENT_OFFERS_AVAILABLE Description:  LCD not current so update will occur and and offer is available.  Input:  qwUserPuid              888888888888881   dwTitleId               801               cbClientBuffer          300               dwRating                0                 ftLastChangedDate       before LCD date        dwOfferingType          1                 dwBitFilter             -1                dwDescriptionIndex      0                 wStartingIndex          0                 wMaxResults             3 System State: UODB is charged with a valid offer; UODB explicitly bumped so LCD is after LCD sent to server in request. Verify:  XBOS server returns HTTP_ERROR 200. Records, header and new LCD returned ENUMERATE_LASTCHANGED_DATE_TWO_OFFERS_ONE_LCD_BEFORE_AND_ONE_AFTER_REQUESTS_LCD Description:  The algorithm should give us the latest date of the 2 offers as the LCD.   Input:  qwUserPuid              888888888888881   dwTitleId               801               cbClientBuffer          300               dwRating                0                 ftLastChangedDate       before earliest LCD date        dwOfferingType          1                 dwBitFilter             -1                dwDescriptionIndex      0                 wStartingIndex          0                 wMaxResults             3 System State: UODB is charged with 2 valid offer; UODB explicitly bumped so 1 LCD is before and 1 is after the LCD sent to server in request. Verify:  XBOS server returns HTTP_ERROR 200. Records, header and new LCD returned ENUMERATE_VALID_DAY_BEFORE_LASTCHANGED_DATE Description:  Test the day before the last Changed Date. Set the lastchanged date in the DB..  Input:  qwUserPuid              888888888888881   dwTitleId               801               cbClientBuffer          300               dwRating                0                 ftLastChangedDate       11/14/2001        dwOfferingType          1                 dwBitFilter             -1                dwDescriptionIndex      0                 wStartingIndex          0                 wMaxResults             3 System State: UODB is charged with valid offers fitting this request. Explicitly set the lastchanged date to some know value say 11/15/2001. Verify:  XBOS server returns HTTP_ERROR 200. Expect content length 0 and no data. The lastchange date before mean you already have the most current data. ENUMERATE_VALID_DAY_ON_THE_LASTCHANGED_DATE Description:  On the day of the last Changed Date.  Input:  qwUserPuid              888888888888881    dwTitleId               801                cbClientBuffer          300                dwRating                0                  ftLastChangedDate       11/15/2001         dwOfferingType          1                  dwBitFilter             -1                 dwDescriptionIndex      0                  wStartingIndex          0                  wMaxResults             3 System State: UODB is charged with valid offers fitting this request. Explicitly set the lastchanged date to some know value say 11/15/2001. Verify:  XBOS server returns HTTP_ERROR 200. Expect content length 0 and no data. The lastchange date on mean you already have the most current data. ENUMERATE_VALID_DAY_AFTER_THE_LASTCHANGED_DATE Description:  After the day of the last Changed Date.  Input:  qwUserPuid                        888888888888881       dwTitleId                         801                   cbClientBuffer                    340                   dwRating                          0                     ftLastChangedDate                 11/16/2001            dwOfferingType                    1                     dwBitFilter                       -1                    dwDescriptionIndex                0                     wStartingIndex                    0                     wMaxResults                       3 System State: UODB is charged with 5 valid offers fitting this request. Explicitly set the lastchanged date to some know value say 11/15/2001. Verify:  XBOS server returns HTTP_ERROR 200. Expect the return of 3 sets of correct data as wMaxResults is set to 3. OfferingDetails DETAILS_VALID_BASIC_SUBSCRIPTION Description: Query details for the basic subscription. (No longer have to find users. We automatically query them from Testnets UODB if we put DEFAULT as the userpuid.) Input:  qwUserPuid           DEFAULT            qwMachineId          0                  dwTitleId            0xFFFE0000         qwOfferId            0xFFFE000080000001 dwDescriptionIndex   0                  sLanguageId          1 System State: UODB is charged with valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. cInstance            0          dwWholePart          0          bFractionalPart      0          bCurrencyFormat      138        rgchISOCode          USD        dwOfferingDetails    0          dwSizeOfBlob         44         rgbDetailsBlob  (for now is binary for "Basic Subscription String"      UODB sample data. DETAILS_VALID_PREMIUM_SUBSCRIPTION Description: Query details for the premium for the subscription. (No longer have to find users. We automatically query them from Testnets UODB if we put DEFAULT as the userpuid.) Input:  qwUserPuid           DEFAULT            qwMachineId          0                  dwTitleId            0xA7049955         qwOfferId            0xA7049955800186A1 dwDescriptionIndex   0                  sLanguageId          1 System State: UODB is charged with valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. cInstance            0          dwWholePart          14          bFractionalPart      99          bCurrencyFormat      138        rgchISOCode          USD        DETAILS_VALID_ PREMIUM_OFFER Description: Query details for an offer. ( No longer have to find users. We automatically query them from Testnets UODB if we put DEFAULT as the userpuid.) Input:  qwUserPuid           DEFAULT            qwMachineId          0                  dwTitleId            0xA7049955         qwOfferId            0xA7049955800186A6 dwDescriptionIndex   0                  sLanguageId          1 System State: UODB is charged with valid offers fitting this request. Verify:  XBOS server returns HTTP_ERROR 200. cInstance            0          dwWholePart          9          bFractionalPart      99          bCurrencyFormat      138        rgchISOCode          USD      DETAILS_VALID_PREMIUM_OFFER_MAX_DWWHOLEPART Description: Query details for max dwWholepart. Input:   VALID qwUserPuid, qwMachineId          0                  dwTitleId            0xA7049955         qwOfferId            0xA7049955800186A6 dwDescriptionIndex   0                  sLanguageId          1 System State: UODB is charged with valid offers fitting this request. dwWholePart contains -1 for max DWORD. 0 for bFractionalPart. Verify:  XBOS server returns HTTP_ERROR 200. Expect dwWholePart returns 0xffffffff DETAILS_VALID_PREMIUM_OFFER_MAX_BFRACTIONALPART Description: Query details for max fractionalpart. Input:        qwUserPuid           DEFAULT     qwMachineId          0                  dwTitleId            <of above offer>         qwOfferId            <of above offer> dwDescriptionIndex   0                  sLanguageId          1 System State: UODB is charged with valid offers fitting this request. dwWholePart contains 0 . -1 for max bFractionalPart. Verify:  XBOS server returns HTTP_ERROR 200. Expect bFractionalPart returns 0xfff DETAILS_VALID_FREE_OFFER Description: Query details for a free offer. Input:  qwUserPuid           DEFAULT            qwMachineId          0                  dwTitleId            <of above offer>                 qwOfferId            <of above offer>         dwDescriptionIndex   0                  sLanguageId          1 System State: UODB is charged with valid a title that has a free offer indicator. Verify:  XBOS server returns HTTP_ERROR 200. Expect $0.00 DETAILS_VALID__INVALID_USER Description: Query details for a bad user PUID. Input:  qwUserPuid           11            qwMachineId          0                  dwTitleId            <Any should fail on user>                 qwOfferId            < Any should fail on user >         dwDescriptionIndex   0                  sLanguageId          1 System State: UODB is charged with valid a title and offer. Verify:  XBOS server returns HTTP_ERROR 500. Expect XONLINE_E_OFFERING_INVALID_USER is  0x80153002 if we turn off the SG. With SG spoofing on the error returned is 0x8015000A this is noted as nothing we can do if we use SG. HTTP_X_ERROR 0x8015000A DETAILS_VALID_INVALID_ZERO_OFFERID Description: Query details for a zero offer id. Input:  qwUserPuid           DEFAULT   dwTitleId            0         qwOfferId            0         dwDescriptionIndex   0         sLanguageId          1         System State: UODB is not charged with specified offer. Verify:  XBOS server returns HTTP_ERROR 500. Expect X-Err is XONLINE_E_OFFERING_INVALID_OFFER_ID. X-Err 0x80153003; HTTP_X_ERROR 0x80153003 DETAILS_VALID_MAX_DWORD_OFFERS_ID Description: Query details for max offer Id. Input:  qwUserPuid           DEFAULT            dwTitleId            803                qwOfferId            0x00000323FFFFFFFF dwDescriptionIndex   0                  sLanguageId          1                  System State: UODB is charged with offer that has a max DWORD offer. Verify:  XBOS server returns HTTP_ERROR 200. Expect what data is same as in the offer specified. DETAILS_INVALID_DESCRIPTIONINDEX_NOT_IN_DB Description: Query details for a descriptionindex not in DB. Input:  qwUserPuid           888888888888881    dwTitleId            801                qwOfferId            0x000003210002BF27 dwDescriptionIndex   1                  sLanguageId          1                  System State: UODB is not charged with specified offer. Verify:  XBOS server returns HTTP_ERROR 500. Expect X-Err is XONLINE_E_OFFERING_INVALID_OFFER_ID. X-Err 0x80153003; HTTP_X_ERROR 0x80153003 DETAILS_VALID_MAX_QWUSERPUID_MAXWHOLEPART_MAXFRACTIONPART Description: Query details for a max user PUID and max wholepart and max fractionalpart. Also using max title ID. Input:  qwUserPuid           -1                 dwTitleId            -1                 qwOfferId            0xFFFFFFFF0002BF20 dwDescriptionIndex   0                  sLanguageId          1                  System State: UODB is charged with specified offer. Verify:  XBOS server returns HTTP_ERROR 200. Wholepart and fractionalpart both return max values. Rest of offer is as specified in UODB. DETAILS_VALID_MAX_DWDESCRIPTIONINDEX Description: Query details for max descriptionindex in DB. Input:  qwUserPuid           888888888888881     dwTitleId            801                 qwOfferId            0x000003210002BF29  dwDescriptionIndex   -1                  sLanguageId          1                   System State: UODB is charged with specified offer. Verify:  XBOS server returns HTTP_ERROR 200. Expect offer data in UODB to match returned.  DETAILS_VALID_CONTENT_DOWNLOAD_FREE_0xFFFF010C000186B0 Description: Query details for content download FREE offer. Input:  qwUserPuid           888888888888881    dwTitleId            0xFFFF010C         qwOfferId            0xFFFF010C000186B0 dwDescriptionIndex   0                  sLanguageId          1                  System State: UODB is charged with specified offer. Verify:  XBOS server returns HTTP_ERROR 200. Expect offer data in UODB to match returned.  DETAILS_VALID_ CONTENT_DOWNLOAD_PAY_0xFFFF010C800186B3 Description: Query details for content download FEE offer. Input:  qwUserPuid           888888888888881    dwTitleId            0xFFFF010C         qwOfferId            0xFFFF010C800186B3 dwDescriptionIndex   0                  sLanguageId          1                  System State: UODB is charged with specified offer. Verify:  XBOS server returns HTTP_ERROR 200. Expect offer data in UODB to match returned.  DETAILS_VALID_CINSTANCE_COUNTER. Description: Query details to see if the CINSTANCE counter increments. Send 3 purchase requests in then check the cinstance field. Input: 3 times below  qwUserPuid         DEFAULT              qwMachineId        88888888888          dwTitleId          0xFFFF010C           qwOfferingId       0xFFFF010C800186B3  qwUserPuid           888888888888881     dwTitleId            0xFFFF010C          qwOfferId            0xFFFF010C800186B3  dwDescriptionIndex   0                   sLanguageId          1                                     System State: UODB is charged with specified offer. Verify:  XBOS server returns HTTP_ERROR 200. Expect cInstance to be 3.  OfferingCancel Since Cancel only works on premium subscriptions we will test as below. Save as purchase try these with userPuids from the 5 supported countries. (Can we have these users automatically created in the SPS system? For ease of testing?) VALID_EMPTY_DEAD_XBOX_MESSAGE Description:  This test will send data we expect to succeed and also expect to see most of the time. Input:  Valid empty dead Xbox message (this is used as a heartbeat) System State: Depends on test Verify:  Debug output displays parsing of message to reveal a dead Xbox message with no Xboxes named) VALID_CANCEL_PREMIUM_SUBSCRIPTION_CANCELABLE_FLAG_YES Description:  This will cancel a previously purchased premium subscription.   Input:  qwUserPuid             DEFAULT              qwOfferingId           0xFFFF010C800186B3   System State: Setup in the UODB a premium subscription with the cancel flag on. Verify:  The XBOS server returns HTTP_ERROR 200. Since the server doesn t return anything responding that it worked. (I believe it should) additional programmatic UODB database groveling maybe necessary to verify. VALID_CANCEL_PREMIUM_SUBSCRIPTION_CANCELABLE_FLAG_NO Description:  This will cancel a previously purchased premium subscription that is marked not cancelable   Input:  qwUserPuid             DEFAULT              qwOfferingId           <an offer reflecting below criteria>  System State: Setup in the UODB a premium subscription with the cancel flag on. Verify:  The XBOS server returns HTTP_ERROR 200. Since the server doesn t return anything responding that it worked. (I believe it should) additional programmatic UODB database groveling maybe necessary to verify. OfferingPurchase These test will have to be repeated with usersPUIDs registered from the 5 different supported countries.  VALID_EMPTY_DEAD_XBOX_MESSAGE Description:  This test will send data we expect to succeed and also expect to see most of the time. Input:  Valid empty dead Xbox message (this is used as a heartbeat) System State: Depends on test Verify:  Debug output displays parsing of message to reveal a dead Xbox message with no Xboxes named) VALID_REQUEST_BASIC_SUBSCRIPTION_PURCHASE Description:  This will purchase the basic subscription  Input:  Valid  qwUserPUID, qwMachineID, dwTitleID, and qwOfferingID. System State: UODB should have a basic subscription offering. Verify:  The XBOS server returns HTTP_ERROR 200. Anything else and it s a failure. VALID_REQUEST_PREMIUM_SUBSCRIPTION_PURCHASE Description:  This will purchase the premium subscription  Input:  Valid  qwUserPUID, qwMachineID, dwTitleID, and qwOfferingID. System State: UODB should have a basic subscription offering. Verify:  The XBOS server returns HTTP_ERROR 200. Anything else and it s a failure. INVALID_OFFERID_PREMIUM_SUBSCRIPTION_PURCHASE Description:  This will purchase the premium subscription but using bad offer id.  Input:  Valid  qwUserPUID, qwMachineID, dwTitleID,  Invalid  qwOfferingID System State: UODB should not have this offering id. Verify:  The XBOS server returns HTTP_ERROR 500. <Anything else returned?> INVALID_TITLEID_PREMIUM_SUBSCRIPTION_PURCHASE Description:  This will purchase the premium subscription but using bad offer id.  Input:  Valid  qwUserPUID, qwMachineID, qwOfferingID,  Invalid  dwTitleID System State: UODB should not have this TitleID. Verify:  The XBOS server returns HTTP_ERROR 500. <Anything else returned?> INVALID_MACHINEID_PREMIUM_SUBSCRIPTION_PURCHASE Description:  This will purchase the premium subscription but using bad machineid.  Input:  Valid  qwUserPUID, dwTitleID, qwOfferingID  Invalid  qwMachineID  System State: UODB should not have this offering id. Verify:  The XBOS server returns HTTP_ERROR 500. <Anything else returned?> INVALID_USERPUID_PREMIUM_SUBSCRIPTION_PURCHASE Description:  This will purchase the premium subscription but using bad userpuid.  Input:  Valid  qwOfferingID, qwMachineID, dwTitleID,  Invalid  qwUserPUID  System State: UODB should not have this offering id. Verify:  The XBOS server returns HTTP_ERROR 500. <Anything else returned?> VALID_PREMIUM_OFFERING_PURCHASE Description:  This will purchase a premium offer.  Input:  Valid  qwUserPUID, qwMachineID, dwTitleID, and qwOfferingID. System State: UODB has a premium offering. Verify:  The XBOS server returns HTTP_ERROR 200. Anything else and it s a failure. INVALID_OFFERID_PREMIUM_OFFERING_PURCHASE Description:  This will purchase the premium offer but using bad offer id.  Input:  Valid  qwUserPUID, qwMachineID, dwTitleID,  Invalid  qwOfferingID System State: UODB should not have this offering id. Verify:  The XBOS server returns HTTP_ERROR 500. <Anything else returned?> INVALID_TITLEID_ PREMIUM_OFFERING_PURCHASE Description:  This will purchase the premium offer but using bad offer id.  Input:  Valid  qwUserPUID, qwMachineID, qwOfferingID,  Invalid  dwTitleID System State: UODB should not have this TitleID. Verify:  The XBOS server returns HTTP_ERROR 500. <Anything else returned?> INVALID_MACHINEID_ PREMIUM_OFFERING_PURCHASE Description:  This will purchase the premium offer but using bad machineid.  Input:  Valid  qwUserPUID, dwTitleID, qwOfferingID  Invalid  qwMachineID  System State: UODB should not have this offering id. Verify:  The XBOS server returns HTTP_ERROR 500. <Anything else returned?> INVALID_USERPUID_ PREMIUM_OFFERING_PURCHASE Description:  This will purchase the premium offer but using bad userpuid.  Input:  Valid  qwOfferingID, qwMachineID, dwTitleID,  Invalid  qwUserPUID  System State: UODB should not have this offering id. Verify:  The XBOS server returns HTTP_ERROR 500. <Anything else returned?> VerifyNickname MAINLINE Desc: Pass in a normal name. Verify: S_OK is returned. UNICODE Desc: Pass a URL encoded string and ensure that it is properly converted to UTF-8 Verify: XRL returns S_OK. BAD_ENCODING Desc: Pass a nick name that has been improperly encoded. Verify: XRL return S_OK. BAD_NAMES Desc: Pass a series of bad word names. Verify: XRL returns XONLINE_E_OFFERING_NAME_TAKEN. SHORT_AND_LONG_NAMES Desc: Pass names that are either 0 length or too long. Verify: XRL returns XONLINE_E_INVALID_REQUEST. AutoUpdateReferral MAINLINE Desc: Get a single update referral location. Verify:  That the location is in the proped locations for the provided title ID. VARIOUS_VERSION_NUMBERS Desc: Validate that the auto update referral supports all propped versions. Verify: Check that the XRL is unque and the rank is unique for the requested version. NO_UPDATES_AVAILABLE Desc: Validate that auto update referrals are not reported when they are not propped. Verify: Number of results returned is zero and that S_OK is not returned.  BAD_TITLE_ID Desc: Request an update with an invalid title ID. Verify: Number of results returned is zero and that S_OK is not returned. FILTER_RESULTS Desc: Verify: FILTER_ESRBS Desc:  Verify: ContentReferral UNIQUENESS Desc: Using a content referral using pre-populated data purchase the enumerated content. Verify: Validate content salt for the offering location offered. Ensure that each location presented is unique and in the correctly populated order. BAD_USER_PUID Desc: Send a request with a bad user puid in the purchase after requesting a valid package with a correct user puid. Verify:   Validate that  BAD_MACHINE_PUID Desc: Verify: ZERO_COST_CONTENT Desc:  Get content that has whole and fractional price of zero. Verify: SUBSCRIPTION Desc: Verify: SPECIFIC Desc: Verify: NON_PURCHASED_CONTENT Desc: Verify: ContentAvailable MAINLINE Desc: Purchase content in the US using a non-populated title ID. Verify:  Request returns XONLINE_S_OFFERING_NO_NEW_CONTENT. ALL_COUNTRIES Desc: Using pre-populated data ensure that content check works for all country codes using all-inclusive bitfilter. Verify: For each country that exists in test dataset should return XONLINE_S_OFFERING_NO_NEW_CONTENT. Integration PURCHASE Desc: Get a content referral, purchase the content using a real SPS 1-box. Verify:  Validate provisioning bits in the database. CANCEL Desc:  Get a content referral, purachase content then cancel using a real SPS 1-box. Verify: Validate deprovisiong bits in the database. Stress Testing M1 Milestone: Since minimal changes are being performed for this milestone, even though there is no official stress testing requirement, it is my goal to establish a TPS baseline for this version of the code. M2 Milestone: TBD Revision History Changes made Author First Draft Jacob Repp Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  gdrIy {wowkc_k[SL[HD gdesA ogcgcgc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\offering\test\Xenon BOTD Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation XSessionCreate Title _PID_HLINKS Document Description Type of Document Status Date Created Xenon Matchmaking/Session API Client Test Plan Technical Spec rough draft 2005-03-17T00:00:00ZXSessionCreate Mabel Santos Normal.dot Rein Hillmann Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags PersonName http://www.microsoft.com ;S~m*Xenon BOTD API Test Plan Created 3/7/2005 Last updated 3/21/2005 Program Management Allen Murray Development Mark Zhou Rein Hillmann Operations Spec status Draft  Table of Contents  TOC \o "1-3" \h \z \u   HYPERLINK \l "_Toc99248892"  Table of Contents  PAGEREF _Toc99248892 \h   HYPERLINK \l "_Toc99248893"  Summary  PAGEREF _Toc99248893 \h   HYPERLINK \l "_Toc99248894"  Related Documents  PAGEREF _Toc99248894 \h   HYPERLINK \l "_Toc99248895"  Test Goals  PAGEREF _Toc99248895 \h   HYPERLINK \l "_Toc99248896"  Test Non-Goals  PAGEREF _Toc99248896 \h   HYPERLINK \l "_Toc99248897"  Test Setup  PAGEREF _Toc99248897 \h   HYPERLINK \l "_Toc99248898"  Functional Testing  PAGEREF _Toc99248898 \h   HYPERLINK \l "_Toc99248899"  P_MainLine  PAGEREF _Toc99248899 \h   HYPERLINK \l "_Toc99248900"  P_BL_RetrieveBanners  PAGEREF _Toc99248900 \h   HYPERLINK \l "_Toc99248901"  P_HL_RetrieveBanners  PAGEREF _Toc99248901 \h   HYPERLINK \l "_Toc99248902"  P_BL_ScheduleMonthly  PAGEREF _Toc99248902 \h   HYPERLINK \l "_Toc99248903"  P_HL_ScheduleMonthly  PAGEREF _Toc99248903 \h   HYPERLINK \l "_Toc99248904"  P_BL_ScheduleWeekly  PAGEREF _Toc99248904 \h   HYPERLINK \l "_Toc99248905"  P_HL_ScheduleWeekly  PAGEREF _Toc99248905 \h   HYPERLINK \l "_Toc99248906"  P_BL_ScheduleDaily  PAGEREF _Toc99248906 \h   HYPERLINK \l "_Toc99248907"  P_HL_ScheduleDaily  PAGEREF _Toc99248907 \h   HYPERLINK \l "_Toc99248908"  P_MultiplePricingStructures  PAGEREF _Toc99248908 \h   HYPERLINK \l "_Toc99248909"  P_NoBannersMatch  PAGEREF _Toc99248909 \h   HYPERLINK \l "_Toc99248910"  P_StartEndDates  PAGEREF _Toc99248910 \h   HYPERLINK \l "_Toc99248911"  P_DayRollover  PAGEREF _Toc99248911 \h   HYPERLINK \l "_Toc99248912"  N_InvalidAuthData  PAGEREF _Toc99248912 \h   HYPERLINK \l "_Toc99248913"  Stress Testing  PAGEREF _Toc99248913 \h   HYPERLINK \l "_Toc99248914"  Performance Testing  PAGEREF _Toc99248914 \h   HYPERLINK \l "_Toc99248915"  Resource Requirements  PAGEREF _Toc99248915 \h   HYPERLINK \l "_Toc99248916"  Test Complete Criteria  PAGEREF _Toc99248916 \h   HYPERLINK \l "_Toc99248917"  Release Criteria  PAGEREF _Toc99248917 \h   HYPERLINK \l "_Toc99248918"  Revision History  PAGEREF _Toc99248918 \h  Summary The Banner of the Day (BOTD) for Xenon is an extension of the Message of the Day (MOTD) functionality on Xbox that allows individual blocks of content (XUI files) to be displayed within the Xenon Dashboard.  This test plan will cover only BOTD scheduling. Most of the testing will take place on a PC that connects to the Banner Server rather than a Xenon client.  Eventually the tests will be expanded to run on the Xenon platform. The client testing will be done by the client UI team. Related Documents The specification for this feature can be found here (  HYPERLINK "http://team/sites/xbxe/Shared%20Documents/Xbox.com%20and%20XPA/M3%20Specs/BOTD/Xenon%20Banner%20Of%20The%20Day.doc" \o "http://team/sites/xbxe/Shared%20Documents/Xbox.com%20and%20XPA/M3%20Specs/BOTD/Xenon%20Banner%20Of%20The%20Day.doc"  http://team/sites/xbxe/Shared%20Documents/Xbox.com%20and%20XPA/M3%20Specs/BOTD/Xenon%20Banner%20Of%20The%20Day.doc Test Goals Overview: The test goals are to test the XBOS server APIs that allow banner URLs to be retrieved from the product database based on a specific schedule.  In general, the goals are: Verify that the XRL correctly accepts and returns information Verify that the API returns the correct information as requested Verify that scheduling works as intended. This applies to daily, monthly and weekly scheduling. Confirm that banners do not get displayed before or after the intended display times.  Test Non-Goals It is not the goals of this testing cycle to test: That the URL of the banner actually works Anything related to the banner file   We don t verify that the width and height match up to the banner file size Any client functionality. For example, we don t verify that clicking on a banner shows you the offer or opens up a marketplace blade.  Test Setup The tests will be run using the ServerTestFramework under STFRunner. They will be part of the XBosTestV2 suite of tests.  In general the tests will take on the following form: Create Titles Create Offers for those titles Populate the banner list items by doing direct insert queries into the database Call the APIs Verify the results Cleanup the banners, offers and titles Functional Testing P_MainLine Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data. It does no data verification, it merely sees if the data can be serialized and deserialized correctly into the constituent classes. Verification: Verify that the data is correctly serialized and deserialized into the XRL objects. This is done twice   once for HotLists and once for BannerLists. P_BL_RetrieveBanners Functionality: Test to see whether a list of banners can be retrieved using the BannerList XRL request. This will create a list of banners and retrieve them. Verification: The test passes if the list of banners matches the banners we inputted at the start of the test. We also validate that the data we get back is the correct data according to what we entered. P_HL_RetrieveBanners Functionality: Test to see whether a list of banners can be retrieved using the HotList XRL request. This will create a list of banners and retrieve them. Multiple passes are made to test various filters for the API. At the start of the test we enter a number of banners which will then be filtered  Verification: The test passes if the list of banners matches the banners we inputted at the start of the test. We also validate that the data we get back is the correct data according to what we entered.  P_BL_ScheduleMonthly Functionality: Test to see whether the monthly scheduling of banners (BannerList) works correctly.  Verification: The test passes if the banners returned are the expected banners for the time specified in the banner properties. P_HL_ScheduleMonthly Functionality: Test to see whether the monthly scheduling of banners (HotList) works correctly.  Verification: The test passes if the banners returned are the expected banners for the time specified in the banner properties. P_BL_ScheduleWeekly Functionality: Test to see whether the weekly scheduling of banners (BannerList) works correctly.  Verification: The test passes if the banners returned are the expected banners for the time specified in the banner properties. P_HL_ScheduleWeekly Functionality: Test to see whether the weekly scheduling of banners (BannerList) works correctly.  Verification: The test passes if the banners returned are the expected banners for the time specified in the banner properties. P_BL_ScheduleDaily Functionality: Test to see whether the daily scheduling of banners (BannerList) works correctly.  Verification: The test passes if the banners returned are the expected banners for the time specified in the banner properties. P_HL_ScheduleDaily Functionality: Test to see whether the daily scheduling of banners (HotList) works correctly.  Verification: The test passes if the banners returned are the expected banners for the time specified in the banner properties. P_MultiplePricingStructures Functionality: Offers can have multiple pricing structures. This test validates that all the pricing structures are correctly returned on a banner item.  Verification: The test passes if the correct number of pricing structures for the offer is returned and the information within those pricing structures is correct. P_NoBannersMatch Functionality: This test validates what gets returned when no banners match the current date/time combination.  Verification: The test passes if no banners are returned. P_StartEndDates Functionality: This test validates that banners that don t fall within the start-end dates don t get returned. Verification: The test passes if the banners that fall outside of the start/end date are not returned to the caller. P_DayRollover Functionality: This test validates that banners that don t fall within the start-end dates don t get returned. Verification: The test passes if the banners that fall outside of the start/end date are not returned to the caller. N_InvalidAuthData Functionality: This API should not succeed if the caller has invalid authorization data.  Verification: The test passes if the call fails due to invalid authorization data. Stress Testing Performance Testing Resource Requirements Test Complete Criteria Release Criteria All areas must pass 100% test cases before final release. Revision History Changes made Author 3/15/2005 First draft Rein Hillmann (reinouth) k`YRA peaZp wPwPb IDATx^ {uUWu y&~x<gk Yxky/ \5 c' uCKegQ 6.CwJ W_,~]Q Q-aW)m] 7eNzq mQ5]0 E@:d- `V=72~y u-Z,Ra Rp:K= Hw~NIv k;^Kk- =mnB0 u{s$|Z9c] hV \Rl ([gl% &l>:h ^LKdA ynWvl ~]wYj oFK]a E8?,RvY m.iQ; Lv,E0% hxtUR 9nO+' |,NC( qcwwW Ts+.kp Lown7 Jkak\,| ,k%]O ;|8u3N4 ewo%` )VN+W  # 2  Kq|c0 rq.SC 32FBc -rmVa d|jUL gu1]F LWwfZ 1}r<) o12~E D*)I^w JdZUI% zZ7Ue*I ?/c#*6 FH%=X ;Xu$g =[YW;qY O7}:X :3[YC J%6Za y>aP6 f*IT ah bu in%e $-ftIW letYks ,3hclZ/ %CVG] v[_tY SX7]Y~ Z4Z5jc =w_cRG dpp)Z< hj(VGC bw{qq7 kwvh< d[y:E k"t5C $ aOk E=Io# mVf5c |+g[K 8]0\.l1 o9Z|Z fY+Vuy ROjf, w{'8l %K,N! {\xx3 j%o=Q DOjtU W\nX9 =EHk1 8]h=I gkk+E{e ynaF# 5@eq- lxESZ%o 0k4ci% 0>tkaL3 4N4mk RI%&+ d/Yl' ?q5y!H_ %Z%9y "9<VF2^ B,TXX JRl%{{. d)>;I f$405k Zw{!;b GA#ShIW+Dk ;Y,Bm 4PXCw* RsC7- \kz[4S Gs-ru 2y2>wVT @e756 {::x>b TW8ih JW$sy Y)ouA _OaWGqiF ZmiNE 2="]$ ,h-uG Jj_k(5 s6Z@Z <:X`#_4 EtHvr cy=Lg nUZ(n A|&Ir .G>.dV uS\E"z 5I7LU &/HoN KgH6O+ "CB|sZ-4 NV#!H IMNis< w.mm'/m dz}kxa qax5xqw B]PUQL {I`L] U=J7P zHw[` 5j<?E C+y1W XrA,[ (d$8w i0Fp@2 LS!ti\r w+|mp 6A}'7{ khbfq r*\c% "'#/Oh 7^VjxL m8;*1% T'!Jc *v^0= POAx&S EgjX;`: %[IxR DQxn$ iNvV^ 3k7|q #vV,F FygOZW oT7jS d2&qUF3 2Bmuk FC8Y@ p?Ifq cP8Lr  34>= !$v4^k =-'TA$< `g5W.hD *+ML= Y>OQs U'/3. t47]Drd po"8~ '*6tE 9A1b(W mM%%5 f=W"HC Ap&<> k/<31 sGa`E QJ.f$ yrlP< 50:pai X~<|k 2;+y\q |y8E3X UIO|M a'6yb Yw/D; 7gr8!> ,;E>yBN 4cG}j UL,q.& 3`|fm /fq4" aJrG.^ b;\q&, $16#G 9M"r2V A5aX|E8 ^bG8C y{tfw (\!q5 |N<m<+v D~KoKu my7F| pnW\EJ8 gZd/=} 8yNi@4Sl~ <or9pfF .oN'|.>  K/|s6 8:{RuX !/ML= ^`)nlt dM.0# q2Yv8 hnhI> $DLMQ9;W &@,D# Ih*O4 n$=Nc _vs-/ YGjzZ VOS!Q N,Xd< KynzE?( [ZK>% cF[.m vik3\r ,x*Zc DxhG# ffm!M s_}xm P aT:> kFKsq wg$_N"S twbZ/Th *c8Wk jIWICg qo*Xi q.GU> 5#X(*0/7# dL6B^ bXmh/]j3 l)Od2 ?"33n (ja(7 |au9u :{i`>j1 &e=5K; +9[5i& p,xlw :<:ah W2;Xk- R_t_u.a! TaW}<3 FA>e8 l\i,l {*2vh _kG]j fB~^p wk M ] {>&>8s HE_hyq ByN|M @NqoD a?kCb 1hDxmaXfU CqOEUe XjuF> 'GlQKVh o),wP oF`&`: RAvql\ Jq9~s} lQw.xj AQSMdX uDj3!V b=@DCZ m7[K2 =?~=m `/p-S qP$%U W)s.0L $c{(U s?<Hr) {A{"(P ?`FjB w"CI]mSv  U#./Lb 3>U>N R+6{R s"kP\M \;;W9 WSxCd M{cfP oyqFG x0/Q? /,fyV BR;\[ Mo5i&uJ ?]MGl> =y"s  _*+n& X'_yo7D\ D4GZl E{nLH _(CWC 21@=}n= oqX]]l5 g"Ar~ <Ho?y'x ^?rhe M(2<? $vWEe?l <:dz- =#9,! `H( RKm_O W{80` V4D&1 1thC{ i<upo n+j7hF (61;}7 :N#iIV WmW2: |c+D` HTKYt W[gOe 3S#d@ ,\3j% Hza^W ClkLm bH;TwY t.!WN 6.}V4Q ;)6%& G}RW  z/.w/ 4Z\oF NAP_5 {_hQ(S aFxKBX {ocH8 OtA+^0   &(A) 5^kIM FO-$dZ hzG=l 1*MTh tAykR- <9n_hTc h|l|~ 7&nvH u+<!R Dp-7: JT>%FO ZYkf@# =+UJoe !h]~E VVG-1 R[3R; aY7/O -,j(n dLR*:+4 ]GYKf aO7FQ 0#[d]NfI#[ Y)TTm NmJ"7 q'bm. xqM`H 0Y2ofC@d wDhA> b TdCa =,--Q 3gVV/ a]kVMX {d=0q t2")* f*7tpZ lx'3Kr4 !&auD  Emw,  rAJq |EI\V 2BddIm moo`m 8tlHL jOBX5 SV1_+U <")YEA 88t-d; O[lwD m)[yx 7M;\!+g `*s;~. 5M)XS =~xyy 9\=W{ 8a j" UJt[' s8Jn7 @Z`3_Q WTn%p o#@Ri U[mvK a?F,Y) V,VT3Da= ><0J: ?"]a8 Q6JQ?. F$j#G s'?\! >DV.a2#= .RL=V9 9W/Mw =p#=`z vqcCn T$>(: J-"s: q!tmo U`DOF (Rlr.M E|#E$ H2TC_%oP# E{qd.FW 2EJCQ \Ofhy -_,(N :mBJ"sp *TZ7}< Gg9,mh :MF\? Q,zsZ nuuy)K mprX,: d-]Y^^[K %Dxwd&% C[-QO VI@T0S Qu)CT3 (^L{= ^Is_ZZ $d\FJ ^@bcl _1(pobi< `~yy9 tA9uL ^f"y" O%Oxe c^w+Y )RlitR 8W(w}~=r .&ip? D{gYR uF;xp? Y^5&> 7xb l +>:st x)/=/ dy$BQ )Q%N*M\ 3>]dJ m,:R6 o&?%us r{Z]nq(N )*4*^6 mr(0sW |+Z t 5l]AW'VZ *a%vl <s0vk |Z.`R FdJ> } ^p#Wv Sqw=: fSHq* 0^YY9{ foA"s $@R$  ;(?&: 3pURS m0]X= I-jM!! sL~rx GvtTHF elz4:#T I_REt H8luv yP4@z * p%J [(9%v 85/+V 1D8<ie8 +.Ggp9n +@~1[ *#tS& L5^($\2G] Zsp/F;F t</\` Csp;m #*vcQ |xuwo 9`]h# CU+$-< \Adk]~ GW|Vk {pQzw| w/7w/ ".E]f rbF1q 6v;{7q8_ 0V/a= 20Mlf W;a):N (&r\- Z4oq8\ M"m+r ^,|>~F UiKKpN "+xgF 3DQ`% EWl;Q IDAT8 !^Gq } ^x m} Mhw*1 {vZt|$ t,/j%  zsR;m lw8<h pT]Yv+ vG6<. XJpZ< {m`Zc !;E\. r+>(` [W,^% OF<})& P]@t<E RE,o2a 4p4#; !%g}rB Ql]\X hx4<z 57{2w EH`O!2 o#)n4 *ruU. ,iw\  tvpTls ^g)gOn <x@>m P`$tcA Fp|iP X_9 . Q^MR2 W14+|$E E/=4y Nor%y U("6el ,s{!b ;8cQv 8up6<B qg=p9 %E-7b< ng1@7 0,>9N :*-0EYz {1^bef ':AP2 w=B]/ :dd"- P*Z{7 js%wR ;t<ND 4_j}r KT9,T XOM)D 0l+q$\j ,Qokww QaQ`iJ P`K'H \`Fcy XpH{b] Ahm4!& w`YN;M 6iV^> /nk'o mC><9 b6&#T x5V.T @)!hzZ TpMG+ N#F"& nAW u Rq88' ;(|1E1`P>-\ >l;8] 4qL(- bU@Q@T E_he| %_nC_ *Hz:;B ULri`Y Kc3>Xv: _G~~x 3|zHB <fB}83 p$o<{ *.@OS@ 8z[5; +_)y& Fk&i)j @m,]q{,Gx s~]i@ QWE{w a1Q$T 66D!z( MvG3\N Vp.A6 ceNim QR(2U Eoba/ up3.v95 dZqu[ =|]5k6 c5HS~ ]L>;]H f]~UX [;(-9z ]n`Y:YOX <f)}S c\IGv q-5wF~] 4 Pij 'qqXE> Y!!6c j^<ia 6i)'T yf10n mT?Ea qycdc Hu\QJ b;1AFg,+ SXdPm& 8Op,v l&.zx .%N{Q bmP9j ]suux v|2>~ hp./= tJEi:OcO S<eNJ 0yu]`*aP& y%=d6 (Ok]7V Mhc1V IbNC= b(CH% >Bf:F -Nd'N M}WtZ WK!ie* ^KgxL phw\ `^Z =qSkhi e>~B} STF%Wx3 rGe?9 Qf!V= yCNPK C9VAz d;/k& KcaXO vX6A*. 42=MP6; 4d4;MeJ ]%uEUut JY&subY ja&S~ ej]ODy ls7+x hK+!-9EI G)&gb<JM< {UbBR, b/sjrp(] JH29V A%$Ut N?^6^ Ar`P* `vDVH @,CfH 2DZ&H9 r<JdB 5:X%* Wt"2_m #!|CU lWQRL !3AxV. Dq^&R Ebma! E&O7q5 U,z*9 Gq"--2 @TbZj >=QP& NUZSz 4<9|T LjxzE )?)fB [*WK9c\ DT*yk v?&0V$ Je=RO  9/y=P<= QY_6j X6}Qn FZFB^ eD^)B atY`! y3X6j ~EBdx 2upt, eB+xPY. !'h2$ Qqa'+ ZtY\%: /X%;%D P>FiF%WT ;aiT*iZ EeJmy* 97gRB ,{K(S =O~b\e|W aPVoY hWi6N? gH-!7) BJ^O4 a32+k hQM&? IB$4E> g*MQ9b ^%5'4 9nJ3E ^{aiE2 DvZm{ _hH&O #uoNe Ly(ft #+h,~ &t".} LtX`t L*@Fe ]$yH.{ t7+x+8t <R&(t ;Ge4v {E%0k qdt%< >sVE9 >6h": BB-yT 5PwW>r BXF{!x bVvXeY bA[w.jM v~q1p6 igc>f 0sww{ ^9Y!{T>" +xYe< =houI0 8)Ex" wWbyk X&H*< >%J.T 6A" ? u=.v3 ;"+d3 6muXw KtRD(yK.Q 0+`V# :i)J]  6hlQ 8?'x#iK pxe>&xfzl tzcwft &sn'|
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\useraccount\test\UACS Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Jacob Repp Xbox Live Test Plan Template.dot Reinout Hillmann Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags stockticker urn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags country-regionbjbjqPqP C \o "1-3" \h \z \u   HYPERLINK \l "_Toc74654651"  Table of Contents  PAGEREF _Toc74654651 \h   HYPERLINK \l "_Toc74654652"  Summary  PAGEREF _Toc74654652 \h   HYPERLINK \l "_Toc74654653"  Schedule  PAGEREF _Toc74654653 \h   HYPERLINK \l "_Toc74654654"  Goals  PAGEREF _Toc74654654 \h   HYPERLINK \l "_Toc74654655"  Non-Goals  PAGEREF _Toc74654655 \h   HYPERLINK \l "_Toc74654656"  Related Documents  PAGEREF _Toc74654656 \h   HYPERLINK \l "_Toc74654657"  Functional Testing  PAGEREF _Toc74654657 \h   HYPERLINK \l "_Toc74654658"  Summary  PAGEREF _Toc74654658 \h   HYPERLINK \l "_Toc74654659"  Test Case Matrix  PAGEREF _Toc74654659 \h   HYPERLINK \l "_Toc74654660"  7.2.1 New Test Cases per Milestone  PAGEREF _Toc74654660 \h   HYPERLINK \l "_Toc74654661"  7.2.2 Existing Reusable Test Cases  PAGEREF _Toc74654661 \h   HYPERLINK \l "_Toc74654662"  Stress Testing  PAGEREF _Toc74654662 \h   HYPERLINK \l "_Toc74654663"  Revision History  PAGEREF _Toc74654663 \h  Summary M1 Milestone: Uacs already has a full test suite defined to test negative and positive cases. I would however like to look more into areas of testing that were only lightly addressed during the end of Tsunami. The areas that would benefit from more thorough testing are: minor accounts, queued ccounts, banned accounts and functional areas of web account linking.  M2 Milestone: TBD Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M1 Milestone: Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases. There is no required stress testing for M1 so the  Test Stress Code Complete  and  Test Stress Complete  deliverables do not apply to this milestone. M2 Milestone: TBD Goals M1 Milestone: Maintanence of existing functional tests and adding new levels of depth to the test matrix around the areas of minor accounts, queued account and advanced account status. M2 Milestone: TBD Non-Goals M1 Milestone: It is not a goal of these test suites to validate SPS functionality. I have tried to make sure the tests can even run 100% complete under emulation. M2 Milestone: TBD Related Documents Functional Testing Summary APIs are tested by creating an account, operating on the account and then either validating the account status by using another xonline API or by querying the database directly. A large majority of UACS test code requires the emulator to perform non-standard operations.  Test Case Matrix TBD once dev specs for the configuration database are released. New Test Cases per Milestone M1 Milestone: TBD M2 Milestone: TBD Existing Reusable Test Cases CreateOwner CreateOwner creates an account (in UACS terms, an owner and a user are now synonymous). In order to successfully create an owner, UACS must have valid billing information (CC type, CC number, CC expiration date, billing name and address, bank code, branch code, and check digits). Also, an owner must be at least 18 years old in order to set up a billing relationship and to accept terms of usage. Finally, the owner must choose a tag for himself. A list of non-valid tags can be found in t_forbidden_names. If all of the conditions have been met UACS enters a row in UODB.t_users, and returns the new owners PUID.  Positive cases: CreateOwner.P.Mainline Desc: CreateOwner with a standard owner (all values in range) Verify: Lookup owner in UODB based on PUID.  CreateOwner.P.Spam Desc: Test the *spam fields with values 0, 1, and 255 Verify: Make sure that the user has been created and that the spam fields match their requested values. CreateOwner.P.LengthCheck1 Desc: CreateOwner called with all fields set at their maximum length Verify: Lookup owner in UODB based on PUID CreateOwner.P.GoodDate Desc: CreateOwner with the DoB set to (today   13 year) Verify: Lookup owner in UODB based on PUID  CreateOwner.P.GoodNames Desc: Use known good names to test name vetting ( digit1 di1git foo bar foo_bar , etc) Verify: Lookup owner in UODB based on PUID  CreateOwner.P.ForeignAccount Desc: Create foreign accounts (Japan, Canada, Germany, France, UK) Verify: Lookup owner in UODB based on PUID  CreateOwner.P.LocTest Desc: CreateOwnerAccounts for various countries, and set the language id to all the languages we support. Verify: Owners are created CreateOwner.P.VerifyCreatedOn Desc: Create an account, make sure the created date is set to the right date. Negative cases: CreateOwner.N.BadLanguageID Desc: CreateOwner with the language ID set to an illegal value (eg. 65535) Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.LengthCheck2 Desc: CreateOwner called with all fields set over their maximum length Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.BadNames Desc: CreateOwner with a bad user name ( 1digit bad  name  name name  , non alphanum characters) Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.ForbiddenName Desc: CreateOwner with invalid (prohibited) user name Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.DuplicateName Desc: CreateOwner with a duplicate user name Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.BadDate Desc: CreateOwner with the DoB set to (today   13 years + 1 day) Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.FutureDate Desc: CreateOwner with the DoB set to tomorrow Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.MissingFields Desc: CreateOwner with each of the following fields missing (multiple tests): gamertag firstname lastname street1 postalcode phoneprefix phonenumber cardholder cardnumber birthdate Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N,InvalidCC Desc: CreateOwner with invalid CC information (type, number, or expiration date). Do this for every credit card type. Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.BadCountry Desc: CreateOwner with a bad country ID, not found in t_countries Verify:  Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.LocationMismatch1 Desc: CreateOwner with an invalid ZIP code, city pair Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.LocationMismatch2 Desc: CreateOwner with an valid ZIP code, city pair, but with the wrong state Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.BadEmail Desc: CreateOwner with an invalid email (no @, no .) Verify:  Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.BadPhone Desc: CreateOwner with a bad phone number (011-012) Verify:  Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.ExpiredVoucher Desc: Try to create an owner, but use an expired voucher Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.BadVoucher Desc: Try to create an owner, but use bad voucher Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.UsedVoucher Desc: Try to create an owner, but use a used voucher Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) CreateOwner.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. ReserveName ReserveName allows the client to test if a name has already been used. In case the name has been used or if it contains an unacceptable string, a sorted list of alternative names is returned. ReserveName takes the following parameters: machine PUID, country ID, user name, and the maximum number of alternate names to return. If the name is successfully reserved, an entry is added to t_user_names. A reservation typically expires in one hour.  Positive cases: ReserveName.P.Mainline1 Desc: Reserve an unused name (make sure the name is unused by looking it up). Verify: Service returns SUCCESS, name is reserved in t_user_names ReserveName.P.UsedName Desc: Reserve a used name; 10 max alt names Verify: XONLINE_S_ACCOUNTS_NAME_TAKEN and 10 alternate names ReserveName.P.UnacceptableName Desc: Reserve an unacceptable name; 10 max alt names Verify: XONLINE_S_ACCOUNTS_NAME_TAKEN and 10 alternate names ReserveName.P.VerifyValidity Desc: Request lots (let s say 1024) alt. names, and make sure all the returned user names are valid (can be created). Verify: XONLINE_S_ACCOUNTS_NAME_TAKEN and the requested number of alternate names.  ReserveName.P.MaxAltNamesTest Desc: Reserve a taken name; request {1, 5, 32, 64} max alt names Verify: XONLINE_S_ACCOUNTS_NAME_TAKEN and the requested number of alternate names ReserveName.P.ReserveNewName Desc: Reserve a name, and then reserve a new name from the same Xbox Verify: The appropriate entry in t_user_names is updated ReserveName.P.ReReserveName Desc: Reserve a name; wait for the name to expire; reserve the same name from a different Xbox Verify: Call passes ReserveName.P.ReserveAndCreate Desc: Reserve a name; Create an account using that name Verify: Call passes ReserveName.P.GoodNames Desc: Use known good names to test name vetting ( digit1 di1git foo bar foo_bar , etc) Verify: Call passes Negative cases: ReserveName.N.BlankName Desc: Reserve a blank name Verify: XONLINE_E_INVALID_REQUEST ReserveName.N.TooManyNames Desc: Reserve a taken name; request 65 max alt names Verify: XONLINE_S_ACCOUNTS_NAME_TAKEN and the requested number of alternate names ReserveName.N.ForbiddenName Desc: Reserve a forbidden name (look up in t_forbidden_names); request 5 max alt names Verify: XONLINE_S_ACCOUNTS_NAME_TAKEN and the requested number of alternate names ReserveName.N.BadCountryID Desc: Send a country ID not found in t_countries Verify: XONLINE_S_ACCOUNTS_NAME_TAKEN and the requested number of alternate names ReserveName.N.BadMpuid Desc: Reserve a name from one Xbox, attempt to reserve it from a different Xbox before the reservation expires Verify:  Make sure that the call fails. ReserveName.N.BadNames Desc: ReserveName with a bad user name ( 1digit bad  name  name name  , non alphanum characters) Verify: Lookup owner in UODB based on name (make sure that UACS didn t create him anyway) ReserveName.N.ReserveAndCreate Desc: Reserve a name, attempt to create an owner with the same name from a different Xbox before the reservation expires Verify:  Make sure that the call fails. ReserveName.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. SetUserPIN SetUserPIN sets the PIN code for the current user. The PIN code is used to set and retrieve user billing data through GetPaymentInfo and SetPaymentInfo. SetUserPIN is a simple API: it takes only the user s puid and the new PIN code. Results of the user PIN being changed are verified later using GetPaymentInfo and SetPaymentInfo. Due to the nature of these three functions, most if not all test cases will depend on more than just one call. Positive cases: SetUserPin.P.Mainline Desc: Set a user s PIN. Verify: Service returns SUCCESS. Additional verification can be done through GetPaymentInfo. Negative cases: ReserveName.N.BadPuid Desc: Set a non existent user s puid. Verify: Service fails SetUserPIN.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. GetPaymentInfo GetPaymentInfo returns current billing information to the user. This is a fairly straightforward API   all it does is lookup the user s records, fills out a structure and sends that back to the user. Therefore, there is only so much that can be done to test this API. I intend to conduct only minimal testing of GetPaymentInfo   one positive and two negative cases, and then test GetPaymentInfo by using it to verify returns from SetPaymentInfo. GetPaymentInfo only takes two arguments: the user PIN and the user puid. Positive cases: GetPaymentInfo.P.Mainline1 Desc: Retrieve payment information for an already created user. Verify: Service returns SUCCESS Negative cases: GetPaymentInfo.N.BadPuid Desc: Retrieve payment information for a non existent user puid. Verify: Service fails GetPaymentInfo.N.BadPIN Desc: Retrieve payment information for a user with a bad pin. Verify: Service fails GetPaymentInfo.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. SetPaymentInfo SetPaymentInfo sets user s billing information. The only requirement for this API is that it is passed in a valid puid and valid information (matching zip, city, state, etc).  All test cases will be additionally verifies using GetPaymentInfo. Positive cases: SetPaymentInfo.P.Mainline Desc: Set payment information for an already created user. Verify: Service returns SUCCESS SetPaymentInfo.P.VerifyCreatedOn Desc: Create an account, make sure the created date is set to the right date. Use SPI to modify the account. Verify that the created date has not changed. Negative cases: SetPaymentInfo.N.Mainline Desc: Set payment information for a non existing user. Verify: Service returns appropriate error code SetPaymentInfo.N.MissingFields Desc: MissingFields with each of the following fields missing (multiple tests): gamertag firstname lastname street1 postalcode phoneprefix phonenumber cardholder cardnumber birthdate Verify: Service returns appropriate error code SetPaymentInfo.N,InvalidCC Desc: SetPaymentInfo with invalid CC information (type, number, or expiration date) Verify: Service returns appropriate error code SetPaymentInfo.N.BadCountry Desc: SetPaymentInfo with a bad country ID, not found in t_countries Verify:  Service returns appropriate error code SetPaymentInfo.N.LocationMismatch1 Desc: SetPaymentInfo with an invalid ZIP code, city pair Verify: Service returns appropriate error code SetPaymentInfo.N.LocationMismatch2 Desc: SetPaymentInfo with an valid ZIP code, city pair, but with the wrong state Verify: Service returns appropriate error code SetPaymentInfo.N.BadEmail Desc: SetPaymentInfo with an invalid email (no @, no .) Verify:  Service returns appropriate error code SetPaymentInfo.N.BadPhone Desc: SetPaymentInfo with a bad phone number (011-012) Verify:  Service returns appropriate error code SetPaymentInfo.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. VerifyBillingPIN VerifyBillingPin lets the client test whether or not a user entered code matches the billing PIN. Currently, the billing pin consists of the last four digits of the user s credit card. If the server is set to autogenerate CC numbers, VerifyBillingPinTests will always pass. Positive cases: VerifyBillingPin.P.Mainline Desc: Create a new user. Verify his billing pin using the last four digits of the users CC. Verify: Service returns SUCCESS Negative cases: VerifyBillingPin.N.BadPuid Desc: Verify an unknown user s billing pin. Verify: Service fails VerifyBillingPin.N.BadPIN Desc: Attempt to verify a known bad PIN for a created user. Verify: Service returns PERMISSION_DENIED VerifyBillingPin.N.BadData Desc: Attempt to verify a malformed PIN (0xFF 0xFF 0xFF 0xFF and 0 0 0 0) for a created user. Verify: Service returns PERMISSION_DENIED VerifyBillingPin.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. SetUserSettings SetUserSettings sets si_ticket_flags in the UODB. The name might be a bit misleading since there is also a si_user_flags field in the UODB, but this API doesn t have anything to do with that field.  Positive cases: SetUserSettings.P.Mainline Desc: Create a new user. Set his user flag to 10. Verify: Service returns SUCCESS SetUserSettings.P.SetMultiple Desc: Create a new user. Set a single user s flags to a range of different flags (0, 1, 256, 32767, 32768, 65535). Verify: Service returns SUCCESS SetUserSettings.P.Mainline Desc: Create a new user. Set his user flag to 10. Verify: Service returns SUCCESS Negative cases: SetUserSettings.N.BadPuid Desc: Set an unknown user s flag. Verify: Call fails SetUserSettings.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. VerifyVoucher Verifies that the specified voucher is valid for the specified country. Positive cases: VerifyVoucher.P.Mainline Desc: Verify a known good voucher. Verify: Return positive VerifyVoucher.P.International Desc: Verify a known good voucher for every country Xbox Live is launching in. Verify: Return positive Negative cases: VerifyVoucher.N.BadVoucher Desc: Verify a non-existing voucher Verify: Returns negative VerifyVoucher.N.BadCountry Desc: Verify a known good voucher, but set the country field to a wrong value Verify: Returns negative VerifyVoucher.N.ExtraLongVoucher Desc: Verify a very long voucher (64k characters) Verify: Returns negative VerifyVoucher.N.ShortVoucher Desc: Verify a 0 length voucher  Verify: Returns negative VerifyVoucher.N.AllOnes Desc: Verify a voucher set to 11111-11111-11111-11111-11111 Verify: Returns negative VerifyVoucher.N.AllZeroes Desc: Verify a voucher set to 00000-00000-00000-00000-00000 Verify: Returns negative VerifyVoucher.N.AlreadyUsed Desc: Use a voucher through CreateOwner, and the try to verify it with VerifyVoucher Verify: Returns negative VerifyVoucher.N.ExpiredVoucher Desc: Attempt to verify an expired voucher Verify:  Make sure that the call fails. VerifyVoucher.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. SetUserAccountStatus This API is used to set certain key account properties such as whether or not the TOS have changed since the last time the user was logged on, whether or not the user needs to change his name (using ChangeGamerTag), as well as any bans or suspensions that are on record for an account. Results will be verified by UODB lookups and using TroubleshootAccount. Positive cases: SetUserAccountStatus.P.Mainline Desc: Set all the fields of the account status structure. Verify: A successful call. Verify settings by looking up data in the UODB. SetUserAccountStatus.P.RangeCheck Desc: Verify that extreme values do not trip up the service. Set the  boolean  (they are really ints) fields to 2, set TotalDaysSuspended to 0xFFFF, set the dates to 1/1/1900 and 1/1/2900. Verify: A successful call. Verify settings by looking up data in the UODB. Negative cases: SetUserAccountStatus.N.BadPUID Desc: Use a bad puid. Verify: The call fails. SetUserAccountStatus.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. ChangeGamerTag Changes the specified user s tag. Takes in the machine puid, the user puid, and the new name. The user s account status must have the ChangeGamerTag field set to true in order for this call to pass. Positive cases: ChangeGamerTag.PMainline Desc: Create a user and change his name. Verify: The new user is in the UODB and his puid matches the old puid. ChangeGamerTag.PSetMultiple Desc: Create a user and change his name a couple of times. Reuse original name the last time. Verify: The new user is in the UODB and his puid matches the old puid. ChangeGamerTag.PMaxChars Desc: Create a user and change his name to a 15 character name. Verify: The new user is in the UODB and his puid matches the old puid. Negative cases: ChangeGamerTag.NBlankName Desc: Create a user and change his name to a blank name. Verify: The user s name has not changed in the UODB. ChangeGamerTag.NSameName Desc: Create a user and change his name to the same name. Verify: The new user is in the UODB and his puid matches the old puid. ChangeGamerTag.NUsedName Desc: Create a user and change his name to a used name. Verify: The user s name has not changed in the UODB. ChangeGamerTag.NBadName Desc: Create a user and change his name to forbidden name (eg. Shit001). Verify: The user s name has not changed in the UODB. ChangeGamerTag.N.BadNames Desc: Change a user s name to a known bad name ( 1digit bad  name  name name  , non alphanum characters) Verify: The user s name has not changed in the UODB. ChangeGamerTag.NWrongMPuid Desc: Create a user and change his name, but set the machine puid to a different but valid machine puid Verify: The user s name has not changed in the UODB. ChangeGamerTag.NBadPuid Desc: Change the name for a user with a bad puid Verify: The user s name has not changed in the UODB. ChangeGamerTag.NTooManyChars17 Desc: Create a user and change his name to a 17 character name. Verify: The user s name has not changed in the UODB. ChangeGamerTag.NTooManyChars65535 Desc: Create a user and change his name to a 65535 character name. Verify: The user s name has not changed in the UODB. ChangeGamerTag.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. RestoreAccount Restores an account   given billing information and a user name, it will return the puid and the key. Positive cases: RestoreAccount.PMainline Desc: Create a user, and then try to restore his account. Verify: The new user is in the UODB and the returned puid matches the old one. Negative cases: RestoreAccount.NBadPuid Desc: Try to restore a non-existant user. Verify: The account is not restored. RestoreAccount.NWrongInfo Desc: Set a field to an arbitrary value, and try to restore a user. Repeat this for every field. Verify: The account is not restored. RestoreAccount.NMissingFields Desc: Omit a field, and try to restore a user. Repeat this for every field. Verify: The account is not restored. RestoreAccount.NLargeFields Desc: Set a field to a large string (64k characters). Repeat this for every field. Verify: The account is not restored. RestoreAccount.NBadTag Desc: Try to restore a non-existant user. Verify: The account is not restored. RestoreAccount.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. TroubleShootAccount TroubleshootAccount does the exact opposite of SetUserAccountStatus   given a user and machine puid, it returns account status information. The majority of tests for this API are done in SetUserAccountStatus tests   every SetUserAccountStatus test is verified using TroubleshootAccount. Positive cases: TroubleshootAccount.PMainline Desc: Create a user, and then try getting his account status. Verify: Data returned matches UODB contents. Negative cases: TroubleshootAccount.NBadPUID Desc: Try to get account status, send bad user puid. Verify: Call fails. TroubleshootAccount.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. AcceptTOU AcceptTOU merely sets uodb.dt_accepted_tos to the current date. This field contains the last date that the terms of usage have been accepted.  Positive cases: AcceptTOU.PMainline Desc: Create a user, and then accept his TOU. Verify: Data returned matches UODB contents. Negative cases: AcceptTOU.NBadPUID Desc: Call AcceptTOU with a bad puid. Verify: Call fails. AcceptTOU.NBadMPUID Desc: Call AcceptTOU with a bad machine puid. Verify: Call fails. AcceptTOU.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. ClearSubscriptions ClearSubscriptions takes in a machine puid, and it deletes all purchases that have to do with that particular puid. Note that this API will not be used in production. Positive cases: ClearSubscriptions.PMainline Desc: Call this API for a specific machine puid. Verify: Call passes. Negative cases: ClearSubscriptions.N.BogusAuth Desc: Call this API with bogus auth data Verify:  Make sure that the call fails with a generic error. VoucherTests These tests test the different voucher types. Before they start, they modify the vouchers table to include three vouchers: a single use voucher, a multiple use voucher (with a use count of 5), and an infinite use voucher. Positive cases: VoucherTests.PSingleUse Desc: Create and account using the single use voucher. Verify: Call passes, make sure that the voucher is expired after use. VoucherTests.PMultipleUse Desc: Create and account using the multiple use voucher. Repeat 5 times Verify: Call passes, make sure that the voucher is expired after use. VoucherTests.PSingleUse Desc: Create and account using the infinite use voucher. Verify: Call passes, make sure that the voucher is not expired after the use. LinkAccount PlinkAccount Desc: Link an owner account to a web ID. Verify: Query the database for all web mappings after test to ensure that new mappings are created for a linked user account. PlinkMinorAccount Desc: Link a minor account and ensure that it is linked the same as an owner account.  Verify:  Create an owner account along side the minor account and check the linked account values in uodb to ensure that all fields are filled out and not empty. NlinkAccountDataMismatch Desc: When linking the account provide non-matching billing PI info. Verify: Ensure that there are not any web account mappings in UODB after the account linking operations. Also ensure that an error is thrown on execution of this routine. ManualTests BillingQueue One aspect of UACS is better tested using manual tests: the billing queue. Should the connection between UACS and billing fail, all billing commands are automatically queued in the billing queue (uodb.t_user_billing_queue). Once the connection is restored, the queue pump should execute all queued commands. One way to test this functionality would be to turn the billing connection off via the xuacs.ini file (ConnectToBilling = No), and then execute the entire functional test suite. Make sure that the queue was filled, and then restore the connection. Make sure that the queue pump properly processes the queue.  SGAuth Disable fake SG in the test code. All positive test cases should fail   if they pass that would mean that UACS does not verify users and machines with the Security Gateway.  PUID Partitioning Verify that the algorithm used to partition t_users really works, and that the t_users tables contain approximately the same number of entries on all servers. A 15% difference will be tolerated. SetUserSettings2 Stress Testing M1 Milestone: Since minimal changes are being performed for this milestone, even though there is no official stress testing requirement, it is my goal to establish a TPS baseline for this version of the code. M2 Milestone: TBD Revision History Changes made Author First Draft Jacob Repp Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. tdVd:td gdrIy gdesA |m`WJAW`W Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\useraccount\test\Combined Xuacs Test Plan.doc ===
Microsoft Office Word 97-2003 Document MSWordDoc Word.Document.8Microsoft Corporation Xenon Xuacs Title _PID_HLINKS Document Description Type of Document Status Date Created Xenon Xuacs API Test Plan Technical Spec rough draft 2006-02-02T00:00:00ZXenon Xuacs Yuanfei Wang Normal.dotm Serge Sountsov Microsoft Office Word[Content_Types].xml _rels/.rels theme/theme/themeManager.xml theme/theme/theme1.xml f<!m/ dHGN6 *0+1~H -sEu-`Ue \)+{K<" v~*|fKIw y9[[` theme/theme/_rels/themeManager.xml.rels K(M&$R(.1 [Content_Types].xmlPK _rels/.relsPK theme/theme/themeManager.xmlPK theme/theme/theme1.xmlPK theme/theme/_rels/themeManager.xml.relsPK <?xml version="1.0" encoding="UTF-8" standalone="no"?> <a:clrMap xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/3/main" bg1="lt1" tx1="dk1" bg2="lt2" tx2="dk2" accent1="accent1" accent2="accent2" accent3="accent3" accent4="accent4" accent5="accent5" accent6="accent6" hlink="hlink" folHlink="folHlink"/> urn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags country-region urn:schemas-microsoft-com:office:smarttags ;S~m*Xenon Xuacs API Test Plan Created 2/2/2006 Last updated 2/2/2006 Program Management Jerry Hook Development Gary Thompson, Dan Walther Yuanfei Wang Operations Spec status Draft  Table of Contents  TOC \o "1-3" \h \z \u   HYPERLINK \l "_Toc127180360"  Table of Contents  PAGEREF _Toc127180360 \h   HYPERLINK \l "_Toc127180361"  Summary  PAGEREF _Toc127180361 \h   HYPERLINK \l "_Toc127180362"  Related Documents  PAGEREF _Toc127180362 \h   HYPERLINK \l "_Toc127180363"  Test Goals  PAGEREF _Toc127180363 \h   HYPERLINK \l "_Toc127180364"  Test Non-Goals  PAGEREF _Toc127180364 \h   HYPERLINK \l "_Toc127180365"  Test Setup  PAGEREF _Toc127180365 \h   HYPERLINK \l "_Toc127180366"  Functional Testing  PAGEREF _Toc127180366 \h   HYPERLINK \l "_Toc127180367"  XeAcknowledgeDowngrade  PAGEREF _Toc127180367 \h   HYPERLINK \l "_Toc127180368"  XeAddPaymentInstrument  PAGEREF _Toc127180368 \h   HYPERLINK \l "_Toc127180369"  XeChangeSubscriptionPaymentInstrument  PAGEREF _Toc127180369 \h   HYPERLINK \l "_Toc127180370"  XeCreateLiveAccount  PAGEREF _Toc127180370 \h   HYPERLINK \l "_Toc127180371"  XeCreateXboxComAccount  PAGEREF _Toc127180371 \h   HYPERLINK \l "_Toc127180372"  XeGetAccountInfo  PAGEREF _Toc127180372 \h   HYPERLINK \l "_Toc127180373"  XeGetLinkedGamertag  PAGEREF _Toc127180373 \h   HYPERLINK \l "_Toc127180374"  XeGetPaymentInstruments  PAGEREF _Toc127180374 \h   HYPERLINK \l "_Toc127180375"  XeGetPointsBalance  PAGEREF _Toc127180375 \h   HYPERLINK \l "_Toc127180376"  XeGetUserInfo  PAGEREF _Toc127180376 \h   HYPERLINK \l "_Toc127180377"  XeGetUserSubscriptionDetails  PAGEREF _Toc127180377 \h   HYPERLINK \l "_Toc127180378"  XeGetUserType  PAGEREF _Toc127180378 \h   HYPERLINK \l "_Toc127180379"  XeGetUserWebInfo  PAGEREF _Toc127180379 \h   HYPERLINK \l "_Toc127180380"  XeLinkXbox1Account  PAGEREF _Toc127180380 \h   HYPERLINK \l "_Toc127180381"  XeMigrateXbox1User  PAGEREF _Toc127180381 \h   HYPERLINK \l "_Toc127180382"  XeMigrateXboxComUser  PAGEREF _Toc127180382 \h   HYPERLINK \l "_Toc127180383"  XePassportChangePassword  PAGEREF _Toc127180383 \h   HYPERLINK \l "_Toc127180384"  XePassportCreate  PAGEREF _Toc127180384 \h   HYPERLINK \l "_Toc127180385"  XePassportGetEncryptedProxyParameters  PAGEREF _Toc127180385 \h   HYPERLINK \l "_Toc127180386"  XePassportGetMemberName  PAGEREF _Toc127180386 \h   HYPERLINK \l "_Toc127180387"  XePassportGetSecretQuestions  PAGEREF _Toc127180387 \h   HYPERLINK \l "_Toc127180388"  XePassportGetUserData  PAGEREF _Toc127180388 \h   HYPERLINK \l "_Toc127180389"  XePassportLogin  PAGEREF _Toc127180389 \h   HYPERLINK \l "_Toc127180390"  XeRecoverAccount  PAGEREF _Toc127180390 \h   HYPERLINK \l "_Toc127180391"  XeRemovePaymentInstrument  PAGEREF _Toc127180391 \h   HYPERLINK \l "_Toc127180392"  XeReserveGamertag  PAGEREF _Toc127180392 \h   HYPERLINK \l "_Toc127180393"  XeSetAccountInfo  PAGEREF _Toc127180393 \h   HYPERLINK \l "_Toc127180394"  XeTroubleshootAccount  PAGEREF _Toc127180394 \h   HYPERLINK \l "_Toc127180395"  XeUpdateParentalControlsTests  PAGEREF _Toc127180395 \h   HYPERLINK \l "_Toc127180396"  XeUpdatePaymentInstrument  PAGEREF _Toc127180396 \h   HYPERLINK \l "_Toc127180397"  XeUpdateXboxComActivity  PAGEREF _Toc127180397 \h   HYPERLINK \l "_Toc127180398"  XeUpsUpdateProfile  PAGEREF _Toc127180398 \h   HYPERLINK \l "_Toc127180399"  XeVerifyBillingInfo  PAGEREF _Toc127180399 \h   HYPERLINK \l "_Toc127180400"  XeVerifyParentCreditCard  PAGEREF _Toc127180400 \h   HYPERLINK \l "_Toc127180401"  Stress Testing  PAGEREF _Toc127180401 \h   HYPERLINK \l "_Toc127180402"  Performance Testing  PAGEREF _Toc127180402 \h   HYPERLINK \l "_Toc127180403"  Resource Requirements  PAGEREF _Toc127180403 \h   HYPERLINK \l "_Toc127180404"  Test Complete Criteria  PAGEREF _Toc127180404 \h   HYPERLINK \l "_Toc127180405"  Release Criteria  PAGEREF _Toc127180405 \h   HYPERLINK \l "_Toc127180406"  Revision History  PAGEREF _Toc127180406 \h  Summary This spec will cover the test plan for new APIs required to create Xenon accounts in the Xbox Live service. Related Documents The test plan for Xbox1 Uacs APIs can be found at (\private\doc\server\billing\useraccount\test\ UACS Test Plan.doc). Test Goals Overview: Maintenance of existing functional tests and adding new levels of depth to the test matrix around the areas of minor accounts, queued account and advanced account status.  Test Non-Goals It is not the goals of this testing cycle to test: TBD Test Setup The tests will be run using the ServerTestFramework under STFRunner. They will be part of the XeUacs suite of tests.  Functional Testing XeAcknowledgeDowngrade P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify that XeAcknowledgeDowngrade call succeeds and the downgraded flag is cleared (value is zero). P_FlagAlreadyZero Functionality: The test verifies to see when the downgraded flag is initially set to zero, if there is an exception. Verification: Verify that the XRL call succeeds and the downgraded flag keeps zero. N_NoDowngradedFlag Functionality: The test verifies to see what will happen to a gold subscription when the downgraded flag is not set (value is zero). Verification: Verify that the gold subscription is not downgraded to silver and downgraded flag keeps as zero. N_Violations Functionality (bug 48430): The test verifies to see what will happen to a gold subscription when Xcbk fails to contact SCS for the status of the user s subscription (such as violations) and the downgraded flag is set to 1. Verification: If the user has violations on SCG side, verify that the downgraded flag is cleared and billing account status is set to Account_Require_Management. N_InvalidUserPuid Functionality (bug 48430): The test verifies to see what will happen when the user puid is invalid in the request. Verification: Verify that XONLINE_E_SERVER_ERROR is returned. XeAddPaymentInstrument P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card - Visa) is added. P_TypeIsDirectDebit Functionality: The test is the same as P_Mainline except a direct debit is added as the payment instrument. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a direct debit) is added. P_TypeIsCreditCard Functionality: The test is the same as P_Mainline. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card - Visa) is added. P_CreditCard_Visa Functionality: The test is the same as P_Mainline. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card - Visa) is added. P_CreditCard_MasterCard Functionality: The test is the same as P_Mainline except Master Card is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Master Card) is added. P_CreditCard_Amex Functionality: The test is the same as P_Mainline except Amex is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Amex) is added. P_CreditCard_Discover Functionality: The test is the same as P_Mainline except Discover is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Discover) is added. P_CreditCard_Jcb Functionality: The test is the same as P_Mainline except Jcb (Japan) is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Jcb) is added. P_CreditCard_Diners Functionality: The test is the same as P_Mainline except Diners (Korea) is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Diners) is added. P_CreditCard_Klcc Functionality: The test is the same as P_Mainline except Klcc (Korea) is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Klcc) is added. N_CreditCard_Jcb_Country_Mismatch Functionality: User country is US, but Jcb credit card country is Japan. Verification: Verify that the error XONLINE_E_BILLING_COUNTRY_CURRENCY_PI_MISMATCH is returned. N_CreditCard_Diners_Country_Mismatch Functionality: User country is US, but Diners credit card country is Korea. Verification: Verify that the error XONLINE_E_BILLING_COUNTRY_CURRENCY_PI_MISMATCH is returned. N_CreditCard_Klcc_Country_Mismatch Functionality: User country is US, but Klcc credit card country is Korea. Verification: Verify that the error XONLINE_E_BILLING_COUNTRY_CURRENCY_PI_MISMATCH is returned. N_TypeIsNone Functionality: Set the payment instrument type to none (only credit card and direct debit are valid payment instrument types). Verification: Verify that the error XONLINE_E_BILLING_INVALID_PAYMENT_INSTRUMENT_TYPE is returned. N_DirectDebitInNonSupportedCountry Functionality: Direct debit is not supported in France. Verification: Verify that the error XONLINE_E_BILLING_INVALID_PAYMENT_INSTRUMENT_TYPE is returned. N_InvalidMachineAuthData Functionality: Set the incorrect machine puid in SG info. Verification: Verify that the error XONLINE_E_SERVER_ERROR is returned. N_InvalidUserAuthData Functionality: Set the incorrect user puid in SG info. Verification: Verify that the error XONLINE_E_SERVER_ERROR is returned. XeChangeSubscriptionPaymentInstrument P_Mainline Functionality: Add two credit cards to a user account. Then change the payment instrument from one card to the other. Verification: Verify the XRL is correctly sending and receiving data and no exception is thrown. XeCreateLiveAccount P_Mainline Functionality: Create a Xenon silver user with the most basic data. Verification: Verify the XRL is correctly sending and receiving data and no exception is thrown. P_XeUser_Real_Passport Functionality: Create a Xenon silver user with a real passport. It is not relevant any more because all Xenon users are using real passport now. Verification: Verify the XRL is correctly sending and receiving data and no exception is thrown. And the passport is created without error. P_XeUser_Fake_Passport Functionality: It is not relevant any more because all Xenon users are using real passport now. Verification: P_CreateAsGold Functionality: Create a gold prepaid one year user account. Verification: Verify the user tier in UODB is gold. P_All_Offers_CreditCard Functionality: Try four different gold subscriptions, gold signup, gold CC 1 month, gold CC 3 month and gold CC 1 year. All use credit card as the payment instrument. Verification: Verify there is only one subscription and the offer id is right. P_All_Offers_DirectDebit Functionality: Try four different gold subscriptions, gold signup, gold CC 1 month, gold CC 3 month and gold CC 1 year. All use direct debit as the payment instrument. Verification: Verify there is only one subscription and the offer id is right. P_All_Offers_Vouchers Functionality: Try four different gold subscriptions, gold prepaid 1 month, gold prepaid 3 month, gold prepaid 1 year and gold prepaid 13 month. All use token. Verification: Verify there is only one subscription and the offer id is right. P_Gamertag_Already_Exists Functionality: Test on creating a user with a gamertag that is already used. Should be a negative test case?? Verification: Verify the error code XONLINE_E_ACCOUNTS_NAME_TAKEN is returned. P_Verify_Keys_Are_Created Functionality: Verify that the user keys are created for both Xenon and Xbox1. Verification: Verify the key versions are returned. P_Create_Using_Xbo1_Token Functionality: Create a Xenon user using an Xbox1 offer id and an Xbox1 token. Verification: Verify the subscription is gold 1 year and account type is Xenon and user is allowed to logon to Xbox1. P_ChildAccount_Restricted Functionality: When creating a child account (10 years old), the parent account is need. Verification: Verify a child account creation will fail if no parent account presents. P_All_Credit_Card_Types Functionality: Verify all credit cards, US-Visa, US-MasterCard, US-Amex, US-Discover, JP-Jcb, KR-Diners, and KR-Klcc. Verification: Verify the user can be created successfully. P_AllCountries Functionality: Verify all 24 countries. Verification: Verify the user can be created successfully. P_Arb_Spaces_Should_Clash Functionality: Verify that the multiple spaces in gamertag will collapse to one space.  Verification: Verify the error code XONLINE_E_ACCOUNTS_NAME_TAKEN is returned. P_Test_Email_Vetting_Code Functionality: Check on the user email format. Verification: Email like "my.my.my.my-email-@domain.domain.domain.com.com.uk" should be a valid email. P_Verify_OptIns_Are_Set Functionality: Check on the user ms_opt_in and partner_opt_in settings. Verification: Verify the user ms_opt_in and partner_opt_in settings are correct. P_Verify_Created_Date Functionality: Check on the user creation date. Verification: Verify the user creation date is correct. P_Unicode Functionality: Check on the user first name and last name in Unicode. Verification: Verify the user can be created successfully. P_CreateAlreadyExistsInSCS Functionality: Ignored due to bug 47481 (reuse of accounts). Verification: P_Points_Reward Functionality: Ignored due to signup rewards are not being offered. Verification: P_Language_Country_Mismatch Functionality: User country and language is not matched, such as country-US with language-Chinese. Verification: Verify the user can be created successfully. N_UserInfo_Whitesapce Functionality: Verify first name, last name, street address, city, postal code and state cannot just contain whitespaces. Verification: Verify the error code XONLINE_E_INVALID_REQUEST or XONLINE_E_ACCOUNTS_BAD_BILLING_ADDRESS is returned. N_Passport_Already_Linked Functionality: Verify that two users cannot have the same passport puid and passport session token. Verification: Verify the error code XONLINE_E_ACCOUNTS_PASSPORT_ALREADY_LINKED is returned. N_Invalid_Voucher_Code Functionality: Verify that a token has to match with the correct offer id. Verification: Verify the error code XONLINE_E_ACCOUNTS_INVALID_VOUCHER is returned. N_DOB_In_The_Future Functionality: Verify that birth date cannot be a future date. Verification: Verify the error code XONLINE_E_ INVALID_REQUEST is returned. N_Foul_Gamertag Functionality: Verify some invalid gamertags (such as  OhSh1tNo Verification: Verify the error code XONLINE_E_ ACCOUNTS_NAME_TAKEN is returned. N_Bad_Names Functionality: Verify some invalid gamertags. Ignored. Verification: Gamertag must start with a letter. N_Bad_Names Functionality: Verify some invalid gamertags. Ignored. Verification: Gamertag must start with a letter. Are there any other bad names?? N_Reached_Trial_Limit Functionality: Verify that maximum 3 gold trials can be created on a console. Verification: Verify the error code XONLINE_E_ACCOUNTS_REACHED_TRIAL_OFFER_LIMIT is returned. N_InvalidVoucher Functionality: Verify an invalid token. Verification: Verify the error code XONLINE_E_ACCOUNTS_INVALID_VOUCHER is returned. N_NonValidAddress Functionality: Check on postal code format. Verification: Verify the user creation will fail. N_Invalid_Machine_Auth_Data Functionality: Set the incorrect machine puid in SG info. Verification: Verify that the error XONLINE_E_SERVER_ERROR is returned. N_Existing_MSN_Account_Bug_46886_OneActive Functionality: Ignored due to bug 47481 (reuse of accounts). Verification: N_Existing_MSN_Account_Bug_47352_Non_US Functionality: Ignored due to bug 47481 (reuse of accounts). Verification: N_Non_Valid_Payment_Instrument_Types_Bug_47466 Functionality: Ignored due to bug 47481 (reuse of accounts). Verification: XeCreateXboxComAccount P_Mainline Functionality: Create an Xbox.com account. Verification: Verify the XRL is correctly sending and receiving data, no exception is thrown and user puid is not zero. P_Verify_Account_Type Functionality: Create an Xbox.com account and check the account type. Verification: Verify the user account type is Xbox.com account. N_Gamertag_Already_Taken Functionality: Try to reuse a gamertag which is already used to create an Xbox.com account. Verification: Verify the error code XONLINE_E_ACCOUNTS_NAME_TAKEN is returned. N_Passport_Already_Linked Functionality: Try to reuse a passport puid which is already linked to create an Xbox.com account. Verification: Verify the error code XONLINE_E_ACCOUNTS_PASSPORT_ALREADY_LINKED is returned. P_Verify_OptIns_Are_Set Functionality: Verify the settings of ms_opt_in and partner_opt_in. Verification: Verify ms_opt_in and partner_opt_in are set correctly. P_All_Countries Functionality: Verify the XRL is correctly sending and receiving data for all 24 countries. Verification: Verify the XRL succeeds and no exception is thrown. N_Bad_Gamertag Functionality: Verify some invalid gamertags (such as  Hotshit Verification: Verify the error code XONLINE_E_ ACCOUNTS_NAME_TAKEN is returned. N_Bad_Email Functionality: Check on the user email format. Verification: Emails in Unicode are not valid emails and should return error code XONLINE_E_BILLING_INVALID_EMAIL_ADDRESS. P_Unicode Functionality: Check on the user first name and last name in Unicode. Verification: Verify the user can be created successfully. XeGetAccountInfo P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRLXeGetAccountInfo request succeeds, and first name and last name are correct. P_ValidateFields Functionality: Verify the fields returned from XRLXeGetAccountInfo. Verification: Verify First Name, Last Name, Birth Date, Email, Address Info, Phone Info, Language Id, Msf_Opt_In and Partner_Opt_In are correct. P_Xbox1User Functionality: Verify the fields returned from XRLXeGetAccountInfo for an Xbox1 user. Verification: Verify First Name, Last Name, Birth Date, Email, Address Info, Phone Info, Language Id, Msf_Opt_In and Partner_Opt_In are correct. N_InvalidUserPuid Functionality: Check on invalid user puid in the request (not match the user puid in SG Info). Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachinePuid Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidUserAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleId Functionality: Check on invalid title in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeGetLinkedGamertag P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRLXeGetLinkedGamertag request succeeds using Signed Passport Puid as an input, and Gamertag and user puid are correct. P_RealPassportAccount Functionality: Same as P_Mainline because now all passports are real. Verification: Verify the XRLXeGetLinkedGamertag request succeeds, and Gamertag and user puid are correct. P_Xbox1_NonLinked Functionality: Verify Xbox1 user who doesn t have a passport linked. Should be negative test case? Verification: Verify the error code XONLINE_E_ACCOUNTS_PASSPORT_NOT_LINKED is returned. P_Xbox1_Linked Functionality: Verify Xbox1 user who has a passport linked.  Verification: Verify the XRLXeGetLinkedGamertag request succeeds, and Gamertag and user puid are correct. P_After_ChangeGamertag Functionality: Verify Gamertag and user puid after changing the gamertag through XRLChangeGamerTag request.  Verification: Verify the XRLXeGetLinkedGamertag request succeeds, and correct Gamertag and user puid are returned. N_Invalid_Session_Token Functionality: Check on invalid Sighed Passport Puid.  Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeGetPaymentInstruments P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify exact one payment instrument returned. P_ReturnTwoPaymentInstruments Functionality: Add two Visa credit cards as the payment instruments. Verification: Verify two payment instruments returned and the payment instrument IDs are different. P_ReturnDebitAndCredit Functionality: Add a Visa credit card and a direct debit as two payment instruments. Verification: Verify two payment instruments returned and one is credit card, the other is direct debit. P_ReturnMaxPaymentInstruments Functionality: Add 5 Visa credit cards as the payment instruments. Verification: Verify 5 payment instruments returned (using MaxResults = 5 and it is the same as the total number of payment instruments) and no two payment instruments are the same. P_ReturnFewerThanTotal Functionality: Add 10 Visa credit cards as the payment instruments. Verification: Verify 5 payment instruments returned (using MaxResults = 5) and no two payment instruments are the same. P_NoPaymentInstruments Functionality: No payment instrument is added to a user. Verification: Verify the request succeeds and 0 payment instrument is returned. P_RemoveOnePaymentInstrument Functionality: Create a Xenon user with two payment instruments, and then remove one by using XRLXeRemovePaymentInstrument request. Verification: Verify exact one payment instrument is returned and the payment instrument id is correct. P_GetPiForXbox1Account Functionality: Create an Xbox1 user with one payment instrument, and then add another payment instrument by using XRLXeAddPaymentInstrument request. Verification: Verify exact 2 payment instruments are returned. N_ForceBillingError Functionality: Send the request with ScsFaultInjection set as  GetPaymentInstruments:8004EA6E:Zip Invalid . How many XRL have this Fault Injection? Verification: Verify the error code XONLINE_E_BILLING_STATE_ZIP_INVALID is returned. N_InvalidMachineAuthData Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidUserIdAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeGetPointsBalance P_Mainline Functionality: Create a silver Xenon user and verify the points balance. Verification: Verify the XRL is correctly sending and receiving data and no exception is thrown. P_AddPoints_CheckBalance Functionality: Create a silver Xenon user, and add 500 points using credit card, and then verify the points balance. Verification: Verify no exception is thrown and the points balance is correct. P_Increasing_Balance Functionality: Create a silver Xenon user, and add 500 points for 15 times, and then verify the points balance. Verification: Verify no exception is thrown and the points balance is correct after each increase. P_Points_Limits_Purchased_Daily Functionality: Create a silver Xenon user, and add 500 points each time until over 12000 points, and then verify the points balance. Verification: Verify the error code XONLINE_E_DMP_E_MAX_BALANCE_EXCEEDED is returned when maximum points a day limit is reached (12000 points). XeGetUserInfo P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRLXeGetUserInfo request succeeds. P_Xbox1User Functionality: Create an Xbox1 user, and then do XRLXeGetUserInfo. Verification: Verify the XRLXeGetUserInfo request succeeds, and the returned FirstName, LastName, AddressInfo, Email, LanguageId, CountryId, MsfOptIn, PartnerOptIn and age are all correct. P_XenonUser Functionality: Create a Xenon user, and then do XRLXeGetUserInfo. Verification: Verify the XRLXeGetUserInfo request succeeds, and the returned FirstName, LastName, AddressInfo, Email, LanguageId, CountryId, MsfOptIn, PartnerOptIn and age are all correct. N_InvalidUserPuid Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachinePuid Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeGetUserSubscriptionDetails P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRLXeGetUserSubscriptionDetails request succeeds. User puid, offer id and service instance id are passed in as input. P_NoPaymentInstrument Functionality: Create a Xenon user with gold prepaid 1 year subscription. Verification: Verify the XRLXeGetUserSubscriptionDetails request succeeds. User puid, offer id and service instance id are passed in as input. XeGetUserType Parameters Input ulong MachinePuid string Gamertag Output byte UserType Currently defined user types are          Xbox1User                   XboxComUser             XenonUser                    Xbox1LinkedUser      P_Mainline Functionality: Create an Xbox1 user and a Xenon user. Verify the XRL is correctly sending and receiving data and no exception is thrown. Gamertag is passed in as input. Verification: Verify the correct user types are retuned for Xbox1 user and Xenon user. P_Xbox1User Functionality: This test is already covered in P_Mainline test case. Verification: P_Xbox1LinkedUser Functionality: Create an Xbox1 user with a linked passport. Verification: Verify the user type retuned is Xbox1 Linked User. P_XenonUser Functionality: This test is already covered in P_Mainline test case. Verification: P_XBoxComUser Functionality: Create an Xbox.com user. Verification: Verify the user type retuned is xbox.com user. N_InvalidGamertag Functionality: Check on an invalid gamertag. Verification: Verify the error code E_INVALIDARG is returned. N_InvalidMachinePuid Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. Test Ideas HttpAuth Argo user Call from reserved but not created gamertag Call with invalid gamertag XeGetUserWebInfo Input ulong UserPuid Output uint[] UserPrivileges uint Tier DateTime LastWebActivity P_Mainline Functionality: Create a silver user account and gold account. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the correct user tiers are retuned for silver account and gold account. P_PrivilegesAsGold Functionality: Create a one year prepaid gold account.  Verification: Verify the user has the privilege of XONLINE_XPRIVILEGE_MULTIPLAYER_ENABLED_BY_TIER. P_PrivilegesAsSilver Functionality: Create a silver user account.  Verification: Verify the user doesn t have the privilege of XONLINE_XPRIVILEGE_MULTIPLAYER_ENABLED_BY_TIER. P_VerifyLastWebActivity Functionality: Create a silver user account and set the Last Web Activity Date to now.  Verification: Verify the user setting of Last Web Activity Date is set correctly. P_LastWebActivityIsNull Functionality: Create a silver user account and leave the Last Web Activity Date as Null.  Verification: Verify the user setting of Last Web Activity is defaulted to 1900/1/1. N_UserPuidDoesNotExist Functionality: Check on a not exist user puid. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidUserPuidAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. Test Ideas XboxCom user Argo user Callable via HTTPauth Title id in Auth  not WEB_TITLE_ID XeLinkXbox1Account Parameters Input ulong MachinePuid uint TitleId string GamerTag byte[] SignedUserPassportPuid byte[] SignedOwnerPassportPuid PhoneInfoData PhoneInfo string PostalCode string CardHolder string CardNumber Returns Success/failure P_Mainline Functionality: Create an Xbox1 user, then call the XRL to link to a passport. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the returned user passport puid and owner passport puid are correct. P_HttpAuth Same as previous but via HttpAuthentication Test ideas LinkXbox1Account Bad machine puid in SG data Bad title id in SG data Dashboard titleId/web titleid/anything else ? CardNumber length = 3 CardNumber length = 17 Incorrect gamertag Reserved gamertag Account is not in good standing Already linked xbox1 account should work  Already linked to the same passport ??? Xenon account Invalid passport puid/ownerpassportpuid Link one account to passport, try linking another one to the same passport RestoreUtil.VerifyRecoveryData tests NonMatching postal code Ireland - and any postal code Incorrect name Incorrect phonePrefix Incorrect Phone number Non numerics in Phone Number for PI/useraccount Phone matches PI Phone matches userInfo Country where phone is not required XeMigrateXbox1User Parameters Input byte[] SginedUserPassportPuid byte[] SignedParentPassportPuid ulong OfflineXuid UserPassportMemberName uint TtitleId ulong MachinePuid ushort LanguageId byte[] ReservedBytes Output ulong UserPuid byte[] XenonKey string GamerTag string Domain string Realm int ParentalControlGroupId int CultureId P_Mainline Functionality: Create an Xbox1 user, then call the XRLLinkWebAccount to link to a passport. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the migration status in t_xenon_migration_queue table is 2. P_VerifyKeysChanged Functionality: Create an Xbox1 user, and then call the XRLLinkWebAccount to link to a passport.  Verification: Verify the migration status in t_xenon_migration_queue table is 2, and Xenon user keys have changed after the XRL and Xbox1 user keys keep the same. P_VerifyRemainingTimeMigrated Functionality: Create an Xbox1 user, and then call the XRLLinkWebAccount to link to a passport. Set the end date on the user s current subscription. Verification: Verify the migration status in t_xenon_migration_queue table is 2, and the user has exact one subscription. Suggest to verify that endDate is set to max value P_MigrateMinorAccount_Restricted Functionality: Create an Xbox1 user, and then call the XRLXeLinkXbox1Account to link to a passport. Change the birth date in UODB to 10 years old. Verification: Verify the migration status in t_xenon_migration_queue table is 2, and allow Xbox1 logon is set to false and parental control group is restricted. P_MigrateMinorAccount_Medium Functionality: Create an Xbox1 user who is 16 years old, then call the XRLXeLinkXbox1Account to link to a passport.  Verification: Verify the migration status in t_xenon_migration_queue table is 2, and allow Xbox1 logon is set to false and parental control group is medium. P_MigrateMinorAccount_Subscriptions Functionality: Create an Xbox1 user who is 16 years old, then call the XRLXeLinkXbox1Account to link to a passport.  Verification: Verify the current subscription is valid. P_MigrateMinorAccount_Subscriptions_Reconcile Functionality: Relate to bugs 48058 and 48062. Create an Xbox1 user who is 16 years old, then call the XRLXeLinkXbox1Account to link to a passport. After calling XRLXeMigrateXbox1User, manually change UODB and make the subscription in a bad state as in bug 48058. Verification: Verify the current subscription is valid after account reconcile. Add actual verification P_MigrateAccount_Open Functionality: Create an Xbox1 user who is 20 years old, then call the XRLLinkWebAccount to link to a passport.  Verification: Verify the migration status in t_xenon_migration_queue table is 2, and allow Xbox1 logon is set to true and parental control group is open. P_PaymentInstrument_Verification_Bug_46259 Functionality: Create an Xbox1 user, and then call the XRLLinkWebAccount to link to a passport. Manually change UODB to set vc_billing_payinfo_id in t_users table to  bogus Verification: Verify the migration status in t_xenon_migration_queue table is 2. N_AlreadyMigrated Functionality: Create an Xbox1 user, and then call the XRLLinkWebAccount to link to a passport. Call XRLXeMigrateXbox1User twice. Verification: Verify the error code XONLINE_E_ACCOUNTS_MIGRATE_NOT_XBOX1_USER is returned. N_NotLinked Functionality: Create an Xbox1 user, but don t call the XRLLinkWebAccount to link to a passport.  Verification: Verify the error code XONLINE_E_ACCOUNTS_PASSPORT_NOT_LINKED is returned. N_InvalidMachineAuthData Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleAuthData Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. P_SCG_Status_Different Functionality: Create an Xbox1 user, and then call the XRLLinkWebAccount to link to a passport. Billing emulator is used to make GetSubscriptions return suspended. Verification: Verify the error code XONLINE_E_ACCOUNTS_PERMISSION_DENIED is returned and the user account now needs management. P_MigrateUser_Bug48041 Functionality Create an xbox1 user and clink it to passport. After that call MigrateUser using SCG emulator. Verify that ProvisionServices was called with correct PassportMemberName.  Test ideas Only callable from Dashboard Incorrect passporttoken/parentpassporttoken Supply correct passport but not linked to the user Non xbox1 account (argo ?) Xbox1 account with invalid subsctiption Xbox1 account with valid subscription in uodb and CANCELED/EXPIRED in SCG Juvenile user with the same parent passport as his own Migration offer does not exist for this country ??? Fail each step in migration with restartable and not restartable steps and verify it continues successfully XeMigrateXboxComUser Parameters Input byte[] SignedPassportPuid ulong OfflineXuid uint TitleId ulong MachinePuid byte CountryId ushort LanguageId ulong OfferId string BillingToken string FirstName string Lastname string Email AddressInfoData AddressInfo PhoneInfoData PhoneInfo byte PaymentInstrumentType CreditCardInfoData CreditCardInfo DebitCardInfoData DebitCardInfo Output ulong UserPuid byte[] XenonKey string GamerTag string Domain string Realm string ParentalControlGroupdId string CultureId P_Mainline Functionality: Create an xbox.com user, and then call the XRLXeMigrateXboxComUser. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. N_XboxComOnly_CannotMigrate Functionality Verify that users in XboxCom only countries can not migrate P_MigrateToSilver Functionality: Create an xbox.com user, and set the offer id explicitly to silver free trial.  Verification: Verify the returned offer id is correct. P_MigrateToSilver_Queued Functionality Inject billing error during migration from xboxcom to silver. Verifies that user is left in queued state after migration. Executes Xmgmt Dequeue command and verifies that user was dequeued P_MigrateToGold_CC_Queued Same as above but Migrate to Gold user with CreditCard subscription `P_MigrateToGold_Queued_WrongOffer Same as previous but offerid is set to Gold Prepayd 1 year and no token is given. Verifies that request fails with E_ACCOUNTS_VOUCHER_REQUIRED error Suggest to remove N_Migrate_Using_Credit_Card_WrongOffer Same as above but no billing error injected. It does not matter though since the case fails earlier P_Migrate_Using_Credit_Card Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 year gold and use credit card as the payment instrument.  Verification: Verify the returned offer id is correct. P_Migrate_Using_Direct_Debit Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 year gold and use direct debit as the payment instrument.  Verification: Verify the returned offer id is correct. P_Migrate_Using_Voucher Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 month gold using token.  Verification: Verify the returned offer id is correct. P_VerifyNewKeys Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 month gold using token.  Verification: Verify both Xbox1 and Xenon keys have changed after the migration. SUGGEST to refactor verification and add to every positive test, remove test case P_Verify_Subscriptions_Silver Functionality: Create an xbox.com user, and set the offer id explicitly to silver free trial.  Verification: Verify the user tier is silver. Suggest merge with any silver case P_Verify_Subscriptions_Gold Functionality: Create an xbox.com user, and set the offer id explicitly to credit card 1 year gold using a credit card as the payment instrument.  Verification: Verify the user tier is gold. Suggest merge with any gold case P_Migrate_Using_Xbox1_Token Functionality: Create an xbox.com user, and set the offer id explicitly to Xbox1 Live 12 month using an Xbox1 token.  Verification: Verify the user tier is gold. P_Existing_MSN_Account Functionality: Create a Xenon user and disassociate the passport in the UODB. Create an xbox.com user with the disassociated passport, and set the offer id explicitly to credit card 1 year gold using a credit card as the payment instrument. This tries to simulate situation where user s passport is associated with MSN account.  Verification: Verify the user tier is gold. N_Migrate_Twice Functionality: Create an xbox.com user, and set the offer id explicitly to credit card one year gold using a credit card as the payment instrument. Migrate the user twice. Verification: Verify the error code XONLINE_E_ACCOUNTS_MIGRATE_NOT_XBOXCOM_USER is returned. N_Invalid_Direct_Debit_Country Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 year gold using a direct debit as the payment instrument. The system country is UK, but the direct debit country is DE. Verification: Verify the error code XONLINE_E_ACCOUNTS_BILLING_INVALID_PAYMENT_INSTRUMENT_TYPE is returned. Test Ideas Unknown country Only dash can call it Incorrect passport token Passport not associated with XboxCom user Passport associated with other type of user First name is null/empty/whitespace Last name null empty or spaces Incorrect billing token Offerid does not match voucher value Offer is prepaid, but voucher is not present Paymentinstrument type is Mone but migrating to gold user  and offer requires credit card Payment instrument is None but offer requires voucher Make the case which expires trial offers Verify voucher consumption and xbox1 token consumption Verify that user is no longer queued  Inject billing timeout error to force queueing XePassportChangePassword P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. The passport member name, session token and encrypted new password are passed in as input. Verification: Verify the XRL call succeeds. P_LoginAfterPasswordChange Functionality: Do PassportLogin first, and then change the PassportChangePassword. Finally try logging in again with the new password. Verification: Verify all XRL calls succeed. XePassportCreate Parameters Input string PassportMemberName string SecretQuestion byte[] EncryptedPassword Return byte[] SessionToken P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. The passport member name, secret question and encrypted password are passed in as input. User puid and machine puid in SG info are set to zero. Verification: Verify the XRL call succeeds. N_AlreadyExists Functionality: Try to create another passport member with an existing member name. Verification: Verify the error code XONLINE_E_PASSPORT_NAME_ALREADY_TAKEN is returned. N_SecretAnswerTooShort Functionality: The secret question answer only has one letter. Verification: Verify the error code XONLINE_E_SA_TOO_SHORT is returned. N_CreateHotmailAccount Functionality: Try to create a hotmail account. Verification: Verify the error code XONLINE_E_PASSPORT_INVALID_DOMAIN is returned. P_HttpAuth Verify that it is callable via HttpAuth XePassportGetEncryptedProxyParameters Parameters Input Output string LoginTokenRequest uint PublicKeyPublicExponent string PublicKeyModulus byte[] PublicKeyDigest P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. No input is needed for this request. Verification: Verify the XRL call succeeds. XePassportGetMemberName Parameters Input ulong UserPuid Output string UserPmn string ParentPmn P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. User puid is passed in as input. Verification: Verify the XRL call succeeds and the returned passport member name is correct. P_PreExistingUserAccount Functionality: Use a known passport member  xboxtestaccount@hotmail-int.com  to verify XRLXePassportGetMemberName. Verification: Verify the XRL call succeeds and the returned passport member name is correct. P_GetParentMemberName Functionality: Create a parentally controlled account by modifying UODB.  Verification: Verify the returned user passport member name and parent member name are correct. Test Ideas XboxCom account xbox1 account XePassportGetSecretQuestions Parameters Input ushort CountryId ushort LanguageId Output ushort SecretQuestionCount XRLPassportSecretQuestion[] SecretQuestions string SecretQuestion P_Mainline Functionality: Return all secret questions for country-US and language-English. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_International_France Functionality: Return all secret questions for country-FR and language-French. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_International_Germany Functionality: Return all secret questions for country-DE and language-German. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_International_Sweden Functionality: Return all secret questions for country-Sweden and language-Swedish. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_International Functionality: Same as P_International_France.  Verification: N_InvalidCountryLanguage Functionality: Return all secret questions for invalid country-256 and language-16.  Verification: Verify the error code E_INVALIDARG is returned. Test ideas Verify substitution logic ie try fr-CA and get questions for fr-FR Invalid country / valid language Valid country / invalid languageXePassportGetUserData XePassportGetUserData Parameters Input byte[] sessionToken Output string FirstName string LastName Datetime Birthdate AddressInfoData AddressInfo PhoneInfoData PhoneInfo byte countryId P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Passport session token is passed in as input. Verification: Verify the XRL call succeeds. P_PreCreated_IntEnvironment Functionality: Use a known passport member  xbltest@hotmail-int.com  to verify the XRL. Verification: Verify the returned FirstName and LastName are correct. P_Country_UK Verifies that correct countryId is returned for UK. P_Country_TW Taiwan does not have a geoid so code needs to look into UODB to identify users s country. Verifies that this code works. Test Ideas Profile in UPS does not have country set and passport is linked to user   expect to return countryId from UODB Profile in UPS does not have country set and this passport is not linked to user   expect to fail Profile in UPS has countryId set and this passport is not linked to user   bug ??? Incorrect session token (64K bytes, 0 bytes, 1 byte) Incorrect values in profile (incorrect phone format, date of birth, etc.) ??? XePassportLogin Parameters Input string PassportMemberName byte[] EncryptedSessionKey byte[] EncryptedPassword byte[] EncryptedTokenRequest Output byte[] SessionToken P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Passport member name, encrypted session token, encrypted password and encrypted token request are passed in as input. Verification: Verify the XRL call succeeds. N_Invalid_User Functionality: Verify a user does not have a passport.  Verification: Verify the error code XONLINE_E_PASSPORT_WRONG_NAME_OR_PASSWORD is returned. N_Invalid_Password Functionality: Verify an invalid passport password.  Verification: Verify the error code XONLINE_E_PASSPORT_WRONG_NAME_OR_PASSWORD is returned. Test Ideas  Incorrect values for parameters (e.g. too long keys, too short keys, null name, empty name). XeRecoverAccount Parameters Input ulong MachinePuid ulong SignedPuid Output ulong UserPuid ulong OfflineXuid byte[] Key string Gamertag string Domain string Realm P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Signed puid is passed in as input. Verification: Verify the XRL call succeeds and returned user puid and gamertag are correct. P_NewKey Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Signed puid is passed in as input. Verification: Verify the XRL call succeeds and the Xenon user key has changed after the call. P_NoNewXboxKey Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Signed puid is passed in as input. Verification: Verify the XRL call succeeds and the Xbox1 user key keeps the same after the call. P_VerifyAccountXuid Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Signed puid is passed in as input. Verification: Verify the XRL call succeeds and returned user puid, gamertag and offline xuid are correct. N_MachinePuidIsNotValid Functionality: Check on invalid machine puid. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidPassportSessionToken Functionality: Check on invalid passport session token. Verification: Verify the error code XONLINE_E_ACCOUNTS_INVALID_USERS is returned. N_RecoverXboxComAccount_Bug47657 Functionality: Recover an xbox.com account. Verification: Verify the error code XONLINE_E_ACCOUNTS_NOT_XENON_USER is returned. N_RecoverXbox1Account_bBug47657 Functionality: Recover an xbox1 account. Verification: Verify the error code XONLINE_E_ACCOUNTS_NOT_XENON_USER is returned. Test Ideas Recover to blocked machine Incorrect passport blob Passport without a user associated with it XeRemovePaymentInstrument Parameters Input ulong UserPuid ulong MachinePuid string PaymentInstrumentId Output P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. User puid and payment instrument id are passed in as input. Verification: Create a Xenon user with credit card as a payment instrument. Verify the XRL call succeeds and zero payment instruments is returned. P_RemoveMultiple Functionality: Create a Xenon user with two credit card payment instruments. Then remove payment instrument one at a time. Verification: Verify the XRL call succeeds and the correct number of payment instruments is returned. P_RemoveDirectDebit Functionality: Create a Xenon user with one direct debit payment instrument.  Verification: Verify the XRL call succeeds and zero payment instruments is returned. N_RemoveTwice Functionality: Create a Xenon user with one credit card payment instrument. Then try removing the payment instrument twice. Verification: Verify the error code XONLINE_E_BILLING_INVALID_PAYMENT_METHOD_ID is returned. N_RemoveNonExistingPI Functionality: Create a Xenon user with one credit card payment instrument. Then try removing the payment instrument with an invalid payment instrument id. Verification: Verify the error code XONLINE_E_BILLING_NOPERMISSION is returned. N_RemoveAnotherUsersPI Functionality: Create two Xenon users and only the first one has a credit card payment instrument. Then try removing the payment instrument from the second user. Verification: Verify the error code XONLINE_E_BILLING_NOPERMISSION is returned. N_InvalidUserPuid Functionality: Create a Xenon user with one credit card payment instrument. Then try removing the payment instrument with an invalid user puid. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidUserAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachineAuthData Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_NonDashTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeReserveGamertag P_Mainline Functionality: Reserve the gamertag  . Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_AlreadyTaken Functionality: Reserve a gamertag which is already used by another user.  Verification: Verify the XRL call succeeds and the HR code XONLINE_S_ACCOUNTS_NAME_TAKEN is returned. P_ReserveTwiceFromSameMachine Functionality: Reserve the same gamertag twice from the same machine.  Verification: Verify the XRL call succeeds and HR code XONLINE_S_ACCOUNTS_NAME_TAKEN is NOT returned. P_ReserveFromDifferentMachine Functionality: Reserve the same gamertag twice from different machine.  Verification: Verify the XRL call succeeds and the HR code XONLINE_S_ACCOUNTS_NAME_TAKEN is returned. P_ReserveFromDifferentMachineAfterExpiration Functionality: Reserve a gamertag and make the reservation expire by changing UODB. Then try to reserve the same gamertag from a different machine.  Verification: Verify the XRL call succeeds and the HR code XONLINE_S_ACCOUNTS_NAME_TAKEN is NOT returned. P_ReserveNameAfterCreateOnSameMachine Functionality: Reserve a gamertag. Create a Xenon user using this gamertag on the same machine. Then try to reserve the same gamertag again on the machine.  Verification: Verify the XRL call succeeds and the HR code XONLINE_S_ACCOUNTS_NAME_TAKEN is returned. P_ReserveFromSameMachine Functionality: Same as P_ReserveTwiceFromSameMachine. Verification: P_ReserveMultipleGoodNames Functionality: Reserve 10 gamertags and create 10 Xenon users using these 10 gamertags.  Verification: Verify the XRL call succeeds. P_ReserveMultipleBadNames Functionality: Reserve one bad gamertag three times.  Verification: Verify the XRL call succeeds and the code XONLINE_S_ACCOUNTS_NAME_TAKEN is always returned. P_VerifyMaxSuggested Functionality: Reserve a gamertag which is already used by another user and set MaxSuggestedNames to 20.  Verification: Verify the XRL call succeeds and the NameCount returned is correct. N_BlankName Functionality: Try to reserve an empty string gamertag.  Verification: Verify the error code E_INVALIDARG is returned. P_VerifyAltNamesAreNotTaken Functionality: Reserve a gamertag which is already used by another user and set MaxSuggestedNames to 20. Create users using each the suggested names. Verification: Verify the XRL call succeeds and all suggested names can be used to create Xenon users. XeSetAccountInfo P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRLXeSetAccountInfo request succeeds, and first name and last name are set correctly. P_ValidateFields Functionality: Verify the fields returned from XRLXeSetAccountInfo. Verification: Verify First Name, Last Name, Birth Date, Email, Address Info, Phone Info, Language Id, Msf_Opt_In and Partner_Opt_In are correct. N_InvalidUSAddress Functionality: Verify the postal code format for US. Verification: Verify the error code XONLINE_E_BILLING_BADZIP is returned. N_SetXbox1UserInfo Functionality: Create an Xbox1 user and do SetAccountInfo. Should be a positive test case?? Verification: Verify the XRL call succeeds. N_InvalidUserPuid Functionality: Check on an invalid user puid. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidUserAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachineAuthData Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeTroubleshootAccount P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user and then call TroubleshootAccount. Verification: Verify the XRL request succeeds. P_NewTOS Functionality: Create a Xenon user and set dt_accepted_tos to 1/1/1990 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and NewTOS is 1 in the response. P_NameChangeRequired Functionality: Create a Xenon user and set ti_name_change_required to 1 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and NameChangeRequired is 1 in the response. P_Downgraded Functionality: Create a Xenon user and set f_downgraded to 1 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and Downgraded is 1 in the response. P_TotalDaysSuspended_XenonNoXbox1Logon Functionality: Create a Xenon user and set i_suspension_length to 90 and f_allow_xbox1_logon to 0 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and TotalDaysSuspended is 90 in the response. P_TotalDaysSuspended_Xbox1LogonAllowed Functionality: Create a Xenon user and set i_suspension_length to 90 and f_allow_xbox1_logon to 1 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and TotalDaysSuspended is 90 in the response. P_VoiceBannedUntil Functionality: Create a Xenon user and set dt_voice_resume_date to 2 months from now in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and VoiceBannedUntil is 2 months from now in the response. P_BillingHR Functionality: Create a Xenon user and set i_billing_account_status to 1 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and BillingHR is 1 in the response. P_BillingHR_Error_Silver Functionality: Create a Xenon silver user and set i_billing_account_status to XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and BillingHR is 0 in the response. P_BillingHR_Error_Gold Functionality: Create a Xenon gold user and set i_billing_account_status to XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and BillingHR is 0 in the response. P_ReinstateToGold_TwoSilver Functionality: Create a Xenon silver user. Purchase a gold subscription offer. Downgrade the gold subscription to silver in UODB. Set i_billing_account_status to XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT in UODB. Then call TroubleshootAccount. Verification: Verify the XRL request succeeds and the gold subscription is reinstated. P_ReinstateToGold Functionality: Create a Xenon gold user. Downgrade the gold subscription to silver in UODB. Set i_billing_account_status to XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT in UODB. Then call TroubleshootAccount. Verification: Verify the XRL request succeeds and the gold subscription is reinstated. P_TroubleShoot_Disabled_Account Functionality: Create a Xenon silver user. Make the account suspended in UODB. Then call TroubleshootAccount. Verification: Verify the XRL request succeeds. N_Violations Functionality: Create a Xenon gold user using a credit card. Create violations on SCG side by using SPK site, billing emulator, or debug only API. Set f_downgraded to 1 in UODB. Then call TroubleshootAccount. Should be a positive test case?? Verification: Verify the XRL request succeeds, and downgraded flag is cleared and billing account status is set to require management. N_InvalidUser Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachinePuid Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeUpdateParentalControlsTests P_Mainline Functionality: Create a Xenon user. Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRL call succeeds. XeUpdatePaymentInstrument P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user with credit card as payment instrument. Verification: Verify the XRL call succeeds. P_UpdateCCInfo Functionality: Create a Xenon user with credit card as payment instrument. Then try to update the payment instrument. Verification: Verify the XRL call succeeds, and credit card number keeps the same, but account holder name and expiration date have changed. For credit card payment instrument, only account holder name and expiration date can be changed. P_UpdateDDInfo Functionality: Create a Xenon user with direct debit as payment instrument. Then try to update the payment instrument. Verification: Verify the XRL call succeeds, and account number and branch code keep the same, but account holder name, bank code and check digits have changed.  P_UpdateAddress Functionality: Create a Xenon user with credit card as payment instrument. Then try to update the payment instrument (mainly the address). Verification: Verify the XRL call succeeds, and the address has been updated correctly.  P_UpdatePhone Functionality: Create a Xenon user with credit card as payment instrument. Then try to update the payment instrument (mainly the phone). Verification: Verify the XRL call succeeds, and the phone has been updated correctly.  N_InvalidUserAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachineAuthData Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleAuthData Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeUpdateXboxComActivity P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user and then call XRLXeUpdateXboxComActivity. Verification: Verify the XRL call succeeds and the last web activity date in UODB is updated. N_InvalidUserAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_NonWebTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeUpsUpdateProfile P_Mainline_Xbox Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user and then update email and phone. Verification: Verify the XRL call succeeds. P_Mainline_Core Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user and then update First Name, Last Name, Birth Date, and Address. Verification: Verify the XRL call succeeds. P_Unicode_Core Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user and then update First Name, Last Name, Birth Date, and Address. The street address contains Unicode. Verification: Verify the XRL call succeeds. XeVerifyBillingInfo P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create an Xbox1 user and then verify gamertag, phone, postal code, card holder and card number. Verification: Verify the XRL call succeeds. P_Invalid_Values Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create an Xbox1 user and then check on invalid phone prefix, invalid phone extension, invalid phone number, invalid postal code, invalid card holder, and invalid card number. Should be a negative test case?? Verification: Verify the error code XONLINE_E_ACCOUNTS_PERMISSION_DENIED is returned for all cases. XeVerifyParentCreditCard P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Use all default values in the request. Verification: Verify the XRL call succeeds. Stress Testing Performance Testing Resource Requirements Test Complete Criteria Release Criteria All areas must pass 100% test cases before final release. Revision History Changes made Author 2/2/2006 First draft Yuanfei Wang (yuanfeiw) zlclIzl4l k`YRA {p{^M }kZLZ: gdOp0 gdTCX ykZyHy# kg\J9  gd>ux vhZhv gdR=! gdW,7 gdW,7 gdW,7 gdR=! gdR=! gdR=! ~rkgc[P gdmEd gdmEd gdmEd gdmEd gd+k> gd+k> gdO"z gdO"z gdnGT gdO"z gdO"z p^M?M gdO"z gdO"z gd+!$ gdO"z gdc`W gdc`W gdc`W gdc`W p^MwMwM gd%`. gd%`. gdeUr gdeUr gd%`. gdeUr gd%`. gdeUr gd>-C gdM%y gdxK| |k]k] yk]y]yKyky] |k]kKk]k IDATx^ {uUWu y&~x<gk Yxky/ \5 c' uCKegQ 6.CwJ W_,~]Q Q-aW)m] 7eNzq mQ5]0 E@:d- `V=72~y u-Z,Ra Rp:K= Hw~NIv k;^Kk- =mnB0 u{s$|Z9c] hV \Rl ([gl% &l>:h ^LKdA ynWvl ~]wYj oFK]a E8?,RvY m.iQ; Lv,E0% hxtUR 9nO+' |,NC( qcwwW Ts+.kp Lown7 Jkak\,| ,k%]O ;|8u3N4 ewo%` )VN+W  # 2  Kq|c0 rq.SC 32FBc -rmVa d|jUL gu1]F LWwfZ 1}r<) o12~E D*)I^w JdZUI% zZ7Ue*I ?/c#*6 FH%=X ;Xu$g =[YW;qY O7}:X :3[YC J%6Za y>aP6 f*IT ah bu in%e $-ftIW letYks ,3hclZ/ %CVG] v[_tY SX7]Y~ Z4Z5jc =w_cRG dpp)Z< hj(VGC bw{qq7 kwvh< d[y:E k"t5C $ aOk E=Io# mVf5c |+g[K 8]0\.l1 o9Z|Z fY+Vuy ROjf, w{'8l %K,N! {\xx3 j%o=Q DOjtU W\nX9 =EHk1 8]h=I gkk+E{e ynaF# 5@eq- lxESZ%o 0k4ci% 0>tkaL3 4N4mk RI%&+ d/Yl' ?q5y!H_ %Z%9y "9<VF2^ B,TXX JRl%{{. d)>;I f$405k Zw{!;b GA#ShIW+Dk ;Y,Bm 4PXCw* RsC7- \kz[4S Gs-ru 2y2>wVT @e756 {::x>b TW8ih JW$sy Y)ouA _OaWGqiF ZmiNE 2="]$ ,h-uG Jj_k(5 s6Z@Z <:X`#_4 EtHvr cy=Lg nUZ(n A|&Ir .G>.dV uS\E"z 5I7LU &/HoN KgH6O+ "CB|sZ-4 NV#!H IMNis< w.mm'/m dz}kxa qax5xqw B]PUQL {I`L] U=J7P zHw[` 5j<?E C+y1W XrA,[ (d$8w i0Fp@2 LS!ti\r w+|mp 6A}'7{ khbfq r*\c% "'#/Oh 7^VjxL m8;*1% T'!Jc *v^0= POAx&S EgjX;`: %[IxR DQxn$ iNvV^ 3k7|q #vV,F FygOZW oT7jS d2&qUF3 2Bmuk FC8Y@ p?Ifq cP8Lr  34>= !$v4^k =-'TA$< `g5W.hD *+ML= Y>OQs U'/3. t47]Drd po"8~ '*6tE 9A1b(W mM%%5 f=W"HC Ap&<> k/<31 sGa`E QJ.f$ yrlP< 50:pai X~<|k 2;+y\q |y8E3X UIO|M a'6yb Yw/D; 7gr8!> ,;E>yBN 4cG}j UL,q.& 3`|fm /fq4" aJrG.^ b;\q&, $16#G 9M"r2V A5aX|E8 ^bG8C y{tfw (\!q5 |N<m<+v D~KoKu my7F| pnW\EJ8 gZd/=} 8yNi@4Sl~ <or9pfF .oN'|.>  K/|s6 8:{RuX !/ML= ^`)nlt dM.0# q2Yv8 hnhI> $DLMQ9;W &@,D# Ih*O4 n$=Nc _vs-/ YGjzZ VOS!Q N,Xd< KynzE?( [ZK>% cF[.m vik3\r ,x*Zc DxhG# ffm!M s_}xm P aT:> kFKsq wg$_N"S twbZ/Th *c8Wk jIWICg qo*Xi q.GU> 5#X(*0/7# dL6B^ bXmh/]j3 l)Od2 ?"33n (ja(7 |au9u :{i`>j1 &e=5K; +9[5i& p,xlw :<:ah W2;Xk- R_t_u.a! TaW}<3 FA>e8 l\i,l {*2vh _kG]j fB~^p wk M ] {>&>8s HE_hyq ByN|M @NqoD a?kCb 1hDxmaXfU CqOEUe XjuF> 'GlQKVh o),wP oF`&`: RAvql\ Jq9~s} lQw.xj AQSMdX uDj3!V b=@DCZ m7[K2 =?~=m `/p-S qP$%U W)s.0L $c{(U s?<Hr) {A{"(P ?`FjB w"CI]mSv  U#./Lb 3>U>N R+6{R s"kP\M \;;W9 WSxCd M{cfP oyqFG x0/Q? /,fyV BR;\[ Mo5i&uJ ?]MGl> =y"s  _*+n& X'_yo7D\ D4GZl E{nLH _(CWC 21@=}n= oqX]]l5 g"Ar~ <Ho?y'x ^?rhe M(2<? $vWEe?l <:dz- =#9,! `H( RKm_O W{80` V4D&1 1thC{ i<upo n+j7hF (61;}7 :N#iIV WmW2: |c+D` HTKYt W[gOe 3S#d@ ,\3j% Hza^W ClkLm bH;TwY t.!WN 6.}V4Q ;)6%& G}RW  z/.w/ 4Z\oF NAP_5 {_hQ(S aFxKBX {ocH8 OtA+^0   &(A) 5^kIM FO-$dZ hzG=l 1*MTh tAykR- <9n_hTc h|l|~ 7&nvH u+<!R Dp-7: JT>%FO ZYkf@# =+UJoe !h]~E VVG-1 R[3R; aY7/O -,j(n dLR*:+4 ]GYKf aO7FQ 0#[d]NfI#[ Y)TTm NmJ"7 q'bm. xqM`H 0Y2ofC@d wDhA> b TdCa =,--Q 3gVV/ a]kVMX {d=0q t2")* f*7tpZ lx'3Kr4 !&auD  Emw,  rAJq |EI\V 2BddIm moo`m 8tlHL jOBX5 SV1_+U <")YEA 88t-d; O[lwD m)[yx 7M;\!+g `*s;~. 5M)XS =~xyy 9\=W{ 8a j" UJt[' s8Jn7 @Z`3_Q WTn%p o#@Ri U[mvK a?F,Y) V,VT3Da= ><0J: ?"]a8 Q6JQ?. F$j#G s'?\! >DV.a2#= .RL=V9 9W/Mw =p#=`z vqcCn T$>(: J-"s: q!tmo U`DOF (Rlr.M E|#E$ H2TC_%oP# E{qd.FW 2EJCQ \Ofhy -_,(N :mBJ"sp *TZ7}< Gg9,mh :MF\? Q,zsZ nuuy)K mprX,: d-]Y^^[K %Dxwd&% C[-QO VI@T0S Qu)CT3 (^L{= ^Is_ZZ $d\FJ ^@bcl _1(pobi< `~yy9 tA9uL ^f"y" O%Oxe c^w+Y )RlitR 8W(w}~=r .&ip? D{gYR uF;xp? Y^5&> 7xb l +>:st x)/=/ dy$BQ )Q%N*M\ 3>]dJ m,:R6 o&?%us r{Z]nq(N )*4*^6 mr(0sW |+Z t 5l]AW'VZ *a%vl <s0vk |Z.`R FdJ> } ^p#Wv Sqw=: fSHq* 0^YY9{ foA"s $@R$  ;(?&: 3pURS m0]X= I-jM!! sL~rx GvtTHF elz4:#T I_REt H8luv yP4@z * p%J [(9%v 85/+V 1D8<ie8 +.Ggp9n +@~1[ *#tS& L5^($\2G] Zsp/F;F t</\` Csp;m #*vcQ |xuwo 9`]h# CU+$-< \Adk]~ GW|Vk {pQzw| w/7w/ ".E]f rbF1q 6v;{7q8_ 0V/a= 20Mlf W;a):N (&r\- Z4oq8\ M"m+r ^,|>~F UiKKpN "+xgF 3DQ`% EWl;Q IDAT8 !^Gq } ^x m} Mhw*1 {vZt|$ t,/j%  zsR;m lw8<h pT]Yv+ vG6<. XJpZ< {m`Zc !;E\. r+>(` [W,^% OF<})& P]@t<E RE,o2a 4p4#; !%g}rB Ql]\X hx4<z 57{2w EH`O!2 o#)n4 *ruU. ,iw\  tvpTls ^g)gOn <x@>m P`$tcA Fp|iP X_9 . Q^MR2 W14+|$E E/=4y Nor%y U("6el ,s{!b ;8cQv 8up6<B qg=p9 %E-7b< ng1@7 0,>9N :*-0EYz {1^bef ':AP2 w=B]/ :dd"- P*Z{7 js%wR ;t<ND 4_j}r KT9,T XOM)D 0l+q$\j ,Qokww QaQ`iJ P`K'H \`Fcy XpH{b] Ahm4!& w`YN;M 6iV^> /nk'o mC><9 b6&#T x5V.T @)!hzZ TpMG+ N#F"& nAW u Rq88' ;(|1E1`P>-\ >l;8] 4qL(- bU@Q@T E_he| %_nC_ *Hz:;B ULri`Y Kc3>Xv: _G~~x 3|zHB <fB}83 p$o<{ *.@OS@ 8z[5; +_)y& Fk&i)j @m,]q{,Gx s~]i@ QWE{w a1Q$T 66D!z( MvG3\N Vp.A6 ceNim QR(2U Eoba/ up3.v95 dZqu[ =|]5k6 c5HS~ ]L>;]H f]~UX [;(-9z ]n`Y:YOX <f)}S c\IGv q-5wF~] 4 Pij 'qqXE> Y!!6c j^<ia 6i)'T yf10n mT?Ea qycdc Hu\QJ b;1AFg,+ SXdPm& 8Op,v l&.zx .%N{Q bmP9j ]suux v|2>~ hp./= tJEi:OcO S<eNJ 0yu]`*aP& y%=d6 (Ok]7V Mhc1V IbNC= b(CH% >Bf:F -Nd'N M}WtZ WK!ie* ^KgxL phw\ `^Z =qSkhi e>~B} STF%Wx3 rGe?9 Qf!V= yCNPK C9VAz d;/k& KcaXO vX6A*. 42=MP6; 4d4;MeJ ]%uEUut JY&subY ja&S~ ej]ODy ls7+x hK+!-9EI G)&gb<JM< {UbBR, b/sjrp(] JH29V A%$Ut N?^6^ Ar`P* `vDVH @,CfH 2DZ&H9 r<JdB 5:X%* Wt"2_m #!|CU lWQRL !3AxV. Dq^&R Ebma! E&O7q5 U,z*9 Gq"--2 @TbZj >=QP& NUZSz 4<9|T LjxzE )?)fB [*WK9c\ DT*yk v?&0V$ Je=RO  9/y=P<= QY_6j X6}Qn FZFB^ eD^)B atY`! y3X6j ~EBdx 2upt, eB+xPY. !'h2$ Qqa'+ ZtY\%: /X%;%D P>FiF%WT ;aiT*iZ EeJmy* 97gRB ,{K(S =O~b\e|W aPVoY hWi6N? gH-!7) BJ^O4 a32+k hQM&? IB$4E> g*MQ9b ^%5'4 9nJ3E ^{aiE2 DvZm{ _hH&O #uoNe Ly(ft #+h,~ &t".} LtX`t L*@Fe ]$yH.{ t7+x+8t <R&(t ;Ge4v {E%0k qdt%< >sVE9 >6h": BB-yT 5PwW>r BXF{!x bVvXeY bA[w.jM v~q1p6 igc>f 0sww{ ^9Y!{T>" +xYe< =houI0 8)Ex" wWbyk X&H*< >%J.T 6A" ? u=.v3 ;"+d3 6muXw KtRD(yK.Q 0+`V# :i)J]  6hlQ 8?'x#iK pxe>&xfzl tzcwft &sn'|
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\useraccount\test\Xenon Xuacs Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xenon Xuacs Title _PID_HLINKS Document Description Type of Document Status Date Created Xenon Xuacs API Test Plan Technical Spec rough draft 2006-02-02T00:00:00ZXenon Xuacs Yuanfei Wang Normal.dot Yuanfei Wang Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags country-region urn:schemas-microsoft-com:office:smarttags place ;S~m*Xenon Xuacs API Test Plan Created 2/2/2006 Last updated 2/2/2006 Program Management Jerry Hook Development Gary Thompson, Dan Walther Yuanfei Wang Operations Spec status Draft  Table of Contents  TOC \o "1-3" \h \z \u   HYPERLINK \l "_Toc127180360"  Table of Contents  PAGEREF _Toc127180360 \h   HYPERLINK \l "_Toc127180361"  Summary  PAGEREF _Toc127180361 \h   HYPERLINK \l "_Toc127180362"  Related Documents  PAGEREF _Toc127180362 \h   HYPERLINK \l "_Toc127180363"  Test Goals  PAGEREF _Toc127180363 \h   HYPERLINK \l "_Toc127180364"  Test Non-Goals  PAGEREF _Toc127180364 \h   HYPERLINK \l "_Toc127180365"  Test Setup  PAGEREF _Toc127180365 \h   HYPERLINK \l "_Toc127180366"  Functional Testing  PAGEREF _Toc127180366 \h   HYPERLINK \l "_Toc127180367"  XeAcknowledgeDowngrade  PAGEREF _Toc127180367 \h   HYPERLINK \l "_Toc127180368"  XeAddPaymentInstrument  PAGEREF _Toc127180368 \h   HYPERLINK \l "_Toc127180369"  XeChangeSubscriptionPaymentInstrument  PAGEREF _Toc127180369 \h   HYPERLINK \l "_Toc127180370"  XeCreateLiveAccount  PAGEREF _Toc127180370 \h   HYPERLINK \l "_Toc127180371"  XeCreateXboxComAccount  PAGEREF _Toc127180371 \h   HYPERLINK \l "_Toc127180372"  XeGetAccountInfo  PAGEREF _Toc127180372 \h   HYPERLINK \l "_Toc127180373"  XeGetLinkedGamertag  PAGEREF _Toc127180373 \h   HYPERLINK \l "_Toc127180374"  XeGetPaymentInstruments  PAGEREF _Toc127180374 \h   HYPERLINK \l "_Toc127180375"  XeGetPointsBalance  PAGEREF _Toc127180375 \h   HYPERLINK \l "_Toc127180376"  XeGetUserInfo  PAGEREF _Toc127180376 \h   HYPERLINK \l "_Toc127180377"  XeGetUserSubscriptionDetails  PAGEREF _Toc127180377 \h   HYPERLINK \l "_Toc127180378"  XeGetUserType  PAGEREF _Toc127180378 \h   HYPERLINK \l "_Toc127180379"  XeGetUserWebInfo  PAGEREF _Toc127180379 \h   HYPERLINK \l "_Toc127180380"  XeLinkXbox1Account  PAGEREF _Toc127180380 \h   HYPERLINK \l "_Toc127180381"  XeMigrateXbox1User  PAGEREF _Toc127180381 \h   HYPERLINK \l "_Toc127180382"  XeMigrateXboxComUser  PAGEREF _Toc127180382 \h   HYPERLINK \l "_Toc127180383"  XePassportChangePassword  PAGEREF _Toc127180383 \h   HYPERLINK \l "_Toc127180384"  XePassportCreate  PAGEREF _Toc127180384 \h   HYPERLINK \l "_Toc127180385"  XePassportGetEncryptedProxyParameters  PAGEREF _Toc127180385 \h   HYPERLINK \l "_Toc127180386"  XePassportGetMemberName  PAGEREF _Toc127180386 \h   HYPERLINK \l "_Toc127180387"  XePassportGetSecretQuestions  PAGEREF _Toc127180387 \h   HYPERLINK \l "_Toc127180388"  XePassportGetUserData  PAGEREF _Toc127180388 \h   HYPERLINK \l "_Toc127180389"  XePassportLogin  PAGEREF _Toc127180389 \h   HYPERLINK \l "_Toc127180390"  XeRecoverAccount  PAGEREF _Toc127180390 \h   HYPERLINK \l "_Toc127180391"  XeRemovePaymentInstrument  PAGEREF _Toc127180391 \h   HYPERLINK \l "_Toc127180392"  XeReserveGamertag  PAGEREF _Toc127180392 \h   HYPERLINK \l "_Toc127180393"  XeSetAccountInfo  PAGEREF _Toc127180393 \h   HYPERLINK \l "_Toc127180394"  XeTroubleshootAccount  PAGEREF _Toc127180394 \h   HYPERLINK \l "_Toc127180395"  XeUpdateParentalControlsTests  PAGEREF _Toc127180395 \h   HYPERLINK \l "_Toc127180396"  XeUpdatePaymentInstrument  PAGEREF _Toc127180396 \h   HYPERLINK \l "_Toc127180397"  XeUpdateXboxComActivity  PAGEREF _Toc127180397 \h   HYPERLINK \l "_Toc127180398"  XeUpsUpdateProfile  PAGEREF _Toc127180398 \h   HYPERLINK \l "_Toc127180399"  XeVerifyBillingInfo  PAGEREF _Toc127180399 \h   HYPERLINK \l "_Toc127180400"  XeVerifyParentCreditCard  PAGEREF _Toc127180400 \h   HYPERLINK \l "_Toc127180401"  Stress Testing  PAGEREF _Toc127180401 \h   HYPERLINK \l "_Toc127180402"  Performance Testing  PAGEREF _Toc127180402 \h   HYPERLINK \l "_Toc127180403"  Resource Requirements  PAGEREF _Toc127180403 \h   HYPERLINK \l "_Toc127180404"  Test Complete Criteria  PAGEREF _Toc127180404 \h   HYPERLINK \l "_Toc127180405"  Release Criteria  PAGEREF _Toc127180405 \h   HYPERLINK \l "_Toc127180406"  Revision History  PAGEREF _Toc127180406 \h  Summary This spec will cover the test plan for new APIs required to create Xenon accounts in the Xbox Live service. Related Documents The test plan for Xbox1 Uacs APIs can be found at (\private\doc\server\billing\useraccount\test\ UACS Test Plan.doc). Test Goals Overview: Maintenance of existing functional tests and adding new levels of depth to the test matrix around the areas of minor accounts, queued account and advanced account status.  Test Non-Goals It is not the goals of this testing cycle to test: TBD Test Setup The tests will be run using the ServerTestFramework under STFRunner. They will be part of the XeUacs suite of tests.  Functional Testing XeAcknowledgeDowngrade P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify that XeAcknowledgeDowngrade call succeeds and the downgraded flag is cleared (value is zero). P_FlagAlreadyZero Functionality: The test verifies to see when the downgraded flag is initially set to zero, if there is an exception. Verification: Verify that the XRL call succeeds and the downgraded flag keeps zero. N_NoDowngradedFlag Functionality: The test verifies to see what will happen to a gold subscription when the downgraded flag is not set (value is zero). Verification: Verify that the gold subscription is not downgraded to silver and downgraded flag keeps as zero. N_Violations Functionality (bug 48430): The test verifies to see what will happen to a gold subscription when Xcbk fails to contact SCS for the status of the user s subscription (such as violations) and the downgraded flag is set to 1. Verification: If the user has violations on SCG side, verify that the downgraded flag is cleared and billing account status is set to Account_Require_Management. N_InvalidUserPuid Functionality (bug 48430): The test verifies to see what will happen when the user puid is invalid in the request. Verification: Verify that XONLINE_E_SERVER_ERROR is returned. XeAddPaymentInstrument P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card - Visa) is added. P_TypeIsDirectDebit Functionality: The test is the same as P_Mainline except a direct debit is added as the payment instrument. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a direct debit) is added. P_TypeIsCreditCard Functionality: The test is the same as P_Mainline. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card - Visa) is added. P_CreditCard_Visa Functionality: The test is the same as P_Mainline. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card - Visa) is added. P_CreditCard_MasterCard Functionality: The test is the same as P_Mainline except Master Card is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Master Card) is added. P_CreditCard_Amex Functionality: The test is the same as P_Mainline except Amex is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Amex) is added. P_CreditCard_Discover Functionality: The test is the same as P_Mainline except Discover is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Discover) is added. P_CreditCard_Jcb Functionality: The test is the same as P_Mainline except Jcb (Japan) is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Jcb) is added. P_CreditCard_Diners Functionality: The test is the same as P_Mainline except Diners (Korea) is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Diners) is added. P_CreditCard_Klcc Functionality: The test is the same as P_Mainline except Klcc (Korea) is used as the credit card. Verification: Verify that the XRLXeAddPaymentInstrument call succeeds and exact one payment instrument (a credit card   Klcc) is added. N_CreditCard_Jcb_Country_Mismatch Functionality: User country is US, but Jcb credit card country is Japan. Verification: Verify that the error XONLINE_E_BILLING_COUNTRY_CURRENCY_PI_MISMATCH is returned. N_CreditCard_Diners_Country_Mismatch Functionality: User country is US, but Diners credit card country is Korea. Verification: Verify that the error XONLINE_E_BILLING_COUNTRY_CURRENCY_PI_MISMATCH is returned. N_CreditCard_Klcc_Country_Mismatch Functionality: User country is US, but Klcc credit card country is Korea. Verification: Verify that the error XONLINE_E_BILLING_COUNTRY_CURRENCY_PI_MISMATCH is returned. N_TypeIsNone Functionality: Set the payment instrument type to none (only credit card and direct debit are valid payment instrument types). Verification: Verify that the error XONLINE_E_BILLING_INVALID_PAYMENT_INSTRUMENT_TYPE is returned. N_DirectDebitInNonSupportedCountry Functionality: Direct debit is not supported in France. Verification: Verify that the error XONLINE_E_BILLING_INVALID_PAYMENT_INSTRUMENT_TYPE is returned. N_InvalidMachineAuthData Functionality: Set the incorrect machine puid in SG info. Verification: Verify that the error XONLINE_E_SERVER_ERROR is returned. N_InvalidUserAuthData Functionality: Set the incorrect user puid in SG info. Verification: Verify that the error XONLINE_E_SERVER_ERROR is returned. XeChangeSubscriptionPaymentInstrument P_Mainline Functionality: Add two credit cards to a user account. Then change the payment instrument from one card to the other. Verification: Verify the XRL is correctly sending and receiving data and no exception is thrown. XeCreateLiveAccount P_Mainline Functionality: Create a Xenon silver user with the most basic data. Verification: Verify the XRL is correctly sending and receiving data and no exception is thrown. P_XeUser_Real_Passport Functionality: Create a Xenon silver user with a real passport. It is not relevant any more because all Xenon users are using real passport now. Verification: Verify the XRL is correctly sending and receiving data and no exception is thrown. And the passport is created without error. P_XeUser_Fake_Passport Functionality: It is not relevant any more because all Xenon users are using real passport now. Verification: P_CreateAsGold Functionality: Create a gold prepaid one year user account. Verification: Verify the user tier in UODB is gold. P_All_Offers_CreditCard Functionality: Try four different gold subscriptions, gold signup, gold CC 1 month, gold CC 3 month and gold CC 1 year. All use credit card as the payment instrument. Verification: Verify there is only one subscription and the offer id is right. P_All_Offers_DirectDebit Functionality: Try four different gold subscriptions, gold signup, gold CC 1 month, gold CC 3 month and gold CC 1 year. All use direct debit as the payment instrument. Verification: Verify there is only one subscription and the offer id is right. P_All_Offers_Vouchers Functionality: Try four different gold subscriptions, gold prepaid 1 month, gold prepaid 3 month, gold prepaid 1 year and gold prepaid 13 month. All use token. Verification: Verify there is only one subscription and the offer id is right. P_Gamertag_Already_Exists Functionality: Test on creating a user with a gamertag that is already used. Should be a negative test case?? Verification: Verify the error code XONLINE_E_ACCOUNTS_NAME_TAKEN is returned. P_Verify_Keys_Are_Created Functionality: Verify that the user keys are created for both Xenon and Xbox1. Verification: Verify the key versions are returned. P_Create_Using_Xbo1_Token Functionality: Create a Xenon user using an Xbox1 offer id and an Xbox1 token. Verification: Verify the subscription is gold 1 year and account type is Xenon and user is allowed to logon to Xbox1. P_ChildAccount_Restricted Functionality: When creating a child account (10 years old), the parent account is need. Verification: Verify a child account creation will fail if no parent account presents. P_All_Credit_Card_Types Functionality: Verify all credit cards, US-Visa, US-MasterCard, US-Amex, US-Discover, JP-Jcb, KR-Diners, and KR-Klcc. Verification: Verify the user can be created successfully. P_AllCountries Functionality: Verify all 24 countries. Verification: Verify the user can be created successfully. P_Arb_Spaces_Should_Clash Functionality: Verify that the multiple spaces in gamertag will collapse to one space.  Verification: Verify the error code XONLINE_E_ACCOUNTS_NAME_TAKEN is returned. P_Test_Email_Vetting_Code Functionality: Check on the user email format. Verification: Email like "my.my.my.my-email-@domain.domain.domain.com.com.uk" should be a valid email. P_Verify_OptIns_Are_Set Functionality: Check on the user ms_opt_in and partner_opt_in settings. Verification: Verify the user ms_opt_in and partner_opt_in settings are correct. P_Verify_Created_Date Functionality: Check on the user creation date. Verification: Verify the user creation date is correct. P_Unicode Functionality: Check on the user first name and last name in Unicode. Verification: Verify the user can be created successfully. P_CreateAlreadyExistsInSCS Functionality: Ignored due to bug 47481 (reuse of accounts). Verification: P_Points_Reward Functionality: Ignored due to signup rewards are not being offered. Verification: P_Language_Country_Mismatch Functionality: User country and language is not matched, such as country-US with language-Chinese. Verification: Verify the user can be created successfully. N_UserInfo_Whitesapce Functionality: Verify first name, last name, street address, city, postal code and state cannot just contain whitespaces. Verification: Verify the error code XONLINE_E_INVALID_REQUEST or XONLINE_E_ACCOUNTS_BAD_BILLING_ADDRESS is returned. N_Passport_Already_Linked Functionality: Verify that two users cannot have the same passport puid and passport session token. Verification: Verify the error code XONLINE_E_ACCOUNTS_PASSPORT_ALREADY_LINKED is returned. N_Invalid_Voucher_Code Functionality: Verify that a token has to match with the correct offer id. Verification: Verify the error code XONLINE_E_ACCOUNTS_INVALID_VOUCHER is returned. N_DOB_In_The_Future Functionality: Verify that birth date cannot be a future date. Verification: Verify the error code XONLINE_E_ INVALID_REQUEST is returned. N_Foul_Gamertag Functionality: Verify some invalid gamertags (such as  OhSh1tNo Verification: Verify the error code XONLINE_E_ ACCOUNTS_NAME_TAKEN is returned. N_Bad_Names Functionality: Verify some invalid gamertags. Ignored. Verification: Gamertag must start with a letter. N_Bad_Names Functionality: Verify some invalid gamertags. Ignored. Verification: Gamertag must start with a letter. Are there any other bad names?? N_Reached_Trial_Limit Functionality: Verify that maximum 3 gold trials can be created on a console. Verification: Verify the error code XONLINE_E_ACCOUNTS_REACHED_TRIAL_OFFER_LIMIT is returned. N_InvalidVoucher Functionality: Verify an invalid token. Verification: Verify the error code XONLINE_E_ACCOUNTS_INVALID_VOUCHER is returned. N_NonValidAddress Functionality: Check on postal code format. Verification: Verify the user creation will fail. N_Invalid_Machine_Auth_Data Functionality: Set the incorrect machine puid in SG info. Verification: Verify that the error XONLINE_E_SERVER_ERROR is returned. N_Existing_MSN_Account_Bug_46886_OneActive Functionality: Ignored due to bug 47481 (reuse of accounts). Verification: N_Existing_MSN_Account_Bug_47352_Non_US Functionality: Ignored due to bug 47481 (reuse of accounts). Verification: N_Non_Valid_Payment_Instrument_Types_Bug_47466 Functionality: Ignored due to bug 47481 (reuse of accounts). Verification: XeCreateXboxComAccount P_Mainline Functionality: Create an Xbox.com account. Verification: Verify the XRL is correctly sending and receiving data, no exception is thrown and user puid is not zero. P_Verify_Account_Type Functionality: Create an Xbox.com account and check the account type. Verification: Verify the user account type is Xbox.com account. N_Gamertag_Already_Taken Functionality: Try to reuse a gamertag which is already used to create an Xbox.com account. Verification: Verify the error code XONLINE_E_ACCOUNTS_NAME_TAKEN is returned. N_Passport_Already_Linked Functionality: Try to reuse a passport puid which is already linked to create an Xbox.com account. Verification: Verify the error code XONLINE_E_ACCOUNTS_PASSPORT_ALREADY_LINKED is returned. P_Verify_OptIns_Are_Set Functionality: Verify the settings of ms_opt_in and partner_opt_in. Verification: Verify ms_opt_in and partner_opt_in are set correctly. P_All_Countries Functionality: Verify the XRL is correctly sending and receiving data for all 24 countries. Verification: Verify the XRL succeeds and no exception is thrown. N_Bad_Gamertag Functionality: Verify some invalid gamertags (such as  Hotshit Verification: Verify the error code XONLINE_E_ ACCOUNTS_NAME_TAKEN is returned. N_Bad_Email Functionality: Check on the user email format. Verification: Emails in Unicode are not valid emails and should return error code XONLINE_E_BILLING_INVALID_EMAIL_ADDRESS. P_Unicode Functionality: Check on the user first name and last name in Unicode. Verification: Verify the user can be created successfully. XeGetAccountInfo P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRLXeGetAccountInfo request succeeds, and first name and last name are correct. P_ValidateFields Functionality: Verify the fields returned from XRLXeGetAccountInfo. Verification: Verify First Name, Last Name, Birth Date, Email, Address Info, Phone Info, Language Id, Msf_Opt_In and Partner_Opt_In are correct. P_Xbox1User Functionality: Verify the fields returned from XRLXeGetAccountInfo for an Xbox1 user. Verification: Verify First Name, Last Name, Birth Date, Email, Address Info, Phone Info, Language Id, Msf_Opt_In and Partner_Opt_In are correct. N_InvalidUserPuid Functionality: Check on invalid user puid in the request (not match the user puid in SG Info). Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachinePuid Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidUserAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleId Functionality: Check on invalid title in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeGetLinkedGamertag P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRLXeGetLinkedGamertag request succeeds using Signed Passport Puid as an input, and Gamertag and user puid are correct. P_RealPassportAccount Functionality: Same as P_Mainline because now all passports are real. Verification: Verify the XRLXeGetLinkedGamertag request succeeds, and Gamertag and user puid are correct. P_Xbox1_NonLinked Functionality: Verify Xbox1 user who doesn t have a passport linked. Should be negative test case? Verification: Verify the error code XONLINE_E_ACCOUNTS_PASSPORT_NOT_LINKED is returned. P_Xbox1_Linked Functionality: Verify Xbox1 user who has a passport linked.  Verification: Verify the XRLXeGetLinkedGamertag request succeeds, and Gamertag and user puid are correct. P_After_ChangeGamertag Functionality: Verify Gamertag and user puid after changing the gamertag through XRLChangeGamerTag request.  Verification: Verify the XRLXeGetLinkedGamertag request succeeds, and correct Gamertag and user puid are returned. N_Invalid_Session_Token Functionality: Check on invalid Sighed Passport Puid.  Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeGetPaymentInstruments P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify exact one payment instrument returned. P_ReturnTwoPaymentInstruments Functionality: Add two Visa credit cards as the payment instruments. Verification: Verify two payment instruments returned and the payment instrument IDs are different. P_ReturnDebitAndCredit Functionality: Add a Visa credit card and a direct debit as two payment instruments. Verification: Verify two payment instruments returned and one is credit card, the other is direct debit. P_ReturnMaxPaymentInstruments Functionality: Add 5 Visa credit cards as the payment instruments. Verification: Verify 5 payment instruments returned (using MaxResults = 5 and it is the same as the total number of payment instruments) and no two payment instruments are the same. P_ReturnFewerThanTotal Functionality: Add 10 Visa credit cards as the payment instruments. Verification: Verify 5 payment instruments returned (using MaxResults = 5) and no two payment instruments are the same. P_NoPaymentInstruments Functionality: No payment instrument is added to a user. Verification: Verify the request succeeds and 0 payment instrument is returned. P_RemoveOnePaymentInstrument Functionality: Create a Xenon user with two payment instruments, and then remove one by using XRLXeRemovePaymentInstrument request. Verification: Verify exact one payment instrument is returned and the payment instrument id is correct. P_GetPiForXbox1Account Functionality: Create an Xbox1 user with one payment instrument, and then add another payment instrument by using XRLXeAddPaymentInstrument request. Verification: Verify exact 2 payment instruments are returned. N_ForceBillingError Functionality: Send the request with ScsFaultInjection set as  GetPaymentInstruments:8004EA6E:Zip Invalid . How many XRL have this Fault Injection? Verification: Verify the error code XONLINE_E_BILLING_STATE_ZIP_INVALID is returned. N_InvalidMachineAuthData Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidUserIdAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeGetPointsBalance P_Mainline Functionality: Create a silver Xenon user and verify the points balance. Verification: Verify the XRL is correctly sending and receiving data and no exception is thrown. P_AddPoints_CheckBalance Functionality: Create a silver Xenon user, and add 500 points using credit card, and then verify the points balance. Verification: Verify no exception is thrown and the points balance is correct. P_Increasing_Balance Functionality: Create a silver Xenon user, and add 500 points for 15 times, and then verify the points balance. Verification: Verify no exception is thrown and the points balance is correct after each increase. P_Points_Limits_Purchased_Daily Functionality: Create a silver Xenon user, and add 500 points each time until over 12000 points, and then verify the points balance. Verification: Verify the error code XONLINE_E_DMP_E_MAX_BALANCE_EXCEEDED is returned when maximum points a day limit is reached (12000 points). XeGetUserInfo P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRLXeGetUserInfo request succeeds. P_Xbox1User Functionality: Create an Xbox1 user, and then do XRLXeGetUserInfo. Verification: Verify the XRLXeGetUserInfo request succeeds, and the returned FirstName, LastName, AddressInfo, Email, LanguageId, CountryId, MsfOptIn, PartnerOptIn and age are all correct. P_XenonUser Functionality: Create a Xenon user, and then do XRLXeGetUserInfo. Verification: Verify the XRLXeGetUserInfo request succeeds, and the returned FirstName, LastName, AddressInfo, Email, LanguageId, CountryId, MsfOptIn, PartnerOptIn and age are all correct. N_InvalidUserPuid Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachinePuid Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeGetUserSubscriptionDetails P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRLXeGetUserSubscriptionDetails request succeeds. User puid, offer id and service instance id are passed in as input. P_NoPaymentInstrument Functionality: Create a Xenon user with gold prepaid 1 year subscription. Verification: Verify the XRLXeGetUserSubscriptionDetails request succeeds. User puid, offer id and service instance id are passed in as input. XeGetUserType P_Mainline Functionality: Create an Xbox1 user and a Xenon user. Verify the XRL is correctly sending and receiving data and no exception is thrown. Gamertag is passed in as input. Verification: Verify the correct user types are retuned for Xbox1 user and Xenon user. P_Xbox1User Functionality: This test is already covered in P_Mainline test case. Verification: P_Xbox1LinkedUser Functionality: Create an Xbox1 user with a linked passport. Verification: Verify the user type retuned is Xbox1 Linked User. P_XenonUser Functionality: This test is already covered in P_Mainline test case. Verification: P_XBoxComUser Functionality: Create an Xbox.com user. Verification: Verify the user type retuned is xbox.com user. N_InvalidGamertag Functionality: Check on an invalid gamertag. Verification: Verify the error code E_INVALIDARG is returned. N_InvalidMachinePuid Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeGetUserWebInfo P_Mainline Functionality: Create a silver user account and gold account. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the correct user tiers are retuned for silver account and gold account. P_PrivilegesAsGold Functionality: Create a one year prepaid gold account.  Verification: Verify the user has the privilege of XONLINE_XPRIVILEGE_MULTIPLAYER_ENABLED_BY_TIER. P_PrivilegesAsSilver Functionality: Create a silver user account.  Verification: Verify the user doesn t have the privilege of XONLINE_XPRIVILEGE_MULTIPLAYER_ENABLED_BY_TIER. P_VerifyLastWebActivity Functionality: Create a silver user account and set the Last Web Activity Date to now.  Verification: Verify the user setting of Last Web Activity Date is set correctly. P_LastWebActivityIsNull Functionality: Create a silver user account and leave the Last Web Activity Date as Null.  Verification: Verify the user setting of Last Web Activity is defaulted to 1900/1/1. N_UserPuidDoesNotExist Functionality: Check on a not exist user puid. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidUserPuidAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeLinkXbox1Account P_Mainline Functionality: Create an Xbox1 user, then call the XRL to link to a passport. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the returned user passport puid and owner passport puid are correct. XeMigrateXbox1User P_Mainline Functionality: Create an Xbox1 user, then call the XRLLinkWebAccount to link to a passport. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the migration status in t_xenon_migration_queue table is 2. P_VerifyKeysChanged Functionality: Create an Xbox1 user, and then call the XRLLinkWebAccount to link to a passport.  Verification: Verify the migration status in t_xenon_migration_queue table is 2, and Xenon user keys have changed after the XRL and Xbox1 user keys keep the same. P_VerifyRemainingTimeMigrated Functionality: Create an Xbox1 user, and then call the XRLLinkWebAccount to link to a passport. Set the end date on the user s current subscription. Verification: Verify the migration status in t_xenon_migration_queue table is 2, and the user has exact one subscription. P_MigrateMinorAccount_Restricted Functionality: Create an Xbox1 user, and then call the XRLXeLinkXbox1Account to link to a passport. Change the birth date in UODB to 10 years old. Verification: Verify the migration status in t_xenon_migration_queue table is 2, and allow Xbox1 logon is set to false and parental control group is restricted. P_MigrateMinorAccount_Medium Functionality: Create an Xbox1 user who is 16 years old, then call the XRLXeLinkXbox1Account to link to a passport.  Verification: Verify the migration status in t_xenon_migration_queue table is 2, and allow Xbox1 logon is set to false and parental control group is medium. P_MigrateMinorAccount_Subscriptions Functionality: Create an Xbox1 user who is 16 years old, then call the XRLXeLinkXbox1Account to link to a passport.  Verification: Verify the current subscription is valid. P_MigrateMinorAccount_Subscriptions_Reconcile Functionality: Relate to bugs 48058 and 48062. Create an Xbox1 user who is 16 years old, then call the XRLXeLinkXbox1Account to link to a passport. After calling XRLXeMigrateXbox1User, manually change UODB and make the subscription in a bad state as in bug 48058. Verification: Verify the current subscription is valid after account reconcile. P_MigrateAccount_Open Functionality: Create an Xbox1 user who is 20 years old, then call the XRLLinkWebAccount to link to a passport.  Verification: Verify the migration status in t_xenon_migration_queue table is 2, and allow Xbox1 logon is set to true and parental control group is open. P_PaymentInstrument_Verification_Bug_46259 Functionality: Create an Xbox1 user, and then call the XRLLinkWebAccount to link to a passport. Manually change UODB to set vc_billing_payinfo_id in t_users table to  bogus Verification: Verify the migration status in t_xenon_migration_queue table is 2. N_AlreadyMigrated Functionality: Create an Xbox1 user, and then call the XRLLinkWebAccount to link to a passport. Call XRLXeMigrateXbox1User twice. Verification: Verify the error code XONLINE_E_ACCOUNTS_MIGRATE_NOT_XBOX1_USER is returned. N_NotLinked Functionality: Create an Xbox1 user, but don t call the XRLLinkWebAccount to link to a passport.  Verification: Verify the error code XONLINE_E_ACCOUNTS_PASSPORT_NOT_LINKED is returned. N_NotLinked Functionality: Create an Xbox1 user, but don t call the XRLLinkWebAccount to link to a passport.  Verification: Verify the error code XONLINE_E_ACCOUNTS_PASSPORT_NOT_LINKED is returned. N_InvalidMachineAuthData Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleAuthData Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. P_SCG_Status_Different Functionality: Create an Xbox1 user, and then call the XRLLinkWebAccount to link to a passport. Billing emulator is used to make GetSubscriptions return suspended. Verification: Verify the error code XONLINE_E_ACCOUNTS_PERMISSION_DENIED is returned and the user account now needs management. XeMigrateXboxComUser P_Mainline Functionality: Create an xbox.com user, and then call the XRLXeMigrateXboxComUser. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_MigrateToSilver Functionality: Create an xbox.com user, and set the offer id explicitly to silver free trial.  Verification: Verify the returned offer id is correct. P_MigrateToGold Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 year gold. Payment instrument is credit card?? Verification: Verify the returned offer id is correct. P_Migrate_Using_Credit_Card Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 year gold and use credit card as the payment instrument.  Verification: Verify the returned offer id is correct. P_Migrate_Using_Direct_Debit Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 year gold and use direct debit as the payment instrument.  Verification: Verify the returned offer id is correct. P_Migrate_Using_Voucher Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 month gold using token.  Verification: Verify the returned offer id is correct. P_VerifyNewKeys Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 month gold using token.  Verification: Verify both Xbox1 and Xenon keys have changed after the migration. P_Verify_Subscriptions_Silver Functionality: Create an xbox.com user, and set the offer id explicitly to silver free trial.  Verification: Verify the user tier is silver. P_Verify_Subscriptions_Gold Functionality: Create an xbox.com user, and set the offer id explicitly to credit card 1 year gold using a credit card as the payment instrument.  Verification: Verify the user tier is gold. P_Migrate_Using_Xbox1_Token Functionality: Create an xbox.com user, and set the offer id explicitly to Xbox1 Live 12 month using an Xbox1 token.  Verification: Verify the user tier is gold. P_Existing_MSN_Account Functionality: Create a Xenon user and disassociate the passport in the UODB. Create an xbox.com user with the disassociated passport, and set the offer id explicitly to credit card 1 year gold using a credit card as the payment instrument.  Verification: Verify the user tier is gold. N_Migrate_Twice Functionality: Create an xbox.com user, and set the offer id explicitly to credit card one year gold using a credit card as the payment instrument. Migrate the user twice. Verification: Verify the error code XONLINE_E_ACCOUNTS_MIGRATE_NOT_XBOXCOM_USER is returned. N_Invalid_Direct_Debit_Country Functionality: Create an xbox.com user, and set the offer id explicitly to prepaid 1 year gold using a direct debit as the payment instrument. The system country is UK, but the direct debit country is DE. Verification: Verify the error code XONLINE_E_ACCOUNTS_BILLING_INVALID_PAYMENT_INSTRUMENT_TYPE is returned. XePassportChangePassword P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. The passport member name, session token and encrypted new password are passed in as input. Verification: Verify the XRL call succeeds. P_LoginAfterPasswordChange Functionality: Do PassportLogin first, and then change the PassportChangePassword. Finally try logging in again with the new password. Verification: Verify all XRL calls succeed. XePassportCreate P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. The passport member name, secret question and encrypted password are passed in as input. User puid and machine puid in SG info are set to zero. Verification: Verify the XRL call succeeds. N_AlreadyExists Functionality: Try to create another passport member with an existing member name. Verification: Verify the error code XONLINE_E_PASSPORT_NAME_ALREADY_TAKEN is returned. N_SecretAnswerTooShort Functionality: The secret question answer only has one letter. Verification: Verify the error code XONLINE_E_SA_TOO_SHORT is returned. N_CreateHotmailAccount Functionality: Try to create a hotmail account. Verification: Verify the error code XONLINE_E_PASSPORT_INVALID_DOMAIN is returned. XePassportGetEncryptedProxyParameters P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. No input is needed for this request. Verification: Verify the XRL call succeeds. XePassportGetMemberName P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. User puid is passed in as input. Verification: Verify the XRL call succeeds and the returned passport member name is correct. P_PreExistingUserAccount Functionality: Use a known passport member  xboxtestaccount@hotmail-int.com  to verify XRLXePassportGetMemberName. Verification: Verify the XRL call succeeds and the returned passport member name is correct. P_GetParentMemberName Functionality: Create a parentally controlled account by modifying UODB.  Verification: Verify the returned user passport member name and parent member name are correct. XePassportGetSecretQuestions P_Mainline Functionality: Return all secret questions for country-US and language-English. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_International_France Functionality: Return all secret questions for country-FR and language-French. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_International_Germany Functionality: Return all secret questions for country-DE and language-German. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_International_Sweden Functionality: Return all secret questions for country-Sweden and language-Swedish. Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_International Functionality: Same as P_International_France.  Verification: N_InvalidCountryLanguage Functionality: Return all secret questions for invalid country-256 and language-16.  Verification: Verify the error code E_INVALIDARG is returned. XePassportGetUserData P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Passport session token is passed in as input. Verification: Verify the XRL call succeeds. P_PreCreated_IntEnvironment Functionality: Use a known passport member  xbltest@hotmail-int.com  to verify the XRL. Verification: Verify the returned FirstName and LastName are correct. XePassportLogin P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Passport member name, encrypted session token, encrypted password and encrypted token request are passed in as input. Verification: Verify the XRL call succeeds. N_Invalid_User Functionality: Verify a user does not have a passport.  Verification: Verify the error code XONLINE_E_PASSPORT_WRONG_NAME_OR_PASSWORD is returned. N_Invalid_Password Functionality: Verify an invalid passport password.  Verification: Verify the error code XONLINE_E_PASSPORT_WRONG_NAME_OR_PASSWORD is returned. XeRecoverAccount P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Signed puid is passed in as input. Verification: Verify the XRL call succeeds and returned user puid and gamertag are correct. P_NewKey Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Signed puid is passed in as input. Verification: Verify the XRL call succeeds and the Xenon user key has changed after the call. P_NoNewXboxKey Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Signed puid is passed in as input. Verification: Verify the XRL call succeeds and the Xbox1 user key keeps the same after the call. P_VerifyAccountXuid Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Signed puid is passed in as input. Verification: Verify the XRL call succeeds and returned user puid, gamertag and offline xuid are correct. N_MachinePuidIsNotValid Functionality: Check on invalid machine puid. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidPassportSessionToken Functionality: Check on invalid passport session token. Verification: Verify the error code XONLINE_E_ACCOUNTS_INVALID_USERS is returned. N_RecoverXboxComAccount_Bug47657 Functionality: Recover an xbox.com account. Verification: Verify the error code XONLINE_E_ACCOUNTS_NOT_XENON_USER is returned. N_RecoverXbox1Account_Bug47657 Functionality: Recover an xbox1 account. Verification: Verify the error code XONLINE_E_ACCOUNTS_NOT_XENON_USER is returned. XeRemovePaymentInstrument P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. User puid and payment instrument id are passed in as input. Verification: Create a Xenon user with credit card as a payment instrument. Verify the XRL call succeeds and zero payment instruments is returned. P_RemoveMultiple Functionality: Create a Xenon user with two credit card payment instruments. Then remove payment instrument one at a time. Verification: Verify the XRL call succeeds and the correct number of payment instruments is returned. P_RemoveDirectDebit Functionality: Create a Xenon user with one direct debit payment instrument.  Verification: Verify the XRL call succeeds and zero payment instruments is returned. N_RemoveTwice Functionality: Create a Xenon user with one credit card payment instrument. Then try removing the payment instrument twice. Verification: Verify the error code XONLINE_E_BILLING_INVALID_PAYMENT_METHOD_ID is returned. N_RemoveNonExistingPI Functionality: Create a Xenon user with one credit card payment instrument. Then try removing the payment instrument with an invalid payment instrument id. Verification: Verify the error code XONLINE_E_BILLING_NOPERMISSION is returned. N_RemoveAnotherUsersPI Functionality: Create two Xenon users and only the first one has a credit card payment instrument. Then try removing the payment instrument from the second user. Verification: Verify the error code XONLINE_E_BILLING_NOPERMISSION is returned. N_InvalidUserPuid Functionality: Create a Xenon user with one credit card payment instrument. Then try removing the payment instrument with an invalid user puid. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidUserAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachineAuthData Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_NonDashTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeReserveGamertag P_Mainline Functionality: Reserve the gamertag  . Verify the XRL is correctly sending and receiving data and no exception is thrown.  Verification: Verify the XRL call succeeds. P_AlreadyTaken Functionality: Reserve a gamertag which is already used by another user.  Verification: Verify the XRL call succeeds and the HR code XONLINE_S_ACCOUNTS_NAME_TAKEN is returned. P_ReserveTwiceFromSameMachine Functionality: Reserve the same gamertag twice from the same machine.  Verification: Verify the XRL call succeeds and HR code XONLINE_S_ACCOUNTS_NAME_TAKEN is NOT returned. P_ReserveFromDifferentMachine Functionality: Reserve the same gamertag twice from different machine.  Verification: Verify the XRL call succeeds and the HR code XONLINE_S_ACCOUNTS_NAME_TAKEN is returned. P_ReserveFromDifferentMachineAfterExpiration Functionality: Reserve a gamertag and make the reservation expire by changing UODB. Then try to reserve the same gamertag from a different machine.  Verification: Verify the XRL call succeeds and the HR code XONLINE_S_ACCOUNTS_NAME_TAKEN is NOT returned. P_ReserveNameAfterCreateOnSameMachine Functionality: Reserve a gamertag. Create a Xenon user using this gamertag on the same machine. Then try to reserve the same gamertag again on the machine.  Verification: Verify the XRL call succeeds and the HR code XONLINE_S_ACCOUNTS_NAME_TAKEN is returned. P_ReserveFromSameMachine Functionality: Same as P_ReserveTwiceFromSameMachine. Verification: P_ReserveMultipleGoodNames Functionality: Reserve 10 gamertags and create 10 Xenon users using these 10 gamertags.  Verification: Verify the XRL call succeeds. P_ReserveMultipleBadNames Functionality: Reserve one bad gamertag three times.  Verification: Verify the XRL call succeeds and the code XONLINE_S_ACCOUNTS_NAME_TAKEN is always returned. P_VerifyMaxSuggested Functionality: Reserve a gamertag which is already used by another user and set MaxSuggestedNames to 20.  Verification: Verify the XRL call succeeds and the NameCount returned is correct. N_BlankName Functionality: Try to reserve an empty string gamertag.  Verification: Verify the error code E_INVALIDARG is returned. P_VerifyAltNamesAreNotTaken Functionality: Reserve a gamertag which is already used by another user and set MaxSuggestedNames to 20. Create users using each the suggested names. Verification: Verify the XRL call succeeds and all suggested names can be used to create Xenon users. XeSetAccountInfo P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRLXeSetAccountInfo request succeeds, and first name and last name are set correctly. P_ValidateFields Functionality: Verify the fields returned from XRLXeSetAccountInfo. Verification: Verify First Name, Last Name, Birth Date, Email, Address Info, Phone Info, Language Id, Msf_Opt_In and Partner_Opt_In are correct. N_InvalidUSAddress Functionality: Verify the postal code format for US. Verification: Verify the error code XONLINE_E_BILLING_BADZIP is returned. N_SetXbox1UserInfo Functionality: Create an Xbox1 user and do SetAccountInfo. Should be a positive test case?? Verification: Verify the XRL call succeeds. N_InvalidUserPuid Functionality: Check on an invalid user puid. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidUserAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachineAuthData Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeTroubleshootAccount P_Mainline Functionality: Verify the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user and then call TroubleshootAccount. Verification: Verify the XRL request succeeds. P_NewTOS Functionality: Create a Xenon user and set dt_accepted_tos to 1/1/1990 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and NewTOS is 1 in the response. P_NameChangeRequired Functionality: Create a Xenon user and set ti_name_change_required to 1 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and NameChangeRequired is 1 in the response. P_Downgraded Functionality: Create a Xenon user and set f_downgraded to 1 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and Downgraded is 1 in the response. P_TotalDaysSuspended_XenonNoXbox1Logon Functionality: Create a Xenon user and set i_suspension_length to 90 and f_allow_xbox1_logon to 0 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and TotalDaysSuspended is 90 in the response. P_TotalDaysSuspended_Xbox1LogonAllowed Functionality: Create a Xenon user and set i_suspension_length to 90 and f_allow_xbox1_logon to 1 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and TotalDaysSuspended is 90 in the response. P_VoiceBannedUntil Functionality: Create a Xenon user and set dt_voice_resume_date to 2 months from now in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and VoiceBannedUntil is 2 months from now in the response. P_BillingHR Functionality: Create a Xenon user and set i_billing_account_status to 1 in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and BillingHR is 1 in the response. P_BillingHR_Error_Silver Functionality: Create a Xenon silver user and set i_billing_account_status to XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and BillingHR is 0 in the response. P_BillingHR_Error_Gold Functionality: Create a Xenon gold user and set i_billing_account_status to XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT in UODB, and then call TroubleshootAccount. Verification: Verify the XRL request succeeds and BillingHR is 0 in the response. P_ReinstateToGold_TwoSilver Functionality: Create a Xenon silver user. Purchase a gold subscription offer. Downgrade the gold subscription to silver in UODB. Set i_billing_account_status to XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT in UODB. Then call TroubleshootAccount. Verification: Verify the XRL request succeeds and the gold subscription is reinstated. P_ReinstateToGold Functionality: Create a Xenon gold user. Downgrade the gold subscription to silver in UODB. Set i_billing_account_status to XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT in UODB. Then call TroubleshootAccount. Verification: Verify the XRL request succeeds and the gold subscription is reinstated. P_TroubleShoot_Disabled_Account Functionality: Create a Xenon silver user. Make the account suspended in UODB. Then call TroubleshootAccount. Verification: Verify the XRL request succeeds. N_Violations Functionality: Create a Xenon gold user using a credit card. Create violations on SCG side by using SPK site, billing emulator, or debug only API. Set f_downgraded to 1 in UODB. Then call TroubleshootAccount. Should be a positive test case?? Verification: Verify the XRL request succeeds, and downgraded flag is cleared and billing account status is set to require management. N_InvalidUser Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachinePuid Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeUpdateParentalControlsTests P_Mainline Functionality: Create a Xenon user. Verify the XRL is correctly sending and receiving data and no exception is thrown. Verification: Verify the XRL call succeeds. XeUpdatePaymentInstrument P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user with credit card as payment instrument. Verification: Verify the XRL call succeeds. P_UpdateCCInfo Functionality: Create a Xenon user with credit card as payment instrument. Then try to update the payment instrument. Verification: Verify the XRL call succeeds, and credit card number keeps the same, but account holder name and expiration date have changed. For credit card payment instrument, only account holder name and expiration date can be changed. P_UpdateDDInfo Functionality: Create a Xenon user with direct debit as payment instrument. Then try to update the payment instrument. Verification: Verify the XRL call succeeds, and account number and branch code keep the same, but account holder name, bank code and check digits have changed.  P_UpdateAddress Functionality: Create a Xenon user with credit card as payment instrument. Then try to update the payment instrument (mainly the address). Verification: Verify the XRL call succeeds, and the address has been updated correctly.  P_UpdatePhone Functionality: Create a Xenon user with credit card as payment instrument. Then try to update the payment instrument (mainly the phone). Verification: Verify the XRL call succeeds, and the phone has been updated correctly.  N_InvalidUserAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidMachineAuthData Functionality: Check on invalid machine puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_InvalidTitleAuthData Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeUpdateXboxComActivity P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user and then call XRLXeUpdateXboxComActivity. Verification: Verify the XRL call succeeds and the last web activity date in UODB is updated. N_InvalidUserAuthData Functionality: Check on invalid user puid in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. N_NonWebTitleId Functionality: Check on invalid title id in SG Info. Verification: Verify the error code XONLINE_E_SERVER_ERROR is returned. XeUpsUpdateProfile P_Mainline_Xbox Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user and then update email and phone. Verification: Verify the XRL call succeeds. P_Mainline_Core Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user and then update First Name, Last Name, Birth Date, and Address. Verification: Verify the XRL call succeeds. P_Unicode_Core Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create a Xenon user and then update First Name, Last Name, Birth Date, and Address. The street address contains Unicode. Verification: Verify the XRL call succeeds. XeVerifyBillingInfo P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create an Xbox1 user and then verify gamertag, phone, postal code, card holder and card number. Verification: Verify the XRL call succeeds. P_Invalid_Values Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Create an Xbox1 user and then check on invalid phone prefix, invalid phone extension, invalid phone number, invalid postal code, invalid card holder, and invalid card number. Should be a negative test case?? Verification: Verify the error code XONLINE_E_ACCOUNTS_PERMISSION_DENIED is returned for all cases. XeVerifyParentCreditCard P_Mainline Functionality: The Mainline test verifies to see whether the XRL is correctly sending and receiving data and no exception is thrown. Use all default values in the request. Verification: Verify the XRL call succeeds. Stress Testing Performance Testing Resource Requirements Test Complete Criteria Release Criteria All areas must pass 100% test cases before final release. Revision History Changes made Author 2/2/2006 First draft Yuanfei Wang (yuanfeiw) zlclIzl4l k`YRA {p{^M }kZLZ: gdOp0 gdTCX ykZyHy# kg\J9  gd>ux vhZhv gdR=! gdR=! gdR=! |k]k]Ok gdnGT gd+!$ gd+!$ gd%`. gd%`. gd%`. gd%`. gd>-C gdM%y gdxK| |k]k] gdM%y yk]y]yKyky] |k]kKk]k IDATx^ {uUWu y&~x<gk Yxky/ \5 c' uCKegQ 6.CwJ W_,~]Q Q-aW)m] 7eNzq mQ5]0 E@:d- `V=72~y u-Z,Ra Rp:K= Hw~NIv k;^Kk- =mnB0 u{s$|Z9c] hV \Rl ([gl% &l>:h ^LKdA ynWvl ~]wYj oFK]a E8?,RvY m.iQ; Lv,E0% hxtUR 9nO+' |,NC( qcwwW Ts+.kp Lown7 Jkak\,| ,k%]O ;|8u3N4 ewo%` )VN+W  # 2  Kq|c0 rq.SC 32FBc -rmVa d|jUL gu1]F LWwfZ 1}r<) o12~E D*)I^w JdZUI% zZ7Ue*I ?/c#*6 FH%=X ;Xu$g =[YW;qY O7}:X :3[YC J%6Za y>aP6 f*IT ah bu in%e $-ftIW letYks ,3hclZ/ %CVG] v[_tY SX7]Y~ Z4Z5jc =w_cRG dpp)Z< hj(VGC bw{qq7 kwvh< d[y:E k"t5C $ aOk E=Io# mVf5c |+g[K 8]0\.l1 o9Z|Z fY+Vuy ROjf, w{'8l %K,N! {\xx3 j%o=Q DOjtU W\nX9 =EHk1 8]h=I gkk+E{e ynaF# 5@eq- lxESZ%o 0k4ci% 0>tkaL3 4N4mk RI%&+ d/Yl' ?q5y!H_ %Z%9y "9<VF2^ B,TXX JRl%{{. d)>;I f$405k Zw{!;b GA#ShIW+Dk ;Y,Bm 4PXCw* RsC7- \kz[4S Gs-ru 2y2>wVT @e756 {::x>b TW8ih JW$sy Y)ouA _OaWGqiF ZmiNE 2="]$ ,h-uG Jj_k(5 s6Z@Z <:X`#_4 EtHvr cy=Lg nUZ(n A|&Ir .G>.dV uS\E"z 5I7LU &/HoN KgH6O+ "CB|sZ-4 NV#!H IMNis< w.mm'/m dz}kxa qax5xqw B]PUQL {I`L] U=J7P zHw[` 5j<?E C+y1W XrA,[ (d$8w i0Fp@2 LS!ti\r w+|mp 6A}'7{ khbfq r*\c% "'#/Oh 7^VjxL m8;*1% T'!Jc *v^0= POAx&S EgjX;`: %[IxR DQxn$ iNvV^ 3k7|q #vV,F FygOZW oT7jS d2&qUF3 2Bmuk FC8Y@ p?Ifq cP8Lr  34>= !$v4^k =-'TA$< `g5W.hD *+ML= Y>OQs U'/3. t47]Drd po"8~ '*6tE 9A1b(W mM%%5 f=W"HC Ap&<> k/<31 sGa`E QJ.f$ yrlP< 50:pai X~<|k 2;+y\q |y8E3X UIO|M a'6yb Yw/D; 7gr8!> ,;E>yBN 4cG}j UL,q.& 3`|fm /fq4" aJrG.^ b;\q&, $16#G 9M"r2V A5aX|E8 ^bG8C y{tfw (\!q5 |N<m<+v D~KoKu my7F| pnW\EJ8 gZd/=} 8yNi@4Sl~ <or9pfF .oN'|.>  K/|s6 8:{RuX !/ML= ^`)nlt dM.0# q2Yv8 hnhI> $DLMQ9;W &@,D# Ih*O4 n$=Nc _vs-/ YGjzZ VOS!Q N,Xd< KynzE?( [ZK>% cF[.m vik3\r ,x*Zc DxhG# ffm!M s_}xm P aT:> kFKsq wg$_N"S twbZ/Th *c8Wk jIWICg qo*Xi q.GU> 5#X(*0/7# dL6B^ bXmh/]j3 l)Od2 ?"33n (ja(7 |au9u :{i`>j1 &e=5K; +9[5i& p,xlw :<:ah W2;Xk- R_t_u.a! TaW}<3 FA>e8 l\i,l {*2vh _kG]j fB~^p wk M ] {>&>8s HE_hyq ByN|M @NqoD a?kCb 1hDxmaXfU CqOEUe XjuF> 'GlQKVh o),wP oF`&`: RAvql\ Jq9~s} lQw.xj AQSMdX uDj3!V b=@DCZ m7[K2 =?~=m `/p-S qP$%U W)s.0L $c{(U s?<Hr) {A{"(P ?`FjB w"CI]mSv  U#./Lb 3>U>N R+6{R s"kP\M \;;W9 WSxCd M{cfP oyqFG x0/Q? /,fyV BR;\[ Mo5i&uJ ?]MGl> =y"s  _*+n& X'_yo7D\ D4GZl E{nLH _(CWC 21@=}n= oqX]]l5 g"Ar~ <Ho?y'x ^?rhe M(2<? $vWEe?l <:dz- =#9,! `H( RKm_O W{80` V4D&1 1thC{ i<upo n+j7hF (61;}7 :N#iIV WmW2: |c+D` HTKYt W[gOe 3S#d@ ,\3j% Hza^W ClkLm bH;TwY t.!WN 6.}V4Q ;)6%& G}RW  z/.w/ 4Z\oF NAP_5 {_hQ(S aFxKBX {ocH8 OtA+^0   &(A) 5^kIM FO-$dZ hzG=l 1*MTh tAykR- <9n_hTc h|l|~ 7&nvH u+<!R Dp-7: JT>%FO ZYkf@# =+UJoe !h]~E VVG-1 R[3R; aY7/O -,j(n dLR*:+4 ]GYKf aO7FQ 0#[d]NfI#[ Y)TTm NmJ"7 q'bm. xqM`H 0Y2ofC@d wDhA> b TdCa =,--Q 3gVV/ a]kVMX {d=0q t2")* f*7tpZ lx'3Kr4 !&auD  Emw,  rAJq |EI\V 2BddIm moo`m 8tlHL jOBX5 SV1_+U <")YEA 88t-d; O[lwD m)[yx 7M;\!+g `*s;~. 5M)XS =~xyy 9\=W{ 8a j" UJt[' s8Jn7 @Z`3_Q WTn%p o#@Ri U[mvK a?F,Y) V,VT3Da= ><0J: ?"]a8 Q6JQ?. F$j#G s'?\! >DV.a2#= .RL=V9 9W/Mw =p#=`z vqcCn T$>(: J-"s: q!tmo U`DOF (Rlr.M E|#E$ H2TC_%oP# E{qd.FW 2EJCQ \Ofhy -_,(N :mBJ"sp *TZ7}< Gg9,mh :MF\? Q,zsZ nuuy)K mprX,: d-]Y^^[K %Dxwd&% C[-QO VI@T0S Qu)CT3 (^L{= ^Is_ZZ $d\FJ ^@bcl _1(pobi< `~yy9 tA9uL ^f"y" O%Oxe c^w+Y )RlitR 8W(w}~=r .&ip? D{gYR uF;xp? Y^5&> 7xb l +>:st x)/=/ dy$BQ )Q%N*M\ 3>]dJ m,:R6 o&?%us r{Z]nq(N )*4*^6 mr(0sW |+Z t 5l]AW'VZ *a%vl <s0vk |Z.`R FdJ> } ^p#Wv Sqw=: fSHq* 0^YY9{ foA"s $@R$  ;(?&: 3pURS m0]X= I-jM!! sL~rx GvtTHF elz4:#T I_REt H8luv yP4@z * p%J [(9%v 85/+V 1D8<ie8 +.Ggp9n +@~1[ *#tS& L5^($\2G] Zsp/F;F t</\` Csp;m #*vcQ |xuwo 9`]h# CU+$-< \Adk]~ GW|Vk {pQzw| w/7w/ ".E]f rbF1q 6v;{7q8_ 0V/a= 20Mlf W;a):N (&r\- Z4oq8\ M"m+r ^,|>~F UiKKpN "+xgF 3DQ`% EWl;Q IDAT8 !^Gq } ^x m} Mhw*1 {vZt|$ t,/j%  zsR;m lw8<h pT]Yv+ vG6<. XJpZ< {m`Zc !;E\. r+>(` [W,^% OF<})& P]@t<E RE,o2a 4p4#; !%g}rB Ql]\X hx4<z 57{2w EH`O!2 o#)n4 *ruU. ,iw\  tvpTls ^g)gOn <x@>m P`$tcA Fp|iP X_9 . Q^MR2 W14+|$E E/=4y Nor%y U("6el ,s{!b ;8cQv 8up6<B qg=p9 %E-7b< ng1@7 0,>9N :*-0EYz {1^bef ':AP2 w=B]/ :dd"- P*Z{7 js%wR ;t<ND 4_j}r KT9,T XOM)D 0l+q$\j ,Qokww QaQ`iJ P`K'H \`Fcy XpH{b] Ahm4!& w`YN;M 6iV^> /nk'o mC><9 b6&#T x5V.T @)!hzZ TpMG+ N#F"& nAW u Rq88' ;(|1E1`P>-\ >l;8] 4qL(- bU@Q@T E_he| %_nC_ *Hz:;B ULri`Y Kc3>Xv: _G~~x 3|zHB <fB}83 p$o<{ *.@OS@ 8z[5; +_)y& Fk&i)j @m,]q{,Gx s~]i@ QWE{w a1Q$T 66D!z( MvG3\N Vp.A6 ceNim QR(2U Eoba/ up3.v95 dZqu[ =|]5k6 c5HS~ ]L>;]H f]~UX [;(-9z ]n`Y:YOX <f)}S c\IGv q-5wF~] 4 Pij 'qqXE> Y!!6c j^<ia 6i)'T yf10n mT?Ea qycdc Hu\QJ b;1AFg,+ SXdPm& 8Op,v l&.zx .%N{Q bmP9j ]suux v|2>~ hp./= tJEi:OcO S<eNJ 0yu]`*aP& y%=d6 (Ok]7V Mhc1V IbNC= b(CH% >Bf:F -Nd'N M}WtZ WK!ie* ^KgxL phw\ `^Z =qSkhi e>~B} STF%Wx3 rGe?9 Qf!V= yCNPK C9VAz d;/k& KcaXO vX6A*. 42=MP6; 4d4;MeJ ]%uEUut JY&subY ja&S~ ej]ODy ls7+x hK+!-9EI G)&gb<JM< {UbBR, b/sjrp(] JH29V A%$Ut N?^6^ Ar`P* `vDVH @,CfH 2DZ&H9 r<JdB 5:X%* Wt"2_m #!|CU lWQRL !3AxV. Dq^&R Ebma! E&O7q5 U,z*9 Gq"--2 @TbZj >=QP& NUZSz 4<9|T LjxzE )?)fB [*WK9c\ DT*yk v?&0V$ Je=RO  9/y=P<= QY_6j X6}Qn FZFB^ eD^)B atY`! y3X6j ~EBdx 2upt, eB+xPY. !'h2$ Qqa'+ ZtY\%: /X%;%D P>FiF%WT ;aiT*iZ EeJmy* 97gRB ,{K(S =O~b\e|W aPVoY hWi6N? gH-!7) BJ^O4 a32+k hQM&? IB$4E> g*MQ9b ^%5'4 9nJ3E ^{aiE2 DvZm{ _hH&O #uoNe Ly(ft #+h,~ &t".} LtX`t L*@Fe ]$yH.{ t7+x+8t <R&(t ;Ge4v {E%0k qdt%< >sVE9 >6h": BB-yT 5PwW>r BXF{!x bVvXeY bA[w.jM v~q1p6 igc>f 0sww{ ^9Y!{T>" +xYe< =houI0 8)Ex" wWbyk X&H*< >%J.T 6A" ? u=.v3 ;"+d3 6muXw KtRD(yK.Q 0+`V# :i)J]  6hlQ 8?'x#iK pxe>&xfzl tzcwft &sn'|
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\useraccount\test\XeUacsTestPlan2008.doc ===
[Content_Types].xml  |]5.{X! _3&s8 _rels/.rels  #Dn0_ word/_rels/document.xml.rels  /g}*q word/document.xml I~mn* I_vF' XjdlX }P3f? y|$3{ cSRaj 1Xbxt 4R!q-{ Y!fGcz +`SDX ziXqI& ScV+W U'us)< fKFdEd Yi;iHS DMX(?C "_'"q" N|SuD *q>5* ?VdEzP V)Kzgr? 38fR# 'D*J+ iwf3c #*#oY4 HpG"K 0~BKTDs As9K6t FHo0f ?hTFVr tvQ:Sh 8"9"9G W.#_95 [:u3N 'UG=s 'e94>W _Vy\] u^h6K +Qh#w EDI>  %G=aD niAWzhF [~z+.E b X,1 %E=@_ 2Gm@+q4 Qc4ek VJ8{K ^*5[1_`5 %Z5'A GIvc; ?Ee9v Rl3z? j@dOA. )jhNX S`s+` AwxLBC F,f|[- >:pVP\ pyO~yy ,Oe7Z M#y#H E;/Dw: Ph%8=^ pz[^VW K++l. {X2|. n!`;|O{Pl &H fqY Zx8q~B Ln!y 1 c<y+o |-^BX. n<Ydk 3^N54t l\6W\E QYX.CG1 bnSav NCn!`L kD>Fn5 7Aw7- ;:8<< cLn1" 4$}{T %D|?;I ;=zUT 5&7Fn! 2Zx3oJNv}R7 wLqou fD%Hh ol8o|3Ny ".z; r& ;\yevr `xxrtf >qBe36 EIs#T HS>Jf {GRQ8 )~4'P !8;>:>9 ?uV\e *ZIEg h&`UX kRuQ~ ^eUADJ xyn{0N _\t?@ nRCgf 4uX\R -Wf(K lfj[2w bm5|X |^@~M Fww1^ %?'1] ,-];7U  }+-c F\_Wf V6q3s %?'1aI xg?J~I l/iYz ]x=7n7 dgCW^E r@Q%a =6S}5pe #zvsK v=iK  jb<huB> i7Q1e{ ?u~[F O|}us. ,}Sg  y+5zp e8yt#  F'h8 'W5Vs rQ\hF|m +,(@P S'aVz {$+K|=^G @Vy3x0 hb$GK :iMVVc R;@Ve [y^rUS %].YP +"I,Lh JU|W~ UFV3> 7bxWE pI::u q1?EWW) u@n&r3i /YFMP {{65a {dM"k U<]dM R'y=" D8V_K ,iBr! (DZaM LMdj"S3 lgz1F QkW&F6* G<)U^ ^[>*Uk0 -rQka %Q/5* ="92QS sE2%lv ^,#e! wtr|J _! =8 F8o<l 6S:Mp (j9d( ${~\: ]xUj, %75bIK [P7d9 L,gBf ,*W>U wo9wdH LeqiR' FbIUE DE1+Mc pO4Ce 0h A} c+1)* J+? Z Tg!eIW T+Bz2 R-?"X ](JZ- vH"O[-\ Q`yAD |"Ysp% sY9Sir bn`M& Jx$XxN @**@] s"4I@  nM<1I'z Ad7u7; 1Q<~# zP:$/Z 46%561 ,Yq]" jz*tB X2JEm7V $yp%\ ;rT4)g Q)wf9w .J%BB iU))[ )cyyc IU>L`Z Wa%*l {Zvc)_ ?AvO3 4"A0# M[-q( dT}aG ;0Gm_5 |fcvTr> 2=rC>f kbZwL :)%X, G_U[5 "aKX9 u3E"= X `5%c ,|>SS Cpj,f (Zhz0h @H57) eM\Dl i!<+4 o$ZXF ^AJn5 !U3~G0 XdI>+ =<jF, _g3b` wq}~uys<8 b?kw}`T gjp^a 2.T)+ #Rot{W OmEUT >1ksiK d3,I  22?+X se7pd= aud*j J3bUh XtnNL!`: @CjyG; iM,NhH# Y5yVQ T10.>K 366f3 r|JHj wq}~uy iR1{s- K?|8<<> -o9#UzR ^!x/T v$j,?-Pz  #?}Z /eLC% >n)ni n)n)ni 1n)n)ni 3fG;?qcbZw kKQE,} ]xrQA aZ>6d/ Z[)8# Q_zILJzf9 p(p0Q NZhKs ;59Qs 1aG\[ [bRt3 n*~NQ w+gZu -5`~5 j#1mO TlKd9 |bx<>t 9!Xb_ in`Y$e D*@5@ guQPAw v^wJ{ d$6h5{ fN?za @O8|w DmiaL GHMgHu Gj_2- Dqb]1 %$Eu6 *RDD76 uDh/. J^]1VG 8GE}u&WN G0?j$l LmMqO 5?IuS >3c3$ IH"!) _8vEVF LF>+W [ye7<  r^il BeJ;! 266.k VT.Zo ^/`a(M+ n;-hT ml@Ny m.g0xo [?TF4 >ICA3 JO'&1 ygAN? ymGXo {Kd*Z gR+B5 Ji=nq rn*QK2 *C7~8 WePXj #ASb^Bl 8J(}Q z9_'i xe$ipv "ZeF3 u\**GE- PC%\o (KpoY "1Db> lOYE j ;yf%dlH /q+X" nP@+u GV(N8 =bB*V Rq8W` gQ:F&V ca%$& K(|A* ^{,0I O}1$] 4dVln 7[l&D {:ig' fy&i} u~i{, q1=lO t;!w4BD (9us0` H[/F[WwA 6a*!S ayO@G; N?FYV _t&WM CNs^Ic WNudS =n$`  gca-8 idw0p AxK9YY `?GT4F @eBif ;Ie\h $0-I4 hgp@|ktE h$#adQ sv``X pP"I# 8Z\#{ xpTM? kSk%_k In`{! Dst\k whF)Z R5jR1 )S3'bE LFL:F z(op-R @,v?K;j5 k+h`_ UvRQ?ML9 *n^a* :=mtO uR"JY( 'CU`|3Te 5L"Tp Y!j<e o #X=zI lA6r/ 1-{E3 N"".an VvTL[ W8\9O "dqb% I<U`> %&I2i" 4j072kNq vzzZ;% C>c.. mQL\;+ u{|Q;j _@^?YNd APjzE +Hpgz 3K>e[ -R',/~ ds(en6VB Vt+M2m D9vXEl O*eY+] p}\"$ Ty8X-T e?Q5= OdF8K 4%Rl' `4l>@g *U>O6 n]]vzwh -jK2l 2S$|Q 3bM)l PzpM; #hBdC2 k7ep# STpz< Aruq{K uYK*[ eU:zK 4_Y#g K|K-8 fwQX-f cdF"%J NE((w# (zJKk bUv.k ZbA7A V0Ru; C>j.Y ]9evT \nM_\ 8U1B{ BX8,J "R!4} "{sxt 4\q-m TISX- 5<V"b&v ~r. m $xRfT APOOwP:W TO7\ht "d'8R%,U r%_p# 0xsxT -h2hr 4mfxCr E\Z** pN#g: 2lY*9 >[yT8[I0 {s~d2> BYf:U )L^6IO )~/Ah2 ~)P1%. $^!~/ >6C[g f3L)D cs,9v V&H=5& 8\9q8* ,km<kMP- }b4/R ~rla] Suiuq :l#E6R R24&e SokXs P ,_X< J27Mh 3T'6>  4Nh$} ,RdFb wVmF]w-u He6PBH uG>4{ g<8X8 AIdR=Cun LadY%p ]]zRR WB0R|? >U0ECU x~.wXu oQ60a8 .wStG 1I(-u^ sEf$`N [giynF -(F+d ~xoZ_' ('0`q4 dl3I4+ K_138t g?yt@ J)MkmW }Q9{` ;=:9:$\ 9nB}$  OfY]Z I6{lv 1LS{E `#?gm pcqb:i @_gI_ ]w)eJ]n++ js=XX,`\ amdk# KZ(LOA rC:c}j ]k4[k pkgp0f1Y osfS* cG_g4 Hp&OP0 9Fj*nA \|N_g rARc^ p33k/ +i]&lM H2x`a xAxQN >`qTA ?tuwh]+-( ~{p{u5 Hbrv< SQiiSU G9>0k Qf8/r +BO/Tn 1V-Hz GJ?aG*I 2/ P= D]Xm( [6(*` )7&A_ ,:98z wkE}^Ng4 O#xN7 ^f@=C 77W7r IfrW7 ykd[p 361nq zDP81 d:tS9 ~RepZ ">r:g 49*i5 ^Za7@u &>f)* Lh~A#W %T<AZ$ ?QX(Pd G_g7b ><x1LT$ *s!_H] am&/t Esf4S.h 'UrRf HVd2*&JA #Il(Vv 8[xqI ?y!\c %d?Q@ %e(%I ,n zp  .#j4X} /gOP` iJ?Jn ~|?&t <WH4I -m17Q 6yo=y #%XJh &@4D(K LcJbQ7 [9k6N D,5$j CMi)i g3&.Q pS\fq Y|[&| qvOga gs&.Q .M[-#" hA;Rs Yc0LE `aX#& `ni\2 zlN6?{ 5<+xyIK[ k1*~\ Qk( & >jjiZ v {l" 7ydeg (>YQ(V A.%eW Dlw$@ $T}P$j ya`{w 0J>.6Z q=vOC "E56B gZ#.) &,I)p Sh\Fs!JC 3vLEW YoTO+ 4DidH |'ajt rl,'g t7r#g2 K?E>1d N>'!*" {vh1' Wm4M&> 8'H0n word/media/image1.png  cHRM ^TIDATx^ ?)u_bjj qYY1E >%e/3q Yz,`S ={RSS {7=LOO &&&btQbepYy jjj***$C" jkk+++ q1C(PXX 6j-cXBB F2Rct 5`ggg :#`GcF lt,++ |qq1c6 OXZZ* h.?}> V,3yZ&L TJF8Ic`5 ik55v } X2\ XWAwD "%B(RB > `WV <;F3N Z^.`+ "%`F^ i>1h.f P_QYb ^MmmH QP03[ }gowM^wL\5 [=p"` \0f3KaW*3{m} ~$`Gv 8]&\B O]Mu- KM&Oe 1#]Po, Dffnx;Fu=# ml9]y jG~ye {;z}:=a|vq .|UO5K 1{m`# *ueU5`/ K#GIt v]]8j Nxf1u [x$FS jKl6s 4I,)_S_v lM4;j" SOFX*? )YhtV\ #w*.{ :hvKS G>fQ[\ Q7p){ d>b&>( etT:=F 1;73//{ {cNNVN -%cSr <a_f|IyN^A <RjlKv tWum~ieV 1,g?m C4|dg yJF\~ ^oGuh FOEAUj U{eUy l-T%; zpkqYvn~ 3rw;[KK m/W)A o_J~~ HVFye~ *m^8\ V*w%n% OIM(* zkiai&S Mmi%u zp{IYAFF: |}e:_j^ F/4N^s kw|~~nzz:N UAqUfF 8.KQkK URZV< %"h|vs aa~BRx HiuNmcQN cgu-c `/aORv 8wWb\ Fgi^E"C/ !Gv~: &?9->9= :|8377kk qr,=3 YFumAQ *mqZf k66o] V1~q6 LL&#s$LHJ  a=#77 \}.#M,f| lpZ<f a1UP@0C> -$#BL !2TE3D $RBaH B8(`+ BX `SX0 Q/y^%R 8eBH#EJx. BZ+`C(BL El>RBa  OoEJ Caa}4 KL]4C Sh"exHO` 0yQPEJ e^.VJ mU`#S fyIt- 5Oijt- <aNtS J^aD4S wcK4cABxcL "Mcccww |rrrllltt UI|1! I|1fU word/theme/theme1.xml w toc'v 3Vq%'#q :\TZaG IqbJ#x T[XF64 word/settings.xml ;&!2z O\B*( oNk@" BeTe+ <>p0V s^T^Cq^ '-(ir U]W`, p]@sA+j YAp.p 14tc9 yG !; O5+ET &nCrq }<&/p ysn't} 1RGF+ n<bFx| word/styles.xml 0cqP@ _ZDK@ 7_a h \K-}N:J FT*oS mZhPL JN_zA Zdnf/ hx0h# 7)?+  PxwRe,[3 65"[L1 word/numbering.xml }w&@v OL6L. ><.6_ ! "|fD 0!`2\ 'Ya{u +u4SgqR "il=0& y#puw F1ZE@ ]m8mZ I)RH4s uK_lT? #]Oaz LgQ45| o[@;d :f)R@ zU;K[ Jut/L  )Egp ,gB"o 7zROY f$$B|&t$B|&,$2 nU[5;3 :+<=k #Y,=3 qfNt! "Rt.E 5]2iD docProps/custom.xml  m"jH4 m*%#2 FHt=J 8c:^: customXml/_rels/item1.xml.rels  customXml/itemProps1.xml  E|wS< y#bB? docProps/core.xml  customXml/item1.xml  word/fontTable.xml jfX~P~ $nq6- word/webSettings.xml 0JHR( _im>Q42 8|$$s ZyD+,S docProps/app.xml  E&Q/[ w#pQu /to7pm ^5Y.# w+3F)~C !*_"0 jmj(cB{ AGh2: -lc1m -jc1M +Ej&] [Content_Types].xmlPK _rels/.relsPK #Dn0_ word/_rels/document.xml.relsPK word/document.xmlPK word/media/image1.pngPK word/theme/theme1.xmlPK word/settings.xmlPK word/styles.xmlPK word/numbering.xmlPK docProps/custom.xmlPK customXml/_rels/item1.xml.relsPK customXml/itemProps1.xmlPK docProps/core.xmlPK customXml/item1.xmlPK word/fontTable.xmlPK word/webSettings.xmlPK docProps/app.xmlPK [WARNING: Invalid DOCX structure]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\feedback\test\Xbox Online feedback test plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Pankaj Naik Xbox Live Test Plan Template Pankaj Naik Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags PlaceName urn:schemas-microsoft-com:office:smarttags PlaceType urn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags PersonName TOC \o "1-3" \h \z \u   HYPERLINK \l "_Toc74390135"  Table of Contents  PAGEREF _Toc74390135 \h   HYPERLINK \l "_Toc74390136"  Summary  PAGEREF _Toc74390136 \h   HYPERLINK \l "_Toc74390137"  Schedule  PAGEREF _Toc74390137 \h   HYPERLINK \l "_Toc74390138"  Goals  PAGEREF _Toc74390138 \h   HYPERLINK \l "_Toc74390139"  Non-Goals  PAGEREF _Toc74390139 \h   HYPERLINK \l "_Toc74390140"  Related Documents  PAGEREF _Toc74390140 \h   HYPERLINK \l "_Toc74390141"  Functional Testing  PAGEREF _Toc74390141 \h   HYPERLINK \l "_Toc74390142"  Summary  PAGEREF _Toc74390142 \h   HYPERLINK \l "_Toc74390143"  Test Case Matrix  PAGEREF _Toc74390143 \h   HYPERLINK \l "_Toc74390144"  7.2.1 New Test Cases per Milestone  PAGEREF _Toc74390144 \h   HYPERLINK \l "_Toc74390145"  7.2.2 Existing Reusable Test Cases  PAGEREF _Toc74390145 \h   HYPERLINK \l "_Toc74390146"  Stress Testing  PAGEREF _Toc74390146 \h   HYPERLINK \l "_Toc74390147"  Revision History  PAGEREF _Toc74390147 \h  Summary M4 Milestone: In this release all feedback back will be stored in the DB.   Xbox 360 will support a player rating system based on reviews received form others.  The player rating is calculated and sorted in profile.  In the db there are 3 tables 1 stores all old Xbox 1 feedback, 2 stores all complaints received against a player and 3 all reviews. There are basically two major categories of reviews prefer or avoid. When every a player sends a review against a user the user is added to the players affiliates list and the users rating is updated. M1 Milestone: There will be minimal changes to Feedback service code which is due to the changes in the way configuration is being loaded. With the addition of the configuration database, the feedback service will load its configuration information from a configuration database instead of a local initialization file.  This test plan will document my approach to make sure these changes will be well tested for eventual production deployment. Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M4 Milestone: Implement new test cases for SendReview, SendComplaint and GetAggregate Api s ,  modify old test cases to verify that the feedback is  correct add to DB.  There will be additional test cases to make sure feedback decay works and the rating system works. M1 Milestone: Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases. There is no required stress testing for M1 so the  Test Stress Code Complete  and  Test Stress Complete  deliverables do not apply to this milestone. Goals M2 Milestone:  1. Make sure that all positive test works and the server does not crash or log unexpected events for negative tests.  M1 Milestone: There is no change in the server hence all of my existing tests will run against the front Door. Rerunning existing tests against the front door will validate that there has been no behavior change in server since the previous release.  I will be writing new test cases to validate the new configuration settings being pulled from the configuration database vs. the previous local initialization file method. Non-Goals M2 Milestone:  The feedback formula has a lot of coefficients; we will not test for all possible combinations. All test cases will be tested for the default parameters.  No test cases will be implemented to make sure the distribution of users is correct, we assume that the formula is mathematically proven and it works M1 Milestone:  Related Documents Functional Testing Summary The Feedback server has 4 APIs that is used to report feedback regarding another user in a game session.  Functional testing will strive to test the matrix surrounding this API set.  Xbox1 feedback  SubmitReview  SubmitComplaint GetAggregateReviews Test Case Matrix New Test Cases per Milestone M4 Milestone:  Test Cases for Submit Reviews:- Every Review will update t_user_review and t_user_review_aggregates in uodb , a request to presence Fd is made to add affiliate and new rating is calculated for target puid and updated in profile. public class SubmitReview  public ulong   senderPUID; public ulong   targetPUID; public uint    titleID; public uint    type; public ulong   context; VALID_Review _Prefer: Description: The test will make a valid request with a Review type of Prefer =0 Verify: Make sure HTTP status code should be 200, a review record is added for the target user in t_user_review table, the Aggregate count for the review type in incremented for the target user, the target user is added as an affiliate of sender and the feedback rating of the target is updated. VALID_Review _Avoid: Description: The test will make single valid request with all Avoid review type  AvoidTrashTalk = 1, AvoidLanguage = 2, AvoidDisruptive = 3, AvoidAggressive = 4, AvoidUnsporting = 5, AvoidDisconnect = 6, AvoidUnskilled = 7, AvoidTooGood = 8, AvoidUnfamiliar = 9, Verify: Make sure HTTP status code should be 200, a review record is added for the target user in t_user_review table, the Aggregate count for the review type in incremented for the target user, the target user is added as an avoid affiliate of sender as well as send has the target user added as avoided affiliate and the feedback rating of the target is updated. VALID_Same _Review _Twice: Description: In this test a single user will send same review for another user twice. Verify: Make sure HTTP status code should be 200, a review record is not added the second timefor the target user in t_user_review table, the Aggregate count for the review type in not incremented incremented for the target user, the target user is added as an affiliate of sender and the feedback rating of the target is unchanged. VALID_ Change _from _Avoid_ to _Prefer: Description: In this test a single user A will send multiple reviews for another user B. Verify: Make sure HTTP status code should be 200; a review record is not added the second time for the target user in t_user_review table but it gets updated to the correct type.  The Aggregate count for the review type is incremented for the target user as well as the aggregate count for previous review is decremented. Correct affiliation is established. VALID_ Change _from _Prefer_ to _Avoid: Description: In this test a single user A will send multiple reviews for another user B. Verify: Make sure HTTP status code should be 200; a review record is not added the second time for the target user in t_user_review table but it gets updated to the correct type.  The Aggregate count for the review type is incremented for the target user as well as the aggregate count for previous review is decremented,. Correct affiliation is established. VALID_ Change _from _Avoid _to_ Avoid _Diff_ type. Description: In this test a single user A will send multiple reviews for another user B. Verify: Make sure HTTP status code should be 200; a review record is not added the second time for the target user in t_user_review table but it gets updated to the correct type.  The Aggregate count for the review type is incremented for the target user as well as the aggregate count for previous review is decremented. Affiliation is not affected. VALID_BlackList User: Description: In this test a single user A will send avoid review for a lot of players causing the ratio of total users played against to avoid feedback sent is more then 50 %. Verify: Make sure HTTP status code should be 200; a review record is not added for the target user in t_user_review table.  The Aggregate count for the review type is not incremented for the target. No affiliation is established. FEEDBACK_BAD_TYPE Description: The test will make a request with a review set to invalid value There will be 2 different requests with feedback Type equal to MAXFEEDBACKTYPE and AvoidUnfamiliar +1. Verify:  The HTTP status code should be 500 and X-Err = 0x80158002 and the review does not get updated in db. Invalid_Sender Description: The test will make a request with a review sent by invalid Sender  Verify:  The HTTP status code should be 500 and the review does not get updated in db. Invalid_Target_User Description: The test will make a request with a review sent by invalid target user Verify:  The HTTP status code should be 500 and the review does not get updated in db. Invalid_sender&target_Same Description: The test will make a request with a review sent and received by same user. Verify:  The HTTP status code should be 500 and the review does not get updated in db. INVALID_ServiceID_IN_ContentType Description: The test will make an invalid XRL request to the feed back server with invalid service in content type http header.  This test will make an XRLRequest with Content-Type: http header set to  xon/20 Verify:  The HTTP status code should be 500 and the review does not get updated in db. INVALID_ServiceID_IN_UserAgent Description: The test will make an Invalid XRL request to the feed back server with invalid service in User-Agent http header.  This test will make an XRLRequest with User-Agent: http header set to  20/1.6 Verify:  The HTTP status code should be 500 and the review does not get updated in db. POSTSIZE_0 Description: The test will make a valid XRL request to the feed back server with post body of size zero Verify:  The HTTP status code should be 500 with X-Err = 0x80150010 XONLINE_XRL_REQUEST _UNDERFLOW Description: The test will make an invalid XRL request to the feed back server. This test will contain data less then the minimum size of feedback packet size   Verify:  The HTTP status code should be 500 XONLINE_XRL_REQUEST _OVERFLOW Description: The test will make an Invalid XRL request to the feed back server. This test will contain data more then the max size of feedback packet size   Verify:  The HTTP status code should be 500 Test Cases for Submit Complaint:- Complaints will only update t_user_complaint table in uodb public class SubmitComplaint  public ulong   senderPUID; public ulong   targetPUID; public uint    titleID; public uint    type; public ulong   context; VALID_Complaint  Description: The test will make single valid request with all complaint type  OffensiveGamertag = 0, OffensiveMotto = 1, OffensiveTextMessage = 2, OffensiveVoiceMail = 3, OffensiveVoiceChat = 4, OffensiveInGame = 5, TamperingFeedback = 6, TamperingSystem = 7, TamperingCheating = 8, Verify: Make sure HTTP status code should be 200 ; a complaint record is added to t_user_complaint. VALID_Same _Complaint _Twice: Description: In this test a single user will send same complaient for another user twice. Verify: Make sure HTTP status code should be 200; a complaint record is added to t_user_complaint. Complaint _BAD_TYPE Description: The test will make a request with a review set to invalid value There will be 2 different requests with feedback Type equal to MAXFEEDBACKTYPE and TamperingCheating +1. Verify:  The HTTP status code should be 500 and X-Err = 0x80158002 and the review does not get updated in db. Invalid_Sender Description: The test will make a request with a review sent by invalid Sender  Verify:  The HTTP status code should be 500 and the review does not get updated in db. Invalid_Target_User Description: The test will make a request with a review sent by invalid target user Verify:  The HTTP status code should be 500 and the review does not get updated in db. Invalid_sender&target_Same Description: The test will make a request with a review sent and received by same user. Verify:  The HTTP status code should be 500 and the review does not get updated in db. INVALID_ServiceID_IN_ContentType Description: The test will make an invalid XRL request to the feed back server with invalid service in content type http header.  This test will make an XRLRequest with Content-Type: http header set to  xon/20 Verify:  The HTTP status code should be 500 and the review does not get updated in db. INVALID_ServiceID_IN_UserAgent Description: The test will make an Invalid XRL request to the feed back server with invalid service in User-Agent http header.  This test will make an XRLRequest with User-Agent: http header set to  20/1.6 Verify:  The HTTP status code should be 500 and the review does not get updated in db. POSTSIZE_0 Description: The test will make a valid XRL request to the feed back server with post body of size zero Verify:  The HTTP status code should be 500 with X-Err = 0x80150010 XONLINE_XRL_REQUEST _UNDERFLOW Description: The test will make an invalid XRL request to the feed back server. This test will contain data less then the minimum size of feedback packet size   Verify:  The HTTP status code should be 500 XONLINE_XRL_REQUEST _OVERFLOW Description: The test will make an Invalid XRL request to the feed back server. This test will contain data more then the max size of feedback packet size   Verify:  The HTTP status code should be 500 Test Cases for Get AggregateReviews:- public class GetAggregateReviews public ulong   targetPUID; public class AggregateReview  public ulong       targetPUID; public uint        count; public uint        type; public class GetAggregateReviewsReply public uint        hr; public uint        cReviews; public AggregateReview [] aggReviews; VALID_User_with_No_ Feedback_ Recived: Description: In this test an Aggregate review is requested for a user who has not received any feedback. Verify: Make sure HTTP status code should be 200; numbers of Reviews is zero. VALID_User_one_Review_Type: Description: In this test an Aggregate review is requested for a user who has only one review. Verify: Make sure HTTP status code should be 200; numbers of Reviews is 1 and the type is correct. VALID_User_Max_Review_Type: Description: In this test an Aggregate review is requested for a user who has atlest one review for all types Verify: Make sure HTTP status code should be 200; numbers of Reviews is 9 and make sure the count per type is correct. INVALID_ServiceID_IN_ContentType Description: The test will make an invalid XRL request to the feed back server with invalid service in content type http header.  This test will make an XRLRequest with Content-Type: http header set to  xon/20 Verify:  The HTTP status code should be 500 and the review does not get updated in db. INVALID_ServiceID_IN_UserAgent Description: The test will make an Invalid XRL request to the feed back server with invalid service in User-Agent http header.  This test will make an XRLRequest with User-Agent: http header set to  20/1.6 Verify:  The HTTP status code should be 500 and the review does not get updated in db. POSTSIZE_0 Description: The test will make a valid XRL request to the feed back server with post body of size zero Verify:  The HTTP status code should be 500 with X-Err = 0x80150010 XONLINE_XRL_REQUEST _UNDERFLOW Description: The test will make an invalid XRL request to the feed back server. This test will contain data less then the minimum size of feedback packet size   Verify:  The HTTP status code should be 500 XONLINE_XRL_REQUEST _OVERFLOW Description: The test will make an Invalid XRL request to the feed back server. This test will contain data more then the max size of feedback packet size   Verify:  The HTTP status code should be 500 TestCases for User Rating:- One_Prefer Description: Add a single Prefer to a user. Verify:  Make sure the rating is in the rang of 76 - 85 One_Avoid Description: Add a single Avoid to a user. Verify:  Make sure the rating is in the rang of 66  Rating Decay Description: For a user add 5 negative. Then update the games played =10, strangers=100 and then send a prefer Verify:  Make sure that the rating has improved. All Starts Description: IN this test caser try to add a single user in all 5 starts range by giving them a combination of positive and negative feedbacks. Verify:  Make that we have the rating is correct. M1 Milestone:  Configuration DB test cases:-   In this mile stone a central configuration store will be implemented as a relational tables stores in NPDB where All the server settings information will be stored. The feedback server needs to read configuration information from NPD instead of INI file.  On start up the server will load all configuration settings and save it locally in an XML file also the server will periodically poll NPDB for changes in configuration.  All configuration settings cannot be Automated I will be testing few manually. Automated test cases: Initialize_VerifyAuthData Using the management commands, verify that the VerifyAuthData setting matches what is in the configuration database after server has initialized. Initialize_SGMaxRetries Using the management commands, verify that the SGMaxReetries setting matches what is in the configuration database after server has initialized. Initialize_SGTimeoutMicroSecs Using the management commands, verify that the SGTimeoutMicroSec setting matches what is in the configuration database after server has initialized. Initialize_LOG_TYPE Using the management commands, verify that the log type setting matches what is in the configuration database after server has initialized. Initialize_LOG_Prefix Using the management commands, verify that the log prefix setting matches what is in the configuration database after server has initialized. Initialize_LOG_RotationTime Using the management commands, verify that the log rotationtime setting matches what is in the configuration database after server has initialized. Initialize_LOG_RotationSize Using the management commands, verify that the log rotationsize setting matches what is in the configuration database after server has initialized. Initialize_LOG_Enable Using the management commands, verify that the log enable setting matches what is in the configuration database after server has initialized. Initialize_MaxFeedbackTypes Using the management commands, verify that the MaxFeedbackTypes setting matches what is in the configuration database after server has initialized. Initialize_MinFeedbackServiceType Using the management commands, verify that the MaxFeedbackServiceTypes setting matches what is in the configuration database after server has initialized. Reconfigure_MaxFeedbackTypes Using the management commands, snapshot the current MaxFeedbackType setting then update the database with a new setting.  Again using the management commands, verify that the server has loaded the new setting. Reconfigure _MinFeedbackServiceType Using the management commands, snapshot the current MaxFeedbackServiceType setting then update the database with a new setting.  Again using the management commands, verify that the server has loaded the new setting. Reconfigure _ VerifyAuthData Using the management commands, snapshot the current VerifyAuthData setting then update the database with a new setting.  Again using the management commands, verify that the server has loaded the new setting. Reconfigure _ SGMaxRetries Using the management commands, snapshot the current SGMaxReetries setting then update the database with a new setting.  Again using the management commands, verify that the server has loaded the new setting. Reconfigure _ SGTimeoutMicroSecs Using the management commands, snapshot the current SGTimeoutMicroSec setting then update the database with a new setting.  Again using the management commands, verify that the server has loaded the new setting. Reconfigure _ LOG_TYPE Using the management commands, snapshot the current log type Setting then update the database with a new setting.  Again using the management commands, verify that the server has loaded the new setting. Reconfigure _ LOG_Prefix Using the management commands, snapshot the current log Prefix setting then update the database with a new setting.  Again using the management commands, verify that the server has loaded the new setting. Reconfigure _ LOG_ RotationTime Using the management commands, snapshot the current log RotationTime setting then update the database with a new setting.  Again using the management commands, verify that the server has loaded the new setting. Reconfigure _ LOG_ RotationSize Using the management commands, snapshot the current log RotationSize setting then update the database with a new setting.  Again using the management commands, verify that the server has loaded the new setting. Reconfigure _ LOG_ Enable Using the management commands, snapshot the current log enable setting then update the database with a new setting.  Again using the management commands, verify that the server has loaded the new setting. M2 Milestone: TBD Existing Reusable Test Cases VALID_NEG_NICKNAME: Description: The test will make a valid request with a feedback type of improper nickname Input:  Parameter Name Value Sender PUID Unique Number Target PUID Random number greater then zero Title ID Random number Feedback Type NEG_NICKNAME =0  Nickname  6 size Pankaj System State: An entry will be made in feedback log Verify: The HTTP status code should be 200. The client also logs the request which will be compared later for correctness. Valid_Non_Nick_Types Description: The test will make a valid request with a feedback type starting from 1 to max feedback type specified in the in the feedback configuration. Input:  There will be 6 different requests with only feedback type changed as given below in the table. Parameter Name Value Sender PUID Unique Number Target PUID Random number greater then zero Title ID Random number Feedback Type feedback will have value between 1 to MAXFEEDBACKTYPE Nickname  0 size System State:   An entry will be made in feedback log Verify:  The HTTP status code should be 200.  Valid_Reserved_Types Description: The test will make a valid request with a feedback type of XONLINE_FEEDBACK_DATA_MACHINE = 0xff  Input:  There will be 6 different requests with only feedback type changed as given below in the table. Parameter Name Value Sender PUID Unique Number Target PUID Random number greater then zero Title ID Random number Feedback Type XONLINE_FEEDBACK_DATA_MACHINE  = 0xFF Nickname  0 size System State:   An entry will be made in feedback log Verify:  The HTTP status code should be 200.  MAX_PACKET Description: The test will make a request with a feedback of improper nickname setting all parameters to max value Input:  Parameter Name Value Sender PUID  Unique Number Target PUID   0xFFFFFFFFFFFFFFFF Title ID          0xFFFFFFFF Feedback Type NEG_NICKNAME =0  Nickname    String of length (0xFF) System State: An entry will be made in feedback log Verify:  The HTTP status code should be 200.  XONLINE_E_FEEDBACK_BAD_TYPE Description: The test will make a request with a feedback set to invalid value Input:  There will be 2 different requests with feedback Type equal to MAXFEEDBACKTYPE and XONLINE_FEEDBACK_DATA_MACHINE-1. Parameter Name Value Sender PUID Unique Number Target PUID Random number Title ID Random number Feedback Type INVALID = MAXFEEDBACKTYPE & (XONLINE_FEEDBACK_DATA_MACHINE-1)  Nickname  System State: An entry should not be made in feedback log Verify:  The HTTP status code should be 500 and X-Err = 0x80158002 XONLINE_E_FEEDBACK_NULL_NICKNAME Description: The test will make an invalid request with a feedback type of improper nickname with NULL nick name. Input:  Parameter Name Value Sender PUID Unique Number Target PUID Random number Title ID Random number Feedback Type NEG_NICKNAME =0  Nickname  System State:  An entry should not be made in feedback log Verify:  The HTTP status code should be 500 and X-err =80158003 XONLINE_E_FEEDBACK_NEEDLESS_NICKNAME_TYPE Description: The test will make an invalid request with a feedback type of poor game play, screaming, harassment or verbal abuse, excessive cursing or lewdness, positive attitude and good game play with a nickname. Input:  There will be 6 different requests with only Feedback Type changed as given  below in the table. Parameter Name Value Sender PUID Unique Number Target PUID Random number Title ID Random number Feedback Type NEG_GAMEPLAY=1, NEG_SCREAMING=2, NEG_HARASSMENT=3, NEG_LEWDNESS=4, POS_ATTITUDE=5 POS_SESSION=6, Nickname  Random size String of random size set in above field. System State: An entry will be made in feedback log Verify:  The HTTP status code should be 200.  ERR_FEEDBACK _NULL_TARGET Description: The test will make a valid request of type NEG_NICKNAME with target PUID set to NULL. Input:   Parameter Name Value Sender PUID Unique Number Target PUID Title ID Random number Feedback Type NEG_NICKNAME =0  Nickname   size =1  System State:  An entry should not be made in feedback log Verify:  The HTTP status code should be 500 with X-Err = 0x80158001 SIZE5_NICKNAME_NULL Description: The test will make an invalid request for NEG_GAMEPLAY with the size of nickname =5 and Nickname = NULL. Input:  Parameter Name Value Sender PUID Unique Number Target PUID Random number Title ID Random number Feedback Type NEG_GAMEPLAY =1  Nickname   size =5  (empty) System State:  An entry should not be made in feedback log Verify:  The HTTP status code should be 500 with X-Err = 0x80158005 SIZE0_NICKNAME5 Description: The test will make an invalid request for NEG_GAMEPLAY with the size of nickname =0 and Nickname =  ABCDE Input:  Parameter Name Value Sender PUID Unique Number Target PUID Random number Title ID Random number Feedback Type NEG_GAMEPLAY =1  Nickname   size =0 NICKNAME=  ABCDE System State: An entry should be made in feedback log Verify:  The HTTP status code should be 200 SIZE1_MAXNAME_STRING Description: The test will make an invalid request for NEG_NICKNAME, with the size of nickname less then actual length of nickname. Input:  Parameter Name Value Sender PUID Unique Number Target PUID Random number Title ID Random number Feedback Type NEG_NICKNAME =0  Nickname   size =1  Nickname of size 255 System State: An entry should be made in feedback log Verify:  The HTTP status code should be 200. XONLINE_E_FEEDBACK_MISMATCH_NICKNAME_SIZE Description: The test will make an invalid request for NEG_NICKNAME, with the size of nickname greater then actual length of nickname. Input:  Parameter Name Value Sender PUID Unique Number Target PUID Random number Title ID Random number Feedback Type NEG_NICKNAME =0  Nickname   size =255  Nickname = System State:  An entry should not be made in feedback log Verify:  The HTTP status code should be 500 and X-Err = 80158004 MAXREQUEST_PLUS10 Description: The test will make a request with a feedback of improper nickname setting all parameters to max value with 10 extra bytes in the request Input:  Parameter Name Value Sender PUID  Unique Number Target PUID   0xFFFFFFFFFFFFFFFF Title ID          0xFFFFFFFF Feedback Type NEG_NICKNAME =0  Nickname    String of length (0xFF) + 10 bytes System State: An entry will be made in feedback log Verify:  The HTTP status code should be 200.  VALID_REQUEST_AT_DiskFull Description: The test will make a valid request with a feedback for Improper Nickname while the disk is full on server side. Input:  Parameter Name Value Sender PUID Unique Number Target PUID Random number Title ID Random number Feedback Type NEG_NICKNAME =0  Nickname  6 size Pankaj System State: An entry should not be made in feedback log Verify:  The HTTP status code should be 500 and X-err = 80158006 INVALID_ServiceID_IN_ContentType Description: The test will make an invalid XRL request to the feed back server with invalid service in content type http header.   Input:  This test will make an XRLRequest with Content-Type: http header set to  xon/20 System State: The system will reject the request Verify:  The HTTP status code should be 500 INVALID_ServiceID_IN_UserAgent Description: The test will make an Invalid XRL request to the feed back server with invalid service in User-Agent http header.   Input:  This test will make an XRLRequest with User-Agent: http header set to  20/1.6 System State:  The system will reject the request Verify:  The HTTP status code should be 500 INVALID_XRLRequest Description: The test will make an Invalid XRL request to the feed back server   Input:  This test will contain 2 request one WITH OUT the HTTP headers. User-Agent: 8/1.6 and another with out Content-Type: xon/8  System State: The system will reject the request Verify:  The HTTP status code should be 500 POSTSIZE_0 Description: The test will make a valid XRL request to the feed back server with post body of size zero Input:  Post request with XRL Headers only, Post body is empty.   System State: The system will reject the request Verify:  The HTTP status code should be 500 with X-Err = 0x80150010 XONLINE_XRL_REQUEST _UNDERFLOW Description: The test will make an invalid XRL request to the feed back server. This test will contain data less then the minimum size of feedback packet size   Input:  The size of HTTP body in XRL request less then 22 bit s, since the minimum length of Feedback request is 22 bits.  System State:   The system will reject the request Verify:  The HTTP status code should be 500 XONLINE_XRL_REQUEST _OVERFLOW Description: The test will make an Invalid XRL request to the feed back server. This test will contain data more then the max size of feedback packet size   Input:  The size of HTTP body in XRL request of10kb bit s, since the minimum length of Feedback request is 22 bits.  System State:   The system will reject the request Verify:  The HTTP status code should be 500 Stress Testing M1 Milestone: No stress testing will be performed for this milestone due to the functional changes being validated in this timeframe. M2 Milestone: TBD Revision History Changes made Author 6/7/2004 Release Live 1.0 PankajN 5/25/05 M4 Xbox 360 updated Pankajn Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  o`oO`o` gdrIy |l|l\l\|l|l gdesA @gdh] @gdh] @gdh] @gdh] scsUE gdesA |r|r|
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\gamerprofile\gamerprofile.doc ===
Microsoft Office Word 97-2003 Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKS Document Description Type of Document Status Date Created Gamer Profile Technical Design Technical Spec draft 2004-12-15T00:00:00ZXbox Online Spec Template Jerry Johnson Xbox Live Feature Spec Template tonychen Microsoft Office Word[Content_Types].xml _rels/.rels theme/theme/themeManager.xml theme/theme/theme1.xml w toc'v 3Vq%'#q :\TZaG IqbJ#x T[XF64 theme/theme/_rels/themeManager.xml.rels K(M&$R(.1 [Content_Types].xmlPK _rels/.relsPK theme/theme/themeManager.xmlPK theme/theme/theme1.xmlPK theme/theme/_rels/themeManager.xml.relsPK <?xml version="1.0" encoding="UTF-8" standalone="yes"?> <a:clrMap xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" bg1="lt1" tx1="dk1" bg2="lt2" tx2="dk2" accent1="accent1" accent2="accent2" accent3="accent3" accent4="accent4" accent5="accent5" accent6="accent6" hlink="hlink" folHlink="folHlink"/>IDATx^ ]U 53 GKnX+ VwP}E^6-u ; {gJ*[D 2XA{I7 %asY` bGIXvt W'?zf "U' ? ve)c) ]aj;7- v%aG) aFK/b= -t%zYqa jAym@ f1|A\ 6[Zj{ <+4zP  s}yCi G6L(L N'Y6@ #*4>8 G"~r)Aj4 C#d}$ dxr&4r,<z,41 '"<OO P;UYG d.Bon3/ &f+{: t[>66 l0$9d P}q0/ 80pxp qIYFQoh_ j7I]r GS"|0 *%DAp) PA,'V Xht*29 LtdJZ tv$KY H<IRC# _$/*P+ m#+ZlzA9 @@r4R IR,^<q 7{ovww 2r{9* DZ#V`$ v $`  uNS pv9_ZYX  ^o{e 12y|$  quwI bd;[{ ''&'' 9G'o` hsgsf N_J]|&[ ;~b43 Lm-XH =|+MU Y/sLlb:F 4'w80, 9y>3y 7j|q: r<S|a X!R9J M4h26A ^xZ9i i9W]_ n@pH0 MbjqP f+eFG R% ,U dtQ3: hbHc> Ln`oi TMTd@ hHL/)}m8 [}Oah pz$ld $Dn@i <1r@, n)T~h 4x(.I 21-WVV  N_ob edKWq >b9ijG |;q#8 a>bN2{Zr &\S{YSMicrosoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11Microsoft Corporation Page-1 Cloud 3-D box Datastore 60 degree double 60 degree single Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESSteve Lamb Steve Lamb Microsoft VisioVisio (TM) Drawing #/8/?M >S@#B: iz4}1f P,Eu9 ,U3Y&4Y&5 ?%?7? I?[; _!_3_E_W_i_{_ qVBBWA%SE o26B{ ?E5CWAo _m/"o4oFo ?!?3? E?W?i? o!O3OEO WOiO{O ?O?a6 O%O7O O`t@Qn} K}/DYo" *_<_N_`_r_A o,oD>o +/=/O/ ?$?6? H?Z?l?~?3{q O"O4OFO XOjO|O Qq&S) _$_6_H_Z_l_~_ o(o:oLo^opo /#/5/G/ ?(?:?L?Z O4OFO XOjO|O _*_<_N_ /,/>/ ?b/t/ ?-??? Q?c?u? O^OpO /_A_^ uO H! ). 2` 3. M& c$ oK Y!a, i $(sx"eL e$ vz ll cT ?:7J8 (]S-T "?2h$"?2." ru@gT @Mu@c @ow@'o @n#   RUew@e 6?H?Z:\ {7)')b $!$#+$.! :"bV[ w@?'w [C$SX ?@p"s UF!4" N,?>? uu n!5  (s-2e  v?0d!0  7O1R &&OSG V_Tl' 0nK0  +c,v:"q Mx ]cv o sp f~"Ro!rr  !a~ ip    v(s 7(/!J 5e9!J GBfBHR sp f~"o!r !a~ ip n  U v(s 4'O*^;D3R$G@ )gG@$ M> ]c< o s6 fD"R5!r8 q!aD i6    <(s ]n7"r rc0gX (q0)o 0oNe0o 0no0  2ee0e 0dHo0 9$#D1 ;#%{@'& !(q}-*!0 Y_?#q_ C&^/n E9kok_ %_t#e $"rArAQ <1[E<1m 0a"q0t :3GFbe">@ E"44GFD E"45GF "46GF %">x%"> GOF3z eK dI 6 0I dW gA e nJi lo"bK t!c Qps-8R 6Q(-D lGPU  HsKRe v]Pd?P p=uF5a _M'\w eK dI 6 0I dW gA e nJi lo"bK t!c Qps-8R HsKRe @v]Pd?P Z4+EP (34$*3 U2B}7 uHM <) /m"%e *1@*1 JQF9A ~I"9A ]sl^4m1 m1HKE M"91KE<h =oOoao /-/?/Q, ? ?Gc QocouowBI8 .^TIW #@Lh74s<< ?@A-Nf| jW1]a xAe z eC'1UU$ `'p\4} F.ok_ _p~_GN MoYoko}o A+x3{Q B{0<k#g =?^0u ?lOR) ,?>?P? K|xQ} ?[@~y :$HWq5 3%N</N- ]u^ `ufs !%4!1 yX,`_ 6|U//a O(O:O ,_>_PU H%a/.Xbox Live Gamer Profile data  SAVEDATE  \@ "M/d/yyyy"  \* MERGEFORMAT  10/17/2005 Spec Owners Client-side Contacts Content Contacts UI Contacts Program Management michalb Development slamb jimhelm Operations  Spec Status Draft   Reviewed - Closed Table of Contents Overview Gamer Profile is player-specific metadata stored about all Xenon users, including their preferences, activities and achievements.  The goal is to provide a high degree of personalization and identity for the user s Xenon world. Technically, most Gamer Profile components consist of attribute values generated by the Xenon client, either automatically or by user selection, and stored on the Live Servers in association with the user s account information.    Additionally, activity-based data, such as titles most recently played, the amount of time online, gamer creds, etc. are also stored in association with the user, but are populated by Presence activity. Associated gamercard specs are here:  HYPERLINK "http://team/sites/xbxe/Shared%20Documents/Forms/AllItems.aspx?RootFolder=%2fsites%2fxbxe%2fShared%20Documents%2fDigital%20Identity&View=%7b175ED0A5%2dCDE5%2d4AD1%2d9574%2dD6415576E260%7d"  http://team/sites/xbxe/Shared%20Documents/Forms/AllItems.aspx?RootFolder=%2fsites%2fxbxe%2fShared%20Documents%2fDigital%20Identity&View=%7b175ED0A5%2dCDE5%2d4AD1%2d9574%2dD6415576E260%7d Xenon M2 (Dec 04) The following items are shipped as part of the Xenon M2 release: XUserReadProfileSetting XUserWriteProfileSetting Profile settings front door apis (hosted by stats server) Offline profile settings Online profile settings Initial game setting IDs XPROFILE_GAMER_COUNTRY XPROFILE_GAMER_CRED XPROFILE_SETTING_CONTROLLER_INVERSION XPROFILE_SETTING_CONTROLLER_VIBRATION XPROFILE_TITLE_SPECIFIC1   XPROFILE_TITLE_SPECIFIC3 Xenon M3 (Apr 05) The following changes are slated for the Xenon M3 release: Profile permissions User per-title & summary activity Cred tracking Offline/online synchronization Family ID support Large item support (tiles, recordings, etc) Architecture and Description The architecture to support gamer profile is really complex, so I ve drawn a picture:  EMBED Visio.Drawing.11   Gamer profile data is populated from three sources:  Xbox.Com: users editing their profile online Xenon client: users editing their profile in the guide, or in game, as well as from synchronizing offline activity Presence: Online activity such as going online/offline, title being played, etc Gamer Profile data is consumed by: Xenon guide: users viewing their profile, profile of their friends/affiliates Xenon titles: retrieval of game settings   Xbox.com: users viewing their own profile, profile of their friends/affiliates/gamers from search results. Gamer Profile data is accessed via predefined property IDs.   Examples of such ids include CONTROLLER_INVERSION, RACING_TRIGGER_CONFIGURATION, RECENT_ACTIVITY, PREFERRED_LANGUAGE, etc.    There are also generic IDs for games to store their own settings, called GAME_SPECIFIC_PROFILE_1, GAME_SPECIFIC_PROFILE_2, etc.   The number of game specific profile settings are TBD.  Reading any of the non-game specific settings will return the user s global value for that setting.  For example, if the user tells the guide he prefers inverted controls, when a game reads CONTROLLER_INVERSION, it will return the user s selected preference.   The user may choose to override the setting for that specific game; the title should then call XUserProfileWrite(CONTROLLER_INVERSION) with the new value.   Any future calls by that specific title to retrieve the user s controller settings will return the new value, however any reads for that setting outside of that game will still return the configured global setting. Profile data is stored in UODB, in association with the gamer s account information.    A copy of this data is cached on the Xenon client. Gamer Profile APIs are hosted by the stats server.  Defaults, Globals and Title-Overrides Think of settings as having 3 layers: TITLE  - Titles can only change this layer GLOBAL  - The HUD can change this layer DEFAULT  - This layer is compiled in On request we look at the layers from top to bottom and return and first value we find.  The 3 layers only work on pre-defined setting ids, such as XPROFILE_SETTING_CONTROLLER_INVERSION. When the XUserReadProfileSettings API is called it first reads from the TITLE layer. If there's no setting yet, the API reads from the GLOBAL layer. If there's no GLOBAL settings yet then the API reads from the DEFAULT layer. When writing, the API always accesses the TITLE layer.  Only the internal SPI can write to the GLOBAL layer. The title-bit-buckets (XPROFILE_TITLE_SPECIFICx) are special in that they only exist at the TITLE level.  If a read of one of them fails then the API returns NO_VALUE. There are (n + 1) sets of these settings where n is the number of titles you've played.  There is 1 global set that we pull from when a title hasn't written their own override of the value.  Titles can only change their own overrides, but cannot modify the set that the HUD can. Title Activity The list of titles a user has played is stored with the user s client profile.   Each time a title and/or a profile is loaded, the current title is checked against the existing title list.  If this is the first time the title is played, the title is added to the list.   Otherwise, the play count for the existing title is incremented.    Any time an achievement is awarded, the title s record for the number of achievements and total cred is also updated.    The title s name is loaded from the title s compiled SPAC data file, in the user s current language.    If the user changes his language, the title s name is only updated when that title is loaded again.  Time played  (FEATURE CUT FROM XENON LAUNCH) One of the attributes tracked on a per-title basis is the number of hours played in a game title.   This value is the aggregate of two separate values: the number of minutes played offline, and the number of minutes played online.    Each value is calculated by keeping a time value in XAM memory, which represents the time that a new title starts, or when the value was last persisted to the MU.  The appropriate offline or online time played value for the title is persisted to the MU during the following events: MU is written to (i.e. a game is saved) SessionEnd() is called Title unloads The user logs on to, or logs off of, Live. The time played online is also tracked by the Presence server.   Presence will keep a record of the time when a user logs in to a title.   When the user logs off, the value for the time played online in user s online profile is updated with the new time.    Due to the fact that Presence will be better at tracking the actual time online, the server s version of this value will always overwrite the client s when synchronization occurs.    This allows us to maintain the most accurate representation of the time played online, while minimizing the number of database writes that occur on Live.  Title specific value We also expose a title-specific value for titles to show as another representation of the user s level, score, etc.    This value is set using XUserWriteProfileSetting with the id of XPROFILE_TITLE_SPECIFIC_SCORE, but stored and returned as a part of the metadata for each title value.  Title activity averages (FEATURE CUT FROM XENON LAUNCH) Shown with each user s title activity is the (approximate) average of all users on the service, i.e. average time played, average cred, average achievements, etc.    The average values will be stored in the same title table on the service, with a special user id of 0.   For the service-wide averages, the title id will also be 0.    These averages are calculated on a periodic interval (i.e. every 30 minutes) by a CRON plugin, which executes a stored procedure that figures out the average, and then writes the resulting value to each partition.   Because the values do not need to be exact, only the averages from a single partition will be calculated.    Also, in order to minimize the load, the calculation will be done against read-only replicas.  The average values are returned as a part of the recent title enumeration data.   Data synchronization Data synchronization takes place as a part of the following events: An offline profile is converted to online A user logs in A new title is loaded and one or more users are logged in A value is updated in the user s profile while online Changes to the live service are sent by XGI.   The call includes a list of global and title specific profile settings, any titles that have changed, and the time stamp from the last synchronization.   (note: the list of changes may be empty, however the SPI is still called to collect any changes made on the server).  The stats server writes these changes to the database (t_user_profile_settings and t_xprof_titles in uodb), and responds with any data that changed since the last timestamp provided by the client, along with the timestamp of the most recent change.   These changes and the new timestamp are written to the user s local profile.  Note: changes to the time spent online overall and for a specific title are not written to the server.   However, changes to this property are sent from the server and cached on the client.  Permissions There are 3 areas of permissions that can be controlled by the user: Games I ve played Service activity User created content (motto, greeting, etc) Each of these can be controlled by the owner using the following exposure levels: Everyone Friends and Affiliates Friends No one The exposure level for each of the areas is stored in profile settings as XPROFILE_PERMISSIONS.   The i_permission_flags column in npdb..t_profile_properties indicates what type each listed property is, dictating which permission should be used to control exposure of the property.  The ability for a user to view the profile of another user is controlled via the server implementation of XUserReadProfileSettings.    When the server receives this request, the target user s chosen exposure level is read, then compared against the exposure level of the given setting.   If the permissions require a friends and/or affiliates relationship, the stats server queries the presence server for the relationship between the two users.  Issue: Should the client send up an indicator if the user is friend?   This information is already known by the client, and will save the round-trip between the stats and presence server.   Can we do the same for affiliates?  If the requesting user is not allowed to view the data, the server returns a blank value with the source of PERMISSIOND_DENIED.  Public APIs for Games //----------------------------------------------------------------------------- //  Profile Setting APIs //----------------------------------------------------------------------------- XBOXAPI DWORD WINAPI XUserWriteProfileSettings(     IN DWORD                    dwUserIndex,        // User index of player whose settings are written     IN DWORD                    dwNumSettings,      // Count of settings in pSettings     IN const PXUSER_PROFILE_SETTING pSettings,      // Pointer to array of settings to set     IN OPTIONAL PXOVERLAPPED        pXOverlapped     ); XBOXAPI DWORD WINAPI XUserReadProfileSettings(     IN DWORD                    dwUserIndex,        // User index of requesting user     IN DWORD                    dwNumSettingIds,    // Count of setting ids in pdwSettingIds     IN const DWORD*             pdwSettingIds,      // Pointer to array of settings to retrieve     IN OUT DWORD*               pcbResults,         // Size of pResults buffer.  If *pchResults is 0 then required size is returned.     IN OUT PXUSER_READ_PROFILE_SETTING_RESULT pResults,     IN OPTIONAL PXOVERLAPPED    pXOverlapped     ); XBOXAPI DWORD WINAPI XUserReadProfileSettingsByXuid(     IN DWORD                    dwUserIndexRequester,   // User index of requesting user.  Used for permission checking.     IN DWORD                    dwNumFor,           // Count of XUIDs in pxuidFor     IN const XUID*              pxuidFor,           // Pointer to array of XUIDs to request settings for     IN DWORD                    dwNumSettingIds,    // Count of setting ids in pdwSettingIds     IN const DWORD*             pdwSettingIds,      // Pointer to array of settings to retrieve     IN OUT DWORD*               pcbResults,         // Size of pResults buffer.  If *pchResults is 0 then required size is returned.     IN OUT PXUSER_READ_PROFILE_SETTING_RESULT pResults,     IN OPTIONAL PXOVERLAPPED    pXOverlapped     ); #define XUserGetProfileSettingMaxSize(dwSettingId)  ((dwSettingId & 0x0fff0000) >> 16) #define XUserGetProfileSettingType(dwSettingId)     ((dwSettingId & 0xf0000000) >> 28) XUSER_PROFILE_SOURCE is used to give information about whether or not a setting could be read at all and, if so, where the value came from. typedef enum _XUSER_PROFILE_SOURCE     XSOURCE_NO_VALUE = 0,     // There is no value to read.     XSOURCE_DEFAULT,     // The value was read from the defaults.  It has not been     // over-ridden by the user at a system or at a title level.     XSOURCE_TITLE,     // The value has been over-ridden by the title and was read from that store.     XSOURCE_PERMISSION_DENIED,     // The requesting user does not have permission to read this value. } XUSER_PROFILE_SOURCE; typedef struct _XUSER_PROFILE_SETTING     XUSER_PROFILE_SOURCE    source;     union                                   // Used only on read, ignored for write     {         DWORD               dwUserIndex;    // Valid only after local read         XUID                xuid;           // Valid only after online read     } user;     DWORD                   dwSettingId;     union     {         struct         {             DWORD   cbData;             BYTE*   pbData;         }               binary;     // XUSER_DATA_TYPE_BINARY         DWORD           dwData;     // XUSER_DATA_TYPE_INT32         ULONGLONG       qwData;     // XUSER_DATA_TYPE_INT64         double          dblData;    // XUSER_DATA_TYPE_DOUBLE         struct         {             DWORD   cbData;             LPWSTR  wszData;         }               string;     // XUSER_DATA_TYPE_UNICODE         float           fData;      // XUSER_DATA_TYPE_FLOAT     }; } XUSER_PROFILE_SETTING, *PXUSER_PROFILE_SETTING; typedef struct _XUSER_READ_PROFILE_SETTING_RESULT     DWORD                  dwSettingsLen;     XUSER_PROFILE_SETTING *pSettings; } XUSER_READ_PROFILE_SETTING_RESULT, *PXUSER_READ_PROFILE_SETTING_RESULT; Private APIs for Guide (new for M3) // XUSER_TITLE_PROFILE defines holds some metadata info about a title typedef struct      DWORD dwTitleId;     LPWSTR pszTitleName;     DWORD dwCreds;     DWORD dwTimePlayedOffline;     DWORD dwTimePlayedOnline;     DWORD dwSessionsPlayed;     DWORD dwTitleSpecificValue; } XUSER_TITLE_PROFILE, *PXUSER_TITLE_PROFILE; // XUserCreatePlayedTitleEnumerator creates an enumerator for listing // a user's titles.   It can be called for either a local or an online user. // The list of titles returned are sorted by the date most recently played. XBOXAPI DWORD WINAPI XUserCreatePlayedTitleEnumerator(     IN DWORD        dwUserIndexRequester,   // User index of requesting user.  Used for permission checking.     IN const XUID*  pXuidFor,               // User XUID to request settings for     IN DWORD        dwStartingIndex,        // Number of achievements to skip before enumerating     IN DWORD        cItem,                  // Number of achievements to retrieve per enumeration     OUT DWORD*      pcbBuffer,              // Size of buffer needed to enumerate     OUT HANDLE*     ph                      // Handle to created enumerator     ); Public Web Service APIs for Partners Private Web Service APIs for Xbox.com Xbox.com will call the same APIs exposed to titles & the guide. Database Schema Property IDs have a type definition associated with them.  This defines the type, access pattern and permissions associated with the property.    It is an error to attempt to set or get a property ID that doesn t exist in this table.  This description data is stored in NPDB. npdb..t_profile_properties I_property_id Property id vc_type Data type of the property vc_name Friendly name of the property vc_location Where the property value is stored I_permissions_flags set of flags that dictates the permissions associated with the property.   This includes flags to guide parental controls as well as exposure to other users Most profile data will be stored as opaque name / value pairs associated with the user and title (when applicable): uodb..t_user_properties bi_user_id User PUID I_title_id Title id for title-specific stuff (0 if global) I_property_id Property bin_value Property value The list of titles a user has played, and the metadata for each of those, is stored in a separate list (note: game stats and achievements are stored separately): uodb..t_xmsg_user_titles bi_user_id User PUID I_title_id Title id played dt_last_logon Last known time this title was played i_flags Flags used for messaging I_sessions_played Number of sessions played in this title I_minutes_played_online Number of minutes played online I_minutes_played_offline Number of minutes played offline I_title_score Some title-specific value Activity information is special; in order to track attributes like  time played last week , we track the recent activity on a per-day  basis.    Periodically, a job will then go through an clean up any information that has fallen off the rolling time window. uodb..t_user_activity bi_user_id User PUID dt_day Date for which the activity is being tracked I_title_id Title id (0 if global) I_property_id Property I_property_value Property value (note: only numeric values valid here) Server Components Design Gamer Profile functionality will be implemented as a part of the Stats front door.  Upon startup, or when a  reload  command is issued, the list of properties in npdb..t_profile_properties is loaded and cached. UserSetting object     // UserSetting describes a single setting.     // It is used in both setting and getting values.     //     public class UserSetting : WireData     {         public uint Source = XOn.XSOURCE_NO_VALUE;         public ulong UserId = 0;                  public uint SettingId = 0;                  [WireInfo(Max=XOn.XONLINE_MAX_SETTING_VALUE_BYTES)]         public uint ValueLen = 0;         [WireInfo(SizeParam="ValueLen")]                 public byte[] Value = null;     } UserTitle object     public class UserTitle : WireData     {         public uint TitleId;         [WireInfo(Max=XOn.XONLINE_MAX_TITLE_NAME_LEN)]         public ushort TitleNameLen;         [WireInfo(SizeParam="TitleNameLen")]         public string TitleName;                  public uint NumCreds;         public uint NumSessionsPlayed;         public uint MinutesPlayedOffline;         public uint MinutesPlayedOnline;         public uint TitleScore;     } /xstats/SyncSettings.ashx  NOTE: wire protocol has changed for M3     // SyncSettings updates one or more of a single user's      // profile settings.       //     public class SyncSettingsRequest : XRLObject2     {         public uint TitleId;         public ulong UserId;         [WireInfo(ArraySize=8)]         public byte[] SettingsVersion;         [WireInfo(ArraySize=8)]         public byte[] TitlesVersion;                  [WireInfo(Max=XOn.XONLINE_MAX_SETTING_COUNT)]         public uint SettingsLen;         [WireInfo(SizeParam="SettingsLen")]                 public UserSetting[] Settings;         [WireInfo(Max=XOn.XONLINE_MAX_SYNC_TITLE_COUNT)]         public uint UserTitlesLen;         [WireInfo(SizeParam="UserTitlesLen")]                 public UserTitle[] UserTitles;                  public string GetXRL()         {             return "/xstats/syncsettings.ashx";         }     }     public class SyncSettingsResponse : XRLObject2     {         [WireInfo(ArraySize=8)]         public byte[] Version;         [WireInfo(Max=XOn.XONLINE_MAX_SETTING_COUNT)]         public uint SettingsLen = 0;         [WireInfo(SizeParam="SettingsLen")]                 public UserSetting[] Settings = null;         [WireInfo(Max=XOn.XONLINE_MAX_SYNC_TITLE_COUNT)]         public uint UserTitlesLen;         [WireInfo(SizeParam="UserTitlesLen")]                 public UserTitle[] UserTitles;     }     This API takes a set of properties and values to write to the database, and returns a list of properties and titles that have changed since the title last synchronized. Each setting to be updated is first enumerated and compared against the list of properties configured in NPDB.    If a property doesn t exist, or isn t one that can be set via this API (as dictated by the i_permissions_flags in t_profile_properties), the API returns in error. Otherwise, each of the settings to be set is consolidated into groups based on the vc_location field of t_profile_properties.   A single stored procedure call is then made to update the list of properties for each location, thus reducing the number of stored proc calls to the number of unique locations for the properties being set. Settings set via a specific (non-guide) title id are set for that specific title, that is, the title_id field of t_user_properites will contain the specific title id.  Title updates are written wholesale to the database, with the exception of the UserTitles.MinutesPlayedOnline field.   The client s value for this field is ignored.   The list is cumulative; any titles listed in the UserTitles array and not in t_user_titles are added, and any existing titles are updated. The API returns any settings and title values that have changed (have a dt_change_datetime value greater than the value specified by the client), as well as the latest Version values to be used in the next sync. /xstats/ReadSettings.ashx     // ReadSettings retrieves a list of settings for a list     // of users.     //     public class ReadSettingsRequest : XRLObject2     {         public uint TitleId;         public ulong UserId;                  [WireInfo(Max=XOn.XONLINE_MAX_SETTING_USERS)]         public uint ForUserIdsLen;         [WireInfo(SizeParam="ForUserIdsLen")]                 public ulong[] ForUserIds;                  [WireInfo(Max=XOn.XONLINE_MAX_SETTING_COUNT)]         public uint SettingIdsLen;         [WireInfo(SizeParam="SettingIdsLen")]                 public uint[] SettingIds;                  public string GetXRL()         {             return "/xstats/readsettings.ashx";         }              }     public class ReadSettingsResponse : XRLObject2     {         [WireInfo(Max=XOn.XONLINE_MAX_SETTING_COUNT)]         public uint SettingsLen = 0;                  [WireInfo(SizeParam="SettingsLen")]                 public UserSetting[] Settings = null;              }     The list of properties to be retrieved is validated against the cached list of properties from NPDB, then consolidated into groups to be retrieved, similar to SyncSettings     If the properties are being retrieved for an alternate user, and any of the requested properties have a non-zero value for i_permission_flags, the server also retrieves the value for XPROFILE_PERMISSIONS for each user in the ForUserIds array.    If the user s permission settings require friend or affiliate relationship, a request is made to the Profile server to check if the user is a friend or affiliate of each of the users in the ForUserIds array.   Any settings for which the user does not wish to expose the value, either due to lack of relationship or the exposure has been configured  to hidden from everyone, the value for the setting set to zero and the Source is set to XSOURCE_PERMISSION_DENIED.  /xstats/EnumeratePlayedTitles.ashx     public class EnumPlayedTitlesRequest : XRLObject2     {         public ulong UserId;         public ulong ForUserId;         public ulong StartingIndex;         public ulong MaxTitles;     }     public class EnumPlayedTitlesResponse : XRLObject2     {         UserTitle ServiceAverage;                  [WireInfo(Max=XOn.XONLINE_MAX_PLAYED_TITLE_COUNT)]         public uint TitlesLen;         [WireInfo(SizeParam="TitlesLen")]         public UserTitle[] TitlesPlayed;         [WireInfo(SizeParam="TitlesLen")]         public UserTitle[] TitleAverages;     } This returns an ordered list of titles from uodb..t_user_titles, ordered by the date last played, and starting at the index provided by the StartingIndex field in the request.   This API is limited to the Guide only. If the UserId in the request does not match the ForUserId value, the server first retrieves the setting for XPROFILE_PERMISSIONS for ForUserId.    If either the  service activity games played  permissions require a friend or affiliate, a request is set to the presence server to check the relationship of the UserId to the ForUserId. If the target user s permission does not allow for exposure for games they ve played, XONLINE_E_STAT_PERMISSION_DENIED is returned.      Issue: how is the title list impacted by  service activity  setting? Configuration Parameters Nothing special (at least not yet) Management Commands flushcache: flushes the cached copy of t_profile_properties.    This should be called whenever the list profile proerties change (i.e. a new title is posted). Events No new event ids are needed.   The standard logging mechanism (EventBuilder.LogEvent()) will be used to capture SG Info and API header information.   Performance Counters Setup Nothing special, we just need to ensure npdb gets initialized w/ any global and title-specific properties after each new rebuild. Web Client Components for Xbox.com If needed: Xbox.com dev team only. Describe the HTML structure, the Java scripts and the CSS structure used.  Interesting Test Cases If needed: If you have any non-obvious test cases that you would like the test team to test, mention it here. Security Users and title ids, when provided, will be verified against SG info.   Access permissions set by the user will be enforced by the front-door, so that other users will not be able to retrieve information for those users unless allowed by the owner of the data.  Production Upgrade  In order to have activity data reflect historical (i.e. xbox 1) activity, UODB will need to be pre-populated with user s data during the Xenon upgrade process.   It s TBD if we ll take on this chunk of work; just calling it out here for completeness. Reporting Data of interest here will be contained in the t_user_properties, t_user_activity and t_user_titles tables.   The data here can be translated by examining the metadata descriptions in npdb..t_profile_properties table. TitleMgr Impact TitleMgr will need to import title-specific properties into npdb..t_profile_properties.    These properties will be specified in the Game Configuration XML file generated via XLAST.    Tools None needed. Microsoft Confidential. Unpublished work.   Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  yhZhIh gdCA/ gdCA/ |p|h|h gdM q gd?G@ gd?G@ xpZH" gd?G@ gd?G@ ~shaZh gd(/f gd}E~ gd}E~ gdrA' gdrA'
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\comps\test\Comps Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Jacob Repp Xbox Live Test Plan Template.dot Jacob Repp Microsoft Office WordbjbjqPqP \o "1-3" \h \z \u   HYPERLINK \l "_Toc74121912"  Table of Contents  PAGEREF _Toc74121912 \h   HYPERLINK \l "_Toc74121913"  Summary  PAGEREF _Toc74121913 \h   HYPERLINK \l "_Toc74121914"  Schedule  PAGEREF _Toc74121914 \h   HYPERLINK \l "_Toc74121915"  Goals  PAGEREF _Toc74121915 \h   HYPERLINK \l "_Toc74121916"  Non-Goals  PAGEREF _Toc74121916 \h   HYPERLINK \l "_Toc74121917"  Related Documents  PAGEREF _Toc74121917 \h   HYPERLINK \l "_Toc74121918"  Functional Testing  PAGEREF _Toc74121918 \h   HYPERLINK \l "_Toc74121919"  Summary  PAGEREF _Toc74121919 \h   HYPERLINK \l "_Toc74121920"  Test Case Matrix  PAGEREF _Toc74121920 \h   HYPERLINK \l "_Toc74121921"  7.2.1 New Test Cases per Milestone  PAGEREF _Toc74121921 \h   HYPERLINK \l "_Toc74121922"  7.2.2 Existing Reusable Test Cases  PAGEREF _Toc74121922 \h   HYPERLINK \l "_Toc74121923"  Stress Testing  PAGEREF _Toc74121923 \h   HYPERLINK \l "_Toc74121924"  Revision History  PAGEREF _Toc74121924 \h  Summary M1 Milestone: server is going to have configuration database changes and will need to be tested in this area. In addition more teams testing and negative test cases should be added to the test matrix. Additionally I would like to add more negative test cases and positive test scenarios for teams, arbitration, stats, and messaging integration. M2 Milestone: TBD Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M1 Milestone: Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases. There is no required stress testing for M1 so the  Test Stress Code Complete  and  Test Stress Complete  deliverables do not apply to this milestone. M2 Milestone: TBD Goals M1 Milestone:  Full negative test cases for competitions. Full integration cases for teams, arbirtation  and messaging. Cleanup and maintainence of existing test cases. Additional test cases for configuration database.  M2 Milestone: TBD Non-Goals M1 Milestone:  It is not a goal of these tests to ensure the correct operation of the underlying query server.  M2 Milestone: TBD Related Documents Functional Testing Summary Competition is a complex service built upon a query wrapper server (query) and a scheduling server (cron). Competitions integrates with a number of other services including, messaging, teams, xcache and arbitration. Competitions is also extremely configuration from the publisher perpsective and in the future will require more permutations of additional publisher modeled datasets. Test Case Matrix New Test Cases per Milestone M1 Milestone: Config database changes TBD. M2 Milestone: TBD Existing Reusable Test Cases CompetitionCreate P_COMP_CREATE_COMP_MAINLINE P_COMP_CREATE_VALIDATE_NORMAL_PUBLIC_SE P_CREATE_COMP_DISABLED_REMINDERS N_CREATE_COMP_INTERVAL_1_FREQ_0_DAYMASK_0 N_CREATE_COMP_INTERVAL_1_FREQ_60_DAYMASK_0 P_CREATE_COMP_INTERVAL_1_FREQ_120_DAYMASK_0 P_CREATE_COMP_INTERVAL_1_FREQ_1200_DAYMASK_0 P_CREATE_COMP_INTERVAL_2_FREQ_60_DAYMASK_0 P_CREATE_COMP_INTERVAL_2_FREQ_65535_DAYMASK_0 N_CREATE_COMP_INTERVAL_2_FREQ_0_DAYMASK_0 P_CREATE_COMP_INTERVAL_2_FREQ_10_DAYMASK_0 P_CREATE_COMP_INTERVAL_2_FREQ_30_DAYMASK_0 P_CREATE_COMP_INTERVAL_2_FREQ_60_DAYMASK_0 P_CREATE_COMP_INTERVAL_2_FREQ_3600_DAYMASK_0 P_CREATE_COMP_INTERVAL_2_FREQ_65535_DAYMASK_0 N_CREATE_COMP_INTERVAL_3_FREQ_0_DAYMASK_0 P_CREATE_COMP_INTERVAL_3_FREQ_1_DAYMASK_0 P_CREATE_COMP_INTERVAL_3_FREQ_2_DAYMASK_0 P_CREATE_COMP_INTERVAL_3_FREQ_3_DAYMASK_0 P_CREATE_COMP_INTERVAL_3_FREQ_4_DAYMASK_0 P_CREATE_COMP_INTERVAL_3_FREQ_12_DAYMASK_0 P_CREATE_COMP_INTERVAL_3_FREQ_23_DAYMASK_0 P_CREATE_COMP_INTERVAL_3_FREQ_25_DAYMASK_0 P_CREATE_COMP_INTERVAL_3_FREQ_65535_DAYMASK_0 N_CREATE_COMP_INTERVAL_4_FREQ_0_DAYMASK_0 P_CREATE_COMP_INTERVAL_4_FREQ_1_DAYMASK_0 P_CREATE_COMP_INTERVAL_4_FREQ_2_DAYMASK_0 P_CREATE_COMP_INTERVAL_4_FREQ_30_DAYMASK_0 P_CREATE_COMP_INTERVAL_4_FREQ_60_DAYMASK_0 P_CREATE_COMP_INTERVAL_4_FREQ_365_DAYMASK_0 N_CREATE_COMP_INTERVAL_5_FREQ_0_DAYMASK_0 P_CREATE_COMP_INTERVAL_5_FREQ_1_DAYMASK_0 P_CREATE_COMP_INTERVAL_5_FREQ_2_DAYMASK_0 P_CREATE_COMP_INTERVAL_5_FREQ_7_DAYMASK_0 P_CREATE_COMP_INTERVAL_5_FREQ_52_DAYMASK_0 P_CREATE_COMP_INTERVAL_5_FREQ_65535_DAYMASK_0 N_CREATE_COMP_INTERVAL_6_FREQ_0_DAYMASK_0 P_CREATE_COMP_INTERVAL_6_FREQ_1_DAYMASK_0 P_CREATE_COMP_INTERVAL_6_FREQ_2_DAYMASK_0 P_CREATE_COMP_INTERVAL_6_FREQ_6_DAYMASK_0 P_CREATE_COMP_INTERVAL_6_FREQ_365_DAYMASK_0 P_CREATE_COMP_INTERVAL_6_FREQ_1000_DAYMASK_0 P_CREATE_COMP_INTERVAL_6_FREQ_65535_DAYMASK_0 N_CREATE_COMP_INTERVAL_7_FREQ_0_DAYMASK_0 P_CREATE_COMP_INTERVAL_7_FREQ_1_DAYMASK_0 P_CREATE_COMP_INTERVAL_7_FREQ_2_DAYMASK_0 P_CREATE_COMP_INTERVAL_7_FREQ_12_DAYMASK_0 P_CREATE_COMP_INTERVAL_7_FREQ_24_DAYMASK_0 N_CREATE_COMP_INTERVAL_8_FREQ_0_DAYMASK_0 P_CREATE_COMP_INTERVAL_8_FREQ_1_DAYMASK_0 P_CREATE_COMP_INTERVAL_8_FREQ_3_DAYMASK_0 P_CREATE_COMP_INTERVAL_8_FREQ_4_DAYMASK_0 N_CREATE_COMP_INTERVAL_9_FREQ_0_DAYMASK_0 P_CREATE_COMP_INTERVAL_9_FREQ_1_DAYMASK_0 P_CREATE_COMP_INTERVAL_9_FREQ_12_DAYMASK_0 CompetitionSearch P_COMP_SEARCH_ATTRS P_COMP_SEARCH_PAGING P_COMP_SEARCH_SE_MY_COMPS P_COMP_SEARCH_SE_STANDINGS P_COMP_SEARCH_SE_COMPS_AVAIL CompetitionSubmitResults P_COMP_SUBMIT_RESULTS_ARB N_COMP_SUBMIT_RESULTS_ARB_MALFORMED P_COMP_SUBMIT_RESULTS_DIRECT CompetitionForfeit P_COMP_FORFEIT P_COMP_FORFEIT_WITH_PLAYAHEAD P_COMP_FORFEIT_WITH_REVERSE_PLAYAHEAD P_COMP_FORFEIT_WITH_CHAINED_PLAYAHEAD CompetitionJoin P_COMP_JOIN_PUBLIC P_COMP_JOIN_PRIVATE P_COMP_JOIN_MANUAL_SEED P_COMP_JOIN_SLOT_EDGE_CASES P_COMP_JOIN_SLOT_BYES P_COMP_JOIN_NEGATIVE_VALUES_IN_START_END_BUG P_COMP_JOIN_COMPLETE_IN_FIRST_ROUND N_COMP_JOIN_MULTIPLE_TIMES N_COMP_JOIN_PUBLIC_NO_PUBLIC_SLOTS N_COMP_JOIN_PRIVATE_NO_PRIVATE_SLOTS N_COMP_JOIN_PUBLIC_FULL N_COMP_JOIN_PRIVATE_FULL N_COMP_JOIN_INVALID_ENTITY_ID N_COMP_JOIN_BAD_PUID N_COMP_JOIN_BAD_TITLE_ID P_COMP_JOIN_EXTRA_DATA P_COMP_JOIN_EXTRA_DATA_SEED_SORT N_COMP_JOIN_EXTRA_DATA_DUPLICATE_VALUES N_COMP_JOIN_EXTRA_DATA_NON_EXISTANT_ATTRIBUTE N_COMP_JOIN_EXTRA_DATA_SYSTEM_ATTRIBUTE P_COMP_JOIN_WITHDRAW_JOIN_AGAIN CompetitionWithdraw P_COMP_WITHDRAW P_COMP_WITHDRAW_JOIN_WITHDRAW P_COMP_WITHDRAW_ALL_PLAYERS CompetitionCheckin P_COMP_CHECKIN N_COMP_CHECKIN_EARLY N_COMP_CHECKIN_LATE P_COMP_CHECKIN_COMP_START Competition Scheduled Cleanup P_GRACEFUL_CLEANUP P_FAILED_SLOT_CLEANUP_TEST P_CLEANUP_BEFORE_PREGRESSION Cron Integration P_COMP_CRON_MULTI_THREADED_PROCESS_TIMING P_COMP_CRON_TIMER_ABUSE Stats Integration P_COMP_STATS_CREATE_LEADERBOARDS Arbitration Integration P_COMP_ARB_UPDATE_USER_TRUST_RATINGS P_COMP_ARB_SUBMIT_RESULTS P_COMP_ARB_BOTH_PLAYERS_SKIP_ROUND Teams Integration P_COMP_TEAMS_FULL_TOURNEY Messaging Integration P_COMP_MSG_REMINDERS Competitions Downtime Handler P_COMP_DOWNTIME_AUTO_PROGRESSION P_COMP_DOWNTIME_PROGRESSION P_COMP_DOWNTIME_ENTRANT_CHECKIN P_COMP_DOWNTIME_ENTRANT_SUBMIT P_COMP_DOWNTIME_ENTRANT_WITHDRAW P_COMP_DOWNTIME_ENTRANT_EJECT P_COMP_DOWNTIME_ENTRANT_FORFEIT P_COMP_DOWNTIME_CLEAR_DOWNTIME Stress Testing M1 Milestone: Since minimal changes are being performed for this milestone, even though there is no official stress testing requirement, it is my goal to establish a TPS baseline for this version of the code. M2 Milestone: TBD Revision History Changes made Author First Draft Jacob Repp Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  gdrIy {wowkc_[W[_OH_ gdH[u gdH[u gdesA gdH[u gdH[u gdH[u gdH[u gdH[u Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\gamerprofile\test\XBL GamerProfile test plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Pankaj Naik XBL GamerProfile Test Plan Pankaj Naik Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags PlaceName urn:schemas-microsoft-com:office:smarttags PlaceType VqPpve of Contents  TOC \o "1-3" \h \z \u   HYPERLINK \l "_Toc97960572"  Table of Contents  PAGEREF _Toc97960572 \h   HYPERLINK \l "_Toc97960573"  Summary  PAGEREF _Toc97960573 \h   HYPERLINK \l "_Toc97960574"  Schedule  PAGEREF _Toc97960574 \h   HYPERLINK \l "_Toc97960575"  Goals  PAGEREF _Toc97960575 \h   HYPERLINK \l "_Toc97960576"  Non-Goals  PAGEREF _Toc97960576 \h   HYPERLINK \l "_Toc97960577"  Related Documents  PAGEREF _Toc97960577 \h   HYPERLINK \l "_Toc97960578"  Functional Testing  PAGEREF _Toc97960578 \h   HYPERLINK \l "_Toc97960579"  Protocol Definatio  PAGEREF _Toc97960579 \h   HYPERLINK \l "_Toc97960580"  7.1.1 User Settings  PAGEREF _Toc97960580 \h   HYPERLINK \l "_Toc97960581"  7.1.2 User Titles  PAGEREF _Toc97960581 \h   HYPERLINK \l "_Toc97960582"  7.1.3 Achivements  PAGEREF _Toc97960582 \h   HYPERLINK \l "_Toc97960583"  7.1.4 Sync ALL  PAGEREF _Toc97960583 \h   HYPERLINK \l "_Toc97960584"  Test Case Matrix  PAGEREF _Toc97960584 \h   HYPERLINK \l "_Toc97960585"  7.2.1 M3 Milestone  PAGEREF _Toc97960585 \h   HYPERLINK \l "_Toc97960586"  7.2.2 M2 Milestone  PAGEREF _Toc97960586 \h   HYPERLINK \l "_Toc97960587"  Stress Testing  PAGEREF _Toc97960587 \h  Summary  Gamer Profile is player-specific metadata stored about all Xenon users, including their preferences, activities and achievements.  The goal is to provide a high degree of personalization and identity for the user s Xenon world. Technically, most Gamer Profile components consist of attribute values generated by the Xenon client, either automatically or by user selection, and stored on the Live Servers in association with the user s account information.    Additionally, activity-based data, such as titles most recently played, the amount of time online, gamer creds, etc. are also stored in association with the user, but are populated by Presence activity. Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M3 Milestone:  In this milestone I will be implementing positive and negative test cases for the API s sync/read Gamer Profile settings to test permission and parental controls along with sync/eum titles. No stress testing will be done M2 Milestone:  In this milestone I will be implementing positive and negative test cases for the API s set/read Gamer Profile settings. No stress testing will be done Goals M3 Milestone:  Write all positive and Negative test cases for Set/Read Profile Properties with permission. Write all positive and Negative test cases for Set/Read title list. M2 Milestone:  Write all positive and Negative test cases for Set/Read Profile Properties. Non-Goals Related Documents Gamer Profile Spec ($corext\private\doc\server\gamerprofile) Functional Testing The gamer profile server has two main APIs that control the setting and getting of gamer profile settings. Gamer profile settings are pre defined settings which have well-known ID s that never changes. Some setting could be overridden by titles.  Following list is not complete; items may be added or removed from the list. Set in Guide Override in title allowed Title Gamer Zone  Country Language Gender Greeting Controller Inversion Controller Vibration Title data1 Titledata2 Titledata3 Default game Character name Protocol Definatio User Settings This API takes is used to set and get properties and values for a user.    Each user setting to be set is enumerated and compared against the list of properties configured in NPDB.    If a user setting doesn t exist in NPDB the API returns in error. XRL DEFINATION         public const ushort XONLINE_MAX_SETTING_VALUE_BYTES = 1000;         public const ushort XONLINE_MAX_SETTING_COUNT       = 255;         public const ushort XONLINE_MAX_SETTING_USERS       = 32;     // UserSetting describes a single setting.     // It is used in both setting and getting values.      public class UserSetting      {         public uint Source;         public uint userId;         public uint SettingId;         public uint ValueLen;         public byte[] Value;     } Read Settings     // ReadSettings retrieves a list of settings for a list of users.     public class ReadSettingsRequest      {         public uint TitleId;         public ulong UserId;         public uint ForUserIdsLen;         public ulong[] ForUserIds;         public uint SettingIdsLen;         public uint[] SettingIds;              }     public class ReadSettingsResponse      {         public uint SettingsLen = 0;         public UserSetting[] Settings = null;              }     Sync Settings     // WriteSettings updates one or more of a single user s profile settings.       public class SyncSettingsRequest      {         public uint TitleId;         public ulong UserId;         public DateTime  Version;         public uint SettingsLen;         public UserSetting[] Settings;              }     public class SyncSettingsResponse      {         public byte[] Version;     public ushort TotalSettings;         public uint SettingsLen = 0;         public UserSetting[] Settings = null;              }   User Titles This API takes is used to set and get title data for a user.  XRL DEFINATION public class UserTitle  public uint TitleId = 0; public ushort TitleNameLen = 0; public string TitleName = ""; public DateTime LastPlayed = DateTime.MinValue; public uint NumCreds = 0; public ushort NumAchievements = 0; public ushort TotalAchievements = 0; public uint NumSessionsPlayed = 0; public uint MinutesPlayedOffline = 0; public uint MinutesPlayedOnline = 0; Sync Titles public class SyncTitlesRequest  public ulong UserId ; public ushort LocaleId ; // en-US          public DateTime Version ;          public uint TitlesLen = 0;         public UserTitle[] Titles = null; public class SyncTitlesResponse  public DateTime Version = DateTime.MinValue; public ushort TotalTitles = 0; public uint TitlesLen = 0; public UserTitle[] Titles = null; Enumerate Titles public class EnumTitlesRequest  [XRLPayloadFld(IsUPuid=true)] public ulong UserId; public ulong ForUserId; public ushort LocaleId; public uint StartingIndex; public uint MaxTitles; public class EnumTitlesResponse : WireData public uint TitlesLen; public UserTitle[] Titles; Clear Title Data public class TitleClearRequest          public ulong UserId;   public uint TitleId; Achivements This API is used to set and get achievements achieved by a user. XRL DEFINATION public const ushort XONLINE_MAX_ACHIEVEMENTS        = 32; public class Achievement           public uint  AchievementId = 0; public DateTime Achieved   = DateTime.MinValue; public int   Flags         = 0; public byte  Type          = 0; public int   Cred          = 0;          public byte ImagePathLen   = 0; public string ImagePath    = "";          public byte TitleLen       = 0; public string Title        = "";          public byte DescriptionLen = 0; public string Description  = "";          public byte NextIdsLen     = 0; public uint[] NextIds      = null;          public byte ReplaceIdsLen  = 0; public uint[] ReplaceIds      = null; SyncAchievementRequest public class SyncAchievementsRequest          public uint  TitleId = 0;         public ulong UserId  = 0;         public DateTime Version = XOn.MinDateTime;         public uint AchievementCount = 0; (max =32)   public Achievement[] Achievements = null; public class SyncAchievementsResponse          public DateTime Version = XOn.MinDateTime;   public ushort TotalAchievements = 0;         public uint AchievementCount = 0; (Max=32)         public Achievement[] Achievements = null; EnumAchievementRequest public class AchievementEnumRequest          public uint  TitleId = 0;         public ulong Puid    = 0;         public ulong ForPuid = 0;         public ushort StartingIndex = 0;         public ushort MaxAchievements = XOn.XONLINE_MAX_ACHIEVEMENTS; public class AchievementEnumResponse          public uint AchievementsCount = 0; (max=32)         public Achievement[] Achievements = null; ClearAchievementRequest public class AchievementClearRequest          public uint  TitleId = 0;         public ulong Puid    = 0; Sync ALL  public class SyncAllRequest   public uint TitleId;         public ulong UserId;         public ushort LocaleId;   public byte[16] Guid;         // settings         public DateTime SettingsVersion;         public ushort SettingsLen;         public UserSetting[] Settings;         // titles         public DateTime TitlesVersion;         public ushort TitlesLen = 0;         public UserTitle[] Titles = null;         // achievements         public DateTime AchievementsVersion;         public ushort AchievementsCount = 0;   public Achievement[] Achievements = null;     public class SyncAllResponse      {         public SyncSettingsResponse Settings;         public SyncTitlesResponse Titles;   public SyncAchievementsResponse Achievements ;     } Test Case Matrix M3 Milestone  Test Cases for Sync ALL  Sync All Request forwards request to SyncSettings , SyncTitles and SyncAchievements and the response is a combined response of all the three, I will not be implementing  a lot of tests for this API  since  SuncSettings ,SyncTitles and SyncAchievements are independently test. I will comy cove some basic test  just to make sure the SyncAll api forwards request correctly. Valid_SyncAll Description: - The test will set single title,setting and achievement for a user using SyncAllRequest and read back using ReadSettings, EnumTitles and EnumAchievements respectively.  Verify:-The values set should be equal to the values read.  Valid_MaxSyncAll Description: - The test will set max title, setting and achievement for a user using SyncAllRequest and read back using ReadSettings, EnumTitles and EnumAchievements respectively.  Verify:-The values set should be equal to the values read. ShortMessage Description: - the test will send a short XRL Message to SyncAllRequest  Verify: - Proper error code is returned LongMessage Description: - the test will send a XRL Message with size grater then expected to SyncAllRequest  Verify: - Proper error code is returned SGAuth_Different_User Description: - The test tries to write a user setting using SyncAllRequest with user different in request and SGAuth. Verify:-Proper error is returned.  SGAuth_Different_Title Description: - The test tries to write a user setting using SyncAllRequest with title different in request and SGAuth. Verify:-Proper error is returned.  Test Cases for Sync and Enum Titles Valid_Set/GetSingleTitleinfo Description: - The test will set single title info for a user using SyncTitlesRequest and read back using EnumTitlesRequest  Verify:-The value set should be equal to the value read.  Valid_Set/GetMultipleTitleinfo Description: - The test will set 5 different titles info using SyncTitlesRequest and read back using EnumTitlesRequest Verify:-The value set should be equal to the value read.  Valid_Update/GetSingleTitleinfo Description: - The test will update single title info for a user using SyncTitlesRequest and read back using EnumTitlesRequest  Verify:-The value set should be equal to the value read. Valid_Update/GetMultipleTitleinfo Description: - The test will update 5 titles info for a user using SyncTitlesRequest and read back using EnumTitlesRequest  Verify:-The value set should be equal to the value read. Valid_Update_AddNew MultipleTitleinfo Description: - The test will update 2 titles info and add new 2 title info for a user using SyncTitlesRequest and read back using EnumTitlesRequest  Verify:-The value set should be equal to the value read. Valid_Set/GetMax-1Titleinfo Description: - The test will set Max-1 different titles info using SyncTitlesRequest and read back using EnumTitlesRequest Verify:-The value set should be equal to the value read.  Valid_Set/GetMaxTitleinfo Description: - The test will set Max different titles info using SyncTitlesRequest and read back using EnumTitlesRequest Verify:-The value set should be equal to the value read.  Valid_Set/GetTitleinfoM Locale Description: - The test will set titles info for 2 Locale using SyncTitlesRequest and read back using EnumTitlesRequest Verify:-The value set should be equal to the value read. Valid_SetOnlinePlaytime Description: - The test will try to set online play time for a title using SyncTitlesRequest on datacenter port. Verify:-No error shoulb be returned and the value should be updated .this will be verified by enumerating title info. InValid_SetOnlinePlaytime Description: - The test will try to set online play time for a title using SyncTitlesRequest on external port  Verify:-Proper error should be returned.  Valid_Server version older then client Description: - The test will set titles info using SyncTitlesRequest with client version date time ahead of server  Verify:-Sync Response should have zero title records. Valid_Server version newer then client Description: - The test will set titles info using SyncTitlesRequest with client version date time older then server  Verify:-Sync Response should return title records that were updated after the date specified. Valid_Server version newer then clientwith with 45 records Description: - The test will set titles info using SyncTitlesRequest with client version date time older then server  With 45 updated records. Verify:-Sync Response should return title records that were updated after the date specified. Since the record count was greater then 32, it should specify correct total entries and the version should be the version of the 32nd  Record. Valid_Server version same as the client Description: - The test will set titles info using SyncTitlesRequest with client version date time older then  server  Verify: - Response should have zero title records. Valid_MaxSyncResponse Description: - The test will set titles info using SyncTitlesRequest with client version date time min date time value.  Verify: - Response should have max title records. Valid_Set/GetMax+1Titleinfo Description: - The test will set Max different titles info using SyncTitlesRequest. Verify:-Make sure that Proper Error is returned. ShortMessage Description: - the test will send a short XRL Message to SyncTitlesRequest and EnumTitlesRequest. Verify: - Proper error code is returned LongMessage Description: - the test will send a XRL Message with size grater then expected to SyncSettingsRequest and EnumTitlesRequest. Verify: - Proper error code is returned DuplicateProperties Description: - The test will set 5 valid titles out of which 2 will be duplicates using SyncTitlesRequest and read backed using EnumTitlesRequest. Values of duplicate are same. Valves of duplicate are different. Verify: - Proper error should be returned. SGAuth_Different_User1 Description: - The test tries to write a user setting using SyncTitlesRequest and EnumTitlesRequest with user different in request and SGAuth. Verify:-Proper error is returned.  Special cases for Enum Titles Enum nonExisting User  Description: - The test tries to EnumTitlesRequest with user that not present in the DB Verify:-Verify that 0 titles are returned.  Enum nonExisting Locale  Description: - The test tries to EnumTitlesRequest for a user with a locale that is not set for the user. Verify:-Verify that 0 titles are returned.  Enum Different Start Positions  Description: - The test tries to EnumTitlesRequest for a user who has 10 title records with different start position and max count. Start Postion =0 max title =10   (return 10 titles ) Start Postion =1 max title =10   (return 10 titles ) Start Postion =9 max title =10  (return 2 titles ) Start Postion =10 max title =10 (return 1 titles ) Start Postion =5 max title =5  (return 5 titles ) Start Postion =1 max title =0 (return 0 titles ) Start Postion =10 max title =1 (return 1 titles ) Start Postion =1 max title =9 (return 9 titles ) Start Postion =1 max title =Max-1(return Max-1 titles ) Start Postion =1 max title =Max  (return Max titles ) Verify:-Verify that proper number of titles are returned depending upon start position and max size..  Enumtitles_Activity_none Description: - The test will set an activity setting for a user with permission set to Share activity none and enumerate titles Verify:-The test will verify that   The same user can enumerate titles. Friend cannot enumerate titles and the request fails with error Access denied. Non Friend cannot enumerate titles and the request fails with error Access denied Enumtitles_Activity_friends Description: - The test will set an activity setting for a user with permission set to Share activity friends only and enumerate titles Verify: - The test will verify that   The same user can enumerate titles. Friend can enumerate titles. Non Friend cannot enumerate titles and the request fails with error Access denied Enumtitles_Activity_all Description: - The test will set an activity setting for a user with permission not set and enumerate titles Verify:-The test will verify that The same user can enumerate titles. Friend can read enumerate titles. Non Friend can enumerate titles. Enumtitles Parental Control Friend only Description: - The test will try to and enumerate titles with a user whose parental setting set to view friends only  Verify:-The test will verify that   Can enumerate his own titles Can enumerate Friends titles. Cannot enumerate non friend s titles. Enumtitles Parental Control Activity Description: - The test will try to and enumerate titles with a user whose parental setting is set to don t view activity. Verify:-The test will verify that   Can enumerate his own titles Cannot enumerate other user s titles. Additional Test Cases for settings Valid_Server version newer then clientwith with 45 records Description: - The test will set titles info using SyncAchievementsRequest with client version date time older then server with 45 updated records. Verify:-Sync Response should return title records that were updated after the date specified. Since the record count was greater then 32, it should specify correct total entries and the version should be the version of the 32nd  Record. Test Cases for permissions on settings Activity_none Description: - The test will set an activity setting for a user with permission set to Share activity none. Verify:-The test will verify that   The same user can read the setting. Friend cannot read the setting and the request fails with error Access denied. Non Friend cannot read the setting and the request fails with error Access denied Activity_friends Description: - The test will set an activity setting for a user with permission set to Share activity friends only. Verify: - The test will verify that   The same user can read the setting. Friend can read the setting. Non Friend cannot read the setting and the request fails with error Access denied Activity_all Description: - The test will set an activity setting for a user with permission not set. Verify:-The test will verify that The same user can read the setting. Friend can read the setting. Non Friend can read the setting UCC None Description: - The test will set an UCC setting for a user with permission set to Share UCC none. Verify:-The test will verify that   The same user can read the setting. Friend cannot read the setting and the request fails with error Access denied. Non Friend cannot read the setting and the request fails with error Access denied UCC_Friends Description: - The test will set an UCC setting for a user with permission set to Share UCC friends. Verify: - The test will verify that   The same user can read the setting. Friend can read the setting. Non Friend cannot read the setting and the request fails with error Access denied UCC_All Description: - The test will set an UCC setting for a user with Permission not set Verify:-The test will verify that The same user can read the setting. Friend can read the setting. Non Friend can read the setting Valid_enforce Console ro Description: - The test will set a single setting with enforce console RO flag set to true. This flags states that the setting is read only for an Xbox. Verify:-The test will try to set the value by sending the request to External port ( fails with error Access denied) Data center port( works fine) Valid_enforce Web Ro Description: - The test will set a single setting with enforce Web RO flag set to true. This flags states that the setting is read only for web. Verify:-The test will try to set the value by sending the request to   External port (works fine)  Data center port(fails with error Access denied) Valid_enforce Title Ro Description: - The test will set a single setting with enforce Title RO flag set to true. This flags states that the setting is read only for title. System State:-The user setting is defined in the system (NPDB). Verify:-The test will try to set the value with title 2 different titles Title id =0 (works fine) Valid title id (fails with error Access denied) Valid_enforce Not Shared Description: - The test will set a single setting with enforce not shared flag set to true. This flags states that the setting cannot be read by any one. Verify:-The test will verify that   The same user can read the setting. Friend cannot read the setting and the request fails with error Access denied. Non Friend cannot read the setting and the request fails with error Access denied Parental Control Friend only Description: - The test will try to read settings with a user whose parental setting set to view friends only.  Verify:-The test will verify that   Can read his own settings Can read Friends setting. Cannot read non friends settings. Parental Control Activity Description: - The test will try to read an activity setting with a user whose parental setting is set to don t view activity.  Verify:-The test will verify that   Can read his own activity settings Cannot read other users activity setting. Can read other users UCC settings. Parental Control UCC Description: - The test will try to read an activity setting with a user whose parental setting is set to don t view UCC.  Verify:-The test will verify that   Can read his own UCC settings Cannot read other users UCC setting. Can read other users Activity settings. Parental Control every one Description: - The test will try to read settings with a user whose parental setting set to view every one.  Verify:-The test will verify that   Can read his own settings Can read Friends setting. Can read non friends settings. Valid_GetMultipleUserSingleSetting Description: - The test read single setting for 5 different users using ReadSettingsRequest with no accesses to one user settings.  Verify:-The value set should be equal to the value read and access denied returned for one user settings. Valid_GetSingleUserMultipleSetting Description: - The test read 5 different setting for 1 different user using ReadSettingsRequest with no access to one setting.  Verify:-The value set should be equal to the value read with one setting having permission denied error. Test Cases for clear Title data Valid_ClearTitleinfo Description: - The test will set single title info for a user using SyncTitlesRequest and then clear title data using  TitleClearRequest API. Verify:-Make sure that the title info is deleted from the database. Valid_ClearTitleinfo2 Description: - The test will set multiple title info for a user using SyncTitlesRequest and then clear a single title data using TitleClearRequest API. Verify:-Make sure that the title info for correct title is deleted from the database . InValid_Clear Nonexistent Title Description: - The test will set try to clear a non existing title data using TitleClearRequest API. Verify:-Make sure that proper error is returned.  InValid_Clear NonUser Description: - The test will set try to clear title data for a non existing user using TitleClearRequest API. Verify:-Make sure that proper error is returned.  ShortMessage Description: - the test will send a short XRL Message to TitleClearRequest  Verify: - Proper error code is returned LongMessage Description: - the test will send a XRL Message with size grater then expected to TitleClearRequest  Verify: - Proper error code is returned SGAuth_Different_User1 Description: - The test tries to clear a user title using TitleClearRequest with user different in request and SGAuth. Verify:-Proper error is returned.  Test Cases for Sync and Enum Achievements Valid_Sync/EnumAchievements Description: - The test will set single achievement for a user using SyncAchievementsRequest and read back using AchievementEnumRequest Verify:-the set achievement should be marked as achieved.  Valid_ Sync/EnumMultipleAchievements Description: - The test will set 5 different achivements using SyncAchievementsRequest and read back using SyncAchievementsRequest Verify: - the set achievement should be marked as achieved. Valid_Update/EnumAchievements Description: - The test will update single achievement for a user using SyncAchievementsRequest and read back using SyncAchievementsRequest Verify: - the set achievement should be marked as achieved. Valid_Update_AddNew /EnumMultipleAchievements Description: - The test will update 2 achievements and add new 2 achievements for a user using SyncAchievementsRequest and read back using AchievementEnumRequest Verify: - the set achievement should be marked as achieved Valid_Sync/EnumMax-1 Achievements Description: - The test will set Max-1 different achievements using SyncAchievementsRequest and read back using AchievementEnumRequest Verify: - the set achievement should be marked as achieved. Valid_Sync/EnumMax Achievements Description: - The test will set Max different achievements using SyncAchievementsRequest and read back using AchievementEnumRequest Verify: - the set achievement should be marked as achieved. Valid_Server version older then client Description: - The test will set achievement for a user using SyncAchievementsRequest with client version date time ahead of server  Verify:-Sync Response should have zero achievements records. Valid_Server version newer then client Description: - The - The test will set achievement for a user using SyncAchievementsRequest with client version date time older then server  Verify:-Sync Response should return achievements records that were updated after the date specified. Valid_Server version newer then clientwith with 45 records Description: - The test will set titles info using SyncAchievementsRequest with client version date time older then server with 45 updated records. Verify:-Sync Response should return title records that were updated after the date specified. Since the record count was greater then 32, it should specify correct total entries and the version should be the version of the 32nd  Record. Valid_Server version same as the client Description: - The test will set achievement for a user using SyncAchievementsRequest with client version date time older then server  Verify: - Response should have zero achievements records. Valid_MaxSyncResponse Description: - The test will set max number of achievements using SyncAchievementsRequest with client version date time min date time value.  Verify: - Response should have max achievement records. Valid_Sync/EnumMax+1Achievement Description: - The test will try to set Max plus 1 different achievements using SyncAchievementsRequest. Verify:-Make sure that Proper Error is returned. ShortMessage Description: - the test will send a short XRL Message to SyncAchievementsRequest and AchievementEnumRequest. Verify: - Proper error code is returned LongMessage Description: - the test will send a XRL Message with size grater then expected to SyncAchievementsRequest and AchievementEnumRequest. Verify: - Proper error code is returned DuplicateProperties Description: - The test will set 5 valid achievements out of which 2 will be duplicates using SyncAchievementsRequest. Values of duplicate are same. Valves of duplicate are different. Verify: - Proper error should be returned. SGAuth_Different_User1 Description: - The test tries to write achievement for a user setting using SyncAchievementsRequest with user different in request and SGAuth. Verify:-Proper error is returned.  Max_Schema_Params Description: - the XLAST Schema will have max values for following attributes ImagePath Title Description NextIds Replace ids. Verify:-Make sure that correct values are returned..  Valid_Sync/Enum Different Loace Description: - The test will set single achievement for a user using SyncAchievementsRequest and read back using AchievementEnumRequest with a Locale  fr-FR Verify:-that every field returned is correct. Valid_Sync/Enum nonexistant Loace Description: - The test will set single achievement for a user using SyncAchievementsRequest and read back using AchievementEnumRequest for a nonexistent Locale Verify:-Make sure that the data returned is for default local Special Test Cases for Enum achieveents Enum nonExisting User  Description: - The test tries to enumerate achievement using AchievementEnumRequest with user that not present in the DB Verify:-Verify that 0 titles are returned.  Enum nonExisting title  Description: - The test tries to enumerate achievement using AchievementEnumRequest for a title that is not set for the user. Verify:-Verify that 0 titles are returned.  Enum Different Start Positions  Description: The test tries to enumerate achievement using AchievementEnumRequest for a title with 10 achievement records with different start position and max count, with variable number of achievements achieved. Start Postion =0 max title =10   (return 10 titles ) Start Postion =1 max title =10   (return 10 titles ) Start Postion =9 max title =10  (return 2 titles ) Start Postion =10 max title =10 (return 1 titles ) Start Postion =5 max title =5  (return 5 titles ) Start Postion =1 max title =0 (return 0 titles ) Start Postion =10 max title =1 (return 1 titles ) Start Postion =1 max title =9 (return 9 titles ) Start Postion =1 max title =Max-1(return Max-1 titles ) Start Postion =1 max title =Max  (return Max titles ) Verify:-Verify that proper number of achievements are returned depending upon start position and max size, Also make sure that proper achievements are marked as achieved. Enum_Activity_none Description: - The test will set an activity setting for a user with permission set to Share activity none and enumerate achievements Verify:-The test will verify that   The same user can enumerate achievements. Friend cannot enumerate achievements and the request fails with error Access denied. Non Friend cannot enumerate achievements and the request fails with error Access denied Enum_Activity_friends Description: - The test will set an activity setting for a user with permission set to Share activity friends only and enumerate achievements Verify: - The test will verify that   The same user can enumerate achievements. Friend can enumerate achievements. Non Friend cannot enumerate achievements and the request fails with error Access denied Enum_Activity_all Description: - The test will set an activity setting for a user with permission not set and enumerate achievements Verify:-The test will verify that The same user can enumerate achievements. Friend can read enumerate achievements. Non Friend can enumerate achievements. Enum Parental Control Friend only Description: - The test will try to and enumerate achievements with a user whose parental setting set to view friends only  Verify:-The test will verify that   Can enumerate his own achievements Can enumerate Friends achievements. Cannot enumerate non friend s achievements. Enum Parental Control Activity Description: - The test will try to and enumerate achievements with a user whose parental setting is set to don t view activity. Verify:-The test will verify that   Can enumerate his own achievements Cannot enumerate other user s achievements. Test Cases for clear achievements Valid_ClearAchievement Description: - The test will set a single achievement for a user using SyncAchievementsRequest and then clear achievement for the title using AchievementClearRequest API. Verify:-Make sure that all the achievements for the title is deleted from the database. Valid_ClearAchievement2 Description: - The test will set multiple achivement for a user using SyncAchievementsRequest and then clear achievement for the title using AchievementClearRequest API. Verify: - Make sure that all the achievements for the title is deleted from the database InValid_Clear Nonexistent Title Description: - The test will try to clear achievements for a non existing title using AchievementClearRequest API. Verify:-Make sure that proper error is returned.  InValid_Clear NonUser Description: - - The test will try to clear achievements for a non existing user using AchievementClearRequest API. Verify:-Make sure that proper error is returned.  ShortMessage Description: - the test will send a short XRL Message to AchievementClearRequest Verify: - Proper error code is returned LongMessage Description: - the test will send a XRL Message with size grater then expected to AchievementClearRequest Verify: - Proper error code is returned SGAuth_Different_User1 Description: - The test tries to clear user s achievements using AchievementClearRequest with user different in request and SGAuth. Verify:-Proper error is returned.  M2 Milestone  TESTCASES Valid_Set/GetSingleUserSingleSetting Description: - The test will set a single user setting for a user using SyncSettingsRequest  and read back using ReadSettingsRequest with title id =0.  System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  Valid_Set/GetSingleUserMultipleSetting Description: - The test will set 5 different settings using SyncSettingsRequest  and read back using ReadSettingsRequest with title id =0. System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  Valid_Update/GetSingleUserSingleSetting Description: - The test will update a single user setting for a user using SyncSettingsRequest  and read back using ReadSettingsRequest with title id =0.  System State:-The user setting is defined in the system (NPDB). And already has some value. Verify:-The value set should be equal to the value read. Valid_Server version older then client Description: - - The test will set user settings for a user using SyncSettingsRequest with client version date time ahead of server  Verify:-Sync Response should have zero title records. Valid_Server version newer then client Description: - The test will set user settings for a user using SyncSettingsRequest with client version date time older then server  Verify:-Sync Response should return title records that were updated after the date specified. Valid_Server version same as the client Description: - - The test will set user settings for a user using SyncSettingsRequest with client version date time same as the server  Verify: - Response should have zero title records. Valid_GetMultipleUserSingleSetting Description: - The test read single setting for 5 different users using ReadSettingsRequest with title id =0.  System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  Valid_GetMultipleUserMultipleSetting Description: - The test read 5 different setting for 5 different users using ReadSettingsRequest with title id =0.  System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  Valid_Set/GetSingleUserTitleSetting Description: - The test will set a single user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest with title id a valid title ID. System State:-The User setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read and make sure that the global value is unchanged.  Valid_Update/GetSingleUserTitleSetting Description: - The test will update a single user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest with title id a valid title ID. System State:-The User setting is defined in the system (NPDB). And already has some value. Verify:-The value set should be equal to the value read and make sure that the global value is unchanged.  Valid_ GetSingleUserTitleSettingwiht no title setting Description: - The test will update a single user setting using SyncSettingsRequest with title ID=0  and read backed using ReadSettingsRequest with title id = valid title ID. System State:-The User setting is defined in the system (NPDB). And already has some value. Verify:-Make sure that the global value is returned.  Valid_Set/GetsingleUserMultipleTitleSettings Description: - The test will set 5 different user settings using SyncSettingsRequest  and read backed using ReadSettingsRequest with title id valid title ID. System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read and make sure that the global value is unchanged.  Valid_User settingTypeInt64 Description: - The test will set a single usersetting using SyncSettingsRequest  and read backed using ReadSettingsRequest with user setting value of type Int64. System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  Valid_User settingTypeString Description: - The test will set a single user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest with user setting value of type string. System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  Valid_User settingTypeBinary Description: - The test will set a single user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest with user setting value of type binary array. System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  Valid_User settingTypeString_Different_length Description: - The test will set 4 user setting for a single user using SyncSettingsRequest  and read backed using ReadSettingsRequest with user setting value of type string of lengths 1,max,max-1,max/2.  System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read. Valid_User settingTypebinary_Different_length Description: - The test will set 4 user setting for a single user using SyncSettingsRequest  and read backed using ReadSettingsRequest with user setting value of type binary of lengths 1,max,max-1,max/2.  System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  Valid_User settingValueZeroLen Description: - The test will set a single user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest with user setting value of length zero for types int64,string ,binary. System State:-The user setting is defined in the system (NPDB). Verify:-The value should be rest to zero/cleared.  InValid_User settingValueMax+1Len Description: - The test will set a single user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest with user setting value of length max+1. System State:-The user setting is defined in the system (NPDB). Verify:-Proper error Code is returned.  InValid_User settingValuemismatchLen Description: - The test will set a single user setting using SyncSettingsRequest  with length of setting set to 10 bytes but Actual length of string is 9 bytes Actual length of string is 11 bytes. System State:-Proper error is returned.  InValid_User ValuemixLen Description: - The test will set a single user setting using SyncSettingsRequest  with 5 settings out of which only  A.1 setting has its length of setting set to 10 bytes but Actual length of string is 9 bytes B. 1 setting has its length of setting set to 10 bytes but Actual length of string is 11 bytes System State:-Proper error is returned.  InValid_User settingValue(4*Max)Len Description: - The test will set a single user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest with user setting value of length fore times the max allowed length. System State:-The user setting is defined in the system (NPDB). Verify:-Proper error Code is returned.  Valid_User settingCountMax-1 Description: - The test will set Max-1 user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest. System State:-The properties are not defined in the system (NPDB). Verify:-The value set and get should be null.  Valid_User settingCountMax Description: - The test will set Max user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest. System State:-The properties are not defined in the system (NPDB). Verify:-The value set and get should be null.  InValid_User settingCountZero Description: - The test will set zero user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest. System State:-The properties are defined in the system (NPDB). Verify:-Prorper Error is returned.  ZeroUser settingID Description: - The test will set a single user setting with ID equals zero using SyncSettingsRequest  and read backed using ReadSettingsRequest. System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  MaxUser settingID Description: - The test will set a single user setting with ID equals MAX value using SyncSettingsRequest  and read backed using ReadSettingsRequest. System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  InValid_User settingCountMax+1 Description: - The test will set Max user setting using SyncSettingsRequest  and read backed using ReadSettingsRequest. System State:-The properties are defined in the system (NPDB). Verify:-Proper error code is returned. InvalidTitle Description: - The test will set a single user setting for invalid title using SyncSettingsRequest  and read backed using ReadSettingsRequest. System State:-The properties are defined in the system (NPDB). Verify:-Proper error code is returned. InvalidUser Description: - The test will set a single user setting for a invalid user using SyncSettingsRequest  and read backed using ReadSettingsRequest. System State:-The properties are not defined in the system (NPDB). Verify:-Proper error code is returned. InvalidUser setting Description: - The test will set a single user setting with invalid user setting ID using SyncSettingsRequest  and read backed using ReadSettingsRequest. System State:-The properties are not defined in the system (NPDB). Verify:-Proper error code is returned. MixofValid&invalidProperties Description: - The test will set 5 valid and 5 invalid properties using SyncSettingsRequest  and read backed using ReadSettingsRequest. System State:-The 5 valid properties are defined in the system (NPDB). Verify:-Proper error code is returned. LongHTTPHeadersMessage Description:- the test will send a additional http header while making  valid SyncSettingsRequest  and ReadSettingsRequest calls. Verify:- no error is returned. ShortMessage Description:- the test will send a short XRL Message to SyncSettingsRequest  and ReadSettingsRequest. Verify:- Proper error code is returned LongMessage Description: - the test will send a XRL Message with size grater then expected to SyncSettingsRequest  and ReadSettingsRequest. Verify: - Proper error code is returned DuplicateProperties Description: - The test will set 5 valid properties out of which 2 will be duplicates using SyncSettingsRequest and read backed using ReadSettingsRequest. Values of duplicate are same. Valves of duplicate are different. System State:-All valid properties are defined in the system (NPDB). Verify: - Proper error should be returned. Valid_GetMaxUserMultipleSetting Description: - The test read 5 different setting for max number of users using ReadSettingsRequest with title id =0.  System State:-The user setting is defined in the system (NPDB). Verify:-The value set should be equal to the value read.  SGAuth_Different_Title1 Description: - The test tries to write a user setting using SyncSettingsRequest  with title id different in request and SGAuth. System State:-The user setting is defined in the system (NPDB). Verify:-Proper error is returned.  SGAuth_Different_User1 Description: - The test tries to write a user setting using SyncSettingsRequest  with user different in request and SGAuth. System State:-The user setting is defined in the system (NPDB). Verify:-Proper error is returned.  SGAuth_Different_Title2 Description: - The test tries to read a user setting using ReadSettingsRequest with title id different in request and SGAuth. System State:-The user setting is defined in the system (NPDB). Verify:-All values are returned correctly. SGAuth_Different_User2 Description: - The test tries to read a user setting using ReadSettingsRequest with user different in request and SGAuth. System State:-The user setting is defined in the system (NPDB). Verify:- All values are returned correctly. Stress Testing M2 Milestone:  NO stress testing will be done in this release. Revision History Changes made Author 9/30/04 First Draft Pankajn 10/20/04 M2 Reviewed /updated  Pankajn 3/07/05  Updated  test plan with Xenon M3 test cases Pankajn Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  gdrIy xod]TK> ~zgZMC xpep]WNWNWC: gd=Z9 gdXul gdXul gdPT$ gdPT$ xgTgTxgG vhd`dMB gdt.t gdt.t gdrVr gdrVr gdt.t gdrVr gdt.t gdt.t gdrVr gdrVr gdrVr gdrVr gdrVr gdrVr ~mim[P[ gd&Y. gd&Y. gd&Y. gd&Y. raUB2 gd&Y. |kVE84 gdwlb gdwlb ~p~b~N= rdVrVrHr gdwlb gdwlb ]Y]Y]Y
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\feedback\Xenon Feedback.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKS Document Description Type of Document Status Date Created Xenon Rich Presence & Affiliates Design Feature Spec rough draft 2004-09-08T00:00:00ZXbox Online Spec Template Jerry Johnson Xbox Live Feature Spec Template.dot Peter Hansen Microsoft Office Word<?xml version="1.0"?><XrML version="1.2" xmlns=""><BODY type="Microsoft Rights Label" version="3.0"><ISSUEDTIME>2004-12-12T04:28</ISSUEDTIME><DESCRIPTOR><OBJECT><ID type="MS-GUID">{52C84476-5F25-4033-B1E6-A8D8731D603A}</ID><NAME>LCID 1033:NAME Do Not Distribute:DESCRIPTION Permission is currently restricted. Only specified users can access this content.; </NAME></OBJECT></DESCRIPTOR><ISSUER><OBJECT type="Group-Identity"><ID type="Windows">S-1-5-21-2127521184-1604012920-1887927527-30086</ID><NAME>phansen@microsoft.com</NAME></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">A8F364qaoKqNiLkQE6Um+OFkvP+97RwhdYuXKL1yi3XwXtc/MGsbaIsy9shjQ5FG2I9v5IzSVC3nYAprKllg+j8vuTyFxCFQqdJtOvLwbugt+dIg1mxRWRt6GZbR5irguB0bcGmX8VuDKnBSNdpymgmTukjHF3WIAIUecpkqCKY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="SDK" value="3.0.3281.0" /></ISSUER><DISTRIBUTIONPOINT><OBJECT type="License-Acquisition-URL"><ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights/_wmcs/licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><DISTRIBUTIONPOINT><OBJECT type="Extranet-License-Acquisition-URL"><ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs/Licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><ISSUEDPRINCIPALS><PRINCIPAL internal-id="1"><OBJECT type="MS-DRM-Server"><ID type="MS-GUID">{aaa331f3-e659-4ea9-876b-e8b25c7b4996}</ID><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs</ADDRESS></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">oxyxbUguymFHLhu80EH9m62c2XLFXbjm87KlEbSFQkieurr8RZgvtEMWdg6jMAkLJ7xPnWs3hEjOHw99irwZ1g5Z+6yYgktWlKibmPs5Lpamd6v53R40fKES/HNWdjbc68xN9tyfts4pOfyJxT5Xgo0rHVset+rDgShE9B3JQbY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="Server-Version" value="1.0.3012.0" /><SECURITYLEVEL name="Server-SKU" value="12345-123-0000007-18968" /><ENABLINGBITS type="sealed-key"><VALUE encoding="base64" size="1536">H1HFdrg9yy9eM5Qkzu77aHnRSPiPFJMnEWkCJjjQTLpfPeZCrEl1TQWq0bfUW1RpEGn9SQlP8LEoWl260k6Xc/MTNifikoBUpExD+82egkOJJeDAt5PJhry+qmxy8U2SZ69qNde0gyd8lrL8xUG7ADs5Ic5WfGHLWCYDvELoQGfPNpk7IOC1DXl+/A0wiRzXJH50tbZbMJQrS9l+roSmplxHGLllubqejGHDXJgMgvLSVtUNkHMnhq8rYV/uGeQs</VALUE></ENABLINGBITS></PRINCIPAL></ISSUEDPRINCIPALS><DISTRIBUTIONPOINT><OBJECT type="Referral-Info"><ID type="MS-GUID">{81C42010-208A-458A-BAB6-C3C60F06DD5F}</ID><NAME>Author</NAME><ADDRESS type="URL">mailto:phansen@microsoft.com</ADDRESS></OBJECT></DISTRIBUTIONPOINT><WORK><OBJECT type="Microsoft Office Document"><ID type="MS-GUID">{9F9EC7CE-5245-4149-873B-3A6E98072F20}</ID><NAME>Microsoft Office Document</NAME></OBJECT><METADATA><OWNER><OBJECT><ID type="Windows" /><NAME>phansen@microsoft.com</NAME></OBJECT></OWNER></METADATA></WORK><AUTHENTICATEDDATA id="Encrypted-Rights-Data"></AUTHENTICATEDDATA><POLICYLIST type="exclusion"><POLICY><OBJECT><ID type="filename">winword.exe</ID><VERSIONSPAN min="0.0.0.0" max="11.0.4919.0" /></OBJECT></POLICY></POLICYLIST></BODY><SIGNATURE><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><DIGEST><ALGORITHM>SHA1</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="160">fDuhd5vB/33sRSUOthFT05yBTfs=</VALUE></DIGEST><VALUE encoding="base64" size="1024">glj4SS7Q7zNOV+LKMgTpsLZrWSc4tp02ROHRk5qcQCfsSe4ntkbTxBu+BnZDnnFR80hBK4dx/C2o4OHxQ0I1jxSjDT4u550khsM/shsXPTGi/fmsMpL4tuwgVcrkkdmW0dVU/JikOnS3L4Tr2uoM2PkoNuBKsgQ13humvlw2UTY=</VALUE></SIGNATURE></XrML><XrML xmlns="" version="1.2"><BODY type="LICENSE" version="3.0"><ISSUEDTIME>2004-11-05T00:52</ISSUEDTIME><DESCRIPTOR><OBJECT type="Client-Licensor-Certificate"><ID type="MS-GUID">{dbcf103c-dd15-4bf4-b91f-6696be6f7d4c}</ID></OBJECT></DESCRIPTOR><ISSUER><OBJECT type="MS-DRM-Server"><ID type="MS-GUID">{aaa331f3-e659-4ea9-876b-e8b25c7b4996}</ID><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs</ADDRESS></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">oxyxbUguymFHLhu80EH9m62c2XLFXbjm87KlEbSFQkieurr8RZgvtEMWdg6jMAkLJ7xPnWs3hEjOHw99irwZ1g5Z+6yYgktWlKibmPs5Lpamd6v53R40fKES/HNWdjbc68xN9tyfts4pOfyJxT5Xgo0rHVset+rDgShE9B3JQbY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="Server-Version" value="1.0.3012.0" /><SECURITYLEVEL name="Server-SKU" value="12345-123-0000007-18968" /></ISSUER><DISTRIBUTIONPOINT><OBJECT type="License-Acquisition-URL"><ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights/_wmcs/licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><DISTRIBUTIONPOINT><OBJECT type="Extranet-License-Acquisition-URL"><ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs/Licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><ISSUEDPRINCIPALS><PRINCIPAL internal-id="1"><OBJECT type="Group-Identity"><ID type="Windows">S-1-5-21-2127521184-1604012920-1887927527-30086</ID><NAME>phansen@microsoft.com</NAME></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">A8F364qaoKqNiLkQE6Um+OFkvP+97RwhdYuXKL1yi3XwXtc/MGsbaIsy9shjQ5FG2I9v5IzSVC3nYAprKllg+j8vuTyFxCFQqdJtOvLwbugt+dIg1mxRWRt6GZbR5irguB0bcGmX8VuDKnBSNdpymgmTukjHF3WIAIUecpkqCKY=</VALUE></PARAMETER></PUBLICKEY></PRINCIPAL></ISSUEDPRINCIPALS><WORK><OBJECT type="Client-Licensor-Certificate"><ID type="MS-GUID">{dbcf103c-dd15-4bf4-b91f-6696be6f7d4c}</ID></OBJECT><RIGHTSGROUP name="Main-Rights"><RIGHTSLIST><RIGHT name="ISSUE"><CONDITIONLIST><TIME><RANGETIME><FROM>2004-10-31T00:53</FROM><UNTIL>2005-11-01T00:53</UNTIL></RANGETIME></TIME><ACCESS><PRINCIPAL internal-id="1"><ENABLINGBITS type="sealed-key"><VALUE encoding="base64" size="6144">14qc8XCLqpdyfqqadA48nWNRzUBhGtRuoH9aYkFGzPCeFnmG+/rYsrk7PuBQLeMxG0ezY68WkL+QSw8Bgs3G5LZN5x/8e1d8soZWz9SB3K+fnsD3KgqLKSW7Yi4Naan9K3GjPyDI4mFEuyLVSQnZZeGv3wQeFhXNQk++Z0wNrr0J6ufsb+5LnVNTXA80cMUuxm6U5uNEx5zwSJYwJ0awDDF7X0x32O07MbK9gdOdeJnjtyFdzfhHGXGReGNhidJTrrjaH6iugfWt//CXbnD5/e4VxXZEXla707Ua/m0i6CuNI1t5gpYjvSHYuFbthwkvBpjT1id1hO9JkPNYMIPN2vwaORlsXB+cx+wIQmKgeF2Cg4+kb+awFnoeDgstvUa3dsoyBCo4Y7lrhm601HqUUdImlsjI55tUZDIl1MGdaOIfaJecSmJzPBEBW+o3d/j7gm7ax3y6CeIoy/eQ4yddXwsSqcnO5Z+aK+4WP6iT9nBz26E2hrkgbpBA1HNh6EjXxMfp6eM2nlwnLCOlABRyWCdilwzZdaOI1lc6fqfQjKz/WtgnXsVQ4a4ZuU8sB66r1xeTmfKn0sNL0ZWaBl42rdYQJ2RqkyjtFBsE/3CqIpTphsfNjO4N/E2IzYU1nJ18bwZ9cmx7wk0gV+i23MUKDLYlqEH9Mv5JY5sTsBoGTwBD1wN/o7ADG/0EKou+YXeZ7xER9bz1v4u0FtAnhvOfZzLbefpQ2Js3Dx0qRAhwpSZdtRa8/A97uo3VoASEGGj0qVfXO8ivlLZYNODdDtlGl2JdFP2LY4mc7pHcjOmnTw12rk3nlA/HDjCXNLKKis3SKXe0EbfpO7ubPhOoJHVOylreNwJisSAfcGzXlGC9/GGtJBgq3FJQJUBaFiEaq2YEOLF05EJoiA8uuwopMIoVafZdEcHFrm9+RqzObymBZqCXL1hlVI4GNkx4CpmBpfHbhmoSA05Qp/anIyKQs05cPGehwG8VUJ/SFPRPduoSVjnpcx4aAFfF8QgP+kZVPqgQ</VALUE></ENABLINGBITS></PRINCIPAL></ACCESS></CONDITIONLIST></RIGHT></RIGHTSLIST></RIGHTSGROUP></WORK></BODY><SIGNATURE><DIGEST><ALGORITHM>SHA1</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="160">OcMdI3NeTILky5FZpeHUc/Ri9Pw=</VALUE></DIGEST><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><VALUE encoding="base64" size="1024">Sy2Ps2++TbDA+D1J+v1RRx8Ti/Xn3pLkVyO/wtHyD5nDcMxaSyDUcMahMTE84bbGnv95BIX6WCXxIGlw+0Y5oq4IfJy6mIGJJYYHVyBzkKBp6J+UXX2643TOJZeL6ABEoI4xANCZfseurXWOyaUzoh82MTulk8PoYaemzpTgg0k=</VALUE></SIGNATURE></XrML>VwBpAG4AZABvAHcAcwA6AHAAaABhAG4AcwBlAG4AQABtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAA==T <?xml version="1.0"?><CERTIFICATECHAIN><CERTIFICATE>PABYAHIATQBMACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgAgAHgAbQBsAG4AcwA9ACIAIgAgAHAAdQByAHAAbwBzAGUAPQAiAEMAbwBuAHQAZQBuAHQALQBMAGkAYwBlAG4AcwBlACIAPgA8AEIATwBEAFkAIAB0AHkAcABlAD0AIgBMAEkAQwBFAE4AUwBFACIAIAB2AGUAcgBzAGkAbwBuAD0AIgAzAC4AMAAiAD4APABJAFMAUwBVAEUARABUAEkATQBFAD4AMgAwADAANAAtADEAMgAtADEAMgBUADAANAA6ADIAOAA8AC8ASQBTAFMAVQBFAEQAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBDAG8AbgB0AGUAbgB0AC0ATABpAGMAZQBuAHMAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADkAQQBFAEUAMQBBAEUAMwAtAEIAQwAzADAALQA0ADMAMwBFAC0AQQA1ADAAMwAtADcARQA0AEIARAAyADUAQwAyADcARgBFAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBHAHIAbwB1AHAALQBJAGQAZQBuAHQAaQB0AHkAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIAVwBpAG4AZABvAHcAcwAiAD4AUwAtADEALQA1AC0AMgAxAC0AMgAxADIANwA1ADIAMQAxADgANAAtADEANgAwADQAMAAxADIAOQAyADAALQAxADgAOAA3ADkAMgA3ADUAMgA3AC0AMwAwADAAOAA2ADwALwBJAEQAPgA8AE4AQQBNAEUAPgBwAGgAYQBuAHMAZQBuAEAAbQBpAGMAcgBvAHMAbwBmAHQALgBjAG8AbQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AQQA4AEYAMwA2ADQAcQBhAG8ASwBxAE4AaQBMAGsAUQBFADYAVQBtACsATwBGAGsAdgBQACsAOQA3AFIAdwBoAGQAWQB1AFgASwBMADEAeQBpADMAWAB3AFgAdABjAC8ATQBHAHMAYgBhAEkAcwB5ADkAcwBoAGoAUQA1AEYARwAyAEkAOQB2ADUASQB6AFMAVgBDADMAbgBZAEEAcAByAEsAbABsAGcAKwBqADgAdgB1AFQAeQBGAHgAQwBGAFEAcQBkAEoAdABPAHYATAB3AGIAdQBnAHQAKwBkAEkAZwAxAG0AeABSAFcAUgB0ADYARwBaAGIAUgA1AGkAcgBnAHUAQgAwAGIAYwBHAG0AWAA4AFYAdQBEAEsAbgBCAFMATgBkAHAAeQBtAGcAbQBUAHUAawBqAEgARgAzAFcASQBBAEkAVQBlAGMAcABrAHEAQwBLAFkAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEcAcgBvAHUAcAAtAEkAZABlAG4AdABpAHQAeQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBXAGkAbgBkAG8AdwBzACIAPgBTAC0AMQAtADUALQAyADEALQAyADEAMgA3ADUAMgAxADEAOAA0AC0AMQA2ADAANAAwADEAMgA5ADIAMAAtADEAOAA4ADcAOQAyADcANQAyADcALQAzADAAMAA4ADYAPAAvAEkARAA+ADwATgBBAE0ARQA+AHAAaABhAG4AcwBlAG4AQABtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgBUADYATgBZADkAQQBQAG4ARQBZAE4AVwArADkASgA5ADcAUgB3AC8ATwBVAE0ARgBVAFAARQBYAHgAYgA5AHYAOAB6AGsAcwBrAHMAcQByAG8AZQBWAFgATQBzAGYAWgBCAEEAUwBIAHAAMgArAFcAdQBZAE4AQQBKAEoAMABzAEgAQQBiADcAZgBSAEwAQwBtADIAdQBBAEQAcQBLAGkAcAAvAHkATQBiAEUAcABDAEQAdQBpAFMATwBaAE4AZwA4AE8AbwB2ADcAcABkAEcANwBXAE4AUQBHAFcASwBvAFYAeQArADUAbAB5ADkAUgBEAEEAcgBzAG4AUwBYAFgAOABzAG8AMAA3AHkAKwA1ADQATQB0ADYANgA5AE0AbQBFAHYAVABlAGIASQBpAG8ATgBoADkAQwBaAGMAaQBtAEQAUABhAHEAegBTADQAYQBYAGUAQQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AFMARQBDAFUAUgBJAFQAWQBMAEUAVgBFAEwAIABuAGEAbQBlAD0AIgBHAHIAbwB1AHAALQBJAGQAZQBuAHQAaQB0AHkALQBUAHkAcABlACIAIAB2AGEAbAB1AGUAPQAiAEcAcgBvAHUAcAAiACAALwA+ADwAUwBFAEMAVQBSAEkAVABZAEwARQBWAEUATAAgAG4AYQBtAGUAPQAiAEcAcgBvAHUAcAAtAEkAZABlAG4AdABpAHQAeQAtAEMAcgBlAGQAZQBuAHQAaQBhAGwALQBUAHkAcABlACIAIAB2AGEAbAB1AGUAPQAiAFAAZQByAHMAaQBzAHQAZQBuAHQAIgAgAC8APgA8AFMARQBDAFUAUgBJAFQAWQBMAEUAVgBFAEwAIABuAGEAbQBlAD0AIgBHAHIAbwB1AHAALQBJAGQAZQBuAHQAaQB0AHkALQBQAG8AbABpAGMAeQAiACAAdgBhAGwAdQBlAD0AIgBHAHIAbwB1AHAALQBJAGQAZQBuAHQAaQB0AHkALQBDAHIAZQBkAGUAbgB0AGkAYQBsACIAIAAvAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AEQASQBTAFQAUgBJAEIAVQBUAEkATwBOAFAATwBJAE4AVAA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBSAGUAZgBlAHIAcgBhAGwALQBJAG4AZgBvACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAOAAxAEMANAAyADAAMQAwAC0AMgAwADgAQQAtADQANQA4AEEALQBCAEEAQgA2AC0AQwAzAEMANgAwAEYAMAA2AEQARAA1AEYAfQA8AC8ASQBEAD4APABOAEEATQBFAD4AQQB1AHQAaABvAHIAPAAvAE4AQQBNAEUAPgA8AEEARABEAFIARQBTAFMAIAB0AHkAcABlAD0AIgBVAFIATAAiAD4AbQBhAGkAbAB0AG8AOgBwAGgAYQBuAHMAZQBuAEAAbQBpAGMAcgBvAHMAbwBmAHQALgBjAG8AbQA8AC8AQQBEAEQAUgBFAFMAUwA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEkAUwBUAFIASQBCAFUAVABJAE8ATgBQAE8ASQBOAFQAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIATQBpAGMAcgBvAHMAbwBmAHQAIABPAGYAZgBpAGMAZQAgAEQAbwBjAHUAbQBlAG4AdAAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADkARgA5AEUAQwA3AEMARQAtADUAMgA0ADUALQA0ADEANAA5AC0AOAA3ADMAQgAtADMAQQA2AEUAOQA4ADAANwAyAEYAMgAwAH0APAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAATwBmAGYAaQBjAGUAIABEAG8AYwB1AG0AZQBuAHQAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AE0ARQBUAEEARABBAFQAQQA+ADwATwBXAE4ARQBSAD4APABPAEIASgBFAEMAVAA+ADwASQBEACAAdAB5AHAAZQA9ACIAVwBpAG4AZABvAHcAcwAiACAALwA+ADwATgBBAE0ARQA+AHAAaABhAG4AcwBlAG4AQABtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APAAvAE8AVwBOAEUAUgA+ADwALwBNAEUAVABBAEQAQQBUAEEAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlACAAPQAgACIATwBXAE4ARQBSACIAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABFAE4AQQBCAEwASQBOAEcAQgBJAFQAUwAgAHQAeQBwAGUAPQAiAHMAZQBhAGwAZQBkAC0AawBlAHkAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQA1ADMANgAiAD4ARgBJAG4AOABUAEYAcQB4AE4AbwBJAHUAUwBQAGEAcAAvAFAAQwBPAFgAbQBDAGQAMwBwADkAZwBKADIAUABIAFkAbgBDAGYAZABVAFcAKwAwAGUAYgBDAHUAawBtADEAOQBpAG4ATQBKAFgAYwA2AEoASAB5AFoAeABGAGsAUgBHAFUAYwBDAGIAbgBKAGEAYwA4AGIAMABaAEIAdABZAHQAQQBRAEgAZgBQAEgAUgBSAEgAZQBYAEMASABCAEEAWQBKAFcASABiAHAAdwBTADEAcQA2ADQAQQA3AHYAVgBZAHcAWQA2AGgAawB4ADIAegBpAGUAcABZACsAVwBKAHAAWgBkAGkAYgBXAGcAawByADUALwBnAEEATwBmADIAOQAzAEQAMAAzAFUARQBIAFYAaABpAFIASwBUAE0AMwBxAFcASgBpAG8AMwBGAGgAcQBzADcAcwBBAEUAbQBkAHkAWgAxAFEAUQBJADMAOAB0AFQAbwBmAHMAbABMADMAMQBIAFgARQB2AHoAZQAzAHQAcwBCAEIARQBtAFIASwBUADIAUAAvAHUAbQArADIAaABkAHMANABFAEgARAA1AEcAWgBaAGYAaABrAFoAQwAzACsANABjADgAMgB5AHoANwBDAEoARgB5AFcAQgB5AEoAYwBUAHAAbQB0AHAAYgA8AC8AVgBBAEwAVQBFAD4APAAvAEUATgBBAEIATABJAE4ARwBCAEkAVABTAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APABDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APABSAEUARgBSAEUAUwBIAD4APABEAEkAUwBUAFIASQBCAFUAVABJAE8ATgBQAE8ASQBOAFQAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIAUgBlAHYAbwBjAGEAdABpAG8AbgAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBhAHMAYwBpAGkALQB0AGEAZwAiAD4ASQByAHIAZQB2AG8AYwBhAGIAbABlADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AC8ARABJAFMAVABSAEkAQgBVAFQASQBPAE4AUABPAEkATgBUAD4APABJAE4AVABFAFIAVgBBAEwAVABJAE0ARQAgAC8APgA8AC8AUgBFAEYAUgBFAFMASAA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APABBAFUAVABIAEUATgBUAEkAQwBBAFQARQBEAEQAQQBUAEEAIABpAGQAPQAiAEEAUABQAFMAUABFAEMASQBGAEkAQwAiACAAbgBhAG0AZQA9ACIAVgBJAEUAVwBFAFIAIgA+ADEAPAAvAEEAVQBUAEgARQBOAFQASQBDAEEAVABFAEQARABBAFQAQQA+ADwAQQBVAFQASABFAE4AVABJAEMAQQBUAEUARABEAEEAVABBACAAaQBkAD0AIgBBAFAAUABTAFAARQBDAEkARgBJAEMAIgAgAG4AYQBtAGUAPQAiAE0AUwBPAEQARgBMAFQAVQBTAEUAUgAiAD4AVgBJAEUAVwAsAFAAUgBJAE4AVAA8AC8AQQBVAFQASABFAE4AVABJAEMAQQBUAEUARABEAEEAVABBAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUwBIAEEAMQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAYwBvAGQAaQBuAGcAdAB5AHAAZQAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAHMAdAByAGkAbgBnACIAPgBzAHUAcgBmAGEAYwBlAC0AYwBvAGQAaQBuAGcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQA2ADAAIgA+AFUANABIAGoAQgBwAHoARQBPAHYATQBwAHgAbAAvAGUARgBMADEAZgBiAEgAdQAvAC8ATwBjAD0APAAvAFYAQQBMAFUARQA+ADwALwBEAEkARwBFAFMAVAA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4ASQBJAEYAMABkAGYAVQBQAEIANgBJAFoAQgBjAGIAQQBhADYAawBpADYAWgB1AGoAbwBkAGQAVwBLAGsAVABxAHkANAB2AHkARgBiAE4ANwA5AGEAMwArAGEAeQBaAEEAaQBsAHEAaQB4AFEAeQA4ADcARQB2AG0AUABmAEEAWgBVAG4AeABHAFEAQwBhAHAAWQBGAEIAdwBqAFgAdABzAE0ARwBBAHIAWABpAFoAMgBCADcAKwB5AHoAbQArACsAegBVAG0ANQBJAFQATQBPAGkAcwBaAFgAMAB0AEMAMQBhAFUAQwBVAGoANABCAGYAKwB5AGsAdgBOAEYALwBYAEcARAAyADcAegBhAHQATwBaAGEAaQBVAFkAZAByADgASwB5AG0AVwBIAFQANABzAHYAcwBuAE8AMgBCACsAZQBSAEQAdABMAGYAMgByAEYAUwAvAEkAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFMASQBHAE4AQQBUAFUAUgBFAD4APAAvAFgAcgBNAEwAPgA=</CERTIFICATE><CERTIFICATE></CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAA0AC0AMAAxAC0AMgAyAFQAMAA3ADoANAA1ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABEAEUAUwBDAFIASQBQAFQATwBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAOAA0ADIANgAwADgAMwA2AC0AOQA4AGMAYgAtADQAZgAyADMALQBiAGYAZQA5AC0ANgA0ADUAZgAzADAAZgBmADYAOQAyADAAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APAAvAEQARQBTAEMAUgBJAFAAVABPAFIAPgA8AEkAUwBTAFUARQBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA2AGYAZQBlADEAOQAyADAALQBlADEAOAA5AC0ANAA2AGYANQAtAGEAYQA4AGEALQA3AGQANgBjADEAYwBiAGYANABhADgAMQB9ADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAUwBlAHIAdgBpAGMAZQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AcQBWADEAMABJAG0AQQB1AGcAYgAyAHkAbABMADcAZAB3AHAAMQB2AHAATABhAEEATgBnAGkAbQBDAEoASwBpAEwAKwBSAG4ASwBnAFMAbwBlAHcAeABsAFQAVABZAGEAaAA3AEUAVQBDADkAOAB5AEoAKwAyAFkASwA2ADEAagBYAEQAVgB4AEcAMgB3AGQAawBEAEkAagB5AEEAcgBoAHEAaQBZAEgAVABZAFUAbQB6AFEARwBTADYAMgB1AG8AMwB2AEEALwBVAFkAVwBrAFMAbwB2AFUAWABCAFcAUgBQAFQAMwAvAGYAZQBRADUAcQBRAC8AMABoAEkAaQB4AE4AMwBVADQAUQBqAEcATwBzAE8AcwBnAGkAawA3ADkAUwA4ADIASQArACsANgAwAFkAQgA1AHoAVgBIAFoAMQBJAGEARABXAHcAdgBEAC8AOABiADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APABTAEUAQwBVAFIASQBUAFkATABFAFYARQBMACAAbgBhAG0AZQA9ACIAQwBlAHIAdABpAGYAaQBjAGEAdABlACAAUAByAGEAYwB0AGkAYwBlACAAUwB0AGEAdABlAG0AZQBuAHQAIgAgAHYAYQBsAHUAZQA9ACIAaAB0AHQAcAA6AC8ALwBnAG8ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZgB3AGwAaQBuAGsALwA/AGwAaQBuAGsAaQBkAD0AMQAxADkANAA0ACIAIAAvAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewBhAGEAYQAzADMAMQBmADMALQBlADYANQA5AC0ANABlAGEAOQAtADgANwA2AGIALQBlADgAYgAyADUAYwA3AGIANAA5ADkANgB9ADwALwBJAEQAPgA8AEEARABEAFIARQBTAFMAIAB0AHkAcABlAD0AIgBVAFIATAAiAD4AaAB0AHQAcABzADoALwAvAGMAbwByAHAAcgBpAGcAaAB0AHMALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AXwB3AG0AYwBzADwALwBBAEQARABSAEUAUwBTAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgBvAHgAeQB4AGIAVQBnAHUAeQBtAEYASABMAGgAdQA4ADAARQBIADkAbQA2ADIAYwAyAFgATABGAFgAYgBqAG0AOAA3AEsAbABFAGIAUwBGAFEAawBpAGUAdQByAHIAOABSAFoAZwB2AHQARQBNAFcAZABnADYAagBNAEEAawBMAEoANwB4AFAAbgBXAHMAMwBoAEUAagBPAEgAdwA5ADkAaQByAHcAWgAxAGcANQBaACsANgB5AFkAZwBrAHQAVwBsAEsAaQBiAG0AUABzADUATABwAGEAbQBkADYAdgA1ADMAUgA0ADAAZgBLAEUAUwAvAEgATgBXAGQAagBiAGMANgA4AHgATgA5AHQAeQBmAHQAcwA0AHAATwBmAHkASgB4AFQANQBYAGcAbwAwAHIASABWAHMAZQB0ACsAcgBEAGcAUwBoAEUAOQBCADMASgBRAGIAWQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AFMARQBDAFUAUgBJAFQAWQBMAEUAVgBFAEwAIABuAGEAbQBlAD0AIgBTAGUAcgB2AGUAcgAtAFYAZQByAHMAaQBvAG4AIgAgAHYAYQBsAHUAZQA9ACIAMQAuADAALgAzADAAMQAyAC4AMAAiACAALwA+ADwAUwBFAEMAVQBSAEkAVABZAEwARQBWAEUATAAgAG4AYQBtAGUAPQAiAFMAZQByAHYAZQByAC0AUwBLAFUAIgAgAHYAYQBsAHUAZQA9ACIAMQAyADMANAA1AC0AMQAyADMALQAwADAAMAAwADAAMAA3AC0AMQA4ADkANgA4ACIAIAAvAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIAUwBlAHIAdgBlAHIALQBMAGkAYwBlAG4AcwBvAHIALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA4ADQAMgA2ADAAOAAzADYALQA5ADgAYwBiAC0ANABmADIAMwAtAGIAZgBlADkALQA2ADQANQBmADMAMABmAGYANgA5ADIAMAB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAzAC0AMAAyAC0AMAA1AFQAMAAwADoAMAAwADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA1AC0AMAAxAC0AMgAxAFQAMAA3ADoANAA1ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgBLAGcAUwAzAHIAdAA5AHMAZwBrAEIAVQB2AHMAQgBwAHMAQgBRAGMASgBvAGoAZAAwAFoAOAA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgB0AFoAOQA2ADYASwB5AC8AbAA3ADMAaABNAEIAUABQAGoAegAyAHAAeABpAEIAMwBxADQAYgBUAGQANQBVAEsASQBmAEcAWAB0AGIAYwA5AHIAbQBkAG8ARQA1AE0AOABCAHcAQgArAG0AWABxAEcAeAArADAARQBQAHoAOABTAEMAcwBJAHIAaQA1AFoAbAA0ADgANwBMAFMAZwAwAGEAagBZAGwAMgBDAGIAQwB0AFAAYwB3AEoAQQBkADYANQBUAEwARwA4AHEAeQBtAFQAegBTAEkASgBLACsAbABSAEIAZwAzAEIAUgA0AE0AbQA0AFUAdwB4AGsATQBjACsATQBJAGsAUwBKADMAZgBWAGkAagBtAEQAbQBNAE0AYwBBAHIATABOAHQAZQBKAFMALwBNAFEAZwBsAG8ANABXAEEAWABVAHkATQBlADcAOQA2AHAAVQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA5AFQAMgAxADoAMQAzADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADkAVAAyADEAOgAxADMAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAwADkALQAxADIALQAwADcAVAAyADEAOgAxADMAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBTAGUAcgB2AGUAcgAtAEwAaQBjAGUAbgBzAG8AcgAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGEANQA3ADIAYgBhADkANwAtADEAZABiADAALQA0ADcAMQBiAC0AOAA0ADkANQAtADQAYwBhADEAYQA2AGQAMwBkADcANgA4AH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABTAGUAcgB2AGUAcgAgAEUAbgByAG8AbABsAG0AZQBuAHQAIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AFAAUQAzAFoARABoAEcAeQB4AE8AVABsADYATAA5ADMAKwBCAGoAdQB0AGsATQBZAHYAQQBnAGYAMgAwAEkAbgBXAGEAYgByAHIARQByAEwAVwBCAE4AagBqAEMAVQBrAFEAUABBAEMAQgBOADcARwAvAGsAawB5AGIAQgBZAHcAOABTAEgAdAA4AEoAUwBXAHcAUgB5AGEAbABYAFIARQBoAG8AQwBCACsANAA1AEMAMQA0AGIAKwA1AEMAQgBPAGoAaAA2AG0AegBMAEcAZgAwAHIARwBXAFgAMgBaAE8ATwBaADQAWQBCAE0ASABTAFcAeQBoAG4AKwBCAGQAUgAzAHgAdwA5AGEANQBDAFkAQgB1AFMAQQBBAG0AaQBhAEcASwBGAFAAVgA3ADAATAAvAHYAWgAyAEYAeQBUAFkAZABlADYASQBqACsATwBqADYAWgBrAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBJAFMAUwBVAEUAUgA+ADwASQBTAFMAVQBFAEQAUABSAEkATgBDAEkAUABBAEwAUwA+ADwAUABSAEkATgBDAEkAUABBAEwAIABpAG4AdABlAHIAbgBhAGwALQBpAGQAPQAiADEAIgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBNAFMALQBEAFIATQAtAFMAZQByAHYAZQByACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsANgBmAGUAZQAxADkAMgAwAC0AZQAxADgAOQAtADQANgBmADUALQBhAGEAOABhAC0ANwBkADYAYwAxAGMAYgBmADQAYQA4ADEAfQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAFMAZQByAHYAaQBjAGUAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AHEAVgAxADAASQBtAEEAdQBnAGIAMgB5AGwATAA3AGQAdwBwADEAdgBwAEwAYQBBAE4AZwBpAG0AQwBKAEsAaQBMACsAUgBuAEsAZwBTAG8AZQB3AHgAbABUAFQAWQBhAGgANwBFAFUAQwA5ADgAeQBKACsAMgBZAEsANgAxAGoAWABEAFYAeABHADIAdwBkAGsARABJAGoAeQBBAHIAaABxAGkAWQBIAFQAWQBVAG0AegBRAEcAUwA2ADIAdQBvADMAdgBBAC8AVQBZAFcAawBTAG8AdgBVAFgAQgBXAFIAUABUADMALwBmAGUAUQA1AHEAUQAvADAAaABJAGkAeABOADMAVQA0AFEAagBHAE8AcwBPAHMAZwBpAGsANwA5AFMAOAAyAEkAKwArADYAMABZAEIANQB6AFYASABaADEASQBhAEQAVwB3AHYARAAvADgAYgAwAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYQA1ADcAMgBiAGEAOQA3AC0AMQBkAGIAMAAtADQANwAxAGIALQA4ADQAOQA1AC0ANABjAGEAMQBhADYAZAAzAGQANwA2ADgAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAAOQBUADIAMQA6ADEAMwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANAAtADEAMgAtADAAOABUADIAMQA6ADEAMwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AZwAzAFAAVwBGADUAVgBkAEoAZQBvAFQAVAA0AHoAcAB0AHIAcQBiAGkAaAAwAGEAbgBwADgAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4ASwAvAGEAWABpAFAAegBUAEgAZQBaAFMASgB5AEMASQBDAHcAOQAyADEATABSAHEAeABBADcAOQBxAEUAZgBvAFgAeQBBAFgAcQArAHQAbgA4AEQAbgArAGEAMQA2AFMAagA0AFAAVwB3AFoASgBRADkAcwBNAEEAQQBvAHAARQBPAEUASwBsAE4AWAA2AEkATgBzAEEAQQBXADEAMAB6AGsATQBDAGkAeAAyAFUAQgBsAEwASgBDADMAVwBUAHAAdwBoAHMAbABUAEYANgBSAG0ASwBIAGgAUgBYAHIAcQBuAGkAVABVAGsAdgBQAEQALwBxAGoAdwBUAGoAZQBWAEgAOQBKADUAcwBXAFEAdwBsAHgANABrAEsAawBIAFUAaQBFAHoAZQBlAFIANwBPAEkATABrAEUAMAB2AGgAdQBUAHIAVQA1AGQAZwA4ADYAbQB1AFkAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFMASQBHAE4AQQBUAFUAUgBFAD4APAAvAFgAcgBNAEwAPgA=</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAyADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAyADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADQAMAA4ADQAOQAzADAAZQAtAGQAZgA0AGEALQA0ADEAZQA4AC0AOQAwADEAMQAtADYAZgAyAGUANgBjAGIAZgBlADQAOABlAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADIAMAA0ADgAIgA+AE4AUQByAFkAUwBBAGMANAAzAFYANwBOAFIAVABXADgAVgBUADUARQAyAFgAaABNAGMAdwBtAG0ATwBOADcAVABrAFEANwBFAFQAVQBJAFcARwBxAGwAUABUAHYARgBTAHcANwA5ADgAZwBGAGcASQBYAEIAYwBGAE0AdABDAGQASQB5AGYAMwBWAE0ATwA1AFkARwBPAEsASgBEADEAdwBuAGMAMgB5AGQAbABvAHoAZgAxADYAVgBIAEYANQBVAHIARgBnAHQAawBUAC8AOQB1AEsANwB1AFIAcwBoAGoAeQBIADUAMQA2AEgALwBjAEMASwBKAHkASQB5AFAAYQBZAEUAawBXACsAcABJADcAeAA4ACsAYwBmAGcAVgBjAFUAWABaAC8AbwBDAHIARgBIAGQAdQBlAFgATABTADQAYwBlAC8AbgBhAGwAcwA0ADUAcQB4ADUAcQBxAGMAZABNADcAWQAwADgAbwA1AGEAMQBrAFgALwB5AG8AaQBQAEwAYgBvADkAbQBLAFMALwBOAGwAegBFAGYAYwBSAHYAUgBOAGkAQQBDADYAVwBxAGwASQB2ADgATQBnAE4AeABwAEEAbQBVADcARgBSAFUASABUAFAAYwBrAC8AZwBPADkAWAAwAGEAZgBoADcAVgBrAHcAUgBxADMAMwBUAGoAcgBDAFMAKwBVAGkAZABvAHgAdwBPAEkAMgBFADAARABLAE0AbQB0AGcAVQBNAEEAMgB1ADAANABPAC8AZgBnAFIAMABMAGUAVQByAHUAVABZAFkAagArAFEAegAyAEkASQA4ADIAcQBjAHoANwArAGYAZQB0AEUAZABVAHMAdgBLAEsAYQAxAFoAQgBLADgARgBuAG0AdwAxAEIARgBQAGUAbwB5AFgAOQBnAD0APQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlAC0AQQB1AHQAaABvAHIAaQB0AHkAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIAYQBzAGMAaQBpAC0AdABhAGcAIgA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAQwBBADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AUABRADMAWgBEAGgARwB5AHgATwBUAGwANgBMADkAMwArAEIAagB1AHQAawBNAFkAdgBBAGcAZgAyADAASQBuAFcAYQBiAHIAcgBFAHIATABXAEIATgBqAGoAQwBVAGsAUQBQAEEAQwBCAE4ANwBHAC8AawBrAHkAYgBCAFkAdwA4AFMASAB0ADgASgBTAFcAdwBSAHkAYQBsAFgAUgBFAGgAbwBDAEIAKwA0ADUAQwAxADQAYgArADUAQwBCAE8AagBoADYAbQB6AEwARwBmADAAcgBHAFcAWAAyAFoATwBPAFoANABZAEIATQBIAFMAVwB5AGgAbgArAEIAZABSADMAeAB3ADkAYQA1AEMAWQBCAHUAUwBBAEEAbQBpAGEARwBLAEYAUABWADcAMABMAC8AdgBaADIARgB5AFQAWQBkAGUANgBJAGoAKwBPAGoANgBaAGsAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAEEALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA0ADAAOAA0ADkAMwAwAGUALQBkAGYANABhAC0ANAAxAGUAOAAtADkAMAAxADEALQA2AGYAMgBlADYAYwBiAGYAZQA0ADgAZQB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA5AC0AMQAyAC0AMAAzAFQAMAAxADoAMgA3ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgByAHEAVABNAHAAZQBXADAAOQBrAE4AWQBBAEQAdgBQADcAaABZAFoAWQB0AGgAQwBjAEwAbwA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgB4AFgAWgBMAHEAZAA3AGUAVQBhAEgATgBKAHMAVwA3AG0AcgArAFQAZwBnACsANgBIAGkAdABGAEEAawBPAHIAQQBzAFkAMwBMAEgAMQBwAEwAWgAvAFkAMwByACsASgAyAHoANgBSAC8AcwBlADAANgBaAFYAVQBRAGgAegAyADUARgBHAFMAawBiAFIAdgA5ADQAWABDAGEAegArAEEAbwBXADAARQBaADIAZABnADEAZgBBAHkAbABtAFEAZABJAEEAQgBqAHEANgBJAG0AOABCAGkAOQBvAEYANgA3AG4AVwA4AEQAQgBjAGoAcgBiAGkAMgA1AFcATwBEAEgAVABlAHMAZQBBAFAAUwA2AGMATwBxAGkARwBzAFYAdgBZAFMASwBQAE4AawA1AE8AKwB0AGMAQwBLADUARQBQAHIAVgBpADAAcgBQAGIAMQBRAEsAUQAyADQATwBHAE0AZwAzAEwASQAzAHMAVgB3AHkAaQA1ADUAUQBiADEAdwBLAHQAZABaADUAVgBxAGQAWgBKAHYARQBjAGsAWQBFAGkAWQBRADEAZQBmAGEAdQB5AEkAdQBuAG4AbgBmAG4AegA1AEYAWABYAFUAUgBCADcANwBKAG8AUwBxAHQAYQBZAHgAdgB6AHUATgBCADgAKwAwAGkALwBsADAAYQBHAEIAWgBZAFMASQBsADMAawBZAEEAVgBkAGcAegBhAFkAdwBsAHAAVABzAGkAbwBTAHoATwBlAFEAMgB1AEEAbABkAHgAegAvAHoAcAB2AFcARAA3AGsAcABEAHcARQB4AHAAMAA0AGwAZwBYAE8AOQBrAFYAOQAxAEsAQgB2AG8AZABqAFIAUgB1AC8AUABKAEUAZQBMAEMASQA1AGEASQBPAG0AVAAzAG0AUQA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBTAEkARwBOAEEAVABVAFIARQA+ADwALwBYAHIATQBMAD4A</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMAA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAwADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAwADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGIAZgBkAGUAMwAxADcAMQAtADEAYwA4ADMALQA0AGYANwA2AC0AYgA1AGYAOQAtADMANAAyADgANwA3ADQAYQAzADIAOABhAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFIAbwBvAHQAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUgBvAG8AdAA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AWAB5AGwAQwB3AFMAbwBvAHcAMwBNAGQAbgBzAFYAUABrAFQAdAB3AEkAWQA1AHIAawA2ADQANwBiAFMANgA0AE4AZgA3AE0AMgBIAFMAOABrAGwAUgBrADUAYQBoAGgAYwBNAHgAOQBWAE8AbABuAHQAegBxAFgAMwBTAFkAeQBxAHgAbwBYAFEARgBEAFIALwBrAFQAVwBWAFQAcABiAFgAVgBNAHMAUwBZAEwAeABxAHIAKwBXAEQAMQBqAFQAZABIAHMAdgAvAC8ANwA5AFEAdwBIAHQAcgBLAGgATABNAFIANwBqAGMATABjAE0AbgBYAGYAQQBFADMAOQBLAGEAVQBBAFoAZwAzAGQARgBTAEUAdAArAEoAWQBiAFoAYgBvAFMAagBQAGUASgBvADYARAAxAGEAWgBtAGMAWgB2AGwAYQBkAHIASQBxACsASwBwAEIAcQBiAGcASQBFAHEAYQBiAHEAUABBAGcARwA4AC8ASQBiAGgAdABOAGIAbABhAEQAawBUAG8ANwBlAHYAKwBBAHUASQBXAGUAYwA5AEUAagBIAEoAQwBZAGsAMABUAFMAegBKAGYANAAyADMAaQBIAFoAWQBKAFgARABNAHoAMAA4ADEATwBCAHIASwBZACsAagBNAHQAcQBrADgAYQBNAHAAaQBxAHYAYwBYADYAbQB2ADcAbQBUADcASQB3AFkAdwA5AGEARQBrAGwAeAArADMAcABtAEwAcQBCAFkAOAA3AFYAVwB6AGwAeABGAEsAOAA4AGoAbAA1AEMATABIAGIASgBxAHgATAA1AGkAdwBDADMAVgBwAGYAVgB6ADAAVQBhAGwAbgBnADEASwB0AEQAcQBaAG0AYwBaAGQAagB3AFAAYwBRAGMAMwBSAE0AeABsAGcAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AC8ASQBTAFMAVQBFAFIAPgA8AEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUALQBBAHUAdABoAG8AcgBpAHQAeQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBhAHMAYwBpAGkALQB0AGEAZwAiAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAQwBBADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgBOAFEAcgBZAFMAQQBjADQAMwBWADcATgBSAFQAVwA4AFYAVAA1AEUAMgBYAGgATQBjAHcAbQBtAE8ATgA3AFQAawBRADcARQBUAFUASQBXAEcAcQBsAFAAVAB2AEYAUwB3ADcAOQA4AGcARgBnAEkAWABCAGMARgBNAHQAQwBkAEkAeQBmADMAVgBNAE8ANQBZAEcATwBLAEoARAAxAHcAbgBjADIAeQBkAGwAbwB6AGYAMQA2AFYASABGADUAVQByAEYAZwB0AGsAVAAvADkAdQBLADcAdQBSAHMAaABqAHkASAA1ADEANgBIAC8AYwBDAEsASgB5AEkAeQBQAGEAWQBFAGsAVwArAHAASQA3AHgAOAArAGMAZgBnAFYAYwBVAFgAWgAvAG8AQwByAEYASABkAHUAZQBYAEwAUwA0AGMAZQAvAG4AYQBsAHMANAA1AHEAeAA1AHEAcQBjAGQATQA3AFkAMAA4AG8ANQBhADEAawBYAC8AeQBvAGkAUABMAGIAbwA5AG0ASwBTAC8ATgBsAHoARQBmAGMAUgB2AFIATgBpAEEAQwA2AFcAcQBsAEkAdgA4AE0AZwBOAHgAcABBAG0AVQA3AEYAUgBVAEgAVABQAGMAawAvAGcATwA5AFgAMABhAGYAaAA3AFYAawB3AFIAcQAzADMAVABqAHIAQwBTACsAVQBpAGQAbwB4AHcATwBJADIARQAwAEQASwBNAG0AdABnAFUATQBBADIAdQAwADQATwAvAGYAZwBSADAATABlAFUAcgB1AFQAWQBZAGoAKwBRAHoAMgBJAEkAOAAyAHEAYwB6ADcAKwBmAGUAdABFAGQAVQBzAHYASwBLAGEAMQBaAEIASwA4AEYAbgBtAHcAMQBCAEYAUABlAG8AeQBYADkAZwA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBBAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYgBmAGQAZQAzADEANwAxAC0AMQBjADgAMwAtADQAZgA3ADYALQBiADUAZgA5AC0AMwA0ADIAOAA3ADcANABhADMAMgA4AGEAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAANQBUADAAMQA6ADAANwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANwAtADEAMgAtADAANABUADAAMQA6ADAANwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AdwBFAEMAegAvAEYAMgBwADEANQBnAGoAQQA3ADIAegBLAGoARwByAFkAMQBDAEMALwBEADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AawBMAHAANQBnAFoAdQA4AE4AMQBlAGsAWABDAEgAQgBaADkASgBYAEIAZQBHAFMAZABRAFoATABKAGEAMABkAGwAdQBKAHgANgAzAFQATQBkAHEAegB0AEYAQgBUAFMAVQBGAGkAagB0AHAASABJAE4AYQAxAGMANQBhAHcATQAzAE4AbABhAEsATAB2AE4AQQBaAG8AdgA2AE0AUgBEAFYAaQBSAGMAMgBOAEsAdgBwAFkAWQBMAEcAZwA5AEwAaABYAGUAUAAwADUAbQBsAE8AVQByAGwAZwBVAHEAOQAvAG8AaABUAFcASQB0AGsAdAA5AFUAVwA3AGgAWABoAHcANgBGACsAUAAyAFUAbwBHAEsAUwBzAE0AZwBIAHUAYQBmAGgAQwAwAHgAWgBKAEEAdwBOAEEAVQBrAGMAWQB4AEwANwB0ADYAYQBWAEEAeQBWAGgANgBEAE8AaABHAG0AawBzAEwAbQBWAFMAbQBSAEYAQQBzAEkANgBQAGoAMABFADkAWQBaAHQAdgBIAGIARwBOAEsAYQBGAGYAbQBxAC8AdgBGAHcALwBuAEcAYQBFAE8AOABaAHMANABtAHkAaABHAHMAYwBhAGkASABYAEwAWgBiAFUAVQBRAFQANQBCAHYARgBYAGsAawBJAEMATAAxAG4AdgBBAGcAUQB3AC8AYwAyAEUAbgBsADYAeABkAEoATQB2AHAAaABGAHgAKwB4AGsAWABIAHQAegAwAFgARgBtAHYASQBDAGEAYgBOAFoAWQBsAGwANgBvADkATQBDAEwAQQBSAEkAQQBJAFoAMAAwAFoAWQB2AG0AbABZAHUAbwBmAFIAQwBSAFQAawA0AG0ASQBjAFgAawA0AEkAYwA5AFkANwBCAGIARwBDAG8AVwBKAFEAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE></CERTIFICATECHAIN>Q}p$a 0+fBsJ0r 0PwC"J &ZKyh %2]-_ L-!O  r-dF5 Blt0W G8|4.$d! 8r1LA L-!O  dC@N%E &P;n*3(' nw3 # ~E7"# HJP,] HJP,] DTHJP,] {A}O{ f5M<l H(C|&i f5M<l 8?OrI f5M<l -yyk6c/ XRupm I`#(gB e:0 p JRY,x\t 1zo!} ]1p%hrOp 53z4T 7<Xf'u }(b@W K#HQI {l"k{ z2Erd WoDdp Ih_E= m<c-Ix -\|O3 D-Ti*.v mv5j9 y8I1E[ %u9TF SS$)v& 0k'1q ^~p`U `>2gV Kn~5kY"A+ {7q=8 lqu+~$/{ Y<$]D ?9*&o !CRQ. >=l'U b.(i~ #(EX| [r+%c rwOD' HyY4g ONb)} "Fok$ M`c2& y>qcu 87>w"% s)o1d BGct[* I(]0c [NhhHy: D8~v) izM"jn SD$H; -\|O3 D-Ti*.v EN$ctaHa( }ZM'U >eAX'$ SS$)v& 8J'cb]/m 8J'cb]/m 5_],s* Q{{9D <84uM af?:v\ S*vc1 XwEc> A4>)~) K'b^Y ,mm(U 6YksQ :KX[5 /5#w( W6tn>r (,"v? b]_$T _Cn2/3 PC/=}y So,]u#t 16S]u 0QXmR =$8:_u'Zbl ?O35/b )|FWNV n6(a: <nz1b 6nh\Gh tAJ4n -"\f_2 M*G6z M*G6z M*G6z M*G6z 4*(C]1n t wBr @< EM hxzUU 47z:fC WA>nD B='LG zJ|hU< S=!mG {a?B0 IJzXY JjLaI xI"BpK G|t3! LC{<*  G;BD'k >nen&j [#C`c B='LG bV;xmN ?u`lnD ';::J )aZW3 g&'i! B='LG bV;xmN ?u`lnD {a?B0 IJzXY JjLaI xI"BpK B='LG bV;xmN ?u`lnD [_)9k'e {a?B0 IJzXY JjLaI xI"BpK bT8(P t}90. B='LG bV;xmN ?u`lnD  ?X;XD {a?B0 IJzXY JjLaI xI"BpK B='LG bV;xmN ?u`lnD ]s!XO {a?B0 IJzXY JjLaI xI"BpK B='LG bV;xmN ?u`lnD {a?B0 IJzXY JjLaI xI"BpK ^U]CS B='LG bV;xmN ?u`lnD {a?B0 IJzXY JjLaI xI"BpK B='LG bV;xmN ?u`lnD _Y%]4 [';::J )aZW3 B='LG bV;xmN ?u`lnD }kP*r m9s7f LC{<*  r()*r I$JU=7 @ZWf_K ';::J )aZW3 B='LG bV;xmN ?u`lnD ZSu5a mzz\S)9 PTLu6 '!@*"# ni<doB >J6+ P 9Cs@[f i~t}]  .gJl}j ?;S}8 t>+5e dj 0BD bFz~P< J)sape 5yxDp ~hq}a 9#<_]U\oC mZQdt 9dX,^s Wi%#2 +QD;2 *BV#~u _G"uxw |?b#VT f\!`' ZJP(O 2[7Me MY5s" +QD;2 *&jou fknp2'e z9#<_]U\oC *BV#~u ELLuj P{SJEeE |cWRd@d r?k_( a[%M" *BV#~u _G"uxw #K~*E+#a. PuTLO xnZuU ].+9n hAR>_ v[6Q"7 [{qs\L -%E>_: +QD;2^ >Tjm'xX e. >F ->`1f ->`1f X,Js-&]T -He3+ .Lj<V5_ C$M4' mZQdt C_CIE R2wfu  K[fC LqcR4 6.NE( k55xZ |FYW@G %uqL;c (os$V },y.PZK =UP2u [lU"~ aQ)hJ 0CCT5 vAc&(xr CUE`j pCW#i KY@.! lfkQWPC .qc]r TS_3b :-mD,w o~w^\ r 'lWvQ -ohhs( j-iT4 #0vK[ yB_iS :cs[  (^\|y 7/2if, SJ\Y  +umkGw U`;cc (Hc!F {0O-< w)2v- yGH&" !R yp E><9U ga Jy fN.'O 2{^BK 3!0E_ {/&2)e NFg0x .k19N NuIap dn[X" eew!ZcA/ h'a"G <5Xxd *rat]8 :yP,D W@Pwl A\1]M @-qN, @Pjg;=b?f r_LH! *kgX+] 8 {/_l Yp 5< Y7wAc IkQpi ~Ma=| <sA@P Lc}[p cl@\<3 k%n?gz yXU*_&a 963)A CySz>r  ;"%Xu FmYE_ -(Z4] Qpcz} |*?no NhN`4 b1$A% mxEUYR 4O+?c LJgt5p 6LAn%% Px{Z< \\o9]< ys-ncl {Y`ZB M,pNj&p 6lr3Ub slg-o NUh[? tZRy@L ({vn= jj>q| 9+= + :~'B6 9/k>d$W X$)V@ q#AAM Tci8}# `ufsP %k:>` MB;rw %`d3- BqEb(o RS%?c 3T-oW tCk^_-.^ hS]a)tg 4j4=f x,4bVU '96$8 Ib&HN w\.Y3 MC#.B$ *$f?DIq -4cZ2D ek8-B S9'/T YY}w= Z{,I* xt0BD-5y u+q^4 K#e([ E~^f7 Fr?#z :aV? % /Lu*@ A@0$l2 e7Xys U=^VH ^e|8]I[C& .\p>un *\C(s DJ4%\ &Sx56 WdYU+ ?he*T ["y*h! |dt6kr)= A\c`vw: 6w5dkH [=LS@ eA]qn v"(cx 4[j/rs.{ {O1;! `|vB{ * nwmG [wSR7 0cgDp_ f0Kp"` ?Zvo= k[DIW. 4<CE\ n[)eetA Lj5>1 qu6Lg [ufKY NO+c( kv}p1 ?,*0Dsj}| y}CRu ^vK"] oC}w5 Nnw#H '+v$I tD6+cC eN;sK o^~d} #KJxInoS A9TA# l%[y# /zT5m pfP9G !fNIq ~Z6TB _wA$! ,fg^7 Ib?Ea "mCP)l ^sy7Z 91?`fKPr iUaC#< ghIdw 6]d<> vH0-| h,{~\J [@Gh{ TwC%!=k3g T;J1, ;$a?/_ 8n.-a V[Ys"}" Co?.1 $v'ba. 3iNUI )APB[i V*bJJ QF6;`Ft C=yoT Wkmh. BHSO@d TPVXU `(97< e#Tk\& j`k1$[/ iKdt1 $}N>z ?\?,g ^TK@{ =`HZ0 LBSRI q*omzK( w&7{k' <n@Qi AMILlf AVxV` (OP~/  !ln3'uU/ 6+ine XS?u5 xK2}*\Y| M:u=NgBG [mu { %]H$2 >8~~4 :Q];F 2<w=> |~A"p\* \A;y/ %U'Fu ,V\o1 y5'J.0 ,f,DH kR7l& A"$8Zc W%h=* 0nd@8 k@T(y \F`1$ *O2KG 2>)g)8j 'd+e\ El/R&eo #x_.[y BS-:w &6aer Shy`I tAARj P[9?E!0kz !6T*X UlxO` /~h%dGH ]xA_[ _="Un Ym] f > ;b[- ~&pq` cip%d PI23,} ?C/v\ 2r?^$ j~?t^ 0@Om1E|W 3)^CI nX[?AR /.!3k2 PnLbS& pSkRh hQ:z1K> H,io~k {N$}3 ^r]|3 +vbs"i z}@|& !{|I(6 m,q>x fgF]9 :w-YkT  @:Au Kx4PT  xf5|f 7M(Iq) mY\u= g72xi3 XAX4J R1'_5 _>yck k=9E} j\RPl x[FYN1u'<Ma Onb'V%( CItv* 0p>iXg ]@ZE7 h,oXO op*Kcy 3Uj\x !@u6> ~i!`m L{v|# zg'Xd# ,;W,  `nGkGB 0e[c9 2K/>4 J<ya& Lb)F=p =-/^|"V6 {Fb[7 j]RE+ S`K.* */W'( 9[^;# . y'| PqB5Pm F#~F& P|fbe 4Ncr4 <[X<z d^$!` 8%`TP I"ACv aU9?R< ihBj+$E[. /Goc)od3? we]n9 N*e<p LU;3l b9Udb M%[\!O [i^1] ^6,_  ~{HQ[ PtF&| XTtdS NYe;B "[>Je. q(*e}7C V1>=I x"s@=5 UYJ&2 v{zl= ^VN4Z hiWH_ $Z&4`9 _Ynyn ikdu~ .P&4U 3H9@4 e,p4_ >X:A~I z4>pN (I3[w k0^>H ,z^Ybe Dn=ch TgkbHh1O 7ey~5 Mqym|fy /#&P*  05U< MNHnf .D\Tc|l %"Z+f) 6:`Nx Dc3Ka dyG|Kjc ;!V%S:@ ^\$:dJ &;U86uA W$@#L` nROxmo T1~Gu( RV!'+ ?{l(/^P\ hVThC 784D[ [nr.M $`kB  &c#s% &g+`3-:w Eu@P0 )`%eV AAqrR heWYurQ in9I) 2nT+N> '?fca;  4B8% j:i<~ 6"P*p xTV's Rrm<6Z "Brl;H;, {'JRwp !"wtO Eko*CV 3Q(V) o n]1 "B9y( "CF=# 9rWm> xZROR 4p;*<d n'#jS`6 T]Zba 6hGKy| [cLkI k0_b4 =h&?y ?*h\O&Wc 14:"( W\!P=]x F_8w, -x((C HWh|x@ QMD4~,/MBYs= "fT3- )>[U#E u$([$ t4y%& Tt25g5d wO}%j qn3Obw mPSAn ]MqS,$ ChHJ2 #,hBV Op*4) xTC{V'i &&!>! pjS{*[i Gz&g" EG, ! rHS)[ .ISof V1tyiF' H6I0rJO YD9Xcn* gFMC5 Y*-'~ P0w'a =vD@Wt< yj[ztEBj u~~g0 8-Hs| z3mWF^ W(n~M% _l>xa =6z6r c-ubC LN)qe e%X9&$/R{ O@{0I>H @ 2m?( PMTR8 P]wGHNA4J nEXaw l~tG$ `K+ij\Y oJ#Uk# V08#N p9zQQ` S3|\"So |L#B& YA*5I "4dZ4D $`S{? VM?]+ i7UOx 9Uyuk ;\nfoy a /n)v j]!-(u| (#VyzF 92bW3 0&5E5 nNMZ) pT!g_s' )iILr' ">Vd{% ]6<x& 28%'@1 vAESs` 9=G#6| 4gM'qgT*l4 YHxzb_ _Kd:P Rj2:X<A ? lx0 3tgV+ $4Noz /*I-> .%?@+ n?^J_`Q: h:qAx "m4t>5 Fk@(Vb omQdp Kt^\/' ZD*i/ 8#-/; G,o q  ]pyg (]GC V 4QXhg $2w:nz UE0/t 3w0%U jz.}2B #O937 U)i^) .Eo*J9S v-cAa V>1^4[N +wQ*/ X$\>QM _XGG)$p Vf)Yu k9T1D# jF{7x+ lu!in AjEan #PwD>ht6 ?s)wKs paxpm nF9C_8 e)xA# |%zx> Z-;@: gJp?E sMm1~ 5T`+T Vi>7` EQJ:BM 4ev1I I^]?q M(5Am @S}*/ #lT&R y7kbE e51k> V|%(G -|l z ,{T}@ I'n!&X \,ECe q%?L( 6vVKg E`Ih' 7=j[v  $9&1 k"\ij "m+,6V Xx),>2:4 U7KX, Yfy0` F@~(, X#:GVH Ixe.g HX#Co ZZuua2 'huyI) ]\: \M= DFpDW naOmP k!eU&UO gW@o+p Eov65- EQ8', 3QwoF ,>#Km )am@+ [^Y*+7 LSbJva n;[0S 9^CKx>NEHb jt}Rf+ j/P{{ (Yz9  Qu7Jds $o}@P ;UTwz Jv.?| 0>E^8 [.%Ayo 32L!*Y! kNPXp4/ YNN7o GhNW= |wU!- }]fvrd |CK15 ^nX@/Z&1 ,RwES >W+;p [*-{nC 84!N* Lien% 7/u*,9M *5{|K a/teo a}_}3i m/TYor{iM =&$<c 9dU(-9 >F("B 7[;'q @').= p`J.q $EfMe IeaoF 22LuZD Yqv66 Km{14 |?$7I cN6qh [TlF? 77H)lZ W['_6^U G`._S pnBBY 6fienl6f}b ^].1z g%v{'  /I!' +bEKE C@=f> XX7`R 0~`^E]Z aJZ4*0 aG_e" A>Ksy zO|ZX; Iem`% XHC** K}d-) a|s / K@c3Aa2:O +qB2/ rPM=9 Vf.p| 2GnzEU ''*'% C+MM7 ty=7&% ]L_>Q .H}? p nPO8T dC2g| ) onVb p'`Ud X5j00 $@-Dt gon'LX 4oi6Al 7H<Vy 0*"1. 4sQTg1 ^8?Cw lC3{0G (IO&^ df&PRq 1)wTm Zgm0` J88(r {H|{ZU DHdV'G*z N%tv{ cu?Fu q(nkl3 I4i.N LA02H &M+ " g|m s fVU s rn]F-rHT 4fVk\ f{)O% Krtt$ 3KQBo Rq*k$  `-!q d0S6"xeo>W S6dTSD/ uG1V" |-@Zv `u;ZI c+\}Y n\?q2 dK}M= Dt:f_ Vd_e4X 6@WU]K ym\4^ $f/&. m,\f  HgWsN=U }1i1H FnAQA c"F[uR WZksJ fd8,M Hkhi9{ZR z_15mX_ nPCR- /,sop5 MA0.f rGC*` +.;3c ^Ap_-35 hgT1W 5_;#+! 86IN( |n`F# c&/}9b 03m\1 j/C3.p &#iO)z m=JG- Ho)\> 1/FNHUB YyiZ% kLMB7 M,evm 1%v=t G%}Yd aIkca )uRC. AHWNE= SF(0@ QZ<*{SI6} 0#!>/ `CD/P $5fGUX RI{/, @S!>Z u%y*N i$~N;>+ JUq+X V;^b# m-) 3 aMcZ~ J>4.u EZ(l+ JocMt -.?zl<@ ~}qkH e:evxM /l12` )H_l_LJ aF+F/F YPl V gZ;0v n8yTBO: A:4?q/y KrS7X /T}cq d2CVY D)X_q 2a]+: Xt)(C 6="+[s [xkDq ^Z{u= (OkIN K#mjXBQ> V.8E; HV@x,7- +ApYN +Mq=V k.xSd BPxXa qSW0gWs $btaC8 T/fSr 0#R@"m J)D*v | o=VFu f$kSb' e)gw= D}>ff] i!LXW 'TGpDyO '(m:B/# n42sm.u x+"<:5 ,g'<} Z5Vru LW$hyH ^hB!* \)pG{ct &g'HOY }PI$J0_!Vi .!{0^ Ve)h- { Jkn PHm2PNF !mU-Ww V61-0N !]g"?v|y yQ#=; ,U;Cz jO2r) XaQ|?! yT'fu oRy]N Qpi?k N5R{Qf 8f55- Qpi?k N5R{Qf 8f55- H]@9`{( KLh"P JOlR~ Qpi?k N5R{Qf 8f55- H]@9`{^dt Mll<K EArH-n Qpi?k N5R{Qf 8f55- Mll<K t =me 7@S=l5W+ hB&qo( vBBpg 0r3 W )}X`9H)c.E ACjl2Gs "7wMy$ CK&-1 \+D]V 4@^wD#[Lnq 9zK`C Z]0Fe -C~Nc q4V+" R$#m: wP(wl g6MBJ #dM_[j 7>{i6H ZSykd)" %5NR@ 8)aGR. >z0+cBw aTw~[s 6,\bDU ew#+7 WL#59b HS8g' f4m$ZWq94v Cr/5U= ^lst& X)=mU( OUl%+H. Yurxba ]>PT| =c[^5x XyG?I f\s'= h0BO/ '_Twi pX>m){ hr6Gt G&=?5B _+wON n5WDf F>*2v_vZ -IRbR Qrd%% 7GKR1 sAu]A ]hD:| ,mE1eq ,qM4/ F^IjXR rGxf# }mweS E9"T5 =V~6y BDY%2]OAK 2m2]a )v:\V R*;;/ 1euFt Q0fab MCoid: !HOziQ )8sY:? 6+}WA ^^R%U$a  \|J_" ^<`*" 49v:( 3v`vH7 s:|{e )3[IH URSQv oz1|I  ylJm p{K|G ~LhRd ~LhRd H_c)F H_c)F H_c)F ~LhRd t>Y7  ~LhRd H_c)F rm)M3+ Zd)dG Zd)dG Zd)dG Zd)dG Y$lFH Y$lFH Y$lFH HTxm# Y$lFH HTxm# c5aVG(n |wDyg-h Vl4hA }bg`k J,$"{ Q-%*+k] KZ]:{ pe%4C 3v`vH7 }/F8( m-$FtC j|x.F id9E' RS%ja *;MpF URSQv oz1|I 6Ix%W uljKJ- g[g4k \mL%r Fz*8> Fz*8> Fz*)0 \mL%r Fz*8> `\l}6 UnvWu'!s^ N'HhE N'HhE N'HhE N'HhE EnO]l x\l}6 x\l}6 BmE,: BmE,: BmE,: BmE,: BmE,: he1v&R he1v&R he1v&R he1v&R he1v&R he1v&R =d7tH 9[UBy?s +\l}6 CQ\l}6 =HB"&WIM U ?*$ R@["| gKX~OI "n<2:M qeA\#Tk -,KU8H 3vEa-\F ]e8W9#H JOlR~ ;v''-fVg UY4z7TZ 'yaRr Mll<K UY4z+ .5yN#Bj Mll<K 7xy^Z ebC+em 5!ood ?T4D.3/. >Q|)$ H{Oy+ yS&V8 ZaZl; 8F7BY ZaZl; BEP8* d_j@wU a=v2-  HOE=S HyJ\W "GM[q ~o5v} M7dUji .H;Bq 9-~Kai s`U^\ ,P^+> zP_U4Kt z}*pP+ /w-N>M pw>]/ \@&|o ENXI?G 2PXv! hU43f- dR`-( R_gae vqOM@ \@&|o [9v~z ENXI?G *Y);A c+.a_ (,tQ( F@z|4 ?x71_% |.D"( "~N;F ENXI?G c"6=B \@&|o ENXI?G :'3V& n ".d (!F/* nQ:rLQ vqOM@ \@&|o ;ENXI?G }[qC< \@&|o ,q,/^ >A`i1* |EX[^ \Fv q H/(|3 cwL?b L9vE&z ctluy'8 >E-WH =jM,) /w-N>M \@&|o ENXI?G Bl<"s9)A V6WAx \@&|o b:,S{ -f; X ;Ekxt (,tQ( F@z|4 |.D"( "~N;F ENXI?G af,}. \@&|o ENXI?G 2PXv! hU43f- dR`-( R_gae .V?T~84( ccZIu R,z~G=1 *I 9&\f _;0x,a Y+QQ 9!$ \@&|o PVzpE e_iWB DCiyY \@&|o b:,S{ -f; X ;Ekxt (,tQ( F@z|4 |.D"( "~N;F ENXI?G af,}. \@&|o ENXI?G 2PXv! hU43f- dR`-( R_gae vqOM@ \@&|o [9v~z ENXI?G *Y);A *I 9&\f cwL?b L=?(H] T5@xN E~$Dj i{[,kh 4.:3<&*N ,zh,g |.D"( "~N;F ENXI?G af,}. \@&|o ENXI?G 2PXv! hU43f- (K'VGG o$(l" R_gae Y0W+_* E~$Dj [oqH]d ,zh,g Q3tMj !)xN` !)xN` !)xN` %8.rt3 x\oi5 !)xN` I=jVR TVr*~ +9%<f Qo7sv` B+Y[`u nCg2P 7Fu7P5) k!(dAm MM-d] (RHtV5{} #u4`N Wx'1@ 8|py- J};YS WjU'G g["O$9 Su:Bd_- Su:Bd_- g'u\{ qufkm 0PwC"JjG-){@1 ?=3!` }K.)# 5i81\ E]F'U yd+v.T W`hr[ ?yGci8U q@Yp+ K/n:Ju1 Txsw1 %K67JjC ?]daW +}b6> JEj{-0 /#.@S 0o;rf Z}EOb] YJ^.+ 9IoMXb# x 9$P FM{/& :fJ,6\ 1~S{I ^uF;D @3B8}  >Yu(N x:|3  5F2#aH vv5Tt\ MQ>{. QhFeI f'6x|3Zb} >`2b  L]bu& $6Bip H0i1, BCwZe vP}C. 379(O yufw\ g@t5|9 pV##? {51r>C {<.0:w:= ^"1TX Odga_U1 ktWk\/ VesQ  UIgWl <k=nHz5 U<_97 % w.O p0<zB p]wN6 $B.wy P!Bl7 =>&O. nQ*0H4*|5f-. s40N1k "kEuo 5x^2Ok >Z`>xQAL CZr>} !z)GE ywQ<w /m<XO u@0 + "%YAD ZUP[4 rry;q .U9k5 oF'=T >s9EPH_G!% rS{iv }.fnA-'o. .zM + ->:A]x uHG?\u ,f82K5W qACG99i C."gf $-?(q*o{ <@M~r ?U0J3 ;>{09t L^m1U j#;gU jd4 6 nB2a|t &DK>+o/ ,dPk5  L*tU R_6?l LY_(R H,I{Yk[~/k 6GX]O n|UDj> 1/5t~ Ko$r5 f6;<{ -)Sm1 1@vK!% $J}7e <o?.jA &W9\1 iNfCU }rOXm Sam-L <A$=Muv qOKoQ:fA =[`T1 FE?-m DBH%?V nvW-In7kCN p lj:" 6ISJy<q DI2U= /U1wQ SIki= 6E}wk z6e`Q % UYRPM =s$_t }B\Rr} K*\eIj hC,;=+ &]x?^8 ;p*A4@B] D}ysiJ Waw,/E SQDw' mI.C}} <0.<@8\ dA",L \?\f6L *ddn}I rxy , 5mm\><] -f+hj np1sc3 E$()q-~ /X|IW ZKEp< %m.Rt *CG|p  DVAI VBP:W hl>qW `P;pM 4H;xMw (g]vC Ddx-a9 $!< q&&.97t FCO.o /l3ec 0pENv -"l\gd IeWQ: mf5L9 F85wz iDKLb*z a<Jz) f>r7"A H*04A;C WJ4AF iN1P9T ^0:+w _*}>j (KGyaz" >x>Z\ k8Z,Fc 1%[)^. Si.;1 X*9p>@ L>.^$Fn G vQI KDXZ6 .-"gi #x2cl XGL3>x c-G5-6I :<(Qz; 47)P\ ,GC8z ?"aWRa bvt3w 2zhON n:i.Q lay`fhJ :|jY: F\7<_ "D)jl }i0~T sHsI51 ?g_ 9 oXek. _:\9n #H\!X \'|bNc Nm8^n t\7p' y%={# L~PVt p#Rds QieJU( Hl?}a 8&d=!t Poz,L JjDC> vy$j: ynsJH nGY3d/ 5iu@JLExR {R&QeL U|$P, 9,<e$ T6ZkG Y/p,G~ MO4Q"3, 4O;Tr k!;MR mk.ul  D?xLC !*MO< Ij?q, k>~GMf Egtd| [7S0.b`b ]6md (Q  j}F~ NpKJO  i/SS H[4Xs ~RR(I Ps:F5 <<#]9 |vf5A .]o6- 66F2%> afwtvG| *Z.$U 4ge7cn ffQRo %I'5< ^(W1_ NN2p2 rO0RG ?{PPL Vxs:M @\ScI HyL&~V4 tu1P; p~4*@5% &Js'M 6mBX2 WBK:t[ >2{'#  t'RW <l:OE _#402` -X7l} a2H V vJ;AG lE{kr ht_Sy q>`y+ ]Magk _#|.q (iJpqZY xyai" zSqge D)^ZB rn 34 QtH4W ?PXZ(Y [gj|EN ]rr}S &`]{[ B N!S 6lnY?* [sMp2 .o5u%V 1g|/ZI 6owm) ^5c=p Jy`6e Vz't+ 08)#% DB0[~ -SAUC u`Q<E < >D+ }P{Q\\ u7X8r 2tm|$ U,$Ox ']Sr@ EGQmU ao>M} :$m\p EY/UK =FVp:t 4]5bl I$Tnp hl)%Rr JEDXG oe(j1 -l="8 7"U3wr tA"e0 D!KzrT {"]vz. FZH@VNi >YXZ$ 5Zg)Z v!R@m8g0?q $5z#U &\d\FB ri1VX& ,]e=3 no&l4I<  a@v7s h|`d1 v8G+; flSDe A%n/W SLDO.A~ 9{r%_ 4K0Ow ]p.GR A"jA. ]1%Wa  Xab_ X/uZ"_> pp.Xi Qm+MPh FjdDs =]>)_ 9{f2u TA`m=@ XNW]~ :Sr}R t/YY2l ;l\`8 3;!oUP {c0%z/Nr Y?%N^ \rB`x= i:ogC /t8cb w|en' )+HYY 'US,} KJp^= t~ \]sA {rhR  LPWE3 zNkyb tam>x ATUsCU a)iZ, (ME0A iIq05 Ra$n3 //nrQ ORxQg d"+E&; UV-ed +W\4, z^4kG !4:}t n1b)@ H:!_t vD)sJ1 br9h\d qgQ.G* m/#W` ]G#>L 0# :Z^ pJSuT @)9[X  @zj;$} f3;&v *xoHb ae|dh NGfM~h i\Hz  snb!A )[w'Ny \}Fyi puiI^ ^YW{' 1nnZN) r9z{X Ir6U7g FS4!P| L[$L_ q<SLN.] 6P"-)2 hTfZC_ >uXa!Q MQc!; wjgL/ z{x.w 4;_0KV D`Cu[ m8X_7 KZr>y h?r}Y Nkb~p T<vBx gWTxb ^'.(e F#s}m FM4Q!WY c=a4H VJz(5 SV"J5 AAlos pQjS7w kaRAg cXmL\ <+@y5 I/1T.T <RE1S~9 7QEf< &A)dk H,)QVLnJ axW=; r"S,6 K<g#Q _1V~}:^ Z!1RD\ fP,6Zk AjpAG6' 4tOvJ @+TiY #&lbnb6b <ook5L &TpMW PM8aWa NCp,& ZBY\{5 MU#q]U/ 99S|I IAYAe 'U]U! =::6V E#Z@Q dg?8)x hv9<&  "A<^ /_Bp' Z0%,n %v[1@ -CIX~ $ nC' 1#5tA 8ouoq 2F6Wd e{_'9 k  T'Q _u1n@ c8LFV ZPFQ: E;e-Q~ y4Lv! :9[Vq ?hC6T VulD)u w5f^V 0tIMC G^_,d\ G@]6] QMGMM xD<AY <Xb83 >"(iH! /{f{6N y*~1< iD_g! x.96~ 25(JB W'1SC ec#P4H '/S{`M (@ kJ (L{2G*a hf}}p kr%X@ l4ejuD s6J2d IYH\~ mmUHk D<1BX [o8iP !Rx>H =|(p6J +`U3~ \Uzc' px_mS "\a{< LQ:#/8! OyM`K T,Of) %>r|K$8 )5r6$ $>fJi {-qd= QlhLr=O\ ,C$m.  K(8K [~XNEI jp1\'] LJC:q @y?&o 6cVj\F h4I?o  fi'QS# rFJ3: [4EV' B,g51h KHltDUv L)e_B ^=~Q@< }4Dw5q lch8m\ |D@@| (A\`Q' yBcB' ^xCW{ :|jIFA SNn'\Hk Pi2>J [k~e< 2)}"A ?HF f N67yk" ,rbS= j 'G$zhlMx }O8kr XCxwz )0eK-g zRAUa] Sqh z ^, z' }ZUqY jU;OkwIi $x7T| ?.&IQ nvDn3 wmM'S XP!wz Ji"|Ty| IsQ'X _,|*`X ]-}Wg k7D(E ;e&A) t;6w{+ hg}-`! 7YuGTC %%|"_ |!(^m 3d5sKa vu^?n< DM,`\ f`"sj <Hhd! -VTa8 m;9vF M#zM!h9 4*TF? Gd'f+ LbTFw >b6%k eD]2 Q 27<f_ oFGbd `CG4q(< (@BT? zE9,G Mq?GJw ;(;|h 3k$)`S; %U!L= f'_bd 7IfCt4L o/7T? cd<Q5 ,6\O8 m>ab[ }3]42p^[e >[6"Sl @Cs;0&q EXLpZ VHOhy Q>r]X. 6qK`iuKTt }78yL#  p3 Ng ;9&!#H  W=?GW MW&;* }biNs?6 ^~[]0 wGxH2 xx%_u6 L!e/  ;FUi$ 3uH"P A[=_?9 Wo!1os Eo}Tu $&[`"-| 5$[i! eF(A$ lS7<Q' :]<}J "xI9h]) K@+{yGq @aec: IakXM'W #+pJ8x ieQgy eX^c!Vx0 q[+~  D~c?o QekdgE> Ip63}1 rXVR0D; #m/IQ" 0}WSz x(f=K q47>o 3)^VDM ]m&]L >0S7Q I!<Gu7J PD~>Qj SM; du _K8'0 y#P}v?+ 0cb~( MLGW;B )v$r$ 9dDPx W2XN! +e}r;G/"c m\W}b  AY&Ib faoe* 6|p8]kG PCU>< aI_wPFG[ :RO>GC L=zUq =Y3eMf J!@_aZ6#k mCq+bSKuIG s?1)7 Kh0'TgP $u"\Y L8]?U> Y1.v{ -5l(@Gl eEv(g* T>`3~l> Xkh9B vrxUe Ni%+fz\ g0r?\ /'Lq`+@* \r@Wd gxqxk 8v83M ^-wGt  W@1V S7Rjb %"Mhqn Q%y<2 ;^oc$ eIVYu$0 Z4do:q {JKhs IM7F K$ :%PcR- G]w p O?,rDm :W[{M UF7*^; q?fY\0 Xq/WA (n5^PU ?m;!w e/pAI n;vqv npxwE| t\Ev| 6zVt$ "uKC] gDq"# mY3*L0 G53Iy ZxoId <$|~-%U) KxU-Tl =liSH7/ Ft(9x  t`+5 n8Na, B!SNh?rt WcuXn ;-r%P[ >Xc}^ wLHWa U35G4~ jD#$` ?A?r7 _i6q`E R~bRQ 3Dp}Tr XE',N 'bHQ& b:51+m k{T1) Z3+s' yhSe?: *W68W 5DpD- swbEw| aSIzT# wYDY- &Q:R9 p#bbF $;(=zG 7L{68A )-4cH!)CM K6#n\F\ OQ?`/]K >gs]!.8y G^ xriL d.QuB mz8/:==/ hc|vm JF%d\ JUbn# 3vY&! nA1M3 ZLiyt zV|<. xMV=kU\ (Ed<^ ,TdlqnP <bq.OX?R Db#iJ= g*V2Hr;LiY f&K4E5 Y"FHB K>bEp .h1{* 02FNn `tr<q S1,k&W!$ BH?jI Ze[V; NQEvN`K ~./SMV4 4+o@~ " sS< -fxTJ| Wlu7C( oJcYS nVY%% wIOv* >cf)+ @] qf iid0` ! PQg ! 77# rTwGX g63xc TC-29 G4QJ= ]e.+` W!Ta* ,cT~-I5 -~w(Z: N#0'J mv)3h }S{/8c +1l?<  qD9X9 .6a"x F7y>> ;xFmfk\ ,' qN r;<$_ txt85 mUwq^ RdB&h Ttrd^ %Nuuh  x)Lpv fozi] :-JZa o4V'%4 7w~uG I0E~25kS q&Eov m)k7G' KTk#; R/A"N 5Hom12 .MBFN &jiR29 U~5T2& J7)$$ ;b1,& 5O}bB 2AWJB5 M~, ` ^atD< f`/Oa E-bn4 r*xmX {vPQEn Ui'wP ~9E5'l u _9W xuP)i aP4'2 He8KCAC mwqfx XeK(vA` gY[Qi J]*8P a)FY4} 'Eg7n z|5f*FP ?Y]m. Rsm{D L%lq[ pw>`O _qhgg 1)weH >~5@v  hKDZ SU z> &R@;4 0x2k47D Cb8<y U:cjK u;l'0 "=,26d g0t=l SMj(LA%* AE_Lr D#^]\; YE?)qy,6; -T"G) U)5ad !,A)v L>T{z ]T8B" TyJ3C 4-1p^ gy}Yv sUc"A cXz?q {,W}S <)%ME u$V&m h>R1w 7K9iXa2  A'r%Qd :P2Ct u5{Y3 P2tzW !Dseu $:JVZo rzIeNmn dP{y^F{ o^tWzJt 1+6(l =.t': j"PaF G</Z> BfV)% ZXut= b>*X/|yS %VCzn wGxAC y2&lgQs[ Li"bO $Wq#}N mUKq]& \9XyVm Uwc^yLD g%w|SJ JFf"7 C/Qk6 Ay{uS$ sqk;* .X[A_ Z'X'  *$]3sQ)1 Y7)oq TqKjz j o9j T61n2g+ ! mP` FIKo0 DiQda .\z ` nsD+: 70p$A n )af n7%5@ w#'he ?vcei ',dQv c=S=g j?vrM ^zCB0# ua,a7 G^X'; RT^I1 8s9{\ 1YNDYTC rj`q  eo\z[ EpbK@ mCj6`cC w*&LUj (qSCO% /N'gQMQ M_=%- d~5gO w/]]VfW Jbk)Nr 9Ypss; q>Z;.I 'dcpw* BZ* J -1];# @K(c; Qa$F" D,AIR ?pN#=69 t1c^{ ,meRz >~e=# W^4"! ,Gof  J5m=% ']svM j]4iP LQX)LP N`w%K 1raq: +.Fd9 ucs{YV2 o/L+& " 0t' ndRgU Nk~rD E{*'ecM DId<Z} W$LIB4 DQ/My=mv8Z DZn?T x&:L] \"xWj; #LJT\uP uhDL9CbK'=: $D#@< `e/$)$W D:ZS  U;.yT/ ;k4=z^ k7!X/ v^'gO 1ruK# |:_=N ^$r1O $!eixp oMCz  Ad}Iu x&=Rw :`Of5k 12Kua3( >3INT Xz5O< ~`$!; (>T8> ,Eh~+iF2]sFPermission for this document is currently restricted. If you are not running Microsoft Office 2003 or an application that supports documents with restricted permission, you can read this document by downloading the Rights Management Add-on for Internet Explorer. HYPERLINK "http://r.office.microsoft.com/r/rlidRestrictedPermissionViewer?clid=1033" \o "Download the Rights Management Add-on for Internet Explorer" Download the Rights Management Add-on for Internet Explorer HYPERLINK "http://r.office.microsoft.com/r/rlidDRMMoreInfoLicenseReq?clid=1033" \o "Learn more about documents with restricted permission" Learn more about documents with restricted permission U}HSQ $"$,GE(TP VU*[ptP jq7z#J MG5$|
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\askdc\ASKDC_Logging.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. XrlScan ISAPI filter Title _PID_HLINKSXrlScan ISAPI filter JeffreyA Template - Quick Spec.dot lohab Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags place sI,bl~ B0NRT9 .KZf$ 0J<c9ASKDC Server Logging Standard  Author: Lawrence Ohab Purpose This document contains details pertaining to the log file implementation for the ASKDC.  It will outline configuration facts about this execution, information that is displayed and the significance of this data.  The ASKDC logging area follows guides set for Xbox Live servers defined in the document:  HYPERLINK "http://sts/xbox_online/Dev/LogPrinciples.doc"  http://sts/xbox_online/Dev/LogPrinciples.doc Please reference this document for more details on why log data is presented in a specific format. Configuration The ASKdc utilizes the Xmgmt libraries for to produce logging records.  As a result, logging details can be managed from the XMGMT interface or askdc.ini file.  The logging area is: ASkdcLog This area only produces messages for logging purposes.  Other areas exists which provide more in-depth descriptions of errors.   Data Format Th ASKdc provides 2 different log line entries to express the flow of information.  These 2 areas can be identified by their prefix marker.  The information following this marker gives an indication of a successful or failed execution.  The 2 entries are: Authentication Request FORMAT:  REQ|name|PUID|flags|IP address|NT_Status|KerbErr|DWORD Status  Prefix log identifier for the authentication request.  This item appears just as presented. Name   The name presented in the Kerberos authentication request. PUID   This is the PUID assigned to the newly created machine account.  Note that if the process should fail before the PUID is assigned then this value will be 0. Flags   Process flags given for managing the acquisition of the principle.  This is the IP address of the Xbox that sent Kerberos authentication request. NT_Status   The processing path for attaining a requests principle returns an NT_STATUS value.  This value basically indicates that pass or fail, no unexpected errors occurred. KerbErr   The kerb error generated while building the principle.  Indicates which this was a successful request or that something failed for a specific reason. DWORD Status   This value is a bit string that contains details of what path was taken to create the machine account and an indication of where failures may be occuring.  The meaning of each bit is defined in section 4. Pre-PreAuth Data Management FORMAT:  PPA|NT_STATUS|Number of Rows Loaded|Total Number Loaded in Lifetime of Process|Time of Load(millisecs)|Percentage Full  Prefix log identifier for PPA data loading.  This item appears just as presented. NT_STATUS   The processing path for attaining a PPA data returns an NT_STATUS value.  This value basically indicates whether things were successful or not. Number Of Rows Loaded   the number of new PPA rows loaded from the UODB database. Total Number Loaded in Lifetime of Process   The total number of PPA entries read from the UODB database in the lifetime of the ASKDC process. Time of Load   Presented in milliseconds.  This is the time taken to load all new entries from the UODB. Percentage Full   The percentage full of the PPA hash table in the ASKDC. DWORD Format Logging lines associated to kerberos requests(REQ) will produce a special DWORD that indicated that status and path taken to authenticate the requestor.  This DWORD is a bit string.  The connotations of these bits are defined as follows: Position Meaning REQSTAT_AS_INVALIDSTATE   The AS request has encountered some type of general error.     REQSTAT_AS_CONNECTIONFAILURE  -- The requested failed to connect to one of the ASKdc s dependencies (XKDC front door).   REQSTAT_AS_NO_SERVICE_PRINCIPALS   service principles for the ASKdc have not yet been loaded. REQSTAT_AS_NO_KEK_LOADED   no key encryption keys have been loaded from the UODB. REQSTAT_AS_SUCCESSFUL_VALIDATION   successfully created the principle for an AS request. REQSTAT_AS_MORE_THAN_1_PRINC   signals that the request has more than 1 associated principle.  All found principles will be given for authentication.      REQSTAT_AS_PRINC_FOUND_IN_DB   The database returned data for the desired principle. REQSTAT_AS_MODIFY_GAMERTAG   The given gamertag has invalid characters which have been modified for the database lookup. REQSTAT_AS_SC_NO_PRINC_EXISTS   This request s principle was found in the secondary cache however it doesn t exist since this request is bogus. REQSTAT_AS_SC_PRINC_COPY   This request s principle was found in the secondary cache and we re going to reuse it again. REQSTAT_AS_SC_TOO_SOON   This request s principle was found in the secondary cache however it has come back to soon to be a client. REQSTAT_AS_PASSED_PPA   The given request has successfully passed PPA. REQSTAT_AS_PPA_BAD_TIME_RESPOND   The given PPA data has bad time and we will respond. REQSTAT_AS_PPA_BAD_TIME_DONT_RESPOND   The given PPA data has bad time and we won t be responding. REQSTAT_AS_PPA_SPPA2MISMATCH   SPPA mismatched between the request and the desired result. REQSTAT_AS_PPA_ENTRY_NOT_FOUND   This requests PPA information was not found. REQSTAT_AS_LOADINGPPA   This request is loading PPA data. REQSTAT_AS_STILL_LOADING_PPA   PPA is being loaded by someone else so we re waiting for results. REQSTAT_AS_RECEIVEDPPA   the incoming request has PPA data that we have extracted.         REQSTAT_AS_ISKRBTGT   The request is a krbtgt request.          REQSTAT_AS_INVALID_TGS_REQ   The incoming request is a TGS request and is not handled by the ASKdc. REQSTAT_AS_INVALID_NAME   the incoming request has an invalid name. REQSTAT_AS_INVALID_REALM   the incoming request has an invalid realm. Microsoft Confidential XMACS Logging Standard Page   PAGE   NUMPAGES  gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\Xbox KDC Class Overview.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Processes TitleProcesses Michael Courage Normal Gary Thompson Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags place b%MC%KDC Provider Class Overview This document contains a brief description of the classes used by the XMACS, ASKDC, and XKDC providers including the shared code in the kdchlp library. Principal Classes BasePrincipal The BasePrincipal class inherits from both the IKerbPrincipal interface and the IKDBLogonInfo interface.  Note that in this case, interface is strictly an abstract class and not an actual COM interface. IKerbPrincipal The IKerbPrincipal interface provides the methods below.  Most of these are called only by the KDC core code.  The code for all of these methods originally came from the sample provider included with the KDC core with the changes to support multiple key versions.  Also, support was removed for encryption types other than RC4-HMAC which is the only etype supported by Xbox. Decrypt If multiple key versions are present, the index of the key that successfully decrypted the data is stored in m_dwKeyIndex. Encrypt The key associated with m_dwKeyIndex is used to determine which key is used to encrypt the given data.  If only a single key version is present or if multiple key versions are present and no call to Decrypt has been made, m_dwKeyIndex will be 0 and the first key will be used for encryption. GetCipertextSize GetChecksumSize Checksum GetEtypeMatch CheckForEtype IKDBLogonInfo The IKDBLogonInfo interface exposes identity information associated with the principal that is used when building a requested PAC-COMPOUND-IDENTITY section. Even though PAC-COMPOUND-IDENTITY will only be requested for the ASKDC, the KDC core requires us to implement this interface for all principals returned to the core.  If this were not the case, the BasePrincipal class would not implement this interface. The BasePrincipal class always returns an identity of type PUID and always returns a PUID value of 0. ASPrincipal The ASPrincipal class inherits most of its behavior from BasePrincipal.  The two major additions to ASPrincipal are PUID identities and reference counting. Reference Counting To prevent denial of service attacks from users who have a valid name/key pair and can generate PPA data, a secondary cache of principals is kept by the ASKDC. If a GetPrincipal requests is made for a principal that is in the cache, it can be returned from the cache without querying UODB.  To facilitate this, the ASPrincipal class implements a reference counting mechanism by providing the methods AddRef and Release. PUID Identity Each ASPrincipal object instantiated will have an associated PUID.  This PUID is returned from UODB and is kept in the m_ulPuid member.  The m_pIdInfo member is used to build an IDENTITY struct that the KDC core uses to construct the PAC-COMPOUND-IDENTITY section of the PAC. ASKrbTgtPrincipal The ASKrbTgtPrincipal class was a late addition to the ASKDC.  It is only instantiated for the principals  krbtgt/PASSPORT.NET  and  krbtgt/XBOX.COM In order to rev the key version for krbtgt/PASSPORT.NET which is used to encrypt the intermediate TGTs returned to the client, we need to be able to force the ASKDC to encrypt tickets with key version N+1 even when presented with a ticket encrypted with key version N. Because the BasePrincipal class always encrypts with the same key that decrypted, the ASKrbTgtPrincipal class needs to override this behavior.  It adds the member variables, m_dwPassportKeyVersion and m_dwEncryptionKeyIndex as well as overriding the Encrypt method. The m_dwEncryptionKeyIndex member contains the index of the key whose version is m_dwPassportKeyVersion.  The Encrypt method always encrypts using m_dwEncryptionKeyIndex regardless of what key may have previously been used to decrypt data. ASKrbTgtPrincipal is derived from ASPrincipal and makes use of ASPrincipal s reference counting.  Because the krbtgt principals are internal only, they have no PUIDs and their PUID identity is always 0 since it will never be used. XkdcPrincipal The XkdcPrincipal class encapsulates the information needed for the Xbox client code to access a particular service.  For every instance of an Xbox Live service, there will be an instance of XkdcPrincipal instantiated and cached by the XKDC. Like the ASPrincipal, the XkdcPrincipal class implements reference counting so that the cache of principals can be reloaded while the service is running while request threads still have a reference to previous objects. The member data associated with the XkdcPrincipal includes: The service ID The IP address of the SG that fronts the service The preshared key between the XKDC and the SG for the service The specific title ID, if any, the service is restricted to The specific title version, if any, the service is restricted to The specific title region, if any, the service is restricted to (note that version 1 does not allow restrictions based on title region) The port to use when communicating with the SG Is a valid user account required to use the service? Is the service currently available?  This would be used if a third-party needed to take a game server offline for maintenance and wanted to prevent new tickets being issued for that service. XkdcServicePrincipal The XkdcServicePrincipal class encapsulates the XkdcPrincipal class and adds logic to perform required policy checks alter the behavior of Encrypt, Decrypt, etc. depending on the result of the policy checks. Error information regarding users and services is returned to the Xbox client as an encrypted preauth data structure.  Because the KDC core only returns preauth data for successful requests, a request which completely fails policy checks (no valid machine or user accounts; no valid services, etc.) still needs to result in a returned ticket so the preauth data can be returned. To accomplish this, the notion of an invalid ticket was introduced.  When a request which completely fails policy checks occurs, a ticket is generated for the non-existent SG site0 at IP address 0.0.0.0 and a random key is generated to encrypt the ticket.  This invalid ticket cannot be used anywhere but by returning it, the encrypted preauth data containing detailed error information is also returned to the client, indicating that the request failed and why. When the KDC Core invokes the XKDC s GetPrincipal method, a new instance of XkdcServicePrincipal is created which encapsulates the cached XkdcPrincipal object for the first valid service. As part of the XkdcServicePrincipal s Initialize method, all of the policy checks are performed and the detailed results of these policy checks are recorded. The Encrypt method, which will be called when the KDC core builds the ticket, examines the result of the policy checks.  If they completely failed, the bogus, random key is used.  Otherwise, the encapsulated XkdcPrincipal object s key is used. Provider Classes BaseProvider The BaseProvider class was intended to encapsulate functionality that is common to all of the provider classes   ASKDC, XKDC, and XMACS.  As of now, that includes making HTTP requests to the front doors, xmgmt commands, and handling KDC core audit events and performance counters. HttpGetBlob This method represents the largest amount of shared code across all the providers.  It handles all of the WinHttp calls to send requests and receive response data as well as all of the code to do round-robin scheduling of HTTP requests across two or more WinHttp connections. MgmtCmd methods Currently, all of the xmgmt commands available for the ASKDC, XKDC, and XMACS are implemented in the BaseProvider class as MgmtCmd methods (e.g. MgmtCmdUptime, MgmtCmdReload).  As more provider-specific methods are added, it will be worthwhile to revamp the xmgmt command handling architecture to support these more cleanly. ASkdcProvider XkdcProvider XMACSProvider Microsoft Confidential Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  gd?OO gd?OO gd?OO gdMih gd/Em
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\GI\Game Instrumentation Design.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Game Instrumentation Design Title _PID_HLINKSGame Instrumentation Design vincec Normal.dot vincec Microsoft Office Word<?xml version="1.0"?><XrML version="1.2" xmlns=""><BODY type="Microsoft Rights Label" version="3.0"><ISSUEDTIME>2005-01-18T18:11</ISSUEDTIME><DESCRIPTOR><OBJECT><ID type="MS-GUID">{0111CB59-332A-4782-8B67-AA1959F6E598}</ID><NAME>LCID 1033:NAME Do Not Distribute:DESCRIPTION Permission is currently restricted. Only specified users can access this content.; </NAME></OBJECT></DESCRIPTOR><ISSUER><OBJECT type="Group-Identity"><ID type="Windows">S-1-5-21-2127521184-1604012920-1887927527-17941</ID><NAME>vincec@microsoft.com</NAME></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">H1aJGUDc9AF8P4ijCWUyS/zhgFV0p+JaTsArKwYgcoexo0FNyfzZEpELMXYJpB8kwxYsIQStHUYGabUXE1DD+HQuhd4ddrsn0hkMz9nWK+p5yMvFpZGQ0q2Nte+e7OGLdH8fcUi2gYd478B7lrD5wnjVUjFQMlWEw4lSP++QcLI=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="SDK" value="3.0.3281.0" /></ISSUER><DISTRIBUTIONPOINT><OBJECT type="License-Acquisition-URL"><ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights/_wmcs/licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><DISTRIBUTIONPOINT><OBJECT type="Extranet-License-Acquisition-URL"><ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs/Licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><ISSUEDPRINCIPALS><PRINCIPAL internal-id="1"><OBJECT type="MS-DRM-Server"><ID type="MS-GUID">{aaa331f3-e659-4ea9-876b-e8b25c7b4996}</ID><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs</ADDRESS></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">oxyxbUguymFHLhu80EH9m62c2XLFXbjm87KlEbSFQkieurr8RZgvtEMWdg6jMAkLJ7xPnWs3hEjOHw99irwZ1g5Z+6yYgktWlKibmPs5Lpamd6v53R40fKES/HNWdjbc68xN9tyfts4pOfyJxT5Xgo0rHVset+rDgShE9B3JQbY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="Server-Version" value="1.0.3012.0" /><SECURITYLEVEL name="Server-SKU" value="12345-123-0000007-18968" /><ENABLINGBITS type="sealed-key"><VALUE encoding="base64" size="1536">OOO9LcwxgCu9x9zs2FZGHPfV9uB7fbuimUjv/Pey65u+QjORJcI8zprVHLCZC0rMF90VvEtoqwG4NaPYyNdrEaOx+uRnqhm26ud8UdXnGGKFXkSyN4ETLmoyQtiYJp59Z6/K8P6Hd6qrUSx7j/8LkDvprlxavL+11HSwNEA/v8LwHaHRKs3KDCBmG6L/inpDWNSyz/t3LVcRU7OCH1MIh2mPUWzy4FdSAtYz06MaG0L5+4egsfH3dc1Zw2HqM11T</VALUE></ENABLINGBITS></PRINCIPAL></ISSUEDPRINCIPALS><DISTRIBUTIONPOINT><OBJECT type="Referral-Info"><ID type="MS-GUID">{81C42010-208A-458A-BAB6-C3C60F06DD5F}</ID><NAME>Author</NAME><ADDRESS type="URL">mailto:vincec@microsoft.com</ADDRESS></OBJECT></DISTRIBUTIONPOINT><WORK><OBJECT type="Microsoft Office Document"><ID type="MS-GUID">{D834605B-6B4E-4E88-8F02-A450D52A9DF6}</ID><NAME>Microsoft Office Document</NAME></OBJECT><METADATA><OWNER><OBJECT><ID type="Windows" /><NAME>vincec@microsoft.com</NAME></OBJECT></OWNER></METADATA></WORK><AUTHENTICATEDDATA id="Encrypted-Rights-Data">TJvQXo8v/kg0gdLjmC37jci88BboTcJR+cCnL1vqt7Hp0rXj9m5okKWr9aKZUk3Y9OpKi71JMNeNocjH5PU6IsjW+d2RgIktycOuhyiJknDyoWTTDy32wT7KhzQsurh4Ov1+Q6joqVrinSY9EkqeyY6qm03bfkhfdGKicMiXJgbdLyeFnEKLzpg+Y93lS3QUMLtFLwtsRi6Ild2MXNKUGWVkusYyeJmp+yCtymZPgljb/td6IUyKPj44DZeiIa+wGwAXuIXh3CCDYfxTelA2QCebt20hl9CT2JTZEbvj/dK6ABDPl/3H6Tn9UfKn74LLEcQgmE0VS/QOrPKekjZyPyskxWWo6nFPOXv9gu08IBgR5+bEJpKjfHfNAbA8fuOrMSEfVN7PXh1I6v7Diq0KAPIyMP1Pom2C4AzJM+c1McmSeW9VPbB+j3AMyw/huQVSyoJmYxC4Up5Jx3ig14XFzLMmBwYziGIQm2IbmF1DEEe9342tdJYE2+jIAn4ACysNPDn2OqOsyrtAQtlu9FnqdglkV2LQBikL6wEnqvFStdTNjg4mBZdv5nWM1U331Ntm0c6ubUsiCkivZL0mw1+H8ZgvQOQd9cDm8WFuFnxxaur6M3JqKY4OSSFinKjC13kKipGoPDn6rlkJmP5x3huPQzUFYQx+E3dZVkeX0wa8s8d/UWs9MWZJI/1zJKMVP1m42oTraroEu+rS4IaK86vixCYihQrHTiOHEZ/8C1qe6ZujPkpJJrNrPy6RaUNr2kUNc0/ZuV3zn+pe9G4oK05iFOvzIxF2FoZ9KHrTQg4IIG1mfNDsnUa42tUB6eA6txTSDkJZBrfpJyN+08Zu0hi4BHkzi62Cts1T/VJpYZCDhLlZT/bF2qDvBvHpncpn9TrxYvJj8lYStIfMRVllt0Myrwjm7sfICTalklUjSylqMoRmH5D5FZUDRzUl2M+upMqo+nhiKKU5UQa1QD+x4QL8WkgtsmJJ4934py2oHGT3O2+qKAGVuvqddja/aEh4K4heJKXuObz32yuqbS+OLpwYY/NZR/xYH8r3tWl4kA4x4+6qzpewyfzuVDWziUs3Z51pW9f2Z106phahwISCNIpwzw+Hqtsw1uoPcV9A0wFvwMpE8nRZ0QDrXtsv5IW2oW85lnTqmeGTskxnr0ceeu9MhgAiLS4wwJIBN3LWG74m+tLVYhptpU0yBKVMq/2H4mzEAXO+dFODD7F/OzOxr/nLu1LiJaXHB7piZ2cxG/fiAdPM4I6nrV7DBXgf5E1O8rGw30/7u6Jsc3hC3pFWd/TpWQbdJyPgJtTrgtk15Xg4I4kf/SOSCSnI2G7Pi2WUPOWZ8cRED5RUHHq1Q7vCYmCuaoZk0EMQ9BgEg9pmzmyJvRPRtgFK+UeQUGYqYTbG1Pi2IvMdtYBFnVz22K/vxiOA+yJhfByxqvzTa6YSSGHV2GSLIWxma+s0o6RPdkjrpV5l/U+xuyTsKPfkz4y6AjwtYThmBtf8629s5WK6TUiytYTMk+Imjve0W3lZATx4eCjhxehmChMFvB7BhRWf8olyifwXuifD+oIjLi7NkUBjpNloROHZj0DNQBJXY3KsHw7i2B/Z5E/wTEMR04Rbw/gjflV+/iw7ZennyOfhLwCayvBKth5V+yZHJeQuX+tlxevxWo9Y/AnPKPBwxc01hpiy+kYPLn2vzXjPqTbPMEzTzg1ilaR7uE+dCaeVCFxzlba0yI4xH/q7fw+qtaf8cwqSVvRNwS0IAhpTJDM51OeT6miHG5msLOnHTsIN5GSPGQI2xCNhI4D/VZqt5UcXajoUe0hB8DO0xETTIaZrkM3mbV7lIjZovmXzzddIYllcv1NOlwX6svWVAz5ZEzs5BvwDDXOi+jlFqdeFf7SHbVqxmlJhba6C6hTa2GVkBZC/i9x2WBgOj1V5aOf7NLxAE6uKIAjm7sfICTalklUjSylqMoSMulq8zA28k73GEA0TDGa1BC47123M6sMJDYTcPXktiVNycSFNKISWAmcW0sTnqnENg0YKNo/43MaLQYRvPHKFiyoMQEDsjLQ8l+PU/2bNKy6T/zJSww0H7yXXVduxpLZXQQZ4HU8MoFCENUyVQoyY9Uv8vrj89NPPR6RyE+yUw0qWFPAdmNbxUpf/y3sC1QpM84nTSuFB6mBL3ELiAgTBCObux8gJNqWSVSNLKWoyhNcpTflapXVorAmpVmiQPTC9TrwhyeAbDRo+N027rnVWtsiCPQtbhLRtLRoJzq1g7mJg8iD+7EYQ7NxIaBnZ5z+yGZO5ZOaZ5P7Yqw6w4Fo06mvcn/VlcJzuXET0CnRfCU0TFZZokW5Q5gKDX7AKrt1xWFP83gh9eRrpY/pfULn5EjW7k0yAR0N6BqLRNv5adGNCY1JRlPxoPOHkF/sJH5nUUbQbOMsOWM3Pu/hQrTyuxdoeWK/hwuca+ygN39LaVBpEne3ya9SSlW1mMqgNTRubkwJHSse1TrwdHztuECW4wcSHGBqQyQIFy0ptoE0qULXhUcposk1pstctR0gD4v/FKk/on1L7qBbxUrNE8iCEUYwnvSJyO9ba6/ouONi6K7shzR62qAqF2udjpM+pDF1YXFHKCO2HY3GLoHQa1viu3o7uZZIeRBuZ3M9KCCw+VIFjZbopeJ27gjWcaoDkj1GdqGr6KvWml0YCUdusjn6sq6wwgtWQ5zYFZjTtVnK56znk7qeOSKbCVg7zaT3jH40ytgk8yBpgns+Z+PJ58ZFiP1mkYD3wrmcChbINXbL5Pd8pJQpt78coR4MEUB+Wh/jATka+lXKwsXc2FV9Ul2c8E5fVaUSHgSneGGdg2g3CJoFLNTEbnW9HwnmeN/B6rx6N09C6TNfajkz3/10f1d+8NuMut+dl5CCQSNPESBQQd6xN7SskbuisXC+3/gtnmxiayznKx9fv5n4fJYMZo2zZHm6JK9Xlhy/3ruiMDKotqEYPLn2vzXjPqTbPMEzTzg0YL44O1EW8GjtdvMZER7wPu7Nm0Ad8frOU3ibKXZeUoQlkV2LQBikL6wEnqvFStdSHdBaGgON0wrXDca8tCuPQkybJJVzcM/eipJWAUZIfVqusMILVkOc2BWY07VZyues55O6njkimwlYO82k94x+NMrYJPMgaYJ7PmfjyefGRYj9ZpGA98K5nAoWyDV2y+T3fKSUKbe/HKEeDBFAflof4wE5GvpVysLF3NhVfVJdnPA4p91sNRqVA9ClM98f0yuPayk2/je9/Bgq60p6MxJoNjdPQukzX2o5M9/9dH9XfvDbjLrfnZeQgkEjTxEgUEHesTe0rJG7orFwvt/4LZ5sYmss5ysfX7+Z+HyWDGaNs2R5uiSvV5Ycv967ojAyqLahGDy59r814z6k2zzBM084NGC+ODtRFvBo7XbzGREe8D7uzZtAHfH6zlN4myl2XlKEJZFdi0AYpC+sBJ6rxUrXUh3QWhoDjdMK1w3GvLQrj0JMmySVc3DP3oqSVgFGSH1arrDCC1ZDnNgVmNO1WcrnrOeTup45IpsJWDvNpPeMfjTK2CTzIGmCez5n48nnxkWI/WaRgPfCuZwKFsg1dsvk93yklCm3vxyhHgwRQH5aH+MBORr6VcrCxdzYVX1SXZzwoahh/7VvDDXQ2RfWj6RvqgUs1MRudb0fCeZ438HqvHo3T0LpM19qOTPf/XR/V37w24y6352XkIJBI08RIFBB3rE3tKyRu6KxcL7f+C2ebGJrLOcrH1+/mfh8lgxmjbNkebokr1eWHL/eu6IwMqi2oRg8ufa/NeM+pNs8wTNPODSypWpygKRYFClzAEk4G2GcgcpmvqZyG7cAbvdTo/n67/FqmWW7iIR8NnwS/b01TM4CRzxvtzBjJBZNp5vhjMwJKlhTwHZjW8VKX/8t7AtUKTPOJ00rhQepgS9xC4gIEwQjm7sfICTalklUjSylqMoTGI15LfrU0gpZKdrXp3Id8KjviQUi7F7dqJ1h245f42BuwL8U0PoG9hBY+DE8VD+eVtGXJaK5/6zJ2wzKuE7kKxDbOhlddlWDUJ/RCO0HI4YZalSG+8xog4pAQ9Pm2MMqwN2wP5W6kWQIOGJDs9/rv7vlRJt+gOs8T9zUG5vU0cgcNbFAxmWCF0Blsmqx4mVHfKSUKbe/HKEeDBFAflof4Ase7xM9GlCGEtC1GwdvO2t96xIkNTrCnZPE3ExlxTeKia3kZb9vk4poba2Z/tX4O4JtFRIBNe5VWzTucoQCs0ONBpY5ZtTYoO/pmAWAe7k0B/URvCwYIbxcF8BihbqcsrOIfuLusrkXnYPt22AILvmbT48yQK/ephIfE2EVAlRmlFiwjXVeRR3gMM3Ep9smaYAkmpSAb6WhHcT9TosgQqwa3MG0Kis9hRBvfEmHkEG2ZloxpQ82jeg04UG5kS4IYlQACLKP7oSCBV3dL4L/zmsHEhxgakMkCBctKbaBNKlAI1qHuRKtmp9iaUyNlwmvq2YmyOiyW2YD52aD3RcgrQ43T0LpM19qOTPf/XR/V37wFxGDQphO6b+P7TASM1Zqi0FDKgIweHT5rRUChOBqYh0Azbhbyelnmzv/ySRF3yybENs6GV12VYNQn9EI7QcjhcGZlmUMVzachPEJga8LmRTGoOCXLR2tCPQ4pjO2MYcJ19/phSmyLv8UwwHgkS6lCe63yVmxVrHUKFt41uICdoLlAVg9A36gZGQ6138ElEvhTAr1o6gvl2LZnNEc871CPBJYmq4IGD/1ukYf43hlVHhZUT5Vfl8am2QwSBVqX7xf81i5UzjCZ7pipmSyPZkklImF8HLGq/NNrphJIYdXYZBG8Vfpx0pEfJFjVZBxqOkGlMamWtN+Z3HB5b/mmI5NLfVv3v59hQYh8vCqdJ7d7Jg6lKox6deL4st/VFQV423tCrCDiQZPjfGYAGF9Rl54JyrmCLmbuwrTaO97j6OHsSjVllUZjjPklxA/GA4wbZPuTGsSOHJu6LkW33ci5XEn/CbTRguxbTIDTysPodH81UyVfDYr+SPPIrH9msYu+q4q9OJjuxSGTX7IKvkByVm10danyoTl6jEQofpWIc5a1FSo74kFIuxe3aidYduOX+NgR5+bEJpKjfHfNAbA8fuOrMSEfVN7PXh1I6v7Diq0KAMIocOtiPaMirTkVqNHdOWKp6hjARpJZ16IbuY/sIQb2Vnw3Gfj4LpfRd5ZkyESJsNN1SJZDgx8QMTyOU02/bMOxjEMRrzWukMKf8xrbyLnKSI4/+qh1o6WpkGgpB357HrX+bZhqkjxbOmhW3BTPwL5dR4NgwBtY3GvXhcI22IlMM/V+aZPJ6enDxzpUAPGTHxU+3GfMz41fhINB2kzAkXiItCisVdYHiAxsW//YIziVSGPuPBFPMhPsgNwUtF7G/JdU4jJuFfmTAmUCbUjsfZb3ELcyok52ulUXoUZY6SwmUU6VNdCLY09RF4HsA2ms5Ehj7jwRTzIT7IDcFLRexvzC/nJAeXQpKoxurW9trreU3QxF5pl613zGU+P+CdK0tSTTiVBxR/22hsVjO+XY8xUNg0YKNo/43MaLQYRvPHKFvdaUU8bHiqr5tTG6hf36LB7kwL3eW74290Gi2+TS4HWM4KbNGC75l1OyuDRNu/jm+hCgTE+/ywTz2J1Sb5kkXpkGO5vOxebWKWqDHXl2eJiBY2W6KXidu4I1nGqA5I9Rnahq+ir1ppdGAlHbrI5+rKusMILVkOc2BWY07VZyues55O6njkimwlYO82k94x+NMrYJPMgaYJ7PmfjyefGRYj9ZpGA98K5nAoWyDV2y+T3fKSUKbe/HKEeDBFAflof4wE5GvpVysLF3NhVfVJdnPDeT53y6fffF0LKT69T9mu1wEc9xhX1djV0OCrf1l7dZBcRg0KYTum/j+0wEjNWaoh0RdQ8n//pVQt14Zjm+PxEPPP1Q4crAfLuyivifHpkB6QhfYZocxvqd+SEcnDrPYUBL0Qif7Zx6w85+ahgzALuPqzFSXN99xsVcug0G7GgwmB3FwO2scOvlXqCAZ9gzkyOdLyyOX2GWB9djoehZYmFdSn4MXzwUb1J39UmmgjAAg4YmYo0nnxHem6sz75r+XD+bDI2iJNL+ZQ0eb5f+/tyJ0Jhx0O4+K8r5JaUpqIv3Yg/AvnX4aBXNQqWA9fDzY1Z+zbN1/NK7J/cI11ZYmfmwHPIob6u4qm3F7M5KaZRLylcA+s9iUL7P14/49WDO36sPIxFkGwNRTulG1CMraAkiDa0mGdhXYE4ERpzCvXWUqszkQP+erVNISnbLatW8nKusMILVkOc2BWY07VZyuev1UuZqfLBILXjfqBGjjxnMQy9EGXLd+KLOHfaixAk8YsshUgfpDi8ot/uoOq+ZxDQK3P9xlMzyTFETFEbhXF2Fom91Szd+HZ0A1jkwdONNyznahLHanKZeCsP+NoRTgPeKObqRZuSaYXT4DzPTjyJWfPAt7wF+lFJuzyEDWaXqsVyVPpXL6n9Zlr3jAsi83u2j8bw2I0f1AuD5JqDankvBwG7OcK3vnXvV0mqwD/1VFgMk09hJ8C3FOCTFDRWqjNRp7O6GBQiBeUEZ63cNTtGBrOJ7O2ICEJvtBRKAwC9i3jYI8BoXp1rROul8fVJLVP26lyGeKMA3jRF3CTlZdLDBCxbrgbd4Jbmr/kb3Y6CzVPa/UXKGAjNqwD7QbA8X0VHdlEkXWqKCN0sek7IgUaNBhFOq4jtR8/rY8kVOIMtRBCi+ycHCEcxVA3Pc8Aa7ujgeqt/p7eLT3zs5Em1T3WMAZuXc5Uhc5hLkn58ivcRh0VvLsXZYRmpmpYVc0tlmTc/tT54mSv7I3VkniWFIRcjA</AUTHENTICATEDDATA><POLICYLIST type="exclusion"><POLICY><OBJECT><ID type="filename">winword.exe</ID><VERSIONSPAN min="0.0.0.0" max="11.0.4919.0" /></OBJECT></POLICY></POLICYLIST></BODY><SIGNATURE><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><DIGEST><ALGORITHM>SHA1</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="160">xvPpI9ZKjb16rtJyt5YqkZJdjtU=</VALUE></DIGEST><VALUE encoding="base64" size="1024">Zq1qpBR9WNAJc8Pnm3mFGfsLt3G00UaOrA5aFBre44bg3qKDAgralBNFRQ3c7bow/Q5M/Hph8PMDAFk8+oS0FXeyvJVp5kEuQ4KYzlS7PyrEVq2rxnMmG6g50EwQMk+qn6JzeXXDYafFFq6eDx+K4yFb1Y8TggOGhLT+6UotuPI=</VALUE></SIGNATURE></XrML><XrML xmlns="" version="1.2"><BODY type="LICENSE" version="3.0"><ISSUEDTIME>2004-11-24T17:53</ISSUEDTIME><DESCRIPTOR><OBJECT type="Client-Licensor-Certificate"><ID type="MS-GUID">{66d27e31-00b6-42b5-ab40-564246f9b737}</ID></OBJECT></DESCRIPTOR><ISSUER><OBJECT type="MS-DRM-Server"><ID type="MS-GUID">{aaa331f3-e659-4ea9-876b-e8b25c7b4996}</ID><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs</ADDRESS></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">oxyxbUguymFHLhu80EH9m62c2XLFXbjm87KlEbSFQkieurr8RZgvtEMWdg6jMAkLJ7xPnWs3hEjOHw99irwZ1g5Z+6yYgktWlKibmPs5Lpamd6v53R40fKES/HNWdjbc68xN9tyfts4pOfyJxT5Xgo0rHVset+rDgShE9B3JQbY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="Server-Version" value="1.0.3012.0" /><SECURITYLEVEL name="Server-SKU" value="12345-123-0000007-18968" /></ISSUER><DISTRIBUTIONPOINT><OBJECT type="License-Acquisition-URL"><ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights/_wmcs/licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><DISTRIBUTIONPOINT><OBJECT type="Extranet-License-Acquisition-URL"><ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs/Licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><ISSUEDPRINCIPALS><PRINCIPAL internal-id="1"><OBJECT type="Group-Identity"><ID type="Windows">S-1-5-21-2127521184-1604012920-1887927527-17941</ID><NAME>vincec@microsoft.com</NAME></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">H1aJGUDc9AF8P4ijCWUyS/zhgFV0p+JaTsArKwYgcoexo0FNyfzZEpELMXYJpB8kwxYsIQStHUYGabUXE1DD+HQuhd4ddrsn0hkMz9nWK+p5yMvFpZGQ0q2Nte+e7OGLdH8fcUi2gYd478B7lrD5wnjVUjFQMlWEw4lSP++QcLI=</VALUE></PARAMETER></PUBLICKEY></PRINCIPAL></ISSUEDPRINCIPALS><WORK><OBJECT type="Client-Licensor-Certificate"><ID type="MS-GUID">{66d27e31-00b6-42b5-ab40-564246f9b737}</ID></OBJECT><RIGHTSGROUP name="Main-Rights"><RIGHTSLIST><RIGHT name="ISSUE"><CONDITIONLIST><TIME><RANGETIME><FROM>2004-07-16T00:20</FROM><UNTIL>2005-07-17T00:20</UNTIL></RANGETIME></TIME><ACCESS><PRINCIPAL internal-id="1"><ENABLINGBITS type="sealed-key"><VALUE encoding="base64" size="6144">QMz47lCXA1Xtu5z31vv0yvXYlky60slmKxebWiOcL3Gl5JabhzD2OOuNFVpmvroqssRxiCIFn+Q+IJANlqf/0rL1nAxPN4Ass/CN5pbKvSFbXllpj+FM15Lv2m8FZuXQv644adTz33zULRaZ+FAnWCflk2wtzZQoV86px+ESjUSa7wcmCLPJHjUOfPluU3PnABy1KoKkzazkK2fwqYsxhSfaV//RWagQIL1UYKacV5DwDTLOAzxHu2Zc2qHNdEkZLu6XvAuk2LZNBwedQJKSpRiab1n2GrHTuOi3pXi+mcyUlgsvJJbUitA4K00drVvry89myyEFvSmmwpVg8ruyoH478stURCfPItRj8WLRYRNdBaB1bOVShYr3HN/aXmK/jI6r9TWbRCdlp/j8N9AE9QRhF3zbPfcCKXbTs8mDeWJW7/YFVNcvZgxe3TghcSIlPeDIEyz2eBHLQD6qbOQzO0pX6g9cmT03KKUv/IgAnwd2a1BWvq5oO/o0nxN/z9zi51j++N5NoczRIP56jWrYeTprwbzI+P8YY+D0zll6qFeYRQlzBxOovDtMWVCNSBLC2S/qXXVeBkRtTjk/LcoCNb8lYRUorCKKiEsOU7N0S/9T/5FU08QycIU539a06AoWgec8i9CMTIQLMnojFz60LHKNTljXWjyw7RYuXQnEh/UxX7L8HmIKtZROXs54t1PPduUV91mDU7RdBQl2OLSEkpqOKd2dEPMyd0nBd9qRQT2zbrrZwF9mmw65gAV7idNvnROmGOKGCSshqvo0IPpZ65r2KrIpmEvhfMNQyqSPOYqSg8gBDFLkwqm9yhzvumI77wawKns12T/6o36znnUYo335fcHpWWYPSE3cr1iC9fy17qv8MIKE7zRUKkdDcNtZb0+e5gNR7s6Fr7DU4uhAx64jWkmKu9Ax9RE9uAtuO0AV07bxUPuPG5BkoDrmIzvFLDCF6rVeYE+ZWBsE7sFOqnxV47pM5fnL1HaRlCZUH4+jZQZyUA3AHfuqWhiD8UTE</VALUE></ENABLINGBITS></PRINCIPAL></ACCESS></CONDITIONLIST></RIGHT></RIGHTSLIST></RIGHTSGROUP></WORK></BODY><SIGNATURE><DIGEST><ALGORITHM>SHA1</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="160">EZJmrhN0ikeI4XLLFiXUwn67ySE=</VALUE></DIGEST><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><VALUE encoding="base64" size="1024">cQM1wNPHrFWgToi2nXtiQxXdO2+qnXEby9S1B/jbSWhNDArWVGd/lFEJ9z8el2rMQ96p1kEPuSeWPALYKFskmbIYi/6xU0gmRtn5jYrhKSwyxDc4/HP+35FuMnoGSGCsPm8AfQBFCxHokyCoShlELcEEzPuCQfH4j82D9V1MMt8=</VALUE></SIGNATURE></XrML>VwBpAG4AZABvAHcAcwA6AHYAaQBuAGMAZQBjAEAAbQBpAGMAcgBvAHMAbwBmAHQALgBjAG8AbQA=D <?xml version="1.0"?><CERTIFICATECHAIN><CERTIFICATE></CERTIFICATE><CERTIFICATE></CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAA0AC0AMAAxAC0AMgAyAFQAMAA3ADoANAA1ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABEAEUAUwBDAFIASQBQAFQATwBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAOAA0ADIANgAwADgAMwA2AC0AOQA4AGMAYgAtADQAZgAyADMALQBiAGYAZQA5AC0ANgA0ADUAZgAzADAAZgBmADYAOQAyADAAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APAAvAEQARQBTAEMAUgBJAFAAVABPAFIAPgA8AEkAUwBTAFUARQBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA2AGYAZQBlADEAOQAyADAALQBlADEAOAA5AC0ANAA2AGYANQAtAGEAYQA4AGEALQA3AGQANgBjADEAYwBiAGYANABhADgAMQB9ADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAUwBlAHIAdgBpAGMAZQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AcQBWADEAMABJAG0AQQB1AGcAYgAyAHkAbABMADcAZAB3AHAAMQB2AHAATABhAEEATgBnAGkAbQBDAEoASwBpAEwAKwBSAG4ASwBnAFMAbwBlAHcAeABsAFQAVABZAGEAaAA3AEUAVQBDADkAOAB5AEoAKwAyAFkASwA2ADEAagBYAEQAVgB4AEcAMgB3AGQAawBEAEkAagB5AEEAcgBoAHEAaQBZAEgAVABZAFUAbQB6AFEARwBTADYAMgB1AG8AMwB2AEEALwBVAFkAVwBrAFMAbwB2AFUAWABCAFcAUgBQAFQAMwAvAGYAZQBRADUAcQBRAC8AMABoAEkAaQB4AE4AMwBVADQAUQBqAEcATwBzAE8AcwBnAGkAawA3ADkAUwA4ADIASQArACsANgAwAFkAQgA1AHoAVgBIAFoAMQBJAGEARABXAHcAdgBEAC8AOABiADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APABTAEUAQwBVAFIASQBUAFkATABFAFYARQBMACAAbgBhAG0AZQA9ACIAQwBlAHIAdABpAGYAaQBjAGEAdABlACAAUAByAGEAYwB0AGkAYwBlACAAUwB0AGEAdABlAG0AZQBuAHQAIgAgAHYAYQBsAHUAZQA9ACIAaAB0AHQAcAA6AC8ALwBnAG8ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZgB3AGwAaQBuAGsALwA/AGwAaQBuAGsAaQBkAD0AMQAxADkANAA0ACIAIAAvAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewBhAGEAYQAzADMAMQBmADMALQBlADYANQA5AC0ANABlAGEAOQAtADgANwA2AGIALQBlADgAYgAyADUAYwA3AGIANAA5ADkANgB9ADwALwBJAEQAPgA8AEEARABEAFIARQBTAFMAIAB0AHkAcABlAD0AIgBVAFIATAAiAD4AaAB0AHQAcABzADoALwAvAGMAbwByAHAAcgBpAGcAaAB0AHMALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AXwB3AG0AYwBzADwALwBBAEQARABSAEUAUwBTAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgBvAHgAeQB4AGIAVQBnAHUAeQBtAEYASABMAGgAdQA4ADAARQBIADkAbQA2ADIAYwAyAFgATABGAFgAYgBqAG0AOAA3AEsAbABFAGIAUwBGAFEAawBpAGUAdQByAHIAOABSAFoAZwB2AHQARQBNAFcAZABnADYAagBNAEEAawBMAEoANwB4AFAAbgBXAHMAMwBoAEUAagBPAEgAdwA5ADkAaQByAHcAWgAxAGcANQBaACsANgB5AFkAZwBrAHQAVwBsAEsAaQBiAG0AUABzADUATABwAGEAbQBkADYAdgA1ADMAUgA0ADAAZgBLAEUAUwAvAEgATgBXAGQAagBiAGMANgA4AHgATgA5AHQAeQBmAHQAcwA0AHAATwBmAHkASgB4AFQANQBYAGcAbwAwAHIASABWAHMAZQB0ACsAcgBEAGcAUwBoAEUAOQBCADMASgBRAGIAWQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AFMARQBDAFUAUgBJAFQAWQBMAEUAVgBFAEwAIABuAGEAbQBlAD0AIgBTAGUAcgB2AGUAcgAtAFYAZQByAHMAaQBvAG4AIgAgAHYAYQBsAHUAZQA9ACIAMQAuADAALgAzADAAMQAyAC4AMAAiACAALwA+ADwAUwBFAEMAVQBSAEkAVABZAEwARQBWAEUATAAgAG4AYQBtAGUAPQAiAFMAZQByAHYAZQByAC0AUwBLAFUAIgAgAHYAYQBsAHUAZQA9ACIAMQAyADMANAA1AC0AMQAyADMALQAwADAAMAAwADAAMAA3AC0AMQA4ADkANgA4ACIAIAAvAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIAUwBlAHIAdgBlAHIALQBMAGkAYwBlAG4AcwBvAHIALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA4ADQAMgA2ADAAOAAzADYALQA5ADgAYwBiAC0ANABmADIAMwAtAGIAZgBlADkALQA2ADQANQBmADMAMABmAGYANgA5ADIAMAB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAzAC0AMAAyAC0AMAA1AFQAMAAwADoAMAAwADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA1AC0AMAAxAC0AMgAxAFQAMAA3ADoANAA1ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgBLAGcAUwAzAHIAdAA5AHMAZwBrAEIAVQB2AHMAQgBwAHMAQgBRAGMASgBvAGoAZAAwAFoAOAA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgB0AFoAOQA2ADYASwB5AC8AbAA3ADMAaABNAEIAUABQAGoAegAyAHAAeABpAEIAMwBxADQAYgBUAGQANQBVAEsASQBmAEcAWAB0AGIAYwA5AHIAbQBkAG8ARQA1AE0AOABCAHcAQgArAG0AWABxAEcAeAArADAARQBQAHoAOABTAEMAcwBJAHIAaQA1AFoAbAA0ADgANwBMAFMAZwAwAGEAagBZAGwAMgBDAGIAQwB0AFAAYwB3AEoAQQBkADYANQBUAEwARwA4AHEAeQBtAFQAegBTAEkASgBLACsAbABSAEIAZwAzAEIAUgA0AE0AbQA0AFUAdwB4AGsATQBjACsATQBJAGsAUwBKADMAZgBWAGkAagBtAEQAbQBNAE0AYwBBAHIATABOAHQAZQBKAFMALwBNAFEAZwBsAG8ANABXAEEAWABVAHkATQBlADcAOQA2AHAAVQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA5AFQAMgAxADoAMQAzADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADkAVAAyADEAOgAxADMAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAwADkALQAxADIALQAwADcAVAAyADEAOgAxADMAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBTAGUAcgB2AGUAcgAtAEwAaQBjAGUAbgBzAG8AcgAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGEANQA3ADIAYgBhADkANwAtADEAZABiADAALQA0ADcAMQBiAC0AOAA0ADkANQAtADQAYwBhADEAYQA2AGQAMwBkADcANgA4AH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABTAGUAcgB2AGUAcgAgAEUAbgByAG8AbABsAG0AZQBuAHQAIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AFAAUQAzAFoARABoAEcAeQB4AE8AVABsADYATAA5ADMAKwBCAGoAdQB0AGsATQBZAHYAQQBnAGYAMgAwAEkAbgBXAGEAYgByAHIARQByAEwAVwBCAE4AagBqAEMAVQBrAFEAUABBAEMAQgBOADcARwAvAGsAawB5AGIAQgBZAHcAOABTAEgAdAA4AEoAUwBXAHcAUgB5AGEAbABYAFIARQBoAG8AQwBCACsANAA1AEMAMQA0AGIAKwA1AEMAQgBPAGoAaAA2AG0AegBMAEcAZgAwAHIARwBXAFgAMgBaAE8ATwBaADQAWQBCAE0ASABTAFcAeQBoAG4AKwBCAGQAUgAzAHgAdwA5AGEANQBDAFkAQgB1AFMAQQBBAG0AaQBhAEcASwBGAFAAVgA3ADAATAAvAHYAWgAyAEYAeQBUAFkAZABlADYASQBqACsATwBqADYAWgBrAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBJAFMAUwBVAEUAUgA+ADwASQBTAFMAVQBFAEQAUABSAEkATgBDAEkAUABBAEwAUwA+ADwAUABSAEkATgBDAEkAUABBAEwAIABpAG4AdABlAHIAbgBhAGwALQBpAGQAPQAiADEAIgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBNAFMALQBEAFIATQAtAFMAZQByAHYAZQByACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsANgBmAGUAZQAxADkAMgAwAC0AZQAxADgAOQAtADQANgBmADUALQBhAGEAOABhAC0ANwBkADYAYwAxAGMAYgBmADQAYQA4ADEAfQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAFMAZQByAHYAaQBjAGUAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AHEAVgAxADAASQBtAEEAdQBnAGIAMgB5AGwATAA3AGQAdwBwADEAdgBwAEwAYQBBAE4AZwBpAG0AQwBKAEsAaQBMACsAUgBuAEsAZwBTAG8AZQB3AHgAbABUAFQAWQBhAGgANwBFAFUAQwA5ADgAeQBKACsAMgBZAEsANgAxAGoAWABEAFYAeABHADIAdwBkAGsARABJAGoAeQBBAHIAaABxAGkAWQBIAFQAWQBVAG0AegBRAEcAUwA2ADIAdQBvADMAdgBBAC8AVQBZAFcAawBTAG8AdgBVAFgAQgBXAFIAUABUADMALwBmAGUAUQA1AHEAUQAvADAAaABJAGkAeABOADMAVQA0AFEAagBHAE8AcwBPAHMAZwBpAGsANwA5AFMAOAAyAEkAKwArADYAMABZAEIANQB6AFYASABaADEASQBhAEQAVwB3AHYARAAvADgAYgAwAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYQA1ADcAMgBiAGEAOQA3AC0AMQBkAGIAMAAtADQANwAxAGIALQA4ADQAOQA1AC0ANABjAGEAMQBhADYAZAAzAGQANwA2ADgAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAAOQBUADIAMQA6ADEAMwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANAAtADEAMgAtADAAOABUADIAMQA6ADEAMwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AZwAzAFAAVwBGADUAVgBkAEoAZQBvAFQAVAA0AHoAcAB0AHIAcQBiAGkAaAAwAGEAbgBwADgAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4ASwAvAGEAWABpAFAAegBUAEgAZQBaAFMASgB5AEMASQBDAHcAOQAyADEATABSAHEAeABBADcAOQBxAEUAZgBvAFgAeQBBAFgAcQArAHQAbgA4AEQAbgArAGEAMQA2AFMAagA0AFAAVwB3AFoASgBRADkAcwBNAEEAQQBvAHAARQBPAEUASwBsAE4AWAA2AEkATgBzAEEAQQBXADEAMAB6AGsATQBDAGkAeAAyAFUAQgBsAEwASgBDADMAVwBUAHAAdwBoAHMAbABUAEYANgBSAG0ASwBIAGgAUgBYAHIAcQBuAGkAVABVAGsAdgBQAEQALwBxAGoAdwBUAGoAZQBWAEgAOQBKADUAcwBXAFEAdwBsAHgANABrAEsAawBIAFUAaQBFAHoAZQBlAFIANwBPAEkATABrAEUAMAB2AGgAdQBUAHIAVQA1AGQAZwA4ADYAbQB1AFkAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFMASQBHAE4AQQBUAFUAUgBFAD4APAAvAFgAcgBNAEwAPgA=</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAyADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAyADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADQAMAA4ADQAOQAzADAAZQAtAGQAZgA0AGEALQA0ADEAZQA4AC0AOQAwADEAMQAtADYAZgAyAGUANgBjAGIAZgBlADQAOABlAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADIAMAA0ADgAIgA+AE4AUQByAFkAUwBBAGMANAAzAFYANwBOAFIAVABXADgAVgBUADUARQAyAFgAaABNAGMAdwBtAG0ATwBOADcAVABrAFEANwBFAFQAVQBJAFcARwBxAGwAUABUAHYARgBTAHcANwA5ADgAZwBGAGcASQBYAEIAYwBGAE0AdABDAGQASQB5AGYAMwBWAE0ATwA1AFkARwBPAEsASgBEADEAdwBuAGMAMgB5AGQAbABvAHoAZgAxADYAVgBIAEYANQBVAHIARgBnAHQAawBUAC8AOQB1AEsANwB1AFIAcwBoAGoAeQBIADUAMQA2AEgALwBjAEMASwBKAHkASQB5AFAAYQBZAEUAawBXACsAcABJADcAeAA4ACsAYwBmAGcAVgBjAFUAWABaAC8AbwBDAHIARgBIAGQAdQBlAFgATABTADQAYwBlAC8AbgBhAGwAcwA0ADUAcQB4ADUAcQBxAGMAZABNADcAWQAwADgAbwA1AGEAMQBrAFgALwB5AG8AaQBQAEwAYgBvADkAbQBLAFMALwBOAGwAegBFAGYAYwBSAHYAUgBOAGkAQQBDADYAVwBxAGwASQB2ADgATQBnAE4AeABwAEEAbQBVADcARgBSAFUASABUAFAAYwBrAC8AZwBPADkAWAAwAGEAZgBoADcAVgBrAHcAUgBxADMAMwBUAGoAcgBDAFMAKwBVAGkAZABvAHgAdwBPAEkAMgBFADAARABLAE0AbQB0AGcAVQBNAEEAMgB1ADAANABPAC8AZgBnAFIAMABMAGUAVQByAHUAVABZAFkAagArAFEAegAyAEkASQA4ADIAcQBjAHoANwArAGYAZQB0AEUAZABVAHMAdgBLAEsAYQAxAFoAQgBLADgARgBuAG0AdwAxAEIARgBQAGUAbwB5AFgAOQBnAD0APQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlAC0AQQB1AHQAaABvAHIAaQB0AHkAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIAYQBzAGMAaQBpAC0AdABhAGcAIgA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAQwBBADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AUABRADMAWgBEAGgARwB5AHgATwBUAGwANgBMADkAMwArAEIAagB1AHQAawBNAFkAdgBBAGcAZgAyADAASQBuAFcAYQBiAHIAcgBFAHIATABXAEIATgBqAGoAQwBVAGsAUQBQAEEAQwBCAE4ANwBHAC8AawBrAHkAYgBCAFkAdwA4AFMASAB0ADgASgBTAFcAdwBSAHkAYQBsAFgAUgBFAGgAbwBDAEIAKwA0ADUAQwAxADQAYgArADUAQwBCAE8AagBoADYAbQB6AEwARwBmADAAcgBHAFcAWAAyAFoATwBPAFoANABZAEIATQBIAFMAVwB5AGgAbgArAEIAZABSADMAeAB3ADkAYQA1AEMAWQBCAHUAUwBBAEEAbQBpAGEARwBLAEYAUABWADcAMABMAC8AdgBaADIARgB5AFQAWQBkAGUANgBJAGoAKwBPAGoANgBaAGsAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAEEALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA0ADAAOAA0ADkAMwAwAGUALQBkAGYANABhAC0ANAAxAGUAOAAtADkAMAAxADEALQA2AGYAMgBlADYAYwBiAGYAZQA0ADgAZQB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA5AC0AMQAyAC0AMAAzAFQAMAAxADoAMgA3ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgByAHEAVABNAHAAZQBXADAAOQBrAE4AWQBBAEQAdgBQADcAaABZAFoAWQB0AGgAQwBjAEwAbwA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgB4AFgAWgBMAHEAZAA3AGUAVQBhAEgATgBKAHMAVwA3AG0AcgArAFQAZwBnACsANgBIAGkAdABGAEEAawBPAHIAQQBzAFkAMwBMAEgAMQBwAEwAWgAvAFkAMwByACsASgAyAHoANgBSAC8AcwBlADAANgBaAFYAVQBRAGgAegAyADUARgBHAFMAawBiAFIAdgA5ADQAWABDAGEAegArAEEAbwBXADAARQBaADIAZABnADEAZgBBAHkAbABtAFEAZABJAEEAQgBqAHEANgBJAG0AOABCAGkAOQBvAEYANgA3AG4AVwA4AEQAQgBjAGoAcgBiAGkAMgA1AFcATwBEAEgAVABlAHMAZQBBAFAAUwA2AGMATwBxAGkARwBzAFYAdgBZAFMASwBQAE4AawA1AE8AKwB0AGMAQwBLADUARQBQAHIAVgBpADAAcgBQAGIAMQBRAEsAUQAyADQATwBHAE0AZwAzAEwASQAzAHMAVgB3AHkAaQA1ADUAUQBiADEAdwBLAHQAZABaADUAVgBxAGQAWgBKAHYARQBjAGsAWQBFAGkAWQBRADEAZQBmAGEAdQB5AEkAdQBuAG4AbgBmAG4AegA1AEYAWABYAFUAUgBCADcANwBKAG8AUwBxAHQAYQBZAHgAdgB6AHUATgBCADgAKwAwAGkALwBsADAAYQBHAEIAWgBZAFMASQBsADMAawBZAEEAVgBkAGcAegBhAFkAdwBsAHAAVABzAGkAbwBTAHoATwBlAFEAMgB1AEEAbABkAHgAegAvAHoAcAB2AFcARAA3AGsAcABEAHcARQB4AHAAMAA0AGwAZwBYAE8AOQBrAFYAOQAxAEsAQgB2AG8AZABqAFIAUgB1AC8AUABKAEUAZQBMAEMASQA1AGEASQBPAG0AVAAzAG0AUQA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBTAEkARwBOAEEAVABVAFIARQA+ADwALwBYAHIATQBMAD4A</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMAA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAwADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAwADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGIAZgBkAGUAMwAxADcAMQAtADEAYwA4ADMALQA0AGYANwA2AC0AYgA1AGYAOQAtADMANAAyADgANwA3ADQAYQAzADIAOABhAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFIAbwBvAHQAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUgBvAG8AdAA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AWAB5AGwAQwB3AFMAbwBvAHcAMwBNAGQAbgBzAFYAUABrAFQAdAB3AEkAWQA1AHIAawA2ADQANwBiAFMANgA0AE4AZgA3AE0AMgBIAFMAOABrAGwAUgBrADUAYQBoAGgAYwBNAHgAOQBWAE8AbABuAHQAegBxAFgAMwBTAFkAeQBxAHgAbwBYAFEARgBEAFIALwBrAFQAVwBWAFQAcABiAFgAVgBNAHMAUwBZAEwAeABxAHIAKwBXAEQAMQBqAFQAZABIAHMAdgAvAC8ANwA5AFEAdwBIAHQAcgBLAGgATABNAFIANwBqAGMATABjAE0AbgBYAGYAQQBFADMAOQBLAGEAVQBBAFoAZwAzAGQARgBTAEUAdAArAEoAWQBiAFoAYgBvAFMAagBQAGUASgBvADYARAAxAGEAWgBtAGMAWgB2AGwAYQBkAHIASQBxACsASwBwAEIAcQBiAGcASQBFAHEAYQBiAHEAUABBAGcARwA4AC8ASQBiAGgAdABOAGIAbABhAEQAawBUAG8ANwBlAHYAKwBBAHUASQBXAGUAYwA5AEUAagBIAEoAQwBZAGsAMABUAFMAegBKAGYANAAyADMAaQBIAFoAWQBKAFgARABNAHoAMAA4ADEATwBCAHIASwBZACsAagBNAHQAcQBrADgAYQBNAHAAaQBxAHYAYwBYADYAbQB2ADcAbQBUADcASQB3AFkAdwA5AGEARQBrAGwAeAArADMAcABtAEwAcQBCAFkAOAA3AFYAVwB6AGwAeABGAEsAOAA4AGoAbAA1AEMATABIAGIASgBxAHgATAA1AGkAdwBDADMAVgBwAGYAVgB6ADAAVQBhAGwAbgBnADEASwB0AEQAcQBaAG0AYwBaAGQAagB3AFAAYwBRAGMAMwBSAE0AeABsAGcAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AC8ASQBTAFMAVQBFAFIAPgA8AEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUALQBBAHUAdABoAG8AcgBpAHQAeQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBhAHMAYwBpAGkALQB0AGEAZwAiAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAQwBBADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgBOAFEAcgBZAFMAQQBjADQAMwBWADcATgBSAFQAVwA4AFYAVAA1AEUAMgBYAGgATQBjAHcAbQBtAE8ATgA3AFQAawBRADcARQBUAFUASQBXAEcAcQBsAFAAVAB2AEYAUwB3ADcAOQA4AGcARgBnAEkAWABCAGMARgBNAHQAQwBkAEkAeQBmADMAVgBNAE8ANQBZAEcATwBLAEoARAAxAHcAbgBjADIAeQBkAGwAbwB6AGYAMQA2AFYASABGADUAVQByAEYAZwB0AGsAVAAvADkAdQBLADcAdQBSAHMAaABqAHkASAA1ADEANgBIAC8AYwBDAEsASgB5AEkAeQBQAGEAWQBFAGsAVwArAHAASQA3AHgAOAArAGMAZgBnAFYAYwBVAFgAWgAvAG8AQwByAEYASABkAHUAZQBYAEwAUwA0AGMAZQAvAG4AYQBsAHMANAA1AHEAeAA1AHEAcQBjAGQATQA3AFkAMAA4AG8ANQBhADEAawBYAC8AeQBvAGkAUABMAGIAbwA5AG0ASwBTAC8ATgBsAHoARQBmAGMAUgB2AFIATgBpAEEAQwA2AFcAcQBsAEkAdgA4AE0AZwBOAHgAcABBAG0AVQA3AEYAUgBVAEgAVABQAGMAawAvAGcATwA5AFgAMABhAGYAaAA3AFYAawB3AFIAcQAzADMAVABqAHIAQwBTACsAVQBpAGQAbwB4AHcATwBJADIARQAwAEQASwBNAG0AdABnAFUATQBBADIAdQAwADQATwAvAGYAZwBSADAATABlAFUAcgB1AFQAWQBZAGoAKwBRAHoAMgBJAEkAOAAyAHEAYwB6ADcAKwBmAGUAdABFAGQAVQBzAHYASwBLAGEAMQBaAEIASwA4AEYAbgBtAHcAMQBCAEYAUABlAG8AeQBYADkAZwA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBBAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYgBmAGQAZQAzADEANwAxAC0AMQBjADgAMwAtADQAZgA3ADYALQBiADUAZgA5AC0AMwA0ADIAOAA3ADcANABhADMAMgA4AGEAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAANQBUADAAMQA6ADAANwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANwAtADEAMgAtADAANABUADAAMQA6ADAANwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AdwBFAEMAegAvAEYAMgBwADEANQBnAGoAQQA3ADIAegBLAGoARwByAFkAMQBDAEMALwBEADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AawBMAHAANQBnAFoAdQA4AE4AMQBlAGsAWABDAEgAQgBaADkASgBYAEIAZQBHAFMAZABRAFoATABKAGEAMABkAGwAdQBKAHgANgAzAFQATQBkAHEAegB0AEYAQgBUAFMAVQBGAGkAagB0AHAASABJAE4AYQAxAGMANQBhAHcATQAzAE4AbABhAEsATAB2AE4AQQBaAG8AdgA2AE0AUgBEAFYAaQBSAGMAMgBOAEsAdgBwAFkAWQBMAEcAZwA5AEwAaABYAGUAUAAwADUAbQBsAE8AVQByAGwAZwBVAHEAOQAvAG8AaABUAFcASQB0AGsAdAA5AFUAVwA3AGgAWABoAHcANgBGACsAUAAyAFUAbwBHAEsAUwBzAE0AZwBIAHUAYQBmAGgAQwAwAHgAWgBKAEEAdwBOAEEAVQBrAGMAWQB4AEwANwB0ADYAYQBWAEEAeQBWAGgANgBEAE8AaABHAG0AawBzAEwAbQBWAFMAbQBSAEYAQQBzAEkANgBQAGoAMABFADkAWQBaAHQAdgBIAGIARwBOAEsAYQBGAGYAbQBxAC8AdgBGAHcALwBuAEcAYQBFAE8AOABaAHMANABtAHkAaABHAHMAYwBhAGkASABYAEwAWgBiAFUAVQBRAFQANQBCAHYARgBYAGsAawBJAEMATAAxAG4AdgBBAGcAUQB3AC8AYwAyAEUAbgBsADYAeABkAEoATQB2AHAAaABGAHgAKwB4AGsAWABIAHQAegAwAFgARgBtAHYASQBDAGEAYgBOAFoAWQBsAGwANgBvADkATQBDAEwAQQBSAEkAQQBJAFoAMAAwAFoAWQB2AG0AbABZAHUAbwBmAFIAQwBSAFQAawA0AG0ASQBjAFgAawA0AEkAYwA5AFkANwBCAGIARwBDAG8AVwBKAFEAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE></CERTIFICATECHAIN> %kFZoB omZoB 7FRLrt+ !va"Cu _u>/% dj~ZU QL9Xo &9RNG |kvf4 (,tK?y zjvpX NfarD T<=Og\ 8q|CF n~GG) y~!,? ^S[QXWX pr:]8N L%MrQu xB~"k _,}b~ kXK?Z G:+E" OwWl..54 a}oHb6 XFo>ol ^S[QXWX 2:-~7 #_ F=O h7 O3h ^S[QXWX 11~AN _veAy 11~AN (@$aGY eZLAOj 2:-~a% ^S[QXWX 3PCr_=, jOPn([ J;k;g}p (aB2" I3qt< 2M%43 M,U}d G:+E" G:+E" M!'h}?Q X42F- v^tEXq| 1f\lyd rzP*A nM$+(v8[ ")<uk] vhFB@ G@Fr*@ |X(^Q T1=T!6 ./@.qC{t  (lK= G'#*] WlG[20 WlG[20 f)`rA? 3M#*] WlG[20 nc)5M q8@c7 +_%cN XW;;*E ~'VsX ]ZM*1S N;wT\ / L`k AKBZ| 5F<c;f8n zzI^\% /_R%8d Dagjf[ -o*x'8 ^hoRhp tcaH8 ljVX, O]-yw {oVAD y}zoT Al"p2- /P.fU I3$?5n VROxZ z(jd& S[W~X hvb%n v!Wiv k9 ;; rihc* rNA8- pB{Xj sTLKD MZBy)- oSlnE t YDbE .Y{2= .s'=(5A aO~vd oSlDT +e&!|h X`bqX URjNkT UQ{)@} UQ{)@} MG2lUyI 6mCHp RM*+P 6s^9[ /e.&x CgtmB^ H[\n., '9=B< e',@~ CQi&At KmyDt 1]&Q7Llb b' Af ,Y?sD  n2v" F^7o{ b{>g?# ART"K QfHb. W&d974 P)hw+ !0dg= g,xzQ MD)$uk *9G'.S r}\{h 4 -:j V,AbG 'XPB= tU_7GJiZL lPZ-q luH'X??1 2]Da0Z HF1}_U ia.N\ )Rc50 nSewN D: %b l'svL KeN<F B;2b4 ALaQZ ZJfhA6U No.EO w+r1f Ko%B+ &i#?j,^p Gps/G ~q.;Z .q<u4 F`_5l ;Zf14 CQJ"S i~`I[: jDly@ pY&M* bftlCM "!7Q6 nOOtn H|jah< 1!;tV WZt%R  Ge)) ,X[\1h^x XQu3OM w;cBm M ,0* F{dwR Abp!^ ]~kuz P2o2}> |^1+{k ]dbi0 EryRx 7qIxLdq V%UY+/M]B QX'J_ #Xa(0 }Z62, >Yp^/i mo~tFD zl,/e8 sS- DL wN%$} +/>kb*' (fpU9 ^Qh|| tROAwL vEbQpl J[&r| Ny%ag rEF8w >M7,x v}BpP -/D R mhn'6: #T_t4r3 d33Il ,TD-# #iVH7 ^+4!w w02f`j S<SXy ;*f=A ,<]E0 YM<0* S&"F4 "A1$q nC7BQ SWhI-T oV8]K6Y  J[&r| P@;1x- zfk_O =6mW< #f//B9 "=EX6YJ 802 % GmoQ/ p|^uQY& %W83? n:CU_ Cv(b%_g #Xz@* :zT~{} fhDkH WR9m) lJb B 5&!)tu 8MrO= O[.hP >,qkK Jwv_@0 \;o?eL f8g2) qAgHZ 7Mk*jM p?~4{ b21Kx yt5(A B"C6q N`8YB nRAVk WNx`M _E9xg .wYg{= Vq.F[ |7#[p)a 1H(_V iP kpM`M OY^OC 'l{'> gZz}B `o\c- }/e%Xl %b@vPd Ud|^0. S'%3} RfO/` bc8'e 3%H]: >IDEe 0P%}Xm 5wjtH 2NDp"V |DGT( `RC#c|c HmwL(| xDp"V cw'2i /F73zVz /F73zVz w<\P/AL fM6}= dE?a6 fVk~'b dY8`:E OI0}{J 4EOw+| } @~Un Xt0$H IAKX) Jk4j1d} K1s9)w [1>x4 q4,Xf -dYJYTm 0oX._ *DwY& e?o.;`v Uc67c' %H![f 'z]fz +<QAV(CC wRrR_ \gf2\n 2=2<p XxH2J Z(;yS h@x-D (KM5% )re0[A loX^[ w[S6P $.B`c 6IP.; Ox`1% T/Q7/ 'sKEh _<iKL`t z`dRF D}U#J M?_4v*A djcTem wo/4~ sr.cz FqxEx Q\W7* =eO9S-Y pRP(| w%]-4 N)3Rf ([[Wcc ?nBR. sR^f/a v09YL yGe6zO j!t7| /-([Iw -X<@n {5-Fn YXTia K7^N5 {+h@~ {>g?# $|b-+ :SA@7u %j1*#&.V 0~9`9i *iekeT# xRj4]|q~!{( 1O}2v N8gB9S( #1L#q N?-;j TR<Oacb =*BHr: ~j;X\] =B1BD JZ3lv ^s9f. 1j{&J !4ZG9 7Oo(s 33YMgu95 AtU38V z &/a'bz _B+% = ljVX, ij~[- N?EXg v27\z c>fsg _Xpy^QN $tfjQ9* hzL6q imy1k Wiw+1 $sq6oV  kn,hm Vz9(x h:"Q3 Z&aR)0. cSyQc 9bK<>443 9nTUV t$(Zb brV+t @xJj%p Ws8m` ce_<& ,3{RX=H Q?xv]|N ilRm( C=$o=- b&f*o n;2Si |b{-/1 ($!$@iF E}BLB 4J -3p vw%G. u<* (G cS`0F mNQ5* ~*kE* 9-JIG O)sy7mO H2kg? ^x"w3 #l{7p =K/-] [VG-7jjJ GWf#c e0>dSe> $=hK50 rl-tG tf2c $ B^KhU Z2nI/u d)4!u FpT=) 8*)g= vC?cl  ~z/X c3($R (LjIH #wI&4 w|36_y7 |_h@n rq~yb J't4}; X?ZZ' "zR_9 Q4o[a/ V@A\v 6?|z* Cbqucm Ld5r? ~f9Qa% gAbxY 7JM>+ (,ny_ )5};= QjYG`  kU_n7F ^lC%s0 y@iak S_4Z>Pzw<z X&t4yy ID='+# J9,2` xF+nli z~>wZ JTj@eTV QB>;4N 9t@7|zj iSurb h.u1u Ymuug# gw6q] y2|P!h #UyZO F$6Eh" 2u\vv {Es#0 H_H[` |']b! Q]5u- i7/ut [E",\ Pbpunv <y_+%ae "y}5-H ?UN*N d7e:| Q]<Bt RJa,ICl Zv:Pd K0:7a )yIP9 @`[i?X .]<ze I?O#&L $U^\M >\8Ep ZE8`9V b3X=! C'Ml] gP"-R ov|Kns F_6fe UD0xxO vaVA\ rsiDX \%=v6 !)C.)Ng f{e<4: zu97J W6&f: [etK8 vM3i_ Z]b5x$ E2$ LN ?v>.x} P4P)3W] &G(Ac gdad3 b(Hi+8 V+$Ek y^4#D em ke JEck. 9d'9k )tM,d 6^,2> "ZJS} 9:`z) "ZJS} dW+rO 0M?.r lI^ZG5 M ?Y=5U, Azon[ Z_)k&l <]&uQ 4g[lt~ iXk8; khOpb oa))\ m&{ZM"J %1TnF d-?.K -l#{$, \ N}0 ~M68I 8S?or N*ih7 ?N8~@ ^K~"8j)fPU X'dA^ z?KG] >Fz1pt=@{n ph@%' w3ySqQo b,Z-"9  XG'pi ^:f#9n F3T!3I 3W<Cs ve\J< |9Ez" e4O+g );>fg_ \&2`> Fc|p@ YC<zS }0'!e @]{t. ,t>|1_LA >7k<$ # SE/ qxmPd oW{o(H i=B=|I@! \t6QCc qZs<' ?gc_H Hl`2' )lZb> `M`9i 2qSE:, w|36_y7 |_h@n a{[=;$W ]D/Wp t<]8k Dk?x; Avhm4 suPS6 lCwnO8m SZE0y apI:Z Y?!_G oLX%Y K,FCO i$&7{C V<:t\ km-uk [J=d_ Nl*jo+ w;zxSR1 o)GrP Lk(4e ;bC'f l.-0E a= 2t 8<CZ|w fl|sd FnS(l0 TdXbV +Xn)+ Vok{*3 95%tg`voI _hS { M>b4rK cfgB, gntcWAR: "Q1mZ2>z `w}'} +?N~S]& cNQxT 90M@? gs.p/ `xmK< w@(Ng=H pN m@ tD>Vz KkNx^} ,WkPd B>FC{R Ws{8di >mBWv Cv(b%_g j>xco kjJ5z{ FC|;0 1H0*B 76LtE n$*UU*> ZzoN& Ar7qy  ZLy7p |W^2F ]Z7[- E}yI% ap]k,c KB.'dv gcoec haGm; :/<tb ,C&;lf -jB)E :me/x E"wZt @t9%je }RExe UZ^!3 ki8lq> _8G7<g mk$"_ 2g!1q [`]B6 (Svu; *-E24| I$~jG Z\`'Ko (v`aMV sSQw7w ="D%/$V u(>ib fz?Vh Pi.%o s4n4u 8)3*X {~".[ 0 Y$  <&s ; AKBZ| ""ZLbS Fc0tW XHM'a RQ}yw( M2^aB8~  .'z& -~Hl?Rs [oxl: QYeOXYm 4FZM{ iIiiGS Axa5{E vs@IDq 7d14Y} z<&`.0 HxmU -H7 &y9"y v5~l2" B1ZoB b-nE< Vy7h) z<&`.0 z3;u^ n%#J$]X U@A&`.0 &y9"y B1ZoB z<&`.0 $CdV-h%P o6vB>B nTP:I U@A&`.0 @ci:f &y9"y ];^.x 3m|,3e B1ZoB [&#mMI z<&`.0 sXR g^ ncJYc vs@Iq,9 U@A&`.0 _j^aW &y9"y ^4#@{ B1ZoB z<&`.0 <K},[ b2GTP:I U@A&`.0 &y9"y B1ZoB z<&`.0 |][T' vs@I\ U@A&`.0 y,Lo4qx &y9"y wkPwk3 7d14Y} ch+60: z<&`.0 GPRsL Tp="Ko @oJUe[ kyu-6/a [i.u' YeOXYm &y9"y B1ZoB z<&`.0 +x<Ts 5uTP:I U@A&`.0 6tG g &y9"y Kz* hbG 7d14Y} ch+60: z<&`.0 7V1M6k- tVc<G M}9TP:I vs@IDq U@A&`.0 &y9"y R+u`l ZvAq[ B1ZoB z<&`.0 Q-f`a ._,M/ GPRsL >s#cC}N GPRsL SRwsXVdP HZoX3 +BiQ: J5k3~7 o&<%W<> HZ$?] d0)k(7 rd+:8 VilY5 MIjXfD HUhlq lzy0T2] lzy0T2 cI>Wf 3|^5R %2X"P 4}EyZ D}CiX 00Zo9 %.ZoB 667%, 3:=m0~v:m s2-!J [MuW43BB z\>);3o TyMl& ",f:{_ XXdE/ 5liHWt HUhlq sb6JDOM I t({! U:y_$ H)Ovy9 HUhlq (eTj- T}bCp8 Ud=`0 *Myofu [i.u' S89Hg <bKCt ,vus.h8<G7 T&ZoB vfn$? C>`-2 P^Lkv) Ugzksq 9%q?O St bfNq $#%q{ G[WCE|E5 'Am6` P^Lkv) N~86# 9"ZoB N~86# 9"ZoB ]^ZoB Oa|":N0 N~86# 9"ZoB *aNQ[D P^Lkv) *aNQ[D P^Lkv) *aNQ[D P^Lkv) *aNQ[D P^Lkv) }\ZoB P^Lkv) 8DbeX MIvB< @oJUe[ [i.u' 7/B](F @oJUe[ [i.u' vfn$? S<WahT 7/B](F @oJUe[ [i.u' 7/B](F vfn$? HUhlq HUhlq 9TESi@D !KI'41f K,g&< HUhlq Agl>3 +[}3m :g]5l YX/8$ 63ZoB ':\]_ Wt3J6xZE ^|A ` }_Jv6 *iYj\;ej 63ZoB ':\]_ Wt3J6xZE ^|A ` }_Jv6 63ZoB ':\]_ Wt3J6xZE ^|A ` }_Jv6 f4Ff* '$^f4 `Eg|5 HUhlq fz17& BWKp@ IQ/a@ q`Sd- ':\]_ _A\^Nc }_Jv6 }_Jv6 q`Sd- ':\]_ _A\^Nc }_Jv6 DI&bknp }_Jv6 q`Sd- ':\]_ _A\^Nc }_Jv6 dEcun'v u/mV] PA#kBOwO *sEI? f0ih$6 <]+%M e,gWk _A\^Nc <]+%M e,gWk _A\^Nc <]+%M e,gWk _A\^Nc e#cCH <]+%M e,gWk _A\^Nc Z\{{{ <]+%M e,gWk _A\^Nc n)1QS <]+%M e,gWk _A\^Nc <]+%M e,gWk _A\^Nc #+/3Z <]+%M e,gWk _A\^Nc #+/3Z <]+%M e,gWk _A\^Nc (^D*yT?6 #+/3Z <]+%M e,gWk _A\^Nc #+/3Z <]+%M e,gWk _A\^Nc <]+%M e,gWk 6>l~|d> WJW$<nV YeOXYm o9i^;p !0`!x ]slA5 >e*h7k~ 9!hZ. ka%[?)rc ckMl9Q JXqX!p vgY56 YeOXYm x2 5] t)l[I HUhlq HUhlq g:y_$ M}U,~ :[FSb *Yo!m> }j YYFn HUhlq (`*.&2' yRd*A }c,tY J%.{}(V Hn<.' rY[*v *LVxKX !KLT|p 8(h(T roDC$B f@ZOJ )LLEZoB 'FBy(` `Eg|/ `5ZoB i)%eA '~;}e &Qd&I roDC$B `Eg|r QTKyt hG9FF !COi+L GC~dxOL 0m@9u R7{dX S~ _p E4OZZ #;O/\ ac&ZoB T@3dDI ]7!.= "j7}" `Eg|r roDC$B pFVbw =z45< kF]}"9 r'EK2 ;zD3\ <y|Y$Z i)ZoB ZH-`3 ;zD3\ <y|Y$Z i)ZoB ZH-`3 j)td|+ F=b8" 1st/$ ;zD3\ <y|Y$Z i)ZoB ZH-`3 ;jlI:&t 1X/i$ z>hLVg k4\9/B%eZ 5:J=o HUhlq b7wyH L_ZoB +p!gL aYCZoB -<9D& u/mV] 1fCgV$ G[WCE|E5 ZLd#c G[WCE|E5 _PWZoB G[WCE|E5  ]re& ;zD3\ d4<Dkj 0=B}r -;iA& W%?}n" O{Q$"> 0=B}r -;iA& W%?}n" <gu6y ;zD3\ 2QV|y ()Cs0} Zl(("5 -<9D& G[WCE|E5 G[WCE|E5 _PWZoB G[WCE|E5 ioR~I u=[82O, ;zD3\ r3(~z PTdZoB ;zD3\ r3(~z PTdZoB 9L c; ;zD3\ gOi6W APbwF mn(0fs ?ohG!Q ac&ZoB T@3dDI u3o1g X^z@0 [9Lyo!8 U;<&=G &ci2*0}j |y@/V +o*1P HUhlq 1Xi0E +$!08C Z x?E SO.&k} {aU|} YeOXYm \Vg8PFV ^{CGt HUhlq HUhlq a?*=e }\1Ug }_UsMh q=.q%d AsE$3 mXrvJ |Nd[c {7In0 zR,oUg) okWPI HUhlq 5P%,I 3_nP6 b7wyH 0.1;a e/!9K #se4S (',2~r)& l-`7.> :*JK` Y~K.w roDC$B /:bIn qoxdV T!bOi U71cx 4l-`S ?^hUI _+D0g_ HUhlq \}jM^/l $'1r89\ Ui<f| t;BPU %ClZm&a rdjl-A L| K3xy HUhlq \C3DFP (l>>8 %QDT4 //bj$DI ^7NR^ UxOM_ //bj$DI ^7NR^ RX.AsO //bj$DI ^7NR^ +J3hO GwP': ^7NR^ ^7NR^ ^7NR^ ?AU5ij, ^7NR^ ^:(ao &6>ZoB ^7NR^ `nraGZoB ^7NR^ _A\^Nc ~p!)< 6\l8W, <6e[K H^j1-$B L5ZoB d[|+O L5ZoB d[|+O =gf1;b uvx.+ ^2gZoB tJ^v% 6&m(P `Eg|r }Sne[ VYgw4r e;\~b #jXFE, (l>>8 mLq?~ <XM{eeDB RYiN9 QHB3y  56l/ c6#j y R$_,{F;{ 28keR j_*nuK vH!5] %mn>{ HUhlq cI>Wf %.ZoB 5j4p^ "iM8q hiKqji H#!Zd GXaNuH5RV fMHm_ 2O&ZoB 5j4p^ K!o8e hiKqji |hkzN  tl ) |hk9k ~d&AZ aRZxc I<6'P/ iS}_UsMh q=.q%d 5rfKa$H +<tax }Sne[ nAi&`q 7^i.6Bb8 6>l~|d> .`rBs p/!@me `Eg|r }_UsMh q=.q%d YeOXYm 5j4p^ UR-pjkb Ez\uP Hg:2r Hh9m0<30 HUhlq HUhlq lQv?-K"q HUhlq HUhlq \]l`* mW%'@ n<h72t: Lp3._ T1\$.! n1g?i U4S6Vc 5E* ZoB KA:\zV )lWQ,)?@ ~%=XW { n4~ \ahzL (`*.&2' e.fE_ R'k3N M3zr( rU:m` +Z'0$ HUhlq YeOXYm ^,d8U n!yOY5D`N HUhlq HUhlq 6&m(P iW?xT c)pr&> HUhlq HUhlq )2;,9 L~33@ <"a)+ 916OC 916OC WJW$<nV 916OC /\9Dc hxRFv ]KY(s ,FBRI tvn7ca YeOXYm d5IyL ^]7cLB iTLjF HUhlq _+D0g_ /:bIn 'm\ fw 8\S$> ~.6iN  $SRiy 2fw]sq 3~E!\ ~"9/& M3\l! K+~ZhA lzy0T xeSyU 2e(hO 2,$8*y o.c?; {.%'} HBZoB ^aS^.x 3m|,3e 3!Bn+ "Au2vw:@ iTLj( "Au2vw:@ ^aS^.x *YM6ti U@m?5 4u;vH SX.qop uu{^$ Hn[$} 5{r]k WkhxZ i:iv1 <-AdK U6Mna(; Eb'T1 <*81u{ @+7G 6)I g@.t; xL\\W Sg_'l F jI8bN> qmEaF ,:WZ[ .43wn@V =|v'l AEZ/p (@_O. =81Di Gi#Zm eRrJ} @&w sO fBm9Knl 'H.}N qS5E{ /SUHT t_J-O xM+nam O_-V/ s}O6< ~&]/h KyIX\k ,H{EM5 =:}.Z4 ?)90u: o+BHT! ~YLA'& vWqJi o#>~e +<2l` :P/`N ]vEiS _)st\ o|T0: |irzm Q*"Hj~ Ge=O^ ?m})& &XAA%O!+l &>GL"GW q(QM# q64:`} 14ExV tC?ae nx|ib Z\7f@1 ?O/AK ]?phX  m9r}+p/ yAP_,2 XAga.t p=s}/ p_(*-U?D. =lpFl 0]Wi)8+ .Ycs' E52D0 {*xzW bSFWP R}0@&}> dq)B' &QZ!"U hd>O2 bmr~vB 7R?l0 \DNMAs3 tn9^*l b.aS,p ={$U\ heZu3G$ 4Ke<(KNk +*{pu V=3^]: /FZ6[ ]}:o$ 8z?+_ ;\TGC miijIV 5eU7o E@\s/ 4"G2! 7\GwO _<u@l z-V1, 4 d"_ |*vxg 7c:~k lh;SB= i"CJvX q$h}$ZoB yN\1Q =xo"R cdZoB q$h}$ZoB yN\1Q >$ZoB =xo"R q$h}$ZoB yN\1Q T:+_s =xo"R {(ZoB &.x~y q$h}$ZoB yN\1Q =xo"R q$h}$ZoB yN\1Q A[ZoB =xo"R WP5d[ q$h}$ZoB yN\1Q =xo"R 7O'ZoB cdZoB q$h}$ZoB yN\1Q =xo"R O>ZoB q$h}$ZoB yN\1Q =xo"R dJvZoB RRZoB q$h}$ZoB yN\1Q "yZoB ?N+Aw =xo"R [OZoB HEt_jK x)<K]C@ k~3R<mZ $X$3M? LDH7E }\ZoB ,6&N9 ^k>;S Todxp ^k>;S Todxp ^k>;S Todxp /}jaG z8,-V4 /J%perrEE L{i{%uQ R#z[v Cb2#D tUt63 3d7f2Sk R#z[v J{LHf9 ^_ACjX Umu@D WRgum e#W/W lJ*T0fK 0Cl;4 4k!Nq_ "3RE: wVKW3 rb6CB] d6K,S huaIe (R3;b gqFX% !:}L[* lV{2U S,H9!K ^vRcU U8u#a =9@\y i?6k$ LPy*H [|Zk3 f["%Dd K&?#6c UcIL]| QQk7r ]+1n, / EcjS LPy*H o>u'? e|"6mj IlR3d HJ&!ch A ~+L t2Toe lV{2U lV{2U .U8Xl SYW:: Wl_ACjX Tj,f{ :P$~+ AI<8HD +ua#$|y ?6.u4 f0QZG JJ';l s?mV] JJ';l s?mV] JJ';l s?mV] JJ';l s?mV] O/Ya) m`(Tm bewqK A6>#^N lf2Sk p_5_O =P=WDum xIkxg tf2Sk _ACjX |;R3k _ACjX Tj,fB |;R3k ?C&H&{ dKRL+ q3IT7 kyU.1 nk`0- 5}jA%( <0r\n Wg_ml s8nA! $ZN8. 'as7$ k|~"BA ut~KE 854$N=?( ut~KE YJbv+P 4Nj\4K 8$c@, `UMzC 7u<P|[ s1Y*3 i|-[! 1n@74% +uAN,Pc $}o=G $?W`E p[o_jhl K,?Lk{ l)iT1* q`S\`0 VX7}d \XqWk, ^!;u'5 '}jH6 UU14]<( w?RvjB "G-@< ,:2BD 8N|Zek C349UN b]J/\R* f!<6y hgCKx a@GW= wp4}Y{ =f%]{ "hV!>  ]M@~, RJ8z'I ):R&9 Z:W7+ FSxj({ :!.M) pp5NW B(Sec Ohuvw By`npt[ R:t*~ [/;}@ 7S.N' Rj8)+$x dd]OV IRUZ"X q@lbg/9m P=qzv Sr=d' _%cm" _2yF] (/a\[Y 8W:>c /)vqU K*\Wc [nhQ  X#a?i4 /)vqU KM("_ !%b"1 'Y9!kh~bY KM("_ (9@Rz eS`i6 $&I\pioJ $&I\pioJ (9@Rz $y:?i4 /)vqU P5Gf#/ (9@Rz (9@Rz (9@Rz (9@Rz (9@Rz (9@Rz (9@Rz (9@Rz (9@Rz (9@Rz /)vqU /)vqU mpZ3Zc mpZ3Zc 1 #6h mpZ3Zc mpZ3Zc 1 #6h mpZ3Zc 1 #6h mpZ3Zc 1 #6h mpZ3Zc 1 ?i4 mpZ3Zc 1 #6h ;HJW&" ;HJW&" ;HJW&" ;HJW&" ;HJW&" ;HJW&" Qy|0` Qy|0` Qy|0` Qy|0` Qy|0` /)vqU /)vqU $y:?i4 /)vqU G2avH (V)6o G2avH .E!k. i4U;, pNbjg 6Ql+1{^ G2avH pNbjg Dcl+1{^ 6Ql+1{^ i4U;, pNbjg si#mKie uv'+{ %<p(E G2avH $y:?i4 ;k?i4 .E!k. $y:?i4 UD_P78N(l ^"m?i4 nZ']zzO 2?&~p :xn\6 g=5F> f4j7=E [k4xa9 AZ8F3P, Edo7*wy8!&yj QQKlg: \+K^' ,8S)` sunmV gc5'% z&K)m h8\:( PFv[\ j c`! !bB;M bqn0w {w>K|v [&l-x ipl{f=9e !Nu<pg 8;[~K bVKg' 0Lxbw5 5D&Mck Zr\d D! @=&kfP ?_!JKY@ ;}I"{j -(I&a 1)&D58# 7o6<v s|/dn$ k+xp}] hI<ih \i8Uk O_*L:kI %}nz% 4B35+ VpxVP {HAo" ?)5zQ `giiTT ;ojx' E\(vk IE'NWQ IE'NWQ IE'NWQ o8qTY o8qTY l6',r eo8qTY l6',r eo8qTY o8qTY 5d5]9 5d5]9 5d5]9 5Oq@Q CH/_/ 5u7`L &z5V#t +Idm- ,506W n!`b/ n!`b/ n!`b/ n!`b/ eT,zC 7GG]F 7GG]" { qME }T):M }T):M }T):M }T):M }T):M }T):M }T):M }T):M }T):M KqrM9 "4tz/ "4tz/ "4tz/ "4tz/ x[L/}R Y5~-a<k 63!*J~ 1*{r& Y5~-a<k 63!*J~ 1*{r& Y5~-a<k 63!*J~ Q%2+H(v ,MKg[ 0r55]ss  FjYU nMncCg nMncCg nMncCg nMncCg nMncCg nMncCg nMncCg IM lfE r1UnX +8}{P "{iK]W "{iK]W v>?-) ,H4iB~ v>?-) ,H4iB~ v>?-) ,H4iB~ v>?-) ,H4iB~ kGU~P_ Ji+vB Ji+vB Ji+vB Ji+vB Ji+vB Ji+vB Ji+vB Ji+vB Ji+vB Ji+vB Ji+vB Ji+vB Ji+vB kGU~P_ V&,Xw q5#VhI _h_?*= t$*m: B1p;~ #jI#08 kGU~P_ h-Z1! <15g~ &Bg]I &Bg]I isw"_X &Bg]I 9H-xG &Bg]I isw"_X isw"_X &Bg]I 9H-xG rNL"A 8ro}WJz B3jzw kGU~P_ B3jzw kGU~P_ B3jzw kGU~P_ kGU~P_ kGU~P_ kGU~P_ B3jzw kGU~P_ kGU~P_ NVRQ2! kGU~P_ ;Ky|K NVRQ2! kGU~P_ ;Ky|K NVRQ2! NVRQ2! u|0u?' kGU~P_ Wa0u?' kGU~P_ kGU~P_ 3j*I= 3j*I= 3j*I= isw"_X 3j*I= isw"_X 3j*I= 3j*I= isw"_X 3j*I= isw"_X isw"_X 3j*I= isw"_X isw"_X 3j*I= isw"_X 3j*I= 3j*I= isw"_X 3j*I= isw"_X 3j*I= isw"_X 3j*I= 3j*I= 3j*I= 3j*I= 3j*I= 3j*I= kGU~P_ kGU~P_ Mge'+ kGU~P_ kGU~P_ 3j*I= 3j*I= 3j*I= 3j*I= isw"_X 3j*I= isw"_X kGU~P_ Wa0u?' kGU~P_ Mge0u?' kGU~P_ kGU~P_ B]lz' kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ nMnc} *592/ nMnc} kGU~P_ kGU~P_ kGU~P_ isw"_X kGU~P_ kGU~P_ 8ro}WJz  #n)7  #n)7  #n)7  #n)7  #n)7  #n)7  #n)7  #n)7  #n)7 kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ kGU~P_ ((vM^ ((vM^ nds>o+ nds>o+ nds>o+ nds>o+ nds>o+ nds>o+ nds>o+ kGU~P_ kGU~P_ kGU~P_ kGU~P_ nT.q%!/C nT.q%!/C nT.q%!/C nT.q%!/C .0Hm\k kGU~P_ .0Hm\k kGU~P_ kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ (3S[Z kGU~P_ ;eD,4F M*k%;W o,uh> (3S[Z kGU~P_ (3S[Z =!DL5 CR~8V .yBp? @':KfM" F!X3K @':KfM" g#C^+>pB 3$sFf ./qBa )k_Tg |2;eT 3$sFf n(Ei.r $/>T_ IE'NWQ IE'NWQ IE'NWQ IE'NWQ 01:t8 wRZs> #-O|qC <%CQUz9w 7Xm[Y /X[0[ &:! e Pf~3gb] @x@3N UQ p#y&? %etrf_ R6%Io:O 1Gde@> L.=0: I{M%J  c~o: q|hP<< ; Y`_v cDR<u @x;@( wp4}Y{ =f%]{ iZ%j* %3w:_a5 +\V:FZ bVKg' BhD/b1 w f1!+e O "nC $-L,A |!ZPS x2@v56> Ojdzb Y5r.(1} 2h2#| -]ZPA V~?6\ kQEwW 39rIH HD]TW Cx#{: B+S+vK88 5Q/c1 G2%1m"zTi V+u:[ #XbOI ZvkV& (/a\[Y 8W:>c DRU]1 DRU]1 DRU]1 DRU]1 DRU]1 DRU]1 DRUZas LB)Y/ LBq5x*&8 :^pJ_ v'gOY RJw:DZ :^pJ_ Z%{Cq A>nD} LBq5x :VAkt: [ws4$ 3m}rm) K@ ># iQ)C>> 3m}rm) k#i,0 BQ9@G BQ9@G jo>UC<f jo>UC<f jo>UC<f \,}s' BQ9Y) \,}s' BQ9Y) \,}s' BQ9Y) \,}s' BQ9Y) d?M+e jo>U&>Nk Fsx&>Nk Fsx&>Nk Fsx&>Nk rYDhx -&>Nk jo>U&>Nk Fsx&>Nk jo>U&>Nk Fsx&>Nk jo>U&>Nk Fsx&>Nk -&>Nk jo>U&>Nk tsPAS 7JCj}K F\wAN >6rYDhx JuRrZ >6rYDhx JuRrZ >6rYDhx JuRrZ >6rYDhx JuRrZ >6rYDhx JuRrZ >6rYDhx JuRrZ >6rYDhx JuRrZ >6rYDhx JuRrZ >6rYDhx JuRrZ L>GyH JuRrZ L>GyH JuRrZ L>GyH JuRrZ dBeR: dBeR: dBeR: dBeR: 70}s' dBeR: dBeR: dBeR: dBeR: dBeR:  ;N(zE Ug*x@ "5}s' xt08e BSy3X rYDhx rYDhx rYDhx s#8+" X2N!1 03}s' X2N!1 03}s' X2N!1 03}s' X2N!1 03}s' X2N!1 03}s' +ZBeG> ~W/~Y *!}s' -sydXG 2}&+S 6wK**I6X ?Z<q$ `*=q3T jo>UB=H `*=q3T FsxB=H `*=q3T `*=q3T jo>UB=H brYDhx `*=q3T `*=q3T `*=q3T brYDhx `*=q3T :6yw' V@.Y) V@.Y) % FB/ ~wi[V S%(VS Br=}< "trYDhx "trYDhx a'I\[ njaB3: 6N}GKk ui4nW]V$ ui4nW]V$ ui4nW]V$ ui4nW]Vr ui4nW]V$ ui4nW]Vr ui4nW]V$ ui4nW]V$ ui4nW]V n~CFD v"T8+ 3`}s'  uc*~B td?ba !p,,u+ Bd5qW rI$hy !p,,u+ Bd5qW rI$vM XWu#1R |^st-Ke ybf>\ ybf>\ b(2mY b(2mY b(2mY b(2mY b(2mY b(2mY b(2mY b(2mY #/VhL@ b(2mY JKGWV \~)ar \~)ar \~)ar ~~tp  -ps/# -ps/# -ps/# -ps/# -ps/# -ps/# -ps/# -ps/# -ps/# -ps/# -ps/# -ps/# -ps/# -ps/# -ps/# V>f"h H8*cq ]6!S^ p~d+U (~y'8 lWV$2 g!mDH ]bl@G OPc6/ ]bl[+ Mt}TtYq Mt}TtYq a}j1].6dQ I5^=r uL+bf 4Q=^sb K+&0c6I z('D1 ,L4`f &UZu&# &UZu&# g<A_u A}F8@{ b%tc? g@o;"h dj~ZU Wh|^] &+v-Mj? -Yb$$J\ F}=-C TvPmJ !7LI@ S\5QbMH]k r,pqfC  "n9V5: 1sN%l] ,/=AG i"p>x NFodr q`g1M BbEKk0 o#py0"  ;Ryt/ d bPp  AflCj ]?^J? &WzU2 Z~Z=l =iXbq~ b'RDv Sk#@;^o |U|{G`= }N*[| ''E<JO{1 oh(e> ]7c}t!pq =,xD< Uv&Uj 4y?Zw~ |;`IA <b}(- nT2+zF H,|<5 o`y$P; 6ed=D X7ejfI q=j&| S]Gbm D9nu4 l;=j&| b'RDv Sk#@;^o  eL)Q /DR*" c_8B`^W P\b&d5 4sUjG> M)eS6I EJOIiL a3~rs xBG}A "gm[# s.}>8% H3Rrad" kDnOb @94:C #(bH<6 d-r9h R4rQ*L <da:c GThlU (vRg< aV|GJ$ A5!Bh \N;oo dv!6G BneM' 9%wN( v*MLy 8cy[3Q MzFv) cTb@9 r1Kz9 hKf}6. iyF3,zi ;Ry$K3 ZY^7L r+&EA,F.< hu6b( x4aSEG 3.I1t U%ml`<h. 1(}>AtU B*8od$ x!9iP C{Kt< "36:^h A}k`= )^J!b Ih-ZoB L G<ZoB ZB@'- PHgm]f .;q=SZq S%oLc :as9E QMb83 r37I8 ]UwaQ 1(}>AtU D'{:P'n ;@Hj? uB2>Kz f{?G; 1(}>AtU mFxl1 uB2>Kz f{?G; B*8od$ 7F7V! W*(Ge>S e46Zs xbK4| %zByP k`v7j -/~)S; m5N<_ 4Zx9z p3A{n V,=xj PHgm]f x!9iP C{Kt< jWN1&z~ apQlEJ# H_:at 1(}>AtU g?*%UKb :IQC) hOu\X "36:^h F#ht! ZB@'- CLDuf`X% ?%[KA (7!%JdzD PHgm]f x!9iP C{Kt< -kHr5, 6"36:^h A}k`= )^J!b 9!,<3 WfvVho m"36:^h H_:at 8e0a; :as9E QMb83 r37I8 ]UwaQ N7!5: %^6Gj WfvVho \mH4C ^~~+W QbK4| uB2>Kz f{?G; Cdl\u B*8od$ CLDuf`X% x!9iP C{Kt< -kHr5, 6"36:^h A}k`= )^J!b .;q=SZq S%oLc VxIM$ `zPt2 IY)-w 1(}>AtU :IQC) _ZQ$bn #4b#y hOu\X -kHr5, 6"36:^h A}k`= )^J!b .;q=SZq S%oLc VxIM$ `zPt2 IY)-w 1(}>AtU uB2>Kz f{?G; p>Jf{ C{Kt< SRWCP}W -Ld4< :qr;B r)R(h B~)n"p F-ZoB b-u}C PUY:` bC+3J6 PUY:` b-u}C PUY:` (|8Sh VbdLC 2r?B% GX\`TN 8.mE8 &(bK[ iZ5C{P BF2{_ +9|QD l|2Sn; c6U*R  =Rwl7 GZ=,zE @DII# Glkj7 R/whh 4I 9` BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl BDmbl Y&Svp Y&Svp Y&Svp I$lA1v# Sc%d> uZ``6 Ld9`' 5~$b-E (|}8O mfHQF t"`Ja <!ZoBH(*4L dyGA$1,e of$Jp jzp4WK`%Fs k&MOo M!V_J a<#3; MS?@_ NnPi? k]"9X u{%2Lc6 :m%6) Gi2$8 K.O{8K pp3ca (2-rBI8m B(jWm o$!,j -E!0[&s <lhI5 }Pt9$ _l:wk xR^(cn TRJr| +l?UB ^_O.my 8a$+I c[pjo 9b]B[ $3v"]_r (}I#n; #?vlAr X>G-! %0"Lh >HFM_vZ ao:\{jX $5}BP ayrl* 'b/f0P ZiX_! sK5Tti dx+f, 435bTi %("0p H(cm; B]{)[ tgvAs9TzX L-xBr 0_qfh BhYD? .r2=  bJh@8_ 6]CTR5 B]}3Nl 3m\Gl JOs`9}8 FE8s@ ,@:O$ Snh?j +_JX: Lvlw<E6^%F s#xIh BZDh= *t|D-p 03aDb 0<At~8 w<7EL Cfxa` I*e.'=r Apw(g8 Cb|tzF  -AW| U,K(` (F{nx8 nuiK=\in URK~2 5N$M` n^0JnG l."a(U^> %=CS& ?[UJ% }7G0I W<==j  8>iDq ;k{bSxU -;Dzl jIsGg [@vmgD 3i>}* }f)3nR0E?' gFX80 j~VJ. p^P`, eD4*< _OxPQ W::PL j,yru p8f}C `5Aum9 k}^=] <jCTjN iyw >XD^m %:NZI rtFYhQ| tBR^?2  !1)  Qa~e2 ZT_d6E 8U**q e7M0u 6H_g{~ w<oakX W"3Q"@M T[0V5O L9X9+ Sr\sMo B.hmau %4b0R .3kOo uf.fO rq1,,s m{7B# FxR* m "!NxU=< ]Y^4] @'5(, QWw^K/ B8@+X 9zU-} QLcOP `'+'_ ~=1D/ ?ffI+ NJ||4 "'Y9E y!f$Y` (acn4?# dwC%=% Iq[R& gLM#j3 g*p%A7 p30MG ./ck7 OlV&ajx qi?$& HSD6F y^[\> !CNRv ><sM+# d5|Qu ^Ea@]/S [*E[x [;#bGs "|e16bl uKdd,h 5Us}P Ji.Q> QdAj> #'N^L E9k~n )8O4{)| ,OEW>= Rfkt. s+;Us Reyv9 c,u\nG PTGy} SK'+n l1STB =|iX(! aVk3= .Z<e+" vO%iz hK)VB 6dgm~ 'L8 s ].VjxO] l)Q ,F a%qK! 1Oy`L\ D[=Rv*| 8(.#S uje8|  uD!8 8y4ah $4T8.v X-L<|, R55G)F RTA7g' j)wS6+ BF"xr yN\4( S<C'? 84X8V 1#""/$)W* nYe8] En@kr 2mZ"U$Q vy22G2]C >9o4@ ;!$tRw ]C{#| e#]":63Evr [?5p%X Yi-sg V=$;|O K@)X6 >e5Fh;M8 :mJG;$ D4L)G c'W[7 n6!I@ lNz<j ovi7WN cjjRyM Q)=Fc >lWb) Wr4D?] S #=BHRL 2Pcw$q gya!PR VmOB2 Eb4),2g. `|p=Oc0 OO%aZ "}#S. Pw]Ruv kc&=y apWUqM d!zW. `I>x( <h!imC u3ZRr >w]a~ pX9@X C5|qz9; cihn(\%| r/9DI6 l3q>Z3) h$~DE 10KfN m)n]K/ {n2&k ;XPUr :y,UF p-^+Q N:'@y eEEw" gack9 ;,Q)g <m]J*  67+- #;H$@ sFljJ W[PD+ l_,*C [Sq3t =0!Cv ]XXUlu ]XlH@ hGS:_ 8tPFg fUPz< beK0I E7(ek kf&UF G|v#LQ B=?J< V[BG- @xMPc3 \I;Y4EW 0+GJ{ k3dj_N-6 {~|{-^ e-1o_O n n%] b"HN2 gbV04 p:@p) M$.36 miYE+ tn#0nF; JeC8| \wsEd2& ;luFo|=y g.>Pt 'G)0  [50^9m>kA! -@;rGxH ~|`MMz a9H,Q j?CT9 i$z^a NC#QI?z oo4]( t}r]G5 rde(a<p>: >.jAK :d|8%} vDf.8 7^mWsP 5#[^, "V6Wl B\w/  )rHM9y 7g-=*tF 0|hg0? g!Tv`? ?}I%L +9g?{l BPO'% 1p%6J p1&AR; 6ccNUJ TJ"7U1 pNN4D >qa2} (8r(d X_S'= iwARx |X\Vq ^Z|#e b{Q`" Ar6%[ 1h7,XI R_r), 2&QBn +N,%L3 #|\.0 _A?_$ 9hX3h egAlNaF P+!Mc pwt1&o g9>lF J*z@d G8-!Q .B}CN Tah?c SZ;7A M>G(sA Vs0\*A Q8,W6 tAKqBp $6K*Qd RQ#I[1 r2p>/ ?,]a% %~V#! AoF15cE #P#qQ$ ic#`^?~ L9]MU c27s=B LT\V~ w[_KyL& +;6gGs D>g&. B0?#2 9tOe3Y _XW}P 'P^-9 )^t3c 2ihjM eJn.T k!grP w7ety w$)?4;O _3k'Z s8k\+f[E XMlK< !RI8a `&x-b !=V?0xnxd 'ofL]m -)I8kn/  ml&w6 1:VFy .Y>b4 Hq`.m f%3>GRJ` (`Zie AZxhs59 ">97" ZLR!31 *n%:S %R_fB &9(yr_ ujv92 VmV;<| C1x%lR _<5yS Ug=^H t~)%+ ]I"[c! JG>-Av Z6=}Ao "MRJV irFsz TFpSq U^HXF :Hg*l TIkv4 'xG;& S6Jrt b4lW@ W'IZ0 jlr1yM_ cOj3CA 1#Cp4 T'o>U E~fv[ qa'SB byYt] U}!;]E qs=!bT >!2(  j'XOp N$5Vo :Ez6_( 1I{-~  (^MQJ; F3`K%X @$QjI 8i0$P S%xx> oF6!F HK:20 7op+K H >bs a0],` _t2Y%+ nwCLVK 4/IRod Rk-M/7b :Z(H+P.o Z~N!q CykFr wqg?,"] 4E"0N gi6?Z |^$gM 4SRPN ++3MJ Q0(N# vD?To a7?O# _=Vc!^. [ey)g ^@# [ 4)XcJHR oGd%U >p>M>%s4^^ )b,I-WF 'L@g` E.x!Q 'qSnSG }!Gf4 BFX/sJ -:{oym   GF7 [GG}  n[::g &8"B+ hl%al m;j]qkZ $D3Aq NY{:0{ JFh`CboK }Q8'D :HHUN /PdU# [Ok\rL fCrL?S {~1J> #f0sA1 5gR & ky"#P lIE9riNo bdcsk Wvl8) z=[W\ /-hS# y{LDG/ [GLp! b0[:? '$Iq? .q]9VDH w?Qtv M0vsi S4#$/ Yu7]& >G)f$ }9QLD >6!vvL'dxz J{;dI E"Eo  ~q6T; S;tCMk )RR1, tjpdm|cI Z6VY/ 4/bj\ Kuz-|~ #:),I xhx^Ui bVtUi Z*f,v KTQiE (>hXJ ngeH=h+ WyYJ? #P*-> _G5pD A&Dd. !zJdq E;ob% ?Ji?B {%YfU} U,gRn B,=/ L O,g:C vtdT9z %YYG;8 #D6jwV S]Rd[ ]!L[J kvFI" %@vWD aX3)\FD .@=cdUcW_ P6UAQ rO~`m =Z(@f $ x_U Q?Q4# }6~R( xNO6' <7'ab?", y<e9y b%zy^?f |I:Ci9 ltw?J tn[`N+s Fh]`GX Oog$u 5"R5\ OCW>U 11E_*# 37H2% J[#Se >;GQW BEmw) raozV ,ElAl !$`qFJ L~"V   }m[*_ %Xd^0  "a2? ZDmB} 'wfj- wR^rv sA[Z& JJ<K.U 8|g5k7 X79UE` |:NBi@J u6c22 1h{|$ apKJ1 4#4qt ,E6c+ vMs0w( 6=b"z Y7`gbGc i[}6. P\EG,M eM(>[ i]EKt O7E#5? (|C@!maoF b5aB0 %:U;m_a EUZVIw xq^Cr{ R:@-& W:wnj-H NMim/`V l<A[> \Pa0F u=hY&S g2uUf y<A&6WKV .}\]!AO5G sKyN0 :Z,~I wfemr /&}+J 9{*zcx J#INg ~'N>"$ u}>WQ< j)$fx &d%e. Er&:!Y HWSxO 9_HRa ^n`x(u lN `g/ O46~9 _cn`Fj )[LpU :KJ&x 8b@Z' OZdcq 2+0<lq u8)-c rU{kp}Q -FPv-KA Gn$H_ 84<<- i_BX? O-=bdZ b:9;. {m\ wbc  VO|s} S`&Ts Kob ~ 4 AhGs &1qRk \H|_:O} hRq6G _aKo? F$%W5 4aEY* (i>XD42 haTL! pDDZzeQ &a2G! f$Tz"Y n$mdA #R,.E x:hPNjjZ j&kE C ]e>t^B5 mD,xl /\KpQfGZ T&*i+ ZI2=}~l py=Y+ VG5en ax9gU.6 G'jv^Ql YK}B( |MFugGH 6HzK+ nb&jzOn U`5`k ZqW{u YKx_c iDT`_ S|^0X >6(h9^_ eYW7k ;/$Rzl] &#7l" ;PQQh NN9(i :]_sA jOXx=b OL(krF9TiF2]sFPermission for this document is currently restricted. If you are not running Microsoft Office 2003 or an application that supports documents with restricted permission, you can read this document by downloading the Rights Management Add-on for Internet Explorer. HYPERLINK "http://r.office.microsoft.com/r/rlidRestrictedPermissionViewer?clid=1033" \o "Download the Rights Management Add-on for Internet Explorer" Download the Rights Management Add-on for Internet Explorer HYPERLINK "http://r.office.microsoft.com/r/rlidDRMMoreInfoLicenseReq?clid=1033" \o "Learn more about documents with restricted permission" Learn more about documents with restricted permission U}HSQ $"$,GE(TP VU*[ptP jq7z#J MG5$|
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\GI\Gamer Pictures.doc ===
Microsoft Office Word 97-2003 Document MSWordDoc Word.Document.8Microsoft Corporation Title _PID_HLINKSvincec Normal.dotm vincec Microsoft Office Word[Content_Types].xml _rels/.rels theme/theme/themeManager.xml theme/theme/theme1.xml w toc'v 3Vq%'#q :\TZaG IqbJ#x T[XF64 theme/theme/_rels/themeManager.xml.rels K(M&$R(.1 [Content_Types].xmlPK _rels/.relsPK theme/theme/themeManager.xmlPK theme/theme/theme1.xmlPK theme/theme/_rels/themeManager.xml.relsPK <?xml version="1.0" encoding="UTF-8" standalone="yes"?> <a:clrMap xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" bg1="lt1" tx1="dk1" bg2="lt2" tx2="dk2" accent1="accent1" accent2="accent2" accent3="accent3" accent4="accent4" accent5="accent5" accent6="accent6" hlink="hlink" folHlink="folHlink"/> urn:schemas-microsoft-com:office:smarttags PersonName -xX3rIDATx^ ]U 53 GKnX+ VwP}E^6-u ; {gJ*[D 2XA{I7 %asY` bGIXvt W'?zf "U' ? ve)c) ]aj;7- v%aG) aFK/b= -t%zYqa jAym@ f1|A\ 6[Zj{ <+4zP  s}yCi G6L(L N'Y6@ #*4>8 G"~r)Aj4 C#d}$ dxr&4r,<z,41 '"<OO P;UYG d.Bon3/ &f+{: t[>66 l0$9d P}q0/ 80pxp qIYFQoh_ j7I]r GS"|0 *%DAp) PA,'V Xht*29 LtdJZ tv$KY H<IRC# _$/*P+ m#+ZlzA9 @@r4R IR,^<q 7{ovww 2r{9* DZ#V`$ v $`  uNS pv9_ZYX  ^o{e 12y|$  quwI bd;[{ ''&'' 9G'o` hsgsf N_J]|&[ ;~b43 Lm-XH =|+MU Y/sLlb:F 4'w80, 9y>3y 7j|q: r<S|a X!R9J M4h26A ^xZ9i i9W]_ n@pH0 MbjqP f+eFG R% ,U dtQ3: hbHc> Ln`oi TMTd@ hHL/)}m8 [}Oah pz$ld $Dn@i <1r@, n)T~h 4x(.I 21-WVVbjbjE Gamer Pictures Last Save:  SAVEDATE  \@ "MMMM d, yyyy"  \* MERGEFORMAT  July 20, 2007 Vince Curley Note: This is a living document.  Ongoing edits have likely outdated every version but the one that is checked in to Source Depot.  To make sure you have the latest and greatest check out: //depot/xonline/main/private/doc/server/gi/Gamer Pictures.doc. Not enlisted?  Run this: sd -p BGIT-SDXSRC:1666 print -o gp.doc "//depot/xonline/main/private/doc/server/gi/Gamer Pictures.doc" Table of Contents  TOC \o "1-3" \h \z \u   HYPERLINK \l "_Toc172711261"  Table of Contents  PAGEREF _Toc172711261 \h   HYPERLINK \l "_Toc172711262"  Overview  PAGEREF _Toc172711262 \h   HYPERLINK \l "_Toc172711263"  Types of Gamer Pictures  PAGEREF _Toc172711263 \h   HYPERLINK \l "_Toc172711264"  2.1.1 Large vs. Small  PAGEREF _Toc172711264 \h   HYPERLINK \l "_Toc172711265"  2.1.2 Pre-defined vs. Custom  PAGEREF _Toc172711265 \h   HYPERLINK \l "_Toc172711266"  2.1.3 Public vs. Personal  PAGEREF _Toc172711266 \h   HYPERLINK \l "_Toc172711267"  Awarding, Setting and Retrieving Gamer Pictures  PAGEREF _Toc172711267 \h   HYPERLINK \l "_Toc172711268"  Assigning Gamer Pictures  PAGEREF _Toc172711268 \h   HYPERLINK \l "_Toc172711269"  3.1.1 Locally  PAGEREF _Toc172711269 \h   HYPERLINK \l "_Toc172711270"  3.1.2 Remotely  PAGEREF _Toc172711270 \h   HYPERLINK \l "_Toc172711271"  Tile Types  PAGEREF _Toc172711271 \h   HYPERLINK \l "_Toc172711272"  Users of Gamer Pictures  PAGEREF _Toc172711272 \h   HYPERLINK \l "_Toc172711273"  3.3.1 Sign-in  PAGEREF _Toc172711273 \h   HYPERLINK \l "_Toc172711274"  3.3.2 Friends List  PAGEREF _Toc172711274 \h   HYPERLINK \l "_Toc172711275"  3.3.3 Common Gamercards  PAGEREF _Toc172711275 \h   HYPERLINK \l "_Toc172711276"  3.3.4 Message List  PAGEREF _Toc172711276 \h   HYPERLINK \l "_Toc172711277"  3.3.5 Dashboard Gamercards  PAGEREF _Toc172711277 \h   HYPERLINK \l "_Toc172711278"  3.3.6 Gamer Picture Selection  PAGEREF _Toc172711278 \h   HYPERLINK \l "_Toc172711279"  3.3.7 Public API (Titles)  PAGEREF _Toc172711279 \h   HYPERLINK \l "_Toc172711280"  Other Notes  PAGEREF _Toc172711280 \h  Overview Gamer pictures come from many sources, are stored in many places and can be retrieved in many ways.  With so many degrees of freedom it is important to understand how they combine to create a flexible yet complicated system. Types of Gamer Pictures Large vs. Small All gamer pictures must have 2 sizes (so actually, each  gamer picture  is actually 2 distinct images).  The large size is 64x64 pixels and its PNG encoding must be less than 16k.  The small size is 32x32 pixels and its PNG encoding must be less than 4k. Pre-defined vs. Custom Pre-defined pictures are created by title developers and included in their game configuration or content download project created in XLAST.  The PNG files for the pictures are submitted to the Live service and (for game configuration projects) compiled into the SPA file for inclusion in the title s XEX file. When a title is propped to Live the pictures are copied into the storage service at this path: //global/t:titleid/tile/0/imageid where: titleid is the hex value of the titleid of the submitting title (ug, sounds like a lawyer wrote that) and imageid is a unique id assigned to the image by XLAST.  All images, including large and small versions of the same gamer picture must have unique ids. Custom pictures are raw bytes written to a profile, either the online profile via xbox.com or the local profile via a private SPI, XamWriteGamerTileEx.  Both large and small images must be submitted.  Each image must be PNG and each must meet the large and small size limits. A profile can have 1 custom gamer picture at any given time.  This means 2 custom images may be written to the storage service if the profile has a custom picture.  The storage path is: //pics/u:xuid/FFFE0700/gamerpic.type where: xuid is the online xuid, in hex, of the profile that the picture belongs to and type is:  for the large custom personal gamer picture  for the small custom personal gamer picture  for the large zune tile  for the small zune tile Example: //pics/u:9000ACB28483E/FFFE0700/gamerpic.a Public vs. Personal Each profile has up to 2 gamer pictures: a public picture and a personal picture. Public Pictures are visible to everyone, regardless of privacy settings, friend status, parental controls, etc.  They can be any pre-defined picture but cannot be custom. Issue: Public pictures cannot be custom for implementation reasons, not just policy.  The code could be updated to allow custom public pictures but that requires a flash change.  I note it here because it s a big missing piece and not something scheduled to be done for Spring 2006 s release. Personal pictures are visible only to friends, only if the owing profile is sharing settings with the viewer and only if the viewer is allowed to see user-created-content.  They can be either a pre-defined picture or a custom picture  Zune Tiles and Backgrounds Zune users have a single picture on their Zune card.  It can be a stock tile or a custom, uploaded image.  The tile can be viewed by anyone.  It is stored in the same domain as Xbox personal pictures: pics. The profile setting XPROFILE_CRUX_MEDIA_PICTURE points to the Zune tile.  This setting follows the same conventions as the personal picture tile described above (that is, it can point to a stock tile or a custom tile and when it s custom the image is stored in the pics domain). The Zune card also has a customizable background image.  The profile settings XPROFILE_CRUX_BG_LARGE_PUBLIC and XPROFILE_CRUX_BG_SMALL_PUBLIC point to the Zune background images.  The pics domain stores the custom backgrounds of Zune cards at: //pics/u:xuid/FFFE0700/usercardbackground.a Question: There are 2 images, but only 1 path listed here.  What are the 2 paths? Awarding, Setting and Retrieving Gamer Pictures Gamer pictures are referenced by key.  There are actually 2 profile settings, each of which stores part of the key.  The public part is stored in XPROFILE_GAMERCARD_PICTURE_KEY and the private part is stored in XPROFILE_GAMERCARD_PERSONAL_PICTURE. Each key consists of 24 Unicode characters of the form: TTTTTTTTBBBBBBBBSSSSSSSS for pre-defined pictures or TTTTTTTT0000NNNN0000NNNN for custom pictures (when stored in the profile setting) or 0000NNNNXXXXXXXXXXXXXXXX for custom pictures (when returned from the server) where TTTTTTTT is the titleid of the defining title, BBBBBBBB is the imageid of the big image, SSSSSSSS is the imageid of the small image, XXXXXXXXXXXXXXXX is the xuid of the image owner and NNNN is a random number generated at the time the picture is set. All of these numbers are in hex and contain as many characters as written above (e.g.  0002004A ).  That is, there may be left padding of 0 s if the number is small. Custom pictures have TTTTTTTT equal to  FFFE0700  (defined as X_CUSTOM_PICTURE_TITLEID on both the client and on the server).  When written to the profile the titleid is always X_CUSTOM_PICTURE_TITLEID and a random number is generated and put in the key in the NNNN slots.  The xuid cannot be written because the profile may be offline in which case no online xuid is available.  The random number is used by readers to determine if the key has changed so that a cached picture can be updated. When a picture key containing a custom picture (TTTTTTTT equal to X_CUSTOM_PICTURE_TITLEID) is read from the server the key is fixed up to contain the random number and the xuid of the readee.  The client examines the key and if an online xuid is present it knows that there is a custom picture for this user. If the public key is missing a pre-defined tile in the flash is used.  If the personal key is missing or all 0 s no personal picture is assigned and the public picture will be used. These settings are never written to directly, only XGI, xbox.com and Live tools are allowed to touch them.  When read only XPROFILE_GAMERCARD_PICTURE_KEY is requested and the client or server (depending on if the profile being read is local or remote) combines the two profile settings and returns the result as the data of the requested setting. The logic controlling whether or not a personal picture may be read is applied on the Live servers only.  Local profile reads always return the requested picture type, regardless of friend status, sharing or UCC.  The thinking here is that two signed in profiles on the same console do not honor sharing restrictions.  They don t for profile settings and they don t for gamer pictures, either. Since the servers always apply all the personal picture logic most callers can simply retrieve XPROFILE_GAMERCARD_PICTURE_KEY and pass it to XamReadTileEx.  No worries about getting the logic right and no loopholes for accidentally displaying an inappropriate picture. There are several reasons 2 profile settings are used instead of just one: s easier to update the public or personal picture key without requiring a read of the existing key first. s easy for the server to apply different permissions to a separate setting. Backward compatibility with existing flashes is maintained. Assigning Gamer Pictures Locally The most common case of assigning gamer pictures is when a user enumerates the awarded and downloaded pictures on the console and picks one.  On doing so XamWriteGamerTileEx is called with the title and image ids of the selected picture.  Those ids are encoded in the picture s file name.  These ids are formatted and written to the profile s XPROFILE_GAMERCARD_PICTURE_KEY setting and the actual bytes of the images are read locally and copied to the profile.  On sync only the key stored in the setting is sent to the server, since the server already has all pre-defined image bytes.  Only pre-defined pictures can be assigned this way. Personal pictures can be assigned in the same way, but can also be customized to be any picture (as long as the size requirements are met).  Again XamWriteGamerTileEx is used but this time ids are not passed, PNG bytes are.  The personal picture titleid is used to format a key that is written to XPROFILE_GAMERCARD_PERSONAL_PICTURE and the PNG bytes are written to the local profile.  On sync the key stored in the setting and the image bytes are sent to the server. Remotely Both public and personal gamer pictures can be assigned to a profile locally or on the Live service.  No matter where the setting is changed the next time the profile syncs the setting and data (if necessary) will be synced along with everything else.  This means that a custom personal picture could be assigned to a profile on xbox.com and then the profile syncs it would receive the new setting and images.  Personal pictures can also be deleted on the server side, which is handy for replacement of inappropriate images. To assign a public or personal picture the setting value must be constructed as described above and the profile s XPROFILE_GAMERCARD_PICTURE_KEY or XPROFILE_GAMERCARD_PERSONAL_PICTURE setting record must be updated in t_user_settings.  The change time of the record must also be updated so that the setting will sync on the next attempt.  If the picture is custom the PNG files must also be written to storage in the path described above. To delete a personal picture the XPROFILE_GAMERCARD_PERSONAL_PICTURE setting must be set to  000000000000000000000000  (converted to Unicode bytes, including the null-terminator).  The PNG files must be removed from storage. Tile Types The way the system knows what tile type to read or write is by looking at the eTileType parameter to the read/write functions.  This parameter is one of the XTILETYPE_* defines.  Those defines are described below. XTILETYPE_GAMER_TILE XTILETYPE_GAMER_TILE_SMALL If qwImageId is an online xuid then that xuid's picture key will be downloaded from Live and the request will then behave the same as XTILETYPE_GAMER_TILE_BY_KEY.  Friends and private checks will be performed on the server, but UCC checks are the responsibility of the caller.  This should, therefore, only be used by system apps, never public APIs. If qwImageId is not an online xuid then the request behaves the same as XTILETYPE_PERSONAL_GAMER_TILE[_SMALL]. Returns personal picture if available, else returns public picture. XTILETYPE_LOCAL_GAMER_TILE XTILETYPE_LOCAL_GAMER_TILE_SMALL These are used only for local gamer picture reads and never go to the server.  The profile to search is specified either by: 1. dwUserIndex or 2. qwImageId is an offline xuid of any local profile (the user does not need to be logged in) The public API XUserReadGamerPicture uses this type, specifying a user index.  This cannot change because legacy XTL libraries already pass this type. The user's public picture is always returned.  This is required for legacy titles and it gives a way to force the read of a public picture (like for the picture chooser screen). XTILETYPE_GAMER_TILE_BY_IMAGE_ID Read locally or remotely by picture id (dwTitleId, qwImageId tuple). The public API XUserReadGamerPictureByKey uses this type, specifying a user index.  This cannot change because legacy XTL libraries already pass this type.  Newer XTL libraries pass the full key to the system which allows the system to decide which image to actually return. LiveCommon also uses this type, but only to read flash tiles in account creation. New code should avoid this type since the other types give more control and pass more information which can be used to determine the true image to return.  Prefer XTILETYPE_GAMER_TILE_BY_KEY. XTILETYPE_PERSONAL_GAMER_TILE XTILETYPE_PERSONAL_GAMER_TILE_SMALL dwUserIndex specifies the profile to read if a key is not given. qwImageId must be a xuid (online or offline) this is unique to the console.  The xuid used by the in-memory and disk caches. image key is full key returned from XUserReadProfileSettings, if this is a remote read.  This parameter is optional and if not specified dwUserIndex will be used to identify the profile to read. Returns personal picture if available, else returns public picture. The public API XUserReadGamerPictureByKey uses this type.  Both the client and the server apply friends and privacy checks to combine several profile settings into this key such that the caller can simply pass it in to XUserReadGamerPictureByKey and get the right picture. XTILETYPE_GAMER_TILE_BY_KEY Returns whichever picture is encoded in the key. First the key is checked for a personal picture. If one is not encoded or that picture cannot be read for some reason then the public picture is used. XTILETYPE_AWARDED_GAMER_TILE XTILETYPE_AWARDED_GAMER_TILE_SMALL Read from or write to the local set of available tiles.  Stored in profile but only locally. (dwTitleId, qwImageId) uniquely identifies a tile.  All tiles that are or can be awarded are associated with their awarding title, never standalone or dropped in the profile manually.  This is because the file name encodes the public picture key that will be set when this tile is choosen.  qwImageId encodes the small and large tile ids. Users of Gamer Pictures The various readers of gamer pictures and how they use the provided SPIs to get their job done. Sign-in Sign-in must read the large gamer picture of local profiles that are not yet signed in.  The picture is read from the profile content package header using XamReadTile(XTILETYPE_LOCAL_GAMER_TILE, ...).  Only the public picture is read. Friends List The friends list and recent players scene use XamPrepareGamerTiles() to have XGI download the picture keys for the given xuids.  Then XamReadImage(XTILETYPE_GAMER_PICTURE_SMALL, ...) is called to retrieve the gamer picture.  The Live servers apply friends, shareing and UCC permissions to the keys so no additional checks are needed on the client. Common Gamercards The shared gamercard code wants the personal picture if available and the public picture if not.  There is no need to force the reading of one or the other.  Reads are done for local or remote profiles.  The logic restricting personal picture viewing must be applied because these gamercards can be used against a variety of profiles (friends, sharing, etc.). Pictures for local profiles are read using XamReadTile(XTILETYPE_GAMER_TILE[_SMALL], ...).  See the notes above about permissions and local profiles. Pictures for remote profiles are read using XamReadTileEx(XTILETYPE_GAMER_PICTURE_BY_KEY), passing the key that was returned from XamUserReadProfileSettings(XPROFILE_GAMERCARD_PICTURE_KEY, ...). Message List The initial message list doesn t show gamer pictures, but when a message is opened the sender s gamercard is displayed.  This falls into the Common Gamercard scenario. Dashboard Gamercards Sashboard gamercards use LiveCommon. I think the following is wrong.  The dash tile cache may be for other tiles types like achievements and games. The dashboard gamercards use a dashboard-specific cache of gamer pictures.  Only local profiles of signed in users are read, therefore the picture is requested by user index.  The dashboard wants a personal picture if available and the public picture if not.  This is accomplished using XamReadTile(XTILETYPE_GAMER_TILE[_SMALL], ...) passing the user index. Gamer Picture Selection Gamer picture selection on the client always reads locally awarded and downloaded pictures.  The scene must be able to force the read of a public picture so that the user can change it even if they already have a personal picture. The public picture can be read using XamReadTile(XTILETYPE_LOCAL_GAMER_TILE[_SMALL], ...).  The personal picture can be read using XamReadTile(XTILETYPE_GAMER_TILE[_SMALL], ...).  Note that if the profile does not have a personal picture this will still return the public picture.  There is no way to retrieve just the personal picture without having XamReadTile fall back to the public picture. Public API (Titles) The public APIs don t have a choice as to which picture type to read.  If a personal picture is available and the user is allowed to see it then it is returned, else the public picture is returned.  There is no way to force one or the other. Pictures for local profiles are read using XamReadTile(XTILETYPE_GAMER_TILE[_SMALL], ...). Pictures for remote profiles are read using XamReadTileEx(XTILETYPE_GAMER_PICTURE_BY_KEY), passing the key that was returned from XUserReadProfileSettings(XPROFILE_GAMERCARD_PICTURE_KEY, ...). The XTL code that is included in XDKs before April 2006 s cannot read personal pictures.  Titles that link with libraries from the March 2006 XDK or before will only ever read public pictures for remote profiles. Other Notes Account recovery handles both public and personal pictures using the sync code.  When the picture settings come down the appropriate images are read and applied to the profile. Syncing Delay Profile settings (like the gamer picture keys and images) aren't synced immediately upon changing.  The system batches up the changes and sync the settings 1 minute after they're changed.  This could be confusing for something like motto or picture if you tell your fiend to check it out immediately.  Or if you change a setting and immediately log off. If this is causing pain I could look at performing a sync when the system UI goes away (or ~5 seconds after it goes away, actually). Caching The friends list caches a gamer s picture key until the friends apps is reloaded.  So a tile will not be loaded dynamically if a friend is sitting in the friends app.  Close and reopen and the key will be reread and the update tile will appear. Microsoft Confidential. Unpublished work.   Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  c^cYcT j[jI[j[ {s{sokckck_[W[OK[ gd\?. gd\?. TXTPT6 gdZb\ gd-R&
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\test\XKDC Test Data.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Kevin Goodier Xbox Live Test Plan Template.dot Kevin Goodier Microsoft Office WordQFU5% hS^faID="{01C789EF-B064-4B11-969A-C15EBE628C86}" Document=ThisDocument/&H00000000 Module=NewMacros Name="Project" HelpContextID="0" VersionCompatible32="393222000" CMG="878561A5E1BDABC1ABC1ABC1ABC1" DPB="5557B3F34FC050C050C0" GC="2321C5C992CA92CA6D" [Host Extender Info] &H00000001={3832D640-CF90-11CF-8E43-00A0C911005A};VBE;&H00000000 [Workspace] ThisDocument=0, 0, 0, 0, C NewMacros=22, 29, 1338, 781, CThisDocument NewMacrosMacro recorded 6/16/2004 by Kevin Goodier Project.NewMacros.BoldTestDesc  BoldTestDesc Macro  Macro recorded 6/16/2004 by Kevin Goodier Attribut e VB_Nam e = "New Macros" Sub Bol dTestDes`c() Briptio  reco rded 6/1 6/2004 b y Kevin  Goodier TProcDat `Invoke`_Func m.Find .ClearFo rmatting With   .Text Repla cement 1ward &Wrap tchCas WholeW Wildc SoundsLi pEnd  \E8xec y Unit:= wdLine,  Extend @8wdTpogglAttribut e VB_Nam e = "Thi sDocumen 1Templa teProjec hGlobaBl Cre atabl Pr@edecla BEx0pose $Cust0omizWin16 Win32 Project1 stdole Project- ThisDocument< _Evaluate TemplateProject Office Module1b NewMacros BoldTestDesc SelectionZ Findn ClearFormatting Replacement Forward WrapWy wdFindAskt MatchCase MatchWholeWord MatchWildcards MatchSoundsLike MatchAllWordForms ExecuteY EndKey5 wdLine Extend? wdExtend FontU wdToggle Documentj*\CC:\xonlinemain\private\doc\common\test\Xbox Live Test Plan Template.dotrU ThisDocument NewMacros Project C:\PROGRA~1\COMMON~1\MICROS~1\VBA\VBA6\VBE6.DLL C:\Program Files\Microsoft Office\OFFICE11\MSWORD.OLB C:\WINDOWS\System32\stdole2.tlb stdole C:\Program Files\Common Files\Microsoft Shared\OFFICE11\MSO.DLL Office BoldTestDescMacro recorded 6/16/2004 by Kevin Goodier Project.NewMacros.BoldTestDesc_Project \G{00020 0046}# 2.0#0#C: \WINDOWS \System3 e2.tlb #OLE Aut omation Tem plate linemain \priv oc\commo n\test\X box Live  Plan =.dot8 &8..\ Offic DF8D04C- 5BFA-101@B-BDE5 ram File rosoft S hared\OF FICE11\M SO.DLL#G & 11.0 O @Dbrary Document(G !(:4"B NewMaSummary  PAGEREF _Toc88220264 \h   HYPERLINK \l "_Toc88220265"  Sites  PAGEREF _Toc88220265 \h   HYPERLINK \l "_Toc88220266"  Services  PAGEREF _Toc88220266 \h   HYPERLINK \l "_Toc88220267"  Service instances  PAGEREF _Toc88220267 \h   HYPERLINK \l "_Toc88220268"  Title versions  PAGEREF _Toc88220268 \h   HYPERLINK \l "_Toc88220269"  Users  PAGEREF _Toc88220269 \h   HYPERLINK \l "_Toc88220270"  User restrictions  PAGEREF _Toc88220270 \h   HYPERLINK \l "_Toc88220271"  User grants  PAGEREF _Toc88220271 \h  Summary Sites t_sites Site 7047 uses old authdata2 version, representing a legacy LSP site. i_site_id vc_ip i_authdata_version 0.0.0.45 0.0.0.46 0.0.0.47 Services t_services Service 8010 will use a site with authdata2. i_service_id vc_description i_machine_only xkt8001 xkt8002 xkt8003 xkt8004 xkt8005 xkt8006 xkt8007 xkt8008 xkt8009 xkt8010 xkt8011 Service instances t_service_instances Site 8010 specifies a site that uses authdata2.   i_service_id i_title_id t_title_version i_title_region i_site_id i_port i_service_available 0xFFC0FE00 0xFFC0FE00 0xFFC0FE00 0xFFBEEF21 0xFFBEEF21 0xFFBEEF21 0xFFBEEF21 Title versions t_title_versions i_title_id i_base_version i_update_version i_beta_version 0xFFC0FE00 0xFFBEEF00 0xFFBEEF01 0xFFBEEF01 0xFFBEEF01 0xFFBEEF02 0xFFBEEF02 0xFFBEEF02 2147483647 2147483647 2147483647 0xFFBEEF02 -2147483648 -2147483648 -2147483648 0xFFBEEF02 0xFFBEEF03 0xFFBEEF04 2147483646 2147483647 2147483647 0xFFBEEF04 2147483647 2147483647 2147483647 0xFFBEEF04 -2147483648 -2147483647 -2147483647 0xFFBEEF04 -2147483647 -2147483647 -2147483647 0xFFBEEF04 0xFFBEEF05 2147483647 -2147483648 -2147483648 0xFFBEEF06 0xFFBEEF06 0xFFBEEF06 0xFFBEEF06 0xFFBEEF06 0xFFBEEF07 0xFFBEEF07 0xFFBEEF08 0xFFBEEF08 0xFFBEEF09 0xFFBEEF0A 0xFFBEEF0A 0xFFBEEF0B 0xFFBEEF0B 0xFFBEEF0B 0xFFBEEF0C 0xFFBEEF0C 0xFFBEEF0C 0xFFBEEF0D 0xFFBEEF0E 0xFFBEEF0E 0xFFBEEF0F 0xFFBEEF20 0xFFBEEF21 0xFFBEEF21 0xFFBEEF21 0xFFBEEF21 0xFFBDEF01 0xFFBDEF01 0xFFBDEF02 Users t_users vc_gamertag bi_machine_puid ti_country_id si_ticket_flags i_tier_id i_parental_control_group_id xktuser7a $puid(mxktuser7a) xktuser7b $puid(mxktuser7b) xktuser7c $puid(mxktuser7c) xktuser7d $puid(mxktuser7d) xkt space $puid(mxkt space) xktcntry53 $puid(mxktcntry53) xktcntry110 $puid(mxktcntry110) xktcntry1 $puid(mxktcntry1) xkttflag1 $puid(mxkttflag1) xkttflag2 $puid(mxkttflag2) xkttflag4 $puid(mxkttflag4) xkttflag5 $puid(mxkttflag5) xkttflag7 $puid(mxkttflag7) xkttflag9 $puid(mxkttflag9) xkttflag130 $puid(mxkttflag130) xktactrsmnow $puid(mxktactrsmnow) xktactrsmtmrw $puid(mxktactrsmtmrw) xktactrsmyest $puid(mxktactrsmyest) xktactrsmfvr $puid(mxktactrsmfvr) xktvocrsmnow $puid(mxktvocrsmnow) xktvocrsmtmrw $puid(mxktvocrsmtmrw) xktvocrsmyest $puid(mxktvocrsmyest) xktvocrsmfvr $puid(mxktvocrsmfvr) xktnamechng $puid(mxktnamechng) xkttosbefore $puid(mxkttosbefore) xkttosexact $puid(mxkttosexact) xkttosafter $puid(mxkttosafter) xktbilstatfals $puid(mxktbilstatfals) xktbilstatfail $puid(mxktbilstatfail) xktsubnone $puid(mxktsubnone) xktsub1 $puid(mxktsub1) xktsub2 $puid(mxktsub2) xktsub3 $puid(mxktsub3) xktsub4 $puid(mxktsub4) xktsub5 $puid(mxktsub5) xktsuball $puid(mxktsuball) xktsub1nobase $puid(mxktsub1nobase) xktsubx2 $puid(mxktsubx2) xktsub123 $puid(mxktsub123) xktsub23 $puid(mxktsub23) xktsubx23 $puid(mxktsubx23) xktsubx2x3 $puid(mxktsubx2x3) xktusert1a $puid(mxktusert1a) xktusert1b $puid(mxktusert1b) xktusert1c $puid(mxktusert1c) xktusert1d $puid(mxktusert1d) xktusert2a $puid(mxktusert2a) xktusert2b $puid(mxktusert2b) xktusert2c $puid(mxktusert2c) xktusert2d $puid(mxktusert2d) xktusert3a $puid(mxktusert3a) xktusert3b $puid(mxktusert3b) xktusert3c $puid(mxktusert3c) xktusert3d $puid(mxktusert3d) xktgrantedt2 $puid(xktgrantedt2) xktrestrictedt2 $puid(xktrestrictedt2) User restrictions t_user_privilege_restrictions Restrict the three privileges MULTIPLAYER_EVERYONE, CONTENT_PURCHASE, and VOICE_EVERYONE for the following users (xktuser??): Xenon user B in tier 1 Xenon user D in tier 1 Xenon user B in tier 2 Xenon user D in tier 2 Xenon user B in tier 3 Xenon user D in tier 3 bi_user_puid ti_privilege_id vc_restrictor [vc_name] $puid(xktusert1b) xktusert1b ALLOW_MULTIPLAYER_EVERYONE $puid(xktusert1b) xktusert1b ALLOW_CONTENT_PURCHASE $puid(xktusert1b) xktusert1b ALLOW_VOICE_EVERYONE $puid(xktusert1d) xktusert1d ALLOW_MULTIPLAYER_EVERYONE $puid(xktusert1d) xktusert1d ALLOW_CONTENT_PURCHASE $puid(xktusert1d) xktusert1d ALLOW_VOICE_EVERYONE $puid(xktusert2b) xktusert2b ALLOW_MULTIPLAYER_EVERYONE $puid(xktusert2b) xktusert2b ALLOW_CONTENT_PURCHASE $puid(xktusert2b) xktusert2b ALLOW_VOICE_EVERYONE $puid(xktusert2d) xktusert2d ALLOW_MULTIPLAYER_EVERYONE $puid(xktusert2d) xktusert2d ALLOW_CONTENT_PURCHASE $puid(xktusert2d) xktusert2d ALLOW_VOICE_EVERYONE $puid(xktusert3b) xktusert3b ALLOW_MULTIPLAYER_EVERYONE $puid(xktusert3b) xktusert3b ALLOW_CONTENT_PURCHASE $puid(xktusert3b) xktusert3b ALLOW_VOICE_EVERYONE $puid(xktusert3d) xktusert3d ALLOW_MULTIPLAYER_EVERYONE $puid(xktusert3d) xktusert3d ALLOW_CONTENT_PURCHASE $puid(xktusert3d) xktusert3d ALLOW_VOICE_EVERYONE User grants t_user_privilege_grants Currently, tier 2 (silver) and tier 3 (gold) both offer all privileges, so granting is kind of pointless.  Tier 1 (bronze) has nothing defined yet, so its behavior is probably strange.  Let s see what happens when we grant privileges.. Grant the three privileges FRIENDS_ADD, MESSAGING_FRIENDS_ONLY, and VOICE_FRIENDS_ONLY for the following users (xktuser??): Xenon user C in tier 1 Xenon user D in tier 1 Xenon user C in tier 2 Xenon user D in tier 2 Xenon user C in tier 3 Xenon user D in tier 3 bi_user_puid ti_privilege_id vc_grantor [vc_name] $puid(xktusert1c) xktusert1c ALLOW_FRIENDS_ADD $puid(xktusert1c) xktusert1c ALLOW_MESSAGING_FRIENDS_ONLY $puid(xktusert1c) xktusert1c ALLOW_VOICE_FRIENDS_ONLY $puid(xktusert1d) xktusert1d ALLOW_FRIENDS_ADD $puid(xktusert1d) xktusert1d ALLOW_MESSAGING_FRIENDS_ONLY $puid(xktusert1d) xktusert1d ALLOW_VOICE_FRIENDS_ONLY $puid(xktusert2c) xktusert2c ALLOW_FRIENDS_ADD $puid(xktusert2c) xktusert2c ALLOW_MESSAGING_FRIENDS_ONLY $puid(xktusert2c) xktusert2c ALLOW_VOICE_FRIENDS_ONLY $puid(xktusert2d) xktusert2d ALLOW_FRIENDS_ADD $puid(xktusert2d) xktusert2d ALLOW_MESSAGING_FRIENDS_ONLY $puid(xktusert2d) xktusert2d ALLOW_VOICE_FRIENDS_ONLY $puid(xktusert3c) xktusert3c ALLOW_FRIENDS_ADD $puid(xktusert3c) xktusert3c ALLOW_MESSAGING_FRIENDS_ONLY $puid(xktusert3c) xktusert3c ALLOW_VOICE_FRIENDS_ONLY $puid(xktusert3d) xktusert3d ALLOW_FRIENDS_ADD $puid(xktusert3d) xktusert3d ALLOW_MESSAGING_FRIENDS_ONLY $puid(xktusert3d) xktusert3d ALLOW_VOICE_FRIENDS_ONLY Microsoft Confidential. Unpublished work.   2004 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2004 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  uqu^PGP gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3 gd(<3
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\test\XKDC Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Kevin Goodier Xbox Live Test Plan Template.dot Kevin Goodier Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags PlaceName urn:schemas-microsoft-com:office:smarttags PlaceType urn:schemas-microsoft-com:office:smarttags address urn:schemas-microsoft-com:office:smarttags Street hS^faID="{01C789EF-B064-4B11-969A-C15EBE628C86}" Document=ThisDocument/&H00000000 Module=NewMacros Name="Project" HelpContextID="0" VersionCompatible32="393222000" CMG="878561A5E1BDABC1ABC1ABC1ABC1" DPB="5557B3F34FC050C050C0" GC="2321C5C992CA92CA6D" [Host Extender Info] &H00000001={3832D640-CF90-11CF-8E43-00A0C911005A};VBE;&H00000000 [Workspace] ThisDocument=0, 0, 0, 0, C NewMacros=22, 29, 1338, 781, CThisDocument NewMacrosMacro recorded 6/16/2004 by Kevin Goodier Project.NewMacros.BoldTestDesc  BoldTestDesc Macro  Macro recorded 6/16/2004 by Kevin Goodier Attribut e VB_Nam e = "New Macros" Sub Bol dTestDes`c() Briptio  reco rded 6/1 6/2004 b y Kevin  Goodier TProcDat `Invoke`_Func m.Find .ClearFo rmatting With   .Text Repla cement 1ward &Wrap tchCas WholeW Wildc SoundsLi pEnd  \E8xec y Unit:= wdLine,  Extend @8wdTpogglAttribut e VB_Nam e = "Thi sDocumen 1Templa teProjec hGlobaBl Cre atabl Pr@edecla BEx0pose $Cust0omizWin16 Win32 Project1 stdole Project- ThisDocument< _Evaluate TemplateProject Office Module1b NewMacros BoldTestDesc SelectionZ Findn ClearFormatting Replacement Forward WrapWy wdFindAskt MatchCase MatchWholeWord MatchWildcards MatchSoundsLike MatchAllWordForms ExecuteY EndKey5 wdLine Extend? wdExtend FontU wdToggle Documentj*\CC:\xonlinemain\private\doc\common\test\Xbox Live Test Plan Template.dotrU ThisDocument NewMacros Project C:\PROGRA~1\COMMON~1\MICROS~1\VBA\VBA6\VBE6.DLL C:\Program Files\Microsoft Office\OFFICE11\MSWORD.OLB C:\WINDOWS\System32\stdole2.tlb stdole C:\Program Files\Common Files\Microsoft Shared\OFFICE11\MSO.DLL Office BoldTestDescMacro recorded 6/16/2004 by Kevin Goodier Project.NewMacros.BoldTestDesc_Project \G{00020 0046}# 2.0#0#C: \WINDOWS \System3 e2.tlb #OLE Aut omation Tem plate linemain \priv oc\commo n\test\X box Live  Plan =.dot8 &8..\ Offic DF8D04C- 5BFA-101@B-BDE5 ram File rosoft S hared\OF FICE11\M SO.DLL#G & 11.0 O @Dbrary Document(G !(:4"B NewMa" \h \z \u   HYPERLINK \l "_Toc99782189"  Table of Contents  PAGEREF _Toc99782189 \h   HYPERLINK \l "_Toc99782190"  Summary  PAGEREF _Toc99782190 \h   HYPERLINK \l "_Toc99782191"  Schedule  PAGEREF _Toc99782191 \h   HYPERLINK \l "_Toc99782192"  Goals  PAGEREF _Toc99782192 \h   HYPERLINK \l "_Toc99782193"  Non-Goals  PAGEREF _Toc99782193 \h   HYPERLINK \l "_Toc99782194"  Related Documents  PAGEREF _Toc99782194 \h   HYPERLINK \l "_Toc99782195"  Overview  PAGEREF _Toc99782195 \h   HYPERLINK \l "_Toc99782196"  What a KDC does  PAGEREF _Toc99782196 \h   HYPERLINK \l "_Toc99782197"  Xbox KDC specifics  PAGEREF _Toc99782197 \h   HYPERLINK \l "_Toc99782198"  Functional Testing  PAGEREF _Toc99782198 \h   HYPERLINK \l "_Toc99782199"  Summary  PAGEREF _Toc99782199 \h   HYPERLINK \l "_Toc99782200"  New Test Cases for M1 Milestone  PAGEREF _Toc99782200 \h   HYPERLINK \l "_Toc99782201"  8.2.1 Configuration Database  PAGEREF _Toc99782201 \h   HYPERLINK \l "_Toc99782202"  8.2.2 Server Consolidation  PAGEREF _Toc99782202 \h   HYPERLINK \l "_Toc99782203"  New Test Cases for M2 Milestone  PAGEREF _Toc99782203 \h   HYPERLINK \l "_Toc99782204"  8.3.1 All Tests  PAGEREF _Toc99782204 \h   HYPERLINK \l "_Toc99782205"  8.3.2 Additional services without auto-discovery  PAGEREF _Toc99782205 \h   HYPERLINK \l "_Toc99782206"  8.3.3 Privileges and auto-discovery  PAGEREF _Toc99782206 \h   HYPERLINK \l "_Toc99782207"  8.3.4 New Authdata version 3 in ticket  PAGEREF _Toc99782207 \h   HYPERLINK \l "_Toc99782208"  8.3.5 Alternate title IDs  PAGEREF _Toc99782208 \h   HYPERLINK \l "_Toc99782209"  8.3.6 Parental controls  PAGEREF _Toc99782209 \h   HYPERLINK \l "_Toc99782210"  New Test Cases for M3 Milestone  PAGEREF _Toc99782210 \h   HYPERLINK \l "_Toc99782211"  8.4.1 Per-user and per-offer privilege grants  PAGEREF _Toc99782211 \h   HYPERLINK \l "_Toc99782212"  8.4.2 Xenon Service Request/Address 2  PAGEREF _Toc99782212 \h   HYPERLINK \l "_Toc99782213"  8.4.3 Back-compat issues  PAGEREF _Toc99782213 \h   HYPERLINK \l "_Toc99782214"  8.4.4 Parental controls  PAGEREF _Toc99782214 \h   HYPERLINK \l "_Toc99782215"  8.4.5 Tiers  PAGEREF _Toc99782215 \h   HYPERLINK \l "_Toc99782216"  8.4.6 Alternate title ids  PAGEREF _Toc99782216 \h   HYPERLINK \l "_Toc99782217"  8.4.7 Auto-discovery of services for LSP titles  PAGEREF _Toc99782217 \h   HYPERLINK \l "_Toc99782218"  8.4.8 Extra tests  PAGEREF _Toc99782218 \h   HYPERLINK \l "_Toc99782219"  Existing Reusable Test Cases  PAGEREF _Toc99782219 \h   HYPERLINK \l "_Toc99782220"  Functional XKDC  PAGEREF _Toc99782220 \h   HYPERLINK \l "_Toc99782221"  Functional XKDC Auth  PAGEREF _Toc99782221 \h   HYPERLINK \l "_Toc99782222"  Functional XKDC Auto Update  PAGEREF _Toc99782222 \h   HYPERLINK \l "_Toc99782223"  Functional XKDC Policy  PAGEREF _Toc99782223 \h   HYPERLINK \l "_Toc99782224"  Functional XKDC Sites  PAGEREF _Toc99782224 \h   HYPERLINK \l "_Toc99782225"  Catastrophic Failure Test Cases  PAGEREF _Toc99782225 \h   HYPERLINK \l "_Toc99782226"  Stress Testing  PAGEREF _Toc99782226 \h   HYPERLINK \l "_Toc99782227"  Revision History  PAGEREF _Toc99782227 \h   HYPERLINK \l "_Toc99782228"  KDC Configuration Settings  PAGEREF _Toc99782228 \h  Summary The Key Distribution Center (KDC   combination of XKDC and ASKDC) server is responsible for authenticating clients and issuing security tickets upon request.  The tickets are encrypted and grant access to a particular Xbox Live service.   A ticket is needed to talk to a service through the Security Gateway (SG). M1 Milestone The XMAC and XKDC services are being combined into one server cluster.  There will be minimal changes to the service code itself but there will be big changes in the way configuration is being loaded.  With the addition of the configuration database, the XKDC service will load its configuration information from a configuration database instead of a local initialization file.  The XMACS and XKDC components will also now rely on the XMOSS server to load its encrypted service keys.  With out this XMOSS service, the XKDC and XMACS will fail to initialize properly.  This test plan will document my approach to make sure these changes will be well tested for eventual production deployment. M2 Milestone Update to M1: MOSS was not implemented and is currently scheduled for M3.  Service key decryption remains the same. For M2, the KDC is being modified to support finer-grained authorization to better support parental controls and new features.  The KDC will support the notion of privileges, which can represent a subset of collection of services.  For instance, XE_PRIVILEGE_ONLINE_GAMEPLAY represents all basic services needed for online multiplayer gameplay.  To support these changes, several new database tables are being introduced. The KDC will allow implicit services to be granted to a user; that is, all services that a user has permission to can be granted in a ticket, as compared to the Xbox1 method of having the client explicitly request each service. The KDC will also support additional services, in addition to the privileges, in each ticket.   All of these changes are for Xenon only; the KDC will retain 100% backwards compatibility with Xbox1 clients and LSP services behind existing SGs.  M3 Milestone The Xenon XKDC now distinguishes between Xbox clients, Xenon clients, and Xenon clients running in back-compat mode.  It notes this distinction in a flag in the authdata ticket, which the SG will consume.  There is also UODB work being done to add a bronze tier to the system with dummy values, and some lingering M2 work items are being completed, such as per-offer and per-title privilege grants.  LiveTitleIds and AlternateServiceTitleIds have been completed.  The Xenon TGS request implemented in M2 has been duplicated into a second versin, which has a smaller Service Result to allow it to pass through all routers.  The M2 version will be slowly phased out and replaced entirely with the M3 version. Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M1 Milestone Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases.  There is no required stress testing for M1 so the  Test Stress Code Complete  and  Test Stress Complete  deliverables do not apply to this milestone. M2 Milestone 95% positive cases passing and 95% negative cases passing.  There is no required stress testing. M3 Milestone 95%+ positive cases passing and 95%+ negative cases passing.  A baseline stress TPS measurement will be performed.  Target TPS numbers have not been defined for this milestone. Goals This section lists what will be covered for each milestone. M1 Milestone New test cases to validate the new configuration settings being pulled from the configuration database vs. the previous local initialization file method. Test use of XMOSS server for encrypted key retrieval. Simultaneous execution of XMAC and XKDC tests to validate server consolidation. Run old functional and stress tests to verify that there have been no behavior changes in server since the previous release. M2 Milestone Run old functional and stress tests to verify that there have been no behavior changes in server since the previous release.  This is particularly important since there are significant Xenon changes but Xbox1 should still work. Tests covering new features added in M2. Test support for authdata2 and authdata3.  The KDC will return authdata3 except for clients that request services behind old SG sites (EA, LSP), in which case it has to support authdata2 still. M3 Milestone New test for the Xenon client in back-compat mode flag.  Tests for per-offer and per-title privilege grants. Tests for distinction between bronze and silver tiers to make sure the KDC grants the proper services and privileges for a user in each tier.   Non-Goals This section lists what will not be covered for each milestone. M1 Milestone M2 Milestone Work for per-offer and per-title privilege grants was not completed.  Only the silver tier has been added, so it is impossible to test the proper behavior of tiers.   M3 Milestone Related Documents $corext\private\doc\common\Server Consolidation.doc -- XMACS and XKDC are being combined onto one server. $corext\private\doc\common\config\CommonConfigDevSpec.doc   configuration database replaces .ini files. $corext\private\doc\common\xenon-m1-setup.doc   changes to how setup is done across the service. $corext\private\doc\server\kdc\Xbox KDC Class Overview.doc   old dev document.  HYPERLINK "http://sts/Xbox_Online/Test/XKDC Server Test Plan.doc"  http://sts/Xbox_Online/Test/XKDC Server Test Plan.doc  -- The earlier version of the XKDC test plan. Overview What a KDC does As part of the Kerberos protocol, a KDC is responsible for generating and issuing security tickets upon request from a client.  The tickets are encrypted with the requester s key and are thus only available to it.  There are two main types of tickets that can be issued: Ticket-Granting Tickets and Service Tickets. Ticket-Granting Tickets (TGT) A TGT is a ticket that authenticates a client and grants access to get security tickets (ST).  A client requests a TGT from a TGT-provider KDC (AS-REQ).  The TGT is returned (AS-REP), encrypted with the key of the KDC that the TGT is intended for and encrypted on top of that with the key of the client, along with a session key.  The session key is also stored inside the TGT.  The client can not decrypt the TGT because it does not know the target KDC s key.  The TGT can be presented to the targeted KDC as part of a request to get STs that the client is authorized for. Service Tickets (ST) A ST is a ticket that is used to grant access to a particular service.  To get a ST for a particular service from a target KDC (TGS-REQ), the client must send the TGT encrypted with the target KDC s key along with a timestamp encrypted with the session key to the KDC.  The KDC will decrypt the TGT to get the session key, use that to decrypt the timestamp, and check that to see if it is within a range of the current time.  The KDC then knows whether the TGT is legit and, using the information in the TGT, checks to see if it should grant the user access to the requested services.  For each authorized service the KDC sends the client a ST along with a timestamp, encrypted with the session key (TGS-REP).  The ST can then be presented in a similar way to the TGT to a service to authenticate against that service. Kerberos relies on the fact that all of the servers and clients have loosely synchronized clocks.  This is to prevent replay attacks and to enforce ticket expirations to work correctly.  Although the servers  clocks need to always match, the client can always get the correct time from a server and use that time for further communication with that server. Xbox KDC specifics The ASKDC handles the AS (REQ/REP) cycle and grants the authenticated user a cross-realm (xbox.com) TGT.  The XKDC handles the TGS (REQ/REP) cycle of Kerberos authentication.  There are three types of TGTs that the ASKDC can grant for use on the XKDC: Machine TGTs, User TGTs and Combined-TGTs. User and Machine TGTs When an Xbox wants to authenticate a user or itself, it sends an AS-REQ to the ASKDC and receives a TGT which can be used to validate that user or machine and receive a Combined-TGT.  These TGTs expire after one week and are cached on the Xbox until they expire or the XKDC informs the Xbox that the cached tickets are no longer good. Combined-TGTs One machine TGT and between zero and four user TGTs can be sent to a Passport TGS to be combined into an Combined-TGT.  This TGT contains the PUIDs of the machine and users  Passport accounts, encrypted with the XKDC key.  A new Combined-TGT is necessary any time the users in a game change but several different Combined-TGTs may be cached on a Xbox to reduce server load and improve client performance.  These Combined-TGTs expire after one week and are cached on the Xbox until they expire or the XKDC informs the Xbox that the cached tickets are no longer good. Xbox STs The Combined-TGT is sent to the XKDC in a service request (SR).  The request contains a list of which services the game desires.  The XKDC validates the ticket and validates the machine s and users  rights to those services by checking with the Users and Offerings Database (UODB).  The XKDC sends the machine account, list of user accounts, and the list of services being requested to the UODB and the UODB returns back the list of services that the users have access to.  Users will be authorized to a particular service if any valid, unblocked user has access to that service.  The one exception is the UACS.  If the machine account is valid then permission to use the UACS is always granted when requested.  A security ticket (ST) is needed to talk through a Security Gateway (SG) to a service and multiple services may lie behind a particular SG.  One ST is returned to the Xbox for each SG. Functional Testing Summary As we move into Xenon, it is important the KDC maintains 100% backward compatibility with Xbox 1 clients.  This means new tests should be created where necessary and old tests left alone. For milestone M1, we have the additional goals of testing: Integrity of XMACS/XKDC server consolidation.  The components remain separate but will run on the same server.  We will test that the XKDC does not respond to XMACS requests.  Use of XMOSS for master key retrieval. [not done for M1] Use of Configuration Database for all settings. For milestone M2: New Xenon service request for Tgs request to XKDC.  This is in addition to the old Xbox service request format, which will still be supported. Additional services supported, up to 32 now. Privileges and services with implicit granting based on a user s tier. New authdata v3 in encrypted ticket returned to client. Backwards support for old authdata (2), needed for legacy LSP sites.  Only returned to clients who request a service behind an older SG site.  Alternate TitleIDs Parental controls For milestone M3: Xenon client in back-compat mode flag in authdata ticket.  Detected by comparing machine PUID (to identify Xenon client) and type of TGS request (whether Xenon TGS or Xbox TGS request).   New authorization steps exposed by per-offer and per-title privilege grants.   Parentally controlled users. Bronze tier privileges. Auto-discovery of LSP titles. LiveTitleId and LiveServiceTitleId additions, to allow for alternate LiveTitleIds and alternate LiveServiceTitleIds, which are only used for the given service. New Test Cases for M1 Milestone Configuration Database Each individual setting will be tested as well as global behavior. CONFIGDB_SETTINGS: For each setting in the configuration database, the following three tests will be performed: Initialize   Using the management commands, verify that the setting matches what is in the configuration database after server has initialized.   Reconfigure   Using the management commands, snapshot the current setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take effect (only applies to settings requiring a restart). Undo   Using the management commands, snapshot the current setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect.  Now change the setting back to the original value and using the management commands, verify that it is set back to the original value and does not require a restart of the service. Implementation note: Reconfigure and Undo can be consolidated into one test. The settings have been moved to Appendix   REF _Ref87931284 \r \h   \* MERGEFORMAT  CONFIGDB_NO_CONNECTION: No connection available to configuration server.  KDC should raise an error and entering a polling loop, waiting for a response. Server Consolidation Send packets that would normally go to the XMACS to the XKDC address (ip and port).  These should all be dropped by the XKDC. New Test Cases for M2 Milestone After signing in users and the machine, the client sends a SERVICE_REQUEST packet (KRB_TGS_REQ) to the KDC to request services.  We now have an Xbox version and a Xenon version of this packet and its reply.  Red lines indicate new items in the struct.  In addition, the number of single-byte service IDs has increased from 12 to 32 (XONLINE_XE_MAX_BYTE_SERVICEIDS). Client to KDC: typedef struct _XKERB_PA_XENON_SERVICE_REQUEST     //#define XONLINE_SERVICE_REQUEST_VERSION 3     WORD                    wServiceRequestVersion;     WORD                    wServiceRequestSize;     XBOX_LIBRARY_VERSION    clientVersion;     DWORD                   dwTitleID;     DWORD                   dwTitleVersion;     DWORD                   dwTitleRegion;     DWORD                   dwConsoleRegion;     DWORD                   dwMediaID;     WORD                    wLanguageID;     WORD                    wAutoDiscoverServices;     ULONGLONG               qwUserID[XONLINE_MAX_LOGON_USERS];     WORD                    wNumByteServices;     WORD                    wNumDwordServices;     BYTE                    bServiceID[XONLINE_XE_MAX_BYTE_SERVICEIDS];     DWORD                   dwServiceID[XONLINE_MAX_DWORD_SERVICEIDS]; } XKERB_PA_XENON_SERVICE_REQUEST, *PXKERB_PA_XENON_SERVICE_REQUEST; KDC to client: typedef struct _XKERB_PA_XENON_SERVICE_ADDRESS     HRESULT     hr;     HRESULT     hrUser[XONLINE_MAX_LOGON_USERS];     DWORD       dwUserFlags[XONLINE_MAX_LOGON_USERS];     DWORD       dwBwLimit;     DWORD       dwReserved[RESERVED_DWORDS_IN_XBOX_PA];     IN_ADDR     siteIPAddress;     DWORD       dwUserPrivileges[XONLINE_MAX_LOGON_USERS][XONLINE_NUM_PRIVILEGE_DWORDS];     WORD        wNumServices;     XKERB_PA_XBOX_SINGLE_BYTE_SERVICE_RESULT    byteServiceResult[XONLINE_XE_MAX_BYTE_SERVICEIDS];     XKERB_PA_XBOX_SERVICE_RESULT                dwordServiceResult[XONLINE_MAX_DWORD_SERVICEIDS];     DWORD       dwAltTitleID[XONLINE_MAX_ALTERNATE_TITLE_ID];     XKERB_PA_XBOX_SERVICE_ALTERNATE_TITLE_ID serviceAltTitleIDs[XONLINE_MAX_SERVICE_ALTERNATE_TITLE_ID]; } XKERB_PA_XENON_SERVICE_ADDRESS, *PXKERB_PA_XENON_SERVICE_ADDRESS; There is also a new authdata version (3).  The authdata is returned to the client by the KDC in an encrypted ticket.  The client cannot decrypt this information.  It sends the ticket to the SG, which can decrypt it, and uses it, for instance, to reply to SpiInfo requests from the servers.  In the test version of our kerbclient.dll, the decryption keys have been hardcoded, so our tests can decrypt this authdata structure.   typedef struct _XKERB_AD_XENON     #define XONLINE_XENON_AUTHDATA_VERSION 3     WORD                     wAuthDataVersion;     WORD                     wAuthDataSize;     XBOX_LIBRARY_VERSION     clientVersion;     DWORD                    dwTitleID;     DWORD                    dwTitleVersion;     DWORD                    dwTitleRegion;     DWORD                    dwConsoleRegion;     DWORD                    dwMediaID;     WORD                     wLanguageID;     DWORD                    dwAuthDataFlags;     WORD                     wNumPrivileges;     DWORD                    dwPrivileges[XONLINE_NUM_PRIVILEGE_DWORDS];     ULONGLONG                qwXboxID;     // The high 16 bits of dwUserFlags should come from the UODB User Table.     XUID                     users[XONLINE_MAX_LOGON_USERS];     FLOAT                    afltTrustFactor[XONLINE_MAX_LOGON_USERS];     WORD                     wNumDwordServices;     DWORD                    dwServiceID[XONLINE_MAX_DWORD_SERVICEIDS];     DWORD                    dwAltTitleID[XONLINE_MAX_ALTERNATE_TITLE_ID];     BYTE                     abKey[XONLINE_KEY_LENGTH]; } XKERB_AD_XENON, *PXKERB_AD_XENON All Tests ALL TESTS: Xbox Service Request Xbox1 clients should still be able to successfully send XKERB_PA_XBOX_SERVICE_REQUEST packets.  All existing KDC tests should pass.  These are detailed in the Existing Reusable Test Cases section below. ALL TESTS: Xenon Service Request The existing set of KDC service request tests, as enumerated in the Existing Reusable Test Cases section below, should be modified to include sending a XKERB_PA_XENON_SERVICE_REQUEST as well.   Issues: There exists a test that requests 17 services.  For the Xbox story, this will fail, which is what the test expects to happen.  For Xenon, however, this will succeed, as we now support up to 32 services.   I suspect there will be other cases that succeed for an Xbox client and fail for Xenon.  This will probably be for the negative cases, where we expect failure for Xbox, but it will end up succeeding for Xenon.  I will either special-case these tests in the dynamic Xenon test case generation code or move them into an Xbox-specific group that can be special-cased out.  Additional services without auto-discovery Our previous limit was 16 services.  This has been expanded to 31 services.  Service ID 0 is considered invalid, which is why we re limited to 31 and not 32.  The TGS request actually supports 32 single byte services plus 4 dword services, but the SG does not support this many.   All test cases in this section will include a mix of: All valid services Some valid, some invalid services All valid with duplicates 1SubscribedService Request a single service that the user is subscribed to 1NonSubscribedService Request a single service that the user is not subscribed to 1Sub1NonSub Request 1 service a user is subscribed to and 1 service the user is not subscribed to 2Sub_DiffSites Request 2 services, user is subscribed to both, but they are on different sites 2Sub1NonSub_DiffSites Request 2 services user is subscribed to, 1 service user is not subscribed to on a different site 0Services0Dwords  Request 0 services and 0 dword services.  Invalid. 0Services4Dwords Request 0 services and 4 dword services. 1Services0Dwords Request 1 services and 0 dword services. 1Services4Dwords Request 1 services and 4 dword services. 17Services0Dwords Request 17 services and 0 dword services. 17Services4Dwords Request 17 services and 4 dword services. MaxServices Request as many services as we can. Currently only 17 base services are defined and valid, plus we can only request 4 additional dword services, so our request is for 21 services total. AutoPlus1Extended Use auto-discovery, but also explicitly request 1 additional extended service. Privileges and auto-discovery Privileges are automatically granted to a user based on which tier a user is in.  Privileges are related to tiers based on regions (see table t_tier_region_privileges).  Privileges can also be granted and restricted individually, for instance by parental controls or customer service (see tables t_user_privilege_restrictions and t_user_privilege_grants). In the TGS Request packet, a client can specify that it wants to auto-discover all services and privileges that it has permission to access.  These tests will all use auto-discovery to verify the correct set of services and privileges are returned.  These tests will require the creation of the following users.  Gamertag Restrictions Grants xktusert1a xktusert1b 254,255 xktusert1c 251,253 xktusert1d 254,255 251,253 xktusert2a xktusert2b 254,255 xktusert2c 251,253 xktusert2d 254,255 251,253 The restricted privileges are 255 and 254.  The granted privileges are 251 and 253.  In addition, a user has been created who has every privilege restricted. Note: for M2, tiers are not usable.  We only have 1 base offer defined, which is tied to tier 2.  Thus, we can only assign users to tier 2 until we get more base offers tied to tiers.  SingleUserLogon_AllCombos The test will log in with each user (3 tiers, 4 variations in each tier, for a total of 12 logins) and verify the list of services and privileges is correct for the user as returned in the Service Address struct.   Multi2Logon_1 Log in user 2a and user 2b, set of services and privileges should equal user 2b. Multi2Logon_2 Log in user 2b and user 2c, set of services and privileges should equal user 2b. Multi2Logon_3 Log in user 2c and user 2d, set of services and privileges should equal user 2d. Multi3Logon_1 Log in user 2a and user 2b and user 2d, set of services and privileges should equal user 2b. Multi4Logon_1 Log in user 2a and user 2b and user 2c and user 2d, set of services and privileges should equal user 2b. UserWithOfferGrant Log in user with a subscription to an offer that grants a privilege not in t_tier_region_privileges.  User should get this privilege. Not implemented for M2 UserRestrictedWithOfferGrant Log in user with a subscription to an offer that grants a privilege not in t_tier_region_privileges and that the user is explicitly restricted from..  User should not get this privilege. Not implemented for M2 UserGrantedWithOfferGrant Log in user with a subscription to an offer that grants a privilege not in t_tier_region_privileges and that the user is explicitly granted access to.  User should get this privilege. Not implemented for M2 TitleGrant Log in various users with a title that grants access to a privilege not in t_tier_region_privileges.  Log in with user who is restricted from this privilege, with one who has a grant to a different service, with one who has no grants or restrictions. Not implemented for M2 New Authdata version 3 in ticket The KDC includes the authdata in an encrypted ticket sent to the client after the TGS request.  This ticket is sent along to the SG.  Using the KerbClient.dll, we can crack this ticket and examine the contents.  For M2, the KDC now sends authddata version 3 for both Xbox and Xenon clients.   Note: tests in other sections will also verify the authdata, such as the title id returned, the services specified in the bit array, the privileges in the bit array, the intersection of privileges across all users, etc.  This check is extensive.  This section specifically covers authdata-related test cases. AuthdataVersion3AsXenon Send a Xenon TGS request using autodiscovery.  Should get an authdata3 structure returned. AuthdataVersion3AsXbox Send a Xbox TGS request using a few basic services.  Should get an authdata3 structure returned. AuthdataVersion2AsXenon Send a Xenon TGS request requesting a service behind a legacy site.  Do not use auto discovery.  Should get an authdata2 structure returned. AuthdataVersion2AsXbox Send a Xbox TGS request requesting a service behind a legacy site.  Should get an authdata2 structure returned. AuthdataVersionMixedAsXenon Send a Xenon TGS request for 2 services, with 1 service behind a legacy site and 1 regular service.  Try different ordering of these 2 services, including a services above and below the legacy one.  It is expected that ordering in the request does not matter, but that the lowest service requested will be the   one.  Thus if the lowest numbered service is a regular one, we ll get authdata version 3, but if the lowest numbered service is behind a legacy site, we ll get authdata version 2. AuthdataXenonFields Send request as Xenon.  Expect to get authdata3 structure.  In the request, set the new fields: dwConsoleRegion dwMediaID wLanguageID These fields should simply be passed into the authdata that the KDC returns to the client.  Verify this is so. Alternate title IDs No work here for M2. Parental controls No work here for M2. New Test Cases for M3 Milestone Current set of users in these tests: Gamertag Restrictions Grants Xbox Key Xenon Key Dual T1 xktusert1a xktusert1b 254,255 xktusert1c 251,253 xktusert1d 254,255 251,253 xktusert1e (all) xktusert1f (all) Dual T2 xktusert2a xktusert2b 254,255 xktusert2c 251,253 xktusert2d 254,255 251,253 xktusert2e (all) xktusert2f (all) Dual T1 xktduusert1a Xbox T2 xktxbusert2a Dual T2 xktduusert2a Dual T2 Live1 Restrict xktduusert2ar Per-user and per-offer privilege grants Title id 0xFFBDEF02 grants privilege 225.  Offer id 0xFFC0FE00C0FE0001 grants privilege 224.  Users are  xktsuball xktrestrictedt2 , and  xktgrantedt2 OfferGrant Log in users who are subscribed to an offer that grants privilege 224, which is not normally granted to users. User has no grants or restrictions.  Gets 224. User is restricted from 224.  Gets none. User is granted 224.  Gets 224. TitleGrant Log in users with title 0xFFBDEF02 which grants privilege 225, which is not normally granted to users. Offer grants nothing, tier 2 user has no grants or restrictions [xktusert2a].  Gets 225. Offer grants nothing, tier 2 user has both grants and restrictions [xktusert2d].  Gets 225. Offer grants nothing, tier 1 user has no grants or restrictions [xktusert1a].  Gets 225. Offer grants nothing, tier 1 user has both grants and restrictions [xktusert1d].  Gets 225. TitleAndOfferGrant Offer grants privilege 224, title grants 225, but user is restricted from 224 and 225.  Gets neither. Offer grants privilege 224, title grants 225, user is granted 225.  Gets both. Offer grants privilege 224, title grants 225, user has no grants or restrictions.  Gets both. TitleAndOfferGrant_Multi For each user in section   REF _Ref99293537 \r \h   listed above, sign in with a title that grants a privilege and a regular title that does not.  Pair each user with the other.  Also include user xktsuball in the list. Xenon Service Request/Address 2 The Xenon XKDC has new pre-auth request and reply data types.  The previous Xenon service request and address are still supported, but will eventually be phased out before launch.   // pa-type is KRB5_PADATA_XENON_SERVICE_REQUEST2 typedef struct _XKERB_PA_XENON_SERVICE_REQUEST2     //#define XONLINE_SERVICE_REQUEST_VERSION 4     WORD                    wServiceRequestVersion;     WORD                    wServiceRequestSize;     XBOX_LIBRARY_VERSION    clientVersion;     DWORD                   dwFlashVersion;     DWORD                   dwTitleID;     DWORD                   dwTitleVersion;     DWORD                   dwTitleRegion;     DWORD                   dwConsoleRegion;     DWORD                   dwMediaID;     WORD                    wLanguageID;     WORD                    wAutoDiscoverServices;     ULONGLONG               qwUserID[XONLINE_MAX_LOGON_USERS];     WORD                    wNumByteServices;     WORD                    wNumDwordServices;     BYTE                    bServiceID[XONLINE_XE_MAX_BYTE_SERVICEIDS];     DWORD                   dwServiceID[XONLINE_MAX_DWORD_SERVICEIDS]; } XKERB_PA_XENON_SERVICE_REQUEST2, *PXKERB_PA_XENON_SERVICE_REQUEST2; This is nearly the same structure as XKERB_PA_XENON_SERVICE_REQUEST except it adds the flash version as a field.  This allows the flash (kernel, system apps, dash) to be auto-updated independently of the title.   // pa-type is KRB5_PADATA_XENON_SERVICE_ADDRESS2 typedef struct _XKERB_PA_XENON_SERVICE_ADDRESS2     HRESULT     hr;     HRESULT     hrUser[XONLINE_MAX_LOGON_USERS];     // The high 16 bits of dwUserFlags should come from the UODB User Table.     DWORD       dwUserFlags[XONLINE_MAX_LOGON_USERS];     DWORD       dwBwLimit;     IN_ADDR     siteIPAddress;     DWORD       dwUserPrivileges[XONLINE_MAX_LOGON_USERS][XONLINE_NUM_PRIVILEGE_DWORDS];     WORD        wNumServices;     XKERB_PA_XENON_SINGLE_BYTE_SERVICE_RESULT byteServiceResult[XONLINE_XE_MAX_BYTE_SERVICEIDS];     XKERB_PA_XENON_SERVICE_RESULT dwordServiceResult[XONLINE_MAX_DWORD_SERVICEIDS];     DWORD       dwLiveTitleId;     XKERB_PA_XBOX_SERVICE_ALTERNATE_TITLE_ID altLiveTitleIds[XONLINE_MAX_LIVE_ALTERNATE_TITLE_ID]; } XKERB_PA_XENON_SERVICE_ADDRESS2, *PXKERB_PA_XENON_SERVICE_ADDRESS2; This also is nearly the same structure as XKERB_PA_XENON_SERVICE_ADDRESS except it shrinks the size of the structure (the old one resulted in packets larger than 1350 bytes).  The byteServiceResult and dwordServiceResult structures were reduced, and the alternate title ids were cleaned up. Back-compat issues This adds a new flag to the dwAuthdataFlags field in the XKERB_AD_XENON structure, which is returned by the XKDC in an encrypted ticket.  The SG will use this flag to selectively issue challenges (i.e., a Xenon console running in back-compat mode is not challenged).  By cracking this ticket, the KDC tests can verify the values. All existing tests that verify values within the authdata structure will be modified to check for the non-existence of the new back-compat flag.  The tests below will explicitly check for the flag. Users are along the left side.  Machine/title combinations are across the top.   An Xbox-only user has an entry in t_user_keys but not t_xenon_user_keys.   A Xenon-only user has an entry in t_xenon_user_keys but not t_user_keys.   A dual user has both keys along with the XenonFlag set in t_users.   A user is restricted from signing into Xbox Live (from Xbox title) by the column in t_users called f_allow_xbox1_logon. A machine is distinguished by its PUID.  Xenon machines have a different PUID range. A title is distinguished by the type of TGS request it makes (Xbox or Xenon TGS).   XboxMachine XboxTitle XboxMachine XenonTitle  XenonMachine XboxTitle XenonMachine XenonTitle Dual Xbox/Xenon bronze xktduusert1a Login: unauthorized Event: yes Login: error Event: yes Login: unauthorized Login: unauthorized Xbox-only user silver xktxbusert2a Login: yes Login: error Event: yes Login: error Event: yes Login: error Event: yes Dual Xbox/Xenon silver xktduusert2a Login: yes Login: error Event: yes Login: yes BackCompat: yes Login: yes Dual Xbox/Xenon restricted from Live1 silver xktduusert2ar  Login: notallowed Login: error Event: yes Login: notallowed Login: yes TODO: multi-user logons Parental controls As of 3/21/2005, t_parental_control_group_restrictions and t_parental_control_groups remain unchanged and essentially empty (a single Open group is defined).   A bit was added to the UserFlags field to indicate if a user is parentally controlled or not.  This is determined by looking at the fields bi_user_passport_puid and bi_owner_passport_puid in t_users.  If the fields are different, then this bit will be set. ParentalControls_DiffOwnerPuid_UserFlagsSet Sign in with user  xktduchilt2a , which is a dual Xenon/Xbox user in the silver 2 with no grants or restrictions AND has a different owner puid than user puid, hence the   (child) part in the middle of the name.  Verify bit 0x01000000 in dwUserFlags in the service address is set. ParentalControls_SameOwnerPuid_UserFlagsNotSet Sign in with a non-parentally-controlled account  xktduusert2a  and verify the bit in dwUserFlags is not set. Tiers New base offers that distinguish between bronze and silver tiers have been added for M3.  Bronze offer: 0xFFFE 0000 8000 00FE (nonvoucher) Bronze offer: 0xFFFE 0000 8000 00FF (voucher) All other offers are silver.  The bronze tiers should have all privileges except multiplayer play.  This is preliminary and subject to change.   SingleUserLogon_AllCombos_Tier1 Log in all users, one by one, from tier 1 (bronze) listed above in the M3 section.  Verify privileges and services are correct. SingleUserLogon_AllCombos_Tier2 Log in all users, one by one,  from tier 2 (silver) listed above in the M3 section.  Verify privileges and services are correct. Multi2UserLogon_AllCombos_Tier1 Log in all pairs of users from tier 1 (bronze) listed above in the M3 section.  Verify privileges and services are correct. Multi2UserLogon_AllCombos_Tier2 Log in all pairs of users from tier 2 (silver) listed above in the M3 section.  Verify privileges and services are correct. Multi2UserLogon_AllCombos_CrossTier Log in all pairs of users, one from tier 1 (bronze) and one from tier 2 (silver).  Verify privileges and services are correct. [TierUserFlags] For Xenon bug 13329.  Verify the user s membership tier is returned as part of dwUserFlags in the XUID.  In addition to this specific test, this will be added to the Verify step for every other test.  This is set according to the following code snippet from the KDC:     // Add the tier id to the ticket flags     dwTierID &= 0x0000000F;      // only the low 4 bits of dwTierID should be set     dwTicketFlags &= ~ (0x00F0); // clear out any db bits set in tier id range     dwTicketFlags |= (((WORD) dwTierID) << 4);     // Voice ban may have been set in the ticket flags but it may also     // have been banned for a period of time.  If a voice ban is in place     // set the low bit in the ticket flags.     dwTicketFlags = dwTicketFlags | dwVoiceBanned;     // Add data from the user's ticket flags to the scratch area and     // the ticket authdata.     pPolicyData->users[dwUserIndex].dwUserFlags =         ((((WORD) dwTicketFlags) << 8) | ((BYTE) dwCountryID)) << 8 ; Titles These are detailed in Van s Live Title Ids spec at  HYPERLINK http://team/sites/xbxe/Shared%20Documents/Infrastructure/Xenon%20LiveTitleIDs%20and%20LiveAltTitleIDs.doc  http://team/sites/xbxe/Shared%20Documents/Infrastructure/Xenon%20LiveTitleIDs%20and%20LiveAltTitleIDs.doc [t_alternate_titleids] TitleId Region MediaId  LiveTitleId SvcId1 SvcAltTitleId1 0xffbeef30 0x03feebff 0xffbeef31  0x03feebfe 0xffbeef31 0x13feebff 0xffbeef31 0x13feebfe 0xffbeef31 0x13feebfd 0xffbeef32 0xffbeef32 0x23feebff 0xffbeef32 0xffbeef32 0x23feebff 0xffbeef32 0xffbeef30 0xffbeef31 0xffbeef33 0x33feebff 0xffbeef33 All of these tests require a XENON_SERVICE_REQUEST2 request, as XENON_SERVICE_ADDRESS2 is the only structure that returns this information.  Entries with region 0 and mediaid 0 are considered wildcards, so any request that comes in with an unknown region/mediaid cominbation will default to the wildcard entry. All of the _Matrix_ tests below will log in with the following matrix, where = user1 = user2 TitleId  = title id to sign in with = title version to sign in with = region to sign in with = media id to sign in with LiveTId = LiveTitleId to expect in the reply = AltServiceId1 to expect in the reply = AltServiceTitleId1 to expect in the reply             U1  U2  TitleId     V  R  M  LiveTId     S  T --  --  -------     -  -  -  -------     -  -             u1, u2, 0xffbeef00, 0, 0, 0, 0xffbeef00, 0, 0));             u1, u2, 0xffbeef30, 0, 1, 1, 0x03feebff, 0, 0));             u1, u2, 0xffbeef30, 1, 0, 0, 0x03feebff, 0, 0));             u1, u2, 0xffbeef30, 2, 0, 0, 0x03feebff, 0, 0));             u1, u2, 0xffbeef31, 1, 0, 0, 0x03feebfe, 0, 0));             u1, u2, 0xffbeef31, 1, 1, 0, 0x13feebff, 0, 0));             u1, u2, 0xffbeef31, 1, 0, 1, 0x13feebfe, 0, 0));             u1, u2, 0xffbeef31, 1, 2, 2, 0x03feebfe, 0, 0));             u1, u2, 0xffbeef31, 2, 0, 0, 0x03feebfe, 0, 0));             u1, u2, 0xffbeef32, 1, 0, 0, 0xffbeef32, 3, 0x23feebff));             u1, u2, 0xffbeef32, 1, 1, 0, 0xffbeef32, 3, 0x23feebff));             u1, u2, 0xffbeef32, 1, 1, 2, 0xffbeef30, 3, 0xffbeef31));             u1, u2, 0xffbeef33, 0, 1, 1, 0x33feebff, 3, 0xffbeef33));             u1, u2, 0xffbeef33, 0, 2, 1, 0xffbeef33, 0, 0));             u1, u2, 0xffbeef33, 1, 1, 1, 0xffbeef33, 0, 0)); AltTitles_Matrix_Machine Log in with each of the above titles and verify the returned LiveTitleId, AltSvcId, and AltTitleId are as expected. Machine-only logons. AltTitles_Matrix_User Log in with each of the above titles and verify the returned LiveTitleId, AltSvcId, and AltTitleId are as expected. Log in with a bronze user and a silver user. AutoUpdateTitle_AutoDisc_VerifyService_Machine Log in a machine with a title and version that require an auto-update.  Use auto-discovery.  Verify XONLINE_E_LOGON_UPDATE_REQUIRED is returned, then sign in again with the same title but explicity request the auto-update service (3).  Verify the second call succeeds. AutoUpdateTitle_AutoDisc_VerifyService_UserT2 Log in a silver tier user with a title and version that require an auto-update.  Use auto-discovery.  Verify XONLINE_E_LOGON_UPDATE_REQUIRED is returned, then sign in again with the same title but explicity request the auto-update service (3).  Verify the second call succeeds. FlashVersion_Update t_title_versions for flash id 0xFFFFFFFF: Base_version Update_version For each item, sign in both machine-only and with users.  Sign in with: FlashVersion 0.  Expect success. FlashVersion 1.  Expect auto-update required error and only get service id 3 (auto-update).  FlashVersion 2.  Expect error (? or does this depend on allowUnknownVersions?).   FlashVersion 3.  Expect auto-update required error and only get service id 3 (auto-update).  Auto-discovery of services for LSP titles Note: this is the work item added post-TCC. Auto-discovery returns services in t_tier_region_services, based on a user s tier and region.  The table t_title_services was added to allow specific services to be granted on a per-title basis, much like privileges can be granted by a title with the user of t_title_privileges.   User is  xktdulsput2a  - dual Xenon/Xbox user, lsp user "lspu", tier 2, no grants or restrictions "a" This user's subscription #2 gets services 8002, 8012, 8013. Other one, the main one, gets 8005. Title 0xFFBEEF40 grants services 8012, 8013 Title 0xFFBEEF41 grants service 8002 Service 8002 is open to all titles Service 8012 is restricted to title 0xFFBEEF40  version 0 Service 8013 is restricted to title 0xFFBEEF40  version 1 All tests will use Xenon requests with auto-discovery.  For single-user cases, use  xktdulsput2a  will be used. Auto_TitleServices_Simple Login with title 0xFFBEEF41, version 0, expect additional service 8002 with hr=1. Auto_TitleServices_SimpleControl Login with title 0xFFBEEF00, version 0, expect no additional services. Auto_TitleServices_DualUsers Login with title 0xFFBEEF41, version 0, with users  xktdulsput2a  and  xktduusert2a .  This second user does not have permission to the extra services.  Expect additional service 8002 with hr=1.  Sign in a second time explicitly requesting only service 8002, which should get an hr=XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED. Auto_TitleServices_RestrictedVer0 Login with title 0xFFBEEF40, version 0, expect additional services 8012, 8013, with hr=1, XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED.  Sign in a second time explicitly requesting only services 8012, 8013, which should get an hr=0, XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED. Auto_TitleServices_RestrictedVer0_NoSubscription Login with title 0xFFBEEF40, version 0, and user  xktduusert2a , who does not havea subscription to these services.  Expect additional services 8012, 8013, with hr=1, XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED.  Sign in a second time explicitly requesting only services 8012, 8013, which should get an hr= XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED, XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED. Auto_TitleServices_RestrictedVer1 Login with title 0xFFBEEF40, version 1, expect additional services 8012, 8013, with hr=1, 1.  Sign in a second time explicitly requesting only services 8012, 8013, which should get an hr=0, 0. Auto_TitleServices_RestrictedVer1_DualUsers Login with title 0xFFBEEF40, version 1, with users  xktdulsput2a  and  xktduusert2a .  This second user does not have permission to the extra services.  Expect additional services 8012, 8013 with hr=1, 1.  Sign in a second time explicitly requesting only services 8012, 8013, which should get an hr=XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED, XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED. Extra tests These have been inserted into the existing Xbox KDC functional test groups to fill in lacking test cases. Test_Xkdc_Machine_Logon_NoServices_02 Log in machine with no users and request 0 services from the XKDC.  This is for Xenon bug #18745.  Prior to Xenon M2 XKDC, this request would cause the CPU to spike to 100% for over 10-20 seconds.   Test_Xkdc_User_1_Logon_NoServices_02 Log in user and request 0 services from the XKDC.  This is for Xenon bug #18745.  Prior to Xenon M2 XKDC, this request would cause the CPU to spike to 100% for over 10-20 seconds.   Existing Reusable Test Cases Functional XKDC [Test_Xkdc_Client_Skew] Test_Xkdc_Client_Skew type=XOnlineLogon machine=M1 services=base stoponfail=yes [Test_Xkdc_Machine_Logon_Basic] Machine logon: base type=XOnlineLogon machine=M1 services=base stoponfail=yes [Test_Xkdc_Machine_Logon_Max] Max Service ID Test: all services set to maxint type=XOnlineLogon machine=M1 services=uint.max stoponfail=yes [Test_Xkdc_User_1_Logon_Basic] User logon test: useraccount, base, presence type=XOnlineLogon machine=M1 users=xktuser7a services=useraccount, base, presence stoponfail=yes [Test_Xkdc_Machine_Logon_Expire] User logon test, ticket expired type=XOnlineLogon machine=M1 services=base addtotickettime=-5401 kerberr=KDC_ERR_TGT_REVOKED [Test_Xkdc_Machine_WrongTime_01..04] Time skew for service request, +/-130, +/-110 type=XOnlineLogon machine=M1 services=base timeskew=130,-130,110,-110 kerberr=KRB_AP_ERR_SKEW  [Test_Xkdc_Machine_Logon_ServiceMatrix_01] Machine logon: -presence, message, autoupdate, base, -matchmaking, -feedback Run a good portion of the matrix but split out a few in order to keep unnescessary test cases down type=XOnlineLogon machine=M1 servicesmatrix=presence, message, autoupdate, base, matchmaking, feedback grantedmatrix=no, yes, yes, yes, no, no subcases=63 [Test_Xkdc_Machine_Logon_ServiceMatrix_02] Machine logon: -feedback, base, useraccount type=XOnlineLogon machine=M1 servicesmatrix=feedback, base, useraccount grantedmatrix=no, yes, yes subcases=7 [Test_Xkdc_Machine_Logon_ServiceMatrix_03] Machine logon: -billing, message, -stats type=XOnlineLogon machine=M1 servicesmatrix=billing, message, stats grantedmatrix=no, yes, no subcases=7 [Test_Xkdc_Machine_Logon_NoServices_01] Get machine ST with no services type=XOnlineLogon machine=M1 services= kerberr=KDC_ERR_NO_RESPONSE [Test_Xkdc_Machine_Logon_NonexistantMatrix_01] Machine logon: -stats, -fake (9999), base type=XOnlineLogon machine=M1 servicesmatrix=stats, fake, base grantedmatrix=no, nonexistant, yes subcases=7  [Test_Xkdc_User_1_Logon_ServiceMatrix_01] User logon: presence, message, autoupdate, base, matchmaking, feedback ;Run a good portion of the matrix but split out a few in order to keep unnescessary test cases down type=XOnlineLogon machine=M1 users=xktuser7a servicesmatrix=presence, message, autoupdate, base, matchmaking, feedback grantedmatrix=yes, yes, yes, yes, yes, yes subcases=63 [Test_Xkdc_User_1_Logon_ServiceMatrix_02] User logon: feedback, base, useraccount type=XOnlineLogon machine=M1 users=xktuser7a servicesmatrix=feedback, base, useraccount grantedmatrix=yes, yes, yes subcases=7 User logon: billing, message, stats [Test_Xkdc_User_1_Logon_ServiceMatrix_03] type=XOnlineLogon machine=M1 users=xktuser7b servicesmatrix=billing, message, stats grantedmatrix=yes, yes, yes subcases=7 User logon: no services [Test_Xkdc_User_1_Logon_NoServices_01] type=XOnlineLogon machine=M1 users=xktuser7c services= kerberr=KDC_ERR_NO_RESPONSE User logon: stats, -fake (9999), base [Test_Xkdc_User_1_Logon_NonexistantMatrix_01] type=XOnlineLogon machine=M1 users=xktuser7d servicesmatrix=stats, fake, base grantedmatrix=yes, nonexistant, yes subcases=7  [Test_Xkdc_User_Multi_Logon_ServiceMatrix_01] User logon 4: presence, message, autoupdate, base, matchmaking, feedback ;Run a good portion of the matrix but split out a few in order to keep unnescessary test cases down type=XOnlineLogon machine=M1 users=xktuser7a, xktuser7b, xktuser7c, xktuser7d servicesmatrix=presence, message, autoupdate, base, matchmaking, feedback grantedmatrix=yes, yes, yes, yes, yes, yes subcases=63 [Test_Xkdc_User_Multi_Logon_ServiceMatrix_02] User logon 4: feedback, base, useraccount type=XOnlineLogon machine=M1 users=xktuser7a, xktuser7b servicesmatrix=feedback, base, useraccount grantedmatrix=yes, yes, yes subcases=7 [Test_Xkdc_User_Multi_Logon_ServiceMatrix_03] User logon 4: billing, message, stats type=XOnlineLogon machine=M1 users=xktuser7b, xktuser7c, xktuser7d servicesmatrix=billing, message, stats grantedmatrix=yes, yes, yes subcases=7 [Test_Xkdc_User_Multi_Logon_NoServices_01] User logon 4: no services type=XOnlineLogon machine=M1 users=xktuser7c, xktuser7b, xktuser7d services= kerberr=KDC_ERR_NO_RESPONSE [Test_Xkdc_User_Multi_Logon_NonexistantMatrix_01] User logon 4: stats, -fake (9999), base type=XOnlineLogon machine=M1 users=xktuser7d, xktuser7c, xktuser7b, xktuser7a servicesmatrix=stats, fake, base grantedmatrix=yes, nonexistant, yes subcases=7 [Test_Xkdc_User_1_Logon_LotsOfServices] User logon: 12 services type=XOnlineLogon machine=M1 users=xktuser7a services=presence, message, autoupdate, base, useraccount, matchmaking, stats, feedback, billing, tou, nameres, signature granted=yes, yes, yes, yes, yes, yes, yes, yes, yes, yes, false, yes [Test_Xkdc_User_1_Logon_13_Services] User logon: 13 services type=XOnlineLogon machine=M1 users=xktuser7a services=presence, message, autoupdate, base, useraccount, matchmaking, stats, feedback, billing, tou, nameres, signature, name_verification Should time out [Test_Xkdc_User_1_Logon_17_Services] User logon: 17 services type=XOnlineLogon machine=M1 users=xktuser7a services=presence, message, autoupdate, base, useraccount, matchmaking, stats, feedback, billing, tou, nameres, signature Should time out Functional XKDC Auth [Test_Xkdc_User_1_Logon_Auth_a] User logon test with Auth Verify (xktuser7a) type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF00..0xFFBEEF0E (-4264192..-4264178) services=useraccount, base, presence stoponfail=yes [Test_Xkdc_User_1_Logon_Auth_b] User logon test with Auth Verify (xktuser7b) type=XOnlineLogon machine=M1 users=xktuser7b titleid=0xFFBEEF00..0xFFBEEF0E (-4264192..-4264178) services=useraccount, base, presence stoponfail=yes [Test_Xkdc_User_1_Logon_Auth_c] User logon test with Auth Verify (xktuser7c) type=XOnlineLogon machine=M1 users=xktuser7c titleid=0xFFBEEF00..0xFFBEEF0E (-4264192..-4264178) services=useraccount, base, presence stoponfail=yes [Test_Xkdc_User_1_Logon_Auth_d] User logon test with Auth Verify (xktuser7d) type=XOnlineLogon machine=M1 users=xktuser7d titleid=0xFFBEEF00..0xFFBEEF0E (-4264192..-4264178) services=useraccount, base, presence stoponfail=yes [Test_Xkdc_User_1_Logon_Auth_Title_with_no_Trust] User logon test with Auth Verify type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF21 (-4264159) services=useraccount, base, presence stoponfail=yes [Test_Xkdc_User_1_Logon_Auth_Basic] User logon test with Auth Verify type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFC0FE00 (-4129280) services=useraccount, base, presence stoponfail=yes [Test_Xkdc_User_1_Logon_Auth_CheckDisconnects_1] Test_Xkdc_User_1_Logon_Auth_CheckDisconnects_1 (xktsub2, 0 stars rating) type=XOnlineLogon machine=M1 users=xktsub2 titleid=0xFFBEEF00 (-4264192) services=useraccount, base, presence rating 0 stars [Test_Xkdc_User_1_Logon_Auth_CheckDisconnects_2] Test_Xkdc_User_1_Logon_Auth_CheckDisconnects_2 (xktsub3, 3 stars rating) type=XOnlineLogon machine=M1 users=xktsub3 titleid=0xFFBEEF00 (-4264192) services=useraccount, base, presence rating 3 stars [Test_Xkdc_User_1_Logon_Auth_CheckDisconnects_3] Test_Xkdc_User_1_Logon_Auth_CheckDisconnects_3 (xktsub4, 7 stars rating) type=XOnlineLogon machine=M1 users=xktsub4 titleid=0xFFBEEF00 (-4264192) services=useraccount, base, presence rating 7 stars [Test_Xkdc_User_1_Logon_Auth_CheckSessions_1] Test_Xkdc_User_1_Logon_Auth_CheckSessions_1 (xktsub2, 0 stars rating) type=XOnlineLogon machine=M1 users=xktsub2 titleid=0xFFBEEF00 (-4264192) services=useraccount, base, presence rating 0 stars [Test_Xkdc_User_1_Logon_Auth_CheckSessions_2] Test_Xkdc_User_1_Logon_Auth_CheckSessions_2 (xktsub3, 3 stars rating) type=XOnlineLogon machine=M1 users=xktsub3 titleid=0xFFBEEF00 (-4264192) services=useraccount, base, presence rating 3 stars [Test_Xkdc_User_1_Logon_Auth_CheckSessions_3] Test_Xkdc_User_1_Logon_Auth_CheckSessions_3 (xktsub4, 7 stars rating) type=XOnlineLogon machine=M1 users=xktsub4 titleid=0xFFBEEF00 (-4264192) services=useraccount, base, presence rating 7 stars [Test_Xkdc_User_1_Logon_Auth_Matrix] Test_Xkdc_User_1_Logon_Auth_Matrix (xktsub1, 7 stars rating, 4 titleids) type=XOnlineLogon machine=M1 users=xktsub1 titleid=0xFFBEEF00..0xFFBEEF0F (-4264192..-4264177) services=useraccount, base, presence rating 7 stars Functional XKDC Auto Update [Test_Xkdc_Machine_TitleID_01] Test_Xkdc_Machine_TitleID_01 type=XOnlineLogon machine=M1 titleid=0xBAAD00 services=useraccount granted=false hronline=XONLINE_E_LOGON_UNKNOWN_TITLE [Test_Xkdc_Machine_TitleID_02] Test_Xkdc_Machine_TitleID_02 type=XOnlineLogon machine=M1 titleid=0xBAAD00 services=base granted=false hronline=XONLINE_E_LOGON_UNKNOWN_TITLE [Test_Xkdc_Machine_TitleID_03] Test_Xkdc_Machine_TitleID_03 type=XOnlineLogon machine=M1 titleid=0xBAAD00 services=presence granted=false hronline=XONLINE_E_LOGON_UNKNOWN_TITLE [Test_Xkdc_User_1_TitleID_01] Test_Xkdc_User_1_TitleID_01 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xBAAD00 services=useraccount granted=false hronline=XONLINE_E_LOGON_UNKNOWN_TITLE [Test_Xkdc_Machine_AutoUpdate_01_All] Test_Xkdc_Machine_AutoUpdate_01_All type=XOnlineLogon machine=M1 titleid=0xFFBEEF00 (-4264192) titleversion= titleregion=2, 2147483647, -2147483648, -1 services=useraccount granted=false hronline=XONLINE_E_LOGON_UNKNOWN_TITLE [Test_Xkdc_Machine_AutoUpdate_02_1to3] Test_Xkdc_Machine_AutoUpdate_02_1to3 type=XOnlineLogon machine=M1 titleid=0xFFBEEF01 (-4264191) titleversion=1 titleregion=1 services=presence/useraccount/presence,useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED [Test_Xkdc_Machine_AutoUpdate_02_04] Test_Xkdc_Machine_AutoUpdate_02_04 type=XOnlineLogon machine=M1 titleid=0xFFBEEF01 (-4264191) titleversion= titleregion= services=autoupdate [Test_Xkdc_Machine_AutoUpdate_02_05] Test_Xkdc_Machine_AutoUpdate_02_05 type=XOnlineLogon machine=M1 titleid=0xFFBEEF01 (-4264191) titleversion= titleregion= services=useraccount,autoupdate [Test_Xkdc_Machine_AutoUpdate_02_06] Test_Xkdc_Machine_AutoUpdate_02_06 type=XOnlineLogon machine=M1 titleid=0xFFBEEF01 (-4264191) titleversion= titleregion= services=presence,autoupdate granted=no,yes [Test_Xkdc_Machine_AutoUpdate_02_07] Test_Xkdc_Machine_AutoUpdate_02_07 type=XOnlineLogon machine=M1 titleid=0xFFBEEF01 (-4264191) titleversion= titleregion= services=useraccount,presence,autoupdate granted=yes,no,yes [Test_Xkdc_Machine_AutoUpdate_02_08] Test_Xkdc_Machine_AutoUpdate_02_08 type=XOnlineLogon machine=M1 titleid=0xFFBEEF01 (-4264191) titleversion=2 titleregion= services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED [Test_Xkdc_Machine_AutoUpdate_02_09] Test_Xkdc_Machine_AutoUpdate_02_09 type=XOnlineLogon machine=M1 titleid=0xFFBEEF01 (-4264191) titleversion=3 titleregion= services=useraccount [Test_Xkdc_Machine_AutoUpdate_02_10] Test_Xkdc_Machine_AutoUpdate_02_10 type=XOnlineLogon machine=M1 titleid=0xFFBEEF01 (-4264191) titleversion=4 titleregion= services=useraccount granted=false hronline=XONLINE_E_LOGON_UNKNOWN_TITLE [Test_Xkdc_Machine_AutoUpdate_03_ALL] Test_Xkdc_Machine_AutoUpdate_03_All type=XOnlineLogon machine=M1 titleid=0xFFBEEF02 (-4264190) titleversion=1,2,2147483647,-2147483648,-1 services=useraccount [Test_Xkdc_Machine_AutoUpdate_04.01] Test_Xkdc_Machine_AutoUpdate_04_01 type=XOnlineLogon machine=M1 titleid=0xFFBEEF03 (-4264189) services=useraccount granted=false hronline=XONLINE_E_LOGON_UNKNOWN_TITLE bug=19829 [Test_Xkdc_Machine_AutoUpdate_05_ALL] Test_Xkdc_Machine_AutoUpdate_05_All type=XOnlineLogon machine=M1 titleid=0xFFBEEF04 (-4264188) titleversion=2147483646,-2147483648,-2 services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED [Test_Xkdc_Machine_AutoUpdate_06.01] Test_Xkdc_Machine_AutoUpdate_06_01 type=XOnlineLogon machine=M1 titleid=0xFFBEEF05 (-4264187) titleversion=2147483647 services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED [Test_Xkdc_Machine_AutoUpdate_07_01to03] Test_Xkdc_Machine_AutoUpdate_07_01to03 type=XOnlineLogon machine=M1 titleid=0xFFBEEF06 (-4264186) titleversion=1,2,3 services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED [Test_Xkdc_Machine_AutoUpdate_07_04to05] Test_Xkdc_Machine_AutoUpdate_07_04to05 type=XOnlineLogon machine=M1 titleid=0xFFBEEF06 (-4264186) titleversion=4,5 services=useraccount [Test_Xkdc_Machine_AutoUpdate_08_01] Test_Xkdc_Machine_AutoUpdate_08_01 type=XOnlineLogon machine=M1 titleid=0xFFBEEF07 (-4264185) services=useraccount [Test_Xkdc_Machine_AutoUpdate_08_02] Test_Xkdc_Machine_AutoUpdate_08_02 type=XOnlineLogon machine=M1 titleid=0xFFBEEF07 (-4264185) titleversion=3 services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED [Test_Xkdc_Machine_AutoUpdate_09_01to02] Test_Xkdc_Machine_AutoUpdate_09_01to02 type=XOnlineLogon machine=M1 titleid=0xFFBEEF08 (-4264184) titleversion=1,2 services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED [Test_Xkdc_Machine_AutoUpdate_10_01] Test_Xkdc_Machine_AutoUpdate_10_01 type=XOnlineLogon machine=M1 titleid=0xFFBEEF09 (-4264183) services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED [Test_Xkdc_User_1_AutoUpdate_02_01] Test_Xkdc_User_1_AutoUpdate_02_01 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF01 (-4264191) services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED country=0 [Test_Xkdc_User_1_AutoUpdate_02_02] Test_Xkdc_User_1_AutoUpdate_02_02 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF01 (-4264191) services=presence granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED country=0 [Test_Xkdc_User_1_AutoUpdate_02_03] Test_Xkdc_User_1_AutoUpdate_02_03 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF01 (-4264191) services=useraccount, presence granted=false, false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED country=0 [Test_Xkdc_User_1_AutoUpdate_02_04] Test_Xkdc_User_1_AutoUpdate_02_04 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF01 (-4264191) services=autoupdate country=0 [Test_Xkdc_User_1_AutoUpdate_02.05] Test_Xkdc_User_1_AutoUpdate_02_05 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF01 (-4264191) services=useraccount, autoupdate country=0 [Test_Xkdc_User_1_AutoUpdate_02_06] Test_Xkdc_User_1_AutoUpdate_02_06 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF01 (-4264191) services=presence, autoupdate granted=no, yes country=0 [Test_Xkdc_User_1_AutoUpdate_02_07] Test_Xkdc_User_1_AutoUpdate_02_07 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF01 (-4264191) services=useraccount, presence, autoupdate granted=yes, no, yes country=0 [Test_Xkdc_User_1_AutoUpdate_02.08] Test_Xkdc_User_1_AutoUpdate_02_08 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF01 (-4264191) titleversion=2 services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED country=0 [Test_Xkdc_User_1_AutoUpdate_02.09] Test_Xkdc_User_1_AutoUpdate_02_09 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF01 (-4264191) titleversion=3 services=useraccount [Test_Xkdc_User_1_AutoUpdate_02.10] Test_Xkdc_User_1_AutoUpdate_02_10 type=XOnlineLogon machine=M1 users=xktuser7a titleid=0xFFBEEF01 (-4264191) titleversion=4 services=useraccount granted=false hronline=XONLINE_E_LOGON_UNKNOWN_TITLE country=0 bug=19829 [Test_Xkdc_User_Multi_AutoUpdate_02_01] Test_Xkdc_User_Multi_AutoUpdate_02_01 type=XOnlineLogon machine=M1 users=xktuser7a, xktuser7b titleid=0xFFBEEF01 (-4264191) services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED country=0, 0 [Test_Xkdc_User_Multi_AutoUpdate_02_02] Test_Xkdc_User_Multi_AutoUpdate_02_02 type=XOnlineLogon machine=M1 users=xktuser7a, xktuser7c titleid=0xFFBEEF01 (-4264191) services=presence granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED country=0, 0 [Test_Xkdc_User_Multi_AutoUpdate_02_03] Test_Xkdc_User_Multi_AutoUpdate_02_03 type=XOnlineLogon machine=M1 users=xktuser7d, xktuser7c, xktuser7a titleid=0xFFBEEF01 (-4264191) services=useraccount, presence granted=false, false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED country=0, 0, 0 [Test_Xkdc_User_Multi_AutoUpdate_02_04] Test_Xkdc_User_Multi_AutoUpdate_02_04 type=XOnlineLogon machine=M1 users=xktuser7b, xktuser7a titleid=0xFFBEEF01 (-4264191) services=autoupdate, stats granted=yes, no country=0, 0 [Test_Xkdc_User_Multi_AutoUpdate_02_05] Test_Xkdc_User_Multi_AutoUpdate_02_05 type=XOnlineLogon machine=M1 users=xktuser7a, xktuser7b, xktuser7c, xktuser7d titleid=0xFFBEEF01 (-4264191) services=useraccount, autoupdate country=0, 0, 0, 0 [Test_Xkdc_User_Multi_AutoUpdate_02_06] Test_Xkdc_User_Multi_AutoUpdate_02_06 type=XOnlineLogon machine=M1 users=xktuser7d, xktuser7c titleid=0xFFBEEF01 (-4264191) services=presence, autoupdate granted=no, yes country=0, 0 [Test_Xkdc_User_Multi_AutoUpdate_02_07] Test_Xkdc_User_Multi_AutoUpdate_02_07 type=XOnlineLogon machine=M1 users=xktuser7a, xktuser7b, xktuser7d titleid=0xFFBEEF01 (-4264191) services=useraccount, presence, autoupdate granted=yes, no, yes country=0, 0, 0 [Test_Xkdc_User_Multi_AutoUpdate_02.08] Test_Xkdc_User_Multi_AutoUpdate_02_08 type=XOnlineLogon machine=M1 users=xktuser7b, xktuser7d, xktuser7b titleid=0xFFBEEF01 (-4264191) titleversion=2 services=useraccount granted=false hronline=XONLINE_E_LOGON_UPDATE_REQUIRED country=0, 0, 0 [Test_Xkdc_User_Multi_AutoUpdate_02_09] Test_Xkdc_User_Multi_AutoUpdate_02_09 type=XOnlineLogon machine=M1 users=xktuser7b, xktuser7a, xktuser7c titleid=0xFFBEEF01 (-4264191) titleversion=3 services=useraccount [Test_Xkdc_User_Multi_AutoUpdate_02_10] Test_Xkdc_User_Multi_AutoUpdate_02_10 type=XOnlineLogon machine=M1 users=xktuser7d, xktuser7c, xktuser7b, xktuser7a titleid=0xFFBEEF01 (-4264191) titleversion=4 services=useraccount granted=false hronline=XONLINE_E_LOGON_UNKNOWN_TITLE country=0, 0, 0, 0 bug=19829 Functional XKDC Policy [Test_Xkdc_User_1_Policy_Space] Test_Xkdc_User_1_Policy_Space type=XOnlineLogon machine=M1 services=presence users=xkt space [Test_Xkdc_User_1_Policy_Country_01] Test_Xkdc_User_1_Policy_Country_01 type=XOnlineLogon machine=M1 users=xktcntry53 services=presence country=53 [Test_Xkdc_User_1_Policy_Country_02] Test_Xkdc_User_1_Policy_Country_02 type=XOnlineLogon machine=M1 users=xktcntry110 services=presence country=110 [Test_Xkdc_User_1_Policy_Country_03] Test_Xkdc_User_1_Policy_Country_03 type=XOnlineLogon machine=M1 users=xktcntry1 services=presence country=1 [Test_Xkdc_User_1_Policy_UserFlags_01] Test_Xkdc_User_1_Policy_UserFlags_01thru07 type=XOnlineLogon machine=M1 users=xkttflag1(2,4,5,7,9,130) services=presence userflags=1,2,4,5,7,9,130 (each is an atomic test) [Test_Xkdc_User_1_Policy_AcctResume_01] Test_Xkdc_User_1_Policy_AcctResume_01 type=XOnlineLogon machine=M1 users=xktactrsmnow services=presence [Test_Xkdc_User_1_Policy_AcctResume_02] Test_Xkdc_User_1_Policy_AcctResume_02 type=XOnlineLogon machine=M1 users=xktactrsmtmrw services=presence hruser=XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT granted=no [Test_Xkdc_User_1_Policy_AcctResume_03] Test_Xkdc_User_1_Policy_AcctResume_03 type=XOnlineLogon machine=M1 users=xktactrsmyest services=presence [Test_Xkdc_User_1_Policy_AcctResume_04] Test_Xkdc_User_1_Policy_AcctResume_04 type=XOnlineLogon machine=M1 users=xktactrsmfvr services=presence hruser=XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT granted=no [Test_Xkdc_User_1_Policy_VoiceResume_01] Test_Xkdc_User_1_Policy_VoiceResume_01 type=XOnlineLogon machine=M1 users=xktvocrsmnow services=presence [Test_Xkdc_User_1_Policy_VoiceResume_02] Test_Xkdc_User_1_Policy_VoiceResume_02 type=XOnlineLogon machine=M1 users=xktvocrsmtmrw services=presence userflags=1 [Test_Xkdc_User_1_Policy_VoiceResume_03] Test_Xkdc_User_1_Policy_VoiceResume_03 type=XOnlineLogon machine=M1 users=xktvocrsmyest services=presence [Test_Xkdc_User_1_Policy_VoiceResume_04] Test_Xkdc_User_1_Policy_VoiceResume_04 type=XOnlineLogon machine=M1 users=xktvocrsmfvr services=presence userflags=1 [Test_Xkdc_User_1_Policy_UserFlags_VoiceResume_01] Test_Xkdc_User_1_Policy_UserFlags_VoiceResume_01 type=XOnlineLogon machine=M1 users=xkttflag7 services=presence userflags=7 [Test_Xkdc_User_1_Policy_NameChange_01] Test_Xkdc_User_1_Policy_NameChange_01 type=XOnlineLogon machine=M1 users=xktnamechng services=presence hruser=XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT granted=no [Test_Xkdc_User_1_Policy_TOS_01] Test_Xkdc_User_1_Policy_TOS_01 type=XOnlineLogon machine=M1 users=xkttosbefore services=presence hruser=XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT granted=no [Test_Xkdc_User_1_Policy_TOS_02] Test_Xkdc_User_1_Policy_TOS_02 type=XOnlineLogon machine=M1 users=xkttosexact services=presence [Test_Xkdc_User_1_Policy_TOS_03] Test_Xkdc_User_1_Policy_TOS_03 type=XOnlineLogon machine=M1 users=xkttosafter services=presence [Test_Xkdc_User_1_Policy_BillingStatus_01] Test_Xkdc_User_1_Policy_BillingStatus_01 type=XOnlineLogon machine=M1 users=xktbilstatfals services=presence [Test_Xkdc_User_1_Policy_BillingStatus_02] Test_Xkdc_User_1_Policy_BillingStatus_02 type=XOnlineLogon machine=M1 users=xktbilstatfail services=presence hruser=XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT granted=no [Test_Xkdc_User_Multi_Policy_UserFlags_01] Test_Xkdc_User_Multi_Policy_UserFlags_01 type=XOnlineLogon machine=M1 users=xkttflag9, xktuser7b services=presence userflags=9, 0 [Test_Xkdc_User_Multi_Policy_UserFlags_02] Test_Xkdc_User_Multi_Policy_UserFlags_02 type=XOnlineLogon machine=M1 users=xktuser7b, xkttflag9 services=presence userflags=0, 9 [Test_Xkdc_User_Multi_Policy_NameChange_01] Test_Xkdc_User_Multi_Policy_NameChange_01 type=XOnlineLogon machine=M1 users=xktnamechng, xktuser7a services=presence hruser=XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT, S_OK granted=no [Test_Xkdc_User_Multi_Policy_NameChange_02] Test_Xkdc_User_Multi_Policy_NameChange_02 type=XOnlineLogon machine=M1 users=xktuser7a, xktnamechng services=presence hruser=S_OK, XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT granted=no Functional XKDC Sites [Test_Xkdc_Machine_Logon_Sites_01_01] Test_Xkdc_Machine_Logon_Sites_01_01 type=XOnlineLogon machine=M1 site=7045 services=8001 granted=yes [Test_Xkdc_User_1_Logon_Sites_01_01] Test_Xkdc_User_1_Logon_Sites_01_01 type=XOnlineLogon machine=M1 users=xktsuball site=7045 services=8001 granted=yes [Test_Xkdc_Machine_Logon_Sites_01_02] Test_Xkdc_Machine_Logon_Sites_01_02 type=XOnlineLogon machine=M1 services=8002 granted=no [Test_Xkdc_User_1_Logon_Sites_01_02] Test_Xkdc_User_1_Logon_Sites_01_02 type=XOnlineLogon machine=M1 users=xktsuball site=7045 services=8002 granted=yes [Test_Xkdc_Machine_Logon_Sites_01_03] Test_Xkdc_Machine_Logon_Sites_01_03 type=XOnlineLogon machine=M1 services=useraccount, 8001 granted=yes, false [Test_Xkdc_User_1_Logon_Sites_01_03] Test_Xkdc_User_1_Logon_Sites_01_03 type=XOnlineLogon machine=M1 users=xktsuball services=useraccount, 8001 granted=yes, false [Test_Xkdc_Machine_Logon_Sites_01_04] Test_Xkdc_Machine_Logon_Sites_01_04 type=XOnlineLogon machine=M1 services=8001, useraccount granted=false, yes [Test_Xkdc_User_1_Logon_Sites_01_04] Test_Xkdc_User_1_Logon_Sites_01_04 type=XOnlineLogon machine=M1 users=xktsuball services=8001, useraccount granted=false, yes [Test_Xkdc_Machine_Logon_Sites_01_05] Test_Xkdc_Machine_Logon_Sites_01_05 type=XOnlineLogon machine=M1 services=presence, 8001 granted=no, false [Test_Xkdc_User_1_Logon_Sites_01_05] Test_Xkdc_User_1_Logon_Sites_01_05 type=XOnlineLogon machine=M1 users=xktsuball services=presence, 8001 granted=yes, false [Test_Xkdc_Machine_Logon_Sites_01_06] Test_Xkdc_Machine_Logon_Sites_01_06 type=XOnlineLogon machine=M1 services=8001, presence granted=false, no [Test_Xkdc_User_1_Logon_Sites_01_06] Test_Xkdc_User_1_Logon_Sites_01_06 type=XOnlineLogon machine=M1 users=xktsuball services=8001, presence granted=false, yes [Test_Xkdc_Machine_Logon_Sites_01_07] Test_Xkdc_Machine_Logon_Sites_01_07 type=XOnlineLogon machine=M1 services=useraccount, 8002 granted=yes, false [Test_Xkdc_User_1_Logon_Sites_01_07] Test_Xkdc_User_1_Logon_Sites_01_07 type=XOnlineLogon machine=M1 users=xktsuball services=useraccount, 8002 granted=yes, false [Test_Xkdc_Machine_Logon_Sites_01_08] Test_Xkdc_Machine_Logon_Sites_01_08 type=XOnlineLogon machine=M1 services=8002, useraccount granted=false, yes [Test_Xkdc_User_1_Logon_Sites_01_08] Test_Xkdc_User_1_Logon_Sites_01_08 type=XOnlineLogon machine=M1 users=xktsuball services=8002, useraccount granted=false, yes [Test_Xkdc_Machine_Logon_Sites_01_09] Test_Xkdc_Machine_Logon_Sites_01_09 type=XOnlineLogon machine=M1 services=presence, 8002 granted=no, false [Test_Xkdc_User_1_Logon_Sites_01_09] Test_Xkdc_User_1_Logon_Sites_01_09 type=XOnlineLogon machine=M1 users=xktsuball services=presence, 8002 granted=yes, false [Test_Xkdc_Machine_Logon_Sites_01_10] Test_Xkdc_Machine_Logon_Sites_01_10 type=XOnlineLogon machine=M1 services=8002, presence granted=false, no [Test_Xkdc_User_1_Logon_Sites_01_10] Test_Xkdc_User_1_Logon_Sites_01_10 type=XOnlineLogon machine=M1 users=xktsuball services=8002, presence granted=false, yes [Test_Xkdc_Machine_Logon_Sites_01_11] Test_Xkdc_Machine_Logon_Sites_01_11 type=XOnlineLogon machine=M1 site=7045 services=8001, 8002 granted=yes, no [Test_Xkdc_User_1_Logon_Sites_01_11] Test_Xkdc_User_1_Logon_Sites_01_11 type=XOnlineLogon machine=M1 users=xktsuball site=7045 services=8001, 8002 granted=yes, yes [Test_Xkdc_Machine_Logon_Sites_01_12] Test_Xkdc_Machine_Logon_Sites_01_12 type=XOnlineLogon machine=M1 site=7045 services=8002, 8001 granted=no, yes [Test_Xkdc_User_1_Logon_Sites_01_12] Test_Xkdc_User_1_Logon_Sites_01_12 type=XOnlineLogon machine=M1 users=xktsuball site=7045 services=8002, 8001 granted=yes, yes [Test_Xkdc_Machine_Logon_Sites_01_13] Test_Xkdc_Machine_Logon_Sites_01_13 type=XOnlineLogon machine=M1 site=7045 services=8001, 8003 granted=yes, false [Test_Xkdc_User_1_Logon_Sites_01_13] Test_Xkdc_User_1_Logon_Sites_01_13 type=XOnlineLogon machine=M1 users=xktsuball site=7045 services=8001, 8003 granted=yes, false [Test_Xkdc_Machine_Logon_Sites_01_14] Test_Xkdc_Machine_Logon_Sites_01_14 type=XOnlineLogon machine=M1 services=8002, 8003 granted=no, false [Test_Xkdc_User_1_Logon_Sites_01_14] Test_Xkdc_User_1_Logon_Sites_01_14 type=XOnlineLogon machine=M1 users=xktsuball site=7045 services=8002, 8003 granted=yes, false [Test_Xkdc_Machine_Logon_Sites_01_15] Test_Xkdc_Machine_Logon_Sites_01_15 type=XOnlineLogon machine=M1 services=8002, 8004 granted=no, false [Test_Xkdc_User_1_Logon_Sites_01_15] Test_Xkdc_User_1_Logon_Sites_01_15 type=XOnlineLogon machine=M1 users=xktsuball site=7045 services=8002, 8004 granted=yes, false [Test_Xkdc_Machine_Logon_Sites_01_16] Test_Xkdc_Machine_Logon_Sites_01_16 type=XOnlineLogon machine=M1 site=7045 services=8001, 8004 granted=yes, false [Test_Xkdc_User_1_Logon_Sites_01_16] Test_Xkdc_User_1_Logon_Sites_01_16 type=XOnlineLogon machine=M1 users=xktsuball site=7045 services=8001, 8004 granted=yes, false [Test_Xkdc_User_1_Logon_Offers_02_01] Test_Xkdc_User_1_Logon_Offers_02_01 type=XOnlineLogon machine=M1 users=xktsub1 site=7045 services=8001 granted=yes [Test_Xkdc_User_1_Logon_Offers_02_02] Test_Xkdc_User_1_Logon_Offers_02_02 type=XOnlineLogon machine=M1 users=xktsub2 site=7045 services=8002 granted=yes [Test_Xkdc_User_1_Logon_Offers_02_03] Test_Xkdc_User_1_Logon_Offers_02_03 type=XOnlineLogon machine=M1 users=xktsub3 site=7045 services=8002 granted=yes [Test_Xkdc_Machine_ServicesInstances_TitleID_03_01] Test_Xkdc_Machine_ServicesInstances_TitleID_03_01 type=XOnlineLogon machine=M1 services=8005 granted=no [Test_Xkdc_User_1_ServicesInstances_TitleID_03_01] Test_Xkdc_User_1_ServicesInstances_TitleID_03_01 type=XOnlineLogon machine=M1 users=xktsub5 services=8005 granted=yes [Test_Xkdc_Machine_ServicesInstances_TitleID_03_02] Test_Xkdc_Machine_ServicesInstances_TitleID_03_02 type=XOnlineLogon machine=M1 titleid=0xFFBEEF20 (-4264160) services=8005 granted=no [Test_Xkdc_User_1_ServicesInstances_TitleID_03_02] Test_Xkdc_User_1_ServicesInstances_TitleID_03_02 type=XOnlineLogon machine=M1 users=xktsub5 titleid=0xFFBEEF20 (-4264160) services=8005 granted=no [Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_01] Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_01 type=XOnlineLogon machine=M1 services=8006 granted=no [Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_01] Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_01 type=XOnlineLogon machine=M1 users=xktsub5 site=7045 services=8006 granted=yes [Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_02] Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_02 type=XOnlineLogon machine=M1 titleversion=2 services=8006 hronline=XONLINE_E_LOGON_UNKNOWN_TITLE granted=false country=0 bug=19829 [Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_02] Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_02 type=XOnlineLogon machine=M1 users=xktsub5 titleversion=2 services=8006 hronline=XONLINE_E_LOGON_UNKNOWN_TITLE granted=false country=0 bug=19829 [Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_03] Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_03 type=XOnlineLogon machine=M1 services=8007 granted=unavailable [Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_03] Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_03 type=XOnlineLogon machine=M1 users=xktsub5 services=8007 granted=unavailable [Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_04] Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_04 type=XOnlineLogon machine=M1 titleid=0xFFBEEF21 (-4264159) services=8008 granted=no [Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_04] Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_04 type=XOnlineLogon machine=M1 users=xktsub5 titleid=0xFFBEEF21 (-4264159) site=7045 services=8008 granted=yes [Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_05] Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_05 type=XOnlineLogon machine=M1 titleid=0xFFBEEF21 (-4264159) titleversion=2 services=8008 granted=no [Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_05] Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_05 type=XOnlineLogon machine=M1 users=xktsub5 titleid=0xFFBEEF21 (-4264159) titleversion=2 site=7045 services=8008 granted=yes [Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_06] Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_06 type=XOnlineLogon machine=M1 titleid=0xFFBEEF21 (-4264159) titleversion=3 services=8008b granted=no [Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_06] Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_06 type=XOnlineLogon machine=M1 users=xktsub5 titleid=0xFFBEEF21 (-4264159) titleversion=3 site=7045 services=8008b granted=yes [Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_07] Test_Xkdc_Machine_ServicesInstances_TitleVersionRegionAvailable_04_07 type=XOnlineLogon machine=M1 titleid=0xFFBEEF21 (-4264159) titleversion=4 services=8008 granted=no [Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_07] Test_Xkdc_User_1_ServicesInstances_TitleVersionRegionAvailable_04_07 type=XOnlineLogon machine=M1 users=xktsub5 titleid=0xFFBEEF21 (-4264159) titleversion=4 site=7046 services=8008 granted=yes Catastrophic Failure Test Cases Shutdown -- XKDC should return correct error codes Server restarted -- XKDC should reconnect Server network loss -- XKDC should return correct error codes Server network reconnect -- XKDC should reconnect Server power loss -- XKDC should return correct error codes Load balancing XKDC server down -- Requests should not go to this server XKDC network loss -- Requests should not go to this server Stress Testing M1 Milestone:  No stress testing will be performed for this milestone due to the functional changes being validated in this timeframe. M2 Milestone:  No stress testing required. M3 Milestone:  A baseline TPS measurement will be made, along with trial 24-hour and 72-hour runs to verify the correctness of the stress tools and make sure nothing catastrophic happened to the server in the past 3 milestones.   Revision History Changes made Author 6/9/2004 First Draft Kgoodier 11/11/2004 Changes for M2 Kgoodier 3/22/2004 Changes for M3 kgoodier 3/29/2004 Changes for M3 post-review and immediately pre-TCC.  Reviewed on 3/22/05 by dcaiafa, vanvan, garyt, kgoodier. kgoodier KDC Configuration Settings XKDC Configuration Settings pulled from xkdc.ini, a remnant of M1: Requires Restart: [UODB] AppDomain=UODB [KdcPolicy] TimeSkewSeconds=120 [MachineCache] CacheTableSize=5000 HashTableSize=10000 CacheLifeTimeInSeconds=18000 [DoS] CheckForDos=1 NumDosEntries=5000 [TitlePolicy] AllowUnknownVersions=#LAXVERCHK# [Mgmt.log.target] log=Type=File;Prefix=#LOGROOT#\XKDC\;RotationTime=60;RotationSize=1000000000 ticketLog=Type=File;Prefix=#LOGROOT#\XkdcTicketLog\;RotationTime=60;RotationSize=1000000000 ;remote=Type=Remote;Address=localhost [Mgmt.log.area] ;Base=target=debugoutput;enable=normal ;Policy=target=debugoutput;enable=normal ;Xkdc=target=debugoutput;enable=normal XkdcLog=target=log;enable=normal XkdcTicketLog=target=ticketLog;enable=normal [Mgmt.NTEvents] Default=Freq=Always ASKDC Configuration Settings from askdc.ini: Requires Restart: ; the app domain webstore should connect to. [UODB] AppDomain=UODB ; Specify the allowed time skew interval (in seconds) [KdcPolicy] TimeSkewSeconds=120 ; Specify ASKDC denial of service config settings [DoS] CheckForDos=1 NumDosEntries=5000 CacheTimeMillis=1000 [PPADos] CheckForDos=1 NumDosEntries=30000000 NumUodbPartitions=1 UodbPartitionKeys=0 UodbRetryIntervalMillis=500 [Passport] ; key version to use when building intermediate TGTs KeyVersion=1 [Mgmt.log.target] ;log=Type=File;Prefix=#LOGROOT#\ASKDC\;RotationTime=1440 ;remote=Type=Remote;Address=localhost [Mgmt.log.area] ;Base=target=debugoutput;enable=normal ;ASkdc=target=debugoutput;enable=normal ;ASkdcLog=target=log;target=debugoutput;enable=normal ;ASkdcLoadPPA=target=debugoutput;enable=normal ;blackbox=target=debugoutput;enable=normal [Mgmt.NTEvents] Default=Freq=Always Microsoft Confidential. Unpublished work.   2004 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  `Q`@Q`Q gdrIy gd4dm gd*3y qbqZRN tktkt gd?8g gd?8g gd?8g gd?8g yqyqi]yqy ZnFnFn qiaiaYaYQYQYQYQYQY yf[WOWO gd}eP gd}eP wow`T`PHw Microsoft Confidential. Unpublished work.   2004 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\xkdc\XKDC_Logging.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. XrlScan ISAPI filter Title _PID_HLINKSXrlScan ISAPI filter JeffreyA Template - Quick Spec.dot lohab Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags place sI,bl~ B0NRT9 .KZf$ 0J<c9XKDC Server Logging Standard  Author: Lawrence Ohab Purpose This document contains details pertaining to the log file implementation for the XKDC.  It will outline configuration facts about this execution, information that is displayed and the significance of this data.  The XKDC logging area follows guides set for Xbox Live servers defined in the document:  HYPERLINK "http://sts/xbox_online/Dev/LogPrinciples.doc"  http://sts/xbox_online/Dev/LogPrinciples.doc Please reference this document for more details on why log data is presented in a specific format. Configuration The XKdc utilizes the Xmgmt libraries for to produce logging records.  As a result, logging details can be managed from the XMGMT interface or askdc.ini file.  The logging areas are: XkdcLog XkdcTicketLog These areas produce messages for logging purposes.  Other areas exists which provide more in-depth descriptions of errors.   Data Format The XKdc provides 5 different log line entries to express the flow of information.  These 5 areas can be identified by their prefix marker.  The information following this marker gives an indication of a successful or failed execution.  Note that 2 of these entries are designed specifically for the Ticketlog.  The 5 entries are: XkdcLog Authentication Request FORMAT:  REQ|IP Address|client version|Title Id|Title Version|Title Region|MachinePUID| User PUID player 1|User Status player 1|BillingStatus Player 1| User PUID player 2|User Status player 2|BillingStatus Player 2| User PUID player 3|User Status player 3|BillingStatus Player 3| User PUID player 4|User Status player 4|BillingStatus Player 4|Services Requested|Site Granted|Services Attained|Ticket Lifetime|DWORD Status|KerbErr|  Prefix log identifier for the authentication request.  This item appears just as presented. IP Address   The IP Address of the client.  Presented in Hex format. Client Version   The Xbox client version.  Presented in a.b.c.d form.  Decimal. Title Id   The title id requested by the client. Hex. Title Version   the version of title requested.  Hex. Title Region   the region for this title.  Hex. Machine PUID   the machine PUID of the requesting client machine.  Hex. User PUID   The PUID of the user looking for authentication.  Hex. User Status   the DWORD user status of details about this user.  Hex. Billing Status   The billing hr status of the associated user.  Hex. Services Requested   A comma delimited string of all the services requested. Site Granted   the site the request has been granted access too. Services Attained   A comma delimited string of all the services attained by this request. Ticket Lifetime   Lifetime of the granted ticket.  Hex. DWORD Status   This value is a bit string that contains details of what path was taken to create the machine account and an indication of where failures may be occuring.  The meaning of each bit is defined in section 4. KerbErr   The kerb error generated while building the principle.  Indicates which this was a successful request or that something failed for a specific reason. Service Principals FORMAT:  SVP|site|type|flags|ip|service name|service id|title id|version|region|port|machine only|service available|ticket Lifetime|master key verion|key version|key length site   The site for the principal. Type   the type of the service. Flags   flags for this service.  IP of the service. Service   The service name. Service id   the id of the service requested.  Decimal. Title Id   title id of the service.  Hex. Version   version of the title.  Hex. Region   the region of the title.  Hex. Port   port for this service.  Hex. Machine Only   a flag that signals whether this service is machine access only. Decimal. Service Available   flag for indicating if a service is available or not.   Decimal. Ticket Lifetime   service lifetime for requesting tickets.  Decimal. Master Key Version   version of the master key.  Decimal.   Key version   the version of the key in the database for this service.  Decimal. Key Length   length of the key in the database.  Decimal. Title Version FORMAT:  TUV|Title Id|Base Version|Update Version|Beta Version Title Id   Title id of the title being loaded.  Hex. Base Version   the base version of the title in the UODB.  Hex. Update Version   the new version of the title.  Hex. Beta Version   beta version number of this title.  Hex. XkdcTicketLog User Ticket Log This message is printed to the ticket log  when the XKDC determines that the request contains valid users and requested services. FORMAT:  UTL|Title Id|machine PUID|PUID user 1|PUID user 2|PUID user 3|PUID user 4|Service List Title Id   The title id granted in the ticket.  Hex. Machine PUID   the machine PUID of the requesting client.  Hex. PUID user   PUID of the respective requesting user.  Hex. Service List   The list of services where permission has been granted. Ticket Log This message is printed for all issued tickets, even if they don t have valid users or services granted. FORMAT:  XTL|name|Client IP Address|Service List name   name given in the request. Client IP Address   IP address of the client.  Hex. Service List   list of services granted in the ticket. Bit String Formats The XKDC utilizes 2 different DWORD bit strings to display information.   User Status bit string This string is associated with each requested user.  It contains information attained from the UODB during the user policy check. #define XKDC_USERSTATUS_ACCEPTEDTOS (1 << 0) #define XKDC_USERSTATUS_NAMECHANGEREQ (1 << 1) #define XKDC_USERSTATUS_ACCTSUSPENDED (1 << 2) #define XKDC_USERSTATUS_VOICEBAN (1 << 3) #define XKDC_USERSTATUS_INVALIDUSER (1 << 4) Request Status Bit String This string represents the status of the request.   #define XKDC_REQSTATUS_NO_SERVICE_IDS (1 << 0) #define XKDC_REQSTATUS_SUCCESS_COMPLETE_CHECK (1 << 1) #define XKDC_REQSTATUS_INVALIDNAME (1 << 2) #define XKDC_REQSTATUS_LOADEDSERVICEPRINC (1 << 3) #define XKDC_REQSTATUS_INVALIDSERVID (1 << 4) #define XKDC_REQSTATUS_ISKRBTGT (1 << 5) #define XKDC_REQSTATUS_ISSG (1 << 6) #define XKDC_REQSTATUS_ATTAINED_SVCPRINC (1 << 7) #define XKDC_REQSTATUS_CHECKING_DOS (1 << 8) #define XKDC_REQSTATUS_DOS_ATTACK (1 << 9) #define XKDC_REQSTATUS_PASSED_DOS (1 << 10) #define XKDC_REQSTATUS_FAILED_MAC_POLICY_CHECK (1 << 11) #define XKDC_REQSTATUS_FAILED_TITLEID_POLICY_CHECK (1 << 12) #define XKDC_REQSTATUS_FAILED_USER_POLICY_CHECK (1 << 13) #define XKDC_REQSTATUS_FAILED_SERVICES_POLICY_CHECK (1 << 14) #define XKDC_REQSTATUS_PASSED_POLICY_CHECK (1 << 15) #define XKDC_REQSTATUS_SUCCESSFUL_PRINC (1 << 16) #define XKDC_REQSTATUS_INVALID_REALM (1 << 17) #define XKDC_REQSTATUS_SUCCESSFUL_TICKET (1 << 18) #define XKDC_REQSTATUS_TGT_PRIOR_TO_PASSWORD_RESET (1 << 19) #define XKDC_REQSTATUS_MACHINE_ACCOUNT_BANNED (1 << 25) #define XKDC_REQSTATUS_NO_MACHINE_ACCOUNT_IN_UODB (1 << 26) #define XKDC_REQSTATUS_INVALID_REQUEST (1 << 27) #define XKDC_REQSTATUS_USING_INVALID_SITE (1 << 28) #define XKDC_REQSTATUS_CONNECTION_FAILURE (1 << 29) #define XKDC_REQSTATUS_NO_REQ_DATA (1 << 30) #define XKDC_REQSTATUS_GENERALERROR (1 << 31) Microsoft Confidential XMACS Logging Standard Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\test\XMACS Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Kevin Goodier Xbox Live Test Plan Template.dot Kevin Goodier Microsoft Office Words\{L@F vcz\tT HYPERLINK \l "_Toc100033031"  Table of Contents  PAGEREF _Toc100033031 \h   HYPERLINK \l "_Toc100033032"  Summary  PAGEREF _Toc100033032 \h   HYPERLINK \l "_Toc100033033"  Schedule  PAGEREF _Toc100033033 \h   HYPERLINK \l "_Toc100033034"  Goals  PAGEREF _Toc100033034 \h   HYPERLINK \l "_Toc100033035"  Non-Goals  PAGEREF _Toc100033035 \h   HYPERLINK \l "_Toc100033036"  Related Documents  PAGEREF _Toc100033036 \h   HYPERLINK \l "_Toc100033037"  Overview  PAGEREF _Toc100033037 \h   HYPERLINK \l "_Toc100033038"  Functional Testing  PAGEREF _Toc100033038 \h   HYPERLINK \l "_Toc100033039"  Summary  PAGEREF _Toc100033039 \h   HYPERLINK \l "_Toc100033040"  New Test Cases for M1 Milestone  PAGEREF _Toc100033040 \h   HYPERLINK \l "_Toc100033041"  8.2.1 Configuration Database  PAGEREF _Toc100033041 \h   HYPERLINK \l "_Toc100033042"  New Test Cases for M2 Milestone  PAGEREF _Toc100033042 \h   HYPERLINK \l "_Toc100033043"  New Test Cases for M3 Milestone  PAGEREF _Toc100033043 \h   HYPERLINK \l "_Toc100033044"  8.4.1 Mainstream tests  PAGEREF _Toc100033044 \h   HYPERLINK \l "_Toc100033045"  8.4.2 Machine exists in UODB  PAGEREF _Toc100033045 \h   HYPERLINK \l "_Toc100033046"  Existing Reusable Test Cases  PAGEREF _Toc100033046 \h   HYPERLINK \l "_Toc100033047"  Stress Testing  PAGEREF _Toc100033047 \h   HYPERLINK \l "_Toc100033048"  Revision History  PAGEREF _Toc100033048 \h   HYPERLINK \l "_Toc100033049"  XMACS Configuration Settings  PAGEREF _Toc100033049 \h  Summary The Machine Account Creation Service (XMACS) creates accounts for an Xbox the very first time it signs on to Xbox Live.  This is the only time the Xbox talks with the XMAC server. M1 Milestone The XMAC and XKDC services are being combined into one server cluster.  There will be minimal changes to the service code itself but there will be big changes in the way configuration is being loaded.  With the addition of the configuration database, the XMAC service will load its configuration information from a configuration database instead of a local initialization file.  This test plan will document my approach to make sure these changes will be well tested for eventual production deployment. M2 Milestone No work. M3 Milestone There is now a Xenon AS request in addition to the Xbox AS request for machine account creation.  Xenon requests do not require geneology, as they use a set of private and public keys to ensure their identity.  We are still collecting geneology information which will be used as a fallback.  This is not implemented in M3. M4 Milestone Reminder: Test Xenon geneology. Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M1 Milestone Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases.  There is no required stress testing for M1 so the  Test Stress Code Complete  and  Test Stress Complete  deliverables do not apply to this milestone. M2 Milestone M3 Milestone 95%+ passing positive test cases and 95%+ passing negative test cases. Goals This section lists what will be covered for each milestone. M1 Milestone New test cases to validate the new configuration settings being pulled from the configuration database vs. the previous local initialization file method. Simultaneous execution of XMAC and XKDC tests to validate server consolidation. Run old functional and stress tests to verify that there have been no behavior changes in server since the previous release. M2 Milestone M3 Milestone New test cases for Xenon requests.  This is a brand new request type. Run existing tests to make sure nothing broke. Non-Goals This section lists what will not be covered for each milestone. M1 Milestone M2 Milestone M3 Milestone Related Documents $corext\private\doc\server\kdc\xmacs\Xbox Machine Account Creation Server--FINAL.ppt $corext\private\doc\common\Server Consolidation.doc -- XMACS and XKDC are being combined onto one server. $corext\private\doc\common\config\CommonConfigDevSpec.doc   configuration database replaces .ini files. $corext\private\doc\common\xenon-m1-setup.doc   changes to how setup is done across the service.  HYPERLINK "http://sts/Xbox_Online/Test/XMACS Server Test Plan.doc"  http://sts/Xbox_Online/Test/XMACS Server Test Plan.doc  -- The earlier version of the XMACS test plan. Overview The first interaction an Xbox ever has with the Xbox Online service is connecting to the Xbox Machine Account Creation Service (XMACS) and creating an account for itself.  This account must be used to authenticate with Passport before getting any further access to Xbox Online services. When a Xbox goes online for the first time, it sends authentication information to the XMACS.  This information includes the Xbox s unique serial number and some data encoded with its unique  online key , in a Kerberos AS-REQ.  The XMACS verifies this data against the Genealogy Database to validate the Xbox.  After the Machine Passport is created successfully, it is entered into the User Account Database (UODB) and the username and password are sent to the Xbox. Xenon clients will use a new protocol, which also overloads Kerberos in the same manner.  Xbox 1 used symmetric keys to authenticate the console.  Xenon will use public key cryptography and certificates to authenticate Xenon consoles.  The XMACS server will be backwards compatible. Functional Testing Summary There are two main goals of the functional test cases for the XMACS server. Verify the entire Kerberos/AS cycle works correctly from the client to and from the XMACS server. Verify creation and renewal of machine accounts. There will also be test cases to make sure that the XMACS does not respond to Kerberos/TGS or Kerberos/AP.  M1 Milestone For milestone M1, we have the additional goals of testing: Integrity of XMACS/XKDC server consolidation.  The components remain separate but will run on the same server.  We will test that the XMACS does not respond to XKDC requests. Use of Configuration Database for all settings. M2 Milestone No work. M3 Milestone Basic mainline and negative test cases for new Xenon protocol. Approximate duplication of existing Xbox XMACS tests using the Xenon request. Shallow testing of crypto system, such as using different keys, flipping bits, etc.  This will change on the client, and may require corresponding server changes, so deep testing at this point seems unwise. M4 Milestone Test Xenon geneology fallback system. New Test Cases for M1 Milestone Configuration Database Each individual setting will be tested as well as global behavior. CONFIGDB_SETTINGS: For each setting in the configuration database, the following three tests will be performed: Initialize   Using the management commands, verify that the setting matches what is in the configuration database after server has initialized.   Reconfigure   Using the mamagement commands, snapshot the current setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take effect (only applies to settings requiring a restart). Undo   Using the management commands, snapshot the current setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect.  Now change the setting back to the original value and using the management commands, verify that it is set back to the original value and does not require a restart of the service. Implementation note: Reconfigure and Undo can be consolidated into one test. The settings have been moved to Appendix   REF _Ref87931284 \r \h  \* MERGEFORMAT  Error! Reference source not found. CONFIGDB_NO_CONNECTION: No connection available to configuration server.  XMACS should raise an error and entering a polling loop, waiting for a response. New Test Cases for M2 Milestone No work for XMACS in M2. New Test Cases for M3 Milestone Currently, our test environment uses fake keys generated by a tool dcaiafa wrote.  This includes the MasterSigningKey and MasterXMACSKey.  The Xenon client is expected to store OnlineRSAKey.Private and a certificate, encrypted with MasterSigningKey.Private, that contains the ConsoleID, a timestamp, and OnlineRSAKey.Public.   Inputs in console request to XMACS: pre-auth encrypted session key (encrypted with Xmacs key) authtime sha1(session-key) sign(authtime || sha1(session-key)) console certificate console id console part number console type manufacturing date game region console public key signature (RsaSign(MasterKey.Private, Sha1(abHash1 || abHash2))) principal name (built from console id) Keys used for encryption/decryption/signing: MasterSigningKey [global] MasterXmacsKey [global] OnlineRSAKey [per console] The actual console certificate structure looks like: struct CONSOLE_CERTIFICATE     WORD   cbCertSize;     BYTE   abConsoleId[5];                          // Uniquely ids console     BYTE   abConsolePartNumber[8];                  // Identifies mfg part number     DWORD  dwConsoleType;                           // Console is a retail or dev/test kit     UINT64 qwManufacturingDate;                     // Date of mfg for console     UINT64 qwGameRegion;                            // Game region     CONSOLE_PUBLIC_KEY ConsolePublicKey;            // Console's Public Key //    BYTE   abHash1[CONSOLE_CERTIFICATE_HASH_SIZE];          // Sha1(abConsoleId 'til ConsolePublicKey) //    BYTE   abHash2[CONSOLE_CERTIFICATE_HASH_SIZE];          // Sha1(ConsolePublicKey)     BYTE   abSignature[256];                        // RsaSign(MasterKey.Private, Sha1(abHash1 || abHash2)) struct CONSOLE_PUBLIC_KEY     BYTE abPublicExp[4];     BYTE abModulus[128]; As agreed upon by dcaiafa and vanvan, all fields will be stored little-endian except for abConsoleId, which is big-endian (due to the 4-bit checksum at the end). Mainstream tests Simple_Valid Create valid Xenon devkit account using default console certificate ( XE.123456789016 0x2DFDC1C356 XE.123456789016 PrincipalName_Invalid Use the default console certificate (for  XE.123456789016 ).  Sign in various with various principal names (the gamertag) grouped into 3 categories: Wrong console id (doesn t match certificate), wrong checksum nibble XE.000000000010 XE.123456789026 XE.999999999993 XE.101010101010 Correct console id, wrong checksum nibble XE.123456789010 0x2DFDC1C350 Wrong console id, correct checksum. XE.123456789027   [Svc_Unavailable] XE.101010101016 [Svc_Unavailable] XE.000000000011 [Svc_Unavailable] XE.999999999999 0x0000000000 For #1 and #2, the console id will be invalid, as seen by the XMACS server, and for #3, the console id is valid but won t match the console cert.  All tests should fail.  All tests should result in no response from XMACS except the ones marked otherwise.  3.d and 3.e have invalid console ids (too big, too small).  ConsoleIdsAndKeys_Valid Create new console certificates for various valid console id s.  The gamertag is correct and matches the console id.  Also use different values for the key. 0x2DFDC1C356 XE.123456789016 XE.123456789027 XE.103406789020 XE.103406789020 key 0xAA0000000000000000000000000000BB 0x0000000022 0x0000000107 0x0000000011 ConsoleIdsAndKeys_Valid_Verify Similar to ConsoleIdsAndKeys_Valid, using various interesting console ids, gamertags, and keys.  The difference is we verify the account was actually created by signing in to the ASKDC with the machine account. XE.123456789016 XE.103406789020 key 0xAA0000000000000000000000000000BB XE.000000000011 XE.101010101016 XE.101010101016 key 0x99999999999999999999999999999999 0x2DFDC1C356 key 0x00000000000000000000000000000001 0x2DFDC1C356 key 0x0123456789ABCDEF0123456789ABCDEF XE.687194767353 (max id, correct checksum) 0xFFFFFFFFF3 (max id, correct checksum) ConsoleIdsAndKeys_InvalidChecksums Create new console certs, use console ids / gamertags with invalid checksums.  XE.123456789020 XE.103406789029 XE.103406789021 key 0xAA0000000000000000000000000000BB 0x2DFDC1C350 0x0000000020 0x0000000101 0x0000000001 0xFFFFFFFFFF ConsoleIdsAndKeys_InvalidGamertags Poorly formatted gamertags, console id should be valid. xe.123456789016 SN.123456789016 sn.123456789016    123456789016   .123456789016 00.123456789016 000123456789016 000000000000011 SN.123456789010    123456789010 ConsoleIdsAndKeys_InvalidGamertagsMismatchCert Poorly formatted gamertags with mismatched gamertag from console id (that means we don t re-sign the certificate). SN.000000000011    000000000011   .000000000011 sn.000000000011 ConsoleIdsOverflow_Invalid1 The gamertag (11 digits) is capable of encoding more than the console id (36 bits).  The server should catch any gamertags that encode a too-large console id.  Expect no response. Correct checksum for gamertag, incorrect for binary id XE.999999999999 XE.999999999988 XE.999999999999 ConsoleIdsOverflow_Invalid2 Note that XE.999999999999 = 0x74876E7FF9 = XE.312805232639, checksum = 5 XE.999999999999 0x74876E7FF9 XE.312805232639 XE.999999999995 Valid versions (with correct checksum) 0x74876E7FF5 XE.312805232635 ConsoleIdsOverflow_Invalid3 Incorrect checksum for gamertag, correct for binary id XE.999999999993 XE.999999999982 XE.999999999971 ConsoleIdsOverflow_Invalid4 Max binary console id +1, +2, +3, with correct checksum for gamertag, incorrect for binary id XE.687194767364 XE.687194767375 XE.687194767386 ConsoleIdsOverflow_Invalid5 Max binary console id +1, +2, +3, with incorrect checksum for gamertag, correct for binary id XE.687194767360 XE.687194767371 XE.687194767382 KerbRealm_Invalid Created valid accounts with proper console ids and gamertags, but with bad Kerberos realms.  The correct realm is MACS.XBOX.COM. XBOX.COM PASSPORT.NET MACS XBOX.COM  MACS.XBOX.COM MACS.XBOX.CO krbtgt MachinePuid_Verify Work item 13326. Make Xbox XMACS request.  Puid should begin with 0x0009.   Make Xenon XMACS request.  Puid should begin with 0xFA00.   Console Certificate ConsoleCert_ConsoleType Test various console type values in the certificate.  Re-sign certificate and make request; should succeed. XE.000000000112 ConsoleType=0 XE.000000000123 ConsoleType=1 XE.000000000134 ConsoleType=2 XE.000000000145 ConsoleType=int.MaxValue ConsoleCert_ConsoleType_Mismatch Test various console type values in the certificate.  Do not re-sign the certificate, thus producing a certificate that doesn t match its signature.  Request should fail. XE.123456789016 ConsoleType=0 (should pass) XE.123456789016 ConsoleType=1 XE.123456789016 ConsoleType=int.MaxValue ConsoleCert_Size_Invalid Make requests with valid certificates except they have the cbCertSize field set incorrectly. size +1 size -1 size 0 size short.MaxValue ConsoleCert_Reserved_Invalid Note: this field isn t implemented yet, awaiting changes to structure. The reserved field, according to Van, must be all zeroes. Test cases where this is not so. first byte is 1 last byte is 1 max value ConsoleCert_PublicKey_Invalid Test poorly formed public keys, which includes an exponent field and a modulus field. exponent 0 modulus all 0x0000... modulus all 0xFFFF Machine exists in UODB These are machine account reset calls. MachineExists Machine account already exists in UODB, should reset the account.  This will generate a new key, generate new PPA data for the database, reset the password in the database, and reset the password reset date. XE.000000000202 MachineBlocked For a machine that already exists in the UODB, if the blocked date is less than the current date, then the request should fail. XE.000000000101 [populated by dbposter to set blocked date in the past] Existing Reusable Test Cases [XmacsCreate] Simple: Create an account [XmacsCreate] Mainline: Create several accounts, both devkit and real [XmacsCreate] BadKey: Create accounts with invalid keys [XmacsCreate] BadRealm: Create accounts with invalid realms [XmacsCreate] NotInGenealogyButInUODB: Create accounts that aren't in GeneDB but are in UODB [XmacsCreate] TimeSkew: Create accounts from a time-skewed client [XmacsCreate] Blocked: Create accounts that are blocked in UODB [XmacsCreate] Repeat: Create accounts a number of times to test the DOS cache [XmacsCreate] BadNames: Create accounts with invalid names [XmacsMultiKey] Simple: Create accounts for single serial/multiple keys to test QFE002 [XmacsMultiKey] Complex: Create several accounts for single serial/multiple keys to test QFE002 [XmacsMultiKey] BadKey: Create accounts with good and bad keys for single serial/multiple keys to test QFE002 [XmacsMultiKey] Reset: Create accounts and reset password for single serial/multiple keys to test QFE002 [XmacsMultiKey] Repeat: Create accounts a number of times for single serial/multiple keys to test QFE002 Stress Testing M1 Milestone:  No stress testing will be performed for this milestone due to the functional changes being validated in this timeframe. M2 Milestone:  M3 Milestone:  A baseline TPS measurement will be made, along with trial 24-hour and 72-hour runs to verify the correctness of the stress tools and make sure nothing catastrophic happened to the server in the past 3 milestones.   Revision History Changes made Author 6/8/2004 First Draft kgoodier 3/21/2005 M3 updates kgoodier 3/31/2005 M3 updates after review.  Reviewed 3/1/2005 by kgoodier, dcaiafa, vanvan. kgoodier XMACS Configuration Settings XMACS Configuration Settings from xmacs.ini: Requires Restart: [MACS] UseNCipher=#USENCIPHER# DOSStage1CacheTimeout=#STAGE1CACHELIFE# DOSStage2CacheTimeout=#STAGE2CACHELIFE# MaxAllowancePerHour=#MAXALLOWANCEPERHOUR# PUIDBlockSize=#PUIDBLOCK# Domain=xbox.com KeyEncryptionKeyVersion=1 WebStoreBuckets=#WEBSTOREBUCKETS# AcceptDevKits=#ACCEPTDEVKITS# ClientRetryInterval=2000 PPAMaxEntries=#MAXPPAENTRIES# PPALoaderSleeptimeInSecs=3600 NCipherInitTimeoutInSecs=10 HashListPercentageWarning=80 ; DisableDoS=1 [Genealogy] SqlServerName=#GENSQLSVR# SqlServerDb=Genealogy ConnectTimeout=20 [UODB] AppDomain=UODB [KdcPolicy] TimeSkewSeconds=300 [Mgmt.log.target] log=Type=File;Prefix=#LOGROOT#\XMACS\;RotationTime=60;RotationSize=1000000000 ;remote=Type=Remote;Address=localhost [Mgmt.log.area] ;XMACS=target=debugoutput;enable=normal XMACSLog=target=log;enable=normal ;PPALoader=target=debugoutput;enable=normal ;DOS=target=debugoutput;enable=normal ;Base=target=debugoutput;enable=normal [Mgmt.NTEvents] Default=Freq=Always Microsoft Confidential. Unpublished work.   2004 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2004 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  `Q`@Q yuynfb^bZb^bZbVbZ gd. k gdrIy gd. k gd. k gd*3y gd*3y ~zvrjbj ~v~vk tdtdtdtdtdtdt gdY+K zvrnjbj^jvVNv
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\xmacs\Xbox Machine Account Creation Server--FINAL.ppt ===
Xbox Machine Account Creation Server XMACS Lawrence Ohab Outline What is XMACS? Machine Account Creation Process External Dependencies Genealogy nCipher UODB/XMACSFD Starting XMACS Advanced XMACS What is XMACS? Machine account creation server. XMACS is an AS KDC server that services AS requests. Why not use ISAPI like UACS? XMACS provides all machine account information in the AS replies PreAuth Data. What about that ticket? Genealogy Database nCipher The nCipher device in an integrated component of the XMACS server. The Xbox Online Private key is stored in a heavily encrypted file on the harddrive. For an nCipher device to be able to read this file, it must first be added to the Xbox security world.  This process requires 2 admin cards which are currently locked up. Once part of this security world, the nCipher device can read this private key file. All programs that desire the use of this device are must be authorized before given a handle for decrypting/encrypting.  The authorization comes from an operator card that must be present while the service/executable is trying to acquire a handle. XMACS passes the 128 byte data blob to the nCipher device which performs the 1024 bit private key decryption and returns a 16 byte online key. Stage 1 Complete UODB and XMACSFD The XMACS FD accepts http requests and performs queries on the UODB. The front door will only permit certain stored procs to be called. Any errors that occur during the webstore/sql transactions are logged in the XMACSFD server.  XMACS only gets a 500 http code if a problem occurs. The UODB stores all machine account in a similar style to user accounts.  Machines have entries in both t_user_names and t_user_keys.  The exception is that additional machine specific information is stored in t_machines. The UODB also stores important service keys and PUID data. Starting XMACS During startup, XMACS will attempt to talk to all dependencies for different reasons.   Some interactions during startup are critical.  Other interactions are required for creating accounts but not for startup. XMACS also requires 1 operator card to be present in the nCipher device during startup.  Events are logged to indicate when it is safe to remove this card. Advanced XMACS Around the basics of creating a machine account, XMACS uses a few more advanced tricks to ensure security and performance. These include: Key management. Pre-PreAuth data and loading Replay DoS Cache. PUID management. Key Management Pre-PreAuth Data Replay DoS cache PUID Management XMACS grabs blocks of PUIDs from the UODB.  Usually, these block are composed of 256 unique PUIDs. XMACS has a worker thread that is responsible for attaining these PUIDs from the UODB when its block has run out. Click to edit Master title style Click to edit Master text styles Second level Third level Fourth level Fifth level Connect via OLEDB Request Online Data for desired serial number 1.  Send an AS Request Machine Account Creation Process XMACS Genealogy DB INTERNET 1.  Send an AS Request Machine Account Creation Process XMACS Genealogy DB INTERNET   Base 64 decode the encrypted Online data for the requested machine.  That will give us a 128 bytes of 1024 bit private key encrypted data.   Pass information to the nCipher device for decryption. Request serial number data. Reply with 172 bytes of encrypted data for serial number. nCipher Machine Account Creation Process XMACS Genealogy DB INTERNET nCipher XMACS FD Webstore HTTP Requests   Construct the name for the given serial number.  Eg. SN.############   Create/Reset the account in the UODB. Does account already exist? (Query UODB t_user_names) Query for machine  information  (block date, t_machines) Is account blocked? Reset account  password (t_user_keys) Set Reset Date **  (t_machines) Silent  Kerb error Return  Kerb 0x16 Service not  failure Success Send Reply  with machine  name and  password  to client. Success Get a new PUID and  generate a new password Add machine and password  to UODB (t_user_names, t_user_keys) Return Kerb  Err 0x1D Add machine information (t_machines) Success Success Success failure failure Connect via OLEDB Request Online Data for desired serial number 1.  Send an AS Request Machine Account Creation Process XMACS Genealogy DB INTERNET   Verify PPA data for the request.   Look up entry in DoS cache table. Machine Account Creation Process XMACS Genealogy DB INTERNET nCipher XMACS FD Webstore HTTP Requests   Construct the name for the given serial number.  Eg. SN.############   Create/Reset the account in the UODB.   Re-Acquire the cache node for this entry. F(_9G f(QF. CIBy- CPRPF <>{S2 R_>6d q[5%8 n&79G R) 5h t*z)* h?Ia@ _K0[@#[ 5kOl4g E\#?  mxLOg $,tv# z&Iusl s.J)r 5a4>aP MZ],P$:Y] ~eg''4 tBbdf v8OmU {}\K% IjN?@&P eOS|j9A %-IaEd af3i39  :3>>N @#|nD r?@nR {-(Q# '~o(Q $kT"X"M cr-,' K|1cL =-wUS S>S*b ([?=AW FBD1I w#[oW d8H)S [7<o[w:T 77EYx c<PS4 65.>,\ oh{zW+g ge`5K 39Cfa9; (>8~;] dPulp kws!|n *T^hQY V`hUt .+Ej> ewD:X AO{81 aO&sH/du# ('~Uy ^JY?\i /~tBn 4Aq~- -#58[$5 6Pvjp _g,wN? Xbox Machine Account Creation Server lohab lohab Microsoft PowerPoint Book Antiqua Xbox Machine Account Creation  "System Book Antiqua Server Bookman Old Style XMACSr XMACSr "Arial Narrow Lawrence Ohab On-screen Show Microsoft Corporation Arial Book Antiqua Bookman Old Style Arial Narrow Wingdings Default Design Microsoft PowerPoint Presentation Xbox Machine Account Creation Server XMACS Outline What is XMACS? Slide 4 Genealogy Database Slide 6 nCipher Stage 1 Complete Slide 9 UODB and XMACSFD Stage 2   Creating the Account Starting XMACS Advanced XMACS Key Management Pre-PreAuth Data Replay DoS cache Slide 17 Slide 18 PUID Management Fonts Used Design Template Embedded OLE Servers Slide Titles _AdHocReviewCycleID _EmailSubject _AuthorEmail _AuthorEmailDisplayName _PreviousAdHocReviewCycleID RE: Slides for XMACS Presentation garyt@xbox.com Gary Thompson (XBOX) lohab Larry Ohab
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\xmacs\Xmacs Usage and Maintenance.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template lohab Xbox Online Doc Template.dot lohab Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags PersonName urn:schemas-microsoft-com:office:smarttags Month 8t;^& py|;vB Complete  Table of Contents  TOC \o "1-2" \h \z \u   HYPERLINK \l "_Toc22967870"  Table of Contents  PAGEREF _Toc22967870 \h   HYPERLINK \l "_Toc22967871"  Introduction  PAGEREF _Toc22967871 \h   HYPERLINK \l "_Toc22967872"  Design  PAGEREF _Toc22967872 \h   HYPERLINK \l "_Toc22967873"  Purpose  PAGEREF _Toc22967873 \h   HYPERLINK \l "_Toc22967874"  Process Description  PAGEREF _Toc22967874 \h   HYPERLINK \l "_Toc22967875"  Starting XMACS  PAGEREF _Toc22967875 \h   HYPERLINK \l "_Toc22967876"  Reloading XMACS  PAGEREF _Toc22967876 \h   HYPERLINK \l "_Toc22967877"  DevKits  PAGEREF _Toc22967877 \h   HYPERLINK \l "_Toc22967878"  Dependencies  PAGEREF _Toc22967878 \h   HYPERLINK \l "_Toc22967879"  Pre-PreAuth Data  PAGEREF _Toc22967879 \h   HYPERLINK \l "_Toc22967880"  PUID Management  PAGEREF _Toc22967880 \h   HYPERLINK \l "_Toc22967881"  DoS Caching Implementation  PAGEREF _Toc22967881 \h   HYPERLINK \l "_Toc22967882"  Key Management  PAGEREF _Toc22967882 \h   HYPERLINK \l "_Toc22967883"  Events  PAGEREF _Toc22967883 \h   HYPERLINK \l "_Toc22967884"  Informational  PAGEREF _Toc22967884 \h   HYPERLINK \l "_Toc22967885"  Warnings  PAGEREF _Toc22967885 \h   HYPERLINK \l "_Toc22967886"  Errors  PAGEREF _Toc22967886 \h   HYPERLINK \l "_Toc22967887"  Initialization Management  PAGEREF _Toc22967887 \h   HYPERLINK \l "_Toc22967888"  Settings  PAGEREF _Toc22967888 \h   HYPERLINK \l "_Toc22967889"  Logging Areas  PAGEREF _Toc22967889 \h   HYPERLINK \l "_Toc22967890"  Management Console  PAGEREF _Toc22967890 \h   HYPERLINK \l "_Toc22967891"  Standard Commands  PAGEREF _Toc22967891 \h   HYPERLINK \l "_Toc22967892"  KDC Management Commands  PAGEREF _Toc22967892 \h   HYPERLINK \l "_Toc22967893"  XMACS Exclusive Commands  PAGEREF _Toc22967893 \h   HYPERLINK \l "_Toc22967894"   PAGEREF _Toc22967894 \h   HYPERLINK \l "_Toc22967895"  Revision History  PAGEREF _Toc22967895 \h  Introduction This document gives an overview of the Xbox Machine Account Creation Server (XMACS).  It will describe the basic functionality of XMACS and how it interacts with its dependencies.  The document describes details of XMACS Xmgmtc  interface covering what is available and how to use it.  The contents and setting for XMACS s ini file are defined.  The document also contains a section for FAQ questions.  This section contains frequently seen problems encountered when setting up XMACS.  The sections goal is to provide insight on how to handle these issues or give hint on possible similar issues. Design Purpose XMACS is the machine account creation server.  Its role is to authenticate all valid Xbox consoles and create a machine account in the UODB for that machine.   Process Description All the components described in this process are described in further detail within their respective sections.   XMACS procedure is straightforward but reliant on numerous dependencies.  The Xbox is responsible for sending a Kerberos AS request to XMACS containing the unit s serial number.  Once XMACS receives this request, it retrieves the serial number and  Pre-PreAuth (PPA) data.  Using this PPA data, XMACS will scan its  Black Box  hash table and verify that this is a real Xbox.  Once the account is verified, XMACS then lookups up this entry in its DoS cache table.  If the entry exists in the table, XMACS uses the cached information to verify the online key and return previously acquired PreAuth data.  Note that the values in this cache have a lifetime associated with them.  The configuration file settings for this are DOSStage1CacheTimeout, for machine verification, and DOSStage2CacheTimeout, for PreAuth data.  These cache values will be renewed once their lifetime has expired.  Please view section 4.1.1 for details about this setting.   If the entry is not found, XMACS will acquire a new cache node for the entry and begin the setup process.  This setup process first consists of gathering verification information.  XMACS will use the acquired serial number and query the Genealogy database for this entry.  When it has this entry XMACS will utilize the nCipher device to decrypt the data associated with this serial number.  It will then verify that the data in the database is correct.  This data is then copied into the cache and the cache node is released for viewing by other threads.  The data is then submitted to the KDC core for authentication. When the KDC core determines that this is the correct password, it will try to build the  Pre-Auth  data for this machine.  This Pre-Auth data is in fact the machine account.  The cache node is once again acquired as XMACS sends a request to the XMACSfd to determine if the UODB has already has this entry.  If the entry is found, XMACS resets the password in the UODB and returns the client its new information.  If the entry is not found, XMACS gets a PUID for this serial number and generates a new password.  It then sends requests to XMACSfd to insert this entry in to the t_user_names/t_user_keys tables and t_machines table, respectively.  Once this is done XMACS sends this data back to the requesting Xbox console. Starting XMACS XMACS is a service and should be managed from the service manager.  You can also start XMACS from the command prompt by typing: net start xmacs The start procedure causes XMACS to talk all of its dependencies.  In turn, XMACS will produce a series of event logs that will indicate whether XMACS is starting properly or not.  Should XMACS fail to initialize enough memory for its 2 hash tables or fail to talk to an nCipher device then it will fail to start.  You will see an event for the failed dependency and an event claiming an unsuccessful start to XMACS.   If XMACS fails to talk to the Genealogy database during startup, it will continue to constantly poll (on a one minute interval between retries) this database until it comes online.  XMACS will produce informational event logs for when it has begun the process of reading Genealogy data and when it successfully completes this task.  It will produce caution and error logs if something fails during this time. If XMACS fails to talk to the UODB, it will constantly poll the UODB (on a 5 second interval between retries) until it is successful.  It does this polling while it attempts to attain a new block of PUIDs.  XMACS also attains service key information (for the key encryption key) from the UODB during start up, however if this fails, it will only try again during the first request or a machine account. Reloading XMACS XMACS does have a reload feature available through the XMGMT console.  The method of executing the reload command is further described in section 6.2.  This section describes what action are carried out when performing a reload. During the reload process XMACS will perform the following functions: Reloads data variables including values for key encryption key version.  Note that XMACS does not reload config values from the file.  This feature mainly re-initializes these values.  This should be changed for future versions. Re-attains service keys from UODB. Gets a new block of PUIDs for XMACS. Wakes up the PPA loader thread to attain the newest entries in the Genealogy database. This command is thread safe and can be called while XMACS is still handling requests. DevKits DevKits are a special case for XMACS.  DevKits do not carry real genealogy information.  They do contain a standard key that is shared by all devkits.  DevKits also contain a special serial number that they present to attain an account.  It s not the serial number of the box but rather a combination of the machines MAC address and two 9 s in the ninth and tenth positions of the serial number.  Once XMACS identifies this serial number, it adds the entry to the PPA table so that and reads a special  999999999999 s entry from the genealogy database.  XMACS continues from that point to create a machine account for that DevKit. Two step are required to make XMACS accept DevKits.  First, in the xmacs.ini file, the AcceptDevKits setting should be set to 1.  Second, add the special  999999999999 s entry to the information in the Genealogy database.  There is a script file containing this information and the correct key.  Both step are necessary for XMACS to accept DevKits. Dependencies XMACS is dependent on 3 separate external resources for successful operation.  Once any one of these components fails to interact with XMACS, the service will be unable to create machine accounts.  Events are logged with descriptive messages should any problems occur. Genealogy The Genealogy database is a listing of all Xboxes and online machine information.  The database contains a listing of all part numbers and a huge table of machines.  XMACS runs the stored procedure (p_xbox_get_machineinfo) which scans the machine table for the desired entry.  In addition, the Genealogy database also stores PPA data used by XMACS.  XMACS reads these PPA values from Genealogy using the stored procedure p_xmacs_get_ppadata.  For detail on how this works please see section 3.7. nCipher Device The nCipher device is used to decrypt information stored in the Genealogy database.  When XMACS starts, it requires that nFast has been installed and the nFast service is running.  During the start up processes, XMACS also requires that the operator card is inserted within the nForce device.  This card is only required at startup and can be removed once the event (XEVENT_XMACS_NCIPHER_SUCCESSFULLY_ATTAINED_CRYPTO_KEYS) shows up in the event log.  From that point XMACS maintains a handle to the information managed by this device.  The nCipher card is not requested for an XMGMTC reload. UODB and XMACSFD The UODB is where machines account information is stored.  XMACS uses this database to determine if the machine account already exists and to create/modify the properties of that account.  The UODB is also where XMACS attains PUID blocks for account.  It stores an encrypted version of the key encryption key that is used to encrypt machine keys in the database.  Communication with the UODB is currently done through the XMACSFD.  This server simply takes ISAPI requests from XMACS and performs SQL queries through webstore on the UODB.  All errors encountered during this query are logged in the event log of the XMACSFD server.  The only thing XMACS will know is that it received a 500 http code from the server.  The XMACSFD ini file contains a list of all stored procedures this server is allowed to execute.  They are separated into 2 lists.  A read only stored procedure list and a write then read list.  These lists correspond to the type of Webstore database the command will be executed on. (FUTURE NOTE:  It is possible to pass the error message from the XMACSFD to XMACS.  For future versions of this system, we should get the XMACSFD to pass that data back with the 500 http code.  This will allow people to see and debug this problem from 1 server as opposed to 2 of them. ) Pre-PreAuth Data Pre-Pre Auth data is the XBOX Live mechanism for preventing the amount of work we do for denial of service attacks.  Without this implementation, we were forced to do a database lookup in Genealogy for every entry that is presented to XMACS, with the exception of reply packets that are contained by the DoS Cache described in section 3.9.  PPA data is generated from machine information.  The 2 important keys here are the serial number and the online key on the Xbox. PPA Data Format Whenever a new principal entry is added to the system, the following fields are computed:  PPA1 = SHA1-HMAC (PrincipalKey, PrincipalName) SPPA1 = SHA1 (PPA1) PPA2 = First8bytesOf (SHA1-HMAC (PrincipalKey, PrincipalName | PrincipalName)) Besides storing the Principal Name(serial number) and Principal Key(online key) in the database, we also store SPPA1 and PPA2. XMACS reads all the rows for all the principal entries and builds up an in memory hash table containing the following 16 bytes in each entry: The first 4 bytes of SHA1 (PrincipalName) The first 4 bytes of SPPA1 All 8 bytes of PPA2 The first 8 of the above 16 bytes is used as the key to the hash table lookup and the remaining 8 byte PPA2 is used after the look up. If memory is tight, the 8 byte PPA2 data can be omitted. PPA Management during Requests During a machine account request, the client builds the pre-pre-auth data structure (XKERB_PA_XBOX_PPA) and sends it in the clear to XMACS. Inside the XKERB_PA_XBOX_PPA structure, the currentTime is filled in with the current time and PPA1 is also computed and filled in. Instead of directly including PPA2, SPPA2@T is computed and included in the XKERB_PA_XBOX_PPA structure: SPPA2@T = SHA1 (PPA2 | CurrentTime) XMACS can easily compute SHA1 (PrincipalName) and SPPA1 and perform a hash table lookup to find the corresponding entry for every request.  If no entry is found then the request is denied with a kerb error (KDC_ERR_PREAUTH_FAILED).  A corresponding log is also made in the event logs under the event id, XEVENT_XMACS_INVALID_PRINCIPAL. If the hash table entry is found, then PPA2 can be retrieved and SPPA2@T can be computed (using the time included in the pre-auth) and verified to match the value sent in. If the included time in the pre-pre-auth is not within a time skew of the current time, then a KRB_AP_ERR_SKEW error will need to be returned along with the correct current time. The whole PPA2 step can be omitted if memory is tight and only 8 bytes can be stored per entry. PPA Loader Thread XMACS operates differently than the ASKDC when gathering PPA data.  XMACS contains a worker thread that is responsible for reading PPA data whenever signaled.  The thread reads all PPA entries in the Genealogy database on startup, and then sleeps for a specified interval of time.  This thread also accesses a datetime formatted string that represents the  last updated time  for the last entry it read from the database.  The next time XMACS reads from the database it passes this string and tells the Genealogy database to only return entries updated after this datetime.  The stored proc used to read this information from the database is p_xmacs_get_ppadata.  It currently takes the datetime string and returns the top 10,000 rows ( SerialNumber, PPA2, SPPA1, LastUpdated as a 30 character string, LastUpdated as Datetime). Blackbox Hash table This hash table implementation is used by both XMACS and the ASKDC.  The code is located under \xonline\private\crypto\helperlib\DosBlackBox.cpp.  This is a chaining hash table that keys off the given PPA data.  XMACS creates this list at start time allocating a fixed size.  The current size is set to 3 million entries.  As machine genealogy grows so too will this list as well as the requirement for more memory on the XMACS server.  The list is only populated but the PPA loader thread unless devkit entries are enabled (see section 3.5).  When XMACS gets over a set percentage (this is a config value) it will product a warning that the list is getting too big.  XMACS should be reconfigured with a larger list and more memory at this time.  Should the list grow too 99% full then no further entries will be added to the table and an event will be fired with this information. PUID Management Both machine and user accounts require a unique identifier.  Since we are integrated and will be integrating with other services at Microsoft, we have adopted our unique identifier technique from Passport.  This value is a 64 bit integer with the high byte set to 0x0009.  This range of values was assigned to us by the Passport group so we can avoid collisions with other web service accounts while dealing with other service such as SPS (billing).  Both XMACS and XUACS attain configured size buckets of PUIDs at a time.  XMACS/XUACS then provide these PUIDs to every account they create.  All accounts, machine and user, have unique PUIDs assigned from the Xbox PUID range. Database Implementation The database implementation supported by our service was provided to us from the Passport team.  We have a table that is partitioned over a series of databases.  This table is constructed of a bucket number and an integer index.  That index is one greater than the last number given out by this bucket.  To attain PUIDs from any bucket, services use the p_puid_get_next_id stored procedure.  This procedure takes a bucket number (which bucket we want to attain PUID s from) and a block size (usually 256 for our cases) and returns the index number.  The structure of these tables depends on how many partitions are used in the UODB. Due to the complexity of this information it is possible.  Most importantly to note is that no webstore replicas can contain a working copy of the p_puid_get_next_id stored proc.  Once one of the write databases goes down, we cannot allow new PUID buckets to be read from that database s range because we can t be certain that the replication has given the replica accurate information.   The stored procedure p_puid_get_next_id also returns .  This is the best indication that something is wrong with the data in this table.  This can include everything from lost data (someone erased that table) to invalid hash bucket mappings (someone modified information within the table to incorrect values.)  Here are some of the error codes and suggestions on what it means.  Note:  These values are displayed in the XEVENT_XMACS_PUID_THREAD_ERROR event. -1000   Database error.  The executing command failed.  This is a typical failure scenario.  Please contact the database administrator to correct the problem.  This could range from permission settings to missing tables or broken constraints. -1018   Bad Arguments.  This is due to the service trying to attain a bucket less than 1 or greater than 1024.  This should not be seen unless someone chooses to re-configure XMACS.  This can also be due to an invalid hash bucket to partition mapping.  So the desired hash bucket is not on that partition.  If the system was configured properly we should never see this; however, this could also be caused when the PUID table is missing data (someone/something delete rows or the entire table.) -1019   Bad Transaction Count.  This is a database problem.  This stored proc is a transaction that should never see this problem.  Please contact the database administrator or further information. -1020   Bucket depleted.  All the entries in this bucket have been used up.  There are no more PUIDs left to be assigned from the current bucket.  No currently plan exists for this scenario.  XMACS should choose another bucket but we shouldn t see this problem until we re over a few billion users.  Otherwise someone may have corrupted this data. PUID Thread The PUID thread is responsible for gathering blocks of PUIDs from the UODB.  By performing this acquisition through another thread we ensure that no 1 response is responsible for attaining PUID blocks from the UODB.  This process sleeps until all PUIDs are empty in XMACS s PUID block.  Once awakened, this thread will call out to the UODB to attain a new block of PUIDs.  If the UODB is offline or unavailable, this thread will sleep for 5 seconds, then try again.  The thread exists for the life of the XMACS service and is created on startup. DoS Caching Implementation The purpose of this Denial of Service implementation was to block machines from sending too many valid packets to XMACS.  If this machine has returned more than a set number of times we have determined that this might just be a hacker attempting to cause some mischief to the service.  The way we stop this is we keep a hash table of over 100,000 entries that stores all incoming machine accounts and the number of times they ve returned in that last hour.  Once this counter reaches over the set value within an hour, that machine will not long receive a reply for an account from XMACS.  The machine serial number and IP are logged in the event log as violating the  maximum allowance  setting.   This list basically acts like a  most recent  queue.  The most recently serviced machine account is always at the head of the list.  This list never grows in size.  It simply reuses nodes from the end of the list.  Should that node already contain information, XMACS will check the lifetime of the node and re-use if expired.  If it has not expired, XMACS throws an event claiming that it needs a bigger DoS cache table. Stages and Caching This implementation also caches machine account creation data for a limited time.  This is split into 2 stages: Principle validation (stage 1)   This is where XMACS gets the machines entry from the Genealogy database, decrypts it and sends it to the KDC.  The cache helps XMACS to avoid the call to the database and nCipher device if the processes have already occurred within the stage one cache lifetime.  XMACS stores the key value, in memory, of the key that was decrypted. PreAuth construction (stage 2)   At this point the KDC Core has validated that the incoming request is from a valid machine.  At this point XMACS builds the machine account in the UODB and sends the user the response.  The cache stores this response for the stage 2 cache lifetime.  If the machine returns again within that lifetime, XMACS will simply resend the same packet of information.  This removes the need for XMACS to make more calls to the XMACSFD to set up a machine account. Concurrency Model This implementation is rather complex since it does not rely on critical sections, semaphores or events.  For a list of this size, we can t possibly allocate that many resources.  And we can t use one lock around everything since it would cause a major performance hit.   As a result, we decided to create a special locking system for each node.  The nodes all have an owner DWORD variable.  To lock the node, we first grab a critical section then assign the DWORD value of that node to the owner threads id.  No other thread can access this node until it is released or its timeout has expired.  Threads that attempt to access this node for the same machine are simply cancelled and return no reply.  The timeout was necessary for cases where nodes where controlled by a thread hung in a limbo state.  This way XMACS can reclaim the node should it need the memory to continue processing accounts.  If the hung thread should suddenly awake again, we do have checks to ensure that is still has the node.  If it does not have the node it simply dies without producing a response. If the node has no owner, the DWORD is set to 0.  At that point, if a thread decides that want to use that node, they can claim it. Key Management In order to protect sensitive information within our database (UODB), we have implemented a dedicated key management system which servers to protect vital data.  Now should database information somehow leak from our environments, it would be extremely difficult to decrypt/decipher this data.  For further directions and information about the key management setup for Xbox Live please see Tony Chen Xbox Online Authentication  document.  Master Key The master key is a 2048 bit private key.  It protects raw service keys in the UODB.  For XMACS s purposes, this key protects the  key encryption key  which is stored in the t_service_keys table.  The master key is installed during the server setup.  It exists on a CD rom that is locked way when not in use.  The key is installed on the machine using XKEYMGR.  The key manager uses the crypto API to store the master key somewhere on the harddrive.  For the XMACS service to read this key, the Master key must be installed by a user in the same group.  During startup, XMACS will use the crypto API to attain this key for decrypting the key encryption key.  Key Encryption Key During startup, XMACS reads the encrypted key encryption key from t_service_keys.  When this key is decrypted with the master key we get a 32 byte AES symmetric key.  The key encryption key is a symmetric key because it provides a faster, yet still very secure, method of encrypting data.  The trade-off for this implementation is that we also need to store the key version and IV so we can decrypt this data later.  The key encryption key is used to encrypt user and machine passwords as well as billing information.  For XMACS s purposes, we simply encrypt the machines key and store it in the UODB. Events Go through all the events explaining what they mean and what actions should be performed on them. Informational 50300   XEVENT_XMACS_TERM_SUCCESS  Description:  Signaled when XMACS successfully shuts down.  All threads and memory are deallocated. Action: XMACS has shut down.  Perform whatever actions are required and restart the service. 50301   XEVENT_XMACS_INIT_SUCCESS  Description:  When XMACS has successfully started and is waiting for requests. Action: 50306   XEVENT_XMACS_CONNECT_FD  Description:  XMACS has successfully established/re-established a connection to the front door. Action: 50313   XEVENT_XMACS_CONNECT_GENEALOGY  Description:  XMACS has successfully established/re-established a connection to the genealogy database. Action: 50322   XEVENT_XMACS_PPALOADER_LOADING_INFO  Description:  The PPA loader thread is either beginning or ending its process of reading genealogy information. Action:  Check the associated message.  This is usually just an informational message 50324   XEVENT_XMACS_NCIPHER_ATTAINING_CRYPTO_KEYS  Description:  XMACS is about to attain crypto keys from the nCipher device. Action:  If this message pops up then XMACS requires the nCipher operator cards.  If the card is present in the device then this message should be followed by XEVENT_XMACS_NCIPHER_SUCCESSFULLY_ATTAINED_CRYPTO_KEYS which implies that we've successfully attained a handle to nCipher keys. 50325   XEVENT_XMACS_NCIPHER_SUCCESSFULLY_ATTAINED_CRYPTO_KEYS  Description:  XMACS nCipher connection has been successfully initialized. Action:  If you see this message then XMACS attained the correct key from the nCipher device.  You can now remove the operator card from the device. 50326   XEVENT_XMACS_PUID_ATTAINED_NEW_BLOCK  Description:  XMACS has successfully attains a new PUID block from the UODB. Action:  This is just an informational that XMACS has a new PUID block. 50329   XEVENT_XMACS_RELOAD_SUCCESS  Description:  XMACS XMGMT reload command executed successfully. Action:  No action is required.  The service is running properly. Warnings 50302   XEVENT_XMACS_INIT_WARNING  Description:  XMACS had trouble initializing due to an error with one of its dependencies.  The reason should be specified in the event log. Action:  Review the event log for a corresponding message.  It could be a problem with anything from connectivity, access permissions and/or missing keys. 50308   XEVENT_XMACS_GENERIC_RESOURCE_WARNING  Description:  XMACS has run out or memory or resources cause resource errors. Action:  Try restarting XMACS.  If that doesn't work, please get more memory for this machine.  50309   XEVENT_XMACS_INVALID_PRINCIPAL  Description:  XMACS has received an invalid name request.   Action:  Either the format was incorrect or the entry did not exists in the genealogy database.  Review the logs for more details. 50310   XEVENT_XMACS_INVALID_KERB_REALM  Description:  XMACS has received an invalid realm request. Action:  Either the format was incorrect or the entry did not exists in the genealogy database.  Review the logs for more details. 50311   XEVENT_XMACS_DOS_MAXIMUM_ALLOWANCE  Description:  XMACS has received too many requests within the hour from a specific id.   Action:  This is DoS.  If this occurs for too many cases then raise the threshold.  Otherwise review the IP and determine if this box should be blocked. 50314   XEVENT_XMACS_UNKNOWN_XBOX  Description:  XMACS has received a request from a machine that is no longer in the database. Action:  For some reason this XBox is not in the Genealogy database but is in the PPA DoS list.  Please investigate whether it is in the genealogy feed and should be in the database. 50315   XEVENT_XMACS_INACTIVE_XBOX  Description:  XMACS received a request from an inactive Xbox. Action:  This Xbox was set to an inactive state but is still trying to get a machine account.  Please investigate. 50323   XEVENT_XMACS_HASH_TABLE_RESOURCE_WARNING  Description:  The PPA hash table has grown to an extremely large size. Action:  Check the assoicated message.  The table is getting too big for memory.  XMACS need more physical memory to hold the data of this table. 50328   XEVENT_XMACS_PREAUTH_DATA_CORRUPTION_WARNING  Description:  XMACS failed to carry out both stored procs necessary to add a new user. Action:  Verify that this user(serial number) has an every entry in both tables( t_machines, t_user_names ).  If an entry only exists in one table... delete it.  This way the client can return and get an account.  This is an unlikely scenario but still possible.  Please notify dev if this problem is encountered. 50329   XEVENT_XMACS_NONUNIQUE_SERIALNUMBER_REQUEST  Description:  XMACS is creating an account for a non-unique serial number. Action:  Just useful information. Errors 50303   XEVENT_XMACS_INIT_FAILURE  Description:  XMACS failed to start. Action:  Probably caused by a lack of resources or the XMACS machine is not properly set up with nCipher software.  Further events should be logged with a more detailed descriptions of what caused this. 50304   XEVENT_XMACS_STOPPING  Description:  when XMACS begins shutting down. Action:  XMACS is shutting down.  Since it is a complicated process to restart, it should never be restarted. 50307   XEVENT_XMACS_NO_CONNECT_FD  Description:  XMACS has lost connection to the front door. Action:  This could be due to a series of problems:  (a)  XMACS can't talk to the front door box.  Ping from XMACS to the front door. (b)  Front Door can't connect to the UODB.  Check front door event logs. (c)  Bad permissions on stored procedures in the UODB. (d)  Bad data in the UODB.  Please ensure all keys and PUID generation tables are correct. 50312   XEVENT_XMACS_NO_CONNECT_GENEALOGY  Description:  XMACS has failed to established a connection to the genealogy database. Action:  Ensure that XMACS can connect to the Genealogy database.   (a)  Ping the genealogy sql machine from XMACS.   (b) Ensure the XMACS genealogy user has permission to connect to the database. 50316   XEVENT_XMACS_INACTIVE_XBOX  Description:  XMACS failed to decrypt genealogy information using the nCipher device. Action:  Ensure the information in the genealogy in valid.  If so, try to restart XMACS, maybe XMACS s memory corruption. 50317   XEVENT_XMACS_INVALID_GENEALOGY_DATA  Description:  XMACS has determined that the decrypted genealogy data is not valid. Action:  This caused by a mismatched serial number in the decrypted data.  Please investigate this mismatch. 50318   XEVENT_XMACS_NCIPHER_NOT_FUNCTIONING  Description:  The nCipher device is not responding as expected. Action:  Check the nCipher software, it is not set up properly.  Then reboot the machine. 50319   XEVENT_XMACS_PUID_THREAD_ERROR  Description:  The PUID thread has encountered an unexpected error. Action:  Check the event logs for the associated message.  The PUID thread might be in a weird state and will require XMACS to restart. 50320   XEVENT_XMACS_SERVICE_KEY_FAILURE  Description:  XMACS failed to load it's service keys. Action:  Check the associated message.  Ensure the master key is properly installed and the UODB contains the correct key encryption key information. 50321   XEVENT_XMACS_PPALOADER_THREAD_ERROR  Description:  The PPA loader thread has encountered an error. Action:  Check the associated message.  This may have caused the thread to end and will require XMACS to restart. 50327   XEVENT_XMACS_GENEALOGY_ERROR  Description:  OLEDB has determined that some error exists with XMACS's interaction with the Genealogy database and is sending back this specific error. Action:  Read the associated string.  It should give some good information. 50330   XEVENT_XMACS_UPDATE_SEQUENCE_NUMBER_FAILURE  Description:  Updating the sequence number of a genealogy entry failed. Action:  Look for genealogy database failure events.  React on the information provided. Initialization Management Settings The following is a list of all ini file settings with a description of the role each plays in the XMACS system. UseNCipher   Tells XMACS to run the code path that performs the nCipher decription.  The default is set to 1 meaning that XMACS will use the nCipher device code path. DOSStage1CacheTimeout   The cache timeout for stage 1 (machine verification data).  When this cache expires, it also expires the second cache.  Usually this value is set to a much higher time limit.  The current default is 6 hours. DOSStage2CacheTimeout   The cache timeout for stage 2 (pre-auth data).  This cache value is usually set to a much lower value.  It should always be less than the VIP affinity(sticky) on sites where there are more than 1 XMACS machine. MaxAllowancePerHour   The maximum number of machine account requests a machine can make in an hour.  The default is 20. PUIDBlockSize   The total number of PUIDs that should be acquired from the UODB at one time.=256 Domain   This is the suffix domain created on machine accounts. (Do we still use this?  Look into it) KeyEncryptionKeyVersion   This is the key encryption key version that XMACS should use to encrypt information from the database. WebStoreBuckets   The total number of buckets in webstore.  This is required for PUID generation so XMACS can choose which bucket to attain PUID blocks from. AcceptDevKits   the flag to tell XMACS to permit Xbox devkits to create a machine account.  This flag basically allows the devkit solution to pass through PPA DoS protection. ClientRetryInterval   hmmm  if someone finds out what I use this value for please inform me. PPAMaxEntries   The maximum number of entries permitted in the PPA black box hash table. PPALoaderSleeptimeInSecs   The amount of time in seconds that the PPA loader thread should sleep. HashListPercentageWarning   The percentage threshold for hash table over-flow warning. (%) DisableDoS   This setting allows us to turn off the DoS cache feature.  All entries will be permitted to enter XMACS as many times as they d like.  This option is usually commented out and defaults to false (0). Genealogy SqlServerName   the IP address of the genealogy SQL server box. SqlServerDb   The name of the Genealogy database. SqlServerUid   The user name to enter for SQL auth.  If this entry and the password entry fail to exist, NT authentication is used instead. SqlServerPwd   The SQL authentication password for the defined user.  If this entry and the password entry fail to exist, NT authentication is used instead. ConnectTimeout   The connection time out the the genealogy db in seconds. FrontDoors HttpServer   The hostname or IP address of the front doors.  Note that more than one front door can be added at a time.  Use a comma delimiter to separate entries. HttpObjectName   This is the name of the front door interface point.  It is currently configured MachineLookupRequest   This is the URL presented to the front door to do a machine lookup in the t_machines table.  The request give a PUID and gets back the machines block date and reset date. MachineNameLookupRequest -- This does a machine account lookup in the t_user_names table.  It is given the machines name (SN.############) and returns the PUID for that account.  MachineInsertNameRequest   This query adds machine information to the UODB.  The machine name/account is created in the t_user_names/t_user_keys tables.   The procedure call  takes all account information including name, PUID and key information. MachineResetRequest   This call makes a machine account password reset.  It takes the machine PUID This call makes a machine account password reset.  It takes the machines name and key information and makes the correction in t_user_keys. MachineUpdateRequest   Updates the machines reset date in t_machines.  Note:  If the account does not already exist in t_machines then create the entry. PUIDLookup   The PUID thread makes this call to the UODB.  The result is a block of PUIDs equal to the size specified in PUIDBlockSize.  KeyEncryptionKeyLookup   This query will get the encrypted version of the key encryption key and its key version. WinHttp ResolveTimeoutMillis   The timeout used by WinHttp for resolving a host name. ConnectTimeoutMillis   The WinHttp connection timeout setting in milliseconds.  This is the maximum amount of time WinHttp will wait to connect to the given host. SendTimeoutMillis   The maximum wait time WinnHttp will wait for host to acknowledge ReceiveTimeoutMillis   The WinHttp timeout setting, in milliseconds, for receiving a response from host.   KdcPolicy TimeSkewSeconds -- Specify the allowed time skew interval (in seconds).  Please see KDC documentation for better description. Logging Areas List the relevant areas.  Mention what they log and at what levels.  Management Console Standard Commands Logging and tracing help:   GetVersion   gets the build version of the program.  I think   ListAreas   Lists logging areas of the service   ListTargets   List all target areas for this service.  (Like remote tracing or text logging)   ChangeAreaLevel <area name> <level = 0,1,2,3,4>    Changes the logging level of a certain area.   NewTarget <target name> <target parameters>     where <target parameters> can be:        type=File;prefix=<filename prefix>;RotationTime=<time in minutes>        type=Remote;address=<ip or hostname of rtrace terminal> creates a new target.   DeleteTarget <target name>   Deletes the logging target.   AddTarget <target name> <area name>   Adds a target to receive messages from a logging area.   RemoveTarget <target name> <area name>   Removes a target from receiving messages from a logging area.   ResetTarget <target name>   Resets the connection to a target.   ListOverrides   Lists available overrides.   SetOverride <filename> <line> <log 0=no, 1=yes>   Sets an override commands for specific logging.   RemoveOverride <filename> <line>    Removes the existing override on a specific line. KDC Management Commands XMACS provider help:   reload   Causes XMACS to reload values including Key encryption key settings,     uptime   Gets the total amount of time the server has been up and running.   ListFrontDoors   Lists the front doors that the service knows about and they re current status.   QueryBlackBox <name = "Dark Master">     Queries the services black box to determine if the name exists. XMACS Exclusive Commands   QueryDoSCache <name = "239581239912">   Queries XMACSs secondary cache to determine if a machine has already created an account with XMACS.   SetKEKVersion <version number = "1"> -- Allows us to modify the accepted key encryption key version read from the config file.  Note that this change is not accepted until a reload is performed on XMACS. This area is designed for quick answers to vague issues that occur with XMACS.  As I notice more problems I ll add more details to this area. 1.  I have new genealogy information that I need loaded right away, how do I do this? (a)  Add these genealogy rows to the Genealogy database in the desired environment. (b)  Using xmgmtc.exe, connect to the XMACS machines in that environment. (c)  type  e :xmacs reload This causes XMACS to re-read data from the UODB.  However, it also causes XMACS to get a new bucket of PUIDs so don t use this method unless it is absolutely necessary. 2.  How do I change the key encryption key version for XMACS without restarting the system? (a)  Using xmgmtc.exe, connect to the XMACS machines in that environment. (b)  type  e :xmacs SetKEKVersion   + the new key encryption key version number   (c)  type  e :xmacs reload The first statement sets the value of the key encryption key setting.  The reload forces XMACS to use this change. 3.  How do I get XMACS to attain a new block of PUIDs? (a)  Using xmgmtc.exe, connect to the XMACS machines in that environment. (b)  type  e :xmacs reload XMACS will get a new block of PUIDs once this command is issued. Where do I find files for  XMACS server implementation KDC Core implementation Base Provider implementation UODB Stored Procedures Genealogy Stored Procedures Key Manager implementation Revision History Changes made Author 08/06/02 First Draft Lawrence Ohab (lohab) Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page  nf^VNF gdvc$ gdvc$ gdvc$ gdvc$ gdQ;! gdQ;!  PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\xmacs\XMACS_Logging.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. XrlScan ISAPI filter Title _PID_HLINKSXrlScan ISAPI filter JeffreyA Template - Quick Spec.dot lohab Microsoft Word 10.0urn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags place sI,bl~ B0NRT9 .KZf$ 0J<c9Xbox Machine Account Creation Server Logging Standard  Author: Lawrence Ohab Purpose This document contains details pertaining to the log file implementation for XMACS.  It will outline configuration facts about this execution, information that is displayed and the significance of this data.  The XMACS logging area follows guides set for Xbox Live servers defined in the document:  HYPERLINK "http://sts/xbox_online/Dev/LogPrinciples.doc"  http://sts/xbox_online/Dev/LogPrinciples.doc Please reference this document for more details on why log data is presented in a specific format. Configuration XMACS utilizes the Xmgmt libraries for to produce logging records.  As a result, XMACS logging details can be managed from the XMGMT interface or xmacs.ini file.  The logging area is: XMACSLog This area only produces messages for logging purposes.  Other areas exists which provide more in-depth descriptions of errors.   Data Format XMACS provides 3 different log line entries to express the flow of information.  These 3 areas can be identified by their prefix marker.  The information following this marker gives an indication of a successful or failed execution.  The 3 entries are: Account Creation FORMAT:  ACC|serial number|kerb error|DWORD Status|IP|PUID  Prefix log identifier for machine account creation.  This item appears just as presented. serial number   At most 12 characters presented in the name field of the Kerberos request.  These 12 characters should be numeric and represent the Xbox s serial number that is sending the request. kerb error   The error value associated with the request.  This value should be 0 (KDC_ERR_NONE) for successful machine account creations.  Non-zero otherwise. DWORD Status   This value is a bit string that contains details of what path was taken to create the machine account and an indication of where failures may be occuring.  The meaning of each bit is defined in section 4.  This is the IP address of the Xbox that sent the machine account creation request. PUID   This is the PUID assigned to the newly created machine account.  Note that if the process should fail before the PUID is assigned then this value will be 0. PUID Management FORMAT:  PUI|HResult|range|size  Prefix log identifier for PUID management.  This item appears just as presented. HResult   Represents the error status from the PUID threads attempt to get a new PUID range.  This value is S_OK when successful. range   The first value of the newly acquired PUID range.  This value will be 0 if the process fails. size   This value represents the number of PUIDs available starting from the range. Pre-PreAuth Data Management FORMAT:  PPA|HResult|Number Of Rows Loaded|LastUpdatedTime  Prefix log identifier for PPA data loading.  This item appears just as presented. HResult   Represents the error status from the PPA loader thread after reading from the Genealogy database.  This value is S_OK when successful. Number Of Rows Loaded   the number of new PPA genealogy rows loaded from Genealogy database. LastUpdatedTime   This is a time value that corresponds with the last updated time on the last PPA entry read from the database.  This is the value that will be used to get new PPA entries when the thread wakes up again. DWORD Format Logging lines associated to machine account creation requests(ACC) will produce a special DWORD that indicated that status and path taken to create this machine account.  This DWORD is a bit string.  The connotations of these bits are defined as follows: Position Meaning REQSTAT_INVALIDSTATE   XMACS has run into an unexpected error during account creation REQSTAT_DEPENDENCY_CONNECTION_FAILURE   XMACS has failed to connect to one of its dependencies.  These include the Genealogy database and the XMACSFd. REQSTAT_DEVKIT   The incoming request is from a DevKit. REQSTAT_SUCCESSFUL_MAC   Signals that the request has successfully attained a machine account.  REQSTAT_NEW_PUID   The request has been assigned a new PUID.  REQSTAT_MACHINE_BANNED   The incoming machine request is from a machine that is banned. REQSTAT_RESETTING_MACHINE_ACCOUNT   Signals that this is not a account creation, it is actually an account request. REQSTAT_CREATING_MACHINE_ACCOUNT   Signals that the request will create a new account for this machine.        REQSTAT_CONSTRUCT_SPECIAL_NAME   The requesting machine has a duplicate serial number but different key.  A new name will be assigned to this machine account. REQSTAT_SET_SEQUENCE_NUMBER   signals that the request is causing us to make a change to the Genealogy database. REQSTAT_COPY_PA_FROM_CACHE   Signals that this request will be answered with cached PreAuth data(machine account).  REQSTAT_SUCCESSFULLY_CONSTRUCT_PRINC   Happens when XMACS successfully builds a principle and the request has been deemed valid. REQSTAT_EXEC_NCIPHERLESS_PATH   The incoming requests key is being handled without using the nCipher device REQSTAT_INVALID_GENEALOGY_DATA   The data for the requested machine is incorrectly set in the genealogy database. REQSTAT_NCIPHER_DECRYPTED   Signalled after XMACS decrypts the requested machines key from the database. REQSTAT_INACTIVE_MACHINE   The requested machine has been set to inactive in Genealogy information.  REQSTAT_ATTAINED_GENEALOGY_DATA   Signals that XMACS has found Genealogy information for the requested machine. REQSTAT_CONNECTED_TO_GENEALOGY   Signals that XMACS has connected to the genealogy database for this request. REQSTAT_CACHE_ITEM_BUSY   The cached node for this machine is already being processed.  REQSTAT_COPY_PRINC_FROM_CACHE   Signals that XMACS is using cached information for the principle. REQSTAT_CACHE_ACCESS_DENIED   Signals that this request has been present too many times to XMACS within a certain time interval. REQSTAT_FOUND_IN_CACHE   The request was found in the XMACS secondary cache. REQSTAT_PASSED_PPA   Signals that the request has passed the PPA test. REQSTAT_PPA_BAD_TIME_RESPOND   Signals that the request has failed the PPA test by presenting a bad time, but we re going to respond with the correct time. REQSTAT_PPA_BAD_TIME_DONT_RESPOND   Signals that the request has failed PPA by presenting the wrong time, and we will not respond. REQSTAT_SPPA_MISMATCH   The request has failed PPA with an SPPA mismatch. REQSTAT_BLACK_BOX_ENTRY_NOT_FOUND   The request was not found in the blackbox and has failed PPA. REQSTAT_RETRIEVE_PPA_FROM_REQUEST   We have successfully found PPA data attached to the request. REQSTAT_VALID_SERIALNUM   The incoming request has presented a valid serial number consisting of only 12 digits.              REQSTAT_VALID_REALM   The Incoming request has presented a valid realm for XMACS.                     Not in use.  Should be 0. Not in use.  Should be 0. Microsoft Confidential XMACS Logging Standard Page   PAGE   NUMPAGES  gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng gd\Ng
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\match\Final360MatchmakingDevSpec.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Paul Newson Xbox Online Spec Template.dot Paul Newson Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags placeed``b Y@FhB 27$37 \!(?71 ed``b dnHfnj BP~nb 7#1a^ 7#1a^ c112BY b??Qf VPkT/ c112BY @penR~ c112BY dnpenR~ i))mh. XVZ0m! c112BY c112BY c112BY c112BY c112BY ,O08R dnpenR~ mp00@ RpeqIj.C) ,O08R./ ,W=ns J.hLr euund ,O08R J.hLr ,O08R dnpenR~ J.hLr ,O08R dnpenR~ ,O08R ,O08R dnpenR~ mp00@ RpeqIj. d``Vf ar`Jc A $37 \!(?71 xddbR c112BY RpeqIj. c112BY c112BY 7030l R\)Te R\)Te d``6dd``b ,e`ab dopenR~ RpeqIj.C* d``6dd``b ,e`ab dopenR~ d``6dd``b ,e`ab K, #t RpeqIj.C; d``6dd``b ,e`ab dopenR~ d``6dd``b ,e`ab dopenR~ RpeqIj.C% d``6dd``b ,e`ab K, #t RpeqIj. 4/p;J d``6dd``b ,e`ab dopenR~ bn=;W d``6dd``b ,e`ab K, #t RpeqIj.Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3ble of Contents  TOC \o "1-2" \h \z \u   HYPERLINK \l "_Toc104881002"  Table of Contents  PAGEREF _Toc104881002 \h   HYPERLINK \l "_Toc104881003"  XRL Interfaces  PAGEREF _Toc104881003 \h   HYPERLINK \l "_Toc104881004"  Legacy Xbox Interfaces  PAGEREF _Toc104881004 \h   HYPERLINK \l "_Toc104881005"  Xenon Interfaces  PAGEREF _Toc104881005 \h   HYPERLINK \l "_Toc104881006"  Internal Interfaces  PAGEREF _Toc104881006 \h   HYPERLINK \l "_Toc104881007"  Ranked Matchmaking  PAGEREF _Toc104881007 \h   HYPERLINK \l "_Toc104881008"  Standard (Casual? Social?) Matchmaking  PAGEREF _Toc104881008 \h   HYPERLINK \l "_Toc104881009"  Affiliation Value of a Session  PAGEREF _Toc104881009 \h   HYPERLINK \l "_Toc104881010"  Pass 0  PAGEREF _Toc104881010 \h   HYPERLINK \l "_Toc104881011"  Pass 1  PAGEREF _Toc104881011 \h   HYPERLINK \l "_Toc104881012"  Pass 2  PAGEREF _Toc104881012 \h   HYPERLINK \l "_Toc104881013"  Pass 3  PAGEREF _Toc104881013 \h   HYPERLINK \l "_Toc104881014"  MultiServer Issues  PAGEREF _Toc104881014 \h   HYPERLINK \l "_Toc104881015"  Match Database Design  PAGEREF _Toc104881015 \h   HYPERLINK \l "_Toc104881016"  Datatypes  PAGEREF _Toc104881016 \h   HYPERLINK \l "_Toc104881017"  Session Tables  PAGEREF _Toc104881017 \h   HYPERLINK \l "_Toc104881018"  Insert Stored Proc  PAGEREF _Toc104881018 \h   HYPERLINK \l "_Toc104881019"  Update Stored Proc  PAGEREF _Toc104881019 \h   HYPERLINK \l "_Toc104881020"  Delete Stored Proc  PAGEREF _Toc104881020 \h   HYPERLINK \l "_Toc104881021"  System FindByID Query  PAGEREF _Toc104881021 \h   HYPERLINK \l "_Toc104881022"  Title Defined Queries  PAGEREF _Toc104881022 \h   HYPERLINK \l "_Toc104881023"  Title Defined Query Filters  PAGEREF _Toc104881023 \h   HYPERLINK \l "_Toc104881024"  Proximity  PAGEREF _Toc104881024 \h   HYPERLINK \l "_Toc104881025"  LiveMatch.exe  PAGEREF _Toc104881025 \h   HYPERLINK \l "_Toc104881026"  Xbox 1 Code Generation  PAGEREF _Toc104881026 \h  XRL Interfaces Legacy Xbox Interfaces The following XRLs should be functionally equivalent to the behavior of the tsunami matchmaking service. Any difference is a possible backwards compatiblity issue and should be filed as a bug. xmatchhost.srf Create or update a matchmaking session. xmatchhostdelete.srf Delete a matchmaking session. xmatchclient.srf Search for matchmaking sessions Xenon Interfaces The following XRLs are used by Xenon clients to create, update, search for, and delete matchmaking sessions. Their functionality is close to the similarly named Legacy Xbox Interfaces, but some additional features have been added, and some have been removed. Note, the limits below have not changed:         public const uint X_MATCH_MAX_QUERY_RESULTS                   = 50;         public const uint X_MATCH_MAX_ATTRIBUTE_DATA                  = 4096; These limits have been raised by 10 to account for the 10 additional built in attributes and parameters that are automatically included in every schema and sent with every query.         public const uint X_MATCH_MAX_QUERY_PARAMS                    = 30;         public const uint X_MATCH_MAX_TITLE_SCHEMA_ATTRS              = 50; Note that new datatypes are now allowed: contexts, plus properties of type: int64, int32, float32, float64, datetime. If the old X_ATTRIBUTE_DATATYPE_MASK is zero, then look in the top nibble for extended xenon subtype.         public const uint X_ATTRIBUTE_DATATYPE_MASK                   = 0x00F00000;         public const uint X_ATTRIBUTE_DATATYPE_INTEGER                = 0x00000000;         public const uint X_ATTRIBUTE_DATATYPE_STRING                 = 0x00100000;         public const uint X_ATTRIBUTE_DATATYPE_BLOB                   = 0x00200000;         public const uint X_ATTRIBUTE_DATATYPE_NULL                   = 0x00F00000;         // Xenon supports the extended datatypes below. In order to not change the         // protocol for existing clients, these extended types are all considered         // to be X_ATTRIBUTE_DATATYPE_INTEGER by this class. The front door          // checks these extended bits (which were previously unused)          // to interpret each of the 64 bit chunks of type INTEGER correctly.         public const uint X_ATTRIBUTE_XE_SUBTYPE_MASK                = 0x70000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_CONTEXT             = 0x00000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_UINT32              = 0x10000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_UINT64              = 0x20000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_FLOAT64             = 0x30000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_FLOAT32             = 0x50000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_DATETIME            = 0x70000000; All extended xenon datatypes look like datatype integer, which means they take 64 bits on the wire. Contexts are interpreted as 64 bit ints. Int32, the top 32 bits are ignored Int64 is interpreted as 64 bit integer float32, top 32 bits are ignored, low 32 bits are interpreted as single precision IEEE floating point value. float64, 64 bits intepreted as double precision IEEE floating point value. Test Note: We should make sure we check that 32 bit integers and floating point values with a 1 in the most significant bit are handled properly. See database.cs DBLayer.Pack64BitsWithFloat, Pack64BitsWithDouble, Interpret64BitsAsFloat, Interpret64BitsAsDouble Datetimes are represented on the wire as FILETIME structures in UTC. See DateTime.ToFileTimeUtc, DateTime.FromFileTimeUtc. Blob attributes and parameters are not allowed by any xenon interface. String attributes and paramaters are not allowed to be passed as search parameters, may not be used in filters or sort operations, but may be passed in session host and session update calls, and may be returned as a schema attribute in search calls. Note that xlast will restrict the use of string attributes to only the host s gamertag, so we avoid the issue of terms of use violations with user entered strings being advertized in match. The order of parameters and attributes on the wire is not significant for Xbox 360 interfaces. All attributes and parameters are completely identified by their id, and therefore can be specified in any order, both in calls from the client to the server, and in search results from the server to the client. The absence of an expected id is interpreted as NULL, which is allowed for all attributes and parameters except for gametype and gamemode, which are required. If attribute id X_ATTRIBUTE_DATATYPE_NULL (0x00F00000) is still valid, but has no effect. If it is passed from the client to the server, it does not generate an error. NULL attributes in search results will be represented with X_ATTRIBUTE_DATATYPE_NULL to remain consistent with the behavior of prior releases. This attribute id can appear multiple times in one call or search result. While the attribute order in search results should not be relevant to the client, the current implementation returns attributes in search results in the order they appear in xlast, and inserts X_ATTRIBUTE_DATATYPE_NULL for any missing attributes. This allows the front door to share more code between the Xbox and Xbox 360 code paths. xmatchhost2.ashx Session Create If the session id passed on the wire is all zeros, except for the bits that encode the session type (0x00000000000000F0), then the call is interpreted as a session create operation. Session create does not allow blob schema attributes, but does does allow strings attributes. If the session type is XNET_XNKID_SYSTEM_LINK the call will be fail with XONLINE_E_MATCH_INVALID_FLAGS The following attributes must be passed on the wire for all create calls. If any are missing, the call will fail with XONLINE_E_MATCH_INVALID_PARAM X_ATTRIBUTE_GAME_TYPE (0x0000800A) X_ATTRIBUTE_GAME_MODE (0x0000800B) X_ATTRIBUTE_GAMER_ZONE (0x10008101) X_ATTRIBUTE_GAMER_COUNTRY (0x10008102) X_ATTRIBUTE_GAMER_LANGUAGE (0x10008103) X_ATTRIBUTE_GAMER_RATING (0x50008104) X_ATTRIBUTE_GAMER_MU (0x30008105) X_ATTRIBUTE_GAMER_SIGMA (0x30008106) The following attribute may be passed, but has no effect. If it is missing, the create session call will still succeed: X_ATTRIBUTE_GAMER_PUID (0x20008107) If an attribute id is passed that is not part of the title s schema, and is not one of the automatic ids listed above, the call will fail with XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID All title defined schema attributes are optional and may be omitted. Session Update If the session id passed on the wire is non zeros, in any bit that is not the session type (0x00000000000000F0), then the call is interpreted as a session update operation. If the session id is not valid, the call will fail with XONLINE_E_MATCH_INVALID_SESSION_ID Changing X_ATTRIBUTE_GAME_TYPE (0x0000800A) in an update is not allowed. This parameter may be passed, but iuf the value has been changed, the call will fail with XONLINE_E_MATCH_INVALID_PARAM The following attributes may be passed. If they are present, the value in the database is update to reflect the value passed in the call. If they are omitted, then the current value in the database remains unchanged. X_ATTRIBUTE_GAME_MODE (0x0000800B) X_ATTRIBUTE_GAMER_ZONE (0x10008101) X_ATTRIBUTE_GAMER_COUNTRY (0x10008102) X_ATTRIBUTE_GAMER_LANGUAGE (0x10008103) X_ATTRIBUTE_GAMER_RATING (0x50008104) X_ATTRIBUTE_GAMER_MU (0x30008105) X_ATTRIBUTE_GAMER_SIGMA (0x30008106) Any title defined attributes may also be passed. If they are present, the value in the database is update to reflect the value passed in the call. If they are omitted, then the current value in the database remains unchanged. If an attribute id is passed that is not part of the title s schema, and is not one of the automatic ids listed above, the call will fail with XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID xmatchhostdelete2.ashx No attributes should be passed to this call. If the session id passed is not valid, or is not present in the database, the call will fail with XONLINE_E_MATCH_INVALID_SESSION_ID xmatchclient2.ashx The system FindById search query expects only one parameter: X_ATTRIBUTE_SESSION_ID (0x20008003). If this parameter is missing, the call will fail with XONLINE_E_MATCH_INVALID_PARAM. If any other parameters are sent, the call will fail with XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID. The system FindById query is query id 0xFFFFFFFF. All non FindById query calls must pass the following parameters. If any are missing, the call will fail with XONLINE_E_MATCH_INVALID_PARAM X_ATTRIBUTE_GAME_TYPE (0x0000800A) X_ATTRIBUTE_GAME_MODE (0x0000800B) X_ATTRIBUTE_GAMER_ZONE (0x10008101) X_ATTRIBUTE_GAMER_COUNTRY (0x10008102) X_ATTRIBUTE_GAMER_LANGUAGE (0x10008103) X_ATTRIBUTE_GAMER_RATING (0x50008104) X_ATTRIBUTE_GAMER_MU (0x30008105) X_ATTRIBUTE_GAMER_SIGMA (0x30008106) X_ATTRIBUTE_GAMER_PUID (0x20008107) Title defined parameters may be omitted without error. If any parameters are passed that are not in the list above, and are not in the list of title defined parameters for that query, then the call will fail with XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID. Note that parameters to search queries should not specify the X_ATTRIBUTE_TYPE_PARAM bit flag. This flag s only purpose was to help xbox1 xmltosql figure out if an attribute was being used as a parameter or attribute. Xlast and LiveMatch use a different method. Therefore this flag is not used anywhere for Xbox 360 titles. No string or blob paramaters are allowed in search queries for Xbox 360 titles. No aggregate queries are allowed for Xbox 360 titles. No title defined FindById queries are allowed for Xbox 360 titles. Only the system generated FindById query is supported. Internal Interfaces These are only called by the SG or internal tools, therefore no back compat work required. deadxbox.ashx No changes. Same XRL. titlechange.ashx No changes. Same XRL. health.ashx No changes. Same XRL Ranked Matchmaking Ranked matchmaking is for users who are in a competitive mood, and want to have a competitive game against people who are similar to them in skill, and want the results to be reflected in their public global ranking. The fun in a ranked match comes from the competition, and therefore the goal is to find a session filled with players of similar skill. Ranked matchmaking is used for sessions where X_ATTRIBUTE_GAME_TYPE is 0. Creating a session where X_ATTRIBUTE_GAME_TYPE = 0 creates a ranked session. Searching for sessions and passing X_ATTRIBUTE_GAME_TYPE = 0 as a parameter searches for ranked sessions. Searching for ranked sessions returns N rows, where N is equal to the Max Results entered in xlast for the query id being used. All rows returned will: have X_ATTRIBUTE_GAME_TYPE = 0 have X_ATTRIBUTE_GAME_MODE that matches the X_ATTRIBUTE_GAME_MODE passed as a parameter have enough public slots open for the number of players signed in on the console (at the time the query was made   this may of course change by the time the console attempts to join the session) are being hosted by a console with a NAT that is compatible with the NAT in use by the console sending the query meet any title defined filter critera provided for the query in xlast The results are ordered by the probability of a draw occuring between the user identified as the host of the session and the user identified as searching for the session, based on the host s skill   EMBED Equation.3    and the searcher s skill   EMBED Equation.3   , according to the following calculation:  EMBED Equation.3   Note: the more sophisticated and accurate equation below was used initially, but during optimization we found we needed to use the simpler equation above for performance reasons.   EMBED Equation.3   Also note that the parameter  EMBED Equation.3   is fixed at 0.5 for the Xbox Live service, which means   EMBED Equation.3   reduces to 0.5, and the calcuation above reduces to:  EMBED Equation.3   The host s skill is passed to the match server in the X_ATTRIBUTE_GAMER_MU and X_ATTRIBUTE_GAMER_SIGMA attributes in the create session call, and may be updated in the update session call. The searcher s skill is passed to the match server in the X_ATTRIBUTE_GAMER_MU and X_ATTRIBUTE_GAMER_SIGMA attributes in the search query itself. Introduction to the MuSigma Ranking System  and  Notes on the MuSigma Matchmaking  papers for more information on how the skill ranking system works. If there are many candidate sessions to consider, it is not computationally efficient to calculate and sort by the draw probability above for all the candidate sessions. Therefore a method is required to reduce the set of sessions that will be considered and presented to the sort operation in an efficient manner. To do this we select a  small  range of   EMBED Equation.3   , and run an efficient query to determine the number of rows that would be considered if we used that  small  range of   EMBED Equation.3   . If that does not yeild enough rows, we broaden the range of   EMBED Equation.3   , and try again. We continue this process until enough rows will be considered, or we are considering the entire range of   EMBED Equation.3   During optimization, we experimented with various definitions of a  small range enough rows broader range , until we found a combination that was efficient but still yeilded acceptable results. The ranges of   EMBED Equation.3    attempted, in order, are:  EMBED Equation.3   = 0.0234375  EMBED Equation.3   = 0.046875  EMBED Equation.3   = 0.09375  EMBED Equation.3   = 0.1875  EMBED Equation.3   = 0.375  EMBED Equation.3   = 0.75  EMBED Equation.3   = 1.5  EMBED Equation.3   The range is centered around  EMBED Equation.3   , unless that would extend beyond the allowed values of   EMBED Equation.3    which is [0, 6] inclusive, which case the range will start at 0 or end at 6. As an optimization, if the number of rows returned by one of the ranges above is less than 2, instead of using the next range in the chart above, it skips the next range and tries the range two below the current range. The search terminates when the entire range is being searched, or when at least (MaxResults * 2) rows are returned, where MaxResults is the maximum number of results the title has configured the particular query to return. Note that the starting point of the search is chosen to support what we believe will be the number of concurrently available sessions for our most popular titles. If this estimate is wrong, the initial range will need to be adjusted to start using a more negative exponent. Also note that the general form of the range calculations is   EMBED Equation.3   where C is a constant chosen based on the allowed range of the parameter in question (in this case 0 to 6), and b is the base of an exponent, and i is the iteration of the search. Different values of B, and different starting points of i will be apporpriate for different goals. In our first attempt at this algorithm, we were search for a range of sessions between 100 and 1000, and selected b=5, and initial i = -5. We found via stress testing that it was more important to get an accurate range than it was to reduce the number of iterations, which is why we now search for a value that yeilds between maxresults*2 and maxresults*4 rows, and use b=2 and initial i =-7. If the range of mu selected by the previous algorithm does not reduce the set of sessions to be maxresults*4 or less, the server will further restrict the number of sessions that will be sorted by randomly discarding a percentage of the sessions such that approximately maxresults*3 sessions will be considered. Title defined sort operations are supported, and will be applied prior to the draw probability sort described above. This is not recommended, because if there are more than one or two possible values for the title defined sort criteria, the draw probability sort will have almost no effect on the ordering of the sessions. Also note that if mu is not valid for a particular title (likely because that developer has chosen to implement their own concept of skill and disabled ours), then the process of choosing a mu range will have no effect, and the candidate sessions presented to the sort operation will be a random selection of available sessions. This will also hurt performance, because the random selection is not as efficient as the mu range selection, because it does not make use of the clustered index on the table. Standard (Casual? Social?) Matchmaking Standard Matchmaking is for users who are in a mood where winning and losing is less important than finding a session filled with people they enjoy playing with. The following factors are used in an attempt to find a session populated by compatible people. Who is on the user s friends list? Who has the user submitted positive feedback on? Who has the user completed games with in the past? Who has the user submitted negative feedback on? Who has submitted negative feedback on the user? What gamer zone did the user select? What gamer zone did the host select? What is the user s gamer rating? What is the host s gamer rating? What country did the user select? What country did the host select? What language did the user select? What language did the host select?  Standard matchmaking is used for sessions where X_ATTRIBUTE_GAME_TYPE is 1. Creating a session where X_ATTRIBUTE_GAME_TYPE = 1 creates a standard session. Searching for sessions and passing X_ATTRIBUTE_GAME_TYPE = 1 as a parameter searches for standard sessions. Searching for standard sessions returns N rows, where N is equal to the Max Results entered in xlast for the query id being used. All rows returned will: have X_ATTRIBUTE_GAME_TYPE = 1 have X_ATTRIBUTE_GAME_MODE that matches the X_ATTRIBUTE_GAME_MODE passed as a parameter have enough public slots open for the number of players signed in on the console (at the time the query was made   this may of course change by the time the console attempts to join the session) are being hosted by a console with a NAT that is compatible with the NAT in use by the console sending the query meet any title defined filter critera provided for the query in xlast Conceptually, a standard matchmaking query can be thought of as a series of queries, each one slightly broader that the previous query, until enough results have been collected. Each query pass is described below: Pass 0 Sessions with positive affiliations (e.g. friends), in the same gamer zone Pass 1 Sessions with no negative affiliations (e.g. avoided players), in the same gamer zone, same language and same country Pass 2 Sessions with no negative affiliations (e.g. avoided players), in the same gamer zone, but having a different language, country, or both Pass 3 Sessions with positive affiliations (e.g. friends), in a different gamer zone Pass 4 Sessions with no negative affiliations (e.g. avoided players), in a different gamer zone Each pass adds to the result set. Sessions from Pass 0 are returned at the top of the results list, followed by sessions from Pass 1, then Pass 2, then Pass 3, then Pass 4. Affiliation Value of a Session One of the primary goals of standard matchmaking is to increase the probability of placing people in sessions with people they prefer, and decrease the probability of placing them in sessions with people they would rather not play with. There are five types of affiliations between players that standard matchmaking takes into consideration: Friend: I added a person to my Friends list Positive Feedback: I submitted positive feedback on a person Completed Game: I have completed a game with a person in the past Negative Feedback: I have submitted negative feedback on a person Avoiding Me: A person submitted negative feedback on me The following statements, based on the affiliations above, are consistent with the concept of standard matchmaking: A session with one Friend and several strangers is better than a session with one Positive Feedback and several strangers. A session with one Positive Feedback and several strangers is better than a session with one Completed Game and several strangers. A session with one Completed Game and several strangers is better than a session with only strangers A session with one Negative Feedback is worse than a session with only strangers A session with one Avoiding Me is worse than a session with only straingers In practice, the matchmaking service must be able to evaluate the relative merit of sessions like this: A session with one Friend, and one Negative Feedback A session with two Positive Feedback and one Negative Feedback A session with one Friend, two Postivie Feedback, three Completed Game, one Negative Feedback, and two Avoiding Me Negative Feedback and Avoiding Me affiliations are not absolute. It is acceptable to be matched into a session that contains people you submitted negative feedback on, or people who submitted negative feedback on you, as long as the   outweighs the  The affiliation value of each session that contains affiliates will be calculated using the following formula: session_value = (4 * # of Friends) + (2 * # of Positive Feedback) + (1 * # of Completed Game)   (3 * # of Negative Feedback)   (3 * # of Avoiding Me) Using this equation, a session with one Friend and one Negative Feedback is as positive as a session with one Completed Game player. But it takes two Positive Feedback players to outweigh one Negative Feedback. This will avoid the situation where matchmaking does not offer you a session that has lots of people you like, and only one you don The coefficients in the equation shown here are a starting point. The coefficients will be configuable via in the following settings in npdb. The values must be integer. Since the absolute value of the session has no meaning, we can use larger coefficients to obtain a more precise balance between the five factors without resorting to floating point calculations. xmatchfd_valueOfFriend (initial value 4) xmatchfd_valueOfPrefer (initial value 2) xmatchfd_valueOfCompleted (initial value 1) xmatchfd_valueOfAvoid (initial value -3) xmatchfd_valueOfAvoidMe (initial value -3) Note that it is possible for user A to be affiliated with user B in more than one way. For example, the first time you complete a game with someone, they will be added as a Completed Game affiliate. If you then submit positive feedback on them, they will be both a Completed Game and a Positive Feedback affiliate. If you then add them as a friend, they will be a Completed Game, Positive Feedback, and Friend affiliate. Note however that Completed Game and Positive Feedback are finite lists. Eventually, an active player could fill their lists, and the Completed Game and Positive Feedback affiliations will disappear. There is one exception to this rule. It is not possible to be both a Positive Feedback and Negative Feedback affiliate of the same user. The presence service removes any Negative Feedback affiliation if you submit Positive Feedback, and vice versa. If a user has multiple affiliations, then each of those affiliations is considered independantly for the purposes of calculating the affiliate value of a session. For example, using the initial values above, a user who is both a Completed Game and Positive Feedback affiliate would contribute +3 to the affiliate value of a session, exactly the same as one Completed Game affiliate and one Positive Feedback affiliate. Pass 0 Pass 0 returns search results with a positive affiliation value in the same gamer zone. The match front door requests the affiliates list from Presence for the user puid passed in the X_ATTRIBUTE_GAMER_PUID parameter to the match query. The list returned from presence is an array of structures that look like this: struct P_QUERY_AFFILIATES_REPLY_DATA_MSG  ULONGLONG qwAffiliateID;  DWORD dwListFlags;  DWORD dwTitleID;  ULONGLONG qwSessionID;  MSGTIME mtDateUpdated;  char szGamerTag[XONLINE_GAMERTAG_SIZE]; dwListFlags tells the match front door which list(s) the affiliate is on. Only affilates who are online and in the same title are returned by presence to the match front door. The total affilicates list is currently limited to 1500 entries, so the size of the list returned to the match front door will be no larger than 1500 records, and will usually be much smaller. The front door will create a hashtable of sessions and their values according to the psuedocode below: Create HashTable to store session information foreach entry in affiliates list     if sessionid is not in session list, add it with a value of 0     if affiliate is a friend         add xmatchfd_valueOfFriend to the sessionid s value     if affiliate is a positive feedback         add xmatchfd_valueOfPrefer to the sessionid s value     if affiliate is a completed game         add xmatchfd_valueOfCompleted to the sessionid s value     if affiliate is an negative feedback         add xmatchfd_valueOfAvoid from the sessionid s value     if affiliate is an avoiding me         add xmatchfd_valueOfAvoidMe from the sessionid s value convert the hashtable to an array sort the array by session value using QuickSort Using the algorithm above, the front door can calculate the values of all the sessions for all the affiliates online in O(n), convert the hashtable to an array in O(n), and then quicksort that array in O(n lg n) on average, O(n^2) worst case. The front door now queries all match sql databases configured for the title to retrieve all the sessions that: are in the list of affiliate session ids with a value of 0 or greater have X_ATTRIBUTE_GAME_TYPE equal to 1 have X_ATTRIBUTE_GAME_MODE equal to the X_ATTRIBUTE_GAME_MODE parameter in the query have X_ATTRIBUTE_GAMER_ZONE equal to the X_ATTRIBUTE_GAMER_ZONE parameter in the query have enough public slots open for the number of players signed in on the console (at the time the query was made   this may of course change by the time the console attempts to join the session) are being hosted by a console with a NAT that is compatible with the NAT in use by the console sending the query meet all title defined filter critera provided for the query in xlast The results are ordered by the affiliate value of the session, in decreasing order (i.e. large affiliate values first). If the number of results is equal to or greater than max results specified for this query in the xlast file, then these sessions are returned without further processing. Pass 1 Pass 0 returns session with no affiliations, in the same gamer zone, with the same language and same country. If more than the required number of sessions are available, the query considers the gamer rating of the host and the client when deciding which rows to return to the client. All rows returned will: have X_ATTRIBUTE_GAME_TYPE = 1 have X_ATTRIBUTE_GAME_MODE that matches the X_ATTRIBUTE_GAME_MODE passed as a parameter have X_ATTRIBUTE_GAMER_ZONE that matches the X_ATTRIBUTE_GAMER_ZONE passed as a parameter have X_ATTRIBUTE_GAMER_LANGUAGE that matches the X_ATTRIBUTE_GAMER_ LANGUAGE passed as a parameter have X_ATTRIBUTE_GAMER_ LANGUAGE that matches the X_ATTRIBUTE_GAMER_ LANGUAGE passed as a parameter have enough public slots open for the number of players signed in on the console (at the time the query was made   this may of course change by the time the console attempts to join the session) are being hosted by a console with a NAT that is compatible with the NAT in use by the console sending the query meet all title defined filter critera provided for the query in xlast As with ranked matches, we needed a way to reduce the number of rows being considered when there are a large number of candidate sessions. We therefore use the same algorithm described in the previous section to reduce the number of sessions considered in an efficient way, but we use X_ATTRIBUTE_GAMER_RATING instead of the X_ATTRIBUTE_GAMER_MU. Since the rating has a different range [0..100] than mu [0..6], the ranges searched are different, but the method is identical. The ranges searched, in order, are:  EMBED Equation.3   = 0.390625  EMBED Equation.3   = 0.78125  EMBED Equation.3   = 1.5625  EMBED Equation.3   = 3.125  EMBED Equation.3   = 6.25  EMBED Equation.3   = 12.5  EMBED Equation.3    EMBED Equation.3   As with the ranked match case, if more than resultsNeeded*4 rows are returned by the algorithm above, then sessions are randomly discarded so that approximately resultsNeeded *3 sessions will be considered. Note that resultsNeeded is not the same as maxresults. See below for a discussion of how the number of sessions needed is calculated. Once a range of X_ATTRIBUTE_GAMER_RATING has been selected, the rows that pass all the filters, including the range check, will be sorted as follows. Within the set of considered sessions, title defined sort operations will be applied. Within each of the groupings created by the title defined sort operations, rows will be ordered by the same draw probability calculation used for ranked matchmaking. Note that some of the sessions returned by the match SQL server to the front door will be rejected by the front door because they are actually affiliate sessions with a negative session value (as calculated in pass 0). Some of the sessions returned by the match SQL server to the front door may also be affiliate sessions with a positive affiliate value, in which case they will be duplicates of sessions already added to the result set in Pass 0. For this reason, the front door will ask the SQL server for more results than it needs in order to complete the results set. (This is the resultsNeeded discussed above). The front door knows at the end of Pass 0 how many slots in the result set have been filled, and how many remain to be filled. The front door also knows how many negative affiliate sessions there are. The maximum number of sessions that could possibly be filtered out by the front door is (# of filled slots) + (# of negative sessions). Therefore the front door asks the SQL query to return, at most (# of open slots) + (# of filled slots) + (# of negative sessions), which simplifys to (max_results) + (# of negative sessions). Example: Pass 0 generated a session value hashtable containing 100 entries. 75 of those entries had a value of 0 or greater, and 25 had a value of less than 0. Of the 75 sessions with a value of zero or greater, 15 were returned by the Pass 0 SQL query (i.e. they were available, had a compatible nat type, were in the correct gamer zone, were the correct GAME_MODE, and GAME_TYPE, and met any title defined criteria). Therefore, 10 slots remain to be filled. The front door needs, at most, (max_results) + (# of negative sessions) = 25 + 25 = 50 results back from the Pass 1 SQL query. Assuming 50 or more sessions exist that meet the Pass 1 criteria, this will be enough to fill the remaining slots, even if 15 of them are duplicates of the results already in the result set, and 25 of them are filtered out because their affiliation value is negative. 10 sessions would still remain, which added to the 15 sessions from pass 0, equals max_results. In practice, the sql query already knows max_results, so the front door simply supplies the stored proc with the number of negative affiliate sessions. Pass 2 Pass 2 is identical to Pass 1, except that the resultsNeeded is reduced by the number of rows that were returned in Pass 1, and that only those sessions which are in the same gamer zone, but have either a different country or language (or both) will be returned. Within the Pass 2 result set the results are ordered as follows: Sessions where only X_ATTRIBUTE_GAMER_LANGUAGE is equal to the client values are returned first. Sessions where only X_ATTRIBUTE_GAMER_COUNTRY is equal to the client values are returned next. Sessions where neither X_ATTRIBUTE_GAMER_LANGUAGE nor X_ATTRIBUTE_GAMER_COUNTRY are equal to the client values are returned last. Within each of these groupings, the title defined sort operations are applied, followed by the draw probability sort. Pass 3 Pass 2 requeries the match sql database to find all positive affiliate sessions that are in a different gamer zone than the client. The affiliate values do not need to be recalculated. The results of Pass 3 are ordered by the affiliate value of each session in descending order (i.e. larger values first). Because Pass 0 and Pass 3 act on exactly the same information, to avoid an extra database round trip, the queries for Pass 0 and Pass 3 are combined into one  affiliates  query to the database. If the results from Pass 3 are not required because Pass 0, Pass 1, and Pass 2 have generated enough results, they are simply discarded by the front door. Pass 4 If Pass 4 is similar to Pass 1, except that it returns sessions that are in a different gamer zone and does not exclude sessions with a different language or country, and resultsNeeded is reduced by the number of sesions returned by Pass 1 and Pass 2. Within the Pass 4 result set the results are ordered as follows: Sessions where X_ATTRIBUTE_GAMER_LANGUAGE and X_ATTRIBUTE_GAMER_COUNTRY are equal to the client values are returned first. Sessions where only X_ATTRIBUTE_GAMER_LANGUAGE is equal to the client values are returned next. Sessions where only X_ATTRIBUTE_GAMER_COUNTRY is equal to the client values are returned next. Sessions where neither X_ATTRIBUTE_GAMER_LANGUAGE nor X_ATTRIBUTE_GAMER_COUNTRY are equal to the client values are returned last. Within each of these groupings, the title defined sort operations are applied, followed by the draw probability sort. Because Pass 1, Pass 2, and Pass 4 act on exactly the same information, to avoid extra database round trips, the queries for Pass 1, Pass 2 and Pass 4 are combined into one query to the database. However, because the query knows how many results the front door is looking for (max_results + # of negative sessions), the stored proc is able to exit after performing the work for Pass 1 or Pass 2 if it knows there will be enough results to satisfy the front door. MultiServer Issues If a title is spans multiple match SQL servers, the affiliate session queries in Pass 0 and Pass 3 must be performed against all the SQL partitions for that titleid. The non-affiliate session queries in Pass 1, Pass 2, and Pass 4 will be performed against one SQL server only. The Pass 1, Pass 2, and Pass 4 search queries for a particular title will cycle through the SQL partitions on a round robin basis. It should be noted that spanning a title across multiple servers reduces the effectiveness of matchmaking, because the queries are being performed on a subset of the total sessions available. If all sessions are present on one SQL server, it is possible to return the best sessions to the client, instead of a random subset of the best sessions. Match Database Design Datatypes The following table shows how xlast datatypes are mapped to T-SQL, C#, and wiredata representations. Xlast Type Name T-SQL Data Type C# type Wiredata DateTime (8 bytes) DATETIME DateTime 64 bit unsigned long integer Float (4 bytes) float 64 bit unsigned long integer Integer (4 bytes) 64 bit unsinged long integer Long Float (8 bytes) FLOAT double 64 bit unsinged long integer Long Integer (8 bytes) BIGINT 64 bit unsinged long integer String ** supported only for gamer tag NVARCHAR(400) string 2 byte length prefix + up to 400 bytes of UTF8 encoded character data (not 400 character, 400 bytes) plus 1 byte null terminator. Blob ** not allowed for xbox 360 titles VARBINARY(800) byte[] 2 byte length prefix + up to 800 bytes of binary data (no terminator) Session Tables Each title will have two session tables; one for ranked matches and one for standard matches. We choose to separate the sessions into two tables because the clustered index required for ranked queries to perform well is different from the clustered index required for standard matches to perform well. The definition of the standard table looks like this:     CREATE TABLE dbo.t_match_sessions_0xFFFF2003_standard (          bi_session_id           bigint                  NOT NULL         ,i_ip_addr               int                     NOT NULL         ,i_sg_ip                 int                     NOT NULL         ,b_box_id                binary(16)              NOT NULL         ,b_host_address          binary(36)              NOT NULL         ,b_key_exchange_key      binary(16)              NOT NULL         ,i_public_available      int                     NOT NULL         ,i_private_available     int                     NOT NULL         ,i_public_current        int                     NOT NULL         ,i_private_current       int                     NOT NULL         ,dt_session_expiration   datetime                NOT NULL         ,ti_is_available         tinyint                 NOT NULL         ,i_hash                  int                     NOT NULL         ,ti_nat_type             tinyint                 NOT NULL         ,att_0x0000800A          int NOT NULL         ,att_0x0000800B          bigint NOT NULL         ,att_0x10008101          int NOT NULL         ,att_0x10008102          int NOT NULL         ,att_0x10008103          int NOT NULL         ,att_0x50008104          real NOT NULL         ,att_0x30008105          float NOT NULL         ,att_0x30008106          float NOT NULL         ,att_0x10000001          int         CONSTRAINT t_match_sessions_0xFFFF2003_standard_pk PRIMARY KEY NONCLUSTERED                     (bi_session_id),     )     CREATE CLUSTERED INDEX t_match_sessions_0xFFFF2003_standard_ndx on t_match_sessions_0xFFFF2003_standard (          ti_is_available         ,att_0x0000800B         ,att_0x50008104         ,bi_session_id     )     CREATE NONCLUSTERED INDEX t_match_sessions_0xFFFF2003_standard_ndx_boxid_nc on t_match_sessions_0xFFFF2003_standard (          b_box_id     )          There are a number of universal columns with descriptive names, followed by a number of universal columns named for the attributes ids: X_ATTRIBUTE_GAME_TYPE (0x0000800A) X_ATTRIBUTE_GAME_MODE (0x0000800B) X_ATTRIBUTE_GAMER_ZONE (0x10008101) X_ATTRIBUTE_GAMER_COUNTRY (0x10008102) X_ATTRIBUTE_GAMER_LANGUAGE (0x10008103) X_ATTRIBUTE_GAMER_RATING (0x50008104) X_ATTRIBUTE_GAMER_MU (0x30008105) X_ATTRIBUTE_GAMER_SIGMA (0x30008106) All of these are defined as NOT NULL. Following these universal columns are the title defined columns. Note that the title may provide game type and game mode in xlast. If they do, those attributes will not be duplicated, but instead will simply be ignored in favor of the built in definitions above. The primary key is bi_session_id, and is non-clustered. This non-clustered index will provide reasonably efficient bookmark lookups for FindById queries and affiliate session lookups. There is another non clustered index on b_box_id. This is used to delete sessions in a reasonably efficient manner when processing Dead SG and Dead Xbox messages. The clustered index is on ti_is_available, game mode, gamer rating, and session id. Game type is not included in the clustered index, since it will always be the same in this table. Any single query will always be restricted to sessions that are available, in particular game type and game mode. Putting these three columns at the beginning of the clustered index ensures that the sessions that will be considered by any one search query are on contiguous pages in the database. Gamer rating is part of the clustered index so we can efficiently determine what range of ratings should be used to generate the appropriate number of rows to present to the order by clause in a query. The session id is added to the end of the clustered index to guarantee uniqueness. If we didn t do this, SQL server would add an internal hidden column containing a guid to guanratee uniqueness, which would be less efficient than simply using session id. The definition of the ranked table is almost identical:     CREATE TABLE dbo.t_match_sessions_0xFFFF2003_ranked (          bi_session_id           bigint                  NOT NULL         ,i_ip_addr               int                     NOT NULL         ,i_sg_ip                 int                     NOT NULL         ,b_box_id                binary(16)              NOT NULL         ,b_host_address          binary(36)              NOT NULL         ,b_key_exchange_key      binary(16)              NOT NULL         ,i_public_available      int                     NOT NULL         ,i_private_available     int                     NOT NULL         ,i_public_current        int                     NOT NULL         ,i_private_current       int                     NOT NULL         ,dt_session_expiration   datetime                NOT NULL         ,ti_is_available         tinyint                 NOT NULL         ,i_hash                  int                     NOT NULL         ,ti_nat_type             tinyint                 NOT NULL         ,att_0x0000800A          bigint NOT NULL         ,att_0x0000800B          bigint NOT NULL         ,att_0x10008101          int NOT NULL         ,att_0x10008102          int NOT NULL         ,att_0x10008103          int NOT NULL         ,att_0x50008104          real NOT NULL         ,att_0x30008105          float NOT NULL         ,att_0x30008106          float NOT NULL         ,att_0x10000001          int         CONSTRAINT t_match_sessions_0xFFFF2003_ranked_pk PRIMARY KEY NONCLUSTERED                     (bi_session_id),     )     CREATE CLUSTERED INDEX t_match_sessions_0xFFFF2003_ranked_ndx on t_match_sessions_0xFFFF2003_ranked (          ti_is_available         ,att_0x0000800B         ,att_0x30008105         ,bi_session_id     )     CREATE NONCLUSTERED INDEX t_match_sessions_0xFFFF2003_ranked_ndx_boxid_nc on t_match_sessions_0xFFFF2003_ranked (          b_box_id     ) Other than the table and index names the only significant difference is the clustered index. Instead of gamer rating, the clustered index includes gamer mu. This is because ranked queries must efficiently search in ranges of mu, whereas standard queries need to search efficiently in ranges of ratings. Session ID Uniqueness The primary key on bi_session_id in the ranked and standard tables only guarantees uniqueness within that table. We need session ids to be unqiue across an entire title, which spans not only the ranked and standard tables, but also potentially multiple database servers. To address this issue, when creating a session, the front door selects a session id as follows: Randomly select a 64 bit session id If the session id is all zeros in the top 48 bits, then try again until we have a session id that is non-zero in the top 48 bits Set the least significant nibble (0x000F) equal to the database server id this session is being created on. The first server in use by a title is server id 0, the second server in use by a title is session id 1, and so on. We do not support more than 16 servers per title. This ensures that session ids on different servers will never be the same. It also helps the front door locate sessions for FindById queries. Set the 2nd least significant nibble (0x00F0) to the host type as indicated by the client. Note that this also encodes the NAT type. This ensures that session ids for system link games will be different from session ids for matchmaking sessions. Set the 2nd least significant byte (0xFF00) equal to the game type. This ensures that the session ids in the ranked table are different from the session ids in the standard table. The front door then tries to create a session. In rare cases, the front door may have randomly selected a session id that is already in use. In that case, the insert session operation will fail with a primary key violation, and the front door will select a new session id and retry. The front door will retry up to 3 times before giving up and returning an error to the client. Insert Stored Proc Each title will have a single insert stored proc created for it using statements with the structure below: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_insert]      @bi_session_id                 bigint     ,@i_ip_addr                     int     ,@i_sg_ip                       int     ,@b_box_id                      binary(16)     ,@b_host_address                binary(36)     ,@b_key_exchange_key            binary(16)     ,@i_public_available            int     ,@i_private_available           int     ,@i_public_current              int     ,@i_private_current             int     ,@i_expiration                  int     ,@ti_nat_type                   tinyint     ,@att_0x0000800A                bigint     ,@att_0x0000800B                bigint     ,@att_0x10008101                int     ,@att_0x10008102                int     ,@att_0x10008103                int     ,@att_0x50008104                real     ,@att_0x30008105                float     ,@att_0x30008106                float     ,@att_0x20008107                bigint = NULL     ,@att_0x10000001                int = NULL -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     DECLARE         -- Generic          @i_return_code             int         ,@error_var                 int         ,@dt_expire_date            datetime         ,@ti_is_available           tinyint     SET nocount on     SELECT @dt_expire_date = DATEADD(second, @i_expiration, GETUTCDATE())     --     --  Insert the session, GAME_TYPE=0 is ranked, GAME_TYPE=1 is standard     --     SET @ti_is_available = CASE WHEN @i_public_available > 0 THEN 1 ELSE 0 END     if (@att_0x30008105 > 6.0)         set @att_0x30008105 = 6.0     else if (@att_0x30008105 < 0.0)         set @att_0x30008105 = 0.0     if (@att_0x50008104 > 100.0)         set @att_0x50008104 = 100.0     else if (@att_0x50008104 < 0.0)         set @att_0x50008104 = 0.0     if (@att_0x0000800A = 0)     begin         INSERT INTO dbo.t_match_sessions_0xFFFF2003_ranked (              bi_session_id             ,i_ip_addr             ,i_sg_ip             ,b_box_id             ,b_host_address             ,b_key_exchange_key             ,i_public_available             ,i_private_available             ,i_public_current             ,i_private_current             ,dt_session_expiration             ,ti_is_available             ,i_hash             ,ti_nat_type             ,att_0x0000800A             ,att_0x0000800B             ,att_0x10008101             ,att_0x10008102             ,att_0x10008103             ,att_0x50008104             ,att_0x30008105             ,att_0x30008106             ,att_0x10000001         ) VALUES (              @bi_session_id             ,@i_ip_addr             ,@i_sg_ip             ,@b_box_id             ,@b_host_address             ,@b_key_exchange_key             ,@i_public_available             ,@i_private_available             ,@i_public_current             ,@i_private_current             ,@dt_expire_date             ,@ti_is_available             ,RAND() * 10000             ,@ti_nat_type             ,@att_0x0000800A             ,@att_0x0000800B             ,@att_0x10008101             ,@att_0x10008102             ,@att_0x10008103             ,@att_0x50008104             ,@att_0x30008105             ,@att_0x30008106             ,@att_0x10000001         )     end     else     begin         INSERT INTO dbo.t_match_sessions_0xFFFF2003_standard (              bi_session_id             ,i_ip_addr             ,i_sg_ip             ,b_box_id             ,b_host_address             ,b_key_exchange_key             ,i_public_available             ,i_private_available             ,i_public_current             ,i_private_current             ,dt_session_expiration             ,ti_is_available             ,i_hash             ,ti_nat_type             ,att_0x0000800A             ,att_0x0000800B             ,att_0x10008101             ,att_0x10008102             ,att_0x10008103             ,att_0x50008104             ,att_0x30008105             ,att_0x30008106             ,att_0x10000001         ) VALUES (              @bi_session_id             ,@i_ip_addr             ,@i_sg_ip             ,@b_box_id             ,@b_host_address             ,@b_key_exchange_key             ,@i_public_available             ,@i_private_available             ,@i_public_current             ,@i_private_current             ,@dt_expire_date             ,@ti_is_available             ,RAND() * 10000             ,@ti_nat_type             ,@att_0x0000800A             ,@att_0x0000800B             ,@att_0x10008101             ,@att_0x10008102             ,@att_0x10008103             ,@att_0x50008104             ,@att_0x30008105             ,@att_0x30008106             ,@att_0x10000001         )     end     SELECT @error_var = @@ERROR     IF @error_var != 0     BEGIN         IF @error_var = 2627 -- integrity violation         BEGIN             -- setting the return code is really pointless since xmatchfd will receive DB_E_INTEGRITYVIOLATION             -- but it is important to set error_var to 0 since this occurs in normal operation and we don't want             -- event spew on every occurance.             SET @i_return_code = 0x80155112  -- XONLINE_E_MATCH_SESSION_ALREADY_EXISTS             SET @error_var = 0             GOTO exit_label         END         SET @i_return_code = 0x80155115  -- XONLINE_E_MATCH_CRITICAL_DB_ERR         GOTO exit_label     END     RETURN 0 exit_label:     IF @error_var != 0     BEGIN         DECLARE @message varchar(255)         SELECT @message = 'XMATCH_SESSION_INSERT_FAILED: p_match_session_0xFFFF2003_insert - ' + CAST(CAST(CAST(@error_var AS binary(4)) AS int) AS varchar(64))         EXEC master.dbo.xp_logevent 51709, @message, error     END     RETURN @i_return_code Things to note: The stored proc looks at the game type parameter to determine which table to insert the row into. All title defined attributes may be null and do not need to be specified. The gamer puid is listed as a parameter, because the client is allowed to send it up, but is optional and has no effect. The values for mu and rating are forced to be within their expected bounds. Update Stored Proc Each title will have a single update stored proc created for it using statements with the structure below: Statement 1: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_update]      @bi_session_id                 bigint     ,@i_public_available            int     ,@i_private_available           int     ,@i_public_current              int     ,@i_private_current             int     ,@i_expiration                  int     ,@att_0x0000800A                bigint = NULL     ,@att_0x0000800B                bigint = NULL     ,@att_0x10008101                int = NULL     ,@att_0x10008102                int = NULL     ,@att_0x10008103                int = NULL     ,@att_0x50008104                real = NULL     ,@att_0x30008105                float = NULL     ,@att_0x30008106                float = NULL     ,@att_0x20008107                bigint = NULL     ,@att_0x10000001                int = NULL -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     DECLARE          @i_return_code             int         ,@error_var                 int         ,@rowcount_var              int         ,@dt_expire_date            datetime         ,@ti_is_available           tinyint     SET nocount on     SELECT @dt_expire_date = DATEADD(second,@i_expiration,GETUTCDATE())     if (@att_0x30008105 IS NOT NULL and @att_0x30008105 > 6.0)         set @att_0x30008105 = 6.0     else if (@att_0x30008105 IS NOT NULL and @att_0x30008105 < 0.0)         set @att_0x30008105 = 0.0     if (@att_0x50008104 IS NOT NULL and @att_0x50008104 > 100.0)         set @att_0x50008104 = 100.0     else if (@att_0x50008104 IS NOT NULL and @att_0x50008104 < 0.0)         set @att_0x50008104 = 0.0     --     --  Update the session     --     SET @ti_is_available = CASE WHEN @i_public_available > 0 THEN 1 ELSE 0 END     if ((@bi_session_id & 0x000000000000FF00) = 0)     begin         if (@att_0x0000800A IS NOT NULL and @att_0x0000800A != 0)         begin             set @error_var = 2148880665 -- XONLINE_E_MATCH_INVALID_PARAM             goto exit_label         end         UPDATE dbo.t_match_sessions_0xFFFF2003_ranked SET              i_public_available = @i_public_available             ,i_private_available = @i_private_available             ,i_public_current = @i_public_current             ,i_private_current = @i_private_current             ,dt_session_expiration = @dt_expire_date             ,ti_is_available = @ti_is_available             ,att_0x0000800B = ISNULL(@att_0x0000800B, att_0x0000800B)             ,att_0x10008101 = ISNULL(@att_0x10008101, att_0x10008101)             ,att_0x10008102 = ISNULL(@att_0x10008102, att_0x10008102)             ,att_0x10008103 = ISNULL(@att_0x10008103, att_0x10008103)             ,att_0x50008104 = ISNULL(@att_0x50008104, att_0x50008104)             ,att_0x30008105 = ISNULL(@att_0x30008105, att_0x30008105)             ,att_0x30008106 = ISNULL(@att_0x30008106, att_0x30008106)             ,att_0x10000001 = ISNULL(@att_0x10000001, att_0x10000001)             WHERE bi_session_id = @bi_session_id     end     else     begin         if (@att_0x0000800A IS NOT NULL and @att_0x0000800A != 1)         begin             set @error_var = 2148880665 -- XONLINE_E_MATCH_INVALID_PARAM             goto exit_label         end         UPDATE dbo.t_match_sessions_0xFFFF2003_standard SET              i_public_available = @i_public_available             ,i_private_available = @i_private_available             ,i_public_current = @i_public_current             ,i_private_current = @i_private_current             ,dt_session_expiration = @dt_expire_date             ,ti_is_available = @ti_is_available             ,att_0x0000800B = ISNULL(@att_0x0000800B, att_0x0000800B)             ,att_0x10008101 = ISNULL(@att_0x10008101, att_0x10008101)             ,att_0x10008102 = ISNULL(@att_0x10008102, att_0x10008102)             ,att_0x10008103 = ISNULL(@att_0x10008103, att_0x10008103)             ,att_0x50008104 = ISNULL(@att_0x50008104, att_0x50008104)             ,att_0x30008105 = ISNULL(@att_0x30008105, att_0x30008105)             ,att_0x30008106 = ISNULL(@att_0x30008106, att_0x30008106)             ,att_0x10000001 = ISNULL(@att_0x10000001, att_0x10000001)             WHERE bi_session_id = @bi_session_id     end     SELECT @error_var = @@ERROR, @rowcount_var = @@ROWCOUNT     IF @error_var != 0     BEGIN         SET @i_return_code = 0x80155115  -- XONLINE_E_MATCH_CRITICAL_DB_ERR         GOTO exit_label     END     IF @rowcount_var = 0     BEGIN         SET @i_return_code = 0x80155100  -- XONLINE_E_MATCH_INVALID_SESSION_ID         GOTO exit_label     END     RETURN 0 exit_label:     IF @error_var != 0     BEGIN         DECLARE @message varchar(255)         SELECT @message = 'XMATCH_SESSION_UPDATE_FAILED: p_match_session_0xFFFF2003_update - ' + CAST(CAST(CAST(@error_var AS binary(4)) AS int) AS varchar(64))         EXEC master.dbo.xp_logevent 51710, @message, error     END     RETURN @i_return_code Things to note: The stored proc looks at the session id to determine which table to update the row in. If the client attempts to change the game type, the stored proc will fail. Other built in attributes may be supplied. If they are supplied, then their value is updated. If they are not supplied, then the value in the table is not changed. Title defined attributes may be supplied. If they are supplied, then their value is updated. If they are not supplied, then the value in the table is not changed. Delete Stored Proc Each title will have a single delete stored proc created for it using statements with the structure below: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_delete]      @bi_session_id                 bigint -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     DECLARE          @i_return_code             int         ,@error_var                 int         ,@rowcount_var              int     SET nocount on     --     --  Delete the session     --     if ((@bi_session_id & 0x000000000000FF00) = 0)     begin         DELETE dbo.t_match_sessions_0xFFFF2003_ranked WHERE bi_session_id = @bi_session_id     end     else     begin         DELETE dbo.t_match_sessions_0xFFFF2003_standard WHERE bi_session_id = @bi_session_id     end     SELECT @error_var = @@ERROR, @rowcount_var = @@ROWCOUNT     IF @error_var != 0     BEGIN         SET @i_return_code = 0x80155115  -- XONLINE_E_MATCH_CRITICAL_DB_ERR         GOTO exit_label     END     IF @rowcount_var = 0     BEGIN         SET @i_return_code = 0x80155100 -- XONLINE_E_MATCH_INVALID_SESSION_ID         GOTO exit_label     END     RETURN 0 exit_label:     IF @error_var != 0     BEGIN         DECLARE @message varchar(255)         SELECT @message = 'XMATCH_SESSION_DELETE_FAILED: p_match_session_0xFFFF2003_delete - ' + CAST(CAST(CAST(@error_var AS binary(4)) AS int) AS varchar(64))         EXEC master.dbo.xp_logevent 51711, @message, error     END     RETURN @i_return_code Things to note: The stored proc looks at the session id to determine which table to delete the row from. System FindByID Query Each title will have a system defined FindById query created for it using statements with the structure below: Statement 1: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_search_findbyid]     @si_required_slots              smallint,     @i_client_ip                    int,     @ti_nat_type                    tinyint,     @ti_server_count                tinyint,     @param_0x20008003               bigint -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     if ((@param_0x20008003 & 0x000000000000FF00) = 0)     begin         SELECT TOP 1             s.bi_session_id,             s.b_host_address,             s.b_key_exchange_key,             s.i_public_available,             s.i_private_available,             s.i_public_current,             s.i_private_current         FROM dbo.t_match_sessions_0xFFFF2003_ranked s WITH (NOLOCK)         WHERE             (@param_0x20008003 = s.bi_session_id)     end     else     begin         SELECT TOP 1             s.bi_session_id,             s.b_host_address,             s.b_key_exchange_key,             s.i_public_available,             s.i_private_available,             s.i_public_current,             s.i_private_current         FROM dbo.t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)         WHERE             (@param_0x20008003 = s.bi_session_id)     end     RETURN 0 Things to note: no title defined attributes are returned, this query is identical for all titles except for its name and the table it references the session id is used to determine which table to search for the session Title Defined Queries Titles define their matchmaking queries in xlast. Below is an example of a Query element from an xlast file. <Query clsid="{7FEE4CB1-F3F0-48BF-9CA1-F1B2306E32E3}" id="0" friendlyName="MyQuery" maxResults="25" type="Normal" qosProbe="true" groupBy="0xFFFFFFFF">  <Parameters>   <Parameter id="0x10000001"/>   <Parameter id="0x20000002"/>   <Parameter id="0x50000003"/>   <Parameter id="0x30000006"/>   <Parameter id="0x70000007"/>   <Parameter id="0x00000002"/>  </Parameters>  <Filters>   <Filter left="0x30000006" leftType="Parameter" op="&gt;" right="0x30000006" rightType="Attribute"/>   <Filter left="0x00000002" leftType="Attribute" op="==" right="0x00000001" rightType="ContextValue"/>   <Filter left="0x10000001" leftType="Attribute" op="==" right="0x15000000" rightType="Constant"/>  </Filters>  <SortOperations>   <SortOperation id="0x70000007" type="Descending" distanceid="0xFFFFFFFF" ordinal="0"/>   <SortOperation id="0x50000003" type="Near" distanceid="0x52000003" ordinal="1"/>  </SortOperations>  <Returns>   <Return id="0x0000800A" type="Normal" ordinal="0"/>   <Return id="0x0000800B" type="Normal" ordinal="1"/>   <Return id="0x10000001" type="Normal" ordinal="2"/>   <Return id="0x20000002" type="Normal" ordinal="3"/>  </Returns> </Query> maxResults determines the maximum number of rows the query will return. Each Filter represents a WHERE condition, that restricts the rows returned. Each SortOperation represents an ORDER BY condition that determines how the results that meet the where clause will be sorted, which determines the order in which the 25 rows are returned, and if there are more than 25 rows that meet the filter criteria, which of those rows will be returned. Each Return adds a column to the select statement, such that the attribute is part of the search results. For each title defined query, three stored procs are generated. One stored proc searches for affiliate sessions given a list of session ids and the usual query parameters, one stored proc searches for standards sessions, and the final stored proc searches for ranked sessions. Affiliates Query The match front door gets a list of potential affiliate session ids from the presence front door, sorts them by affiliate value, and then queries the database to see which of those session ids actually meet the requirements of the title defined query. Each affiliates query has the following structure: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_0x00000000_search_affiliates]     @i_max_results                  int OUTPUT    ,@si_required_slots              smallint    ,@i_client_ip                    int    ,@ti_nat_type                    tinyint    ,@ti_server_count                tinyint    ,@i_session_id_count             int    ,@vb_session_ids                 varbinary(8000)    ,@param_0x0000800A               bigint    ,@param_0x0000800B               bigint    ,@param_0x10008101               int    ,@param_0x10008102               int    ,@param_0x10008103               int    ,@param_0x50008104               real    ,@param_0x30008105               float    ,@param_0x30008106               float    ,@param_0x20008107               bigint -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     SET @i_max_results = 25     DECLARE @bi_session_id bigint     DECLARE @b_session_id binary(8)     DECLARE @i int     SET @i = 0     WHILE (@i < @i_session_id_count)     BEGIN         set @b_session_id = substring(@vb_session_ids, 1+(@i * 8), 8)         set @bi_session_id = convert(bigint, @b_session_id)         SELECT             s.bi_session_id            ,s.b_host_address            ,s.b_key_exchange_key            ,s.i_public_available            ,s.i_private_available            ,s.i_public_current            ,s.i_private_current            ,s.att_0x0000800A            ,s.att_0x0000800B            ,s.att_0x10000001            ,s.att_0x10008101         FROM t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)         WHERE               (s.ti_is_available = 1)               AND (s.att_0x0000800A = @param_0x0000800A)               AND (s.att_0x0000800B = @param_0x0000800B)               AND (s.bi_session_id = @bi_session_id)               AND (s.i_public_available >= @si_required_slots)               AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)         set @i = @i + 1     END Things to note: The list of session ids is passed as an array of bytes [varbinary(8000)]. With each id containing 8 bytes, up to 1000 session ids can be passed. If the front door tries to pass more than this, it will get a sql exception. The front door limits its list of positive affiliate sessions to 1000 for this reason, which is still far more than we expect to have in practice. A simple select statement is performed for each session id in the array. The select statement will return a single row if the session with that id is available, in the right game mode, game type, has enough slots available, has a compatible nat type, plus any other title defined filters. The queries are only performed on the standard session table, because affiliates are not used for ranked queries. The select statement returns the row no matter if the session is in the same gamer zone or not. The gamer zone is returned as one of the query columns, and the front door checks each row to decide if it should be added to the list of in-zone or out-of-zone games. This solution is straightforward, easy to code and understand. However, a solution that generates a dynamic sql statement that performs a single select statement with a join to 1000 session ids may have performance advantages. Stress will hopefully tell us if we should try it. Ranked Query The goal of the ranked query is to find, as quickly as possible, the closest ranked sessions that meet all the standard and title defined selection criteria. Each affiliates query has the following structure: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_0x00000000_search_ranked]     @i_max_results                  int OUTPUT    ,@si_required_slots              smallint    ,@i_client_ip                    int    ,@ti_nat_type                    tinyint    ,@ti_server_count                tinyint    ,@param_0x0000800A               bigint    ,@param_0x0000800B               bigint    ,@param_0x10008101               int    ,@param_0x10008102               int    ,@param_0x10008103               int    ,@param_0x50008104               real    ,@param_0x30008105               float    ,@param_0x30008106               float    ,@param_0x20008107               bigint -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     SET @i_max_results = 25     if (@param_0x30008105 > 6.0)         set @param_0x30008105 = 6.0     else if (@param_0x30008105 < 0.0)         set @param_0x30008105 = 0.0     declare @f_mu_range float     declare @f_mu_upper_bound float     declare @f_mu_lower_bound float     declare @f_five float     declare @i int     declare @i_rowcount int     set @f_five = 5.0     set @i_rowcount = 0     set @i = -5     while (@i < 1 AND @i_rowcount < 100)     begin         set @f_mu_range = 3.0 * power(@f_five, cast(@i as float))         set @f_mu_upper_bound = @param_0x30008105 + @f_mu_range         set @f_mu_lower_bound = @param_0x30008105 - @f_mu_range         if (@f_mu_lower_bound < 0)         begin             set @f_mu_upper_bound = @f_mu_upper_bound - @f_mu_lower_bound             set @f_mu_lower_bound = 0.0         end         else if (@f_mu_upper_bound > 6.0)         begin             set @f_mu_lower_bound = @f_mu_lower_bound - (@f_mu_upper_bound - 6.0)             set @f_mu_upper_bound = 6.0         end         set @i_rowcount = (select count(*)             FROM t_match_sessions_0xFFFF2003_ranked s WITH (NOLOCK)             WHERE                 (s.ti_is_available = 1)                 AND (s.att_0x0000800A = @param_0x0000800A)                 AND (s.att_0x0000800B = @param_0x0000800B)                 AND (s.att_0x30008105 <= @f_mu_upper_bound)                 AND (s.att_0x30008105 >= @f_mu_lower_bound)                 AND (s.i_public_available >= @si_required_slots)                 AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)         )         set @i = @i + 1     end     declare @i_upper_hash_bound1 int     declare @i_lower_hash_bound1 int     declare @i_upper_hash_bound2 int     declare @i_lower_hash_bound2 int     declare @i_hash_count int     set @i_upper_hash_bound1 = 10000     set @i_lower_hash_bound1 = 0     set @i_upper_hash_bound2 = 0     set @i_lower_hash_bound2 = 0     set @i_hash_count = 10000     if (@i_rowcount > 1000)     begin         set @i_hash_count = (1000 * 10000)/@i_rowcount         set @i_lower_hash_bound1 = (RAND() * 10000)         set @i_upper_hash_bound1 = @i_lower_hash_bound1 + @i_hash_count         if (@i_upper_hash_bound1 > 10000)         begin             set @i_upper_hash_bound2 = @i_upper_hash_bound1 - 10000             set @i_upper_hash_bound1 = 10000         end     end     select         -57341 as i_title_id,         0 as i_query_id,         @param_0x0000800A as i_game_type,         @param_0x0000800B as i_game_mode,         @param_0x30008105 as f_gamer_mu,         (5 + @i) as i_iterations,         @i_rowcount as i_rowcount,         @f_mu_range as f_mu_range,         @f_mu_upper_bound as f_mu_upper_bound,         @f_mu_lower_bound as f_mu_lower_bound,         @i_lower_hash_bound1 as i_lower_hash_bound1,         @i_upper_hash_bound1 as i_upper_hash_bound1,         @i_lower_hash_bound2 as i_lower_hash_bound2,         @i_upper_hash_bound2 as i_upper_hash_bound2     select top 25         s.bi_session_id        ,s.b_host_address        ,s.b_key_exchange_key        ,s.i_public_available        ,s.i_private_available        ,s.i_public_current        ,s.i_private_current        ,s.att_0x0000800A        ,s.att_0x0000800B        ,s.att_0x10000001     FROM t_match_sessions_0xFFFF2003_ranked s WITH (NOLOCK)     WHERE         (s.ti_is_available = 1)         AND (s.att_0x0000800A= @param_0x0000800A)         AND (s.att_0x0000800B= @param_0x0000800B)         AND (s.att_0x30008105 <= @f_mu_upper_bound)         AND (s.att_0x30008105 >= @f_mu_lower_bound)         AND ((s.i_hash >= @i_lower_hash_bound1 AND s.i_hash < @i_upper_hash_bound1)             OR (s.i_hash >= @i_lower_hash_bound2 AND s.i_hash < @i_upper_hash_bound2))         AND (s.i_public_available >= @si_required_slots)         AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)     ORDER BY         att_0x10000001 ASC        ,dbo.f_mu_sigma_draw_probability(att_0x30008105, att_0x30008106, @param_0x30008105, @param_0x30008106) ASC A naive implementation of this query would simply select all the rows the meet the title defined criteria, and then order by f_mu_sigma_draw_probability to find the best skill matches. However, in a world where we need to plan for 1e6 concurrent sessions, this naive implementation would quickly crush the sql server into submission as it tries to order by 1e6 rows. Some experimentation with Query Analyzer display of various query plans on a test database with many rows shows that, by far, the most significant thing we can do to improve the performance of the query is to reduce the number of rows that are presented to the order by clause to something reasonable. SQL can order by 1000 rows without much trouble. Therefore the first part of the query tries a series of expanding ranges of mu until it finds a range of mu that returns at least 100 rows. Each of these queries is very efficient, because it makes use of the clustered index on ti_is_available, att_0x0000800A (game type), att_0x0000800B (game mode) and att_0x30008105 (mu). The remaining filter clauses (nat type, required slots, and any title defined filters) can be performed reasonably quickly by SQL server, because all the rows it needs to filter will be in contiguous pages in the database, because we have restricted the search using the clustered index, and we start with a very narrow range and get gradually wider. There is a trade off between finding an excellent mu range and the number of queries we need to find that range. Since we re looking for a result set between 100 and 1000 (a factor of 10 difference), we choose to expand mu by a factor of 5 with each attempt. There is a good chance that a 5 times jump in the mu range could return for more than 1000 rows. To guard against this, each session has a random hash value assigned to it between 0 and 9999. If more than 1000 rows are present in the mu range, a subset of those rows are filtered out by only considering rows within a certain range of hash values. This also protects the server against a title that doesn t use mu properly (i.e. opts out of our skill system) and therefore mu always has the default value of 3. Before the real query is performed, the stored proc performs a select to return to the front door the mu range and hash range the proc has decided on. The front door can then add this to an app log so we can monitor how this query is working in the real world. This may help us to diagnose or fortell performance problems in production. While it is not recommended, the title may add their own sort operations, which will be applied before the draw probability sort. If a title does not wish to use our skill system, that title can leave mu and sigma at their default values (presumably by not reporting win/loss information). This query will then select about 1000 sessions at random from the total population of sessions that pass the filter criteria, and then sort by whatever operation the title specifies. Note that this is not nearly as efficient as when mu is a valid value, since the clustered index restriction is defeated.  If we allowed the title to send up their own mu value instead of ours, and if that title honored the same range of mu between 0 and 6 that ours does, then they could take advantage of the clustered index. This is possible because there is no direct communication between stats and match; match simply believes the mu sent up by the console, both for the host and the searcher. This is not currently possible because the client has no way to set mu explicitly. Here is the implementation of the function f_mu_sigma_draw_probability: ALTER function dbo.f_mu_sigma_draw_probability (     @f_muA float,     @f_sigmaA float,     @f_muB float,     @f_sigmaB float returns float begin     -- note: beta = 0.5, 2*(beta^2)=0.5     declare @f_muA_minus_muB_squared float     set @f_muA_minus_muB_squared = (@f_muA-@f_muB)*(@f_muA-@f_muB)     declare @f_sigmaA_squared_plus_sigmaB_squared float     set @f_sigmaA_squared_plus_sigmaB_squared = (@f_sigmaA*@f_sigmaA)+(@f_sigmaB*@f_sigmaB)     declare @f_draw_probability float     set @f_draw_probability =         exp(-((@f_muA_minus_muB_squared)/(1+2*@f_sigmaA_squared_plus_sigmaB_squared)))         * sqrt((0.5)/(0.5+@f_sigmaA_squared_plus_sigmaB_squared))     return @f_draw_probability Standard Query The goal of the standard query is to quickly find sessions that are the most socially compatible with the person making the query. The factors used to determine the social compatibility are gamer rating, gamer zone, country, and language. Here is the structure of the standard query: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_0x00000000_search_standard]     @i_max_results                  int OUTPUT    ,@i_negative_sessions            int    ,@si_required_slots              smallint    ,@i_client_ip                    int    ,@ti_nat_type                    tinyint    ,@ti_server_count                tinyint    ,@param_0x0000800A               bigint    ,@param_0x0000800B               bigint    ,@param_0x10008101               int    ,@param_0x10008102               int    ,@param_0x10008103               int    ,@param_0x50008104               real    ,@param_0x30008105               float    ,@param_0x30008106               float    ,@param_0x20008107               bigint -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     SET @i_max_results = 25     declare @i_results_found int     DECLARE @i_results_needed int     SET @i_results_needed = @i_max_results + @i_negative_sessions     if (@param_0x50008104 > 100.0)         set @param_0x50008104 = 100.0     else if (@param_0x50008104 < 0.0)         set @param_0x50008104 = 0.0     declare @f_rating_range float     declare @f_rating_upper_bound float     declare @f_rating_lower_bound float     declare @f_five float     declare @i int     declare @i_rowcount int     set @f_five = 5.0     set @i_rowcount = 0     set @i = -5     while (@i < 1 AND @i_rowcount < @i_results_needed)     begin         set @f_rating_range = 50.0 * power(@f_five, cast(@i as float))         set @f_rating_upper_bound = @param_0x50008104 + @f_rating_range         set @f_rating_lower_bound = @param_0x50008104 - @f_rating_range         if (@f_rating_lower_bound < 0)         begin             set @f_rating_upper_bound = @f_rating_upper_bound - @f_rating_lower_bound             set @f_rating_lower_bound = 0.0         end         else if (@f_rating_upper_bound > 100.0)         begin             set @f_rating_lower_bound = @f_rating_lower_bound - (@f_rating_upper_bound - 100.0)             set @f_rating_upper_bound = 100.0         end         set @i_rowcount = (select count(*)         FROM t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)         WHERE             (s.ti_is_available = 1)             AND (s.att_0x0000800A = @param_0x0000800A)             AND (s.att_0x0000800B = @param_0x0000800B)             AND (s.att_0x50008104 <= @f_rating_upper_bound)             AND (s.att_0x50008104 >= @f_rating_lower_bound)             AND (s.att_0x10008101 = @param_0x10008101)             AND (s.i_public_available >= @si_required_slots)             AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)         )         set @i = @i + 1     end     declare @i_upper_hash_bound1 int     declare @i_lower_hash_bound1 int     declare @i_upper_hash_bound2 int     declare @i_lower_hash_bound2 int     declare @i_hash_count int     set @i_upper_hash_bound1 = 10000     set @i_lower_hash_bound1 = 0     set @i_upper_hash_bound2 = 0     set @i_lower_hash_bound2 = 0     set @i_hash_count = 10000     if (@i_rowcount > 1000)     begin         set @i_hash_count = (1000 * 10000)/@i_rowcount         set @i_lower_hash_bound1 = (RAND() * 10000)         set @i_upper_hash_bound1 = @i_lower_hash_bound1 + @i_hash_count         if (@i_upper_hash_bound1 > 10000)         begin             set @i_upper_hash_bound2 = @i_upper_hash_bound1 - 10000             set @i_upper_hash_bound1 = 10000         end     end     select         -57341 as i_title_id,         0 as i_query_id,         @param_0x0000800A as i_game_type,         @param_0x0000800B as i_game_mode,         @param_0x50008104 as f_gamer_rating,         @param_0x10008101 as f_gamer_zone,         (5 + @i) as i_iterations,         @i_rowcount as i_rowcount,         @f_rating_range as f_rating_range,         @f_rating_upper_bound as f_rating_upper_bound,         @f_rating_lower_bound as f_rating_lower_bound,         @i_lower_hash_bound1 as i_lower_hash_bound1,         @i_upper_hash_bound1 as i_upper_hash_bound1,         @i_lower_hash_bound2 as i_lower_hash_bound2,         @i_upper_hash_bound2 as i_upper_hash_bound2     set rowcount @i_results_needed     select         s.bi_session_id        ,s.b_host_address        ,s.b_key_exchange_key        ,s.i_public_available        ,s.i_private_available        ,s.i_public_current        ,s.i_private_current        ,s.att_0x0000800A        ,s.att_0x0000800B        ,s.att_0x10000001            ,s.att_0x10008101     FROM t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)     WHERE         (s.ti_is_available = 1)         AND (s.att_0x0000800A= @param_0x0000800A)         AND (s.att_0x0000800B= @param_0x0000800B)         AND (s.att_0x50008104 <= @f_rating_upper_bound)         AND (s.att_0x50008104 >= @f_rating_lower_bound)         AND (s.att_0x10008101 = @param_0x10008101)         AND ((s.i_hash >= @i_lower_hash_bound1 AND s.i_hash < @i_upper_hash_bound1)             OR (s.i_hash >= @i_lower_hash_bound2 AND s.i_hash < @i_upper_hash_bound2))         AND (s.i_public_available >= @si_required_slots)         AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)     ORDER BY         CASE              WHEN (s.att_0x10008103 = @param_0x10008103 and s.att_0x10008102 = @param_0x10008103) THEN 3             WHEN (s.att_0x10008103 = @param_0x10008103) THEN 2             WHEN (s.att_0x10008102 = @param_0x10008102) THEN 1             ELSE 0         END        ,att_0x10000001 ASC        ,ABS(att_0x50008104 - @param_0x50008104) ASC     set @i_results_found = @@rowcount    set rowcount 0     if (@i_results_found >= @i_results_needed) RETURN 0     set @i_results_needed = @i_results_needed - @i_results_found     set @f_five = 5.0     set @i_rowcount = 0     set @i = -5     while (@i < 1 AND @i_rowcount < @i_results_needed)     begin         set @f_rating_range = 50.0 * power(@f_five, cast(@i as float))         set @f_rating_upper_bound = @param_0x50008104 + @f_rating_range         set @f_rating_lower_bound = @param_0x50008104 - @f_rating_range         if (@f_rating_lower_bound < 0)         begin             set @f_rating_upper_bound = @f_rating_upper_bound - @f_rating_lower_bound             set @f_rating_lower_bound = 0.0         end         else if (@f_rating_upper_bound > 100.0)         begin             set @f_rating_lower_bound = @f_rating_lower_bound - (@f_rating_upper_bound - 100.0)             set @f_rating_upper_bound = 100.0         end         set @i_rowcount = (select count(*)             FROM t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)             WHERE                 (s.ti_is_available = 1)                 AND (s.att_0x0000800A = @param_0x0000800A)                 AND (s.att_0x0000800B = @param_0x0000800B)                 AND (s.att_0x50008104 <= @f_rating_upper_bound)                 AND (s.att_0x50008104 >= @f_rating_lower_bound)                 AND (s.att_0x10008101 != @param_0x10008101)                 AND (s.i_public_available >= @si_required_slots)                 AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)         )         set @i = @i + 1     end     set @i_upper_hash_bound1 = 10000     set @i_lower_hash_bound1 = 0     set @i_upper_hash_bound2 = 0     set @i_lower_hash_bound2 = 0     set @i_hash_count = 10000     if (@i_rowcount > 1000)     begin         set @i_hash_count = (1000 * 10000)/@i_rowcount         set @i_lower_hash_bound1 = (RAND() * 10000)         set @i_upper_hash_bound1 = @i_lower_hash_bound1 + @i_hash_count         if (@i_upper_hash_bound1 > 10000)         begin             set @i_upper_hash_bound2 = @i_upper_hash_bound1 - 10000             set @i_upper_hash_bound1 = 10000         end     end     select         -57341 as i_title_id,         0 as i_query_id,         @param_0x0000800A as i_game_type,         @param_0x0000800B as i_game_mode,         @param_0x50008104 as f_gamer_rating,         @param_0x10008101 as f_gamer_zone,         (5 + @i) as i_iterations,         @i_rowcount as i_rowcount,         @f_rating_range as f_rating_range,         @f_rating_upper_bound as f_rating_upper_bound,         @f_rating_lower_bound as f_rating_lower_bound,         @i_lower_hash_bound1 as i_lower_hash_bound1,         @i_upper_hash_bound1 as i_upper_hash_bound1,         @i_lower_hash_bound2 as i_lower_hash_bound2,         @i_upper_hash_bound2 as i_upper_hash_bound2     set rowcount @i_results_needed     select         s.bi_session_id        ,s.b_host_address        ,s.b_key_exchange_key        ,s.i_public_available        ,s.i_private_available        ,s.i_public_current        ,s.i_private_current        ,s.att_0x0000800A        ,s.att_0x0000800B        ,s.att_0x10000001            ,s.att_0x10008101     FROM t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)     WHERE         (s.ti_is_available = 1)         AND (s.att_0x0000800A= @param_0x0000800A)         AND (s.att_0x0000800B= @param_0x0000800B)         AND (s.att_0x50008104 <= @f_rating_upper_bound)         AND (s.att_0x50008104 >= @f_rating_lower_bound)         AND (s.att_0x10008101 != @param_0x10008101)         AND ((s.i_hash >= @i_lower_hash_bound1 AND s.i_hash < @i_upper_hash_bound1)             OR (s.i_hash >= @i_lower_hash_bound2 AND s.i_hash < @i_upper_hash_bound2))         AND (s.i_public_available >= @si_required_slots)         AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)     ORDER BY         CASE              WHEN (s.att_0x10008103 = @param_0x10008103 and s.att_0x10008102 = @param_0x10008103) THEN 3             WHEN (s.att_0x10008103 = @param_0x10008103) THEN 2             WHEN (s.att_0x10008102 = @param_0x10008102) THEN 1             ELSE 0         END        ,att_0x10000001 ASC        ,ABS(att_0x50008104 - @param_0x50008104) ASC     set rowcount 0 The general approach of the standard query is similar to the ranked query. The differences are: instead of using mu to reduce the number of rows we need to sort, the gamer rating is used the process is repeated twice, once to find sessions in the same gamer zone, and once to find session in different gamer zones if enough session were found from the first query to satisfy the front door, the second query is skipped. because the front door may reject some returned sessions as duplicates or because they have negative affiliations, the stored proc calculates the number of rows to return as max_results + # of negative sessions, as passed in the @i_negative_sessions parameter, and uses the  set rowcount  feature to limit the number of rows returned instead of the  select top  syntax the order by clause first returns all the sessions that match both country and language, then sessions that match language only, then sessions that match country only, and finally sessions that match neither country nor language. within each subgroup defined by the country/language sort, title defined sort operations are applied, followed by sorting by how close the host s rating is to the client s rating. Title Defined Query Filters Each Filter element in the xlast file has the following structure:   <Filter left="0x30000006" leftType="Parameter" op="&gt;" right="0x30000006" rightType="Attribute"/> Each Filter element corresponds to a condition in the WHERE clause of the SELECT statement in the query, that restricits (i.e. filters) the rows returned by the query. The basic structure of the condition is: left_side op right_side For example: att_0x30000006 > @param_0x30000006 The left side may only be a schema attribute. The right side may be a type compatible parameter, constant, or context value. Title defined attributes and parameters are always allowed to be NULL. A NULL parameter is considered a wildcard. SQL server, however, does not consider NULL to be a wildcard, but is simply an absence of value. Therefore, to implement the wildcard functionality, the following syntax is used: s.att_0x10000001 == @param_0x10000001 OR @param_0x10000001 IS NULL If the left side of the comparison identifies a context, the the   attribute may only be one of == or !=. If it is a property, then it can be any of ==, !=, <, >, <=, >= (note that < and > are escapted as &gt; and &lt; in xml). If the left side of the comparison is an Attribute that is a Property, the right side of the comparison may be a Parameter that is a type compatible Property, or a type compatible Constant. Properties of type Int32, Int64, Float32, Float64 are all considered type compatible with each other, because they can be compared by SQL using the operators identified above. Datetimes Properties are only compatible with Datetime Attributes or Datetime Constants. Constants that can be compared to Property values are defined in the xlast file in the Constants element: <Constants clsid="{9DEE98C4-441C-4103-861B-464DF03B36B1}" nextId="1">  <Constant name="MyConstInt32" id="0x15000000" value="1"/> </Constants> This defines an Constant with id=0x15000000 of type Int32 with a value of 1. Note that, as with properties, the first nibble defines the datatype. The second nibble of a Constant will always be   to identify this id as a Constant. If the left side of the comparison is an Attribute that is a Context, then the right side of the comparison may be a Parameter  that is the same Context, or may be one of the literal ContextValues of that context. A Context is an enumeration which defines the full set of allowed values, which are assigned numerical values by xlast, and result in elements like this: <Context clsid="{7F343825-DBB8-4BC0-ACF2-533263622341}" stringId="25" defaultValue="0" friendlyName="MyContext" id="0x00000002">  <ContextValue friendlyName="MyContext0" value="0" stringId="26"/>  <ContextValue friendlyName="MyContext1" value="1" stringId="33"/> </Context> Sort Operations The Sort Operations in the xlast file have the following basic structure: <SortOperations>   <SortOperation id="0x70000007" type="Descending" distanceid="0xFFFFFFFF" ordinal="0"/>   <SortOperation id="0x50000003" type="Near" distanceid="0x52000003" ordinal="1"/>  </SortOperations> The Sort Operations correspond to an Order By clause on the Select statement that implements the query. For example, the Sort Operations above would translate to the following Order By clause on the select statement: ORDER BY att_0x70000007 DESC          ,ABS( att_0x50000003 - @param_0x52000003 ) ASC The id in the SortOperation element identifies the Schema Attribute that to Order By. The sort can be one of four types: Ascending, Descending, Near, Far. Ascending and Descending are straightforward, and result in an Order By condition that looks like this: att_0x50000003 ASC Or this: att_0x50000003 DESC The Near and Far are more complicated. They allow you subtract the value of a parameter from an attribute, and then sort on the difference, either ascending or descending. Near corresponds to an Ascending sort, because the difference will be small when the attribute is   the parameter in value. Far corresponds to a Descending sort, because the difference will be large when the attribute is   from the parameter in value. The distanceid parameter indicates which parameter id to subtract from the attribute id, and may be any type compatible Property Parameter. Context cannot be used in Sort Operations. The sort operations are applied to the Order By clause in ascending order by their ordinal values in the xlast file. The precedence between title defined sort operations and system defined sorts is described in the standard and ranked query descriptions above. Proximity LiveMatch.exe Xbox 1 Code Generation Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  ieieie gdtDL jrt8F gdj1# gdj1# jer8F j$x8F jms8F jC}8F gdj1# njnfbf jY}8F gd-'C {wswk gd=Y< gd{/[ gdiB> gdiB> gd(JG gd{/[ gd(JG gd]`n gd(JG gd{/[ gd]`n gdKEL gdI6w gdKEL
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\match\M3 Matchmaking Dev Spec.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Paul Newson Xbox Online Spec Template.dot Paul Newson Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags place nI;B9  Contents  TOC \o "1-2" \h \z \u   HYPERLINK \l "_Toc100026837"  Table of Contents  PAGEREF _Toc100026837 \h   HYPERLINK \l "_Toc100026838"  XRL Interfaces  PAGEREF _Toc100026838 \h   HYPERLINK \l "_Toc100026839"  Legacy Xbox Interfaces  PAGEREF _Toc100026839 \h   HYPERLINK \l "_Toc100026840"  Xenon Interfaces  PAGEREF _Toc100026840 \h   HYPERLINK \l "_Toc100026841"  Internal Interfaces  PAGEREF _Toc100026841 \h   HYPERLINK \l "_Toc100026842"  Match SQL Database  PAGEREF _Toc100026842 \h   HYPERLINK \l "_Toc100026843"  Match Code Generation  PAGEREF _Toc100026843 \h   HYPERLINK \l "_Toc100026844"  LiveMatch.exe  PAGEREF _Toc100026844 \h   HYPERLINK \l "_Toc100026845"  XMS to Xlast converter  PAGEREF _Toc100026845 \h   HYPERLINK \l "_Toc100026846"  Xbox 1 Code Generation  PAGEREF _Toc100026846 \h   HYPERLINK \l "_Toc100026847"  Proximity  PAGEREF _Toc100026847 \h   HYPERLINK \l "_Toc100026848"  M4 Social Match  PAGEREF _Toc100026848 \h   HYPERLINK \l "_Toc100026849"  Overview  PAGEREF _Toc100026849 \h   HYPERLINK \l "_Toc100026850"  Affiliation Value of a Session  PAGEREF _Toc100026850 \h   HYPERLINK \l "_Toc100026851"  Pass 0  PAGEREF _Toc100026851 \h   HYPERLINK \l "_Toc100026852"  Pass 1  PAGEREF _Toc100026852 \h   HYPERLINK \l "_Toc100026853"  Pass 2  PAGEREF _Toc100026853 \h   HYPERLINK \l "_Toc100026854"  Pass 3  PAGEREF _Toc100026854 \h   HYPERLINK \l "_Toc100026855"  Pass 4  PAGEREF _Toc100026855 \h   HYPERLINK \l "_Toc100026856"  Pass 5  PAGEREF _Toc100026856 \h   HYPERLINK \l "_Toc100026857"  MultiServer Issues  PAGEREF _Toc100026857 \h  XRL Interfaces Legacy Xbox Interfaces The following XRLs should be functionally equivalent to the behavior of the tsunami matchmaking service. Any difference is a possible backwards compatiblity issue and should be filed as a bug. xmatchhost.srf Create or update a matchmaking session. xmatchhostdelete.srf Delete a matchmaking session. xmatchclient.srf Search for matchmaking sessions Xenon Interfaces The following XRLs are used by Xenon clients to create, update, search for, and delete matchmaking sessions. Their functionality is close to the similarly named Legacy Xbox Interfaces, but some additional features have been added, and some have been removed. Note, the fundamental limits below have not changed:         public const uint X_MATCH_MAX_QUERY_PARAMS                    = 20;         public const uint X_MATCH_MAX_QUERY_RESULTS                   = 50;         public const uint X_MATCH_MAX_TITLE_SCHEMA_ATTRS              = 40;         public const uint X_MATCH_MAX_ATTRIBUTE_DATA                  = 4096; xmatchhost2.ashx Doesn t allow blob schema attributes (does allow strings) Doesn t allow XNET_XNKID_SYSTEM_LINK flag in create All schema attributes are allowed to be null. Allows new Xenon datatypes: contexts, plus properties of types: int64, int32, float32, float64, datetime. If the old X_ATTRIBUTE_DATATYPE_MASK is zero, then look in the top nibble for xenon subtype.         public const uint X_ATTRIBUTE_DATATYPE_MASK                   = 0x00F00000;         public const uint X_ATTRIBUTE_DATATYPE_INTEGER                = 0x00000000;         public const uint X_ATTRIBUTE_DATATYPE_STRING                 = 0x00100000;         public const uint X_ATTRIBUTE_DATATYPE_BLOB                   = 0x00200000;         public const uint X_ATTRIBUTE_DATATYPE_NULL                   = 0x00F00000;         // Xenon supports the extended datatypes below. In order to not change the         // protocol for existing clients, these extended types are all considered         // to be X_ATTRIBUTE_DATATYPE_INTEGER by this class. The front door          // checks these extended bits (which were previously unused)          // to interpret each of the 64 bit chunks of type INTEGER correctly.         public const uint X_ATTRIBUTE_XE_SUBTYPE_MASK                = 0x70000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_CONTEXT             = 0x00000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_UINT32              = 0x10000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_UINT64              = 0x20000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_FLOAT64             = 0x30000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_FLOAT32             = 0x50000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_DATETIME            = 0x70000000; All extended xenon datatypes look like datatype integer, which means they take 64 bits on the wire. Contexts are interpreted as 64 bit its. Int32, the top 32 bits are ignored Int64 is interpreted as 64 bit integer float32, top 32 bits are ignored, low 32 bits are interpreted as single precision IEEE floating point value. float64, 64 bits intepreted as double precision IEEE floating point value. See database.cs DBLayer.Pack64BitsWithFloat, Pack64BitsWithDouble, Interpret64BitsAsFloat, Interpret64BitsAsDouble datetimes are represented on the wire as FILETIME structures in UTC. See DateTime.ToFileTimeUtc, DateTime.FromFileTimeUtc. Update doesn t allow blob schema attributes. Adds xenon subtypes. xmatchhostdelete2.ashx No changes from Tsunami except XRL name. xmatchclient2.ashx In Xbox 1, only datatype was returned in attribute id. In Xenon, the full attribute id is returned in search results. Insert example for clarity. Any extended xenon datatypes in the schema that are returned, get converted and put on the wire as approprite see above. All parameters are allowed to be null. In Xenon, a parameter is considered null if it was defined as a parameter to the query in the xlast file, but the attribute id was not found in the attribute list on the xrl call. Example: The definition of the query in xlast, specifies that MyContext (id=0x00000002) is a parameter to the query. The list of attributes passed on the wire to xmatchclient2.ashx does not include any attribute marked with id=0x00000002. Therefire, MyContext was not passed to the query, and will be considered NULL. NOTE: until Paul checks in the code generator this will not work! The current code genertor names sql stored proc params by order not id and therefore params on the wire must be passed in the correct order. All parameters sent in the search query must be identified with a full attribute id. In xbox 1 only the datatype was required. [Spec Issue] Unclear right now if params passed on the wire are supposed to include the X_ATTRIBUTE_TYPE_PARAM bit flag. Paul will figure this out. No string or blob paramaters are allowed. No aggregate queries. No title defined FindById queries. Only the system generated FindById query is supported in Xenon, as query id        X_SSINDEX_GET_SESSION = 0xFFFFFFFF. Internal Interfaces These are only called by the SG or internal tools, therefore no back compat work required. deadxbox.ashx No changes. Same XRL. titlechange.ashx No changes. Same XRL. health.ashx No changes. Same XRL Match SQL Database Match Code Generation Note: This section describes the code generated for M3 matchmaking. This is designed to replicate, in most aspects, the behavior of the Tsunami version of xmltosql, and will eventually describe the code generated for Legacy Xbox titles. This section does not describe the code generated for M4 social matchmaking or skill based ranked matchmaking. Xenon code generator will consume xlast files not xms. Table names suffixes will be in hex, with leading 0x and all leading zeros. For example, for titleid 0x000003e7 (decimal 999), the match sessions table will be named t_match_sessions_0x000003e7 instead of t_match_sessions_999 like it was in Tsunami. Title defined columns (a.k.a schema attributes) within tables will use hex suffixes, with leading 0x and all leading zeros. For example, if property id=0x50000003 (a single precision floating point property) is part of the match schema for titleid 0x000003e7. Table t_match_sessions_0x000003e7 will have a column named att_0x50000003 Stored proc suffixes will use titleid in hex, with leading 0x and all leading zeros. The procedure index will also be in hex with 0x prefix and leading zeros. For example, the 10th stored proc (decimal) for titleid 0x000003e7, will be named p_match_search_0x000003e7_0x0000000A. Title defined stored proc query parameters will use hex suffixes, with 0x prefix and all leading zeros, based on the attribute id of that parameter (i.e. either a context id or property id, as indicated in xlast). For example, if property id=0x50000003 is passed to the 10th stored proc of titleid 0x000003e7, stored proc p_match_search_0x000003e7_10 will have a parameter named param_0x50000003.  Leading zeros will be added to hex strings up to 8 characters (i.e. a 32 bit dword representation). Note: for Legacy Xbox Titles, parameters to stored procs must still be named by order, (e.g. param_1, param_2, param_3) because the legacy titles do not send the complete attribute id in the query, only the data type. Note: In Tsunami, parameters had a type prefix in the name (e.g. bi_param_1)  ve chosen to drop that prefix for Xenon. Xlast Type Name T-SQL Data Type C# type Wiredata DateTime (8 bytes) DATETIME DateTime 64 bit unsigned long integer Float (4 bytes) float 64 bit unsigned long integer Integer (4 bytes) 64 bit unsinged long integer Long Float (8 bytes) FLOAT double 64 bit unsinged long integer Long Integer (8 bytes) BIGINT 64 bit unsinged long integer String ** not yet supported in xlast NVARCHAR(400) string 2 byte length prefix + up to 400 bytes of UTF8 encoded character data (not 400 character, 400 bytes) plus 1 byte null terminator. Blob ** legacy only VARBINARY(800) byte[] 2 byte length prefix + up to 800 bytes of binary data (no terminator) Create Table One table is created for each title. The table is of the following basic form:     CREATE TABLE dbo.t_match_sessions_0x0000000A (          bi_session_id           bigint                  NOT NULL         ,i_ip_addr               int                     NOT NULL         ,i_sg_ip                 int                     NOT NULL         ,b_box_id                binary(16)              NOT NULL         ,b_host_address          binary(36)              NOT NULL         ,si_zoneID               smallint                NOT NULL         ,si_providerID           smallint                NOT NULL         ,b_key_exchange_key      binary(16)              NOT NULL         ,i_public_available      int                     NOT NULL         ,i_private_available     int                     NOT NULL         ,i_public_current        int                     NOT NULL         ,i_private_current       int                     NOT NULL         ,dt_session_expiration   datetime                NOT NULL         ,ti_is_available         tinyint                 NOT NULL         ,i_hash                  int                     NOT NULL         ,ti_nat_type             tinyint                 NOT NULL         CONSTRAINT t_match_sessions_0x0000000A_PK  PRIMARY KEY NONCLUSTERED                     (bi_session_id),     ) The table name is t_match_sessions_<titleid>, as shown above, where <titleid> is in hex notation with a leading 0x and leading zeros. All titleids in the match sql database will be in hex notation with leading 0x and leading zeros up to 32 bits. The primary key of the table is on bi_session_id, and will be called t_match_sessions_<titleid>_PK. It is not a clustered key, because we want a different clustered index. Two additional indexes will be created on each table, as shown below:     CREATE CLUSTERED INDEX ndx_match_sessions_0x0000000A  on t_match_sessions_0x0000000A (ti_is_available, i_hash)     CREATE NONCLUSTERED INDEX ndx_match_sessions_0x0000000A_boxid_NC  on t_match_sessions_0x0000000A (b_box_id) The clustered index of the table is on ti_is_available, i_hash, and will be called ndx_match_sessions_<titleid>, as shown above. A non-clustered index will be created on the table on b_box_id, and will be called ndx_match_sessions_<titleid>_boxid_NC Each attribute specified in the xlast file will result in an additional column in the table. For example, the following excerpt from an xlast file: <Schema clsid="{7134D48F-9957-4515-850B-A7426E51345F}"> <Attribute id="0x0000800A"/> <Attribute id="0x0000800B"/> <Attribute id="0x10000001"/> <Attribute id="0x20000002"/> <Attribute id="0x50000003"/> <Attribute id="0x30000006"/> <Attribute id="0x70000007"/> <Attribute id="0x00000002"/> </Schema> Would result in the following column additions to the table definition above:         ,att_0x0000800A          bigint         ,att_0x0000800B          bigint         ,att_0x10000001          int         ,att_0x20000002          bigint         ,att_0x50000003          real         ,att_0x30000006          float         ,att_0x70000007          datetime         ,att_0x00000002          bigint Note that all title defined attributes are allowed to be null. The data type of the column is determined by the high nibble (0x70000000) of the attribute id. High Nibble Meaning SQL Datatype 0x00000000 Context bigint 0x10000000 Property, Int32 0x20000000 Property, Int64 bigint 0x30000000 Property, Float64 float 0x50000000 Property, Float32 0x70000000 Property, Datetime datetime In order to avoid trying to create tables that already exist, and to grant appropriate permissions, these statements will be executed in the following context: IF EXISTS (SELECT * FROM dbo.sysobjects WHERE name = 't_match_sessions_0x0000000A' and type = 'u') BEGIN     PRINT '**Note: t_match_sessions_0x0000000A table already exists.  Creation has been skipped.' BEGIN     PRINT 'Creating t_match_sessions_0x0000000A table.'     CREATE TABLE dbo.t_match_sessions_0x0000000A (          bi_session_id           bigint                  NOT NULL         ,i_ip_addr               int                     NOT NULL         ,i_sg_ip                 int                     NOT NULL         ,b_box_id                binary(16)              NOT NULL         ,b_host_address          binary(36)              NOT NULL         ,si_zoneID               smallint                NOT NULL         ,si_providerID           smallint                NOT NULL         ,b_key_exchange_key      binary(16)              NOT NULL         ,i_public_available      int                     NOT NULL         ,i_private_available     int                     NOT NULL         ,i_public_current        int                     NOT NULL         ,i_private_current       int                     NOT NULL         ,dt_session_expiration   datetime                NOT NULL         ,ti_is_available         tinyint                 NOT NULL         ,i_hash                  int                     NOT NULL         ,ti_nat_type             tinyint                 NOT NULL         ,att_0x0000800A          bigint         ,att_0x0000800B          bigint         ,att_0x10000001          int         ,att_0x20000002          bigint         ,att_0x50000003          real         ,att_0x30000006          float         ,att_0x70000007          datetime         ,att_0x00000002          bigint         CONSTRAINT t_match_sessions_0x0000000A _PK  PRIMARY KEY NONCLUSTERED                     (bi_session_id),     )     CREATE CLUSTERED INDEX ndx_match_sessions_0x0000000A          on t_match_sessions_0x0000000A (ti_is_available, i_hash)     CREATE NONCLUSTERED INDEX ndx_match_sessions_0x0000000A _boxid_NC          on t_match_sessions_0x0000000A (b_box_id)     -- set permissions     GRANT SELECT, INSERT, UPDATE, DELETE ON dbo.t_match_sessions_0x0000000A TO ClientLib If the option to drop existing tables is specified (see /droptable, section 3.2) this: IF EXISTS (SELECT * FROM dbo.sysobjects WHERE name = 't_match_sessions_0x0000000A' and type = 'u') BEGIN     PRINT '**Note: t_match_sessions_0x0000000A table already exists.  Creation has been skipped.' Will be replaced with this: IF EXISTS (SELECT * FROM dbo.sysobjects WHERE name = 't_match_sessions_0x0000000A' and type = 'u') BEGIN     PRINT 'Dropping table t_match_sessions_0x0000000A'     DROP TABLE [dbo].[t_match_sessions_0x0000000A] Insert Stored Proc Each title will have a single insert stored proc created for it using statements with the structure below: Statement 1: IF NOT EXISTS (SELECT name FROM dbo.sysobjects WHERE  type = 'p' AND name = 'p_match_session_insert_0x0000000A ') BEGIN     EXEC('create procedure dbo.p_match_session_insert_0x0000000A as raiserror("Empty Stored Procedure!!", 16, 1) with seterror')     IF (@@error != 0)     BEGIN         PRINT 'FAILED to create p_match_session_insert_0x0000000A'     END Statement 2: ALTER PROCEDURE [dbo].[p_match_session_insert_0x0000000A]      @bi_session_id                 bigint     ,@i_ip_addr                     int     ,@i_sg_ip                       int     ,@b_box_id                      binary(16)     ,@b_host_address                binary(36)     ,@b_key_exchange_key            binary(16)     ,@i_public_available            int     ,@i_private_available           int     ,@i_public_current              int     ,@i_private_current             int     ,@i_expiration                  int     ,@ti_nat_type                   tinyint     ,att_0x0000800A                 bigint = NULL     ,att_0x0000800B                 bigint = NULL     ,att_0x10000001                 int = NULL     ,att_0x20000002                 bigint = NULL     ,att_0x50000003                 real = NULL     ,att_0x30000006                 float = NULL     ,att_0x70000007                 datetime = NULL     ,att_0x00000002                 bigint = NULL -- Do not modify. Build Info - !!Version=<version of livematch> BEGIN     DECLARE         -- Generic          @i_return_code             int         ,@i_ip_end                  int         ,@error_var                 int         ,@dt_expire_date            datetime         ,@si_zoneID                 smallint         ,@si_providerID             smallint         ,@ti_is_available           tinyint     SET nocount on     --     --  Lookup the zone id     --     SET @i_ip_end = null     SELECT TOP 1 @si_zoneID = si_zoneID, @si_providerID = si_providerID, @i_ip_end = i_ip_end     FROM v_match_zone_map m     WHERE m.i_ip_start <= @i_ip_addr     IF @i_ip_end is null or @i_ip_addr > @i_ip_end   -- don't need to check ip start again     BEGIN         SET @si_zoneID = -1  -- no zone match         SET @si_providerID = -1     END     SELECT @dt_expire_date = DATEADD(second,@i_expiration,GETUTCDATE())     --     --  Insert the session     --     SET @ti_is_available = CASE WHEN @i_public_available > 0 THEN 1 ELSE 0 END     INSERT INTO dbo.t_match_sessions_0x0000000A (          bi_session_id         ,i_ip_addr         ,i_sg_ip         ,b_box_id         ,b_host_address         ,si_zoneID         ,si_providerID         ,b_key_exchange_key         ,i_public_available         ,i_private_available         ,i_public_current         ,i_private_current         ,dt_session_expiration         ,ti_is_available         ,i_hash         ,ti_nat_type         ,att_0x0000800A         ,att_0x0000800B         ,att_0x10000001         ,att_0x20000002         ,att_0x50000003         ,att_0x30000006         ,att_0x70000007         ,att_0x00000002     ) VALUES (          @bi_session_id         ,@i_ip_addr         ,@i_sg_ip         ,@b_box_id         ,@b_host_address         ,@si_zoneID         ,@si_providerID         ,@b_key_exchange_key         ,@i_public_available         ,@i_private_available         ,@i_public_current         ,@i_private_current         ,@dt_expire_date         ,@ti_is_available         ,RAND() * 1000         ,@ti_nat_type         ,att_0x0000800A         ,att_0x0000800B         ,att_0x10000001         ,att_0x20000002         ,att_0x50000003         ,att_0x30000006         ,att_0x70000007         ,att_0x00000002     )     SELECT @error_var = @@ERROR     IF @error_var != 0     BEGIN         IF @error_var = 2627 -- integrity violation         BEGIN             -- setting the return code is really pointless since xstorage will receive DB_E_INTEGRITYVIOLATION             -- but it is important to set error_var to 0 since this occurs in normal operation and we don't want             -- event spew on every occurance.             SET @i_return_code = 0x80155112  -- XONLINE_E_MATCH_SESSION_ALREADY_EXISTS             SET @error_var = 0             GOTO exit_label         END         SET @i_return_code = 0x80155115  -- XONLINE_E_MATCH_CRITICAL_DB_ERR         GOTO exit_label     END     RETURN 0 exit_label:     IF @error_var != 0     BEGIN         DECLARE @message varchar(255)         SELECT @message = 'XEVENT_XSTORAGE_SESSION_INSERT_FAILED: p_match_session_insert_10 - ' + CAST(CAST(CAST(@error_var AS binary(4)) AS int) AS varchar(64))         EXEC master.dbo.xp_logevent 51709, @message, error     END     RETURN @i_return_code Statement 3: GRANT EXECUTE ON p_match_session_insert_0x0000000A TO ClientLib Note the naming conventions from the create table sections are present here as well. Also note that all title defined parameters default to NULL. Update Stored Proc Each title will have a single update stored proc created for it using statements with the structure below: Statement 1: IF NOT EXISTS (SELECT name FROM dbo.sysobjects WHERE  type = 'p' AND name = 'p_match_session_update_0x0000000A ') BEGIN     EXEC('create procedure dbo.p_match_session_update_0x0000000A as raiserror("Empty Stored Procedure!!", 16, 1) with seterror')     IF (@@error != 0)     BEGIN         PRINT 'FAILED to create p_match_session_update_0x0000000A '     END ALTER PROCEDURE [dbo].[p_match_session_update_0x0000000A]      @bi_session_id                 bigint     ,@i_public_available            int     ,@i_private_available           int     ,@i_public_current              int     ,@i_private_current             int     ,@i_expiration                  int     ,att_0x0000800A                 bigint = NULL     ,att_0x0000800B                 bigint = NULL     ,att_0x10000001                 int = NULL     ,att_0x20000002                 bigint = NULL     ,att_0x50000003                 float = NULL     ,att_0x30000006                 real = NULL     ,att_0x70000007                 datetime = NULL     ,att_0x00000002                 bigint = NULL -- Do not modify. Build Info - !!Version=<version of livematch> BEGIN     DECLARE          @i_return_code             int         ,@error_var                 int         ,@rowcount_var              int         ,@dt_expire_date            datetime         ,@ti_is_available           tinyint     SET nocount on     SELECT @dt_expire_date = DATEADD(second,@i_expiration,GETUTCDATE())     --     --  Update the session     --     SET @ti_is_available = CASE WHEN @i_public_available > 0 THEN 1 ELSE 0 END     UPDATE dbo.t_match_sessions_0x0000000A SET          i_public_available = @i_public_available         ,i_private_available = @i_private_available         ,i_public_current = @i_public_current         ,i_private_current = @i_private_current         ,dt_session_expiration = @dt_expire_date         ,ti_is_available = @ti_is_available         ,att_0x0000800A = ISNULL(@att_0x0000800A, att_0x0000800A)         ,att_0x0000800B = ISNULL(@att_0x0000800B, att_0x0000800B)         ,att_0x10000001 = ISNULL(@att_0x10000001, att_0x10000001)         ,att_0x20000002 = ISNULL(@att_0x20000002, att_0x20000002)         ,att_0x50000003 = ISNULL(@att_0x50000003, att_0x50000003)         ,att_0x30000006 = ISNULL(@att_0x30000006, att_0x30000006)         ,att_0x70000007 = ISNULL(@att_0x70000007, att_0x70000007)         ,att_0x00000002 = ISNULL(@att_0x00000002, att_0x00000002)         WHERE bi_session_id = @bi_session_id     SELECT @error_var = @@ERROR, @rowcount_var = @@ROWCOUNT     IF @error_var != 0     BEGIN         SET @i_return_code = 0x80155115  -- XONLINE_E_MATCH_CRITICAL_DB_ERR         GOTO exit_label     END     IF @rowcount_var = 0     BEGIN         SET @i_return_code = 0x80155100  -- XONLINE_E_MATCH_INVALID_SESSION_ID         GOTO exit_label     END     RETURN 0 exit_label:     IF @error_var != 0     BEGIN         DECLARE @message varchar(255)         SELECT @message = 'XEVENT_XSTORAGE_SESSION_UPDATE_FAILED: p_match_session_update_0x0000000A - ' + CAST(CAST(CAST(@error_var AS binary(4)) AS int) AS varchar(64))         EXEC master.dbo.xp_logevent 51710, @message, error     END     RETURN @i_return_code Statement 3: GRANT EXECUTE ON p_match_session_update_0x0000000A TO ClientLib Note the naming conventions from the create table and insert proc sections are present here as well. Also note that all title defined parameters default to NULL. When updating the table, if the value passed for a title defined attribute is NULL, then the value in the table for that attribute is not changed. Delete Stored Proc Each title will have a single update stored proc created for it using statements with the structure below: Statement 1: IF NOT EXISTS (SELECT name FROM dbo.sysobjects WHERE  type = 'p' AND name = 'p_match_session_delete_0x0000000A) BEGIN     EXEC('create procedure dbo.p_match_session_delete_0x0000000A as raiserror("Empty Stored Procedure!!", 16, 1) with seterror')     IF (@@error != 0)     BEGIN         PRINT 'FAILED to create p_match_session_delete_0x0000000A     END Statement 2: ALTER PROCEDURE [dbo].[p_match_session_delete_0x0000000A]      @bi_session_id                 bigint -- Do not modify. Build Info - !!Version=1.00.6002.1 BEGIN     DECLARE          @i_return_code             int         ,@error_var                 int         ,@rowcount_var              int     SET nocount on     --     --  Delete the session     --     DELETE dbo.t_match_sessions_0x0000000A WHERE bi_session_id = @bi_session_id     SELECT @error_var = @@ERROR, @rowcount_var = @@ROWCOUNT     IF @error_var != 0     BEGIN         SET @i_return_code = 0x80155115  -- XONLINE_E_MATCH_CRITICAL_DB_ERR         GOTO exit_label     END     IF @rowcount_var = 0     BEGIN         SET @i_return_code = 0x80155100 -- XONLINE_E_MATCH_INVALID_SESSION_ID         GOTO exit_label     END     RETURN 0 exit_label:     IF @error_var != 0     BEGIN         DECLARE @message varchar(255)         SELECT @message = 'XEVENT_XSTORAGE_SESSION_DELETE_FAILED: p_match_session_delete_0x0000000A - ' + CAST(CAST(CAST(@error_var AS binary(4)) AS int) AS varchar(64))         EXEC master.dbo.xp_logevent 51711, @message, error     END     RETURN @i_return_code Statement 3: GRANT EXECUTE ON p_match_session_delete_0x0000000A TO ClientLib System FindByID Query Each title will have a system defined FindById query created for it using statements with the structure below: Statement 1: IF NOT EXISTS (SELECT name FROM dbo.sysobjects WHERE  type = 'p' AND name = 'p_match_search_0x0000000A_0xFFFFFFFF) BEGIN      EXEC('create procedure dbo.p_match_search_0x0000000A_0xFFFFFFFF as raiserror("Empty Stored Procedure!!", 16, 1) with seterror')     IF (@@error != 0)     BEGIN         PRINT 'FAILED to create stored procedure.'     END Statement 2: ALTER PROCEDURE [dbo].[p_match_search_0x0000000A_0xFFFFFFFF]      @si_required_slots              smallint     ,@i_client_ip                    int     ,@ti_nat_type                    tinyint     ,@ti_server_count                tinyint     ,@bi_session_id                  bigint -- Do not modify. Build Info - !!Version=1.00.6002.1 BEGIN     SELECT TOP 1         s.bi_session_id,         s.b_host_address,         s.b_key_exchange_key,         s.i_public_available,         s.i_private_available,         s.i_public_current,         s.i_private_current,         'i_dist' = 2147483647     FROM dbo.t_match_sessions_0x0000000A s WITH (NOLOCK)     WHERE         ( @bi_param_1 = s.bi_session_id )     IF 0 = @@ROWCOUNT     BEGIN         RETURN 1 -- S_FALSE, tells front door to try other servers     END     ELSE     BEGIN         RETURN 0 -- Found it, no need to keep looking     END Statement 3: GRANT EXECUTE ON [dbo].[p_match_search_0x0000000A_0xFFFFFFFF] TO ClientLib Things to note: no title defined attributes are returned, this query is identical for all titles except for its name and the table it references the suffix _0xFFFFFFFF is added to the proc name. This is the proc number, in hex notation. 0xFFFFFFFF is the special id of the built in FindById stored proc. No user defined query may use this id. this query may be used for host migration in Xenon Title Defined Queries A title defined query in the xlast file looks like this: <Query clsid="{7FEE4CB1-F3F0-48BF-9CA1-F1B2306E32E3}" id="0" friendlyName="MyQuery" maxResults="25" type="Normal" qosProbe="true" groupBy="0xFFFFFFFF">  <Parameters>   <Parameter id="0x10000001"/>   <Parameter id="0x20000002"/>   <Parameter id="0x50000003"/>   <Parameter id="0x30000006"/>   <Parameter id="0x70000007"/>   <Parameter id="0x00000002"/>  </Parameters>  <Filters>   <Filter left="0x30000006" leftType="Parameter" op="&gt;" right="0x30000006" rightType="Attribute"/>   <Filter left="0x00000002" leftType="Attribute" op="==" right="0x00000001" rightType="ContextValue"/>   <Filter left="0x10000001" leftType="Attribute" op="==" right="0x15000000" rightType="Constant"/>  </Filters>  <SortOperations>   <SortOperation id="0x70000007" type="Descending" distanceid="0xFFFFFFFF" ordinal="0"/>   <SortOperation id="0x50000003" type="Near" distanceid="0x52000003" ordinal="1"/>  </SortOperations>  <Returns>   <Return id="0x0000800A" type="Normal" ordinal="0"/>   <Return id="0x0000800B" type="Normal" ordinal="1"/>   <Return id="0x10000001" type="Normal" ordinal="2"/>   <Return id="0x20000002" type="Normal" ordinal="3"/>  </Returns> </Query> The Query element above would result in the SQL statements below: Statement 1: IF NOT EXISTS (SELECT name FROM dbo.sysobjects WHERE  type = 'p' AND name = 'p_match_search_0x0000000A_0x00000000') BEGIN      EXEC('create procedure dbo.p_match_search_0x0000000A_0x00000000' as raiserror("Empty Stored Procedure!!", 16, 1) with seterror')     IF (@@error != 0)     BEGIN         PRINT 'FAILED to create stored procedure.'     END Statement 2: ALTER PROCEDURE [dbo].[p_match_search_0x0000000A_0x00000000]      @si_required_slots              smallint     ,@i_client_ip                    int     ,@ti_nat_type                    tinyint     ,@ti_server_count                tinyint     ,@param_0x12000001               int      = NULL     ,@param_0x22000002               bigint   = NULL     ,@param_0x52000003               real     = NULL     ,@param_0x32000006               float    = NULL     ,@param_0x72000007               datetime = NULL     ,@param_0x02000002               bigint   = NULL -- Do not modify. Build Info - !!Version=<version of livematch> BEGIN     DECLARE @si_client_zoneID       smallint     DECLARE @si_client_providerID   smallint     DECLARE @i_ip_end               int     SET @i_ip_end = null     SELECT TOP 1 @si_client_zoneID = si_zoneID, @si_client_providerID = si_providerID, @i_ip_end = i_ip_end     FROM v_match_zone_map m     WHERE m.i_ip_start <= @i_client_ip     IF @i_ip_end is null OR @i_client_ip > @i_ip_end     BEGIN         SET @si_client_zoneID = -1     -- no zone match         SET @si_client_providerID = -1 -- no zone match     END     -- Calculate bucket range     DECLARE @bucketstart1 int,             @bucketend1 int,             @bucketstart2 int,             @bucketend2 int,             @bucketcount int,             @rowcount int     SELECT @rowcount = COUNT(*)     FROM t_match_sessions_0x0000000A s WITH (NOLOCK)     WHERE           ( s.ti_is_available = 1 ) AND           ( s.i_public_available >= @si_required_slots ) AND           ( s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5 ) AND           i_hash = CAST(RAND() * 1000 AS int) AND           ( 1 = CASE WHEN @param_0x32000006 IS NULL THEN 1 WHEN @param_0x32000006 > att_0x30000006 THEN 1 ELSE 0 END )           ( 1 = CASE WHEN att_0x00000002 IS NULL THEN 1 WHEN att_0x00000002 = @param_0x02000002 THEN 1 ELSE 0 END )           ( 1 = CASE WHEN att_0x10000001 IS NULL THEN 1 WHEN att_0x10000001 = 1 THEN 1 ELSE 0 END )     IF @rowcount > 0     BEGIN         SET @bucketcount = (1000 / @rowcount) + 1     END     ELSE     BEGIN         SET @bucketcount = 1000     END     SET @bucketstart1 = RAND() * 1000     SET @bucketend1 = @bucketstart1 + @bucketcount     IF @bucketend1 >= 1000     BEGIN         SET @bucketstart2 = 0         SET @bucketend2 = @bucketend1 - 999         SET @bucketend1 = 999     END     ELSE     BEGIN         SET @bucketstart2 = @bucketstart1         SET @bucketend2 = @bucketend1     END     SELECT TOP 25 s.*     FROM (         SELECT TOP 1000             s.bi_session_id,             s.b_host_address,             s.b_key_exchange_key,             s.i_public_available,             s.i_private_available,             s.i_public_current,             s.i_private_current,             'i_dist' = CASE                            WHEN d.i_distance IS NULL THEN 2147483647                            WHEN s.si_zoneID = @si_client_zoneID AND s.si_providerID = @si_client_providerID THEN d.i_distance - 256                            ELSE d.i_distance                        END,             s.att_0x0000800A,             s.att_0x0000800B,             s.att_0x10000001,             s.att_0x20000002         FROM t_match_sessions_0x0000000A s WITH (NOLOCK)         LEFT OUTER JOIN v_match_zone_dists d ON d.si_src_zoneID = @si_client_zoneID AND                                                 d.si_dst_zoneID = s.si_zoneID         WHERE               ( s.ti_is_available = 1 ) AND               ( s.i_public_available >= @si_required_slots ) AND               ( s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5 ) AND               ( ( s.i_hash >= @bucketstart1 AND s.i_hash <= @bucketend1 ) OR                 ( s.i_hash >= @bucketstart2 AND s.i_hash <= @bucketend2 ) ) AND               ( 1 = CASE WHEN @param_0x30000006 IS NULL THEN 1 WHEN @param_0x30000006 > att_0x30000006 THEN 1 ELSE 0 END )               ( 1 = CASE WHEN att_0x00000002 IS NULL THEN 1 WHEN att_0x00000002 = 1 THEN 1 ELSE 0 END )               ( 1 = CASE WHEN att_0x10000001 IS NULL THEN 1 WHEN att_0x10000001 = 1 THEN 1 ELSE 0 END )     ) s     ORDER BY att_0x70000007 DESC              ,ABS( att_0x50000003 - @param_0x52000003 ) ASC GRANT EXECUTE ON [dbo].[p_match_search_0x0000000A_0x00000000] TO ClientLib Basic things to note: The name of the stored proc is p_match_search_0x0000000A_0x00000000. The final suffix is the based on the value of the id="0" attribute in the Query element in the xlast file. Each Query element in the xlast file will have a unique id, and that id becomes the suffix following the titleid, in hex notation. Each Query element gets its own stored proc. Attributes may be specified in the Returns element. Each attribute specified in a Return element is included as column in the select statement. Attributes are named att_<id> where id is in hex notation, with a 0x prefix, with leading zeros out to 32 bits. The Parameters element in the xlast file specifies the title defined parameters that the client may provide to the query. Each title defined parameter to the query defaults to NULL, and is therefore optional. Parameter names are named param_<id> where id is the id of the parameter in the Parameter element, in hex notation, with a 0x prefix, with leading zeros out to 32 bits. However, the value 0x02000000 is bitwise and ed into the parameter id. The nibble identified by the mask 0x0F000000 is used to indicate the use of an attribute. Query parameters will always have the value   in those bits. Schema attributes passed to insert and update procs, stored in the table, and identified in Returns elements have   in those bits, which is why nothing needs to be masked in to generate the att_<id> names. Filters and Sort Oprations are complicated and are therefore discussed below in their own sections. Filters Each Filter element in the xlast file has the following structure:   <Filter left="0x30000006" leftType="Parameter" op="&gt;" right="0x30000006" rightType="Attribute"/> Each Filter element corresponds to a condition in the WHERE clause of the SELECT statement in the query, that restricits (i.e. filters) the rows returned by the query. The basic structure of the condition is: left_side op right_side For example: @param_0x30000006 > att_0x30000006 The rules regarding what is allowed on the left and right side of the comparison, plus the value of the operator are detailed below. The most common case will be the one above, where parameters are being compared to attributes. Note that title defined attributes and parameters are always allowed to be NULL. A NULL parameter is considered a wildcard. SQL server, however, does not consider NULL to be a wildcard, but is simply an absence of value. Therefore, to implement the wildcard functionality, the following case statement is used: CASE  WHEN @param_0x32000006 IS NULL THEN 1  WHEN @param_0x32000006 > att_0x32000006 THEN 1  ELSE 0  This statement results in 1 if the parameter is NULL, or results in 1 if the parameter is not NULL and the specified comparison is true, otherwise the statement results in 0. To use this in a where clause to implement the desired wildcard functionality, the results of the CASE statement above are compared to 1, as follows: ( 1 = CASE WHEN @param_0x32000006 IS NULL THEN 1 WHEN @param_0x32000006 > att_0x30000006 THEN 1 ELSE 0 END ) The SQL code above is the basic form of each condition added to the where clause for each Filter element in the Query element. The left side of the comparison must be an attribute id that is part of the matchmaking schema, i.e. the id must be identified in an Attribute element that is in the Schema element. The  leftType  attribute may be either  Parameter Attribute . If it is  Parameter , then the left side of the comparison is a parameter to the query (i.e. param_<id>). If it is  Attribute  then the left side of the comparison is the attribute column (i.e. att_<id>). If the left side of the comparison identifies a context, the the   attribute may only be one of == or !=. If it is a property, then it can be any of ==, !=, <, >, <=, >= (note that < and > are escapted as &gt; and &lt; in xml). If the left side of the comparison is a Parameter that is a Property, the the right side of the comparision may be an Attribute that is a type compatible Property, or a type compatible Constant. Properties of type Int32, Int64, Float32, Float64 are all considered type compatible with each other, because they can be compared by SQL using the operators identified above. Datetimes Properties are only compatible with Datetime Attributes or Datetime Constants. Constants that can be compared to Property values are defined in the xlast file in the Constants element: <Constants clsid="{9DEE98C4-441C-4103-861B-464DF03B36B1}" nextId="1">  <Constant name="MyConstInt32" id="0x15000000" value="1"/> </Constants> This defines an Constant with id=0x15000000 of type Int32 with a value of 1. Note that, as with properties, the first nibble defines the datatype. The second nibble of a Constant will always be   to identify this id as a Constant. If the left side of the comparison is an Attribute that is a Property, the right side of the comparison may be a Parameter that is a type compatible Property, or a type compatible Constant. When a constant is on the right side of a filter, the SQL code generated for that condition will have the form: (1 = CASE WHEN att_0x10000001 IS NULL THEN 1 WHEN att_0x10000001 = 1 THEN 1 ELSE 0 END) Note that instead of comparing att_0x10000001 to a parameter, it is compared with the literal constant  If the left side of the comparison is a Parameter that is a Context, then the right side of the comparison may be an Attribute that is the same Context, or may be one of the literal ContextValues of that context. A Context is an enumeration which defines the full set of allowed values, which are assigned numerical values by xlast, and result in elements like this: <Context clsid="{7F343825-DBB8-4BC0-ACF2-533263622341}" stringId="25" defaultValue="0" friendlyName="MyContext" id="0x00000002">  <ContextValue friendlyName="MyContext0" value="0" stringId="26"/>  <ContextValue friendlyName="MyContext1" value="1" stringId="33"/> </Context> When a Context Value is used as a constant in a filter, the value of the  right  attribute in the Filter element is used as a literal numeric constant in the where clause of the resulting select statement. For example, the second Filter element in the example xlast excerpt above compares an Attribute of type Context with id 0x00000002 to the literal context value 1, and results in the following SQL code: (1 = CASE WHEN att_0x00000002 IS NULL THEN 1 WHEN att_0x00000002 = 1 THEN 1 ELSE 0 END) If the right side of the comparison is a Parameter that is a Context, then the right side of the comparison may only be a Attribute that is the same Context. Context values are not allowed, because this would result in a useless where clause that either filters all rows or no rows, depending on the value passed for the parameter. Sort Operations The Sort Operations in the xlast file have the following basic structure: <SortOperations>   <SortOperation id="0x70000007" type="Descending" distanceid="0xFFFFFFFF" ordinal="0"/>   <SortOperation id="0x50000003" type="Near" distanceid="0x52000003" ordinal="1"/>  </SortOperations> The Sort Operations correspond to an Order By clause on the Select statement that implements the query. For example, the Sort Operations above would translate to the following Order By clause on the select statement: ORDER BY att_0x70000007 DESC          ,ABS( att_0x50000003 - @param_0x52000003 ) ASC The id in the SortOperation element identifies the Schema Attribute that to Order By. The sort can be one of four types: Ascending, Descending, Near, Far. Ascending and Descending are straightforward, and result in an Order By condition that looks like this: att_0x50000003 ASC Or this: att_0x50000003 DESC The Near and Far are more complicated. They allow you subtract the value of a parameter from an attribute, and then sort on the difference, either ascending or descending. Near corresponds to an Ascending sort, because the difference will be small when the attribute is   the parameter in value. Far corresponds to a Descending sort, because the difference will be large when the attribute is   from the parameter in value. The distanceid parameter indicates which parameter id to subtract from the attribute id, and may be any type compatible Property Parameter. Context cannot be used in Sort Operations. The sort operations are applied to the Order By clause in ascending order by their ordinal values in the xlast file. LiveMatch.exe LiveMatch.exe is the command line tool that generates matchmaking tables and stored procs for Xenon. The command line usage is: LiveMatch /titleid:<titleid> /dblist:<server1;server2> [/droptable] /titleid:<titleid> - the title id to configure /dblist:<server1;server2> - the list of matchmaking servers that will host this title. These should be ip addresses in dotted quad notation, separated by semicolons, e.g.  1.2.3.4;2.3.4.5  (without the quotes). /droptable: if present, match tables are dropped and then recreated. Otherwise, existing match tables are not dropped Note: xmltosql used to have a /nonat parameter to suppress nat type filtering, which we never use. Therefore LiveMatch does not support it. When invoked, LiveMatch retrieves the xlast xml data from the t_game_config table in npdb for the specified titleid. If no xlast data is found, LiveMatch will exit with an error. Note that LiveMatch does not add or change information in t_game_config in any way   that s a job for another tool (LiveTitle, or titlemgr). The xlast xml data from t_game_config is examined, and tables and stored procs are generated on each of the databases as described in section 3.1. If the xlast xml data contains no matchmaking queries, LiveMatch will output a message to that effect to the console and exit, performing no work. If tables and stored procs were created, LiveMatch then calls the p_match_title_insert stored proc on npdb to insert the database list provided on the command line into the t_match_titles table in NPDB. XMS to Xlast converter We will need one in m4, when we merge the partnernets. Xbox 1 Code Generation The M3 code generator described above generates SQL code based on the output of Tsunami s xmltosql utility. In M4 the move to ranked and social matchmaking will result in very different SQL code for Xenon titles. Therefore livematch must be able to detect xlast files that were generated via the XMS to Xlast converter, and generate the old Xbox 1 style SQL code for those titles. Additionally, the M3 code generator (which will become the Xbox 1 code generator in M4) will need to be enhanced to support these additional Xbox 1 features not described above: non-NULL attributes and parameters summary queries custom title defined FindById queries Proximity For now, the code generator still generates code that uses proximity data. Bug 14052 is tracking the work to decide if we want to continue to use proximity data for Xbox 1 titles, vs retiring it completely. If we retire it completely, the SQL code generated for Xbox 1 titles can be simplified, with a corresponding increase in performance. M4 Social Match Overview Conceptually, social matchmaking queries will be performed in 6 passes. Each pass broadens the social match criteria, such that a greater proportion of available sessions will be returned. Popular titles with many available sessions may only need one or two passes to find an acceptable number of sessions, while less popular titles with fewer available sessions may require 5 or 6 passes to find enough sessions to fulfill the match query.  All 6 passes filter on the following criteria: nat_type, is_available, GAME_MODE, GAME_TYPE, plus any filters specified by the title developer in xlast. Under no circumstances will a session be returned that does not meet these minimum requirements. Here is a description of the sessions which are added to the result set with each pass: Pass 0 Sessions with positive affiliations (e.g. friends), in the same gamer zone Pass 1 Sessions in the same gamer zone, closely matched in skill, closely matched in reputation, using the same language, in the same country, with no negative affiliations Pass 2 Sessions in the same gamer zone, loosely matched in skill, and loosely matched in reputation, using the same language, with no negative affiliations Pass 3 Sessions in the same gamer zone with no negative affiliations Pass 4 Sessions with positive affiliations (e.g. friends), in different gamer zones Pass 5 Sessions that meet only the baseline criteria Each pass adds to the result set. Sessions from Pass 0 are returned at the top of the results list, followed by sessions from Pass 1, then Pass 2, and so on.  Affiliation Value of a Session One of the primary goals of social matchmaking is to increase the likelyhook of placing people in sessions with people they prefer, and therefore decreasing the likelyhood of placing them in sessions with people they would rather not play with. There are five possible types of affiliations between players: Friend: I added a person to my Friends list Prefer: I submitted positive feedback on a person Completed: I have completed a game with a person in the past Avoid: I have submitted negative feedback on a person AvoidMe: A person submitted negative feedbac on me The following statements, based on the affiliations above, are consistent with the concept of social matchmaking: A session with one Friend and several strangers is better than a session with one Prefer and several strangers. A session with one Prefer and several strangers is better than a session with one Completed and several strangers. A session with one Completed and several strangers is better than a session with only strangers A session with one Avoid is worse than a session with only strangers A session with one AvoidMe is worse than a session with only straingers In practice, the matchmaking service must be able to evaluate the relative merit of sessions like this: A session with one Friend, and one Avoid A session with two Prefers and one AvoidMe A session with one Friend, two Prefers, three Completeds, one Avoid, and two AvoidMe Avoid and AvoidMe affiliations are not absolute. It is acceptable to be matched into a session that contains people you are avoiding, or people who are avoiding you, as long as the   outweighs the  The affiliation value of each candidate session that contains affiliates will be calculated using the following formula: session_value = (4 * # of friends) + (2 * # of prefers) + (1 * # of completeds)   (3 * # of avoids)   (3 * # of avoidingYou) Using this equation, a session with one friend and one avoid in it is as positive as a session with one completed player. But it takes two perfered players to outweigh one avoid. This will avoid the situation where we do not return a session to the client that has lots of people you like, and only one you don The coefficients in the equation shown here are a starting point. The coefficients will be configuable via in the following settings in npdb. The values must be integer. Since the absolute value of the session has no meaning, we can use larger coefficients to obtain a more precise balance between the five factors without resorting to floating point calculations. xmatchfd_valueOfFriend xmatchfd_valueOfPrefer xmatchfd_valueOfCompleted xmatchfd_valueOfAvoid xmatchfd_valueOfAvoidMe Pass 0 The match front door receives social match request from client. It is able to identify it as a social match query because the GAME_TYPE context equals RANKED. The match request includes the gamertag? puid? of the user making the request. Note: in the case where there are multiple players on the xbox, the game is responsible for choosing which puid is used for matchmaking. This is specified via ??? before the match query is made. The match front door requests the affiliates list for the user in the match query from Presence. This list returned from presence is an array of structures that look like this: struct P_QUERY_AFFILIATES_REPLY_DATA_MSG  ULONGLONG qwAffiliateID;  DWORD dwListFlags;  DWORD dwTitleID;  ULONGLONG qwSessionID;  MSGTIME mtDateUpdated;  char szGamerTag[XONLINE_GAMERTAG_SIZE]; dwListFlags tells the match front door which list(s) the affiliate is on. Only affilates who are online and in the same title are returned by presence to the match front door. The total affilicates list is currently limited to 1500 entries, so the size of the list returned to the match front door will be no larger than 1500 records, and will usually be much smaller. The front door will create a hashtable of sessions and their values according to the psuedocode below: Create HashTable to store session information foreach entry in affiliates list     if sessionid is not in session list, add it with a value of 0     if affiliate is a friend         add xmatchfd_valueOfFriend to the sessionid s value     if affiliate is a perfer         add xmatchfd_valueOfFriend to the sessionid s value     if affiliate is a completed         add xmatchfd_valueOfFriend to the sessionid s value     if affiliate is an avoid         subtract xmatchfd_valueOfFriend from the sessionid s value     if affiliate is an avoidMe         subtract xmatchfd_valueOfFriend from the sessionid s value convert the hashtable to an array sort the array by session value using QuickSort Using the algorithm above, the front door can calculate the values of all the sessions for all the affiliates online in O(n), convert the hashtable to an array in O(n), and then quicksort that array in O(n lg n) on average, O(n^2) worst case. The front door now queries the match sql database to retrieve all the sessions that: are in the list of affiliate session ids with a value of 0 or greater are available to join are of a compatible nat type have GAME_TYPE of STANDARD have GAME_MODE equal to the GAME_MODE parameter in the query (should we allow this to be wildcarded with NULL?) pass any title provided filter criteria are in the same gamer zone [Issues: what s the best way to pass a long list of session ids to this query? Should each session id be its own parameter? Should we pass a binary list like we do for deadxbox? We could break it into multiple queries of 10, 50, or 100 sessions, and if we don t have enough session ids to complete the query, we just pass null for those parameters. Is there a convenient way to order these sessions in the query results? pass in the session value for each session then have SQL do the sort? Or should the front door just take the results and assemble the sorted list itself?] The front door now begins to assemble the final results list. The sessions that are returned from the match SQL query are added to the results set, in descending order by session value. If there are enough sessions to satify the client query then no more queries are made. The search results are formatted appropriately for the wire and returned to the client.  The definition of  enough sessions to satisfy the client  depends on two factors. First, the front door will examine the xlast data in t_game_config to determine what the title specified for max_results for this query. Under no circumstances will more than max_results sessions be returned. Second, the front door will read the setting xmatchfd_pass0_threshold from npdb. This will be a floating point value between 0 and 1. If the number of sessions in the result set is greater than or equal to xmatchfd_pass0_threshold * max_results, then the result set is considered to be  enough , and the result set is returned. [Issue: what is our starting value for xmatchfd_pass0_threshold?] For example, if the title specified max_results of 25, and xmatchfd_pass0_threshold is 0.9, then 25 * 0.9 = 22.5 sessions are considered  enough . So if only 22 sessions have been found, the front door will continue to Pass 1, but if 23 sessions have been found, the front door will return those 23 sessions. If the number of sessions is exactly equal to the value of max_results * xmatchfd_pass0_threshold, the number of results is considered to be sufficient, and the result set is returned. Pass 1 If Pass 0 did not generate enough sessions, the front door will issue a second SQL query to locate additional sessions. The Pass 1 SQL query will retrieve all the sessions that: are available to join are of a compatible nat type have GAME_TYPE of STANDARD have GAME_MODE equal to the GAME_MODE parameter in the query (should we allow this to be wildcarded with NULL?) pass any title provided filter criteria are in the same gamer zone The host and the client are closely matched in skill. More precisely, the probability of a draw between the host and the client, as calculated using the hosts MuSigma values and the clients MuSigma values, is high. (Issue: what is the floating point value for  ) (What are the property ids for Mu and Sigma?) The host and the client are closely matched in reputation. (What is the property id for reputation? What is the range of reputation? What does  loosely matched  mean precisely?) The host and the client indicate they are using the same language. (What is the property id for language?) The host and the client indicate they are in the same country. (What is the property id for country?) Some of the sessions returned by the match SQL server to the front door will be rejected by the front door because they contain affiliates and have a negative session value (as calculated in pass 0). Some of the sessions returned by the match SQL server to the front door will be duplicates of sessions already added to the result set in Pass 0. For this reason, the front door will ask the SQL server for more results than it needs in order to complete the results set. The front door knows at the end of Pass 0 how many slots in the result set have been filled, and how many remain to be filled. The front door also knows how many sessions containing affiliates have session values less than zero. The maximum number of sessions that could possibly be filtered out by the front door is (# of filled slots) + (# of negative sessions). Therefore the front door asks the SQL query to return, at most (# of open slots) + (# of filled slots) + (# of negative sessions), which simplifys to (max_results) + (# of negative sessions). Example: Pass 0 generated a session value hashtable containing 100 entries. 75 of those entries had a value of 0 or greater, and 25 had a value of less than 0. Of the 75 sessions with a value of zero or greater, 15 were returned by the Pass 0 SQL query (i.e. they were available, had a compatible nat type, were in the correct gamer zone, were the correct GAME_MODE, and GAME_TYPE, and met any title defined criteria). Therefore, 10 slots remain to be filled. The front door will ask for, at most, (max_results) + (# of negative sessions) = 25 + 25 = 50 results back from the Pass 1 SQL query. Assuming 50 or more sessions exist that meet the Pass 1 criteria, this will be enough to fill the remaining slots, even if but 15 of them are duplicates of the results already in the result set, and 25 of them are filtered out because their affiliation value is negative. 10 sessions would still remain, which added to the 15 sessions from pass 0, equals max_results. If the front door has found enough sessions, they are returned to the client. The sessions found in Pass 0 are returned first, followed by the sessions found in Pass 1. The sessions in the Pass 1 chunk are sorted by draw probability. Similar to Pass 0, the front door decides if it has enough settings by multiplying max_results by the xmatchfd_pass1_threshold setting, and returning the results if the set contains at least that many rows. [Issue: what is our starting value for xmatchfd_pass1_threshold?] [Issue: Should we fold Pass 1, 2, and 3 into one sql stored proc for perf reasons?] Pass 2 If Pass 1 did not generate enough sessions, the front door will issue a third SQL query to locate additional sessions. The Pass 2 SQL query will retrieve all the sessions that: are available to join are of a compatible nat type have GAME_TYPE of STANDARD have GAME_MODE equal to the GAME_MODE parameter in the query (should we allow this to be wildcarded with NULL?) pass any title provided filter criteria are in the same gamer zone The host and the client are loosely matched in skill. More precisely, the probability of a draw between the host and the client, as calculated using the hosts MuSigma values and the clients MuSigma values, is moderately high. (Issue: what is the floating point value for  moderately high ) (What are the property ids for Mu and Sigma?) The host and the client are loosely matched in reputation. (What is the property id for reputation? What is the range of reputation? What does  loosely matched  mean precisely?) The host and the client indicate they are using the same language. (What is the property id for language?) Similar to Pass 1, some of the sessions returned by the match SQL server to the front door will be rejected by the front door because they contain affiliates and have a negative session value (as calculated in pass 0) or are duplicates of sessions already in the result set. As in Pass 1, the front door will request a maximum of (max_results) + (# of negative sessions) from the SQL server. If the front door has found enough sessions, they are returned to the client. The sessions found in Pass 0 are returned first, followed by the sessions found in Pass 1, followed by the session found in Pass 2. The sessions in the Pass 2 chunk are sorted by draw probability. Similar to Pass 1, the front door decides if it has enough settings by multiplying max_results by the xmatchfd_pass2_threshold setting, and returning the results if the set contains at least that many rows. [Issue: what is our starting value for xmatchfd_pass2_threshold?] Pass 3 If Pass 2 did not generate enough sessions, the front door will issue a fourth SQL query to locate additional sessions. The Pass 3 SQL query will retrieve all the sessions that: are available to join are of a compatible nat type have GAME_TYPE of STANDARD have GAME_MODE equal to the GAME_MODE parameter in the query (should we allow this to be wildcarded with NULL?) pass any title provided filter criteria are in the same gamer zone Similar to Pass 2, some of the sessions returned by the match SQL server to the front door will be rejected by the front door because they contain affiliates and have a negative session value (as calculated in pass 0) or are duplicates of sessions already in the result set. As in Pass 2, the front door will request a maximum of (max_results) + (# of negative sessions) from the SQL server. If the front door has found enough sessions, they are returned to the client. The sessions found in Pass 0 are returned first, followed by the sessions found in Pass 1, followed by the session found in Pass 2, followed by the sessions found in Pass 3. The sessions in the Pass 3 chunk are sorted by draw probability. Similar to Pass 2, the front door decides if it has enough settings by multiplying max_results by the xmatchfd_pass3_threshold setting, and returning the results if the set contains at least that many rows. [Issue: what is our starting value for xmatchfd_pass3_threshold?] [Issue: Should we fold Pass 1, 2, and 3 into one sql stored proc for perf reasons?] Pass 4 If Pass 3 did not generate enough sessions, we are really getting quite desperate. We ve already dropped just about every criteria from our social match query. The only one left that we can drop is Gamer Zone. In Pass 0, we did a query for sessions with positive affiliations that were in the correct gamer zone. In Pass 4 we repeat that query, but we do not require that the sessions returned are in the same Gamer Zone. Specifically, in Pass 4 the front door issues a fifth query to retrieve all the sessions that: are in the list of affiliate session ids with a value of 0 or greater are available to join are of a compatible nat type have GAME_TYPE of STANDARD have GAME_MODE equal to the GAME_MODE parameter in the query (should we allow this to be wildcarded with NULL?) pass any title provided filter criteria Any non-duplicate sessions returned are added to the result set. If the front door has found enough sessions, they are returned to the client. The sessions found in Pass 0 are returned first, followed by the sessions found in Pass 1, followed by the session found in Pass 2, followed by the sessions found in Pass 3, followed by the sessions found in Pass 4. The sessions in the Pass 4 chunk are sorted by session affiliate value. Sessions with the same value are returned in an undefined order. Similar to Pass 3, the front door decides if it has enough settings by multiplying max_results by the xmatchfd_pass4_threshold setting, and returning the results if the set contains at least that many rows. [Issue: what is our starting value for xmatchfd_pass4_threshold?] Pass 5 If Pass 4 did not generate enough sessions, the front door will issue a sixth SQL query to locate additional sessions. The Pass 5 SQL query will retrieve all the sessions that: are available to join are of a compatible nat type have GAME_TYPE of STANDARD have GAME_MODE equal to the GAME_MODE parameter in the query (should we allow this to be wildcarded with NULL?) pass any title provided filter criteria Similar to Pass 2, some of the sessions returned by the match SQL server to the front door will be rejected by the front door because they contain affiliates and have a negative session value (as calculated in pass 0) or are duplicates of sessions already in the result set. As in Pass 2, the front door will request a maximum of (max_results) + (# of negative sessions) from the SQL server. If the front door has found enough sessions, they are returned to the client. The sessions found in Pass 0 are returned first, followed by the sessions found in Pass 1, followed by the session found in Pass 2, followed by the sessions found in Pass 3, followed by the session in Pass 4, followed by the sessions in Pass 5. The sessions in the Pass 5 chunk sorted in an undefined order. Pass 5 is the final pass. We have broadened the search for sessions as much as it can be. Any sessions in the result set are returned to the client. MultiServer Issues If a title is spans multiple match SQL servers, the affiliate session queries in Pass 0 and Pass 4 must be performed against all the SQL partitions for that titleid. The non-affiliate session queries in Pass 1, Pass 2, Pass 3, and Pass 5 will be performed against one SQL server only. Session search queries for a particular title will cycle through the SQL partitions on a round robin basis, as they do today. It should be noted that spanning a title across multiple servers reduced the effectiveness of social matchmaking, because the queries are being performed on a subset of the total sessions available. If all sessions are present on one SQL server, it is possible to return the best sessions to the client, instead of a random subset of the best sessions. Microsoft Confidential. gdbJ} gdtDL ~z~z~vrvnv~z~z gd=Y< gd=Y< gd=Y< gd=Y< gd{/[ gdiB> gdiB> gd(JG gd(JG gd{/[ gd(JG gd{/[ gd{/[ gd{/[ gd{/[ gdKEL gdI6w gdKEL gd?}& gd?}& gd?}& gd?}& gd?}& gd?}& gdk)i Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\match\M4 Matchmaking Dev Spec.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Paul Newson Xbox Online Spec Template.dot Paul Newson Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags placeed``b Y@FhB 27$37 \!(?71 ed``b dnHfnj BP~nb b??Qf VPkT/ c112BY @penR~ c112BY dnpenR~ i))mh. XVZ0m! c112BY c112BY RpeqIj. c112BY ,O08R J.hLr ,O08R 8}021) ,O08R ,O08R ,O08R d``Vf @Hfnj BP~nb d``6dd``b ,e`ab C, #t d``6dd``b ,e`ab d``6dd``b ,e`ab d``6dd``b ,e`ab dopenR~ RpeqIj. d``6dd``b ,e`ab d``fed``b ,O08R~@)Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3Microsoft Equation 3.0 DS Equation Equation.3 Contents  TOC \o "1-2" \h \z \u   HYPERLINK \l "_Toc104881002"  Table of Contents  PAGEREF _Toc104881002 \h   HYPERLINK \l "_Toc104881003"  XRL Interfaces  PAGEREF _Toc104881003 \h   HYPERLINK \l "_Toc104881004"  Legacy Xbox Interfaces  PAGEREF _Toc104881004 \h   HYPERLINK \l "_Toc104881005"  Xenon Interfaces  PAGEREF _Toc104881005 \h   HYPERLINK \l "_Toc104881006"  Internal Interfaces  PAGEREF _Toc104881006 \h   HYPERLINK \l "_Toc104881007"  Ranked Matchmaking  PAGEREF _Toc104881007 \h   HYPERLINK \l "_Toc104881008"  Standard (Casual? Social?) Matchmaking  PAGEREF _Toc104881008 \h   HYPERLINK \l "_Toc104881009"  Affiliation Value of a Session  PAGEREF _Toc104881009 \h   HYPERLINK \l "_Toc104881010"  Pass 0  PAGEREF _Toc104881010 \h   HYPERLINK \l "_Toc104881011"  Pass 1  PAGEREF _Toc104881011 \h   HYPERLINK \l "_Toc104881012"  Pass 2  PAGEREF _Toc104881012 \h   HYPERLINK \l "_Toc104881013"  Pass 3  PAGEREF _Toc104881013 \h   HYPERLINK \l "_Toc104881014"  MultiServer Issues  PAGEREF _Toc104881014 \h   HYPERLINK \l "_Toc104881015"  Match Database Design  PAGEREF _Toc104881015 \h   HYPERLINK \l "_Toc104881016"  Datatypes  PAGEREF _Toc104881016 \h   HYPERLINK \l "_Toc104881017"  Session Tables  PAGEREF _Toc104881017 \h   HYPERLINK \l "_Toc104881018"  Insert Stored Proc  PAGEREF _Toc104881018 \h   HYPERLINK \l "_Toc104881019"  Update Stored Proc  PAGEREF _Toc104881019 \h   HYPERLINK \l "_Toc104881020"  Delete Stored Proc  PAGEREF _Toc104881020 \h   HYPERLINK \l "_Toc104881021"  System FindByID Query  PAGEREF _Toc104881021 \h   HYPERLINK \l "_Toc104881022"  Title Defined Queries  PAGEREF _Toc104881022 \h   HYPERLINK \l "_Toc104881023"  Title Defined Query Filters  PAGEREF _Toc104881023 \h   HYPERLINK \l "_Toc104881024"  Proximity  PAGEREF _Toc104881024 \h   HYPERLINK \l "_Toc104881025"  LiveMatch.exe  PAGEREF _Toc104881025 \h   HYPERLINK \l "_Toc104881026"  Xbox 1 Code Generation  PAGEREF _Toc104881026 \h  XRL Interfaces Legacy Xbox Interfaces The following XRLs should be functionally equivalent to the behavior of the tsunami matchmaking service. Any difference is a possible backwards compatiblity issue and should be filed as a bug. xmatchhost.srf Create or update a matchmaking session. xmatchhostdelete.srf Delete a matchmaking session. xmatchclient.srf Search for matchmaking sessions Xenon Interfaces The following XRLs are used by Xenon clients to create, update, search for, and delete matchmaking sessions. Their functionality is close to the similarly named Legacy Xbox Interfaces, but some additional features have been added, and some have been removed. Note, the fundamental limits below have not changed:         public const uint X_MATCH_MAX_QUERY_PARAMS                    = 20;         public const uint X_MATCH_MAX_QUERY_RESULTS                   = 50;         public const uint X_MATCH_MAX_TITLE_SCHEMA_ATTRS              = 40;         public const uint X_MATCH_MAX_ATTRIBUTE_DATA                  = 4096; Note that new datatypes are now allowed: contexts, plus properties of types: int64, int32, float32, float64, datetime. If the old X_ATTRIBUTE_DATATYPE_MASK is zero, then look in the top nibble for extended xenon subtype.         public const uint X_ATTRIBUTE_DATATYPE_MASK                   = 0x00F00000;         public const uint X_ATTRIBUTE_DATATYPE_INTEGER                = 0x00000000;         public const uint X_ATTRIBUTE_DATATYPE_STRING                 = 0x00100000;         public const uint X_ATTRIBUTE_DATATYPE_BLOB                   = 0x00200000;         public const uint X_ATTRIBUTE_DATATYPE_NULL                   = 0x00F00000;         // Xenon supports the extended datatypes below. In order to not change the         // protocol for existing clients, these extended types are all considered         // to be X_ATTRIBUTE_DATATYPE_INTEGER by this class. The front door          // checks these extended bits (which were previously unused)          // to interpret each of the 64 bit chunks of type INTEGER correctly.         public const uint X_ATTRIBUTE_XE_SUBTYPE_MASK                = 0x70000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_CONTEXT             = 0x00000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_UINT32              = 0x10000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_UINT64              = 0x20000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_FLOAT64             = 0x30000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_FLOAT32             = 0x50000000;         public const uint X_ATTRIBUTE_XE_SUBTYPE_DATETIME            = 0x70000000; All extended xenon datatypes look like datatype integer, which means they take 64 bits on the wire. Contexts are interpreted as 64 bit ints. Int32, the top 32 bits are ignored Int64 is interpreted as 64 bit integer float32, top 32 bits are ignored, low 32 bits are interpreted as single precision IEEE floating point value. float64, 64 bits intepreted as double precision IEEE floating point value. Test Note: We should make sure we check that 32 bit integers and floating point values with a 1 in the most significant bit are handled properly. See database.cs DBLayer.Pack64BitsWithFloat, Pack64BitsWithDouble, Interpret64BitsAsFloat, Interpret64BitsAsDouble Datetimes are represented on the wire as FILETIME structures in UTC. See DateTime.ToFileTimeUtc, DateTime.FromFileTimeUtc. Blob attributes and parameters are not allowed by any xenon interface. String attributes and paramaters are not allowed to be passed as search parameters, may not be used in filters or sort operations, but may be passed in session host and session update calls, and may be returned as a schema attribute in search calls. Note that xlast will restrict the use of string attributes to only the host s gamertag, so we avoid the issue of terms of use violations with user entered strings being advertized in match. The order of parameters and attributes on the wire is not significant for Xbox 360 interfaces. All attributes and parameters are completely identified by their id, and therefore can be specified in any order, both in calls from the client to the server, and in search results from the server to the client. The absence of an expected id is interpreted as NULL, which may be allowed, or may be an error, depending on the attribute/parameter and the call being made. If attribute id X_ATTRIBUTE_DATATYPE_NULL (0x00F00000) is still valid, but has no effect. If it is passed from the client to the server, it does not generate an error. Similarly, NULL attributes in search results may either be simply omitted by the server, or may be represented with X_ATTRIBUTE_DATATYPE_NULL. This attribute id can appear multiple times in one call or search result. While either choice is  allowed , the current implementation returns attributes in search results in the order they appear in xlast, and inserts X_ATTRIBUTE_DATATYPE_NULL for any missing attributes. This allows the front door to share more code between the Xbox and Xbox 360 code paths. xmatchhost2.ashx Session Create If the session id passed on the wire is all zeros, except for the bits that encode the session type (0x00000000000000F0), then the call is interpreted as a session create operation. Session create does not allow blob schema attributes, but does does allow strings attributes. If the session type is XNET_XNKID_SYSTEM_LINK the call will be fail with XONLINE_E_MATCH_INVALID_FLAGS The following attributes must be passed on the wire for all create calls. If any are missing, the call will fail with XONLINE_E_MATCH_INVALID_PARAM X_ATTRIBUTE_GAME_TYPE (0x0000800A) X_ATTRIBUTE_GAME_MODE (0x0000800B) X_ATTRIBUTE_GAMER_ZONE (0x10008101) X_ATTRIBUTE_GAMER_COUNTRY (0x10008102) X_ATTRIBUTE_GAMER_LANGUAGE (0x10008103) X_ATTRIBUTE_GAMER_RATING (0x50008104) X_ATTRIBUTE_GAMER_MU (0x30008105) X_ATTRIBUTE_GAMER_SIGMA (0x30008106) The following attribute may be passed, but has no effect. If it is missing, the create session call will still succeed: X_ATTRIBUTE_GAMER_PUID (0x20008107) If an attribute id is passed that is not part of the title s schema, and is not one of the automatic ids listed above, the call will fail with XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID All title defined schema attributes are optional and may be omitted. Session Update If the session id passed on the wire is non zeros, in any bit that is not the session type (0x00000000000000F0), then the call is interpreted as a session update operation. If the session id is not valid, the call will fail with XONLINE_E_MATCH_INVALID_SESSION_ID Changing X_ATTRIBUTE_GAME_TYPE (0x0000800A) in an update is not allowed. This parameter may be passed, but iuf the value has been changed, the call will fail with XONLINE_E_MATCH_INVALID_PARAM The following attributes may be passed. If they are present, the value in the database is update to reflect the value passed in the call. If they are omitted, then the current value in the database remains unchanged. X_ATTRIBUTE_GAME_MODE (0x0000800B) X_ATTRIBUTE_GAMER_ZONE (0x10008101) X_ATTRIBUTE_GAMER_COUNTRY (0x10008102) X_ATTRIBUTE_GAMER_LANGUAGE (0x10008103) X_ATTRIBUTE_GAMER_RATING (0x50008104) X_ATTRIBUTE_GAMER_MU (0x30008105) X_ATTRIBUTE_GAMER_SIGMA (0x30008106) Any title defined attributes may also be passed. If they are present, the value in the database is update to reflect the value passed in the call. If they are omitted, then the current value in the database remains unchanged. If an attribute id is passed that is not part of the title s schema, and is not one of the automatic ids listed above, the call will fail with XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID xmatchhostdelete2.ashx No attributes should be passed to this call. If the session id passed is not valid, or is not present in the database, the call will fail with XONLINE_E_MATCH_INVALID_SESSION_ID xmatchclient2.ashx The system FindById search query expects only one parameter: X_ATTRIBUTE_SESSION_ID (0x20008003). If this parameter is missing, the call will fail with XONLINE_E_MATCH_INVALID_PARAM. If any other parameters are sent, the call will fail with XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID. The system FindById query is query id 0xFFFFFFFF. All non FindById query calls must pass the following parameters. If any are missing, the call will fail with XONLINE_E_MATCH_INVALID_PARAM X_ATTRIBUTE_GAME_TYPE (0x0000800A) X_ATTRIBUTE_GAME_MODE (0x0000800B) X_ATTRIBUTE_GAMER_ZONE (0x10008101) X_ATTRIBUTE_GAMER_COUNTRY (0x10008102) X_ATTRIBUTE_GAMER_LANGUAGE (0x10008103) X_ATTRIBUTE_GAMER_RATING (0x50008104) X_ATTRIBUTE_GAMER_MU (0x30008105) X_ATTRIBUTE_GAMER_SIGMA (0x30008106) X_ATTRIBUTE_GAMER_PUID (0x20008107) Title defined parameters may be omitted without error. If any parameters are passed that are not in the list above, and are not in the list of title defined parameters for that query, then the call will fail with XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID. Note that parameters to search queries should not specify the X_ATTRIBUTE_TYPE_PARAM bit flag. This flag s only purpose was to help xbox1 xmltosql figure out if an attribute was being used as a parameter or attribute. Xlast and LiveMatch use a different method. Therefore this flag is not used anywhere for Xbox 360 titles. No string or blob paramaters are allowed in search queries for Xbox 360 titles. No aggregate queries are allowed for Xbox 360 titles. No title defined FindById queries are allowed for Xbox 360 titles. Only the system generated FindById query is supported. Internal Interfaces These are only called by the SG or internal tools, therefore no back compat work required. deadxbox.ashx No changes. Same XRL. titlechange.ashx No changes. Same XRL. health.ashx No changes. Same XRL Ranked Matchmaking Ranked matchmaking is for users who are in a competitive mood, and want to have a competitive game against people who are similar to them in skill, and want the results to be reflected in their public global ranking. The fun in a ranked match comes from the competition, and therefore the goal is to find a session filled with players of similar skill. Ranked matchmaking is used for sessions where X_ATTRIBUTE_GAME_TYPE is 0. Creating a session where X_ATTRIBUTE_GAME_TYPE = 0 creates a ranked session. Searching for sessions and passing X_ATTRIBUTE_GAME_TYPE = 0 as a parameter searches for ranked sessions. Searching for ranked sessions returns N rows, where N is equal to the Max Results entered in xlast for the query id being used. All rows returned will: have X_ATTRIBUTE_GAME_TYPE = 0 have X_ATTRIBUTE_GAME_MODE that matches the X_ATTRIBUTE_GAME_MODE passed as a parameter have enough public slots open for the number of players signed in on the console (at the time the query was made   this may of course change by the time the console attempts to join the session) are being hosted by a console with a NAT that is compatible with the NAT in use by the console sending the query meet any title defined filter critera provided for the query in xlast The results are ordered by the probability of a draw occuring between the user identified as the host of the session and the user identified as searching for the session, based on the host s skill   EMBED Equation.3    and the searcher s skill   EMBED Equation.3   , according to the following calculation:  EMBED Equation.3   The host s skill is passed to the match server in the X_ATTRIBUTE_GAMER_MU and X_ATTRIBUTE_GAMER_SIGMA attributes in the create session call, and may be updated in the update session call. The searcher s skill is passed to the match server in the X_ATTRIBUTE_GAMER_MU and X_ATTRIBUTE_GAMER_SIGMA attributes in the search query itself. The parameter  EMBED Equation.3   is fixed at 0.5 for the Xbox Live service, which means   EMBED Equation.3   reduces to 0.5, and the calcuation above reduces to:  EMBED Equation.3   Introduction to the MuSigma Ranking System  and  Notes on the MuSigma Matchmaking  papers for more information on how the skill ranking system works. If more than 1000 sessions meet the search criteria described above, the match server reduces the number of sessions it needs to sort by only considering sessions where   EMBED Equation.3    is within a certain range. The server tries the following ranges, until more than 100 sessions are available to sort. The range is centered around  EMBED Equation.3   , unless that would extend beyond the allowed values of   EMBED Equation.3    which is [0, 6] inclusive, which case the range will start at 0 or end at 6. The ranges attempted are, in order:  EMBED Equation.3   = 0.00096  EMBED Equation.3   = 0.0048  EMBED Equation.3   = 0.024  EMBED Equation.3   = 0.12  EMBED Equation.3   = 0.6  EMBED Equation.3   = 3.0 The logic for this progression is we are looking for a number of sessions between 100 and 1000 which is a factor of 10 difference. Choosing to increase the range by a factor of 5 on each attempt is a good balance between find a range that will produce the number of sessions we re looking for, and not making too many attempts.  The final value attempted is 3, which includes the entire range [0,6], and therefore does not filter any sessions out. The initial value attempted is 0.00096, which creates a range of mu that is 0.00032 of the total range of 0 to 6. If there were 1e6 sessions in the database that meet the criteria described above, and if the distribution of mu for those sessions was even between 0 and 6, this would reduce the list of 1e6 sessions to 320. Even if the distribution of mu is not even (which it won t be) this initial value should reduce the number of sessions under consideration to a reasonable number. Over the life of Xbox 360, we do not expect any single title to have more than 1e6 available session of the same game type and game mode, therefore this initial value is small enough. If the range of mu selected by the previous algorithm does not reduce the set of sessions to 1000 or less, the server will further restrict the number of sessions that will be sorted by randomly discarding a percentage of the sessions such that approximately 1000 sessions will be considered. Title defined sort operations are supported, and will be applied prior to the draw probability sort described above. This is not recommended, because if there are more than one or two possible values for the title defined sort criteria, the draw probability sort will have almost no effect on the ordering of the sessions, and therefore almost no effect on which 25 of the up to 1000 sessions will be returned. Also note that if mu is not valid for a particular title (likely because that developer has chosen to implement their own concept of skill and disabled ours), then the process of choosing a mu range will have no effect, and the 1000 candidate sessions presented to the sort operation will be a random selection of available sessions. This will also hurt performance, because the random selection is not as efficient as the mu range selection, because it does not make use of the clustered index on the table. Standard (Casual? Social?) Matchmaking Standard Matchmaking is for users who are in a mood where winning and losing is less important than finding a session filled with people they enjoy playing with. The following factors are used in an attempt to find a session populated by compatible people. Who is on the user s friends list? Who has the user submitted positive feedback on? Who has the user completed games with in the past? Who has the user submitted negative feedback on? Who has submitted negative feedback on the user? What gamer zone did the user select? What gamer zone did the host select? What is the user s gamer rating? What is the host s gamer rating? What country did the user select? What country did the host select? What language did the user select? What language did the host select?  Standard matchmaking is used for sessions where X_ATTRIBUTE_GAME_TYPE is 1. Creating a session where X_ATTRIBUTE_GAME_TYPE = 1 creates a standard session. Searching for sessions and passing X_ATTRIBUTE_GAME_TYPE = 1 as a parameter searches for standard sessions. Searching for standard sessions returns N rows, where N is equal to the Max Results entered in xlast for the query id being used. All rows returned will: have X_ATTRIBUTE_GAME_TYPE = 1 have X_ATTRIBUTE_GAME_MODE that matches the X_ATTRIBUTE_GAME_MODE passed as a parameter have enough public slots open for the number of players signed in on the console (at the time the query was made   this may of course change by the time the console attempts to join the session) are being hosted by a console with a NAT that is compatible with the NAT in use by the console sending the query meet any title defined filter critera provided for the query in xlast Conceptually, a standard matchmaking query can be thought of as a series of queries, each one slightly broader that the previous query, until enough results have been collected. Each query pass is described below: Pass 0 Sessions with positive affiliations (e.g. friends), in the same gamer zone Pass 1 Sessions with no negative affiliations (e.g. avoided players), in the same gamer zone Pass 2 Sessions with positive affiliations (e.g. friends), in a different gamer zone Pass 3 Sessions with no negative affiliations (e.g. avoided players), in a different gamer zone Each pass adds to the result set. Sessions from Pass 0 are returned at the top of the results list, followed by sessions from Pass 1, then Pass 2, then Pass 3. Affiliation Value of a Session One of the primary goals of standard matchmaking is to increase the probability of placing people in sessions with people they prefer, and decrease the probability of placing them in sessions with people they would rather not play with. There are five types of affiliations between players that standard matchmaking takes into consideration: Friend: I added a person to my Friends list Positive Feedback: I submitted positive feedback on a person Completed Game: I have completed a game with a person in the past Negative Feedback: I have submitted negative feedback on a person Avoiding Me: A person submitted negative feedback on me The following statements, based on the affiliations above, are consistent with the concept of standard matchmaking: A session with one Friend and several strangers is better than a session with one Positive Feedback and several strangers. A session with one Positive Feedback and several strangers is better than a session with one Completed Game and several strangers. A session with one Completed Game and several strangers is better than a session with only strangers A session with one Negative Feedback is worse than a session with only strangers A session with one Avoiding Me is worse than a session with only straingers In practice, the matchmaking service must be able to evaluate the relative merit of sessions like this: A session with one Friend, and one Negative Feedback A session with two Positive Feedback and one Negative Feedback A session with one Friend, two Postivie Feedback, three Completed Game, one Negative Feedback, and two Avoiding Me Negative Feedback and Avoiding Me affiliations are not absolute. It is acceptable to be matched into a session that contains people you submitted negative feedback on, or people who submitted negative feedback on you, as long as the   outweighs the  The affiliation value of each session that contains affiliates will be calculated using the following formula: session_value = (4 * # of Friends) + (2 * # of Positive Feedback) + (1 * # of Completed Game)   (3 * # of Negative Feedback)   (3 * # of Avoiding Me) Using this equation, a session with one Friend and one Negative Feedback is as positive as a session with one Completed Game player. But it takes two Positive Feedback players to outweigh one Negative Feedback. This will avoid the situation where matchmaking does not offer you a session that has lots of people you like, and only one you don The coefficients in the equation shown here are a starting point. The coefficients will be configuable via in the following settings in npdb. The values must be integer. Since the absolute value of the session has no meaning, we can use larger coefficients to obtain a more precise balance between the five factors without resorting to floating point calculations. xmatchfd_valueOfFriend (initial value 4) xmatchfd_valueOfPrefer (initial value 2) xmatchfd_valueOfCompleted (initial value 1) xmatchfd_valueOfAvoid (initial value -3) xmatchfd_valueOfAvoidMe (initial value -3) Note that it is possible for user A to be affiliated with user B in more than one way. For example, the first time you complete a game with someone, they will be added as a Completed Game affiliate. If you then submit positive feedback on them, they will be both a Completed Game and a Positive Feedback affiliate. If you then add them as a friend, they will be a Completed Game, Positive Feedback, and Friend affiliate. Note however that Completed Game and Positive Feedback are finite lists. Eventually, an active player could fill their lists, and the Completed Game and Positive Feedback affiliations will disappear. There is one exception to this rule. It is not possible to be both a Positive Feedback and Negative Feedback affiliate of the same user. The presence service removes any Negative Feedback affiliation if you submit Positive Feedback, and vice versa. If a user has multiple affiliations, then each of those affiliations is considered independantly for the purposes of calculating the affiliate value of a session. For example, using the initial values above, a user who is both a Completed Game and Positive Feedback affiliate would contribute +3 to the affiliate value of a session, exactly the same as one Completed Game affiliate and one Positive Feedback affiliate. Pass 0 Pass 0 returns search results with a positive affiliation value in the same gamer zone. The match front door requests the affiliates list from Presence for the user puid passed in the X_ATTRIBUTE_GAMER_PUID parameter to the match query. The list returned from presence is an array of structures that look like this: struct P_QUERY_AFFILIATES_REPLY_DATA_MSG  ULONGLONG qwAffiliateID;  DWORD dwListFlags;  DWORD dwTitleID;  ULONGLONG qwSessionID;  MSGTIME mtDateUpdated;  char szGamerTag[XONLINE_GAMERTAG_SIZE]; dwListFlags tells the match front door which list(s) the affiliate is on. Only affilates who are online and in the same title are returned by presence to the match front door. The total affilicates list is currently limited to 1500 entries, so the size of the list returned to the match front door will be no larger than 1500 records, and will usually be much smaller. The front door will create a hashtable of sessions and their values according to the psuedocode below: Create HashTable to store session information foreach entry in affiliates list     if sessionid is not in session list, add it with a value of 0     if affiliate is a friend         add xmatchfd_valueOfFriend to the sessionid s value     if affiliate is a positive feedback         add xmatchfd_valueOfPrefer to the sessionid s value     if affiliate is a completed game         add xmatchfd_valueOfCompleted to the sessionid s value     if affiliate is an negative feedback         add xmatchfd_valueOfAvoid from the sessionid s value     if affiliate is an avoiding me         add xmatchfd_valueOfAvoidMe from the sessionid s value convert the hashtable to an array sort the array by session value using QuickSort Using the algorithm above, the front door can calculate the values of all the sessions for all the affiliates online in O(n), convert the hashtable to an array in O(n), and then quicksort that array in O(n lg n) on average, O(n^2) worst case. The front door now queries all match sql databases configured for the title to retrieve all the sessions that: are in the list of affiliate session ids with a value of 0 or greater have X_ATTRIBUTE_GAME_TYPE equal to 1 have X_ATTRIBUTE_GAME_MODE equal to the X_ATTRIBUTE_GAME_MODE parameter in the query have X_ATTRIBUTE_GAMER_ZONE equal to the X_ATTRIBUTE_GAMER_ZONE parameter in the query have enough public slots open for the number of players signed in on the console (at the time the query was made   this may of course change by the time the console attempts to join the session) are being hosted by a console with a NAT that is compatible with the NAT in use by the console sending the query meet all title defined filter critera provided for the query in xlast The results are ordered by the affiliate value of the session, in decreasing order (i.e. large affiliate values first). If the number of results is equal to or greater than max results specified for this query in the xlast file, then these sessions are returned without further processing. Pass 1 Pass 0 returns session with no affiliations, in the same gamer zone. If more than the required number of sessions are available, the query considers the gamer rating, country, and language of the host and the client when deciding which rows to return to the client. All rows returned will: have X_ATTRIBUTE_GAME_TYPE = 1 have X_ATTRIBUTE_GAME_MODE that matches the X_ATTRIBUTE_GAME_MODE passed as a parameter have X_ATTRIBUTE_GAMER_ZONE that matches the X_ATTRIBUTE_GAMER_ZONE passed as a parameter have enough public slots open for the number of players signed in on the console (at the time the query was made   this may of course change by the time the console attempts to join the session) are being hosted by a console with a NAT that is compatible with the NAT in use by the console sending the query meet all title defined filter critera provided for the query in xlast If more than 1000 sessions meet the search criteria described above, the match server reduces the number of sessions it needs to sort by only considering sessions where the host s X_ATTRIBUTE_GAMER_RATING is within a certain range. The server tries the following ranges, until more than 100 sessions are available to sort. The range is centered around the client s X_ATTRIBUTE_GAMER_RATING unless that would extend beyond the allowed values of X_ATTRIBUTE_GAMER_RATING which is [0, 100] inclusive, which case the range will start at 0 and/or end at 100. The ranges attempted are, in order:  EMBED Equation.3   = 0.016  EMBED Equation.3   = 0.08  EMBED Equation.3   = 0.4  EMBED Equation.3   = 2.0  EMBED Equation.3   = 10.0  EMBED Equation.3   = 50.0 The logic for this progression is we are looking for a number of sessions between 100 and 1000 which is a factor of 10 difference. Choosing to increase the range by a factor of 5 on each attempt is a good balance between find a range that will produce the number of sessions we re looking for, and not making too many attempts.  The final value attempted is 50, which includes the entire range [0,100], and therefore does not filter any sessions out. The initial value attempted is 0.016, which creates a range of X_ATTRIBUTE_GAMER_RATING that is 0.00032 of the total range of 0 to 100. If there were 1e6 sessions in the database that meet the criteria described above, and if the distribution of X_ATTRIBUTE_GAMER_RATING for those sessions was even between 0 and 100, this would reduce the list of 1e6 sessions to 320. Even if the distribution of X_ATTRIBUTE_GAMER_RATING is not even (which it won t be) this initial value should reduce the number of sessions under consideration to a reasonable number. Over the life of Xbox 360, we do not expect any single title to have more than 1e6 available session of the same game type and game mode, therefore this initial value is small enough. If the range of X_ATTRIBUTE_GAMER_RATING selected by the previous algorithm does not reduce the set of sessions to 1000 or less, the server will further restrict the number of sessions that will be sorted by randomly discarding a percentage of the sessions such that approximately 1000 sessions will be considered. Once a range of X_ATTRIBUTE_GAMER_RATING has been selected, the rows that pass all the filters, including the range check, will be sorted as follows. Sessions where X_ATTRIBUTE_GAMER_LANGUAGE and X_ATTRIBUTE_GAMER_COUNTRY are equal to the client values are returned first. Sessions where only X_ATTRIBUTE_GAMER_LANGUAGE is equal to the client values are returned next. Sessions where only X_ATTRIBUTE_GAMER_COUNTRY is equal to the client values are returned next. Sessions where neither X_ATTRIBUTE_GAMER_LANGUAGE nor X_ATTRIBUTE_GAMER_COUNTRY are equal to the client values are returned last. Within each of the groupings defined above, title defined sort operations will then be applied. Within each of the groupings created by the title defined sort operations, rows will be ordered by how closely the host s X_ATTRIBUTE_GAMER_RATING matches the client value, in ascending order (i.e. closer matches will be returned first). Note that some of the sessions returned by the match SQL server to the front door will be rejected by the front door because they are actually affiliate sessions with a negative session value (as calculated in pass 0). Some of the sessions returned by the match SQL server to the front door may also be affiliate sessions with a positive affiliate value, in which case they will be duplicates of sessions already added to the result set in Pass 0. For this reason, the front door will ask the SQL server for more results than it needs in order to complete the results set. The front door knows at the end of Pass 0 how many slots in the result set have been filled, and how many remain to be filled. The front door also knows how many negative affiliate sessions there are. The maximum number of sessions that could possibly be filtered out by the front door is (# of filled slots) + (# of negative sessions). Therefore the front door asks the SQL query to return, at most (# of open slots) + (# of filled slots) + (# of negative sessions), which simplifys to (max_results) + (# of negative sessions). Example: Pass 0 generated a session value hashtable containing 100 entries. 75 of those entries had a value of 0 or greater, and 25 had a value of less than 0. Of the 75 sessions with a value of zero or greater, 15 were returned by the Pass 0 SQL query (i.e. they were available, had a compatible nat type, were in the correct gamer zone, were the correct GAME_MODE, and GAME_TYPE, and met any title defined criteria). Therefore, 10 slots remain to be filled. The front door needs, at most, (max_results) + (# of negative sessions) = 25 + 25 = 50 results back from the Pass 1 SQL query. Assuming 50 or more sessions exist that meet the Pass 1 criteria, this will be enough to fill the remaining slots, even if 15 of them are duplicates of the results already in the result set, and 25 of them are filtered out because their affiliation value is negative. 10 sessions would still remain, which added to the 15 sessions from pass 0, equals max_results. In practice, the sql query already knows max_results, so the front door simply supplies the stored proc with the number of negative affiliate sessions. Pass 2 Pass 2 requeries the match sql database to find all positive affiliate sessions that are in a different gamer zone than the client. The affiliate values do not need to be recalculated. The results of Pass 2 are ordered by the affiliate value of each session in descending order (i.e. larger values first). Because Pass 0 and Pass 2 act on exactly the same information, to avoid an extra database round trip, the queries for Pass 0 and Pass 2 are combined into one  affiliates  query to the database. If the results from Pass 2 are not required because Pass 0 and Pass 1 have generated enough results, they are simply discarded by the front door. Pass 3 If Pass 3 is idential to Pass 1, except that it returns sessions that are in a different gamer zone.  Because Pass 1 and Pass 3 act on exactly the same information, to avoid an extra database round trip , they queries for Pass 1 and Pass 3 are combined into one query to the database. However, because the query knows how many results the front door is looking for (max_results + # of negative sessions), the stored proc is able to exit after performing the work for Pass 1 if it knows there will be enough results just from Pass 1 alone to satisfy the front door. MultiServer Issues If a title is spans multiple match SQL servers, the affiliate session queries in Pass 0 and Pass 2 must be performed against all the SQL partitions for that titleid. The non-affiliate session queries in Pass 1 and Pass 3 will be performed against one SQL server only. The Pass 1 and Pass 3 search queries for a particular title will cycle through the SQL partitions on a round robin basis. It should be noted that spanning a title across multiple servers reduces the effectiveness of matchmaking, because the queries are being performed on a subset of the total sessions available. If all sessions are present on one SQL server, it is possible to return the best sessions to the client, instead of a random subset of the best sessions. Match Database Design Datatypes The following table shows how xlast datatypes are mapped to T-SQL, C#, and wiredata representations. Xlast Type Name T-SQL Data Type C# type Wiredata DateTime (8 bytes) DATETIME DateTime 64 bit unsigned long integer Float (4 bytes) float 64 bit unsigned long integer Integer (4 bytes) 64 bit unsinged long integer Long Float (8 bytes) FLOAT double 64 bit unsinged long integer Long Integer (8 bytes) BIGINT 64 bit unsinged long integer String ** supported only for gamer tag NVARCHAR(400) string 2 byte length prefix + up to 400 bytes of UTF8 encoded character data (not 400 character, 400 bytes) plus 1 byte null terminator. Blob ** not allowed for xbox 360 titles VARBINARY(800) byte[] 2 byte length prefix + up to 800 bytes of binary data (no terminator) Session Tables Each title will have two session tables; one for ranked matches and one for standard matches. We choose to separate the sessions into two tables because the clustered index required for ranked queries to perform well is different from the clustered index required for standard matches to perform well. The definition of the standard table looks like this:     CREATE TABLE dbo.t_match_sessions_0xFFFF2003_standard (          bi_session_id           bigint                  NOT NULL         ,i_ip_addr               int                     NOT NULL         ,i_sg_ip                 int                     NOT NULL         ,b_box_id                binary(16)              NOT NULL         ,b_host_address          binary(36)              NOT NULL         ,b_key_exchange_key      binary(16)              NOT NULL         ,i_public_available      int                     NOT NULL         ,i_private_available     int                     NOT NULL         ,i_public_current        int                     NOT NULL         ,i_private_current       int                     NOT NULL         ,dt_session_expiration   datetime                NOT NULL         ,ti_is_available         tinyint                 NOT NULL         ,i_hash                  int                     NOT NULL         ,ti_nat_type             tinyint                 NOT NULL         ,att_0x0000800A          int NOT NULL         ,att_0x0000800B          bigint NOT NULL         ,att_0x10008101          int NOT NULL         ,att_0x10008102          int NOT NULL         ,att_0x10008103          int NOT NULL         ,att_0x50008104          real NOT NULL         ,att_0x30008105          float NOT NULL         ,att_0x30008106          float NOT NULL         ,att_0x10000001          int         CONSTRAINT t_match_sessions_0xFFFF2003_standard_pk PRIMARY KEY NONCLUSTERED                     (bi_session_id),     )     CREATE CLUSTERED INDEX t_match_sessions_0xFFFF2003_standard_ndx on t_match_sessions_0xFFFF2003_standard (          ti_is_available         ,att_0x0000800A         ,att_0x0000800B         ,att_0x50008104         ,bi_session_id     )     CREATE NONCLUSTERED INDEX t_match_sessions_0xFFFF2003_standard_ndx_boxid_nc on t_match_sessions_0xFFFF2003_standard (          b_box_id     )          There are a number of universal columns with descriptive names, followed by a number of universal columns named for the attributes ids: X_ATTRIBUTE_GAME_TYPE (0x0000800A) X_ATTRIBUTE_GAME_MODE (0x0000800B) X_ATTRIBUTE_GAMER_ZONE (0x10008101) X_ATTRIBUTE_GAMER_COUNTRY (0x10008102) X_ATTRIBUTE_GAMER_LANGUAGE (0x10008103) X_ATTRIBUTE_GAMER_RATING (0x50008104) X_ATTRIBUTE_GAMER_MU (0x30008105) X_ATTRIBUTE_GAMER_SIGMA (0x30008106) All of these are defined as NOT NULL. Following these universal columns are the title defined columns. Note that the title may provide game type and game mode in xlast. If they do, those attributes will not be duplicated, but instead will simply be ignored in favor of the built in definitions above. The primary key is bi_session_id, and is non-clustered. This non-clustered index will provide reasonably efficient bookmark lookups for FindById queries and affiliate session lookups. There is another non clustered index on b_box_id. This is used to delete sessions in a reasonably efficient manner when processing Dead SG and Dead Xbox messages. The clustered index is on ti_is_available, game type, game mode, gamer rating, and session id. Any single query will always be restricted to sessions that are available, in particular game type and game mode. Putting these three columns at the beginning of the clustered index ensures that the sessions that will be considered by any one search query are on contiguous pages in the database. (Of course, in the standard table, the game type will always be 1, but we leave the column in for clarity.) Gamer rating is part of the clustered index so we can efficiently determine what range of ratings should be used to generate between 100 and 1000 rows to present to the order by clause in a query. The session id is added to the end of the clustered index to guarantee uniqueness. If we didn t do this, SQL server would add an internal hidden column containing a guid to guanratee uniqueness, which would be less efficient than simply using session id. The definition of the ranked table is almost identical:     CREATE TABLE dbo.t_match_sessions_0xFFFF2003_ranked (          bi_session_id           bigint                  NOT NULL         ,i_ip_addr               int                     NOT NULL         ,i_sg_ip                 int                     NOT NULL         ,b_box_id                binary(16)              NOT NULL         ,b_host_address          binary(36)              NOT NULL         ,b_key_exchange_key      binary(16)              NOT NULL         ,i_public_available      int                     NOT NULL         ,i_private_available     int                     NOT NULL         ,i_public_current        int                     NOT NULL         ,i_private_current       int                     NOT NULL         ,dt_session_expiration   datetime                NOT NULL         ,ti_is_available         tinyint                 NOT NULL         ,i_hash                  int                     NOT NULL         ,ti_nat_type             tinyint                 NOT NULL         ,att_0x0000800A          bigint NOT NULL         ,att_0x0000800B          bigint NOT NULL         ,att_0x10008101          int NOT NULL         ,att_0x10008102          int NOT NULL         ,att_0x10008103          int NOT NULL         ,att_0x50008104          real NOT NULL         ,att_0x30008105          float NOT NULL         ,att_0x30008106          float NOT NULL         ,att_0x10000001          int         CONSTRAINT t_match_sessions_0xFFFF2003_ranked_pk PRIMARY KEY NONCLUSTERED                     (bi_session_id),     )     CREATE CLUSTERED INDEX t_match_sessions_0xFFFF2003_ranked_ndx on t_match_sessions_0xFFFF2003_ranked (          ti_is_available         ,att_0x0000800A         ,att_0x0000800B         ,att_0x30008105         ,bi_session_id     )     CREATE NONCLUSTERED INDEX t_match_sessions_0xFFFF2003_ranked_ndx_boxid_nc on t_match_sessions_0xFFFF2003_ranked (          b_box_id     ) Other than the table and index names the only significant difference is the clustered index. Instead of gamer rating, the clustered index includes gamer mu. This is because ranked queries must efficiently search in ranges of mu, whereas standard queries need to search efficiently in ranges of ratings. Session ID Uniqueness The primary key on bi_session_id in the ranked and standard tables only guarantees uniqueness within that table. We need session ids to be unqiue across an entire title, which spans not only the ranked and standard tables, but also potentially multiple database servers. To address this issue, when creating a session, the front door selects a session id as follows: Randomly select a 64 bit session id If the session id is all zeros in the top 48 bits, then try again until we have a session id that is non-zero in the top 48 bits Set the least significant nibble (0x000F) equal to the database server id this session is being created on. The first server in use by a title is server id 0, the second server in use by a title is session id 1, and so on. We do not support more than 16 servers per title. This ensures that session ids on different servers will never be the same. It also helps the front door locate sessions for FindById queries. Set the 2nd least significant nibble (0x00F0) to the host type as indicated by the client. Note that this also encodes the NAT type. This ensures that session ids for system link games will be different from session ids for matchmaking sessions. Set the 2nd least significant byte (0xFF00) equal to the game type. This ensures that the session ids in the ranked table are different from the session ids in the standard table. The front door then tries to create a session. In rare cases, the front door may have randomly selected a session id that is already in use. In that case, the insert session operation will fail with a primary key violation, and the front door will select a new session id and retry. The front door will retry up to 3 times before giving up and returning an error to the client. Insert Stored Proc Each title will have a single insert stored proc created for it using statements with the structure below: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_insert]      @bi_session_id                 bigint     ,@i_ip_addr                     int     ,@i_sg_ip                       int     ,@b_box_id                      binary(16)     ,@b_host_address                binary(36)     ,@b_key_exchange_key            binary(16)     ,@i_public_available            int     ,@i_private_available           int     ,@i_public_current              int     ,@i_private_current             int     ,@i_expiration                  int     ,@ti_nat_type                   tinyint     ,@att_0x0000800A                bigint     ,@att_0x0000800B                bigint     ,@att_0x10008101                int     ,@att_0x10008102                int     ,@att_0x10008103                int     ,@att_0x50008104                real     ,@att_0x30008105                float     ,@att_0x30008106                float     ,@att_0x20008107                bigint = NULL     ,@att_0x10000001                int = NULL -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     DECLARE         -- Generic          @i_return_code             int         ,@error_var                 int         ,@dt_expire_date            datetime         ,@ti_is_available           tinyint     SET nocount on     SELECT @dt_expire_date = DATEADD(second, @i_expiration, GETUTCDATE())     --     --  Insert the session, GAME_TYPE=0 is ranked, GAME_TYPE=1 is standard     --     SET @ti_is_available = CASE WHEN @i_public_available > 0 THEN 1 ELSE 0 END     if (@att_0x30008105 > 6.0)         set @att_0x30008105 = 6.0     else if (@att_0x30008105 < 0.0)         set @att_0x30008105 = 0.0     if (@att_0x50008104 > 100.0)         set @att_0x50008104 = 100.0     else if (@att_0x50008104 < 0.0)         set @att_0x50008104 = 0.0     if (@att_0x0000800A = 0)     begin         INSERT INTO dbo.t_match_sessions_0xFFFF2003_ranked (              bi_session_id             ,i_ip_addr             ,i_sg_ip             ,b_box_id             ,b_host_address             ,b_key_exchange_key             ,i_public_available             ,i_private_available             ,i_public_current             ,i_private_current             ,dt_session_expiration             ,ti_is_available             ,i_hash             ,ti_nat_type             ,att_0x0000800A             ,att_0x0000800B             ,att_0x10008101             ,att_0x10008102             ,att_0x10008103             ,att_0x50008104             ,att_0x30008105             ,att_0x30008106             ,att_0x10000001         ) VALUES (              @bi_session_id             ,@i_ip_addr             ,@i_sg_ip             ,@b_box_id             ,@b_host_address             ,@b_key_exchange_key             ,@i_public_available             ,@i_private_available             ,@i_public_current             ,@i_private_current             ,@dt_expire_date             ,@ti_is_available             ,RAND() * 10000             ,@ti_nat_type             ,@att_0x0000800A             ,@att_0x0000800B             ,@att_0x10008101             ,@att_0x10008102             ,@att_0x10008103             ,@att_0x50008104             ,@att_0x30008105             ,@att_0x30008106             ,@att_0x10000001         )     end     else     begin         INSERT INTO dbo.t_match_sessions_0xFFFF2003_standard (              bi_session_id             ,i_ip_addr             ,i_sg_ip             ,b_box_id             ,b_host_address             ,b_key_exchange_key             ,i_public_available             ,i_private_available             ,i_public_current             ,i_private_current             ,dt_session_expiration             ,ti_is_available             ,i_hash             ,ti_nat_type             ,att_0x0000800A             ,att_0x0000800B             ,att_0x10008101             ,att_0x10008102             ,att_0x10008103             ,att_0x50008104             ,att_0x30008105             ,att_0x30008106             ,att_0x10000001         ) VALUES (              @bi_session_id             ,@i_ip_addr             ,@i_sg_ip             ,@b_box_id             ,@b_host_address             ,@b_key_exchange_key             ,@i_public_available             ,@i_private_available             ,@i_public_current             ,@i_private_current             ,@dt_expire_date             ,@ti_is_available             ,RAND() * 10000             ,@ti_nat_type             ,@att_0x0000800A             ,@att_0x0000800B             ,@att_0x10008101             ,@att_0x10008102             ,@att_0x10008103             ,@att_0x50008104             ,@att_0x30008105             ,@att_0x30008106             ,@att_0x10000001         )     end     SELECT @error_var = @@ERROR     IF @error_var != 0     BEGIN         IF @error_var = 2627 -- integrity violation         BEGIN             -- setting the return code is really pointless since xmatchfd will receive DB_E_INTEGRITYVIOLATION             -- but it is important to set error_var to 0 since this occurs in normal operation and we don't want             -- event spew on every occurance.             SET @i_return_code = 0x80155112  -- XONLINE_E_MATCH_SESSION_ALREADY_EXISTS             SET @error_var = 0             GOTO exit_label         END         SET @i_return_code = 0x80155115  -- XONLINE_E_MATCH_CRITICAL_DB_ERR         GOTO exit_label     END     RETURN 0 exit_label:     IF @error_var != 0     BEGIN         DECLARE @message varchar(255)         SELECT @message = 'XMATCH_SESSION_INSERT_FAILED: p_match_session_0xFFFF2003_insert - ' + CAST(CAST(CAST(@error_var AS binary(4)) AS int) AS varchar(64))         EXEC master.dbo.xp_logevent 51709, @message, error     END     RETURN @i_return_code Things to note: The stored proc looks at the game type parameter to determine which table to insert the row into. All title defined attributes may be null and do not need to be specified. The gamer puid is listed as a parameter, because the client is allowed to send it up, but is optional and has no effect. The values for mu and rating are forced to be within their expected bounds. Update Stored Proc Each title will have a single update stored proc created for it using statements with the structure below: Statement 1: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_update]      @bi_session_id                 bigint     ,@i_public_available            int     ,@i_private_available           int     ,@i_public_current              int     ,@i_private_current             int     ,@i_expiration                  int     ,@att_0x0000800A                bigint = NULL     ,@att_0x0000800B                bigint = NULL     ,@att_0x10008101                int = NULL     ,@att_0x10008102                int = NULL     ,@att_0x10008103                int = NULL     ,@att_0x50008104                real = NULL     ,@att_0x30008105                float = NULL     ,@att_0x30008106                float = NULL     ,@att_0x20008107                bigint = NULL     ,@att_0x10000001                int = NULL -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     DECLARE          @i_return_code             int         ,@error_var                 int         ,@rowcount_var              int         ,@dt_expire_date            datetime         ,@ti_is_available           tinyint     SET nocount on     SELECT @dt_expire_date = DATEADD(second,@i_expiration,GETUTCDATE())     if (@att_0x30008105 IS NOT NULL and @att_0x30008105 > 6.0)         set @att_0x30008105 = 6.0     else if (@att_0x30008105 IS NOT NULL and @att_0x30008105 < 0.0)         set @att_0x30008105 = 0.0     if (@att_0x50008104 IS NOT NULL and @att_0x50008104 > 100.0)         set @att_0x50008104 = 100.0     else if (@att_0x50008104 IS NOT NULL and @att_0x50008104 < 0.0)         set @att_0x50008104 = 0.0     --     --  Update the session     --     SET @ti_is_available = CASE WHEN @i_public_available > 0 THEN 1 ELSE 0 END     if ((@bi_session_id & 0x000000000000FF00) = 0)     begin         if (@att_0x0000800A IS NOT NULL and @att_0x0000800A != 0)         begin             set @error_var = 2148880665 -- XONLINE_E_MATCH_INVALID_PARAM             goto exit_label         end         UPDATE dbo.t_match_sessions_0xFFFF2003_ranked SET              i_public_available = @i_public_available             ,i_private_available = @i_private_available             ,i_public_current = @i_public_current             ,i_private_current = @i_private_current             ,dt_session_expiration = @dt_expire_date             ,ti_is_available = @ti_is_available             ,att_0x0000800B = ISNULL(@att_0x0000800B, att_0x0000800B)             ,att_0x10008101 = ISNULL(@att_0x10008101, att_0x10008101)             ,att_0x10008102 = ISNULL(@att_0x10008102, att_0x10008102)             ,att_0x10008103 = ISNULL(@att_0x10008103, att_0x10008103)             ,att_0x50008104 = ISNULL(@att_0x50008104, att_0x50008104)             ,att_0x30008105 = ISNULL(@att_0x30008105, att_0x30008105)             ,att_0x30008106 = ISNULL(@att_0x30008106, att_0x30008106)             ,att_0x10000001 = ISNULL(@att_0x10000001, att_0x10000001)             WHERE bi_session_id = @bi_session_id     end     else     begin         if (@att_0x0000800A IS NOT NULL and @att_0x0000800A != 1)         begin             set @error_var = 2148880665 -- XONLINE_E_MATCH_INVALID_PARAM             goto exit_label         end         UPDATE dbo.t_match_sessions_0xFFFF2003_standard SET              i_public_available = @i_public_available             ,i_private_available = @i_private_available             ,i_public_current = @i_public_current             ,i_private_current = @i_private_current             ,dt_session_expiration = @dt_expire_date             ,ti_is_available = @ti_is_available             ,att_0x0000800B = ISNULL(@att_0x0000800B, att_0x0000800B)             ,att_0x10008101 = ISNULL(@att_0x10008101, att_0x10008101)             ,att_0x10008102 = ISNULL(@att_0x10008102, att_0x10008102)             ,att_0x10008103 = ISNULL(@att_0x10008103, att_0x10008103)             ,att_0x50008104 = ISNULL(@att_0x50008104, att_0x50008104)             ,att_0x30008105 = ISNULL(@att_0x30008105, att_0x30008105)             ,att_0x30008106 = ISNULL(@att_0x30008106, att_0x30008106)             ,att_0x10000001 = ISNULL(@att_0x10000001, att_0x10000001)             WHERE bi_session_id = @bi_session_id     end     SELECT @error_var = @@ERROR, @rowcount_var = @@ROWCOUNT     IF @error_var != 0     BEGIN         SET @i_return_code = 0x80155115  -- XONLINE_E_MATCH_CRITICAL_DB_ERR         GOTO exit_label     END     IF @rowcount_var = 0     BEGIN         SET @i_return_code = 0x80155100  -- XONLINE_E_MATCH_INVALID_SESSION_ID         GOTO exit_label     END     RETURN 0 exit_label:     IF @error_var != 0     BEGIN         DECLARE @message varchar(255)         SELECT @message = 'XMATCH_SESSION_UPDATE_FAILED: p_match_session_0xFFFF2003_update - ' + CAST(CAST(CAST(@error_var AS binary(4)) AS int) AS varchar(64))         EXEC master.dbo.xp_logevent 51710, @message, error     END     RETURN @i_return_code Things to note: The stored proc looks at the session id to determine which table to update the row in. If the client attempts to change the game type, the stored proc will fail. Other built in attributes may be supplied. If they are supplied, then their value is updated. If they are not supplied, then the value in the table is not changed. Title defined attributes may be supplied. If they are supplied, then their value is updated. If they are not supplied, then the value in the table is not changed. Delete Stored Proc Each title will have a single delete stored proc created for it using statements with the structure below: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_delete]      @bi_session_id                 bigint -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     DECLARE          @i_return_code             int         ,@error_var                 int         ,@rowcount_var              int     SET nocount on     --     --  Delete the session     --     if ((@bi_session_id & 0x000000000000FF00) = 0)     begin         DELETE dbo.t_match_sessions_0xFFFF2003_ranked WHERE bi_session_id = @bi_session_id     end     else     begin         DELETE dbo.t_match_sessions_0xFFFF2003_standard WHERE bi_session_id = @bi_session_id     end     SELECT @error_var = @@ERROR, @rowcount_var = @@ROWCOUNT     IF @error_var != 0     BEGIN         SET @i_return_code = 0x80155115  -- XONLINE_E_MATCH_CRITICAL_DB_ERR         GOTO exit_label     END     IF @rowcount_var = 0     BEGIN         SET @i_return_code = 0x80155100 -- XONLINE_E_MATCH_INVALID_SESSION_ID         GOTO exit_label     END     RETURN 0 exit_label:     IF @error_var != 0     BEGIN         DECLARE @message varchar(255)         SELECT @message = 'XMATCH_SESSION_DELETE_FAILED: p_match_session_0xFFFF2003_delete - ' + CAST(CAST(CAST(@error_var AS binary(4)) AS int) AS varchar(64))         EXEC master.dbo.xp_logevent 51711, @message, error     END     RETURN @i_return_code Things to note: The stored proc looks at the session id to determine which table to delete the row from. System FindByID Query Each title will have a system defined FindById query created for it using statements with the structure below: Statement 1: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_search_findbyid]     @si_required_slots              smallint,     @i_client_ip                    int,     @ti_nat_type                    tinyint,     @ti_server_count                tinyint,     @param_0x20008003               bigint -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     if ((@param_0x20008003 & 0x000000000000FF00) = 0)     begin         SELECT TOP 1             s.bi_session_id,             s.b_host_address,             s.b_key_exchange_key,             s.i_public_available,             s.i_private_available,             s.i_public_current,             s.i_private_current         FROM dbo.t_match_sessions_0xFFFF2003_ranked s WITH (NOLOCK)         WHERE             (@param_0x20008003 = s.bi_session_id)     end     else     begin         SELECT TOP 1             s.bi_session_id,             s.b_host_address,             s.b_key_exchange_key,             s.i_public_available,             s.i_private_available,             s.i_public_current,             s.i_private_current         FROM dbo.t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)         WHERE             (@param_0x20008003 = s.bi_session_id)     end     RETURN 0 Things to note: no title defined attributes are returned, this query is identical for all titles except for its name and the table it references the session id is used to determine which table to search for the session Title Defined Queries Titles define their matchmaking queries in xlast. Below is an example of a Query element from an xlast file. <Query clsid="{7FEE4CB1-F3F0-48BF-9CA1-F1B2306E32E3}" id="0" friendlyName="MyQuery" maxResults="25" type="Normal" qosProbe="true" groupBy="0xFFFFFFFF">  <Parameters>   <Parameter id="0x10000001"/>   <Parameter id="0x20000002"/>   <Parameter id="0x50000003"/>   <Parameter id="0x30000006"/>   <Parameter id="0x70000007"/>   <Parameter id="0x00000002"/>  </Parameters>  <Filters>   <Filter left="0x30000006" leftType="Parameter" op="&gt;" right="0x30000006" rightType="Attribute"/>   <Filter left="0x00000002" leftType="Attribute" op="==" right="0x00000001" rightType="ContextValue"/>   <Filter left="0x10000001" leftType="Attribute" op="==" right="0x15000000" rightType="Constant"/>  </Filters>  <SortOperations>   <SortOperation id="0x70000007" type="Descending" distanceid="0xFFFFFFFF" ordinal="0"/>   <SortOperation id="0x50000003" type="Near" distanceid="0x52000003" ordinal="1"/>  </SortOperations>  <Returns>   <Return id="0x0000800A" type="Normal" ordinal="0"/>   <Return id="0x0000800B" type="Normal" ordinal="1"/>   <Return id="0x10000001" type="Normal" ordinal="2"/>   <Return id="0x20000002" type="Normal" ordinal="3"/>  </Returns> </Query> maxResults determines the maximum number of rows the query will return. Each Filter represents a WHERE condition, that restricts the rows returned. Each SortOperation represents an ORDER BY condition that determines how the results that meet the where clause will be sorted, which determines the order in which the 25 rows are returned, and if there are more than 25 rows that meet the filter criteria, which of those rows will be returned. Each Return adds a column to the select statement, such that the attribute is part of the search results. For each title defined query, three stored procs are generated. One stored proc searches for affiliate sessions given a list of session ids and the usual query parameters, one stored proc searches for standards sessions, and the final stored proc searches for ranked sessions. Affiliates Query The match front door gets a list of potential affiliate session ids from the presence front door, sorts them by affiliate value, and then queries the database to see which of those session ids actually meet the requirements of the title defined query. Each affiliates query has the following structure: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_0x00000000_search_affiliates]     @i_max_results                  int OUTPUT    ,@si_required_slots              smallint    ,@i_client_ip                    int    ,@ti_nat_type                    tinyint    ,@ti_server_count                tinyint    ,@i_session_id_count             int    ,@vb_session_ids                 varbinary(8000)    ,@param_0x0000800A               bigint    ,@param_0x0000800B               bigint    ,@param_0x10008101               int    ,@param_0x10008102               int    ,@param_0x10008103               int    ,@param_0x50008104               real    ,@param_0x30008105               float    ,@param_0x30008106               float    ,@param_0x20008107               bigint -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     SET @i_max_results = 25     DECLARE @bi_session_id bigint     DECLARE @b_session_id binary(8)     DECLARE @i int     SET @i = 0     WHILE (@i < @i_session_id_count)     BEGIN         set @b_session_id = substring(@vb_session_ids, 1+(@i * 8), 8)         set @bi_session_id = convert(bigint, @b_session_id)         SELECT             s.bi_session_id            ,s.b_host_address            ,s.b_key_exchange_key            ,s.i_public_available            ,s.i_private_available            ,s.i_public_current            ,s.i_private_current            ,s.att_0x0000800A            ,s.att_0x0000800B            ,s.att_0x10000001            ,s.att_0x10008101         FROM t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)         WHERE               (s.ti_is_available = 1)               AND (s.att_0x0000800A = @param_0x0000800A)               AND (s.att_0x0000800B = @param_0x0000800B)               AND (s.bi_session_id = @bi_session_id)               AND (s.i_public_available >= @si_required_slots)               AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)         set @i = @i + 1     END Things to note: The list of session ids is passed as an array of bytes [varbinary(8000)]. With each id containing 8 bytes, up to 1000 session ids can be passed. If the front door tries to pass more than this, it will get a sql exception. The front door limits its list of positive affiliate sessions to 1000 for this reason, which is still far more than we expect to have in practice. A simple select statement is performed for each session id in the array. The select statement will return a single row if the session with that id is available, in the right game mode, game type, has enough slots available, has a compatible nat type, plus any other title defined filters. The queries are only performed on the standard session table, because affiliates are not used for ranked queries. The select statement returns the row no matter if the session is in the same gamer zone or not. The gamer zone is returned as one of the query columns, and the front door checks each row to decide if it should be added to the list of in-zone or out-of-zone games. This solution is straightforward, easy to code and understand. However, a solution that generates a dynamic sql statement that performs a single select statement with a join to 1000 session ids may have performance advantages. Stress will hopefully tell us if we should try it. Ranked Query The goal of the ranked query is to find, as quickly as possible, the closest ranked sessions that meet all the standard and title defined selection criteria. Each affiliates query has the following structure: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_0x00000000_search_ranked]     @i_max_results                  int OUTPUT    ,@si_required_slots              smallint    ,@i_client_ip                    int    ,@ti_nat_type                    tinyint    ,@ti_server_count                tinyint    ,@param_0x0000800A               bigint    ,@param_0x0000800B               bigint    ,@param_0x10008101               int    ,@param_0x10008102               int    ,@param_0x10008103               int    ,@param_0x50008104               real    ,@param_0x30008105               float    ,@param_0x30008106               float    ,@param_0x20008107               bigint -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     SET @i_max_results = 25     if (@param_0x30008105 > 6.0)         set @param_0x30008105 = 6.0     else if (@param_0x30008105 < 0.0)         set @param_0x30008105 = 0.0     declare @f_mu_range float     declare @f_mu_upper_bound float     declare @f_mu_lower_bound float     declare @f_five float     declare @i int     declare @i_rowcount int     set @f_five = 5.0     set @i_rowcount = 0     set @i = -5     while (@i < 1 AND @i_rowcount < 100)     begin         set @f_mu_range = 3.0 * power(@f_five, cast(@i as float))         set @f_mu_upper_bound = @param_0x30008105 + @f_mu_range         set @f_mu_lower_bound = @param_0x30008105 - @f_mu_range         if (@f_mu_lower_bound < 0)         begin             set @f_mu_upper_bound = @f_mu_upper_bound - @f_mu_lower_bound             set @f_mu_lower_bound = 0.0         end         else if (@f_mu_upper_bound > 6.0)         begin             set @f_mu_lower_bound = @f_mu_lower_bound - (@f_mu_upper_bound - 6.0)             set @f_mu_upper_bound = 6.0         end         set @i_rowcount = (select count(*)             FROM t_match_sessions_0xFFFF2003_ranked s WITH (NOLOCK)             WHERE                 (s.ti_is_available = 1)                 AND (s.att_0x0000800A = @param_0x0000800A)                 AND (s.att_0x0000800B = @param_0x0000800B)                 AND (s.att_0x30008105 <= @f_mu_upper_bound)                 AND (s.att_0x30008105 >= @f_mu_lower_bound)                 AND (s.i_public_available >= @si_required_slots)                 AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)         )         set @i = @i + 1     end     declare @i_upper_hash_bound1 int     declare @i_lower_hash_bound1 int     declare @i_upper_hash_bound2 int     declare @i_lower_hash_bound2 int     declare @i_hash_count int     set @i_upper_hash_bound1 = 10000     set @i_lower_hash_bound1 = 0     set @i_upper_hash_bound2 = 0     set @i_lower_hash_bound2 = 0     set @i_hash_count = 10000     if (@i_rowcount > 1000)     begin         set @i_hash_count = (1000 * 10000)/@i_rowcount         set @i_lower_hash_bound1 = (RAND() * 10000)         set @i_upper_hash_bound1 = @i_lower_hash_bound1 + @i_hash_count         if (@i_upper_hash_bound1 > 10000)         begin             set @i_upper_hash_bound2 = @i_upper_hash_bound1 - 10000             set @i_upper_hash_bound1 = 10000         end     end     select         -57341 as i_title_id,         0 as i_query_id,         @param_0x0000800A as i_game_type,         @param_0x0000800B as i_game_mode,         @param_0x30008105 as f_gamer_mu,         (5 + @i) as i_iterations,         @i_rowcount as i_rowcount,         @f_mu_range as f_mu_range,         @f_mu_upper_bound as f_mu_upper_bound,         @f_mu_lower_bound as f_mu_lower_bound,         @i_lower_hash_bound1 as i_lower_hash_bound1,         @i_upper_hash_bound1 as i_upper_hash_bound1,         @i_lower_hash_bound2 as i_lower_hash_bound2,         @i_upper_hash_bound2 as i_upper_hash_bound2     select top 25         s.bi_session_id        ,s.b_host_address        ,s.b_key_exchange_key        ,s.i_public_available        ,s.i_private_available        ,s.i_public_current        ,s.i_private_current        ,s.att_0x0000800A        ,s.att_0x0000800B        ,s.att_0x10000001     FROM t_match_sessions_0xFFFF2003_ranked s WITH (NOLOCK)     WHERE         (s.ti_is_available = 1)         AND (s.att_0x0000800A= @param_0x0000800A)         AND (s.att_0x0000800B= @param_0x0000800B)         AND (s.att_0x30008105 <= @f_mu_upper_bound)         AND (s.att_0x30008105 >= @f_mu_lower_bound)         AND ((s.i_hash >= @i_lower_hash_bound1 AND s.i_hash < @i_upper_hash_bound1)             OR (s.i_hash >= @i_lower_hash_bound2 AND s.i_hash < @i_upper_hash_bound2))         AND (s.i_public_available >= @si_required_slots)         AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)     ORDER BY         att_0x10000001 ASC        ,dbo.f_mu_sigma_draw_probability(att_0x30008105, att_0x30008106, @param_0x30008105, @param_0x30008106) ASC A naive implementation of this query would simply select all the rows the meet the title defined criteria, and then order by f_mu_sigma_draw_probability to find the best skill matches. However, in a world where we need to plan for 1e6 concurrent sessions, this naive implementation would quickly crush the sql server into submission as it tries to order by 1e6 rows. Some experimentation with Query Analyzer display of various query plans on a test database with many rows shows that, by far, the most significant thing we can do to improve the performance of the query is to reduce the number of rows that are presented to the order by clause to something reasonable. SQL can order by 1000 rows without much trouble. Therefore the first part of the query tries a series of expanding ranges of mu until it finds a range of mu that returns at least 100 rows. Each of these queries is very efficient, because it makes use of the clustered index on ti_is_available, att_0x0000800A (game type), att_0x0000800B (game mode) and att_0x30008105 (mu). The remaining filter clauses (nat type, required slots, and any title defined filters) can be performed reasonably quickly by SQL server, because all the rows it needs to filter will be in contiguous pages in the database, because we have restricted the search using the clustered index, and we start with a very narrow range and get gradually wider. There is a trade off between finding an excellent mu range and the number of queries we need to find that range. Since we re looking for a result set between 100 and 1000 (a factor of 10 difference), we choose to expand mu by a factor of 5 with each attempt. There is a good chance that a 5 times jump in the mu range could return for more than 1000 rows. To guard against this, each session has a random hash value assigned to it between 0 and 9999. If more than 1000 rows are present in the mu range, a subset of those rows are filtered out by only considering rows within a certain range of hash values. This also protects the server against a title that doesn t use mu properly (i.e. opts out of our skill system) and therefore mu always has the default value of 3. Before the real query is performed, the stored proc performs a select to return to the front door the mu range and hash range the proc has decided on. The front door can then add this to an app log so we can monitor how this query is working in the real world. This may help us to diagnose or fortell performance problems in production. While it is not recommended, the title may add their own sort operations, which will be applied before the draw probability sort. If a title does not wish to use our skill system, that title can leave mu and sigma at their default values (presumably by not reporting win/loss information). This query will then select about 1000 sessions at random from the total population of sessions that pass the filter criteria, and then sort by whatever operation the title specifies. Note that this is not nearly as efficient as when mu is a valid value, since the clustered index restriction is defeated.  If we allowed the title to send up their own mu value instead of ours, and if that title honored the same range of mu between 0 and 6 that ours does, then they could take advantage of the clustered index. This is possible because there is no direct communication between stats and match; match simply believes the mu sent up by the console, both for the host and the searcher. This is not currently possible because the client has no way to set mu explicitly. Here is the implementation of the function f_mu_sigma_draw_probability: ALTER function dbo.f_mu_sigma_draw_probability (     @f_muA float,     @f_sigmaA float,     @f_muB float,     @f_sigmaB float returns float begin     -- note: beta = 0.5, 2*(beta^2)=0.5     declare @f_muA_minus_muB_squared float     set @f_muA_minus_muB_squared = (@f_muA-@f_muB)*(@f_muA-@f_muB)     declare @f_sigmaA_squared_plus_sigmaB_squared float     set @f_sigmaA_squared_plus_sigmaB_squared = (@f_sigmaA*@f_sigmaA)+(@f_sigmaB*@f_sigmaB)     declare @f_draw_probability float     set @f_draw_probability =         exp(-((@f_muA_minus_muB_squared)/(1+2*@f_sigmaA_squared_plus_sigmaB_squared)))         * sqrt((0.5)/(0.5+@f_sigmaA_squared_plus_sigmaB_squared))     return @f_draw_probability Standard Query The goal of the standard query is to quickly find sessions that are the most socially compatible with the person making the query. The factors used to determine the social compatibility are gamer rating, gamer zone, country, and language. Here is the structure of the standard query: ALTER PROCEDURE [dbo].[p_match_session_0xFFFF2003_0x00000000_search_standard]     @i_max_results                  int OUTPUT    ,@i_negative_sessions            int    ,@si_required_slots              smallint    ,@i_client_ip                    int    ,@ti_nat_type                    tinyint    ,@ti_server_count                tinyint    ,@param_0x0000800A               bigint    ,@param_0x0000800B               bigint    ,@param_0x10008101               int    ,@param_0x10008102               int    ,@param_0x10008103               int    ,@param_0x50008104               real    ,@param_0x30008105               float    ,@param_0x30008106               float    ,@param_0x20008107               bigint -- Match Code Generator Version - !!Version=4.0.536.0 -- Xlast (XDK) Version = 2.0.1538.0 -- Xlast Project Version = 1.00.0016.0 BEGIN     SET @i_max_results = 25     declare @i_results_found int     DECLARE @i_results_needed int     SET @i_results_needed = @i_max_results + @i_negative_sessions     if (@param_0x50008104 > 100.0)         set @param_0x50008104 = 100.0     else if (@param_0x50008104 < 0.0)         set @param_0x50008104 = 0.0     declare @f_rating_range float     declare @f_rating_upper_bound float     declare @f_rating_lower_bound float     declare @f_five float     declare @i int     declare @i_rowcount int     set @f_five = 5.0     set @i_rowcount = 0     set @i = -5     while (@i < 1 AND @i_rowcount < @i_results_needed)     begin         set @f_rating_range = 50.0 * power(@f_five, cast(@i as float))         set @f_rating_upper_bound = @param_0x50008104 + @f_rating_range         set @f_rating_lower_bound = @param_0x50008104 - @f_rating_range         if (@f_rating_lower_bound < 0)         begin             set @f_rating_upper_bound = @f_rating_upper_bound - @f_rating_lower_bound             set @f_rating_lower_bound = 0.0         end         else if (@f_rating_upper_bound > 100.0)         begin             set @f_rating_lower_bound = @f_rating_lower_bound - (@f_rating_upper_bound - 100.0)             set @f_rating_upper_bound = 100.0         end         set @i_rowcount = (select count(*)         FROM t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)         WHERE             (s.ti_is_available = 1)             AND (s.att_0x0000800A = @param_0x0000800A)             AND (s.att_0x0000800B = @param_0x0000800B)             AND (s.att_0x50008104 <= @f_rating_upper_bound)             AND (s.att_0x50008104 >= @f_rating_lower_bound)             AND (s.att_0x10008101 = @param_0x10008101)             AND (s.i_public_available >= @si_required_slots)             AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)         )         set @i = @i + 1     end     declare @i_upper_hash_bound1 int     declare @i_lower_hash_bound1 int     declare @i_upper_hash_bound2 int     declare @i_lower_hash_bound2 int     declare @i_hash_count int     set @i_upper_hash_bound1 = 10000     set @i_lower_hash_bound1 = 0     set @i_upper_hash_bound2 = 0     set @i_lower_hash_bound2 = 0     set @i_hash_count = 10000     if (@i_rowcount > 1000)     begin         set @i_hash_count = (1000 * 10000)/@i_rowcount         set @i_lower_hash_bound1 = (RAND() * 10000)         set @i_upper_hash_bound1 = @i_lower_hash_bound1 + @i_hash_count         if (@i_upper_hash_bound1 > 10000)         begin             set @i_upper_hash_bound2 = @i_upper_hash_bound1 - 10000             set @i_upper_hash_bound1 = 10000         end     end     select         -57341 as i_title_id,         0 as i_query_id,         @param_0x0000800A as i_game_type,         @param_0x0000800B as i_game_mode,         @param_0x50008104 as f_gamer_rating,         @param_0x10008101 as f_gamer_zone,         (5 + @i) as i_iterations,         @i_rowcount as i_rowcount,         @f_rating_range as f_rating_range,         @f_rating_upper_bound as f_rating_upper_bound,         @f_rating_lower_bound as f_rating_lower_bound,         @i_lower_hash_bound1 as i_lower_hash_bound1,         @i_upper_hash_bound1 as i_upper_hash_bound1,         @i_lower_hash_bound2 as i_lower_hash_bound2,         @i_upper_hash_bound2 as i_upper_hash_bound2     set rowcount @i_results_needed     select         s.bi_session_id        ,s.b_host_address        ,s.b_key_exchange_key        ,s.i_public_available        ,s.i_private_available        ,s.i_public_current        ,s.i_private_current        ,s.att_0x0000800A        ,s.att_0x0000800B        ,s.att_0x10000001            ,s.att_0x10008101     FROM t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)     WHERE         (s.ti_is_available = 1)         AND (s.att_0x0000800A= @param_0x0000800A)         AND (s.att_0x0000800B= @param_0x0000800B)         AND (s.att_0x50008104 <= @f_rating_upper_bound)         AND (s.att_0x50008104 >= @f_rating_lower_bound)         AND (s.att_0x10008101 = @param_0x10008101)         AND ((s.i_hash >= @i_lower_hash_bound1 AND s.i_hash < @i_upper_hash_bound1)             OR (s.i_hash >= @i_lower_hash_bound2 AND s.i_hash < @i_upper_hash_bound2))         AND (s.i_public_available >= @si_required_slots)         AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)     ORDER BY         CASE              WHEN (s.att_0x10008103 = @param_0x10008103 and s.att_0x10008102 = @param_0x10008103) THEN 3             WHEN (s.att_0x10008103 = @param_0x10008103) THEN 2             WHEN (s.att_0x10008102 = @param_0x10008102) THEN 1             ELSE 0         END        ,att_0x10000001 ASC        ,ABS(att_0x50008104 - @param_0x50008104) ASC     set @i_results_found = @@rowcount    set rowcount 0     if (@i_results_found >= @i_results_needed) RETURN 0     set @i_results_needed = @i_results_needed - @i_results_found     set @f_five = 5.0     set @i_rowcount = 0     set @i = -5     while (@i < 1 AND @i_rowcount < @i_results_needed)     begin         set @f_rating_range = 50.0 * power(@f_five, cast(@i as float))         set @f_rating_upper_bound = @param_0x50008104 + @f_rating_range         set @f_rating_lower_bound = @param_0x50008104 - @f_rating_range         if (@f_rating_lower_bound < 0)         begin             set @f_rating_upper_bound = @f_rating_upper_bound - @f_rating_lower_bound             set @f_rating_lower_bound = 0.0         end         else if (@f_rating_upper_bound > 100.0)         begin             set @f_rating_lower_bound = @f_rating_lower_bound - (@f_rating_upper_bound - 100.0)             set @f_rating_upper_bound = 100.0         end         set @i_rowcount = (select count(*)             FROM t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)             WHERE                 (s.ti_is_available = 1)                 AND (s.att_0x0000800A = @param_0x0000800A)                 AND (s.att_0x0000800B = @param_0x0000800B)                 AND (s.att_0x50008104 <= @f_rating_upper_bound)                 AND (s.att_0x50008104 >= @f_rating_lower_bound)                 AND (s.att_0x10008101 != @param_0x10008101)                 AND (s.i_public_available >= @si_required_slots)                 AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)         )         set @i = @i + 1     end     set @i_upper_hash_bound1 = 10000     set @i_lower_hash_bound1 = 0     set @i_upper_hash_bound2 = 0     set @i_lower_hash_bound2 = 0     set @i_hash_count = 10000     if (@i_rowcount > 1000)     begin         set @i_hash_count = (1000 * 10000)/@i_rowcount         set @i_lower_hash_bound1 = (RAND() * 10000)         set @i_upper_hash_bound1 = @i_lower_hash_bound1 + @i_hash_count         if (@i_upper_hash_bound1 > 10000)         begin             set @i_upper_hash_bound2 = @i_upper_hash_bound1 - 10000             set @i_upper_hash_bound1 = 10000         end     end     select         -57341 as i_title_id,         0 as i_query_id,         @param_0x0000800A as i_game_type,         @param_0x0000800B as i_game_mode,         @param_0x50008104 as f_gamer_rating,         @param_0x10008101 as f_gamer_zone,         (5 + @i) as i_iterations,         @i_rowcount as i_rowcount,         @f_rating_range as f_rating_range,         @f_rating_upper_bound as f_rating_upper_bound,         @f_rating_lower_bound as f_rating_lower_bound,         @i_lower_hash_bound1 as i_lower_hash_bound1,         @i_upper_hash_bound1 as i_upper_hash_bound1,         @i_lower_hash_bound2 as i_lower_hash_bound2,         @i_upper_hash_bound2 as i_upper_hash_bound2     set rowcount @i_results_needed     select         s.bi_session_id        ,s.b_host_address        ,s.b_key_exchange_key        ,s.i_public_available        ,s.i_private_available        ,s.i_public_current        ,s.i_private_current        ,s.att_0x0000800A        ,s.att_0x0000800B        ,s.att_0x10000001            ,s.att_0x10008101     FROM t_match_sessions_0xFFFF2003_standard s WITH (NOLOCK)     WHERE         (s.ti_is_available = 1)         AND (s.att_0x0000800A= @param_0x0000800A)         AND (s.att_0x0000800B= @param_0x0000800B)         AND (s.att_0x50008104 <= @f_rating_upper_bound)         AND (s.att_0x50008104 >= @f_rating_lower_bound)         AND (s.att_0x10008101 != @param_0x10008101)         AND ((s.i_hash >= @i_lower_hash_bound1 AND s.i_hash < @i_upper_hash_bound1)             OR (s.i_hash >= @i_lower_hash_bound2 AND s.i_hash < @i_upper_hash_bound2))         AND (s.i_public_available >= @si_required_slots)         AND (s.i_ip_addr = @i_client_ip OR s.ti_nat_type + @ti_nat_type < 5)     ORDER BY         CASE              WHEN (s.att_0x10008103 = @param_0x10008103 and s.att_0x10008102 = @param_0x10008103) THEN 3             WHEN (s.att_0x10008103 = @param_0x10008103) THEN 2             WHEN (s.att_0x10008102 = @param_0x10008102) THEN 1             ELSE 0         END        ,att_0x10000001 ASC        ,ABS(att_0x50008104 - @param_0x50008104) ASC     set rowcount 0 The general approach of the standard query is similar to the ranked query. The differences are: instead of using mu to reduce the number of rows we need to sort, the gamer rating is used the process is repeated twice, once to find sessions in the same gamer zone, and once to find session in different gamer zones if enough session were found from the first query to satisfy the front door, the second query is skipped. because the front door may reject some returned sessions as duplicates or because they have negative affiliations, the stored proc calculates the number of rows to return as max_results + # of negative sessions, as passed in the @i_negative_sessions parameter, and uses the  set rowcount  feature to limit the number of rows returned instead of the  select top  syntax the order by clause first returns all the sessions that match both country and language, then sessions that match language only, then sessions that match country only, and finally sessions that match neither country nor language. within each subgroup defined by the country/language sort, title defined sort operations are applied, followed by sorting by how close the host s rating is to the client s rating. Title Defined Query Filters Each Filter element in the xlast file has the following structure:   <Filter left="0x30000006" leftType="Parameter" op="&gt;" right="0x30000006" rightType="Attribute"/> Each Filter element corresponds to a condition in the WHERE clause of the SELECT statement in the query, that restricits (i.e. filters) the rows returned by the query. The basic structure of the condition is: left_side op right_side For example: att_0x30000006 > @param_0x30000006 The left side may only be a schema attribute. The right side may be a type compatible parameter, constant, or context value. Title defined attributes and parameters are always allowed to be NULL. A NULL parameter is considered a wildcard. SQL server, however, does not consider NULL to be a wildcard, but is simply an absence of value. Therefore, to implement the wildcard functionality, the following syntax is used: s.att_0x10000001 == @param_0x10000001 OR @param_0x10000001 IS NULL If the left side of the comparison identifies a context, the the   attribute may only be one of == or !=. If it is a property, then it can be any of ==, !=, <, >, <=, >= (note that < and > are escapted as &gt; and &lt; in xml). If the left side of the comparison is an Attribute that is a Property, the right side of the comparison may be a Parameter that is a type compatible Property, or a type compatible Constant. Properties of type Int32, Int64, Float32, Float64 are all considered type compatible with each other, because they can be compared by SQL using the operators identified above. Datetimes Properties are only compatible with Datetime Attributes or Datetime Constants. Constants that can be compared to Property values are defined in the xlast file in the Constants element: <Constants clsid="{9DEE98C4-441C-4103-861B-464DF03B36B1}" nextId="1">  <Constant name="MyConstInt32" id="0x15000000" value="1"/> </Constants> This defines an Constant with id=0x15000000 of type Int32 with a value of 1. Note that, as with properties, the first nibble defines the datatype. The second nibble of a Constant will always be   to identify this id as a Constant. If the left side of the comparison is an Attribute that is a Context, then the right side of the comparison may be a Parameter  that is the same Context, or may be one of the literal ContextValues of that context. A Context is an enumeration which defines the full set of allowed values, which are assigned numerical values by xlast, and result in elements like this: <Context clsid="{7F343825-DBB8-4BC0-ACF2-533263622341}" stringId="25" defaultValue="0" friendlyName="MyContext" id="0x00000002">  <ContextValue friendlyName="MyContext0" value="0" stringId="26"/>  <ContextValue friendlyName="MyContext1" value="1" stringId="33"/> </Context> Sort Operations The Sort Operations in the xlast file have the following basic structure: <SortOperations>   <SortOperation id="0x70000007" type="Descending" distanceid="0xFFFFFFFF" ordinal="0"/>   <SortOperation id="0x50000003" type="Near" distanceid="0x52000003" ordinal="1"/>  </SortOperations> The Sort Operations correspond to an Order By clause on the Select statement that implements the query. For example, the Sort Operations above would translate to the following Order By clause on the select statement: ORDER BY att_0x70000007 DESC          ,ABS( att_0x50000003 - @param_0x52000003 ) ASC The id in the SortOperation element identifies the Schema Attribute that to Order By. The sort can be one of four types: Ascending, Descending, Near, Far. Ascending and Descending are straightforward, and result in an Order By condition that looks like this: att_0x50000003 ASC Or this: att_0x50000003 DESC The Near and Far are more complicated. They allow you subtract the value of a parameter from an attribute, and then sort on the difference, either ascending or descending. Near corresponds to an Ascending sort, because the difference will be small when the attribute is   the parameter in value. Far corresponds to a Descending sort, because the difference will be large when the attribute is   from the parameter in value. The distanceid parameter indicates which parameter id to subtract from the attribute id, and may be any type compatible Property Parameter. Context cannot be used in Sort Operations. The sort operations are applied to the Order By clause in ascending order by their ordinal values in the xlast file. The precedence between title defined sort operations and system defined sorts is described in the standard and ranked query descriptions above. Proximity LiveMatch.exe Xbox 1 Code Generation Microsoft Confidential. qjqf_f gdtDL jrt8F j$x8F jms8F jer8F jY}8F jC}8F gcgcg_g_g_g_g_g gd=Y< gd{/[ gdiB> gdiB> gd{/[ gd(JG gd(JG gd]`n gd(JG gd{/[ gd]`n gdI6w gdKEL  Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\match\Xenon Matchmaking Enhancements.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xenon Matchmaking Enhancements Title _PID_HLINKS Document Description Type of Document Status Date Created Feature Spec Template Feature Spec solid 2004-04-16T00:00:00ZXenon Matchmaking Enhancements Mason Boswell Xbox Live Feature Spec Template.dot Peter Hansen Microsoft Office Word<?xml version="1.0"?><XrML version="1.2" xmlns=""><BODY type="Microsoft Rights Label" version="3.0"><ISSUEDTIME>2004-12-03T17:14</ISSUEDTIME><DESCRIPTOR><OBJECT><ID type="MS-GUID">{67028D1F-E960-40B1-8E2D-3845947B3E98}</ID><NAME>LCID 1033:NAME Do Not Distribute:DESCRIPTION Permission is currently restricted. Only specified users can access this content.; </NAME></OBJECT></DESCRIPTOR><ISSUER><OBJECT type="Group-Identity"><ID type="Windows">S-1-5-21-2127521184-1604012920-1887927527-30086</ID><NAME>phansen@microsoft.com</NAME></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">A8F364qaoKqNiLkQE6Um+OFkvP+97RwhdYuXKL1yi3XwXtc/MGsbaIsy9shjQ5FG2I9v5IzSVC3nYAprKllg+j8vuTyFxCFQqdJtOvLwbugt+dIg1mxRWRt6GZbR5irguB0bcGmX8VuDKnBSNdpymgmTukjHF3WIAIUecpkqCKY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="SDK" value="3.0.3281.0" /></ISSUER><DISTRIBUTIONPOINT><OBJECT type="License-Acquisition-URL"><ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights/_wmcs/licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><DISTRIBUTIONPOINT><OBJECT type="Extranet-License-Acquisition-URL"><ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs/Licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><ISSUEDPRINCIPALS><PRINCIPAL internal-id="1"><OBJECT type="MS-DRM-Server"><ID type="MS-GUID">{aaa331f3-e659-4ea9-876b-e8b25c7b4996}</ID><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs</ADDRESS></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">oxyxbUguymFHLhu80EH9m62c2XLFXbjm87KlEbSFQkieurr8RZgvtEMWdg6jMAkLJ7xPnWs3hEjOHw99irwZ1g5Z+6yYgktWlKibmPs5Lpamd6v53R40fKES/HNWdjbc68xN9tyfts4pOfyJxT5Xgo0rHVset+rDgShE9B3JQbY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="Server-Version" value="1.0.3012.0" /><SECURITYLEVEL name="Server-SKU" value="12345-123-0000007-18968" /><ENABLINGBITS type="sealed-key"><VALUE encoding="base64" size="1536">fpmbRulrsyGSIgwxTGCDnq6bNart7U2OgEyZ6Wc1/DtTSG3Rc0wZuP+4Dofrz6pXPeXJAzx0sCUgMvfOoofs122/rVyNp6eHQz5NHidpe4VSGVmC01/5cRMih6GHQ1s2k1BrxgZ4UCgAKeebrk+uIIEQ/UGAcFqkAItaps10JSyCJ4M3jA4kqA0N8Ljbg4oOMmN8x8ar9G5RWJYrIvs/3XalWXVYoEpRTW/XPlG48dPX7QxAbDoyMerpjQkO5g9C</VALUE></ENABLINGBITS></PRINCIPAL></ISSUEDPRINCIPALS><DISTRIBUTIONPOINT><OBJECT type="Referral-Info"><ID type="MS-GUID">{81C42010-208A-458A-BAB6-C3C60F06DD5F}</ID><NAME>Author</NAME><ADDRESS type="URL">mailto:phansen@microsoft.com</ADDRESS></OBJECT></DISTRIBUTIONPOINT><WORK><OBJECT type="Microsoft Office Document"><ID type="MS-GUID">{5A17A03A-D75E-4A36-8C3B-1B9238BFAFFF}</ID><NAME>Microsoft Office Document</NAME></OBJECT><METADATA><OWNER><OBJECT><ID type="Windows" /><NAME>phansen@microsoft.com</NAME></OBJECT></OWNER></METADATA></WORK><AUTHENTICATEDDATA id="Encrypted-Rights-Data"></AUTHENTICATEDDATA><POLICYLIST type="exclusion"><POLICY><OBJECT><ID type="filename">winword.exe</ID><VERSIONSPAN min="0.0.0.0" max="11.0.4919.0" /></OBJECT></POLICY></POLICYLIST></BODY><SIGNATURE><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><DIGEST><ALGORITHM>SHA1</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="160">6Z18ZqBVy+nJmgFPPEtLsUfgwxU=</VALUE></DIGEST><VALUE encoding="base64" size="1024">ZohLUR3VLRknfA1WNiFhAKBCnXQHAxFNoddiw0mF23mhj2B2pOu8kUxmE43N1KCre/LlhMB4D46s999ZPe6K6RDkBcTvhv18sphANvH3qh4pb5MRAFUamuRPgVTHy8uRNxHngjgYkpeapalSRvuk4pfKbvrnSiHnf6Qw8V3VTsM=</VALUE></SIGNATURE></XrML><XrML xmlns="" version="1.2"><BODY type="LICENSE" version="3.0"><ISSUEDTIME>2004-11-05T00:52</ISSUEDTIME><DESCRIPTOR><OBJECT type="Client-Licensor-Certificate"><ID type="MS-GUID">{dbcf103c-dd15-4bf4-b91f-6696be6f7d4c}</ID></OBJECT></DESCRIPTOR><ISSUER><OBJECT type="MS-DRM-Server"><ID type="MS-GUID">{aaa331f3-e659-4ea9-876b-e8b25c7b4996}</ID><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs</ADDRESS></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">oxyxbUguymFHLhu80EH9m62c2XLFXbjm87KlEbSFQkieurr8RZgvtEMWdg6jMAkLJ7xPnWs3hEjOHw99irwZ1g5Z+6yYgktWlKibmPs5Lpamd6v53R40fKES/HNWdjbc68xN9tyfts4pOfyJxT5Xgo0rHVset+rDgShE9B3JQbY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="Server-Version" value="1.0.3012.0" /><SECURITYLEVEL name="Server-SKU" value="12345-123-0000007-18968" /></ISSUER><DISTRIBUTIONPOINT><OBJECT type="License-Acquisition-URL"><ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights/_wmcs/licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><DISTRIBUTIONPOINT><OBJECT type="Extranet-License-Acquisition-URL"><ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs/Licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><ISSUEDPRINCIPALS><PRINCIPAL internal-id="1"><OBJECT type="Group-Identity"><ID type="Windows">S-1-5-21-2127521184-1604012920-1887927527-30086</ID><NAME>phansen@microsoft.com</NAME></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">A8F364qaoKqNiLkQE6Um+OFkvP+97RwhdYuXKL1yi3XwXtc/MGsbaIsy9shjQ5FG2I9v5IzSVC3nYAprKllg+j8vuTyFxCFQqdJtOvLwbugt+dIg1mxRWRt6GZbR5irguB0bcGmX8VuDKnBSNdpymgmTukjHF3WIAIUecpkqCKY=</VALUE></PARAMETER></PUBLICKEY></PRINCIPAL></ISSUEDPRINCIPALS><WORK><OBJECT type="Client-Licensor-Certificate"><ID type="MS-GUID">{dbcf103c-dd15-4bf4-b91f-6696be6f7d4c}</ID></OBJECT><RIGHTSGROUP name="Main-Rights"><RIGHTSLIST><RIGHT name="ISSUE"><CONDITIONLIST><TIME><RANGETIME><FROM>2004-10-31T00:53</FROM><UNTIL>2005-11-01T00:53</UNTIL></RANGETIME></TIME><ACCESS><PRINCIPAL internal-id="1"><ENABLINGBITS type="sealed-key"><VALUE encoding="base64" size="6144">14qc8XCLqpdyfqqadA48nWNRzUBhGtRuoH9aYkFGzPCeFnmG+/rYsrk7PuBQLeMxG0ezY68WkL+QSw8Bgs3G5LZN5x/8e1d8soZWz9SB3K+fnsD3KgqLKSW7Yi4Naan9K3GjPyDI4mFEuyLVSQnZZeGv3wQeFhXNQk++Z0wNrr0J6ufsb+5LnVNTXA80cMUuxm6U5uNEx5zwSJYwJ0awDDF7X0x32O07MbK9gdOdeJnjtyFdzfhHGXGReGNhidJTrrjaH6iugfWt//CXbnD5/e4VxXZEXla707Ua/m0i6CuNI1t5gpYjvSHYuFbthwkvBpjT1id1hO9JkPNYMIPN2vwaORlsXB+cx+wIQmKgeF2Cg4+kb+awFnoeDgstvUa3dsoyBCo4Y7lrhm601HqUUdImlsjI55tUZDIl1MGdaOIfaJecSmJzPBEBW+o3d/j7gm7ax3y6CeIoy/eQ4yddXwsSqcnO5Z+aK+4WP6iT9nBz26E2hrkgbpBA1HNh6EjXxMfp6eM2nlwnLCOlABRyWCdilwzZdaOI1lc6fqfQjKz/WtgnXsVQ4a4ZuU8sB66r1xeTmfKn0sNL0ZWaBl42rdYQJ2RqkyjtFBsE/3CqIpTphsfNjO4N/E2IzYU1nJ18bwZ9cmx7wk0gV+i23MUKDLYlqEH9Mv5JY5sTsBoGTwBD1wN/o7ADG/0EKou+YXeZ7xER9bz1v4u0FtAnhvOfZzLbefpQ2Js3Dx0qRAhwpSZdtRa8/A97uo3VoASEGGj0qVfXO8ivlLZYNODdDtlGl2JdFP2LY4mc7pHcjOmnTw12rk3nlA/HDjCXNLKKis3SKXe0EbfpO7ubPhOoJHVOylreNwJisSAfcGzXlGC9/GGtJBgq3FJQJUBaFiEaq2YEOLF05EJoiA8uuwopMIoVafZdEcHFrm9+RqzObymBZqCXL1hlVI4GNkx4CpmBpfHbhmoSA05Qp/anIyKQs05cPGehwG8VUJ/SFPRPduoSVjnpcx4aAFfF8QgP+kZVPqgQ</VALUE></ENABLINGBITS></PRINCIPAL></ACCESS></CONDITIONLIST></RIGHT></RIGHTSLIST></RIGHTSGROUP></WORK></BODY><SIGNATURE><DIGEST><ALGORITHM>SHA1</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="160">OcMdI3NeTILky5FZpeHUc/Ri9Pw=</VALUE></DIGEST><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><VALUE encoding="base64" size="1024">Sy2Ps2++TbDA+D1J+v1RRx8Ti/Xn3pLkVyO/wtHyD5nDcMxaSyDUcMahMTE84bbGnv95BIX6WCXxIGlw+0Y5oq4IfJy6mIGJJYYHVyBzkKBp6J+UXX2643TOJZeL6ABEoI4xANCZfseurXWOyaUzoh82MTulk8PoYaemzpTgg0k=</VALUE></SIGNATURE></XrML>VwBpAG4AZABvAHcAcwA6AHAAaABhAG4AcwBlAG4AQABtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAA==h <?xml version="1.0"?><CERTIFICATECHAIN><CERTIFICATE></CERTIFICATE><CERTIFICATE></CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAA0AC0AMAAxAC0AMgAyAFQAMAA3ADoANAA1ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABEAEUAUwBDAFIASQBQAFQATwBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAOAA0ADIANgAwADgAMwA2AC0AOQA4AGMAYgAtADQAZgAyADMALQBiAGYAZQA5AC0ANgA0ADUAZgAzADAAZgBmADYAOQAyADAAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APAAvAEQARQBTAEMAUgBJAFAAVABPAFIAPgA8AEkAUwBTAFUARQBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA2AGYAZQBlADEAOQAyADAALQBlADEAOAA5AC0ANAA2AGYANQAtAGEAYQA4AGEALQA3AGQANgBjADEAYwBiAGYANABhADgAMQB9ADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAUwBlAHIAdgBpAGMAZQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AcQBWADEAMABJAG0AQQB1AGcAYgAyAHkAbABMADcAZAB3AHAAMQB2AHAATABhAEEATgBnAGkAbQBDAEoASwBpAEwAKwBSAG4ASwBnAFMAbwBlAHcAeABsAFQAVABZAGEAaAA3AEUAVQBDADkAOAB5AEoAKwAyAFkASwA2ADEAagBYAEQAVgB4AEcAMgB3AGQAawBEAEkAagB5AEEAcgBoAHEAaQBZAEgAVABZAFUAbQB6AFEARwBTADYAMgB1AG8AMwB2AEEALwBVAFkAVwBrAFMAbwB2AFUAWABCAFcAUgBQAFQAMwAvAGYAZQBRADUAcQBRAC8AMABoAEkAaQB4AE4AMwBVADQAUQBqAEcATwBzAE8AcwBnAGkAawA3ADkAUwA4ADIASQArACsANgAwAFkAQgA1AHoAVgBIAFoAMQBJAGEARABXAHcAdgBEAC8AOABiADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APABTAEUAQwBVAFIASQBUAFkATABFAFYARQBMACAAbgBhAG0AZQA9ACIAQwBlAHIAdABpAGYAaQBjAGEAdABlACAAUAByAGEAYwB0AGkAYwBlACAAUwB0AGEAdABlAG0AZQBuAHQAIgAgAHYAYQBsAHUAZQA9ACIAaAB0AHQAcAA6AC8ALwBnAG8ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZgB3AGwAaQBuAGsALwA/AGwAaQBuAGsAaQBkAD0AMQAxADkANAA0ACIAIAAvAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewBhAGEAYQAzADMAMQBmADMALQBlADYANQA5AC0ANABlAGEAOQAtADgANwA2AGIALQBlADgAYgAyADUAYwA3AGIANAA5ADkANgB9ADwALwBJAEQAPgA8AEEARABEAFIARQBTAFMAIAB0AHkAcABlAD0AIgBVAFIATAAiAD4AaAB0AHQAcABzADoALwAvAGMAbwByAHAAcgBpAGcAaAB0AHMALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AXwB3AG0AYwBzADwALwBBAEQARABSAEUAUwBTAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgBvAHgAeQB4AGIAVQBnAHUAeQBtAEYASABMAGgAdQA4ADAARQBIADkAbQA2ADIAYwAyAFgATABGAFgAYgBqAG0AOAA3AEsAbABFAGIAUwBGAFEAawBpAGUAdQByAHIAOABSAFoAZwB2AHQARQBNAFcAZABnADYAagBNAEEAawBMAEoANwB4AFAAbgBXAHMAMwBoAEUAagBPAEgAdwA5ADkAaQByAHcAWgAxAGcANQBaACsANgB5AFkAZwBrAHQAVwBsAEsAaQBiAG0AUABzADUATABwAGEAbQBkADYAdgA1ADMAUgA0ADAAZgBLAEUAUwAvAEgATgBXAGQAagBiAGMANgA4AHgATgA5AHQAeQBmAHQAcwA0AHAATwBmAHkASgB4AFQANQBYAGcAbwAwAHIASABWAHMAZQB0ACsAcgBEAGcAUwBoAEUAOQBCADMASgBRAGIAWQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AFMARQBDAFUAUgBJAFQAWQBMAEUAVgBFAEwAIABuAGEAbQBlAD0AIgBTAGUAcgB2AGUAcgAtAFYAZQByAHMAaQBvAG4AIgAgAHYAYQBsAHUAZQA9ACIAMQAuADAALgAzADAAMQAyAC4AMAAiACAALwA+ADwAUwBFAEMAVQBSAEkAVABZAEwARQBWAEUATAAgAG4AYQBtAGUAPQAiAFMAZQByAHYAZQByAC0AUwBLAFUAIgAgAHYAYQBsAHUAZQA9ACIAMQAyADMANAA1AC0AMQAyADMALQAwADAAMAAwADAAMAA3AC0AMQA4ADkANgA4ACIAIAAvAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIAUwBlAHIAdgBlAHIALQBMAGkAYwBlAG4AcwBvAHIALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA4ADQAMgA2ADAAOAAzADYALQA5ADgAYwBiAC0ANABmADIAMwAtAGIAZgBlADkALQA2ADQANQBmADMAMABmAGYANgA5ADIAMAB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAzAC0AMAAyAC0AMAA1AFQAMAAwADoAMAAwADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA1AC0AMAAxAC0AMgAxAFQAMAA3ADoANAA1ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgBLAGcAUwAzAHIAdAA5AHMAZwBrAEIAVQB2AHMAQgBwAHMAQgBRAGMASgBvAGoAZAAwAFoAOAA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgB0AFoAOQA2ADYASwB5AC8AbAA3ADMAaABNAEIAUABQAGoAegAyAHAAeABpAEIAMwBxADQAYgBUAGQANQBVAEsASQBmAEcAWAB0AGIAYwA5AHIAbQBkAG8ARQA1AE0AOABCAHcAQgArAG0AWABxAEcAeAArADAARQBQAHoAOABTAEMAcwBJAHIAaQA1AFoAbAA0ADgANwBMAFMAZwAwAGEAagBZAGwAMgBDAGIAQwB0AFAAYwB3AEoAQQBkADYANQBUAEwARwA4AHEAeQBtAFQAegBTAEkASgBLACsAbABSAEIAZwAzAEIAUgA0AE0AbQA0AFUAdwB4AGsATQBjACsATQBJAGsAUwBKADMAZgBWAGkAagBtAEQAbQBNAE0AYwBBAHIATABOAHQAZQBKAFMALwBNAFEAZwBsAG8ANABXAEEAWABVAHkATQBlADcAOQA2AHAAVQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA5AFQAMgAxADoAMQAzADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADkAVAAyADEAOgAxADMAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAwADkALQAxADIALQAwADcAVAAyADEAOgAxADMAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBTAGUAcgB2AGUAcgAtAEwAaQBjAGUAbgBzAG8AcgAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGEANQA3ADIAYgBhADkANwAtADEAZABiADAALQA0ADcAMQBiAC0AOAA0ADkANQAtADQAYwBhADEAYQA2AGQAMwBkADcANgA4AH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABTAGUAcgB2AGUAcgAgAEUAbgByAG8AbABsAG0AZQBuAHQAIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AFAAUQAzAFoARABoAEcAeQB4AE8AVABsADYATAA5ADMAKwBCAGoAdQB0AGsATQBZAHYAQQBnAGYAMgAwAEkAbgBXAGEAYgByAHIARQByAEwAVwBCAE4AagBqAEMAVQBrAFEAUABBAEMAQgBOADcARwAvAGsAawB5AGIAQgBZAHcAOABTAEgAdAA4AEoAUwBXAHcAUgB5AGEAbABYAFIARQBoAG8AQwBCACsANAA1AEMAMQA0AGIAKwA1AEMAQgBPAGoAaAA2AG0AegBMAEcAZgAwAHIARwBXAFgAMgBaAE8ATwBaADQAWQBCAE0ASABTAFcAeQBoAG4AKwBCAGQAUgAzAHgAdwA5AGEANQBDAFkAQgB1AFMAQQBBAG0AaQBhAEcASwBGAFAAVgA3ADAATAAvAHYAWgAyAEYAeQBUAFkAZABlADYASQBqACsATwBqADYAWgBrAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBJAFMAUwBVAEUAUgA+ADwASQBTAFMAVQBFAEQAUABSAEkATgBDAEkAUABBAEwAUwA+ADwAUABSAEkATgBDAEkAUABBAEwAIABpAG4AdABlAHIAbgBhAGwALQBpAGQAPQAiADEAIgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBNAFMALQBEAFIATQAtAFMAZQByAHYAZQByACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsANgBmAGUAZQAxADkAMgAwAC0AZQAxADgAOQAtADQANgBmADUALQBhAGEAOABhAC0ANwBkADYAYwAxAGMAYgBmADQAYQA4ADEAfQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAFMAZQByAHYAaQBjAGUAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AHEAVgAxADAASQBtAEEAdQBnAGIAMgB5AGwATAA3AGQAdwBwADEAdgBwAEwAYQBBAE4AZwBpAG0AQwBKAEsAaQBMACsAUgBuAEsAZwBTAG8AZQB3AHgAbABUAFQAWQBhAGgANwBFAFUAQwA5ADgAeQBKACsAMgBZAEsANgAxAGoAWABEAFYAeABHADIAdwBkAGsARABJAGoAeQBBAHIAaABxAGkAWQBIAFQAWQBVAG0AegBRAEcAUwA2ADIAdQBvADMAdgBBAC8AVQBZAFcAawBTAG8AdgBVAFgAQgBXAFIAUABUADMALwBmAGUAUQA1AHEAUQAvADAAaABJAGkAeABOADMAVQA0AFEAagBHAE8AcwBPAHMAZwBpAGsANwA5AFMAOAAyAEkAKwArADYAMABZAEIANQB6AFYASABaADEASQBhAEQAVwB3AHYARAAvADgAYgAwAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYQA1ADcAMgBiAGEAOQA3AC0AMQBkAGIAMAAtADQANwAxAGIALQA4ADQAOQA1AC0ANABjAGEAMQBhADYAZAAzAGQANwA2ADgAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAAOQBUADIAMQA6ADEAMwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANAAtADEAMgAtADAAOABUADIAMQA6ADEAMwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AZwAzAFAAVwBGADUAVgBkAEoAZQBvAFQAVAA0AHoAcAB0AHIAcQBiAGkAaAAwAGEAbgBwADgAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4ASwAvAGEAWABpAFAAegBUAEgAZQBaAFMASgB5AEMASQBDAHcAOQAyADEATABSAHEAeABBADcAOQBxAEUAZgBvAFgAeQBBAFgAcQArAHQAbgA4AEQAbgArAGEAMQA2AFMAagA0AFAAVwB3AFoASgBRADkAcwBNAEEAQQBvAHAARQBPAEUASwBsAE4AWAA2AEkATgBzAEEAQQBXADEAMAB6AGsATQBDAGkAeAAyAFUAQgBsAEwASgBDADMAVwBUAHAAdwBoAHMAbABUAEYANgBSAG0ASwBIAGgAUgBYAHIAcQBuAGkAVABVAGsAdgBQAEQALwBxAGoAdwBUAGoAZQBWAEgAOQBKADUAcwBXAFEAdwBsAHgANABrAEsAawBIAFUAaQBFAHoAZQBlAFIANwBPAEkATABrAEUAMAB2AGgAdQBUAHIAVQA1AGQAZwA4ADYAbQB1AFkAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFMASQBHAE4AQQBUAFUAUgBFAD4APAAvAFgAcgBNAEwAPgA=</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAyADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAyADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADQAMAA4ADQAOQAzADAAZQAtAGQAZgA0AGEALQA0ADEAZQA4AC0AOQAwADEAMQAtADYAZgAyAGUANgBjAGIAZgBlADQAOABlAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADIAMAA0ADgAIgA+AE4AUQByAFkAUwBBAGMANAAzAFYANwBOAFIAVABXADgAVgBUADUARQAyAFgAaABNAGMAdwBtAG0ATwBOADcAVABrAFEANwBFAFQAVQBJAFcARwBxAGwAUABUAHYARgBTAHcANwA5ADgAZwBGAGcASQBYAEIAYwBGAE0AdABDAGQASQB5AGYAMwBWAE0ATwA1AFkARwBPAEsASgBEADEAdwBuAGMAMgB5AGQAbABvAHoAZgAxADYAVgBIAEYANQBVAHIARgBnAHQAawBUAC8AOQB1AEsANwB1AFIAcwBoAGoAeQBIADUAMQA2AEgALwBjAEMASwBKAHkASQB5AFAAYQBZAEUAawBXACsAcABJADcAeAA4ACsAYwBmAGcAVgBjAFUAWABaAC8AbwBDAHIARgBIAGQAdQBlAFgATABTADQAYwBlAC8AbgBhAGwAcwA0ADUAcQB4ADUAcQBxAGMAZABNADcAWQAwADgAbwA1AGEAMQBrAFgALwB5AG8AaQBQAEwAYgBvADkAbQBLAFMALwBOAGwAegBFAGYAYwBSAHYAUgBOAGkAQQBDADYAVwBxAGwASQB2ADgATQBnAE4AeABwAEEAbQBVADcARgBSAFUASABUAFAAYwBrAC8AZwBPADkAWAAwAGEAZgBoADcAVgBrAHcAUgBxADMAMwBUAGoAcgBDAFMAKwBVAGkAZABvAHgAdwBPAEkAMgBFADAARABLAE0AbQB0AGcAVQBNAEEAMgB1ADAANABPAC8AZgBnAFIAMABMAGUAVQByAHUAVABZAFkAagArAFEAegAyAEkASQA4ADIAcQBjAHoANwArAGYAZQB0AEUAZABVAHMAdgBLAEsAYQAxAFoAQgBLADgARgBuAG0AdwAxAEIARgBQAGUAbwB5AFgAOQBnAD0APQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlAC0AQQB1AHQAaABvAHIAaQB0AHkAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIAYQBzAGMAaQBpAC0AdABhAGcAIgA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAQwBBADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AUABRADMAWgBEAGgARwB5AHgATwBUAGwANgBMADkAMwArAEIAagB1AHQAawBNAFkAdgBBAGcAZgAyADAASQBuAFcAYQBiAHIAcgBFAHIATABXAEIATgBqAGoAQwBVAGsAUQBQAEEAQwBCAE4ANwBHAC8AawBrAHkAYgBCAFkAdwA4AFMASAB0ADgASgBTAFcAdwBSAHkAYQBsAFgAUgBFAGgAbwBDAEIAKwA0ADUAQwAxADQAYgArADUAQwBCAE8AagBoADYAbQB6AEwARwBmADAAcgBHAFcAWAAyAFoATwBPAFoANABZAEIATQBIAFMAVwB5AGgAbgArAEIAZABSADMAeAB3ADkAYQA1AEMAWQBCAHUAUwBBAEEAbQBpAGEARwBLAEYAUABWADcAMABMAC8AdgBaADIARgB5AFQAWQBkAGUANgBJAGoAKwBPAGoANgBaAGsAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAEEALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA0ADAAOAA0ADkAMwAwAGUALQBkAGYANABhAC0ANAAxAGUAOAAtADkAMAAxADEALQA2AGYAMgBlADYAYwBiAGYAZQA0ADgAZQB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA5AC0AMQAyAC0AMAAzAFQAMAAxADoAMgA3ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgByAHEAVABNAHAAZQBXADAAOQBrAE4AWQBBAEQAdgBQADcAaABZAFoAWQB0AGgAQwBjAEwAbwA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgB4AFgAWgBMAHEAZAA3AGUAVQBhAEgATgBKAHMAVwA3AG0AcgArAFQAZwBnACsANgBIAGkAdABGAEEAawBPAHIAQQBzAFkAMwBMAEgAMQBwAEwAWgAvAFkAMwByACsASgAyAHoANgBSAC8AcwBlADAANgBaAFYAVQBRAGgAegAyADUARgBHAFMAawBiAFIAdgA5ADQAWABDAGEAegArAEEAbwBXADAARQBaADIAZABnADEAZgBBAHkAbABtAFEAZABJAEEAQgBqAHEANgBJAG0AOABCAGkAOQBvAEYANgA3AG4AVwA4AEQAQgBjAGoAcgBiAGkAMgA1AFcATwBEAEgAVABlAHMAZQBBAFAAUwA2AGMATwBxAGkARwBzAFYAdgBZAFMASwBQAE4AawA1AE8AKwB0AGMAQwBLADUARQBQAHIAVgBpADAAcgBQAGIAMQBRAEsAUQAyADQATwBHAE0AZwAzAEwASQAzAHMAVgB3AHkAaQA1ADUAUQBiADEAdwBLAHQAZABaADUAVgBxAGQAWgBKAHYARQBjAGsAWQBFAGkAWQBRADEAZQBmAGEAdQB5AEkAdQBuAG4AbgBmAG4AegA1AEYAWABYAFUAUgBCADcANwBKAG8AUwBxAHQAYQBZAHgAdgB6AHUATgBCADgAKwAwAGkALwBsADAAYQBHAEIAWgBZAFMASQBsADMAawBZAEEAVgBkAGcAegBhAFkAdwBsAHAAVABzAGkAbwBTAHoATwBlAFEAMgB1AEEAbABkAHgAegAvAHoAcAB2AFcARAA3AGsAcABEAHcARQB4AHAAMAA0AGwAZwBYAE8AOQBrAFYAOQAxAEsAQgB2AG8AZABqAFIAUgB1AC8AUABKAEUAZQBMAEMASQA1AGEASQBPAG0AVAAzAG0AUQA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBTAEkARwBOAEEAVABVAFIARQA+ADwALwBYAHIATQBMAD4A</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMAA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAwADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAwADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGIAZgBkAGUAMwAxADcAMQAtADEAYwA4ADMALQA0AGYANwA2AC0AYgA1AGYAOQAtADMANAAyADgANwA3ADQAYQAzADIAOABhAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFIAbwBvAHQAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUgBvAG8AdAA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AWAB5AGwAQwB3AFMAbwBvAHcAMwBNAGQAbgBzAFYAUABrAFQAdAB3AEkAWQA1AHIAawA2ADQANwBiAFMANgA0AE4AZgA3AE0AMgBIAFMAOABrAGwAUgBrADUAYQBoAGgAYwBNAHgAOQBWAE8AbABuAHQAegBxAFgAMwBTAFkAeQBxAHgAbwBYAFEARgBEAFIALwBrAFQAVwBWAFQAcABiAFgAVgBNAHMAUwBZAEwAeABxAHIAKwBXAEQAMQBqAFQAZABIAHMAdgAvAC8ANwA5AFEAdwBIAHQAcgBLAGgATABNAFIANwBqAGMATABjAE0AbgBYAGYAQQBFADMAOQBLAGEAVQBBAFoAZwAzAGQARgBTAEUAdAArAEoAWQBiAFoAYgBvAFMAagBQAGUASgBvADYARAAxAGEAWgBtAGMAWgB2AGwAYQBkAHIASQBxACsASwBwAEIAcQBiAGcASQBFAHEAYQBiAHEAUABBAGcARwA4AC8ASQBiAGgAdABOAGIAbABhAEQAawBUAG8ANwBlAHYAKwBBAHUASQBXAGUAYwA5AEUAagBIAEoAQwBZAGsAMABUAFMAegBKAGYANAAyADMAaQBIAFoAWQBKAFgARABNAHoAMAA4ADEATwBCAHIASwBZACsAagBNAHQAcQBrADgAYQBNAHAAaQBxAHYAYwBYADYAbQB2ADcAbQBUADcASQB3AFkAdwA5AGEARQBrAGwAeAArADMAcABtAEwAcQBCAFkAOAA3AFYAVwB6AGwAeABGAEsAOAA4AGoAbAA1AEMATABIAGIASgBxAHgATAA1AGkAdwBDADMAVgBwAGYAVgB6ADAAVQBhAGwAbgBnADEASwB0AEQAcQBaAG0AYwBaAGQAagB3AFAAYwBRAGMAMwBSAE0AeABsAGcAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AC8ASQBTAFMAVQBFAFIAPgA8AEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUALQBBAHUAdABoAG8AcgBpAHQAeQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBhAHMAYwBpAGkALQB0AGEAZwAiAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAQwBBADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgBOAFEAcgBZAFMAQQBjADQAMwBWADcATgBSAFQAVwA4AFYAVAA1AEUAMgBYAGgATQBjAHcAbQBtAE8ATgA3AFQAawBRADcARQBUAFUASQBXAEcAcQBsAFAAVAB2AEYAUwB3ADcAOQA4AGcARgBnAEkAWABCAGMARgBNAHQAQwBkAEkAeQBmADMAVgBNAE8ANQBZAEcATwBLAEoARAAxAHcAbgBjADIAeQBkAGwAbwB6AGYAMQA2AFYASABGADUAVQByAEYAZwB0AGsAVAAvADkAdQBLADcAdQBSAHMAaABqAHkASAA1ADEANgBIAC8AYwBDAEsASgB5AEkAeQBQAGEAWQBFAGsAVwArAHAASQA3AHgAOAArAGMAZgBnAFYAYwBVAFgAWgAvAG8AQwByAEYASABkAHUAZQBYAEwAUwA0AGMAZQAvAG4AYQBsAHMANAA1AHEAeAA1AHEAcQBjAGQATQA3AFkAMAA4AG8ANQBhADEAawBYAC8AeQBvAGkAUABMAGIAbwA5AG0ASwBTAC8ATgBsAHoARQBmAGMAUgB2AFIATgBpAEEAQwA2AFcAcQBsAEkAdgA4AE0AZwBOAHgAcABBAG0AVQA3AEYAUgBVAEgAVABQAGMAawAvAGcATwA5AFgAMABhAGYAaAA3AFYAawB3AFIAcQAzADMAVABqAHIAQwBTACsAVQBpAGQAbwB4AHcATwBJADIARQAwAEQASwBNAG0AdABnAFUATQBBADIAdQAwADQATwAvAGYAZwBSADAATABlAFUAcgB1AFQAWQBZAGoAKwBRAHoAMgBJAEkAOAAyAHEAYwB6ADcAKwBmAGUAdABFAGQAVQBzAHYASwBLAGEAMQBaAEIASwA4AEYAbgBtAHcAMQBCAEYAUABlAG8AeQBYADkAZwA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBBAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYgBmAGQAZQAzADEANwAxAC0AMQBjADgAMwAtADQAZgA3ADYALQBiADUAZgA5AC0AMwA0ADIAOAA3ADcANABhADMAMgA4AGEAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAANQBUADAAMQA6ADAANwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANwAtADEAMgAtADAANABUADAAMQA6ADAANwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AdwBFAEMAegAvAEYAMgBwADEANQBnAGoAQQA3ADIAegBLAGoARwByAFkAMQBDAEMALwBEADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AawBMAHAANQBnAFoAdQA4AE4AMQBlAGsAWABDAEgAQgBaADkASgBYAEIAZQBHAFMAZABRAFoATABKAGEAMABkAGwAdQBKAHgANgAzAFQATQBkAHEAegB0AEYAQgBUAFMAVQBGAGkAagB0AHAASABJAE4AYQAxAGMANQBhAHcATQAzAE4AbABhAEsATAB2AE4AQQBaAG8AdgA2AE0AUgBEAFYAaQBSAGMAMgBOAEsAdgBwAFkAWQBMAEcAZwA5AEwAaABYAGUAUAAwADUAbQBsAE8AVQByAGwAZwBVAHEAOQAvAG8AaABUAFcASQB0AGsAdAA5AFUAVwA3AGgAWABoAHcANgBGACsAUAAyAFUAbwBHAEsAUwBzAE0AZwBIAHUAYQBmAGgAQwAwAHgAWgBKAEEAdwBOAEEAVQBrAGMAWQB4AEwANwB0ADYAYQBWAEEAeQBWAGgANgBEAE8AaABHAG0AawBzAEwAbQBWAFMAbQBSAEYAQQBzAEkANgBQAGoAMABFADkAWQBaAHQAdgBIAGIARwBOAEsAYQBGAGYAbQBxAC8AdgBGAHcALwBuAEcAYQBFAE8AOABaAHMANABtAHkAaABHAHMAYwBhAGkASABYAEwAWgBiAFUAVQBRAFQANQBCAHYARgBYAGsAawBJAEMATAAxAG4AdgBBAGcAUQB3AC8AYwAyAEUAbgBsADYAeABkAEoATQB2AHAAaABGAHgAKwB4AGsAWABIAHQAegAwAFgARgBtAHYASQBDAGEAYgBOAFoAWQBsAGwANgBvADkATQBDAEwAQQBSAEkAQQBJAFoAMAAwAFoAWQB2AG0AbABZAHUAbwBmAFIAQwBSAFQAawA0AG0ASQBjAFgAawA0AEkAYwA5AFkANwBCAGIARwBDAG8AVwBKAFEAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE></CERTIFICATECHAIN>4nBw9<f DG-4P ON(/! B\7[Ua9 6Lu3/ ('ctXt/u m]9Q2 z-wRP eUUnll #)"4B E\rw{ O{FPb Af^"RFJ %$B4O YuVyL .b|#9:HEO fTR[t} rH4w v CFgY* U3YK]l /v3ZJ S,pRFJ /v3ZJ qK Yp @Xd+* o&:Z+ #xiLq 3uB[Tp {21g] :xp`Ha![ tR<WN [?*Mc *MFbQE ^Aw<T [?*Mc z}>`y9 4=4D^ !4%s  QZM=y [@Y`o GU"8mip X}7PA{ 'u/^lE |/PVsG JT<X( <c4xD d5%TD )ublC =*?8F d#Wx? n@E'v U<*=l+ G>bjO cjPr:3D ?Y]b[ 7_uRQu dJS};a 5KJZ`> _2uBK QauHcy $({^( R-[8- iIRvi Ygmk\ k-aR< ;e n\ ynrG; j:\"! us{Uk RidWYi 3fqK( Ux0Y* vHC?(Q 0$M>pF !]!c|hI }3kAaM vgvqFq UAa8*8# >5:vc vn^~( q7j)S` xs@l' xTt03* sO[>q 2k0bW wt B%M=<K $Ja\`6 B,sZT ST;e) q'?8N @(bO= e.O{1 "*.QOh vcJxVA] }U].9 X`&AFF Nf="; Q8q4\ FP7R^z vp&X) {iY6w #^ST/ YYpTx wa9S<b Q6ID\ d=mZ$} P 2wm A2)^L EF($Tf iq)?{ #=H59+ P-Q?# R7AKYmC(v 4PMq&e>\RQ  kDvv taGx'eXA :\`mx GEEtL LTyb* z dO] E$.\( FD06( iet>h ksw+C1 t'L`g r\>0g[#- x-&BY iet>h BZd.( AB>*g zi$=/ iet>h BZd.( AB>*g =G8G@ iet>h BZd.( AB>*g iet>h BZd.( AB>*g W%H&G |KNBX)+>6t Rc{h] (xKrD <LT<g< JX])>v g=y9y vmXf" "3a0Fh !b$WA {h7%" 7^I>B CgvgP' fk*"N >VBMdS Rd"!T qDLLH <LT<g< 1$}I|]^ yXI4yO /5S)i g=y9y vmXf" )zU0k `PYD"R| =p2g# meQS' 5T6@cq 6ZO4{ -"khJ@ A",X( LR' t ?iDtY<, <LT<g< ^m<.q %8q}/ ph("0 meQS' c@S;- O1gYF pZvyV !b$WA ^Vsu:8 meQS'  >@,> meQS' meQS' ]xA\\}/D4 @#5br meQS' 7&l9G 2MdC"'L meQS' bcLvfY- Rfr-j meQS' meQS' meQS' M'82hTm Cw$8*j7B =54jT ,yxA* !b$WA @m5oN p.{C<  (f?Fx wce%I 'sSo%d ^kQ } x|<9+Y 2`zZkW ?LD]"@ ,/ ur KrZ>` C <OR aX>8p 3x%Jc dk%%z aX>8p hJVkh I4^@) /6.HI V"VXYW 9PVuP` &<uP` l,(xr% VEvXJ bn_W. 'vnQG I4^@) nVDd; 9PVuP` &<uP` l3OTG #<'HcV- x)^/S` VG??i m^DH6G e7K,~ 8h5V0f w&xC3 qmqT/ m^DH6G 0{vP+ ;h.dy 5%@kH VG??i1_ 9Hl&!Pf m^DH6G f:G:UA /Gh8' VG??i gf%&:4 Cw$8*j7B .U!I(t3 Wq5Sp Cw$8*j m^DH6G  dL!w 0P76$ [N0.w@x >D{xz cOsq"8 Cw$8*j7B VG??i MtJ`S IoUI* Cw$8*j m^DH6G ah>H) U$#Et Mduvz ?z[$sn m^DH6G :n,);E yO8J#F ~j,He t~*~q bYEYe`P}oW@ 6nsefsm p?yTZ c8 !8 Y%kN3_ x0w7K2 lgHJI !k6Rphhx~5 *5n6#f 9);!(j sKo-}Z} #6H:A 5,1dd :W/XN 'VB/s zx"lP dIvNE]a %]81%4 Q+}6c %"de7=+ {jhl? QVUfF UJoKC6` ?=@.m lFa,~ {'t8+ .TX&>1 v"s%Zy cV&?D k6:[aVM# |RPcg SN}Xji :>~S\g bFDLQ #'d*v 65kiy zhmSe ,@*)Qt yFMges+ }F<{e (n,j! }, v\t "iLNO 7LT5A ZO?Vo- pM+/n 9=8]# -X%dvZ j7|wcK +,.l]% P3$/h w%G4[;} v}#%%6` i2~Y9}f ]Y*:x j*-%O< :O=/K] KdP=F +p\*x Ww)Gc hez8F D+)lp eR7kr 3+4Y  &S@w  _dxQ6 /rYTa [.nfIGT 8oj<T :ard*v v7Zn^4s Pw8f[V {o("o <z(qC` Dhk2L r>Y61 72,WJ /dl?$Zf g<A$| 9{I19U K_!Rt(X GH;I2 :{duh .X\^&^ {o Oj s<9ooj ?^L>X ^ZwZ" H\\h%# !@RGl 18)B%e s7L0% Fv5}" Gf2<H [!uc]@b ls|0k AB>*g AWS}9 )}vi= AB>*g |KNBX)+>6t JhAn7, cK/m'drY w'3e8 JhAn7, w'3e8 JhAn7, b+QsN Ik*!] w'3e8 JhAn7, D)!/0 w'3e8 JhAn7, f7Yq7LJ w'3e8 JhAn7, w'3e8 JhAn7, w'3e8 {Un<S uKteZ pH`no }tXh. +mSZn u}F-# G%iGV @+em~ |W}CV <_-U= <_-U= e5@hy ^XPDCe *?;;u ^.PGBcc r6U#- wB<GF4, {8+0kW eN.u u =r/J:X tN~ub '9hIK (2U<W X8lE}Q EA@i_ X=;Y$ ~xo;< |x@Vr 9z aG !aI-G Egi1h= Zcb"D b`DS,F Pob7f, y^a'\ C35;b |WG(k ="_5v Qx@67W* p[Njml 5^nr> -+B,o 5^nr> -+B,o 5^nr> Vb?(0 5^nr> Vb?(0 5^nr> Vb?(0 5^nr> TEv>u Vb?(0 }5^nr> dL"qzR 5^nr> Vb?(0 5^nr> Vb?(0 5^nr> -+B,o }5^nr> -+B,o 5^nr> Vb?(0 5^nr> Vb?(0 5^nr> Vb?(0 }5^nr> 5^nr> Vb?(0 w5^nr> Vb?(0 5^nr> Vb?(0 w5^nr> @5p<_ }o0_J- |WEFy ?ORYd e7qEwS e7qEwS e7qEwS VS1aH Da0g< _}ZjC )WHe!wV ]wOZ.+} ,t{G% <Mha6 XM"o1 &xJV` pNl\#  Y76rsk% ,/Wn] zq<E)/ {3f&- Pob7f, TEv>u9v TEv>u9v TEv>u9v quHa_ quHa_ quHa_ h3N7el {&.1o)# ]7q/Bl -|cN+r "62S% Y`k<#f ^J?mRJ E{/cW HG.@3 HG.@3 HG.@3 HG.@3 HG.@3 Hn\z~X ){{E> Q<R4y E{/cW Pm&[d Pm&[d Pm&[d Pm&[d Pm&[d Pm&[d Pm&[d qzj6L'A D%H}[ E{/cW P'{6T H3{/) v8^s{ 5(,th \(\=-V aH\_&  61V5 ^Lz7- 7I:LP+ *ua"C4 0${cL g0zsc{ A'qiG D|YA+ [<\HL 1CqtU <`+#z NHlLn~ -<"(I <3|,a pT`>= }rtNY of_Z{m T)Wrb6 /KO4I /KO4I VRsq7 U@<k[ `rkE$ mtyW0 x_+#@ a*c"G Zlo~D G%|3b [2@-V [2@-V 13\Zz UsI~O *!#~g9 i&n{bBX B+DKK <|4<J 5G5dT m)W   p7eC' 5G5~G 5G5Wk n6z4_ 5G5ug ;LI9L DR_3]e f~R5i 0n|K& 0K/MZ'6WFy '^r{8e O4Mx  KM%a' B)L"X] S<@tx WUn_B YNhWNUK CHl-x MZ'6WFy e"S\5 };-Of^ `5VqI MZ'6WFy Vs~#dy (d3n^ dH>ty G]!'O ;QSp$Y b.B\@n p\m2|U B)L"X] S<@tx c(LEs 9{<Wp 0K/MZ'6WFy '^r{8e rI]?; v)d8eK ud1Gc+ O)q PT O)q PT M*kI_QV K:FAV O)q PT xYRPRi c(LEs E!-=2sF X }]I )k5Z# viQ6g; '<3y  Nek$/U %.A=6 kZSp$Y TGqf7 HWMoa q[u:94 e"S\5 :-[;-Of^ `5VqI MZ'6WFy Vs~#dy ikARgN O4Mx  c(LEs *M??- xYRPRi c(LEs E!-=2sF e"S\5 :-[;-Of^ `5VqI MZ'6WFy Vs~#dy ikARgN 1a"+} Xk$/U $}U#Y + _eT@!=- Nek$/U %.A=6 kZSp$Y TGqf7 B)L"X] S<@tx s>KxM O1'wL!} yk$/U _.k~J $}U#Y + jx><HQ MZ'6WFy e"S\5 ;-Of^ `5VqI MZ'6WFy Vs~#dy O4Mx  c(LEs DR_3]e as CQ 3iQ~` 2p<Ui IMHnf JLr>gt `Net(h }9#g& p[zr#F" E)tLS &*mWP E)tLS _*V}|s p(KgoG9x, R/<8Z %fcCq ib{4uFU ~Hh9a 9@7Ll   (zo OU{J4 s r(o K|2dWM 5Muvm >,QH"Td bQhA!  .Bkt >5&mk +4EQf 1|pH? z6rNo 25LT) Gsd`3 [@{>aj CS1#Rg c'aFvm ON(/!c0{w$ -4-Git fL&#$ {8"URv$ \lBfQ [h4o0 ?@L+zs 7[*Lz >j&2p swe>) 7P=:umP DVoMT9[ @%tC& !NK:C TD\'8T N'i5C+s sh5ek !]~h0In 0]R$$ ~A1.VC F`8jyYX3 ^oJF4AO W3n(0 %PGAXjw@P <=z+' f2&+U W1SN" xs+)Gc 6(z[}; o/8[_ }c0(; tZ]-744;R dS,pi C{d=V?s0 dKt\" yOyXFX 9IHl.L 36&w( "R^Tp g9(<J j%uQ6 aZ&,yIi KkfD:e *}r}U 0Ae5| HAKO=  764l .0^W% >\>I@ F>m]? ?qx9B $pi(J\ ;aA;; B7quO 49Zs4 DIcI! V}/w;E LC"I~ [S:?S !tUJ; wQO8= |{.O5 )4Hds <LF]a lPf6(6 _|h<#my$ _#?UC `7+;^G ,Y[[d" _\W}b S3R_? ?EqC$ =^'k`zS W^G$- IK|so 0uA{9 $`m!J Fj*qT PNr5C U8e_Xs 77/r91 4FX4* /&f,c] U-'QT o!p(n c#Z1O 4]mE$ w8)0G }nB/~ s)r>C b{6H~?T! ^\]#g UEO_+y DDw),1h OR^ur\hL %xCy. )L8zRq I!NoO F'7`hY7 PY%S^3 Fz80Y+q 1+WMS .C'c(' / TM7+P K?z?9/ wSY-IMC7 .wgF' XKWsTC r('2B <:-Se mv ;O 1cd@g qVd1; T2Q#k 3_tX) uiKU2 8EKe5 RVlDb 'N!eW 2L!v`A TZk"[ (}Z1w bO5.P L<rBK XvO+it u4DE["5 NU[1f \$*vw] !%[^"_ )SXm~* ,8F}! KV6~/T V0\!3 ~>^6{ bz~d( =eQk: /mpd; j~jCpf R!g6)h 856'S Lz^LV Y.hMf/& Gh'Yu Wgn:& o,2LS !hkvhSqS 8@t:] N)1SX# ^}p"eG ;$44P c.|I9 9c/\I yu=p+ t['@nk [MZZVi% yz&^u #=&db# MiHTB ql%Z= :?1Ge ^X%uy 0&i6J <Yi5- `gGE3w  [7S1^ c@["v RFIR! k-3#g iQ:JZ  ,;4% 7!G-F PP}zB S\wGW mpO:=F y@*vJ ;~Y^w VG0{] y=#RH6 #W,., x@s=P q@\5+' vl>4&]A `I\E3 n|j_wcX <mdvD)2H 6dR?O l'Jb` ;>F\e VqLF(P CS4hlh 9%^|+ lRYCb ^LL\= :aHi4 !ONt,d a9hv# v9-n.) q+U'5( \(^.K m(Jt= YV[mU SyWQX c"60; zujO`$ T$vBe ~+j1q TrJ|J ]F@[h v%Bkgdg 3ktW! l^:<X (nwDl aK 0{1 uxx~8 3yv-h  bZ9Rj ()4ZM *Q.{fiF2]sFPermission for this document is currently restricted. If you are not running Microsoft Office 2003 or an application that supports documents with restricted permission, you can read this document by downloading the Rights Management Add-on for Internet Explorer. HYPERLINK "http://r.office.microsoft.com/r/rlidRestrictedPermissionViewer?clid=1033" \o "Download the Rights Management Add-on for Internet Explorer" Download the Rights Management Add-on for Internet Explorer HYPERLINK "http://r.office.microsoft.com/r/rlidDRMMoreInfoLicenseReq?clid=1033" \o "Learn more about documents with restricted permission" Learn more about documents with restricted permission U}HSQ $"$,GE(TP VU*[ptP jq7z#J MG5$|
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\match\test\Matchmaking Platform Property Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation TitleMichael Fisher Normal.dot Michael Fisher Microsoft Office Word"yt}~ "yt># "ytf *bjbj\ Matchmaking Panorama Session Support Test Plan Introduction With the introduction of additional platforms (ex: PCs) under Panorama, we re adding support to Matchmaking to disallow cross-platform matchmaking per-title via LTC (Scenario 1a) and via NPDB setting (Scenario 1b) and per-search (Scenario 2).  For scenario #1b, for example, an exploit may be found on the PC version of a title and as a security response we can prohibit Xbox versions of the title from matching up with PC players to prevent unfair exploitation.  For scenario #2, for example, it s conceivable that a FPS player on an Xbox may feel PC players of the same title have a disproportionate advantage in games by using both the mouse and keyboard to play and so the player may wish to match only with other Xbox-based gamers. Cross-platform play is statically disallowable on a per-title basis by specifying this in the LTC, which propagates the setting into NPDB.  It is can also be configured dynamically via the NPDB setting.  The NPDB setting trumps create/search settings. Search Test Matrix Create a session according to the matrix (the  original  session) and one equivalent but unlocked session as well (the  unlocked  session). CreatedBy LockedBy SearchWith LockedSearch ExpectedSessions False False Neither Neither Create False Create False Unlocked Create Locked Create Neither False Locked False Neither Locked Neither False False Neither Neither Create False Unlocked Create False Create Neither Create Locked False Neither False Locked Neither Locked Steps to Repro Create an unlocked (control) session. Update the Match title info in NPDB if   is specified in the LockedBy method. Create a locked (test) session with a user appearing to be logged in on the CreatedBy platform. Search for the target sessions with a user logged in on the SearchWith platform, requiring a platform specific search if LockedSearch is True. Verify the session(s) returned match the expected sessions: Locked means only the locked session should be returned Unlocked means only the unlocked session should be returned Both means both sessions should be returned Neither means neither session should be returned Split the locked session and verify the new split session is found by Search gd+da gdAi] gdAi] gd9R2 gd9R2 gd9R2 gd9R2 gdf * ytf * gdf * gdf * gdf * gdf * gdf * gdf * gdf * gdf * gdf * gdf * gdf * gdf * gdf * gd$~v
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\match\test\Matchmaking Session Host Migration Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Title _PID_HLINKSMichael Fisher Normal.dot Michael Fisher Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags urn:schemas-microsoft-com:office:smarttags place urn:schemas-microsoft-com:office:smarttags PersonName 1x!vJ8gbjbj\ Matchmaking Session Split Test Plan Table of Contents  TOC \o "1-3" \h \z \u   HYPERLINK \l "_Toc136924023"  Table of Contents  PAGEREF _Toc136924023 \h   HYPERLINK \l "_Toc136924024"  Introduction  PAGEREF _Toc136924024 \h   HYPERLINK \l "_Toc136924025"  Owners & Documentation  PAGEREF _Toc136924025 \h   HYPERLINK \l "_Toc136924026"  Protocol Testing  PAGEREF _Toc136924026 \h   HYPERLINK \l "_Toc136924027"  Protocol as Method Signature  PAGEREF _Toc136924027 \h   HYPERLINK \l "_Toc136924028"  Protocol Property Tests  PAGEREF _Toc136924028 \h   HYPERLINK \l "_Toc136924029"  XRLScan Limit Testing  PAGEREF _Toc136924029 \h   HYPERLINK \l "_Toc136924030"  Scenario-based Testing  PAGEREF _Toc136924030 \h   HYPERLINK \l "_Toc136924031"  Scenarios  PAGEREF _Toc136924031 \h   HYPERLINK \l "_Toc136924032"  Scenario Variations  PAGEREF _Toc136924032 \h   HYPERLINK \l "_Toc136924033"  Validation  PAGEREF _Toc136924033 \h   HYPERLINK \l "_Toc136924034"  DeadXbox  PAGEREF _Toc136924034 \h  Introduction The MatchSplit protocol is being added to the Matchmaking server to support session host migration (aka: session splits).  Supported scenarios include cases where the session host disconnects from the network and where network interference prevents some of the session clients from communicating with the host or when the clients voluntarily elect a new host. Several approaches to testing this new protocol are being used: Protocol Property Testing XRLScan Limit Testing Scenario-based Testing Owners & Documentation PM Owner:  David Shaw PM Spec:  HYPERLINK "http://teamv2/sites/xbxe/Specification%20Library/Sessions%20and%20Matchmaking/Xbox%20Live%20Host%20Migration%20PM%20Spec.doc"  http://teamv2/sites/xbxe/Specification%20Library/Sessions%20and%20Matchmaking/Xbox%20Live%20Host%20Migration%20PM%20Spec.doc Dev Owner:  Jacob Repp Dev Spec:    HYPERLINK "http://xblwiki/default.aspx/XboxLive/HostMigration.html"  http://xblwiki/default.aspx/XboxLive/HostMigration.html Test Owner:  Michael Fisher Test Plan:  //depot/xonline/main/private/doc/server/match/test/ Protocol Testing Protocol testing focuses on positive and negative testing of protocol-specific properties including valid/invalid permutations, boundary conditions, and so forth. Protocol as Method Signature To facilitate thinking about protocol testing, it can be useful to deconstruct the XRL request as if it were an API call to consolidate the details into a concise method signature format.  The MatchSplit protocol can be modeled as: XONLINE_MATCH_SEARCHRESULT XeMatchSessionSplit(             DWORD               dwMessageLength;             XNKID               SessionID;             XNKID               SplitSessionID;             DWORD               dwTitleID;             XNADDR              HostAddress;             DWORD               dwNumAttributes;             UINT[]              rgdwAttrOffsets;             MatchAttribute[]    rgAttributes; XONLINE_MATCH_SEARCHRESULT: typedef struct _XONLINE_MATCH_SEARCHRESULT         {             DWORD               dwReserved;             XNKID               SessionID;             XNADDR              HostAddress;             XNKEY               KeyExchangeKey;             DWORD               dwPublicOpen;             DWORD               dwPrivateOpen;             DWORD               dwPublicFilled;             DWORD               dwPrivateFilled;             DWORD               dwNumAttributes;             UINT[]              rgdwAttrOffsets;             MatchAttribute[]    rgAttributes;         } XONLINE_MATCH_SEARCHRESULT XNKID:         // A session id is a 64 bit value. The top 48 bits are         // generated randomly. The last 16 bits are used to         // encode the server type of the session host,         // the database number this session is assigned to,         // and the table within that database the session         // is present in.         qwSessionId = (SessionId & 0xFFFFFFFFFFFF0000)           | (ulong)bServerType| (ulong)bDBUsed | (gameType << 8) XeMatchSessionSplit should only look at the NatType and ServerType. XNADDR:     public class XNADDR : WireData     {         public uint                 ina;         public uint                 inaOnline;         public ushort               wPortOnline;         [WireInfo(ArraySize=6)]         public byte[]               abEnet;         public SGADDR               sgaddr; // defined in sgprot.cs     } MatchAttribute: MatchAttribute is essentially a variant consisting of an Attribute ID and an Attribute Value.  The Attribute ID identifies both the specific ID and, when bit masked, the data type of the Attribute Value.    is a valid type. Protocol Property Tests dwMessageLength; With Attributes and Without Attributes, all of:  Valid Invalid Min (uint.MinValue == 0) Invalid Max (uint.MaxValue) Invalid Off-by-one (too low) Invalid Off-by-one (too high) SessionID Field Valid (XNKID flags only) Invalid Min Session ID Field (ulong.MinValue) Invalid Max Session ID Field (ulong.MaxValue) Invalid Min Session ID Part (ulong.MinValue : 48) Invalid Max Session ID Part (ulong.MaxValue : 48) Invalid Min XNKID (ulong.MinValue : 16) Invalid Max XNKID (ulong.MaxValue : 16) Invalid Session ID (Session ID specified) Invalid Session ID (missing XNKID) Invalid Session ID Equal to Split Session ID SplitSessionID Valid (full XNKID)   New Split Valid (full XNKID)   Split an Original Session Twice Valid (full w/ XNKID)   Split an Already Split Session Invalid Min Session ID Field (ulong.MinValue) Invalid Max Session ID Field (ulong.MaxValue) Invalid Min Session ID Part (ulong.MinValue : 48) Invalid Max Session ID Part (ulong.MaxValue : 48) Invalid Min XNKID (ulong.MinValue : 16) Invalid Max XNKID (ulong.MaxValue : 16) Invalid Split Session ID (non-existent) Incorrect session (a session not owned by the original host) dwTitleID Valid (previous title ID) Invalid Min (uint.MinValue) Invalid Max (uint.MaxValue) Invalid Title ID (Non-existent) Incorrect Title ID (doesn t match previous title ID) Incorrect Title ID (doesn t match Auth ticket) HostAddress Valid   New Host Valid   Same Host as Original Session Invalid Random Values Attributes & Properties Valid (0 attributes) Valid (1 attributes: GamerPuid only) Valid (1 attributes: HostName only) Valid (1 attributes - other) Valid (2 attributes: GamerPuid/HostName) Valid (10 attributes: GamerPuid/HostName + others) Valid (Max - 50 Attributes: GamerPuid/HostName + others) Invalid Too Many (51 attributes: GamerPuid/HostName + others) dwNumAttributes Invalid Max (uint.MaxValue) Invalid Off-by-one (too low) Invalid Off-by-one (too high) rgdwAttrOffsets Invalid Off-by-one Offset Invalid First Attribute Invalid Last Attribute Invalid Missing All Attribute Offsets Invalid Off-by-one (too low) Invalid Off-by-one (too high) rgAttributes Valid Double Value Valid Float Value Valid: Invalid Attribute ID (not in schema or sproc) Invalid Missing All Attributes Invalid Off-by-one (too low) Invalid Off-by-one (too high) XRLScan Limit Testing Verify requests larger than 6400 bytes are rejected Verify requests with query strings are rejected Scenario-based Testing Scenarios Let X equal the number of clients in the original session. Let Y equal the number of clients in the new session. Let X   1 indicate a host disconnection. 1.0 Elective Migration: New Host (Y = X) All of the clients (including the host) collude and determine a new host is needed.  The group nominates a new host and the new host calls XSessionMigrateHost().  Original host deletes original session. 1.1 Elective Migration: Same Host (Y = X) All of the clients (including the host) collude and determine a new host is needed.  The group nominates the original host as the new host and the host calls XSessionMigrateHost().  Report DeadXbox message for original host (deletes the original session).  This is a specialization of 1.0 Elective Migration: New Host. 2.0 Single Split (Y < X) Y clients lose connectivity with the host.  The group nominates a new host and the new host calls XSessionMigrateHost().  The original session plays on. 2.1 Single Spit: Host Disconnects (Y = X  Y clients lose connectivity with the host.  The group nominates a new host and the new host calls XSessionMigrateHost().  Report DeadXbox message for original host (deletes the original session).  This is a specialization of 2.0 Single Split. 3.0 N-way Splits (Y1 + Y2 +   + YN < X) Multiple groups of Y1, Y2,  , YN clients lose connectivity with the host and with each of the other groups.  Each group nominates a new host and each groups  new host calls XSessionMigrateHost().  The original session plays on. 3.1 N-way Splits: Host Disconnects (Y1 + Y2 +   + YN = X - 1) Multiple groups of Y1, Y2,  , YN clients lose connectivity with the host and with each of the other groups.  Each group nominates a new host and each groups  new host calls XSessionMigrateHost().  Report DeadXbox message for original host (deletes the original session).  This is a specialization of 3.0 N-way Splits. 4.0 Splits Over Time (Recursive Splitting) Elective, Host Disconnects, Single Split, and N-way Splits repeated over time for each case where Y > 1.  Join new users if desired.  Repeat until all instances of Y = 1.  This is a generalization of all splits recursively applied. Scenario Variations New clients join original and new sessions after splits Ranked and social sessions Validation Verify deleted/deadxbox-reported sessions are still host migration candidates. Verify API calls against new sessions are supported just as original sessions:  DeadXBox, DeleteSession, SearchSession, TitleChange, and UpdateSession Verify new split session functions correctly against all title specific and built-in search queries DeadXbox Verify deleted sessions are still host migration candidates for at least 5 minutes after  deletion  and are then actually deleted. Verify DeadXbox-reported sessions are still host migration candidates for at least 5 minutes after  deletion  and are then actually deleted. gdi$> gd4tD gdi$> xtltx gd3dU
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\moss\MOSS Security Design.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template lohab Xbox Online Doc Template.dot Larry Ohab Microsoft Office WordT(LS?$/ NRVS?$/bjbjqPqP eviewed   Complete  Table of Contents  TOC \o "1-5" \h \z \u   HYPERLINK \l "_Toc73867218"  Table of Contents  PAGEREF _Toc73867218 \h   HYPERLINK \l "_Toc73867219"  Introduction  PAGEREF _Toc73867219 \h   HYPERLINK \l "_Toc73867220"  Design  PAGEREF _Toc73867220 \h   HYPERLINK \l "_Toc73867221"  Server  PAGEREF _Toc73867221 \h   HYPERLINK \l "_Toc73867222"  3.1.1 Key Storage  PAGEREF _Toc73867222 \h   HYPERLINK \l "_Toc73867223"  3.1.2 Web Interface  PAGEREF _Toc73867223 \h   HYPERLINK \l "_Toc73867224"  3.1.3 Security Audit  PAGEREF _Toc73867224 \h   HYPERLINK \l "_Toc73867225"  3.1.4 Reply Encryption  PAGEREF _Toc73867225 \h   HYPERLINK \l "_Toc73867226"  3.1.5 Important Structures  PAGEREF _Toc73867226 \h   HYPERLINK \l "_Toc73867227"  3.1.5.1 XLKEY  PAGEREF _Toc73867227 \h   HYPERLINK \l "_Toc73867228"  3.1.5.2 XLMOSS_REQUEST  PAGEREF _Toc73867228 \h   HYPERLINK \l "_Toc73867229"  3.1.5.3 XLMOSS_REPLY  PAGEREF _Toc73867229 \h   HYPERLINK \l "_Toc73867230"  3.1.6 Error Handling  PAGEREF _Toc73867230 \h   HYPERLINK \l "_Toc73867231"  3.1.6.1 Malformed HTTP Requests  PAGEREF _Toc73867231 \h   HYPERLINK \l "_Toc73867232"  3.1.6.2 Internal Setup Errors  PAGEREF _Toc73867232 \h   HYPERLINK \l "_Toc73867233"  3.1.7 Settings  PAGEREF _Toc73867233 \h   HYPERLINK \l "_Toc73867234"  3.1.8 Management Commands  PAGEREF _Toc73867234 \h   HYPERLINK \l "_Toc73867235"  3.1.9 Logging Format  PAGEREF _Toc73867235 \h   HYPERLINK \l "_Toc73867236"  3.1.10 Performance Counters  PAGEREF _Toc73867236 \h   HYPERLINK \l "_Toc73867237"  3.1.11 Events  PAGEREF _Toc73867237 \h   HYPERLINK \l "_Toc73867238"  Client  PAGEREF _Toc73867238 \h   HYPERLINK \l "_Toc73867239"  3.2.1 C++ Servers  PAGEREF _Toc73867239 \h   HYPERLINK \l "_Toc73867240"  3.2.1.1 WinHttp Component  PAGEREF _Toc73867240 \h   HYPERLINK \l "_Toc73867241"  3.2.2 C# Servers  PAGEREF _Toc73867241 \h   HYPERLINK \l "_Toc73867242"  3.2.3 Management Commands  PAGEREF _Toc73867242 \h   HYPERLINK \l "_Toc73867243"  3.2.4 Settings  PAGEREF _Toc73867243 \h   HYPERLINK \l "_Toc73867244"  3.2.5 Events  PAGEREF _Toc73867244 \h   HYPERLINK \l "_Toc73867245"  Usage  PAGEREF _Toc73867245 \h   HYPERLINK \l "_Toc73867246"   PAGEREF _Toc73867246 \h   HYPERLINK \l "_Toc73867247"  Revision History  PAGEREF _Toc73867247 \h  Introduction The Mother of Security Servers (MOSS) is the Xbox Live solution to key management and data protection.  MOSS will be responsible for managing the Xbox Live Master Key and decrypting secrets from the database.  This replaces the current implementation of distributing an environment s Master Key via a protected floppy disk.  The new implementation will store the master key on the MOSS server in an nCipher device. This document discusses the design and implementation issues pertaining to MOSS.  It will cover the implementation of the server and client code.  On the server side, it will identify details about the web interface, configuration settings and important events. Design This section discusses the design and implementation details of the MOSS server. Server The MOSS server will be a C# IIS front door server.  It will be responsible for receiving HTTP POST requests from clients for decrypting key data.  The incoming request will contain encrypted key data in the correct structure.  MOSS will decrypt this data, build a reply and encrypt the returning key data with a share secret.  It will not require an additional database work.  Attaining keys from the database will still be the responsibility of the client. Priority Level (1) Key Storage The master key for each environment will be stored in an nCipher device.  This device will ensure the safe storage.  For environment without need for nCipher protection, the master key will be a hard coded value within the code.  Encrypted data values within that environment will need to be encoded with   All environments with sensitive data must use the nCipher device key path.  (Example TestNet, PartnerNet, Production.)  Web Interface MOSS will not be a SOAP web-cache implementation.  All data will be passed as a binary structure in the HTTP POST body.  The basic implementation will also require a HTTP header which identifies who the caller is.  The id of the caller should be the service account name they are running under.  The HTTP header name will be: ACCOUNTNAME:<process account name> Failure to present this name will result in an ERROR event placed in the NT event logs, application log and trace messages.  This event will also log the requestor s IP address and port. Requests will be sent to the following URL: http://<servername>/MOSS/DecryptKeys.aspx (Note the aspx.  It is the standard extension for all non-SOAP HTTP front doors in Xbox Live) All other calls to the MOSS server should be cause a NT error event logging the IP address and port of the caller. Priority Level (1) Security Audit The MOSS server will make a log record of who is requesting decryption of what data.  We will add configuration setting to ensure that only specific servers have permissions to (a) access MOSS, (b) use MOSS to decrypt a specific key.  Requesting services will be identified using the ACCOUNTNAME HTTP header in the request.  Currently this is a weak method of ensuring the requestor is who they say they are; however this header will be added in the client code and malicious callers will have to know the protocol if they want to cause any damage. Priority Level (1) If time is permitting, we d like to turn on HTTP authentication on the MOSS server so we can ensure that the caller is who they say they are.  This implementation will remove the need for the ACCOUNTNAME http header.  However, since we ve never really tried this implementation of Live before it may require a little more work.  It is a lower priority security feature. Priority Level (3) Reply Encryption MOSS cannot simply send our decrypted key values over HTTP, even within our Live environment.  As such, key replies should be encrypted using a shared key.  The current design of MOSS will require a Nonce to be sent with the request which will be copied to the reply.  This Nonce will be calculated using the current time. Nonce[ 8 bytes] = Current Time in ticks The client will also be responsible for checking that the returning Nonce corresponds to the Nonce set in the request.  Since the nonce is the time, we will also check to ensure that this reply is not happen outside of a configured time span. The reply key data will be encrypted with a 128 bit key generated from the hash of: Key[16 bytes] = Sha1( Fixed Key | Nonce ) Both the client and the server will know this same fixed key.  The fixed key will actually be a hard-coded value in the code for both client and server.  This implementation is impossible for a hacker to without access to our code tree.  It provides an adequate level of protection for the first version of this product.  Priority Level (1) If time is permitting, this encryption shared key should be changed to a Diffie Hellman implementation. For more information about the Diffie Hellman algorithm, please read:  HYPERLINK "http://www.faqs.org/rfcs/rfc2786.html"  http://www.faqs.org/rfcs/rfc2786.html ll still send the Nonce so that the client can do a quick verification that the reply is something is it expecting.  However, we ll also pass a gX value in the request and a gY value in the reply.  (Note that   is a base integer value that will be hard-coded into the client and server (it will be 2).    and   will be random large integer values.  The encrypted key will then be: Key[16 bytes] = Sha1( gxy | Nonce ) This is a preferred solution since determining the values of x and y (if sufficient large) are extremely difficult to calculate.  It will not be the initial implemented solution only because of the algorithm s complexity. Priority Level (2) Important Structures The server and client will utilize the following structures. XLKEY Used to transport a specific keys data. typedef struct _XLKEY     WORD    _wMasterKeyVersion;           // key version of this key.                                  DWORD   _cbKey;                       // size of the key.     BYTE    _aKey[];                       }   XLKEY; _wMasterKeyVersion   The master key version which encrypts this key.  If the value is 0 then this information is unencrypted.   _cbKey   The number of bytes in the key array.  This value should never be zero. _aKey   the binary key (encrypted or decrypted).  We ll need to verify the size of this buffer using the POST data content length and _cbKey. XLMOSS_REQUEST Request structure that is sent from the client to the server.  This structure contains all key data that the client would like decrypted. typedef struct _XLMOSS_REQUEST     QWORD   _qwNonce;                     // the requestor's set Nonce.     //byte gToX[128];                     // g^x value for Diffie Hellman.     DWORD   _cEncryptedKeys;                   XLKEY   _aEncryptedKeys[];             }   XLMOSS_REQUEST; _qwNonce   Nonce setting for the request.  This will probably be a time stamp value.  It is set by the requestor. _cEncryptedKeys   The number of encrypted structures are in the request.  This value should be > 0. _aEncryptedKeys   An array of encrypted key structures. XLMOSS_REPLY   Reply sent from the server to the client.  It contains a buffer of encrypted data that is the master key decrypted keys presented in the request. typedef struct _XLMOSS_REPLY     QWORD   _qwNonce;                     // the nonce from teh request.     //byte gToY[128];                     // g^y value for Diffie Hellman.      DWORD   _cKeys;                            DWORD   _cbEncryptedResponse;              BYTE    _aEncryptedResponse[];         }   XLMOSS_REPLY; _qwNonce   Nonce setting for the request.  This will probably be a time stamp value.  It is set by the requestor and copied into the reply. _cKeys   The number of keys decrypted in this reply. _cbEncryptedResponse   The number of bytes in the encrypted response array.  This value should be >0.. _aEncryptedKeys   An blob of encrypted data from the MOSS server.  It can be decrypted with the special key.  The length of this value should be verified by the client using the Content-Length and _cbEncryptedResponse. Error Handling There are 2 types of errors that MOSS will need to be concerned about.   Malformed HTTP Requests These errors are due to requests not being properly setup.  If they are created by the client code then this should never happen.   However, should that happen it have to believe this is some type of hack attempt.  MOSS will pretend that is does not exist at this time  The result will be an HTTP status code of 404.  It will also cause an error NT event to be logged with the IP and Port of the requestor. Internal Setup Errors These errors will cause a HTTP status code of 500 response.  The error will be placed in the XErr HTTP header of the reply.  These errors will be caused by invalid ini file settings or a failure to talk to the nCipher device.  This will cause a error NT event to be logged. Settings On the server there will be the following settings. [MOSS] UseNCipher=0(false) or 1(true, use the nCipher device implementation).  Default is 1. NumOfAllowServices=The number of service sections to read into the permitted table.  Default is 0. [SERVICE#]  (0..NumOfAllowServices instances permitted) AccountName=The account name that this service will run as.  This cannot be empty. PermittedKeyTypes=Comma delimited list of permitted key type decryption allowed for this server.  This should not be empty. Management Commands MOSS will expose the following management commands through the XMGMT console. reload   Tells MOSS to renew its context handle with the nCipher device. Logging Format Performance Counters At this time, the only counters we will notice are: Requests Total. Requests Per Second. Failed Requests Total. Failed Requests Per Second. Invalid Requests Total. Invalid Requests Per Second. Successful Replies Total. Successful Replies Per Second. More will be added if necessary. Events TO DO: (lohab) Fill this in when you know the events. XEVENT_MOSS_INVALID_SETTTINGS   Settings in the MOSS configuration were invalid. XEVENT_MOSS_EXTERNAL_DEVICE_ERROR   The external private key management device has caused an error. XEVENT_MOSS_INVALID_REQUEST   MOSS received an invalid request from a client.  The message contains the IP and port of the offender.  Please investigate this occurrence. XEVENT_MOSS_INIT_SUCCESS   MOSS has successfully been initialized. XEVENT_MOSS_INIT_FAILED   MOSS failed to initialize correctly. Client The client code for MOSS is as important as the servers since it would be ideal to have 1 method of talking to which all servers can adapt too.  It makes the addition of MOSS much easier to the Live service.  The ideal solution is to simply re-write the current DecryptWithMasterKey function to perform the MOSS lookup.  The question is, do we want to make it possible for the client to decrypt numerous entries at one time?  DecryptWithMasterKey does not currently support that.  This is could a later feature. We have 2 different client implementations (C++ and C#), so we ll have to make modifications in both areas.  One of the possible solutions to this is to create a DLL for this call instead of 2 separate implementations.  However, this adds extra dependencies to the server and complicates the install.  Making a C++ and C# version keeps the setup of these servers simpler.  Note that the client will be present on numerous machines. C++ Servers C++ servers will have a more difficult implementation.  The common path will be the sample however.  The C++ server will call DecryptWithMasterKey.  DecryptWithMasterKey will build the necessary structures, open an HTTP connection and send the request to MOSS.  The client is responsible for waiting a configured amount of time for a response.  This implementation will be stored in a public place for all servers to use.  It will be integrated with our current crypto helper tools. WinHttp Component C++ servers will be using WinHttp to send.  The code for this implementation is already complete and working for the UDPAdapter.  As a result, C++ servers that use MOSS will also require the WINHTTP.dll library to operate.  The C++ implementation for this must be put in a public place for all servers to use. C# Servers C# servers already have built in HTTP tools.  They will construct an HTTP request with the encrypted key information.  Send the request and wait a configured amount of time for the response.  The implementation of this code will be placed in the CryptMgr class in common tools. Management Commands All client servers that use MOSS should expose the following commands: reloadkeys    Gets encrypted keys from the database and sends them to MOSS for decryption. Settings [Security] MOSSServer=Server location of the MOSS service. MOSSPort=Port to send the request. ServiceId=Id of the requesting service WaitTimeInSeconds=Time to wait for a response from MOSS. ConnectionPollInSeconds=Time to wait before trying to find the MOSS server again. Events These are the current defined events.  More events will follow as deemed necessary. XEVENT_SECURITY_INVALID_RESPONSE   The response from the MOSS server was invalid. XEVENT_SECURITY_RESPONSE_DECRYPTION_FAILED   The response from the MOSS server was invalid. XEVENT_SECURITY_NO_MOSS   The client cannot find the MOSS server. XEVENT_SECURITY_CONNECTED_MOSS   The client was able to talk to MOSS. Usage The MOSS server will be a ASP .Net application.  It will be started and managed through IIS. 1.  Question:  Can the XMACS/XKDC be started without these servers being up and running.  What is the failure plan?   Answer:  Client servers will require XMOSS before they can properly start.  The Client API will return an error when MOSS is not found.  It will also fire an event to inform operators that this action failed.  The client should not error out.  It should infact go into a "not ready yet" state and continue to POLL MOSS until it gets an answer.  We'll have to add a new setting to the clients (XMACS/XKDC) for security server poll time. 2.  Question:  How will the client servers interface with MOSS?   Answer:  No changes are necessary to the client servers.  They will still use DecryptWithMasterKey, which will need to be re-written to use MOSS. This function exists in both C++ and C# form. 3.  Question:  If a client requested multiple keys to be decrypted -- how does it know the size and location of each one in the response?  Does the client simply have to match it up to the array of XLKEYs that it sent in the request?   Answer:  When the client receives this reply... It first has to decrypt the data in _aEncryptedReponse. The result is an array of XLKEYS of size _cKey. Revision History Changes made Author 05/28/04 First Draft Lawrence Ohab (lohab) Microsoft Confidential. gdQ`~ gd};` gdQ`~ gdQ`~ |tltld`d`\U ~vnfnvfZfZf gdQ`~ gdQ`~ }vnfafZfZa Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\match\test\Xbox Online Matchmaking Test Spec.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Shuyin Zhao Xbox Live Test Plan Template Shuyin Zhao Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags Month trans e^cR`3JO ?MWT<n -'pWH- TOC \o "1-3" \h \z \u   HYPERLINK \l "_Toc74121912"  Table of Contents  PAGEREF _Toc74121912 \h   HYPERLINK \l "_Toc74121913"  Summary  PAGEREF _Toc74121913 \h   HYPERLINK \l "_Toc74121914"  Schedule  PAGEREF _Toc74121914 \h   HYPERLINK \l "_Toc74121915"  Goals  PAGEREF _Toc74121915 \h   HYPERLINK \l "_Toc74121916"  Non-Goals  PAGEREF _Toc74121916 \h   HYPERLINK \l "_Toc74121917"  Related Documents  PAGEREF _Toc74121917 \h   HYPERLINK \l "_Toc74121918"  Functional Testing  PAGEREF _Toc74121918 \h   HYPERLINK \l "_Toc74121919"  Summary  PAGEREF _Toc74121919 \h   HYPERLINK \l "_Toc74121920"  Test Case Matrix  PAGEREF _Toc74121920 \h   HYPERLINK \l "_Toc74121921"  7.2.1 New Test Cases per Milestone  PAGEREF _Toc74121921 \h   HYPERLINK \l "_Toc74121922"  7.2.2 Existing Reusable Test Cases  PAGEREF _Toc74121922 \h   HYPERLINK \l "_Toc74121923"  Stress Testing  PAGEREF _Toc74121923 \h   HYPERLINK \l "_Toc74121924"  Revision History  PAGEREF _Toc74121924 \h  Summary Discuss the changes being done in your service area for each milestone. M1 Milestone:  matchmaking front door server will be rewritten in C#. instead of reading configuration information from local ini file, it reads from config DB instead: t_match_titles table will now live in NPDB instead of lives in every db partition; session cache time is now the only configurable parameter through configDB DeadXBox and DeadSG requests will be sent from SG instead of monitoring servers. xmatch.dll will live with other stateless front door servers  dll in one box. M2 Milestone:  No changes. M3 Milestone:  For xenon release, 3 new xrl are created. See Section 7.2.1 for details M4 Milestone:  Social match and ranked match coming in  Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M1 Milestone: Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases. Since front door will be rewritten in C#, there will be some test cases need to be changed. Performance Test: I will need to run stress/performance testing to get a profile of how new matchmaking front door performs. M2 Milestone:  Same as M1. M3 Milestone:  Due to late check in of match codes, only positive functional cases will be written and run for this release. Goals Discuss your test goals for each milestone.   M1 Milestone:  1. Since my server is being rewritten from C++ to C#, my goal is to use 80% of my existing tests by re-running them against the front door. 20% existing test cases which talk directly to matchDB backend need to be modified. Rerunning existing tests against the front door will validate that there has been no behavior change in server since the previous release.   2. I will also be writing new test cases to validate the new configuration settings being pulled from the configuration database vs. the previous local initialization file method. 3. Performance testing will be done against the newly written front door. M2 Milestone:  Same as M1 M3 Milestone: 100% pass rate for all xbox1 functional tests 100% pass rate for all positive cases for Xenon functional tests. Non-Goals Clearly state the dividing line between what you will be covering and what you won t be covering for each milestone. M1 Milestone:  Basic performance test will be done to get a profile of new front door servers; but fully loaded stress test won t be done for this milestone. M2 Milestone:  Same as M1. M3 Milestone: Negative cases for some xenon functionals. Match stress? Related Documents Reference any documents (via its path in CoreXT) that relate to your test plan. Functional Testing Summary Write a summary for your test methodology as it relates to the complete test matrix. The matchmaking server has the following APIs: CreateSession, UpdateSession, DeleteSession, SearchSession, DeadXBox and DeadSG. Functional testing will strive to test the matrix surrounding this API set. Test Case Matrix New Test Cases per Milestone M5 Milestone:  All configDB related test cases will be moved to this milestone. I opened bug 38503 to track this issue. ConfigDB related test cases:  XMatchTitleInfoDBName: since t_match_titles now lives in NPDB, no need for this testing anymore. defaultSessionExpiration: why I can t find it in the VSFixTraces\Settings.cs file, but it is in the ndpb t_settings table? relaxXenonValidation: SessionCacheExpiration: (assume this change can be picked up dynamically; no restart server required). Using sql stored procedure call to add a row to t_environment_setting_overrides to change this setting dynamically; write test cases to see if new settings have been picked up correctly The following config settings are in the npdb: Xmatchfd_valueOfFriend Xmatchfd_valueOfPrefer Xmatchfd_valueOfCompleted Xmatchfd_valueOfAvoid Xmatchfd_valueOfAvoidMe Are these settings being changed in production? If so, since no service call back handler is implemented, how to dynamically change these settings? Answer: manually reset the application pool is a better way to make the new setting takes effect. For my test, I will just make sure whatever value  we use in the npdb is being used in the match.  M4 Milestone:  Stress Testing: Since 1 title is not able to fully stress sql server (sql is able to cache two tables in the cache), we choose 10 titles will be used for stress testing.  Every title will have exact the same xlast configuration except titleID. Properties and context: one property and context for each data type: one int32 property one int 64 property one float32 property one float 64 property one dateTime property one context 4 match query that will be used by both social match and ranked match: maxResults = 50 Parameters: takes all the above 6 custom attributes + default ones (game_type, game_mode, mu,sigma,rating, country,lang,gamerZone, host_name, gamerPUID).  Filters: use all the above 6 custom properties in the filter. Returns: all the above 6 attributes + default ones (session_value,host_name,gamer_zone). Sort Operations: one query sort by Int64 one query sort by float64 one query sort by dateTime one query sort by int64, float64 and dateTime. Programmatically configurable settings in query: ratio of 4 types of query, + system defined FindByID query ranked query versus social query ratio null search parameter ratio: each title defined search parameter can be null, and the probability of each parameter to be null is configurable. x number of open sessions will be created upon test starts up: some meet title defined criteria, others don t. the mix is configurable. Social match: for each social match search request, different searchUserPUID is being used. And x number of affiliates will be returned. X is centered around 300. Within each affiliate list, there are five types of affiliates friend complete positive negative avoidMe The ratio of each type is configurable. Social Match: Inter-service call between match front door and presence front door: HR returned by presence for queryAffiliates call: E_NOSUCHUSER E_OUTOFMEMORY, etc I need to make sure whatever result code presence returned to match, match front door can handle it correctly. Test cases: a non-existent user send search session requests:  presence server knows nothing about the user (user isn t registered in uodb);  no affiliate query is being performed.  an existent user send search session request, check the social match is actually performed. This case can be covered by the following six passes tests. xmatchfd_disableAffiliateQuery: Disable communication with presence: turn on this config setting, check affiliate positive sessions still being returned but in title defined sort order and the session value is 0. Four passes of social match query: There are four passes of doing a social match query. All test cases will work for title that either in single db or multiple dbs. Pass 0: sessions with positive affiliations, in the same gamer zone; Pass 1: sessions in the same gamer zone, with no negative affiliations Pass 2: sessions with positive affiliations, in different gamer zone Pass 3: sessions with no negative affiliations, in different gamer zone There are 5 types of affiliates that match server cares about, so the total combinations of different affiliates that s in the same session are 31, assume each affiliate is only associated with one user. SessionValue Positive(2) Negative(-3) Friend(4) Complete(1) AvoidMe(-3) Positive Test cases: PSingleUserMultiPosAffiliate: Create one session and associate it with userA.  userA has friend, complete, positive relationships with searchUser make a social match request and make sure the session is returned with the right session value. PSingleUserMultiNegAffiliate: Create one session and associate it with userA.  userA has negative and avoidMe relationships with searchUser make a social match request and make sure the session is not returned. PAffilliateSameZoneMainLine: Create 31 sessions. Each session  has one of the above affiliates combinations. Thus, each session can have positive, negative or 0 session values. Meet title defined criteria Game_type is standard Game_mode is the same as the one passed in query Public slot is > 0 Compatibable NAT Same mu/sigma/lang/country/rating (the value of these won t matter since there are no enough sessions available so they won t be used at all). Check Results: Only positive and 0 session values are returned in the right order Title defined sort operations won t matter PAffiliateSameZoneMixedSession: Create 31 sessions like the above Create additional five sessions, that One session doesn t meet title defined criteria One session is ranked match One session that has public available slots set to 3. (search request will request public available slots >=4). One session has incompatible NAT One session s game_mode is different Check Results: The results should be the same as case1 PNonAffiliateSameZoneMainLine: Create 1 affiliate session with positive session values that meet all criteria, Create 1 affiliate session with negative values that meet all criteria, Create 3 non-affiliate sessions with different title defined sortBy attribute values Check Results: Positive affiliate sessions returned 1st 3 non-affiliate sessions returned in the order of title defined sort criteria PNonAffiliateSameZoneMixedSessions: In addition to the sessions created in case 3,  Create 5 bad sessions as in case 2 Check results: Should be the same as 3 PAffiliateDifferentZoneMainLine: Create 31 sessions, each session  has different gamerzone as searchUser has one of the above affiliates combinations. Thus, each session can have positive, negative or 0 session values. Meet title defined criteria Game_type is standard Game_mode is the same as the one passed in query Public slot is > 0 Compatibable NAT Same mu/sigma/lang/country/rating (the value of these won t matter since there are no enough sessions available so they won t be used at all). CheckResults: Only sessions with positive and 0 values are returned and in the descending order PAffiliateDifferentZoneMixedSession: Create 31 sessions just like case 5. Create another 5 bad sessions with different gamerZone. CheckResults: Should be the same as case 5 PAffiliateDifferentZoneMixedSession2: Create 1 positive affiliate same gamer zone session that meet all criteria Create 1 negative affiliate same gamer zone session that meet all criteria Create 1 non-affiliate same gamer zone session in each of the db that title lives in Create 1 positive affiliate different gamer zone session Check Results: Positive same gamerZone returned 1st Non-affiliate same gamer zone returned second Positive different gamer zone returned last PNonAffiliateDifferentGamerZoneMainline:  Create 1 positive affiliate and 1 negative same gamer zone session Create 1 non-affiliate same gamer zone in each db Create 1 positive affiliate different gamer zone Create 3 non affiliate different gamer zone with different title defined sortBy attribute values Check Results: Positive same zone returned 1st Non-affiliate same zone returned 2nd Positive different zone returned 3rd 3 non affiliate different zone returned last, but in the title defined sortBy order PNonAffiliateDifferentGamerZoneMixedSession: create sessions that are same as case 8 create additional 5 different gamerzone bad sessions  Check Results: Should be the same as case 8. PEmptyAffiliateList: Create an PNUser that has no affiliate online and in the same title Create another non-affiliate session that meets all title defined criteria Make a social match request Check results: The non-affiliate session is returned. P1000PosAffiliateList: Create 500 complete, 500 positive for searchUser. They meet all title defined criteria and are all good sessions. Make a social match request Check results: Make sure 25 positive sessions returned. The following test cases is to test Pass1 and Pass3 ratings filter: PSameZoneDifferentRatingsLevel1: enough sessions available that ratings will be used in filter and language/country and skill will be used in sort searchUser s rating is 50, available sessions  rating is 50+-0.0016 Create 1 positive and 1 negative same zone session Create 101 non-affiliate same gamer zone session in each match db that title lives in: Session1 is within next range 0.08, but has same lang and same country, and the largest titledefined sortBy attribute values. 100 sessions is within ratings range 0.0016 Among the 100 sessions, 99 are within 0.00008 range, 100th is within 0.0016 Among 99 sessions, some with the same country and lang; some with same country only; some with same lang only; some has neither the same The 99 sessions has two different title defined sortBy attribute values, either 0 or 1 The 99 sessions has different mu values (using an excel sheet, it shows that given the values I used for this test, the larger mu is, the smaller the drawprobability is). Create 1 positive different gamer zone session Create 1 non affiliate different gamer zone session. Check results: numResults in the query is defined as 25 25 sessions returned 1 positive same zone session returned 1st Different gamer zone sessions won t be returned The session1 within range 0.08 won t be rturned. 24 Same zone non-affiliate sessions will be returned  a) they all within 100 sessions b) same lang and country returned first, although it s ratings is within bigger range and it s title defined sortBy attribute values are larger c) same language returned 2nd, with title defined sortBy acending order; when title defined sortBy is the same, it use draw probability descending order. d) same country returned 3rd, with title defined sortBy asending order; when title defined sortBy is the same, it use draw probability descending order. e) neither the same returned last same as case 10 except we will use range 0.08. same as case 10 except we will use range 0.4 same as case 10 except we will use range 2.0. same as case 10 except we will use range 10.0. same as case 10 except we will use range 50.0: but this time the search result is different:  session1 will be returned and it will be returned in the 2nd place. searchUser s rating is 0 and the range is 0.0016 (ie available sessions  rating is 0.0016) searchUser s rating is 100 and the range is 10 (ie available sessions  rating is 90) repeat case 10-17, but sessions have different gamer zone. PSearchResultHostName: create a session with host_name set to a string value, send a search request and check the host_name is returned as the second last attribute in the result set. PLotsSessions: add > 1000 sessions with exact the same ratings, make a search request and check there is results bein returned. PLotsSession: add > 1000 sessions with the sact same mu for ranked matchc, make a search request and check there is results being returned. PLessSessionsCountryLang: Create a session with the neither same lang and country as searchUser Create 2nd session with the same country as searchuser Create 3rd session with the same lang as searchuser Create 4th session with both same lang and same country as searchuser Check results: 4th, 3rd, 2nd, 1st returned in this order. Negative Test cases: NCreateBadMuSigmaRating: create social session with mu set to  0.0001/-0.0001/-0.0001 or 6.0001/1.0001/100.0001, check database directly make sure 0 or 6/1/100 is being logged. NCreateNoHostName: send a create session request without pass host_name attribute, check empty string is returned in the search results as host_name. NUpdateBadMuSigmaRating: same as 1. NUserNotFound: userX who initiates search request is not in the presence system: no social match is performed NSearchNoGameMode: (bug 27096. they are not required anymore). Create a session with gameMode set to 1 Send a search request without passing gameMode Check the session is not returned. (default 0 is used.) NSearchNoGameType: Create a session with gameType set to 1 Send a search request without passing gameType Check the session is not returned (default 0 is used). NSearchNoGamerZone: same as 4 and 5. NSearchUserNoRating: default 0 is used Create 100 sessions with rating set to 0.0016; create another one with rating set to 0.08. Check results: make sure rating with 0.08 is not returned. NSearchNocountryLang: default 0 is being used. Create 100 sessions with both country and lang set to 0, rating within 0.08;  create another one with country and lang set to 1, but rating is within 0.0016, Check results: make sure the one with country and lang set to 1 is not returned. NSearchNoMuSigma: default mu=3, sigma=1 is being used. Create 100 sessions with mu set to 3 and sigma set to 1, rating within 0.08, country/lang is the same as serachUser. Create another one session with mu set to 2 and sigma set to 0, rating within 0.0016, title defined sortBy the same as the above 100 sessions ; country/lang is the same as searchUser. Check results: make sure the one with mu sigma 2 is not returned. NSearchNoPuid: default 0 is used, which means no social match is used; just check searchreq won t return any error. NSearchUserBadRatings:searchUser s rating is out of range: -0.0001, check the results is the same as rating 0; if it s 100.0001, check the results is the same as rating 100 NSearchUserBadMuSigma: searchUser s mu=6.0001, sigma=-0.0001 Create 100 sessions with mu set to 6 and sigma set to 0, rating within 0.08, country/lang is the same as serachUser. Create another one session with mu set to 2 and sigma set to 0, rating within 0.0016, title defined sortBy the same as the above 100 sessions ; country/lang is the same as searchUser. Check results: make sure the one with mu sigma 2 is not returned. Ranked Match: Apply game defined filter first, then using skill to return sessions with matching draw probability For this ranked match search, we will use a query: Return max 25 sessions Does not use any title defined sort criteria Has title defined filter I will use a title that s configured in a single sql db to do all ranked match tests. Positive Test cases: PDefaultAttrib: check session value is returned as the last attribute in the search result and it s value is always 0. The following test cases for ranked match all have enough sessions (>=100) available so that mu and sigma will be used in search request. An excel spread sheet is being used to calculate draw probability based on mu and sigma values. PValidMuSigma1: all sessions have valid mu(0-6) and sigma (0-1) searchUser s mu is 3, sigma is 0.01; available sessions  mu is 3+-0.00096, but with different sigma values. Create 101 available sessions: Session1 mu is within next range 0.0048, but with sigma value set to 1 Among the 100 sessions: All sessions s mu is within range 0.00096 1 sessions has the same mu  and sigma as search user (3), make sure it always returned first.(This is not true!!!) 100 sessions has the same mu, but not the same as search user; different sigma Create session 2 that does not meet title defined search criteria, but has the same Mu as searchUser and sigma as 0. Check results: numResults in the query is defined as 25 25 sessions returned Session 1 won t be returned Session 2 won t be returned All returned session are a) within 100 sessions same as case 10 except we will use range 0.0048. same as case 10 except we will use range 0.024 same as case 10 except we will use range 0.12 same as case 10 except we will use range 0.6 PSearchUserZeroMuSigma: available session s mu range is 0.00096(i.e. mu is 0.00096): Create 1 session mu is 0.00097, sigma is 0 make sure this session won t be returned. Create 100 sessions that mu is 0.00096, with different sigma values Check results: 25 sessions returned with draw probability descending PSearchUserMaxMuSigma: available session s mu range is 0.12(i.e. mu is 6-0.12=5.88) Create 1 session mu is 5.87, sigma is 1 make sure this session won t be returned. Create 100 sessions that mu is 5.88, with different sigma values Check results: 25 sessions returned with draw probability descending PAllZeroMuSigma: available sessions s mu and sigma is 0, search user s mu and sigma is also 0. just check there are sessions returned. PAllMaxMuSigma: available sessions s mu 6 and sigma is 1, search user s mu 6 and sigma is also 1. just check there are sessions returned. PTitleDefinedSort: use a query that has title defined sortBy int32 attribute that in descending order, which will be applied before draw probability. Create 100 sessions that meet title defined search criteria and mu s range are all within 0.0048. among these 100 sessions: 10 sessions have the same sortBy attribute =0, draw probability is different 15 sessions have the same sortBy attribute=1; draw probability is different 75 sessions have sortBy attribute = 3; and mu is within 0.00096.  Check results: 75 sessions with sortBy 3 are not returned, which can verify title defined sort is applied first. 15 sessions with sortBy attrib 1 returned 1st,  10 sessions with sortBy attrib 0 returned next. PRankedMatchMainLine: searchUser s mu=3 and sigma=0.5 Create 10 sessions. each session has different mu(0-6) and sigma(0-1) value Check results: 10 sessions returned with draw probability is in descending order. Negative Test cases: NCreateBadMuSigmaRating1: same as the test case in social match. NUpdateBadMuSigmaRating1: same as the test case in social match. NSearchUserBadMuSigma:  Create 100 sessions with mu=6 and sigma set to 0.001 Create another session with mu set to 3 and sigma set to 0.5 Do a ranked search with mu=6.001 and sigm=0.001 Check results: The session with mu =3 is not returned.  NSearchUserNoMuSigma: Create 100 sessions with mu=3 and sigma set to 1 Create another session with mu set to 6 and sigma set to 0.5 Do a ranked search without passing mu and sigma Check results: The session with mu =6 is not returned.  NSearchNoGameMode: (bug 27096. they are not required anymore). Create a session with gameMode set to 0 Send a search request without passing gameMode Check the session is returned. (default 0 is used.) NSearchNoGameType: Create a session with gameType set to 0 Send a search request without passing gameType Check the session is not returned (default 0 is used). NSearchNoGamerZone: same as 4 and 5. M3 Milestone:  For all xenon matchmaking tests, xlast will be used to create title/attribute/queries. CreateSession: New xrl: xmatchhost2.ashx new data type are being added: int32/int64/float32/float64/dateTime/string blob is not supported as session attributes doesn t allow XNET_XNKID_SYSTEM_LINK flag when create session All schema attributes are allowed to be null. Context is the new enum type Note that for all xenon createSession requests, it will pass nine session attributes by default (game_mode and game_type, gamerZone, gamer_country, gamer_lang,gamer_rating, gamer_mu, gamer_sigma and host_name). Positive cases: create a session without passing any custom attributes (only with default session attributes). create a session with X_ATTRIBUTE_DATATYPE_NULL as attributeID create a session with system property only (i.e. gamername property). create a session with gamer_puid along with other default session attributes create a session with max int32 attributes create a session with max int64 attributes. pass int32 value to a int64 attribute create a session with max float32 attributes. create a session with max float16 attributes. create a session with dateTime attribute (datetime.maxvalue) create a session with max length string attributes (for gamername). create a session with empty string attributes. (for gamername). create a session with a small string attribute (16byte long) create a session with public/private available slots set to 0 create an online xenon hosted session create an online PC hosted session create an online title hosted session create a session with userPUID sent as attribute create a session without userPUID sent as attribute These are all positive cases since on the wire they are all 64 bits which can be interpreted as integer. try to create a string attrib with int32/64 value try to create a int32 attrib with int64 value try to create int 32/64 with float32/64 value try to create context with float value try to create context with string value try to create dateTime with a float value try to create datetime with string value try to create datetime with non-dateTime int value Negative cases: create a session with blob attrib create a systemlink session for xenon title create a session with duplicate context attirubte IDs (game_mode) create a session with the same two property attributeIDs. create a session with duplicate default attributes (game_type) create a session with duplicate default attributes (gamer_zone) create a session with duplicate default attributes (gamer_country) create a session with duplicate default attributes (gamer_lang) create a session with duplicate default attributes (gamer_rating) create a session with duplicate default attributes (gamer_mu) create a session with duplicate default attributes (gamer_sigma) create a session without any default attributes create a session without one of the default attributes(bug 27096): the default attributes are not required, if client do not send them, default  values will be used. passing null as value to one of the default attrbitues send a create session request with message length shorter than XMATCH_SESSION message length longer than available bytes create a session with unknown titleID create a session with non-existent context attributeID create a session with non-existent property attributeID create a session with attribute offset inside header create a session with attribute offset beyond available create a session with attribute offset equal to current offset indicate more attribute than available create session with zero-length string attribute create a session with a string attirube whose length is beyond what s available create a session with a string attribute MAXLEN + 1 bytes(null not included) create a session with a string that is not null terminated. invalid case: create a session with a non-existent context value(server won t catch it) create a session with non-existent attributeID UpdateSession: New xrl: xmatchhost2.ashx new data type are being added: int32/int64/float32/float64/dateTime/string blob is not supported as session attributes All schema attributes are allowed to be null. Positive cases: send an updateRequest with attributeID set to X_ATTRIBUTE_DATATYPE_NULL add new int32 attribute (set value for this attribute for 1st time, i.e. change from null to real value) add new int64 attribute add new float32 attribute add new float64 attribute add new datetime attribute add new context attribute add new string attribute update existing int32/64/float32/float64/datetime/context attribute values. update an existing string attribute modify public/private/open/filled slots decrement private/public open slots to zero update gameMode/mu/sigma/lang/country/rating/zone attributes . update gameType with the same value. Negative cases: try to update with blob attribute try to update with a nonexistent context attributeID try to update with a nonexistent property Int32 attributeID try to update with a nonexistent property int 64 attributeID try to update with a nonexistent property float32 attributeID try to update with a nonexistent property float 64 attributeID try to update with a nonexistent property datetime attributeID try to update with a nonexistent property int 64 attributeID try to update a nonexistent string attribute try to update GameType with different value. dwMessageLength is shorter than the actual updateSession request length dwMessageLength is larger than actual dwNumAttributes is smaller than what s actually passed in dwNumAttributes is larger than what s actually passed in. try to update a nonexistent session SearchSession: New xrl: xmatchclient2.ashx full attributeID instead of dataType is returned in searchResults full attributeID instead of dataType is used for all search parameters. search parameters passed on the wire don t have to be in the correct order as they were defined in xlast. All search parameters are allowed to be null new data type are allowed in search parameters:  int32/int64/float32/float64/dateTime blob/string are not allowed in search parameters. no aggregate queries no title defined FindByID queries. Positive Cases: search so that 0 session returned. search so that 1 session with int32/64/float32/64/datetime/context returned. search so that 1 session without custom attributes returned (only gameType and gameMode in the return list). search so that 2 sessions with custom attributes returned. search so that 2 sessions without custom attributes returned. Create one sp that takes  int32/64/float32/64/datetime/context/gamemodetype as parameters,  Use all the above parameters in the filter. Return int32/64/float32/64/datetime/context/gamemodeType/string as final attributes this sp will be used by following tests: pass all non-null parameter to the above sp, but add an additional X_ATTRIBUTE_DATATYPE_NULL search pareamterID with null value pass X_ATTRIBUTE_DATATYPE_NULL as searchParameter IDs to the above query search with dateTime as search parameter and use it in the filter; only max/min/normal dateTime with real value returned in the session (other attributes are null) search with float32 as search parameter and use it in the filter, only max/min/normal flaot32 with real value returned in the session (other attributes are null) search with float64 as search parameter and use it in the filter, only max/min/normal float64 with real value returned in the session (other attributes are null) search with int32 as search parameter and use it in the filter, only max/min/normal int32 with real value returned in the session (other attributes are null) search with int64 as search parameter and use it in the filter, only max/min/normal int64 with real value returned in the session (other attributes are null) search with context as search parameter and use it in the filter,only context with real value returned in the session (other attributes are null) search so that a non-null string attributes returned in the search results pass no parameters to above sp, and all title defined return attributes are NULL. create 2 sessions with different attributes value, pass no parameter to above sp, check all sessions are returned. pass all non-NULL parameters to above sp, and all non-null attributes returned. return max/empty/normal length string attribute in the middle of the attribute list return max/empty/normal length string attribute in the first of the attribute list return max/empty/normal length string attribute in the last of the attribute list End of using the above sp search with a sp that takes no title defined parameters and return only default attributes(i.e.gamemode and gametype and session_value) SameTypefuzzymatch: fuzzy matching with all sessions has the Int32same value as the centerValue dateTimefuzzymatch: fuzzy matching with all sessions has different dateTime values as the centerValue fuzzymatch int32 attributes with float32 center value fuzzymatch: using two sort statements crossTypeFilter: use the following in query filter: int64 with float32;int32 with float64;float64 with int64; float32 with int32. fuzzymatch: comparison attribute on near/far sorts is a constant type.(no xlast support yet) search with a sp that using a schema attribute in a sort criteria, while this attribute is not in the return list. search using a float32,float64,datetime,int32,int64 constants in the filter (no xlast datetime filter support) host session and client are both strictNAT, but having same inaOnline. Session should be returned. host session is strictNAT, client is strict and send FindByID query, session should be returned. PC-based host has NAT=0, which is the same as open, client is Open/moderate/strict session should be returned. host session is open, client is open/moderate/strict, session should be returned. host session is strict, client is open/moderate/strict, only open is returned. host session is moderate, client is moderate/open/strict, moderate/open will be returned. Throtting test: check x-delay header multipleDB: using a title that lives on two db, do the same query twice in a row and check results are different. Negative Cases: pass a parameter to a sp that takes no parameter NInt32SameTypeWrongID1: a sp that takes int32 parameter A as a search parameter; send a query request with int32 parameter B NInt64SameTypeWrongID1: a sp that takes int64 parameter A as a search parameter; send a query request with int64 parameter B NFloat32SameTypeWrongID1: a sp that takes float32 parameter A as a search parameter; send a query request with float32 parameter B NFloat64SameTypeWrongID1: a sp that takes float64 parameter A as a search parameter; send a query request with float64 parameter B NDateTimeSameTypeWrongID: a sp that takes datetime parameter A as a search parameter; send a query request with datetime parameter B NContextWrongID: send context paramter2 to a sp that takes context paramter1 as search parameter try an aggregated query (using aggregated sp index). try to pass a string parameter to a query. try to pass blob parameter to a query pass duplicate parameters search with FindByID and valid sessionID, but wrong(valid) title, no session should be returned. search with FindByID and valid sessionID, but non-existent title, invalid_title_id should be returned. search with FindByID and invalid sessionID, no session is returned search using a nonexistent stored procedure; ivalid_search_request search with unknonn title: invalid_title_id search with dwMessageLength set to less than the required search structure dwMessageLength is larger than actual request length dwNumUsers is larger than max allowed client NAT type is invalid (0/1/2/3 are valid types): invalid_flags are returned. send no search parameter to FindById query send wrong search parameterID to findByID query send a request that s missing all 9 default search parameters send a match request with missing mu/sigma/ZONE/lang/country/rating/mode/type/puid:bug 27096. these parameters are not required, default values will be used if they re missing. pass non-existent parameterID to a search request DeleteSession: new xrl: xmatchdelete2.ashx no other changes. M2 Milestone:  For M2, there is new API added for match: TitleChange.ashx Here is a list of test cases: Positive cases: send a titleChange message with SGAddr set to max value send a titleChange message with SGAddr set to min value call titleChange so that more than 1 sessions will be deleted send batched titleChange messages in one request send mixed batched titleChange messages (half messages are valid; half messages are for nonexistent titleID) Negative cases: send a titlechange message, but set length larger than actual send a titlechange message, but set length smaller than actual send titlechange message with unknown titleID (but match frond door will still returns S_OK) M1 Milestone:  Any test cases that need to talk to matchDB directly will be updated. There is no change expected from matchmaking perspective regarding DeadSG and DeadXBox messages handling. Existing Reusable Test Cases Creating Sessions Valid Cases: 1)   Contains no attributes 2)   Contains a player add attribute Contains a player add attribute but the number of public and private p_matchaces available are both set to zero Contains both a player add and delete attribute for the same player (add attribute first) Contains both a player add and delete attribute for the same player (delete attribute first) Contains a delete attribute for a player that hasn t been added Contains a delete player attribute followed by a global user attribute for the same user Contains a global user attribute followed by a delete player attribute for the same user Contains a global session integer attribute Contains a global session 400-character string attribute Contains a global session 800-byte binary attribute Contains a global user integer attribute Contains a global user 400-character string attribute Contains a global user 800-byte blob attribute Contains a title-p_matchecific session integer attribute Contains a title-p_matchecific session 400-character string attribute Contains a title-p_matchecific session 800-byte blob attribute Contains a title-p_matchecific user integer attribute Contains a title-p_matchecific user 400-character string attribute Contains a title-p_matchecific user 800-byte blob attribute Contains 1000 attributes of various types Maximum title ID Contains an empty string attribute Contains a zero-length string attribute Contains a zero-length blob attribute Invalid Cases: 1)   Message length longer than number of available bytes 2)   Message length only one byte 3)   Message length shorter than minimum size of request Unknown protocol version Public available and private available are both set to 0 Report more attributes than available Set an attribute offset to point inside the header Set an attribute offset to point beyond the available bytes Set an attribute offset to point to current offset Unknown title ID Maximum title ID Contains a global user integer attribute but no PUID Contains a global user integer attribute for a user that doesn t exist in the session Contains a global user 400-character attribute for a user that doesn t exist in the session Contains a global user 800-byte blob attribute for a user that doesn t exist in the session Contains a title-p_matchecific user integer attribute for a user that doesn t exist in the session Contains a title-p_matchecific user 400-character attribute for a user that doesn t exist in the session Contains a title-p_matchecific user 800-byte blob attribute for a user that doesn t exist in the session Contains a string attribute whose reported length is greater than the reported message length Contains a blob attribute whose reported length is greater than the reported message length Contains a string that is one-byte larger than the maximum string allowed Contains a blob that is one-byte larger than the maximum string allowed Contains a string of MAXWORD bytes Contains a blob of MAXWORD bytes Deleting Sessions Valid Cases: 1)   Delete a session with no attributes Delete a session with a title-p_matchecific session integer attribute Delete a session with a title-p_matchecific session 400-character string attribute Delete a session with a title-p_matchecific session 800-byte blob attribute Delete a session with one player and no other attributes Delete a session with one player and no public or private slots available Delete a session with one player and a title-p_matchecific user integer attribute Delete a session with one player and a title-p_matchecific user 400-character string attribute Delete a session with one player and a title-p_matchecific user 800-byte blob attribute Delete a session with a global session integer attribute Delete a session with a global session 400-character string attribute Delete a session with a global session 800-byte blob attribute Delete a session with one player and a global user integer attribute Delete a session with one player and a global user 400-character string attribute Delete a session with one player and a global user 800-byte blob attribute Invalid Cases: 1)   Delete an invalid session Delete session and then send a modification request for it Modifying Sessions Valid Cases: 1)   Modify all existing attributes 2)   Modify only some of the existing attributes Modify none of the existing attributes Add new attributes Decrease public available to 0, where private available is 0 Increase public available to above 0, where private available is 0 Decrease private available to 0, where public available is 0 Increase private available to above 0, where public available is 0 Change the host address Contains a global session integer attribute Contains a global session 400-character string attribute Contains a global session 800-byte binary attribute Contains a global user integer attribute Contains a global user 400-character string attribute Contains a global user 800-byte blob attribute Contains a title-p_matchecific session integer attribute Contains a title-p_matchecific session 400-character string attribute Contains a title-p_matchecific session 800-byte blob attribute Contains a title-p_matchecific user integer attribute Contains a title-p_matchecific user 400-character string attribute Contains a title-p_matchecific user 800-byte blob attribute Contains a delete player attribute for a session that contains user p_matchecific attributes for that player Contains a delete player attribute for a session that doesn t contain that player Contains a delete player attribute for a session that contains that player but doesn t contain any other attributes for that player Contains 100 (or whatever the maximum is) add player attributes Contains an add player attribute for a session that already contains that player Contains an add player attribute and a delete player attribute for the same player (add player attribute first) Contains a delete player attribute and an add player attribute for the same player (delete player attribute first) Invalid Cases: Session ID doesn t exist Session ID exists, but title ID is changed Modify the session from a different Xbox client Contains a global user integer attribute for a user that doesn t exist in the session Contains a global user 400-character attribute for a user that doesn t exist in the session Contains a global user 800-byte blob attribute for a user that doesn t exist in the session Contains a title-p_matchecific user integer attribute for a user that doesn t exist in the session Contains a title-p_matchecific user 400-character attribute for a user that doesn t exist in the session Contains a title-p_matchecific user 800-byte blob attribute for a user that doesn t exist in the session Searching for Sessions Valid Cases: Use the maximum stored procedure index Use the minimum stored procedure index Search with 0 parameters Search with an integer parameter Search with a 400-charachter string parameter Search with a 800-byte blob parameter Search such that 1000 s of results are returned Search with X_SSINDEX_GET_SESSION stored procedure with a valid session ID Search with X_SSINDEX_GET_SESSION stored procedure with a valid session ID but a different (yet valid) title Search with X_SSINDEX_GET_SESSION stored procedure with an invalid session ID Search for a session with one player but no other attributes Search for a session with one player but no public or private available slots Search such that 0 results are returned Search such that results contain a session without attributes Search such that results contain a session with a global integer attribute Search such that results contain a session with a global 400-character string attribute Search such that results contain a session with a global 800-byte blob attribute Search such that results contain a session with a global user integer attribute Search such that results contain a session with a global user string attribute Search such that results contain a session with a global user blob attribute Search such that results contain a session with a title-p_matchecific integer attribute Search such that results contain a session with a title-p_matchecific 400-character string attribute Search such that results contain a session with a title-p_matchecific 800-byte blob attribute Search such that results contain a session with a title-p_matchecific user integer attribute Search such that results contain a session with a title-p_matchecific user 400-character string attribute Search such that results contain a session with a title-p_matchecific user 800-byte blob attribute Invalid Cases: Use a stored procedure index that doesn t exist Use a title id that doesn t exist Use a title id and stored procedure index that both don t exist Use a stored procedure with too few parameters Use a stored procedure with too many parameters Pass a string parameter to a stored procedure that takes integers Pass a blob parameter to a stored procedure that takes integer Pass an integer parameter to a stored procedure that takes strings Pass a blob parameter to a stored procedure that takes strings Pass an integer parameter to a stored procedure that takes blobs Pass a string parameter to a stored procedure that takes blobs Search with X_SSINDEX_GET_SESSION stored procedure with a valid session ID but unknown title Tsunami New Feature Testing: Fuzzy Match Fuzzy matching with all sessions has the same value as the centerValue create 10 sessions with the same 0xaaaa attribute value; pass a center parameter with the same value, check 6 sessions are returned and distanceAttribute for each session is 0 2. Fuzzy matching with all sessions has the different value than the centerValue       create 10 sessions with the different 0xaaaa attribute value(0-9)               pass a parameter with a center value (5) check 6 sessions are returned and distanceAttribute for each session is different Summary Session Data & Attribute Histograms Count aggregate stored procedure:each group only has one member) Count aggregate stored procedure:only 1 group Count aggregate stored procedure:3 groups Count aggregate stored procedure: no session returned Average aggregate stored procedure Average aggregate stored procedure: no session returned Minimum aggregate stored procedure Minimum aggregate stored procedure: no session returned Maximum aggregate stored procedure Maximum aggregate stored procedure: no session returned Total aggregate stored procedure Sum aggregate stored procedure: no session returned (one group returned)Total aggregate sp: use parameters,filters,sort operators (Two groups returned)Count aggregate sp: use parameters,filters,sort operators do the same query against different sessions, check if results are the same do same query against different sessions;wait until cache expires;check if results are the different Allow a title to be on more than one database server Positive: use a title that lives on two databases (0xffed0001) create 2 identical sessions for the title so that they are evenly distributed among the db, then do a same query twice in a row and check the results are different Negative:    the 1st IP in a title s db list is invalid; 2nd is valid; create two sessions for the title and check they re created successfully, and check there should be an warning/error event log? the 2nd IP in a title s db list is invalid; 1st is valid (what should happen?); same as 1. the 3rd IP in a title s db list is invalid. Create 3 sessions and they should be created successfully and there is an warning/error event log. NAT filtering on the server create an open NAT session, then search the session with an open/moderate/strict NAT; check the open NAT session is being returned for all three requests create a moderate NAT session, then search the session with open/moderate/strict NAT; check the session is returned for open/moderate; but no session is returned for strict NAT create a strict NAT session, then search the session with open/moderate/strict NAT; check the session is returned for open; but no session is returned for moderate and strict. create a strict NAT session, then FindFromID query; check the session is returned. Stress Testing M1 Milestone: Since minimal changes are being performed for this milestone, even though there is no official stress testing requirement, it is my goal to establish a TPS baseline for this version of the code. M2 Milestone: TBD Revision History Changes made Author 6/8/04 First Draft Shuyin Zhao Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE  o`oO`D` gdLyx {wowkgwk_g[W[SOS gdrIy gdesA gd/#6 gd~_q gd$w: gd$w: ysymgaX xtxtxtxt gdq=Y gdQR. gdQR. gdQR. gdCTy gdCTy {w{w{w gd-v6 gd=s4 gd}Sb gd}Sb zvrnr gd,8' gd,8' gd,8' gd,8' gdq%. gdZ*h gd+c` gd+c` gdq@s }yrnfb gdesA gd,A] gd7&P gd7&P gd7&P gd7&P  NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\moss\test\MOSS Test Plan.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template Kevin Goodier Xbox Live Test Plan Template.dot Kevin Goodier Microsoft Office Word}nRZR 7 hS^fabjbjqPqP PERLINK \l "_Toc74734280"  Table of Contents  PAGEREF _Toc74734280 \h   HYPERLINK \l "_Toc74734281"  Summary  PAGEREF _Toc74734281 \h   HYPERLINK \l "_Toc74734282"  Schedule  PAGEREF _Toc74734282 \h   HYPERLINK \l "_Toc74734283"  Goals  PAGEREF _Toc74734283 \h   HYPERLINK \l "_Toc74734284"  Non-Goals  PAGEREF _Toc74734284 \h   HYPERLINK \l "_Toc74734285"  Related Documents  PAGEREF _Toc74734285 \h   HYPERLINK \l "_Toc74734286"  Functional Testing  PAGEREF _Toc74734286 \h   HYPERLINK \l "_Toc74734287"  Summary  PAGEREF _Toc74734287 \h   HYPERLINK \l "_Toc74734288"  New Test Cases for M1 Milestone  PAGEREF _Toc74734288 \h   HYPERLINK \l "_Toc74734289"  7.2.1 Positive tests  PAGEREF _Toc74734289 \h   HYPERLINK \l "_Toc74734290"  7.2.2 Negative tests  PAGEREF _Toc74734290 \h   HYPERLINK \l "_Toc74734291"  7.2.3 Security tests  PAGEREF _Toc74734291 \h   HYPERLINK \l "_Toc74734292"  7.2.4 Configuration Database  PAGEREF _Toc74734292 \h   HYPERLINK \l "_Toc74734293"  7.2.5 Catastrophic Failure Test Cases  PAGEREF _Toc74734293 \h   HYPERLINK \l "_Toc74734294"  New Test Cases for M2 Milestone  PAGEREF _Toc74734294 \h   HYPERLINK \l "_Toc74734295"  Existing Reusable Test Cases  PAGEREF _Toc74734295 \h   HYPERLINK \l "_Toc74734296"  Stress Testing  PAGEREF _Toc74734296 \h   HYPERLINK \l "_Toc74734297"  Revision History  PAGEREF _Toc74734297 \h  Summary The Mother of Security Servers (MOSS) is the Xbox Live solution to key management and data protection.  MOSS will be responsible for managing the Xbox Live Master Key and decrypting secrets from the database.  This replaces the current implementation of distributing an environment s Master Key via a protected floppy disk.  The new implementation will store the master key on the MOSS server in an nCipher device. Services will retrieve their encrypted key from the UODB, send the key to the MOSS, which will decrypt it and send back to the service.  This reply is also encrypted using a shared key.   SHAPE  \* MERGEFORMAT  M1 Milestone MOSS is a new component for M1, so this test plan will cover all functional and stress tests. M2 Milestone Schedule Each milestone will have a standard set of test deliverables including: Test Plan Complete   Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete   Functional test code written but not necessarily run against service yet.  Complete implementation of cases old and new outlined in Test Plan. Test Stress Code Complete   Stress test code written but not necessarily run against service yet. Test Functional Test Complete   Function test code modified and running against service.  Functional tests are passing at the defined % for the milestone. Test Stress Complete   Stress code modified and running against service.  Stress tests are performing at the defined transactions per second (TPS) per service API for the milestone. Test Complete   Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff. The dates for these deliverables will be set and managed by the release manager in conjunction with input from test management. M1 Milestone Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases.  There is no required stress testing for M1 so the  Test Stress Code Complete  and  Test Stress Complete  deliverables do not apply to this milestone. M2 Milestone Goals This section lists what will be covered for each milestone. M1 Milestone Test correct functionality of MOSS server. Test security features of MOSS, to make sure servers can only decrypt their own key. Test use of configuration DB. Test error handling. Test internal setup errors. Establish baseline TPS. M2 Milestone Non-Goals This section lists what will not be covered for each milestone. M1 Milestone Consolidation of this server with another will not be tested, as we currently don t know which server MOSS will live on. M2 Milestone Related Documents $corext\private\doc\server\moss\MOSS Security Design.doc Functional Testing Summary MOSS only receives 1 kind of request and only returns 1 kind of reply.  The maximum request size is limited by XRLScan, which will be filtering all requests to MOSS.  There are 2 classes of errors.  It also responds to xmgmtc commands, performs logging, and provides performance counters.  There will be 2 MOSS servers behind a VIP.  Tests will focus on these areas. MOSS is a C# IIS front door server that receives HTTP POST requests.  It does not require an additional database  server components are responsible for obtaining keys from the database.  New Test Cases for M1 Milestone Overview of structures: typedef struct _XLKEY     WORD    _wMasterKeyVersion;           // key version of this key.                                  DWORD   _cbKey;                       // size of the key.     BYTE    _aKey[];                       }   XLKEY; _wMasterKeyVersion   The master key version which encrypts this key.  If the value is 0 then this information is unencrypted.   _cbKey   The number of bytes in the key array.  This value should never be zero. _aKey   the binary key (encrypted or decrypted).  We ll need to verify the size of this buffer using the POST data content length and _cbKey. typedef struct _XLMOSS_REQUEST     QWORD   _qwNonce;                     // the requestor's set Nonce.     DWORD   _cEncryptedKeys;                   XLKEY   _aEncryptedKeys[];             }   XLMOSS_REQUEST; _qwNonce   Nonce setting for the request.  This will probably be a time stamp value.  It is set by the requestor. _cEncryptedKeys   The number of encrypted structures are in the request.  This value should be > 0. _aEncryptedKeys   An array of encrypted key structures. typedef struct _XLMOSS_REPLY     QWORD   _qwNonce;                     // the nonce from teh request.     DWORD   _cKeys;                            DWORD   _cbEncryptedResponse;              BYTE    _aEncryptedResponse[];         }   XLMOSS_REPLY; _qwNonce   Nonce setting for the request.  This will probably be a time stamp value.  It is set by the requestor and copied into the reply. _cKeys   The number of keys decrypted in this reply. _cbEncryptedResponse   The number of bytes in the encrypted response array.  This value should be >0.. _aEncryptedKeys   An blob of encrypted data from the MOSS server.  It can be decrypted with the shared key.  The length of this value should be verified by the Content-Length header and _cbEncryptedResponse field. Header tests Requests are passed as binary structures in the HTTP POST body.  The ACCOUNTNAME HTTP header is used for logging who the requestor is.  Any value is acceptable as it is only used for logging purposes. No ACCOUNTNAME   request fails, MOSS logs error in NT event logs, application log, and trace messages, and will also log the requestor s IP address and port. Non-alphanumeric ACCOUNTNAME   request succeeds, successful app log of name. Typical ACCOUNTNAME   request succeed, successful app log of name. MasterKeyVersion tests The MasterKeyVersion specificied in XLKEY is used to indicate which master key to use for decrypting requests.  The master key is stored on the Ncipher device.  Only one master key should be in use at a given time.  The current master key version in use across the service will be specified as a ConfigDB setting for MOSS. ConfigDB specifies a MasterKeyVersion that does not exist on the Ncipher device.  MOSS will log an error and fail to start up. Request specifies a MasterKeyVersion that is not currently in use.  MOSS will log an event and return an error to the requestor. Positive tests  Tests will be verified by checking the response for the same nonce and a valid key after decryption.  Requests are HTTP POST commands.  The requests will be: 1 key, nonce = timestamp 1 key, nonce = 0 1 key, nonce = max value 2 keys, nonce = timestamp 2 keys, different MasterKeyVersions 1 valid key, 1 invalid key (wrong size, for instance) Negative tests The following tests will be considered malformed HTTP requests by MOSS.  This should never happen except for some type of hack attempt.  MOSS will return an HTTP status code of 404 and log an NT event with the IP and port of the requestor.  The requests will be: 0 keys specified maxint keys specified, attempt to send entire request 1 key, MasterKeyVersion set to invalid value (greater than 1?) 1 key, size of key set to 0 2 keys, size of one key set to 0 Valid 1 key, data sent is too short by 1 byte Valid 1 key, data sent is too long by 1 byte Send random data, random length Configuration Database Each individual setting will be tested as well as global behavior. CONFIGDB_SETTINGS: For each setting in the configuration database, the following three tests will be performed: Initialize   Using the management commands, verify that the setting matches what is in the configuration database after server has initialized.   Reconfigure   Using the management commands, snapshot the current setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take effect (only applies to settings requiring a restart). Undo   Using the management commands, snapshot the current setting then update the database with a new setting.  Again using the management commands, verify that the setting has been tagged as needing a restart of the service to take affect.  Now change the setting back to the original value and using the management commands, verify that it is set back to the original value and does not require a restart of the service. Implementation note: Reconfigure and Undo can be consolidated into one test. MOSS Configuration Settings: Requires Restart [MOSS] UseNCipher=0(false) or 1(true, use the nCipher device implementation).  Default is 1. NumOfAllowServices=The number of service sections to read into the permitted table.  Default is 0. [SERVICE#]  (0..NumOfAllowServices instances permitted) AccountName=The account name that this service will run as.  This cannot be empty. PermittedKeyTypes=Comma delimited list of permitted key type decryption allowed for this server.  This should not be empty. CONFIGDB_NO_CONNECTION: No connection available to configuration server.  MOSS should raise an error and entering a polling loop, waiting for a response. Logging and Event Viewer Manually verify MOSS uses the app log correctly, and that all failures are properly logged in the event log.  This can be done using both the positive and negative tests above and manually verifying the MOSS logs. New Test Cases for M2 Milestone Existing Reusable Test Cases Stress Testing MOSS is used internally by server components requesting decryption of their respective keys.  The services make this request only upon startup.  Thus, performance should not be an issue.   M1 Milestone:  A baseline transactions per second (TPS) will be determined by executing successful requests/replies M2 Milestone:  Revision History Changes made Author 6/10/2004 First Draft kgoodier 7/14/2004 Changed some wording and test cases, based on feedback from informal review. kgoodier Microsoft Confidential. Unpublished work.   2004 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2004 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Server component XKDC, XMACS, UACS,  Step 1.  Request service key from UODB (encrypted) Key (only MOSS can decrypt) Key (only requestor can decrypt) Step 2.  Send encrypted key to MOSS for decryption Key (only MOSS can decrypt) o`oO`o` gdrIy gd*3y gd8Th gd8Th gdQxA gd8Th gd8Th gd8Th xphp]p
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\reporting\xenon_ 68228_design.docx ===
Design Document – Xenon 68228

Author: 
Joseph Szymanski (josszy)
Outline:
This document will outline the design for the system necessary to implement the issue Xenon 68228, which seeks to automatically create partitions for SSAS databases.

Existing system explanation: 
The amount of data that we work with in OLAP cubes, in Sql Server 2005 Analysis Services (SSAS), grows far too fast to run analysis services upon the entire data set at once.  Individual measure group elements of an OLAP cube each have their own partitioning schema, used to select a subset of the data that the measure group draws from.
Consequently, to resolve the problem, relevant data to be analyzed is segregated by date (all data to be analyzed is date-indexed), and, based on a pre-defined periodicity, the data is separated into partitions.
Partitions are defined by a SQL query, which determines what subset of the larger database will be a member of this partition.
An example of such a query is: 
SELECT i_date, bi_user_puid, bi_machine_puid,
i_title_id, bi_offer_id, ti_country_id, dt_date
FROM v_olap_content_xbox1_fact WHERE
i_date>20050701 and i_date<20051001

In this case, we are taking records from v_olap_content_xbox1_fact after from July 1, 2005 and before October 1, 2005.
Finally, this partition is given a name. In the example above, the partition is named “Content_xbox1_2005_q3”. This name indicates the date and periodicity of the partitioning scheme.
This procedure is done manually, for each measure group. When new partitions are needed, which happens periodically, they are manually created.

Problems with the existing implementation (that this work item seeks to address):
This implementation has a number of different problems that require addressing:
Periodicity for partitioning varies both between and within measure groups. Some groups have changed their rate of partitioning, and each group has their own periodicity.
Manual effort is needed as often as twice a year (once per release) to generate new partitions for each measure group.
If, before a measure group partition is used, designers anticipate a different rate of input data and need to adjust the partitioning periodicity, this has to be implemented manually.
Since partition names are manually entered, without a defined schema, the only way to determine the periodicity of a partition is a human analysis of the name.
Since partition names are manually entered, without a defined schema, misspelling and other errors in entering their names can enter the system.
Periodicity of a partitioning scheme for a measure group can change with no record except for a different naming format. Even that new naming format lacks a rigid schema with which to determine its periodicity.
The lack of a defined schema prevents proper documentation of the rationale behind alterations to the periodicity of the partitioning scheme of a measure group.
Adding new partitioning periods (such as weekly) would consume an inordinate amount of work: 	
Manually checking each measure group to determine affected partitions
Scanning each partition that would be affected to assure it is empty
Deleting the affected partitions
Creating the new queries, manually, for each measure group and partition necessary.
Verifying that the partitions were created successfully, and that the queries correctly, and fully, differentiate the data . 
For example, if a partition is defined as “… WHERE i_date>20050701 and i_date<20051001”, and the next partition is defined as “WHERE
i_date>20051001 and i_date<20051201”, you are not analyzing the data for October  1, 2005 – one partition is including everything before that date, and the next, everything after that date. Forgetting to use >= in the next partition, or accidentally adding = to both the previous and next partitions, can cause either missing data or data overlaps.

Implementation of the Work Item:
The implantation of this work item will be a C# 2.0 CLI that will be called from a SQL Server 2005 scheduled task. It will be a program that is safe to run anytime, and will do the following:
Ensure that partitions for the next several months are defined. By default, this time period is three months, but the application will take a command-line parameter allowing the tool to create a different time period (at least one month).
Determine the current date, as indicated on the running computer’s system. 
Access a lookup table (t_measuregroup_partition_regexes) that enables the application to convert any partition name into a date (by converting the string pattern). 

An example of this is the “MultiplayerUsers” measure group that is currently in use. An example partition name therein is: MultiplayerUsers_2005_11. 

This table is how the user will be able to modify the partitioning scheme mid-stream; by changing the latest entry in the partition table, (or manually adding a new partition with the new periodicity), a change to the periodicity can be made. 
Generate the above mentioned lookup table, via the command line parameter “filltable”.


The table’s schema:

vc_ssas_dbname	varchar(50)		
The SSAS database name.
vc_cubename	varchar(50)			
The cube name.
vc_frequency_unit	varchar(50)		
Constrained to “’daily’, ‘weekly’, ‘monthly’, ‘semimonthly’, or ‘quarterly’”. The meaning of these frequency units is defined in the application. 
vc_partition_prefix	varchar(50)		
Provides a prefix to attach to each partition, as a descriptive name.
vc_query_def		varchar(2500)
The  SQL query that defines the partition
I_startdate		int
The starting date of the partition.
I_enddate		int
The ending date of the partition
vc_query_base_table	varchar(250)
This is an extremely important field. It determines the base table for which the partition queries. We use this to determine if a pre-existing table needs to be converted to use the reportarchivedb data source.

Here is a sample table for t_measuregroup_partition_regexes:


In the source code for the application, objects exist defining the periods ‘weekly’, ‘monthly’, ‘semimonthly’, ‘quarterly’, and ‘daily’. 
With this data, the program can use the command line argument <number of months> to determine how many partitions to create, and an internal C# algorithm (defined for monthly, semimonthly, and quarterly – the acceptable values of vc_frequency_unit) to determine how to name the partitions, connect to the database, and generate the partitions, when called upon.
For each server/cube combination in the database:
Access the cube in C#.
Enumerate the list of measure groups. 
Confirm that there are no differences – that there are no measure groups that exist in the table that do not exist in the database, and vice versa. Specifically, if a measure group exists on the database, and is not defined in the table, this needs to be handled as an error, except if the measure group has no date information – in which case not having a table entry is acceptable.
Convert each partition name into a date, and confirm that that date is either:
In the past, for legacy partitions
Within a date range as defined in the table.
If there is any failure, abort processing, and provide proper error logging, including an NT error event.

For each measure group partition, analyze its name (via a lookup table as explained earlier), and determine if it is in the future. If so, check to make sure that it is empty, and if empty and in the future, delete it. If it is not empty, but in the future, log this fact as non-fatal.
Via the command line parameter “cleanfuture”, for development and testing only, delete all partitions that are in the future.
For each partition whose end date is in the future,  look up the Partioning Type (part of the configuration we copied at startup), and using the partitioning type information, start dates, and end dates, programmatically instruct the SQL server to create the partitions via the query text provided.
For each partition whose end date is in the past, the overall goal is to change the query defining the partition to reference the reportarchivedb database, instead of the reportingdb database.
(This can also be done, without creating new partitions, by the command line parameter “archival”.)
 This is done by the following steps, run for each partition in the past:
Determine if the query, as exists, references the reportingdb database, and returns no results.
If this is the case, change the query to reference the reportarchive database, and see if it returns any results (select top 1 from <original query, against the reportarchive database).
If the reportingdb version has no results, and the reportarchivedb version does, alter the partition’s data source to reference the reportarchivedb database.
Log the results, error if necessary, and clean up connections, etc.

For the user of this tool, how do you change a partitioning type, mid stream?
First, you need to determine the beginning of the period for which you want to make the change. For example, if you want to change to quarterly, you need to make the change effective starting on the beginning of the quarterly period (1/1, 4/1, 7/1, 10/1). Otherwise, you will have a gap where you have no partition covering the date period before the beginning of the new frequency unit. 
 To make the change, alter all entries in the table t_measuregroup_partition_regexes , and change the vc_frequency_unit to the desired frequency, after the certain date.
An example SQL script to accomplish this:
update t_measuregroup_partition_regexes set vc_frequency_unit = 'quarterly' where vc_ssas_dbname = 'olaprdb' and vc_cubename = 'Usage'
 and vc_measuregroup = 'MultiplayerUsers' and i_startdate >= 20070401

This would change the MultiplayerUsers measure group, starting on 4/1/2007, to use the “querterly” partitioning type.



Note the following error/success codes for use in automating this tool:

CREATE_NEW_PARTITIONS_SUCCESS = 1 (Creating partitions succeeded)
FILLTABLE_SUCCESS = 2;		(Filling in the table worked)
CLEAN_FUTURE_PARTITIONS_SUCCESS = 3; (Deleted all future partitions worked)
ARCHIVE_OLD_PARTITIONS_SUCCESS = 4; (Archiving partitions worked)

Failure codes are the negative of the cooresponding success code.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\test\XkdcSiteBalancerTestPlan.docx ===
[Content_Types].xml  4_=9% KON=~ _rels/.rels  word/_rels/document.xml.rels  word/document.xml $JS_K BxRr` D8h`5 Kb|{o T@s;y lZYgq (IPMFv1 -pb!7C[ \oUiw )'RTU )L%F6iBOj _!:NM -3W:l ~K_o5 dPcx$ Hf  C k_H?^ LI!_; *#}Q  {#y}Y@x jWBeO ']+5N I8EK0i H,a/A xER\su uw0p65?C/ word/endnotes.xml word/footer2.xml >fggG [e*mTI irlv' PKMKq word/footer1.xml mQSAl AI[3m;4 >rfkZ" ~"x$7G word/header1.xml ;mKc5e word/footnotes.xml oo6]Z word/header2.xml ;mKc5e word/media/image1.png  cHRM IDATx 4kX6d "Qu"f> @IQT< 3+#+R .iAcMy7 9Q}9) #+;30Q FAn9I 7g?~V WZEH_DH s)6G{ _"J2z A]^VpEN (M|P! GM|Z' ;fqU?`U0 ;rs)h@ 2|=xq 3G/nd` "8FPS CC@YP' PDm/; >\=}q ~K0sZ?b} z~|e} 1c3rkbPE|{ o\_~A s,s-;j ~2pr} nQ/7U vfV.` AfnnE 9XX8Xx8xX8@{ ?ffP? Nffc^ 9yA#' +ni`f /.NVi N-z}d Asl<l word/theme/theme1.xml w toc'v 3Vq%'#q :\TZaG IqbJ#x T[XF64 word/settings.xml X&gX3 zu<mv o>=lw qPsO<[3u 5>&<mk]b "%J+8 (-m0u @\p#H }M?g7 `|c;>( 2D6@c =NY~(R <pF-eW8  *zEI >SEqX htJ*. &[i*q^9 HE:SE ;U}qa\ i\=ST <X[5nF; ?WjX8 Me{\{ "WwPG,  i -U uK7u?\ g$<]W word/_rels/settings.xml.rels c8#E7 customXml/itemProps2.xml  docProps/custom.xml  docProps/app.xml  &/1`- %8S$#JOK k\ftE Pm8?> .om~f< customXml/itemProps1.xml  customXml/_rels/item4.xml.rels  :]rM~l customXml/_rels/item3.xml.rels  :]rM~l customXml/_rels/item2.xml.rels  customXml/_rels/item1.xml.rels  customXml/item2.xml  customXml/item1.xml  R. +7n *Bnb+f word/fontTable.xml UIND= al@mO MNmMn' ]7ubh Mbb>d `{#tT |J]"6 customXml/item3.xml  JJ$Z+v 86j%hn EdF4} -FbDa customXml/itemProps3.xml  %$zQL vLSD# Dty{s customXml/item4.xml  customXml/itemProps4.xml  y#bB? word/numbering.xml t|:~< -$>L\. DxL_d x<mT_ kVAih q>A_VoYj Zca?Y Khgyu $,Bl[DFY *=$nT6  1 W&TFs "mql] P#1:]0 6S(A7 "gHjG1 3rrq< ++4=R $#(chB TB`l,{ dyY:l f4!b5P} word/styles.xml 076~~ m.85yQ w1l@3 qzG"= )sP.&E4 /bO=w HKl0zF- .b{O' -'KO&  j!_fkZZ E<*[qZ5W '2;QAh Cwm7Y :xZJ. k(8Z= word/webSettings.xml c*+{> docProps/core.xml  BwGVRJb m;ig] Kg5S& [Content_Types].xmlPK _rels/.relsPK word/_rels/document.xml.relsPK word/document.xmlPK word/endnotes.xmlPK word/footer2.xmlPK word/footer1.xmlPK word/header1.xmlPK word/footnotes.xmlPK word/header2.xmlPK word/media/image1.pngPK word/theme/theme1.xmlPK word/settings.xmlPK word/_rels/settings.xml.relsPK customXml/itemProps2.xmlPK docProps/custom.xmlPK docProps/app.xmlPK customXml/itemProps1.xmlPK customXml/_rels/item4.xml.relsPK customXml/_rels/item3.xml.relsPK customXml/_rels/item2.xml.relsPK customXml/_rels/item1.xml.relsPK customXml/item2.xmlPK customXml/item1.xmlPK word/fontTable.xmlPK |J]"6 customXml/item3.xmlPK customXml/itemProps3.xmlPK customXml/item4.xmlPK customXml/itemProps4.xmlPK word/numbering.xmlPK word/styles.xmlPK word/webSettings.xmlPK docProps/core.xmlPK
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\kdc\test\XkdcFlashVersionLoggingTestPlan.docx ===
[Content_Types].xml  4_=9% KON=~ _rels/.rels  word/_rels/document.xml.rels  word/document.xml y~x{V `n8PF Wi*}'u ?'8dx4{ ;)-E1N h(f!"4 m~w/n ,yq|* 8l}.n -8pOm< ZI:|sO a/5v$s f+gE%+ ) PD8R` ")oVq_ >8H/U\ FQt7u `F9o9k0 C{*8' ?Q1O6 Lql:{ e8p{Q 2o%0K =uS<q /2:J~ {V.),e :mY2UG #q'NxK u2;^< e7[=^ $EdlI ub A>{ c2_cU ;chGCz hu.Pd cMLJS9 X<IS* 0J?K& word/endnotes.xml word/footer2.xml >fggG RULnr word/footer1.xml +6=H{l ,}hr; !x$W{ word/header1.xml ;mKc5e word/footnotes.xml )0"%{ D3i&L word/header2.xml ;mKc5e word/media/image1.png  cHRM IDATx 4kX6d "Qu"f> @IQT< 3+#+R .iAcMy7 9Q}9) #+;30Q FAn9I 7g?~V WZEH_DH s)6G{ _"J2z A]^VpEN (M|P! GM|Z' ;fqU?`U0 ;rs)h@ 2|=xq 3G/nd` "8FPS CC@YP' PDm/; >\=}q ~K0sZ?b} z~|e} 1c3rkbPE|{ o\_~A s,s-;j ~2pr} nQ/7U vfV.` AfnnE 9XX8Xx8xX8@{ ?ffP? Nffc^ 9yA#' +ni`f /.NVi N-z}d Asl<l word/theme/theme1.xml w toc'v 3Vq%'#q :\TZaG IqbJ#x T[XF64 word/settings.xml zu<mv z}&lN ,U9M3 dFr0y 9Z}l|Nk QJEmi a;j1QV> 6Wbk< TUF]%- wm3j1 6Ka}a; PjF#Di y ;]q# gNv ; IdUHr b^BNh `LW!&s v{2yb/zR {RZ9O+ 8rfhV <rf}P '"sE, eRqOWe Up<k$]1 {V[Q$ pmJ+r word/_rels/settings.xml.rels c8#E7 customXml/itemProps2.xml  docProps/custom.xml  docProps/app.xml  (8C9Y H\h@5 4Fa3"  J@@@ $>?\, customXml/itemProps1.xml  %$zQL vLSD# Dty{s customXml/_rels/item4.xml.rels  :]rM~l customXml/_rels/item3.xml.rels  :]rM~l customXml/_rels/item2.xml.rels  customXml/_rels/item1.xml.rels  customXml/item2.xml  |J]"6 customXml/item1.xml  JJ$Z+v 86j%hn EdF4} -FbDa word/fontTable.xml UIND= al@mO MNmMn' ]7ubh Mbb>d `{#tT customXml/item3.xml  R. +7n *Bnb+f customXml/itemProps3.xml  customXml/item4.xml  customXml/itemProps4.xml  y#bB? word/numbering.xml t|:~< -$>L\. DxL_d x<mT_ kVAih q>A_VoYj Zca?Y Khgyu $,Bl[DFY *=$nT6  1 W&TFs "mql] P#1:]0 6S(A7 "gHjG1 3rrq< ++4=R $#(chB TB`l,{ dyY:l f4!b5P} word/styles.xml 076~~ m.85yQ w1l@3 qzG"= )sP.&E4 /bO=w HKl0zF- .b{O' -'KO&  j!_fkZZ E<*[qZ5W '2;QAh Cwm7Y :xZJ. k(8Z= word/webSettings.xml c*+{> docProps/core.xml  ?DNE1C1 [Content_Types].xmlPK _rels/.relsPK word/_rels/document.xml.relsPK word/document.xmlPK word/endnotes.xmlPK word/footer2.xmlPK word/footer1.xmlPK word/header1.xmlPK word/footnotes.xmlPK word/header2.xmlPK word/media/image1.pngPK word/theme/theme1.xmlPK word/settings.xmlPK word/_rels/settings.xml.relsPK customXml/itemProps2.xmlPK docProps/custom.xmlPK docProps/app.xmlPK customXml/itemProps1.xmlPK customXml/_rels/item4.xml.relsPK customXml/_rels/item3.xml.relsPK customXml/_rels/item2.xml.relsPK customXml/_rels/item1.xml.relsPK customXml/item2.xmlPK |J]"6 customXml/item1.xmlPK word/fontTable.xmlPK customXml/item3.xmlPK customXml/itemProps3.xmlPK customXml/item4.xmlPK customXml/itemProps4.xmlPK word/numbering.xmlPK word/styles.xmlPK word/webSettings.xmlPK docProps/core.xmlPK
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\billing\useraccount\test\UserSubscriptionChangedNotificationTestPlan.docx ===
[Content_Types].xml  4_=9% KON=~ _rels/.rels  word/_rels/document.xml.rels  word/document.xml '9_DfR fwdG_' =}&}_~ Dx1(qp qpP?c _Wz|a r1g}h J8K#rWS6 cwlGv L]:8$ ^;8R'0 F%F*1 o+j64^ kQWan Mi.hd u!>\hR +.}9_ BqHm7 0W-ng AiBj[ \`n{-{ V@]/c!mi MDa3i rl]v. C@^*% #&2.^ 9d_;r]) #SW7>J Be=rm N"|nx OEuij Aes): 2c%T+9g PoO{0 edZ:5 oGo0; "4@?tl <m^e*V FDp@)P 9]EQ}w Q6-RM yzxpxp $#L(iY KHR$/ hy#hs RgfE"$ oRraZ ]-u0G !?@"` 'jBQ> u=SEa KE]ej0 N-q|*# cjP>$ aO-jf ""o)/ ,MMGG 6%MIF KMR0u i^qHn )+Iaq w>Tb=M =r~\> QW47Q gut<'# rzr3N word/endnotes.xml word/footer2.xml word/footer1.xml p8sd" word/header1.xml 8?[wY]bBj word/footnotes.xml grZWUUw w)y}y word/header2.xml 8?[wY]bBj word/media/image1.png  cHRM IDATx 4kX6d "Qu"f> @IQT< 3+#+R .iAcMy7 9Q}9) #+;30Q FAn9I 7g?~V WZEH_DH s)6G{ _"J2z A]^VpEN (M|P! GM|Z' ;fqU?`U0 ;rs)h@ 2|=xq 3G/nd` "8FPS CC@YP' PDm/; >\=}q ~K0sZ?b} z~|e} 1c3rkbPE|{ o\_~A s,s-;j ~2pr} nQ/7U vfV.` AfnnE 9XX8Xx8xX8@{ ?ffP? Nffc^ 9yA#' +ni`f /.NVi N-z}d Asl<l word/theme/theme1.xml F{oc' FPA}H xME$& ~\QYo+ +ek<l )Q+hkk dB|ULvaD +@Ya)hgm word/settings.xml DWWee i}8^F lgi<_i \QZR}  JUm3?Y l\_CW X f|n NRG>ZR \Uq ; \F-|rM lQrp~ 4D`\[v 2]Otr  #Y@- (MS 3?%Q' ~o436Gw :Rxn7 xeBJ(j x4UP/ yxlVQ ACT08 z{y~| 3syf^ word/_rels/settings.xml.rels customXml/itemProps2.xml  {#=m{ docProps/custom.xml  1Vh&uK g^>tB docProps/app.xml  t]WDS<[ ]3Wf) !o&d-dC)p IoqI- customXml/itemProps1.xml  k8Z;E customXml/_rels/item4.xml.rels  :]rM~l customXml/_rels/item3.xml.rels  :]rM~l customXml/_rels/item2.xml.rels  customXml/_rels/item1.xml.rels  customXml/item2.xml  customXml/item1.xml  word/fontTable.xml *okb: E5I2\ /W[<g +_9I4W )-vZI customXml/item3.xml  /-JN-V cTpjNjrIjJpIeN customXml/itemProps3.xml  ,gH(d--tU f5y<UOD0 customXml/item4.xml  t6'd= &c!7&v haDN+ [j+v7F Z+vZC J@Gh# rx G}N1 customXml/itemProps4.xml  lLtw?:@ vB~KXo word/numbering.xml wo>mN &&<UO n($KWP{ B>N&" y,V]\ y4VSdAH {V. r ~@u'Bw %HfH/ R%PBt !dRz6 p?R-J0 ,;963' SOO1= >T*0g z6'P$ ,FBf( FpN,# _;)Xp] KV Z'8 +q20y[N^2o E6#2Q_`5 XN(r6 word/styles.xml .<aa^ .K^}ZV; "j\4P) '`&B{ zX'bj |/7_X y|Y#KG |p!#W =8CfId7,c~ ~Vs[4 rwkjL 1t<*[qX QGg6ifW !9-CS word/webSettings.xml M;TCP GVHJK U8;;~ docProps/core.xml  ZgUQf r7r_C.M B,M1LO 93'SH< )nd*f) [Content_Types].xmlPK _rels/.relsPK word/_rels/document.xml.relsPK word/document.xmlPK word/endnotes.xmlPK word/footer2.xmlPK word/footer1.xmlPK word/header1.xmlPK word/footnotes.xmlPK word/header2.xmlPK word/media/image1.pngPK word/theme/theme1.xmlPK word/settings.xmlPK word/_rels/settings.xml.relsPK customXml/itemProps2.xmlPK docProps/custom.xmlPK docProps/app.xmlPK customXml/itemProps1.xmlPK customXml/_rels/item4.xml.relsPK customXml/_rels/item3.xml.relsPK customXml/_rels/item2.xml.relsPK customXml/_rels/item1.xml.relsPK customXml/item2.xmlPK customXml/item1.xmlPK word/fontTable.xmlPK customXml/item3.xmlPK customXml/itemProps3.xmlPK customXml/item4.xmlPK customXml/itemProps4.xmlPK word/numbering.xmlPK word/styles.xmlPK word/webSettings.xmlPK docProps/core.xmlPK
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\GI\Avatar Storage Design.docx ===
[Content_Types].xml  4_=9% KON=~ _rels/.rels  word/_rels/document.xml.rels  word/document.xml {!n^D .Rze7 i?P?Nb K9pRGLb g7Ic/u `c1{B fY2Z~ =_/`< Xe9ZJ 9aDT^b} WP0eFv! G{P=j Hi.{ge bH~A? W"SM^ =eTV0 d,Fu2 :DIbm1yZ zIGjK`1<w p[EC} |,<'e 7h /.Dr \/tb_n( >!RMJ @+6{-a<E> D22C.sf s0/T! w+ "' "L.?t PK~vbyKG Q?& Y iGoz_ mlHR, C!FCY ;?F0*D g~AVY P*d:) (MYv\ NNNYA sj-Q3De EzG#v IiTEb* 5YQoZ z)|h:;K yaXh: X/tj9 Qo||+B 4ypx. .Z#h}8BTl Uki$4 word/endnotes.xml *f?k3 o[2(K EQGHa ^#Bt2 word/footer2.xml P@4jR >\^Ps >sit& word/footer1.xml nQ]$kwgwfG )MXL2 word/header1.xml _|ZwiS )M%$ke f0<<xc/ W=f(IV word/footnotes.xml C7hD@jQ AYJ.vG word/header2.xml eMe"`K word/media/image1.png  cHRM IDATx^ Mooo{ )~?ND q5;k) ,JIPf* fqJ*%'-" 4.q$MJ b2"hT (|(A9 $P|\< Hnr'i T]UEH[i j3g72x0Y;X sYT+5 R__/x zJM'N &JFR~ W='&& Cg)6{ P$fD+V Ac@L# V7(nz"*b $3Y.P* M(Ghj (dGcV miu*m= |f)J  "8Eoll )s)&9 .iX,x 7a0v,; HMM}- (bf&T -.*"<CNX q}zCI 9dt,n $7<+w jshxo :6dZZ '.7?] 9N{{< gvo+4 ~C\Bb? aY}Sk 1{\,k 3_G+R: 6~r'ir? 7tee/ Z|uBf JmgUp\ Ga!Qf ]\YUS word/theme/theme1.xml w toc'v 3Vq%'#q :\TZaG IqbJ#x T[XF64 word/settings.xml LZ$mQ'? 9gd};1 }[-R' \[w=Dv $Gs*) 4hi)nA i#2]n word/_rels/settings.xml.rels customXml/itemProps2.xml  &q`b=w docProps/custom.xml  docProps/app.xml  customXml/itemProps1.xml  0(![+V-M ) customXml/_rels/item4.xml.rels  :]rM~l customXml/_rels/item3.xml.rels  :]rM~l customXml/_rels/item2.xml.rels  customXml/_rels/item1.xml.rels  customXml/item2.xml  customXml/item1.xml  Eew|e word/fontTable.xml UA|dbO& uuA9QLB 2%;f,/N k[0\w &HGgO customXml/item3.xml  ,xSRM customXml/itemProps3.xml  customXml/item4.xml   $x8d1 %36': Y.XJJ Iox=N Q 8-`G8 +Q2%v~ customXml/itemProps4.xml  #wh,\! 11xxu =2bo6c word/numbering.xml )a-\GE 3bL!1 @%iNg VwJ|z /}SM( n2sB]i v$Mx~> [FC&w 0`QDs |4JY0` L-X&f{ *xK4$ =4G`V 3Ms4G\/ CFU}_) |w&Nz9 Qz)]) qa)E4N $G':Q q%Mx{ J-x{K . l26 ];&s2NB m-RS, s4M:%G#6 &m#^$ OSR^LIy1% word/styles.xml `0;KI gu0)hl -rVPI `le5N 7ZHqVP }c-y[ y[HqVP 9sC-y 1>;y[HqVP  9U%o OdGRH#" p1Z_` DUxuQoOo vt(3# (.vw8 Sdu2>U- KjrCp ' WD.Ic| b[pZl z@?|: .F(E5 word/webSettings.xml docProps/core.xml  S?j*u|+ [Content_Types].xmlPK _rels/.relsPK word/_rels/document.xml.relsPK word/document.xmlPK word/endnotes.xmlPK word/footer2.xmlPK word/footer1.xmlPK word/header1.xmlPK word/footnotes.xmlPK word/header2.xmlPK word/media/image1.pngPK word/theme/theme1.xmlPK word/settings.xmlPK word/_rels/settings.xml.relsPK customXml/itemProps2.xmlPK docProps/custom.xmlPK docProps/app.xmlPK customXml/itemProps1.xmlPK customXml/_rels/item4.xml.relsPK customXml/_rels/item3.xml.relsPK customXml/_rels/item2.xml.relsPK customXml/_rels/item1.xml.relsPK customXml/item2.xmlPK customXml/item1.xmlPK word/fontTable.xmlPK customXml/item3.xmlPK customXml/itemProps3.xmlPK customXml/item4.xmlPK customXml/itemProps4.xmlPK word/numbering.xmlPK word/styles.xmlPK word/webSettings.xmlPK docProps/core.xmlPK
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\Presence\Xenon Presence.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKS Document Description Type of Document Status Date Created Xenon Rich Presence & Affiliates Design Feature Spec rough draft 2004-09-08T00:00:00ZXbox Online Spec Template Jerry Johnson Xbox Live Feature Spec Template.dot Peter Hansen Microsoft Office Word<?xml version="1.0"?><XrML version="1.2" xmlns=""><BODY type="Microsoft Rights Label" version="3.0"><ISSUEDTIME>2004-12-03T17:14</ISSUEDTIME><DESCRIPTOR><OBJECT><ID type="MS-GUID">{8AE783DB-19F3-469B-813D-8B55F6A3C875}</ID><NAME>LCID 1033:NAME Do Not Distribute:DESCRIPTION Permission is currently restricted. Only specified users can access this content.; </NAME></OBJECT></DESCRIPTOR><ISSUER><OBJECT type="Group-Identity"><ID type="Windows">S-1-5-21-2127521184-1604012920-1887927527-30086</ID><NAME>phansen@microsoft.com</NAME></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">A8F364qaoKqNiLkQE6Um+OFkvP+97RwhdYuXKL1yi3XwXtc/MGsbaIsy9shjQ5FG2I9v5IzSVC3nYAprKllg+j8vuTyFxCFQqdJtOvLwbugt+dIg1mxRWRt6GZbR5irguB0bcGmX8VuDKnBSNdpymgmTukjHF3WIAIUecpkqCKY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="SDK" value="3.0.3281.0" /></ISSUER><DISTRIBUTIONPOINT><OBJECT type="License-Acquisition-URL"><ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights/_wmcs/licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><DISTRIBUTIONPOINT><OBJECT type="Extranet-License-Acquisition-URL"><ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs/Licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><ISSUEDPRINCIPALS><PRINCIPAL internal-id="1"><OBJECT type="MS-DRM-Server"><ID type="MS-GUID">{aaa331f3-e659-4ea9-876b-e8b25c7b4996}</ID><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs</ADDRESS></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">oxyxbUguymFHLhu80EH9m62c2XLFXbjm87KlEbSFQkieurr8RZgvtEMWdg6jMAkLJ7xPnWs3hEjOHw99irwZ1g5Z+6yYgktWlKibmPs5Lpamd6v53R40fKES/HNWdjbc68xN9tyfts4pOfyJxT5Xgo0rHVset+rDgShE9B3JQbY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="Server-Version" value="1.0.3012.0" /><SECURITYLEVEL name="Server-SKU" value="12345-123-0000007-18968" /><ENABLINGBITS type="sealed-key"><VALUE encoding="base64" size="1536">BEumDnuIlHJfJn+1haqF24sE1jbRyyRHhAcvOWaitHgv/jBZswOew5R8816X1/Xkhz9OiZ9u06BKEHnTKqTIxmfespqHBss7AIZ6xWBRxB0Vq2z7zs/9cYmvXMkoNI5hpK/YoXF0+7vSA5KsNVsJHAwNlTEKYgKs0cfLu4yddD1d9gLbLla1qpitP/uCdZXR3Ctv/1+H8I8EFlVpuMCeUmqc4HOhgHnMsqxQQV+iCSR39A/o6JNmYXjtiqNszN8T</VALUE></ENABLINGBITS></PRINCIPAL></ISSUEDPRINCIPALS><DISTRIBUTIONPOINT><OBJECT type="Referral-Info"><ID type="MS-GUID">{81C42010-208A-458A-BAB6-C3C60F06DD5F}</ID><NAME>Author</NAME><ADDRESS type="URL">mailto:phansen@microsoft.com</ADDRESS></OBJECT></DISTRIBUTIONPOINT><WORK><OBJECT type="Microsoft Office Document"><ID type="MS-GUID">{E3F9366B-7654-4862-8CB8-B9EB4E4DA808}</ID><NAME>Microsoft Office Document</NAME></OBJECT><METADATA><OWNER><OBJECT><ID type="Windows" /><NAME>phansen@microsoft.com</NAME></OBJECT></OWNER></METADATA></WORK><AUTHENTICATEDDATA id="Encrypted-Rights-Data"></AUTHENTICATEDDATA><POLICYLIST type="exclusion"><POLICY><OBJECT><ID type="filename">winword.exe</ID><VERSIONSPAN min="0.0.0.0" max="11.0.4919.0" /></OBJECT></POLICY></POLICYLIST></BODY><SIGNATURE><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><DIGEST><ALGORITHM>SHA1</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="160">fT7VRGJJQ/Ednrxdn6a5eC7sPyc=</VALUE></DIGEST><VALUE encoding="base64" size="1024">jgXyhyeFjOUCr08LtrvBmXRGlrL2zKfi28J5QfJiHCloIxe2Ip1hvrhFiov4nxza7vL2B3U0JlPjaaF8qQ4001SMZI15UhmEzHsFO/WKkyJb4n9yqoUr9EPDj/9/d5HB0Ph59Z6i6K5g0Kn+TAlpHa7oOJxrEaX15bLTZV1Iv84=</VALUE></SIGNATURE></XrML><XrML xmlns="" version="1.2"><BODY type="LICENSE" version="3.0"><ISSUEDTIME>2004-11-05T00:52</ISSUEDTIME><DESCRIPTOR><OBJECT type="Client-Licensor-Certificate"><ID type="MS-GUID">{dbcf103c-dd15-4bf4-b91f-6696be6f7d4c}</ID></OBJECT></DESCRIPTOR><ISSUER><OBJECT type="MS-DRM-Server"><ID type="MS-GUID">{aaa331f3-e659-4ea9-876b-e8b25c7b4996}</ID><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs</ADDRESS></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">oxyxbUguymFHLhu80EH9m62c2XLFXbjm87KlEbSFQkieurr8RZgvtEMWdg6jMAkLJ7xPnWs3hEjOHw99irwZ1g5Z+6yYgktWlKibmPs5Lpamd6v53R40fKES/HNWdjbc68xN9tyfts4pOfyJxT5Xgo0rHVset+rDgShE9B3JQbY=</VALUE></PARAMETER></PUBLICKEY><SECURITYLEVEL name="Server-Version" value="1.0.3012.0" /><SECURITYLEVEL name="Server-SKU" value="12345-123-0000007-18968" /></ISSUER><DISTRIBUTIONPOINT><OBJECT type="License-Acquisition-URL"><ID type="MS-GUID">{0F45FD50-383B-43EE-90A4-ED013CD0CFE5}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights/_wmcs/licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><DISTRIBUTIONPOINT><OBJECT type="Extranet-License-Acquisition-URL"><ID type="MS-GUID">{94BF969A-CA04-44d6-AA96-51071281FEF2}</ID><NAME>DRM Server Cluster</NAME><ADDRESS type="URL">https://corprights.microsoft.com/_wmcs/Licensing</ADDRESS></OBJECT></DISTRIBUTIONPOINT><ISSUEDPRINCIPALS><PRINCIPAL internal-id="1"><OBJECT type="Group-Identity"><ID type="Windows">S-1-5-21-2127521184-1604012920-1887927527-30086</ID><NAME>phansen@microsoft.com</NAME></OBJECT><PUBLICKEY><ALGORITHM>RSA</ALGORITHM><PARAMETER name="public-exponent"><VALUE encoding="integer32">65537</VALUE></PARAMETER><PARAMETER name="modulus"><VALUE encoding="base64" size="1024">A8F364qaoKqNiLkQE6Um+OFkvP+97RwhdYuXKL1yi3XwXtc/MGsbaIsy9shjQ5FG2I9v5IzSVC3nYAprKllg+j8vuTyFxCFQqdJtOvLwbugt+dIg1mxRWRt6GZbR5irguB0bcGmX8VuDKnBSNdpymgmTukjHF3WIAIUecpkqCKY=</VALUE></PARAMETER></PUBLICKEY></PRINCIPAL></ISSUEDPRINCIPALS><WORK><OBJECT type="Client-Licensor-Certificate"><ID type="MS-GUID">{dbcf103c-dd15-4bf4-b91f-6696be6f7d4c}</ID></OBJECT><RIGHTSGROUP name="Main-Rights"><RIGHTSLIST><RIGHT name="ISSUE"><CONDITIONLIST><TIME><RANGETIME><FROM>2004-10-31T00:53</FROM><UNTIL>2005-11-01T00:53</UNTIL></RANGETIME></TIME><ACCESS><PRINCIPAL internal-id="1"><ENABLINGBITS type="sealed-key"><VALUE encoding="base64" size="6144">14qc8XCLqpdyfqqadA48nWNRzUBhGtRuoH9aYkFGzPCeFnmG+/rYsrk7PuBQLeMxG0ezY68WkL+QSw8Bgs3G5LZN5x/8e1d8soZWz9SB3K+fnsD3KgqLKSW7Yi4Naan9K3GjPyDI4mFEuyLVSQnZZeGv3wQeFhXNQk++Z0wNrr0J6ufsb+5LnVNTXA80cMUuxm6U5uNEx5zwSJYwJ0awDDF7X0x32O07MbK9gdOdeJnjtyFdzfhHGXGReGNhidJTrrjaH6iugfWt//CXbnD5/e4VxXZEXla707Ua/m0i6CuNI1t5gpYjvSHYuFbthwkvBpjT1id1hO9JkPNYMIPN2vwaORlsXB+cx+wIQmKgeF2Cg4+kb+awFnoeDgstvUa3dsoyBCo4Y7lrhm601HqUUdImlsjI55tUZDIl1MGdaOIfaJecSmJzPBEBW+o3d/j7gm7ax3y6CeIoy/eQ4yddXwsSqcnO5Z+aK+4WP6iT9nBz26E2hrkgbpBA1HNh6EjXxMfp6eM2nlwnLCOlABRyWCdilwzZdaOI1lc6fqfQjKz/WtgnXsVQ4a4ZuU8sB66r1xeTmfKn0sNL0ZWaBl42rdYQJ2RqkyjtFBsE/3CqIpTphsfNjO4N/E2IzYU1nJ18bwZ9cmx7wk0gV+i23MUKDLYlqEH9Mv5JY5sTsBoGTwBD1wN/o7ADG/0EKou+YXeZ7xER9bz1v4u0FtAnhvOfZzLbefpQ2Js3Dx0qRAhwpSZdtRa8/A97uo3VoASEGGj0qVfXO8ivlLZYNODdDtlGl2JdFP2LY4mc7pHcjOmnTw12rk3nlA/HDjCXNLKKis3SKXe0EbfpO7ubPhOoJHVOylreNwJisSAfcGzXlGC9/GGtJBgq3FJQJUBaFiEaq2YEOLF05EJoiA8uuwopMIoVafZdEcHFrm9+RqzObymBZqCXL1hlVI4GNkx4CpmBpfHbhmoSA05Qp/anIyKQs05cPGehwG8VUJ/SFPRPduoSVjnpcx4aAFfF8QgP+kZVPqgQ</VALUE></ENABLINGBITS></PRINCIPAL></ACCESS></CONDITIONLIST></RIGHT></RIGHTSLIST></RIGHTSGROUP></WORK></BODY><SIGNATURE><DIGEST><ALGORITHM>SHA1</ALGORITHM><PARAMETER name="codingtype"><VALUE encoding="string">surface-coding</VALUE></PARAMETER><VALUE encoding="base64" size="160">OcMdI3NeTILky5FZpeHUc/Ri9Pw=</VALUE></DIGEST><ALGORITHM>RSA PKCS#1-V1.5</ALGORITHM><VALUE encoding="base64" size="1024">Sy2Ps2++TbDA+D1J+v1RRx8Ti/Xn3pLkVyO/wtHyD5nDcMxaSyDUcMahMTE84bbGnv95BIX6WCXxIGlw+0Y5oq4IfJy6mIGJJYYHVyBzkKBp6J+UXX2643TOJZeL6ABEoI4xANCZfseurXWOyaUzoh82MTulk8PoYaemzpTgg0k=</VALUE></SIGNATURE></XrML>VwBpAG4AZABvAHcAcwA6AHAAaABhAG4AcwBlAG4AQABtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAA==T <?xml version="1.0"?><CERTIFICATECHAIN><CERTIFICATE></CERTIFICATE><CERTIFICATE></CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAA0AC0AMAAxAC0AMgAyAFQAMAA3ADoANAA1ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABEAEUAUwBDAFIASQBQAFQATwBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAOAA0ADIANgAwADgAMwA2AC0AOQA4AGMAYgAtADQAZgAyADMALQBiAGYAZQA5AC0ANgA0ADUAZgAzADAAZgBmADYAOQAyADAAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APAAvAEQARQBTAEMAUgBJAFAAVABPAFIAPgA8AEkAUwBTAFUARQBSAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA2AGYAZQBlADEAOQAyADAALQBlADEAOAA5AC0ANAA2AGYANQAtAGEAYQA4AGEALQA3AGQANgBjADEAYwBiAGYANABhADgAMQB9ADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAUwBlAHIAdgBpAGMAZQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AcQBWADEAMABJAG0AQQB1AGcAYgAyAHkAbABMADcAZAB3AHAAMQB2AHAATABhAEEATgBnAGkAbQBDAEoASwBpAEwAKwBSAG4ASwBnAFMAbwBlAHcAeABsAFQAVABZAGEAaAA3AEUAVQBDADkAOAB5AEoAKwAyAFkASwA2ADEAagBYAEQAVgB4AEcAMgB3AGQAawBEAEkAagB5AEEAcgBoAHEAaQBZAEgAVABZAFUAbQB6AFEARwBTADYAMgB1AG8AMwB2AEEALwBVAFkAVwBrAFMAbwB2AFUAWABCAFcAUgBQAFQAMwAvAGYAZQBRADUAcQBRAC8AMABoAEkAaQB4AE4AMwBVADQAUQBqAEcATwBzAE8AcwBnAGkAawA3ADkAUwA4ADIASQArACsANgAwAFkAQgA1AHoAVgBIAFoAMQBJAGEARABXAHcAdgBEAC8AOABiADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APABTAEUAQwBVAFIASQBUAFkATABFAFYARQBMACAAbgBhAG0AZQA9ACIAQwBlAHIAdABpAGYAaQBjAGEAdABlACAAUAByAGEAYwB0AGkAYwBlACAAUwB0AGEAdABlAG0AZQBuAHQAIgAgAHYAYQBsAHUAZQA9ACIAaAB0AHQAcAA6AC8ALwBnAG8ALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AZgB3AGwAaQBuAGsALwA/AGwAaQBuAGsAaQBkAD0AMQAxADkANAA0ACIAIAAvAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAE0AUwAtAEQAUgBNAC0AUwBlAHIAdgBlAHIAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewBhAGEAYQAzADMAMQBmADMALQBlADYANQA5AC0ANABlAGEAOQAtADgANwA2AGIALQBlADgAYgAyADUAYwA3AGIANAA5ADkANgB9ADwALwBJAEQAPgA8AEEARABEAFIARQBTAFMAIAB0AHkAcABlAD0AIgBVAFIATAAiAD4AaAB0AHQAcABzADoALwAvAGMAbwByAHAAcgBpAGcAaAB0AHMALgBtAGkAYwByAG8AcwBvAGYAdAAuAGMAbwBtAC8AXwB3AG0AYwBzADwALwBBAEQARABSAEUAUwBTAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgBvAHgAeQB4AGIAVQBnAHUAeQBtAEYASABMAGgAdQA4ADAARQBIADkAbQA2ADIAYwAyAFgATABGAFgAYgBqAG0AOAA3AEsAbABFAGIAUwBGAFEAawBpAGUAdQByAHIAOABSAFoAZwB2AHQARQBNAFcAZABnADYAagBNAEEAawBMAEoANwB4AFAAbgBXAHMAMwBoAEUAagBPAEgAdwA5ADkAaQByAHcAWgAxAGcANQBaACsANgB5AFkAZwBrAHQAVwBsAEsAaQBiAG0AUABzADUATABwAGEAbQBkADYAdgA1ADMAUgA0ADAAZgBLAEUAUwAvAEgATgBXAGQAagBiAGMANgA4AHgATgA5AHQAeQBmAHQAcwA0AHAATwBmAHkASgB4AFQANQBYAGcAbwAwAHIASABWAHMAZQB0ACsAcgBEAGcAUwBoAEUAOQBCADMASgBRAGIAWQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AFMARQBDAFUAUgBJAFQAWQBMAEUAVgBFAEwAIABuAGEAbQBlAD0AIgBTAGUAcgB2AGUAcgAtAFYAZQByAHMAaQBvAG4AIgAgAHYAYQBsAHUAZQA9ACIAMQAuADAALgAzADAAMQAyAC4AMAAiACAALwA+ADwAUwBFAEMAVQBSAEkAVABZAEwARQBWAEUATAAgAG4AYQBtAGUAPQAiAFMAZQByAHYAZQByAC0AUwBLAFUAIgAgAHYAYQBsAHUAZQA9ACIAMQAyADMANAA1AC0AMQAyADMALQAwADAAMAAwADAAMAA3AC0AMQA4ADkANgA4ACIAIAAvAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIAUwBlAHIAdgBlAHIALQBMAGkAYwBlAG4AcwBvAHIALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA4ADQAMgA2ADAAOAAzADYALQA5ADgAYwBiAC0ANABmADIAMwAtAGIAZgBlADkALQA2ADQANQBmADMAMABmAGYANgA5ADIAMAB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAzAC0AMAAyAC0AMAA1AFQAMAAwADoAMAAwADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA1AC0AMAAxAC0AMgAxAFQAMAA3ADoANAA1ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgBLAGcAUwAzAHIAdAA5AHMAZwBrAEIAVQB2AHMAQgBwAHMAQgBRAGMASgBvAGoAZAAwAFoAOAA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADAAMgA0ACIAPgB0AFoAOQA2ADYASwB5AC8AbAA3ADMAaABNAEIAUABQAGoAegAyAHAAeABpAEIAMwBxADQAYgBUAGQANQBVAEsASQBmAEcAWAB0AGIAYwA5AHIAbQBkAG8ARQA1AE0AOABCAHcAQgArAG0AWABxAEcAeAArADAARQBQAHoAOABTAEMAcwBJAHIAaQA1AFoAbAA0ADgANwBMAFMAZwAwAGEAagBZAGwAMgBDAGIAQwB0AFAAYwB3AEoAQQBkADYANQBUAEwARwA4AHEAeQBtAFQAegBTAEkASgBLACsAbABSAEIAZwAzAEIAUgA0AE0AbQA0AFUAdwB4AGsATQBjACsATQBJAGsAUwBKADMAZgBWAGkAagBtAEQAbQBNAE0AYwBBAHIATABOAHQAZQBKAFMALwBNAFEAZwBsAG8ANABXAEEAWABVAHkATQBlADcAOQA2AHAAVQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA5AFQAMgAxADoAMQAzADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADkAVAAyADEAOgAxADMAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAwADkALQAxADIALQAwADcAVAAyADEAOgAxADMAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBTAGUAcgB2AGUAcgAtAEwAaQBjAGUAbgBzAG8AcgAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGEANQA3ADIAYgBhADkANwAtADEAZABiADAALQA0ADcAMQBiAC0AOAA0ADkANQAtADQAYwBhADEAYQA2AGQAMwBkADcANgA4AH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABTAGUAcgB2AGUAcgAgAEUAbgByAG8AbABsAG0AZQBuAHQAIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AFAAUQAzAFoARABoAEcAeQB4AE8AVABsADYATAA5ADMAKwBCAGoAdQB0AGsATQBZAHYAQQBnAGYAMgAwAEkAbgBXAGEAYgByAHIARQByAEwAVwBCAE4AagBqAEMAVQBrAFEAUABBAEMAQgBOADcARwAvAGsAawB5AGIAQgBZAHcAOABTAEgAdAA4AEoAUwBXAHcAUgB5AGEAbABYAFIARQBoAG8AQwBCACsANAA1AEMAMQA0AGIAKwA1AEMAQgBPAGoAaAA2AG0AegBMAEcAZgAwAHIARwBXAFgAMgBaAE8ATwBaADQAWQBCAE0ASABTAFcAeQBoAG4AKwBCAGQAUgAzAHgAdwA5AGEANQBDAFkAQgB1AFMAQQBBAG0AaQBhAEcASwBGAFAAVgA3ADAATAAvAHYAWgAyAEYAeQBUAFkAZABlADYASQBqACsATwBqADYAWgBrAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBJAFMAUwBVAEUAUgA+ADwASQBTAFMAVQBFAEQAUABSAEkATgBDAEkAUABBAEwAUwA+ADwAUABSAEkATgBDAEkAUABBAEwAIABpAG4AdABlAHIAbgBhAGwALQBpAGQAPQAiADEAIgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBNAFMALQBEAFIATQAtAFMAZQByAHYAZQByACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsANgBmAGUAZQAxADkAMgAwAC0AZQAxADgAOQAtADQANgBmADUALQBhAGEAOABhAC0ANwBkADYAYwAxAGMAYgBmADQAYQA4ADEAfQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAFMAZQByAHYAaQBjAGUAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEAMAAyADQAIgA+AHEAVgAxADAASQBtAEEAdQBnAGIAMgB5AGwATAA3AGQAdwBwADEAdgBwAEwAYQBBAE4AZwBpAG0AQwBKAEsAaQBMACsAUgBuAEsAZwBTAG8AZQB3AHgAbABUAFQAWQBhAGgANwBFAFUAQwA5ADgAeQBKACsAMgBZAEsANgAxAGoAWABEAFYAeABHADIAdwBkAGsARABJAGoAeQBBAHIAaABxAGkAWQBIAFQAWQBVAG0AegBRAEcAUwA2ADIAdQBvADMAdgBBAC8AVQBZAFcAawBTAG8AdgBVAFgAQgBXAFIAUABUADMALwBmAGUAUQA1AHEAUQAvADAAaABJAGkAeABOADMAVQA0AFEAagBHAE8AcwBPAHMAZwBpAGsANwA5AFMAOAAyAEkAKwArADYAMABZAEIANQB6AFYASABaADEASQBhAEQAVwB3AHYARAAvADgAYgAwAD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAFMAZQByAHYAZQByAC0ATABpAGMAZQBuAHMAbwByAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYQA1ADcAMgBiAGEAOQA3AC0AMQBkAGIAMAAtADQANwAxAGIALQA4ADQAOQA1AC0ANABjAGEAMQBhADYAZAAzAGQANwA2ADgAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAAOQBUADIAMQA6ADEAMwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANAAtADEAMgAtADAAOABUADIAMQA6ADEAMwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AZwAzAFAAVwBGADUAVgBkAEoAZQBvAFQAVAA0AHoAcAB0AHIAcQBiAGkAaAAwAGEAbgBwADgAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4ASwAvAGEAWABpAFAAegBUAEgAZQBaAFMASgB5AEMASQBDAHcAOQAyADEATABSAHEAeABBADcAOQBxAEUAZgBvAFgAeQBBAFgAcQArAHQAbgA4AEQAbgArAGEAMQA2AFMAagA0AFAAVwB3AFoASgBRADkAcwBNAEEAQQBvAHAARQBPAEUASwBsAE4AWAA2AEkATgBzAEEAQQBXADEAMAB6AGsATQBDAGkAeAAyAFUAQgBsAEwASgBDADMAVwBUAHAAdwBoAHMAbABUAEYANgBSAG0ASwBIAGgAUgBYAHIAcQBuAGkAVABVAGsAdgBQAEQALwBxAGoAdwBUAGoAZQBWAEgAOQBKADUAcwBXAFEAdwBsAHgANABrAEsAawBIAFUAaQBFAHoAZQBlAFIANwBPAEkATABrAEUAMAB2AGgAdQBUAHIAVQA1AGQAZwA4ADYAbQB1AFkAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFMASQBHAE4AQQBUAFUAUgBFAD4APAAvAFgAcgBNAEwAPgA=</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAyADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAyADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7ADQAMAA4ADQAOQAzADAAZQAtAGQAZgA0AGEALQA0ADEAZQA4AC0AOQAwADEAMQAtADYAZgAyAGUANgBjAGIAZgBlADQAOABlAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAEMAQQA8AC8ASQBEAD4APABOAEEATQBFAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAE4AQQBNAEUAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFAAVQBCAEwASQBDAEsARQBZAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBwAHUAYgBsAGkAYwAtAGUAeABwAG8AbgBlAG4AdAAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGkAbgB0AGUAZwBlAHIAMwAyACIAPgA2ADUANQAzADcAPAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBtAG8AZAB1AGwAdQBzACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADIAMAA0ADgAIgA+AE4AUQByAFkAUwBBAGMANAAzAFYANwBOAFIAVABXADgAVgBUADUARQAyAFgAaABNAGMAdwBtAG0ATwBOADcAVABrAFEANwBFAFQAVQBJAFcARwBxAGwAUABUAHYARgBTAHcANwA5ADgAZwBGAGcASQBYAEIAYwBGAE0AdABDAGQASQB5AGYAMwBWAE0ATwA1AFkARwBPAEsASgBEADEAdwBuAGMAMgB5AGQAbABvAHoAZgAxADYAVgBIAEYANQBVAHIARgBnAHQAawBUAC8AOQB1AEsANwB1AFIAcwBoAGoAeQBIADUAMQA2AEgALwBjAEMASwBKAHkASQB5AFAAYQBZAEUAawBXACsAcABJADcAeAA4ACsAYwBmAGcAVgBjAFUAWABaAC8AbwBDAHIARgBIAGQAdQBlAFgATABTADQAYwBlAC8AbgBhAGwAcwA0ADUAcQB4ADUAcQBxAGMAZABNADcAWQAwADgAbwA1AGEAMQBrAFgALwB5AG8AaQBQAEwAYgBvADkAbQBLAFMALwBOAGwAegBFAGYAYwBSAHYAUgBOAGkAQQBDADYAVwBxAGwASQB2ADgATQBnAE4AeABwAEEAbQBVADcARgBSAFUASABUAFAAYwBrAC8AZwBPADkAWAAwAGEAZgBoADcAVgBrAHcAUgBxADMAMwBUAGoAcgBDAFMAKwBVAGkAZABvAHgAdwBPAEkAMgBFADAARABLAE0AbQB0AGcAVQBNAEEAMgB1ADAANABPAC8AZgBnAFIAMABMAGUAVQByAHUAVABZAFkAagArAFEAegAyAEkASQA4ADIAcQBjAHoANwArAGYAZQB0AEUAZABVAHMAdgBLAEsAYQAxAFoAQgBLADgARgBuAG0AdwAxAEIARgBQAGUAbwB5AFgAOQBnAD0APQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAEkAUwBTAFUARQBSAD4APABJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlAC0AQQB1AHQAaABvAHIAaQB0AHkAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIAYQBzAGMAaQBpAC0AdABhAGcAIgA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUwBlAHIAdgBlAHIAIABFAG4AcgBvAGwAbABtAGUAbgB0ACAAQwBBADwALwBJAEQAPgA8AE4AQQBNAEUAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFMAZQByAHYAZQByACAARQBuAHIAbwBsAGwAbQBlAG4AdAAgAEMAQQA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMQAwADIANAAiAD4AUABRADMAWgBEAGgARwB5AHgATwBUAGwANgBMADkAMwArAEIAagB1AHQAawBNAFkAdgBBAGcAZgAyADAASQBuAFcAYQBiAHIAcgBFAHIATABXAEIATgBqAGoAQwBVAGsAUQBQAEEAQwBCAE4ANwBHAC8AawBrAHkAYgBCAFkAdwA4AFMASAB0ADgASgBTAFcAdwBSAHkAYQBsAFgAUgBFAGgAbwBDAEIAKwA0ADUAQwAxADQAYgArADUAQwBCAE8AagBoADYAbQB6AEwARwBmADAAcgBHAFcAWAAyAFoATwBPAFoANABZAEIATQBIAFMAVwB5AGgAbgArAEIAZABSADMAeAB3ADkAYQA1AEMAWQBCAHUAUwBBAEEAbQBpAGEARwBLAEYAUABWADcAMABMAC8AdgBaADIARgB5AFQAWQBkAGUANgBJAGoAKwBPAGoANgBaAGsAPQA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APAAvAFAAVQBCAEwASQBDAEsARQBZAD4APAAvAFAAUgBJAE4AQwBJAFAAQQBMAD4APAAvAEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFcATwBSAEsAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAEEALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUAIgA+ADwASQBEACAAdAB5AHAAZQA9ACIATQBTAC0ARwBVAEkARAAiAD4AewA0ADAAOAA0ADkAMwAwAGUALQBkAGYANABhAC0ANAAxAGUAOAAtADkAMAAxADEALQA2AGYAMgBlADYAYwBiAGYAZQA0ADgAZQB9ADwALwBJAEQAPgA8AC8ATwBCAEoARQBDAFQAPgA8AFIASQBHAEgAVABTAEcAUgBPAFUAUAAgAG4AYQBtAGUAPQAiAE0AYQBpAG4ALQBSAGkAZwBoAHQAcwAiAD4APABSAEkARwBIAFQAUwBMAEkAUwBUAD4APABSAEkARwBIAFQAIABuAGEAbQBlAD0AIgBJAFMAUwBVAEUAIgA+ADwAQwBPAE4ARABJAFQASQBPAE4ATABJAFMAVAA+ADwAVABJAE0ARQA+ADwAUgBBAE4ARwBFAFQASQBNAEUAPgA8AEYAUgBPAE0APgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMgA3ADwALwBGAFIATwBNAD4APABVAE4AVABJAEwAPgAyADAAMAA5AC0AMQAyAC0AMAAzAFQAMAAxADoAMgA3ADwALwBVAE4AVABJAEwAPgA8AC8AUgBBAE4ARwBFAFQASQBNAEUAPgA8AC8AVABJAE0ARQA+ADwAQQBDAEMARQBTAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAIAAvAD4APAAvAEEAQwBDAEUAUwBTAD4APAAvAEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAD4APAAvAFIASQBHAEgAVABTAEwASQBTAFQAPgA8AC8AUgBJAEcASABUAFMARwBSAE8AVQBQAD4APAAvAFcATwBSAEsAPgA8AC8AQgBPAEQAWQA+ADwAUwBJAEcATgBBAFQAVQBSAEUAPgA8AEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFMASABBADEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAGMAbwBkAGkAbgBnAHQAeQBwAGUAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBzAHQAcgBpAG4AZwAiAD4AcwB1AHIAZgBhAGMAZQAtAGMAbwBkAGkAbgBnADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAYgBhAHMAZQA2ADQAIgAgAHMAaQB6AGUAPQAiADEANgAwACIAPgByAHEAVABNAHAAZQBXADAAOQBrAE4AWQBBAEQAdgBQADcAaABZAFoAWQB0AGgAQwBjAEwAbwA9ADwALwBWAEEATABVAEUAPgA8AC8ARABJAEcARQBTAFQAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAIABQAEsAQwBTACMAMQAtAFYAMQAuADUAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgB4AFgAWgBMAHEAZAA3AGUAVQBhAEgATgBKAHMAVwA3AG0AcgArAFQAZwBnACsANgBIAGkAdABGAEEAawBPAHIAQQBzAFkAMwBMAEgAMQBwAEwAWgAvAFkAMwByACsASgAyAHoANgBSAC8AcwBlADAANgBaAFYAVQBRAGgAegAyADUARgBHAFMAawBiAFIAdgA5ADQAWABDAGEAegArAEEAbwBXADAARQBaADIAZABnADEAZgBBAHkAbABtAFEAZABJAEEAQgBqAHEANgBJAG0AOABCAGkAOQBvAEYANgA3AG4AVwA4AEQAQgBjAGoAcgBiAGkAMgA1AFcATwBEAEgAVABlAHMAZQBBAFAAUwA2AGMATwBxAGkARwBzAFYAdgBZAFMASwBQAE4AawA1AE8AKwB0AGMAQwBLADUARQBQAHIAVgBpADAAcgBQAGIAMQBRAEsAUQAyADQATwBHAE0AZwAzAEwASQAzAHMAVgB3AHkAaQA1ADUAUQBiADEAdwBLAHQAZABaADUAVgBxAGQAWgBKAHYARQBjAGsAWQBFAGkAWQBRADEAZQBmAGEAdQB5AEkAdQBuAG4AbgBmAG4AegA1AEYAWABYAFUAUgBCADcANwBKAG8AUwBxAHQAYQBZAHgAdgB6AHUATgBCADgAKwAwAGkALwBsADAAYQBHAEIAWgBZAFMASQBsADMAawBZAEEAVgBkAGcAegBhAFkAdwBsAHAAVABzAGkAbwBTAHoATwBlAFEAMgB1AEEAbABkAHgAegAvAHoAcAB2AFcARAA3AGsAcABEAHcARQB4AHAAMAA0AGwAZwBYAE8AOQBrAFYAOQAxAEsAQgB2AG8AZABqAFIAUgB1AC8AUABKAEUAZQBMAEMASQA1AGEASQBPAG0AVAAzAG0AUQA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBTAEkARwBOAEEAVABVAFIARQA+ADwALwBYAHIATQBMAD4A</CERTIFICATE><CERTIFICATE>PABYAHIATQBMACAAeABtAGwAbgBzAD0AIgAiACAAdgBlAHIAcwBpAG8AbgA9ACIAMQAuADIAIgA+ADwAQgBPAEQAWQAgAHQAeQBwAGUAPQAiAEwASQBDAEUATgBTAEUAIgAgAHYAZQByAHMAaQBvAG4APQAiADMALgAwACIAPgA8AEkAUwBTAFUARQBEAFQASQBNAEUAPgAyADAAMAAyAC0AMQAyAC0AMAA1AFQAMAAxADoAMAA3ADwALwBJAFMAUwBVAEUARABUAEkATQBFAD4APABWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARgBSAE8ATQA+ADIAMAAwADIALQAxADIALQAwADUAVAAwADEAOgAwADcAPAAvAEYAUgBPAE0APgA8AFUATgBUAEkATAA+ADIAMAAxADQALQAxADIALQAwADIAVAAwADEAOgAwADcAPAAvAFUATgBUAEkATAA+ADwALwBWAEEATABJAEQASQBUAFkAVABJAE0ARQA+ADwARABFAFMAQwBSAEkAUABUAE8AUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAQQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBNAFMALQBHAFUASQBEACIAPgB7AGIAZgBkAGUAMwAxADcAMQAtADEAYwA4ADMALQA0AGYANwA2AC0AYgA1AGYAOQAtADMANAAyADgANwA3ADQAYQAzADIAOABhAH0APAAvAEkARAA+ADwALwBPAEIASgBFAEMAVAA+ADwALwBEAEUAUwBDAFIASQBQAFQATwBSAD4APABJAFMAUwBVAEUAUgA+ADwATwBCAEoARQBDAFQAIAB0AHkAcABlAD0AIgBEAFIATQAtAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAtAEEAdQB0AGgAbwByAGkAdAB5ACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAGEAcwBjAGkAaQAtAHQAYQBnACIAPgBNAGkAYwByAG8AcwBvAGYAdAAgAEQAUgBNACAAUAByAG8AZAB1AGMAdABpAG8AbgAgAFIAbwBvAHQAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAUgBvAG8AdAA8AC8ATgBBAE0ARQA+ADwALwBPAEIASgBFAEMAVAA+ADwAUABVAEIATABJAEMASwBFAFkAPgA8AEEATABHAE8AUgBJAFQASABNAD4AUgBTAEEAPAAvAEEATABHAE8AUgBJAFQASABNAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAHAAdQBiAGwAaQBjAC0AZQB4AHAAbwBuAGUAbgB0ACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAaQBuAHQAZQBnAGUAcgAzADIAIgA+ADYANQA1ADMANwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABQAEEAUgBBAE0ARQBUAEUAUgAgAG4AYQBtAGUAPQAiAG0AbwBkAHUAbAB1AHMAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AWAB5AGwAQwB3AFMAbwBvAHcAMwBNAGQAbgBzAFYAUABrAFQAdAB3AEkAWQA1AHIAawA2ADQANwBiAFMANgA0AE4AZgA3AE0AMgBIAFMAOABrAGwAUgBrADUAYQBoAGgAYwBNAHgAOQBWAE8AbABuAHQAegBxAFgAMwBTAFkAeQBxAHgAbwBYAFEARgBEAFIALwBrAFQAVwBWAFQAcABiAFgAVgBNAHMAUwBZAEwAeABxAHIAKwBXAEQAMQBqAFQAZABIAHMAdgAvAC8ANwA5AFEAdwBIAHQAcgBLAGgATABNAFIANwBqAGMATABjAE0AbgBYAGYAQQBFADMAOQBLAGEAVQBBAFoAZwAzAGQARgBTAEUAdAArAEoAWQBiAFoAYgBvAFMAagBQAGUASgBvADYARAAxAGEAWgBtAGMAWgB2AGwAYQBkAHIASQBxACsASwBwAEIAcQBiAGcASQBFAHEAYQBiAHEAUABBAGcARwA4AC8ASQBiAGgAdABOAGIAbABhAEQAawBUAG8ANwBlAHYAKwBBAHUASQBXAGUAYwA5AEUAagBIAEoAQwBZAGsAMABUAFMAegBKAGYANAAyADMAaQBIAFoAWQBKAFgARABNAHoAMAA4ADEATwBCAHIASwBZACsAagBNAHQAcQBrADgAYQBNAHAAaQBxAHYAYwBYADYAbQB2ADcAbQBUADcASQB3AFkAdwA5AGEARQBrAGwAeAArADMAcABtAEwAcQBCAFkAOAA3AFYAVwB6AGwAeABGAEsAOAA4AGoAbAA1AEMATABIAGIASgBxAHgATAA1AGkAdwBDADMAVgBwAGYAVgB6ADAAVQBhAGwAbgBnADEASwB0AEQAcQBaAG0AYwBaAGQAagB3AFAAYwBRAGMAMwBSAE0AeABsAGcAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AC8AUABVAEIATABJAEMASwBFAFkAPgA8AC8ASQBTAFMAVQBFAFIAPgA8AEkAUwBTAFUARQBEAFAAUgBJAE4AQwBJAFAAQQBMAFMAPgA8AFAAUgBJAE4AQwBJAFAAQQBMACAAaQBuAHQAZQByAG4AYQBsAC0AaQBkAD0AIgAxACIAPgA8AE8AQgBKAEUAQwBUACAAdAB5AHAAZQA9ACIARABSAE0ALQBDAGUAcgB0AGkAZgBpAGMAYQB0AGUALQBBAHUAdABoAG8AcgBpAHQAeQAiAD4APABJAEQAIAB0AHkAcABlAD0AIgBhAHMAYwBpAGkALQB0AGEAZwAiAD4ATQBpAGMAcgBvAHMAbwBmAHQAIABEAFIATQAgAFAAcgBvAGQAdQBjAHQAaQBvAG4AIABDAEEAPAAvAEkARAA+ADwATgBBAE0ARQA+AE0AaQBjAHIAbwBzAG8AZgB0ACAARABSAE0AIABQAHIAbwBkAHUAYwB0AGkAbwBuACAAQwBBADwALwBOAEEATQBFAD4APAAvAE8AQgBKAEUAQwBUAD4APABQAFUAQgBMAEkAQwBLAEUAWQA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBSAFMAQQA8AC8AQQBMAEcATwBSAEkAVABIAE0APgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAcAB1AGIAbABpAGMALQBlAHgAcABvAG4AZQBuAHQAIgA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBpAG4AdABlAGcAZQByADMAMgAiAD4ANgA1ADUAMwA3ADwALwBWAEEATABVAEUAPgA8AC8AUABBAFIAQQBNAEUAVABFAFIAPgA8AFAAQQBSAEEATQBFAFQARQBSACAAbgBhAG0AZQA9ACIAbQBvAGQAdQBsAHUAcwAiAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAyADAANAA4ACIAPgBOAFEAcgBZAFMAQQBjADQAMwBWADcATgBSAFQAVwA4AFYAVAA1AEUAMgBYAGgATQBjAHcAbQBtAE8ATgA3AFQAawBRADcARQBUAFUASQBXAEcAcQBsAFAAVAB2AEYAUwB3ADcAOQA4AGcARgBnAEkAWABCAGMARgBNAHQAQwBkAEkAeQBmADMAVgBNAE8ANQBZAEcATwBLAEoARAAxAHcAbgBjADIAeQBkAGwAbwB6AGYAMQA2AFYASABGADUAVQByAEYAZwB0AGsAVAAvADkAdQBLADcAdQBSAHMAaABqAHkASAA1ADEANgBIAC8AYwBDAEsASgB5AEkAeQBQAGEAWQBFAGsAVwArAHAASQA3AHgAOAArAGMAZgBnAFYAYwBVAFgAWgAvAG8AQwByAEYASABkAHUAZQBYAEwAUwA0AGMAZQAvAG4AYQBsAHMANAA1AHEAeAA1AHEAcQBjAGQATQA3AFkAMAA4AG8ANQBhADEAawBYAC8AeQBvAGkAUABMAGIAbwA5AG0ASwBTAC8ATgBsAHoARQBmAGMAUgB2AFIATgBpAEEAQwA2AFcAcQBsAEkAdgA4AE0AZwBOAHgAcABBAG0AVQA3AEYAUgBVAEgAVABQAGMAawAvAGcATwA5AFgAMABhAGYAaAA3AFYAawB3AFIAcQAzADMAVABqAHIAQwBTACsAVQBpAGQAbwB4AHcATwBJADIARQAwAEQASwBNAG0AdABnAFUATQBBADIAdQAwADQATwAvAGYAZwBSADAATABlAFUAcgB1AFQAWQBZAGoAKwBRAHoAMgBJAEkAOAAyAHEAYwB6ADcAKwBmAGUAdABFAGQAVQBzAHYASwBLAGEAMQBaAEIASwA4AEYAbgBtAHcAMQBCAEYAUABlAG8AeQBYADkAZwA9AD0APAAvAFYAQQBMAFUARQA+ADwALwBQAEEAUgBBAE0ARQBUAEUAUgA+ADwALwBQAFUAQgBMAEkAQwBLAEUAWQA+ADwALwBQAFIASQBOAEMASQBQAEEATAA+ADwALwBJAFMAUwBVAEUARABQAFIASQBOAEMASQBQAEEATABTAD4APABXAE8AUgBLAD4APABPAEIASgBFAEMAVAAgAHQAeQBwAGUAPQAiAEQAUgBNAC0AQwBBAC0AQwBlAHIAdABpAGYAaQBjAGEAdABlACIAPgA8AEkARAAgAHQAeQBwAGUAPQAiAE0AUwAtAEcAVQBJAEQAIgA+AHsAYgBmAGQAZQAzADEANwAxAC0AMQBjADgAMwAtADQAZgA3ADYALQBiADUAZgA5AC0AMwA0ADIAOAA3ADcANABhADMAMgA4AGEAfQA8AC8ASQBEAD4APAAvAE8AQgBKAEUAQwBUAD4APABSAEkARwBIAFQAUwBHAFIATwBVAFAAIABuAGEAbQBlAD0AIgBNAGEAaQBuAC0AUgBpAGcAaAB0AHMAIgA+ADwAUgBJAEcASABUAFMATABJAFMAVAA+ADwAUgBJAEcASABUACAAbgBhAG0AZQA9ACIASQBTAFMAVQBFACIAPgA8AEMATwBOAEQASQBUAEkATwBOAEwASQBTAFQAPgA8AFQASQBNAEUAPgA8AFIAQQBOAEcARQBUAEkATQBFAD4APABGAFIATwBNAD4AMgAwADAAMgAtADEAMgAtADAANQBUADAAMQA6ADAANwA8AC8ARgBSAE8ATQA+ADwAVQBOAFQASQBMAD4AMgAwADAANwAtADEAMgAtADAANABUADAAMQA6ADAANwA8AC8AVQBOAFQASQBMAD4APAAvAFIAQQBOAEcARQBUAEkATQBFAD4APAAvAFQASQBNAEUAPgA8AEEAQwBDAEUAUwBTAD4APABQAFIASQBOAEMASQBQAEEATAAgAGkAbgB0AGUAcgBuAGEAbAAtAGkAZAA9ACIAMQAiACAALwA+ADwALwBBAEMAQwBFAFMAUwA+ADwALwBDAE8ATgBEAEkAVABJAE8ATgBMAEkAUwBUAD4APAAvAFIASQBHAEgAVAA+ADwALwBSAEkARwBIAFQAUwBMAEkAUwBUAD4APAAvAFIASQBHAEgAVABTAEcAUgBPAFUAUAA+ADwALwBXAE8AUgBLAD4APAAvAEIATwBEAFkAPgA8AFMASQBHAE4AQQBUAFUAUgBFAD4APABEAEkARwBFAFMAVAA+ADwAQQBMAEcATwBSAEkAVABIAE0APgBTAEgAQQAxADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAUABBAFIAQQBNAEUAVABFAFIAIABuAGEAbQBlAD0AIgBjAG8AZABpAG4AZwB0AHkAcABlACIAPgA8AFYAQQBMAFUARQAgAGUAbgBjAG8AZABpAG4AZwA9ACIAcwB0AHIAaQBuAGcAIgA+AHMAdQByAGYAYQBjAGUALQBjAG8AZABpAG4AZwA8AC8AVgBBAEwAVQBFAD4APAAvAFAAQQBSAEEATQBFAFQARQBSAD4APABWAEEATABVAEUAIABlAG4AYwBvAGQAaQBuAGcAPQAiAGIAYQBzAGUANgA0ACIAIABzAGkAegBlAD0AIgAxADYAMAAiAD4AdwBFAEMAegAvAEYAMgBwADEANQBnAGoAQQA3ADIAegBLAGoARwByAFkAMQBDAEMALwBEADAAPQA8AC8AVgBBAEwAVQBFAD4APAAvAEQASQBHAEUAUwBUAD4APABBAEwARwBPAFIASQBUAEgATQA+AFIAUwBBACAAUABLAEMAUwAjADEALQBWADEALgA1ADwALwBBAEwARwBPAFIASQBUAEgATQA+ADwAVgBBAEwAVQBFACAAZQBuAGMAbwBkAGkAbgBnAD0AIgBiAGEAcwBlADYANAAiACAAcwBpAHoAZQA9ACIAMgAwADQAOAAiAD4AawBMAHAANQBnAFoAdQA4AE4AMQBlAGsAWABDAEgAQgBaADkASgBYAEIAZQBHAFMAZABRAFoATABKAGEAMABkAGwAdQBKAHgANgAzAFQATQBkAHEAegB0AEYAQgBUAFMAVQBGAGkAagB0AHAASABJAE4AYQAxAGMANQBhAHcATQAzAE4AbABhAEsATAB2AE4AQQBaAG8AdgA2AE0AUgBEAFYAaQBSAGMAMgBOAEsAdgBwAFkAWQBMAEcAZwA5AEwAaABYAGUAUAAwADUAbQBsAE8AVQByAGwAZwBVAHEAOQAvAG8AaABUAFcASQB0AGsAdAA5AFUAVwA3AGgAWABoAHcANgBGACsAUAAyAFUAbwBHAEsAUwBzAE0AZwBIAHUAYQBmAGgAQwAwAHgAWgBKAEEAdwBOAEEAVQBrAGMAWQB4AEwANwB0ADYAYQBWAEEAeQBWAGgANgBEAE8AaABHAG0AawBzAEwAbQBWAFMAbQBSAEYAQQBzAEkANgBQAGoAMABFADkAWQBaAHQAdgBIAGIARwBOAEsAYQBGAGYAbQBxAC8AdgBGAHcALwBuAEcAYQBFAE8AOABaAHMANABtAHkAaABHAHMAYwBhAGkASABYAEwAWgBiAFUAVQBRAFQANQBCAHYARgBYAGsAawBJAEMATAAxAG4AdgBBAGcAUQB3AC8AYwAyAEUAbgBsADYAeABkAEoATQB2AHAAaABGAHgAKwB4AGsAWABIAHQAegAwAFgARgBtAHYASQBDAGEAYgBOAFoAWQBsAGwANgBvADkATQBDAEwAQQBSAEkAQQBJAFoAMAAwAFoAWQB2AG0AbABZAHUAbwBmAFIAQwBSAFQAawA0AG0ASQBjAFgAawA0AEkAYwA5AFkANwBCAGIARwBDAG8AVwBKAFEAPQA9ADwALwBWAEEATABVAEUAPgA8AC8AUwBJAEcATgBBAFQAVQBSAEUAPgA8AC8AWAByAE0ATAA+AA==</CERTIFICATE></CERTIFICATECHAIN>au!uqP %>->h nr&t[ ogE.p +a+K0 DO.5$XP @[R]n,RN {?DVJ D=?u! wAWb&= s/sML {+ZB]B oyPr! 5xSg~{ :F46S ~~,5'SS 3h@;E '/l=?l  %,o\| 1p\Vd Q9O1' twIt* PHUEbd f[@y99 /'|_G fW]Qb "sz5Oz <H]0k/{Q /'|_G 'e)XKHn g<\{P 'e)XKHn \<Dtt r?o*_ J;4U9_D [,P(p LKJa#P V5^Az f='aY]- Ul{tR v$-;| U-U%f. J??lp iG0Lo !+t`l 4)2DW N8O!  g8c*  4=j|s X>XA$9 J2o+> uwR%u EH\LY P0~?t g= 32 w60bV )J2o+> $R3B| y0Sg^# q+l,. i)dC/ 5eV]}_ J"jfn #MNkP ZV \O E41s5u 4R#IV- v{>Mr&S +61yP` =UVP; b?ATu !GL_J 0|jTh@ *J\#0Z AVAuS fFget U?i gE ['6nK Y2d4~ nP^nn LcyM{K @4JJ< ~Gj)oEIh-Aw c?m%= vw7MS 8(4dB `UEMa Yim7{ C6Y,* |^(Vi RlG{7 r=(4T J++|r :}u,Ve |Wes* Ze0'( L5]F> L5]F> |HJh+< $'pM- )Vh0xC_sB !t_#m ,EG:8 ([jvK b HA; $%D2; N&7Rw QTa8! }?i;= m2-te Wb~!> Z`=UO -Dr Y 6GmOT DZ2{> nBcHb LWUM_ IPP1, JN;J-K he"KV Cjlgm* V>Kyd " 'qSB 'Hk;b }0^5qP Zj06_3 g[ZIW H/Y._ S1Uj:a [rz<pI y.oI.f 2Aj$& <! N9~!ne J)UJy 1k2Si' C $_, <(b$  a5$[' L^[a^L +qma~ kE_!.5 w=4{/ MJEo*e M;O2e{ QCr7y: /evP%/ d#k@i 5/C?g# :I#bZ hG5Xu pc!zV? K8eEEE ,[H?X @iVyz O(G6zg ta"{m ;'. mk `!54Z  98aJp d|km)m zimQ,. yIwCoG c~z4Y} W'(:,5 1t#xs ob^#8 {i0t  X~(J}J U(3\J ^G6!3 2U-)$ <3!GS~> MEs.j a&X=r ZuC~F&! dVdD"^K h)^&W V/pWL _xAEk) @%(>UA \IF5; ^I/m!,g 7pTM: KE`7f %1lu" ba#Oz sUs(v %"4Md IfJiF ;)AxP/=<;Q 'IA>n CH22b 2d=W) z}R<Q uHhla CN3Y[ ,cl6pAJ k7P^O X"0vIV 3?@'F*H 8SCal lru|{ OnV/% +U(#x| >&9M\% We%w^A s7U{m <40K4Q*7 q]X!z S ?xhu %Ax9e <0MEq jI[Ip HJ9z+ h7|o| }Y#Y? bFb&= ?-`TV} k>422h L6+h0 $%Vzy H*3 JtA 0hzS$ Ym,b8>- P"K:zS S{3=jgJ Wc<3s 4CfBR [MV;+ VoZ!B FZW\e mduj4 scu9KJ G'Y~$ fD<h<P H`zWG Zo?3n E5Sfa +H8c  oz8&"rG FP84- IU$w; swYu` gN8*/ Z;H5AA $^9RL Sh({v $iI); ;G,{  ',?X+ ,Q"09.3/ L6Rnj 87]NpS #2y"4 lB%l! x\`Lu  n\kRtm{ X#Q+~ Ha6H[W;Q- cWqvu d~=GX lB%l! f9"iO? x\`Lu  n\kRtm{ X#Q+~ ws|gt lB%l! f9"iO? x\`Lu  n\kRtm{ X#Q+~ 9cPz\ lB%l! f9"iO? x\`Lu  n\kRtm{ X#Q+~ d~=GX lB%l! f9"iO? x\`Lu  n\kRtm{ X#Q+~ !}"(r e}sC&A Y OH} f5q1D s_aPl wc"/L +`&YX Sh({v9 PrTTO Kf-,; W;i3ggO /<trd s_aPl A/B\Y IUsJx 4,IVC >pkPw W;i3ggO /<trd s_aPl J8P_u W;i3ggO /<trd s_aPl  kO<q< _L\/k 6%a&h5 W;i3ggO /<trd s_aPl GFvE' Kf-,; YD>^: W;i3ggO /<trd s_aPl 4rO;Cc f5q1D Qi#?w 9kh-J h^Huv W;i3ggO /<trd s_aPl $&%)r. PrTT@T Sh({v9 PrTT@T K5kx) s_aPl 31bf: C9JN0a ~8z8C) W;i3ggO /<trd s_aPl UT'"Iz !>rA: Kf-,; W;i3ggO /<trd s_aPl <.I6m Kf-,; G3:E} l; ._U aW+$z  k(Bm !,(Ck: J&yvw &n*5* nXN;J<<I nXN;J<<I !q)U]H f:+h'j 7aAVxP -=PoPM #l1>t \!Q06 k,pdEg _fg(y0 nXN;J<<g GPy`O qJwOW ZD=_6 zygZ| WIz20. ]39U,_ kC&&>! <32gVR~A !qt(B O+f{\ @|>zY UrlV1 'vN7B7> }7zX^M @vpjj !-(0y 8?fR [ e-xQ;} \&gkK ;!'7c xy66!| Cal#8X kk%TB 6S3$Ex X:btQ0 {[8Y3 Svj6- I3A/UC WL6Om fL4=i Bb^E< w<L1L BG0Zk \!>w3 q[ m# Xo>]N .!"Sn Z\ddyN}u  1q"z _tc`qY Z\ddyN}u nXN;J<<g T{'Zr_M/ /b2@i 2TSXN&K GC;>O yrki} ZK;5c ]xaw<|2 5Q>"j }hK/a <,Q06 m@kW1 \Q)b- u9~ W KLdee? mr0DC &Ah3h +0#[5f\ l%'#B) +te{` nXN;J<< M7E'x bE}OFf S.*pq pW"%2 -!"Sn nXN;J<<g n*;!R ZB!L& Z^b6\ [81 xJ0 (Wr,I[& _FF6a D#:ok ,n#h]w$ /t.AwA~ tm7Di yxFe*lO? US_R% 46GKr j'ibg ?O]v7!& c|Q;8 nyAF(F 15h:U ^H;|2 "lvmu Xy+t+X icRv( xhIk{f J[E,': M2B+h <`^C%n 5W8:]n <JMxRk \U0A- >tyXm bg.P'l) LxUIt bB5-y z\K8K t#eKmA sL\4u M#)uK R~9^9 VV"upl >xz.B VS{woX lkFcw #-S"< 6m:IwV 4b d$ BTHT, T|@"xS(H"$ S&'wx b?q>A {p0_) ^<M(= Up]LT Xc">N +|Krx^i xU7Es tq(arh mx",b >fTM8 L9v|Q =zp=B (STFI< XOso! H=B.H  wi~j a2TKf OBVmWK tQAmC Oh/Pi&M [b"-y oHiu<* )MmZ) L.-ym -lrJ* u<2f0 WOZzqO exdVG |];%,e\ ?HozJ I?B/yP3 @q%"s "1Hb~ ` 7nb mcuh<Y ouAD{ S%Khu c:()T SDa(> OU+g-I ydR[x "]IPD U=8*P nc^zK ,MP]S g@5s( !o21K _,-<m _wkGw? O!vI2 ~4>c6 gPmxa {n!mH _7:7G F-MGX7 5+84x R-qj8 K1-9/ lahwm dYK+-& }=9B? d]11?r _;HG6 @!rzzBA Okiydm]^nO EJ\~U x.y~t 5!Ti&j k,Sg4>%L r5TCw~ '}X7O* i5qEN <f"Te <s6/_ Gabkci gb0Y) }[3i) 5tR'oK i}PXR |>19U !1_}.  2cSP J/F(Q| PRjGL ,6zjP bQ]n_ =lK$y; e+)A< `65j_ P2l/9 g06<N ]=c2Re# 0wwA|C< CZjL@ %=RV$ f_58= GE~]q FZ>wg pR`/\K.` d!{H2Qtt Y<f|KCa lnN`xq  UsG* S <ulK $t5o. q*IFO +:>Xq &B_dPV 9*KJQ[ B$xS(kB %K.H'.K a[HJ h) D57rmx y<4[? q>+qHA \%T?l hRxTq 7pppI ]z7$xgM z#1R9 o^W]"; K6%5X Gf)ZgK~ 1LEhs~EM p;.L= wL~xb x"w&N9c`n} $Py"X)* 'xLv? &~pFh xh`9OK O:^vx sOI/]e L+jEU B9G+w 7f[ z' _7c_), @5K ) 5etrf9 '6_{= Z$JET ^Aq<2 "z)3b 8Rc:L4F $E2\N Q9+A3 w0d!r hkx`0 y}ykl I#UD| m8Q;y 97tz![ A<(fq"(E IW+-`v  OL'Aoa! OghPw  OPYm )zytt a%<u* I2up3NE tq}dp SV"]/{ <j(\& ID`+$ !N+1a B]h*= MW1O] RKK%D %jQ(nT0 k&d~2[XG PB[01$ ^z<'c S=4Gb[ a]@Qg[V7 ge&}Nz s@NzV %g.bB: YIXWRAvk s>5K_ ?B/@3 NsR]K 68imM \lP f @mWY>H !7yrO #l20a ?XKXq ThZ{x Yh=j| 84MXMS P$!{i !s9O% 3hrLCxK RQj[L L1b_SL ?fWYErU "\lYf _D|cN VS6c)E. iCHM1 ztzGz [!$-F N826E J5FN' _Wf0; P Ce{P 1;'^O `B1c$ `V1tt H8gzAb 9 HUvf ]ku>_ pk1T4O  rUMS (BGz2 lTfJ9< tJVXiqm AuB%? KD"f]xb* @kcA8 `7`cX7RB B0u7J i]E!. E/ HF xP3/;U <ga7M sD&Z= vC_bz BeA^$mv !Y0>P V}AU*.JpV8 G9/jN JijR?8 4NC(g XOcq\ IB=kwO @uxa- h2#<] FM`Sm %dC/A Crv6K ^mEyeJ1 kDKM~ (,HY_X i s.s 7ii&9 }#s-( Q$WY^ `bKUR vFj6L [x)r.~ X~qO> /Qyct@ =muMy !*M"\u IO]H8 M`"rY &1.Y`/? /5wP&yN cC40$ Y*C,lg F[R([ =="+". e'&Gg {wSxb i4J30 1sq|v t<<&U0 $Fy%\ 4=]tW Dt7` n ~CNLG %9\ye $JBz(c P\22?L Hp`KP <hYF8 cw0!^ bu`"c p5m80 `\b"y\ cI2/"t ~;;Ut mbmo2< JKE*9%k;0z sl]^@Q |7N" > ?_j?t KSCVhO}W wh"YZ wZ9E@ CBS<@ AO7E{MB ,b$:^ 5}5&C] wBf,M! r.6)i 8|Pl^ VSl={ 3Qq/@ MTi#B c_$pA oFP(!z <.u+Pdve 74gcL m5f)f ._9LXLV g:. # w O(P DIX&C~ XR46r y0gK` 8>,h_ eMn|@ fK"iJ|B .(HeBb5 <uKW'qWl #q!5a ,rKMo Ilvr$m ^+%.3,3 *f6Vh{ "]<gK }R<FZ hP$Zn .Z+.b Z)+\c ;N%? | a_}0czz FysFJ~ ),s#1! ]w@S& (z\V97h c]9/\ B {+d {+A6\k q'D}" Nrb78%5 z%ElA tus8J sjf.:,7; e6Abz Wvai7 -R5#g\M h lbOj7 `O;<3 <7}s) 5-[SIZ BMmdx 9#~_t  |r\r ].%?'#_I x-yt+W yG=_$ gI*hI/ ;4CIT :dVR| M0Jl` rvMgV a]Fr~ ]"n/m UJr[[ V}{m~ X\2?8 p8)E: IoR@z +4H4_r B[+*QD/B 54k6d iXj9_' Q<9|8 0cDeV '"C,V NnoJh q/~npi Vkr4Z ~[&w  .bOQr 2AgY>Qi !sNw{+i> !#gcR ?!_T% =nEs}@ :8HI= gGWg( N~qc[ 1[;EEBJG B1{jj cN,ZL $ ;OA K{eKj BVH"j _=j}^Va lDMN^ bj<]D J3cC]UQx /FgMf C8pM2 z{9sG V]g\C)  ^B^d n#G{_ Cu{_ZN 9w/CS 31:-l 'O8[Zz lwEQ*| i54yI Z,fE6] :P+`j X!;EV  Bwh3 v1y.}R nBgzsN rck/2 ~9m]N2\ 0^U`A h$Gw0 L$8\$E UH/0pr\ %7RpH _j&zO ~lM~v vI1k7 +T&O& ZVTs0/ W9{-L< +cy~h aa@F] p7i6~ sS-k/4 9U@n| rZ`(@ e' qT (vWhP 3_e4, '>zWr _dZro Fh|^PK }3{OQ}!__w: FTt]] QEr'Syz fPKR^ (ou$v{r +\8k^ zJS\& AaL}`B ~Y8^1 #6$W} ow0Q#B j{okT ?jD|uZ ^Ckw'. *+_w=QG ~k=uB* $?w8WJ ;/#'bBm\ :qK|) 1d)/_ rdbxr {R0>g$h\ {IJ{I _(N[h %Anu!Bg OKli= B!uL4 )kQojQO! 8*civ$ v0T1Z _%.rW -u^L(SN JDZxe E&B_h MXTrZu APF*> >VTHLCI g*p0h YLM1  h:,q2" eqI*\ m6`yx $(Q.' 83\~| eJ\Op \1Gycm '(Kae!o Y,Rn~ 0/$+wA *C* 'i,Z^] KSl7/ &%Ir<_ ,}k&n /ri7Y e.[4&% ^<o_, mXkW%PM SR-K4 ^idTF"Y 2Z,E. s\QW4 Th~cl9 r7KDE G[d-r4o $([JA 94UEn ET uv a#!wk CPa^m &P}gAO #_k<u577 YlcnD5 Dyi:S a-EL'}| Muxm|( $&pF> `e]l~ >v4)@ J,bnK GKw/a PuzAp Gpv.r %9L[) BDQ|sp *%>}^15o =5mz& k'MJg OeqO2lV N~Dsb OAb+E ekxz9G 'r:!> UKZ6O -`sow )xKN_A l-!Vjw ISg02< <BpC- grFYn% s#MQYcx X7U'| G@FE_ <hAhq$;.} qMwr`v ZIf|6DQ Q`1(! *?2{< 6qkT9 Fr,&f&H8LK# I2?p`T kBztf Te.R| A@bG| RUF,#a nB|XZ ;-|ln *D1S;` I'FH, ]A8cy W3"d1 7~8h~ 2A>2&J. JD1_Q ?9K52 ^z8IXl ,g#>x( .TpP5 eV;nM6 BlT{>P VD\)l h%2Aj i`Cq=A Dxg&Q [y4lP cV&y, a 'hE o{iEY r,@2)][ 'q=LP GBh>o JCc:[Et IKfH<Mj 37;lZ ]IPn)1  EYMn Z30ga CJoRL MJMKc }3K(?IWVx G=e.G fCFc_ &00Rr )@,m{ %HN?Y $2_Vy" Cd\b1 ,r.W4] 5=kb0 hMZ45 MtVG* ;pSQw W[/ 6 |#<{LW \Y3Ev !saXY HhdbeA` d@=Jx y\:5( Ewpi! eSAnw gUnQ^ +o7C8N (c9 K 7D;jj* /Wd]" hFgs/p tq*U/ "1x$/ g>fCE T<.'JsfI tOqwG 3:,^n .N|?> ].J.@ +v>W- RhupW Zd8mY r=Hzj Lu7\hy ]<3s`l C}{m-5gK ~?AQO Cb=NN  S|B2 d{Zxe 5rXQb Y$79_ K~9AL 7L4<) 7"36j *,ueJ 7y}mU YvfA1 Bb/Yd| ,.=WI <,FwAj s[Q2y 7L4<) Nm4>, 7"36j *,ueJ 7y}mU YvfA1 ,.=WI @x}p{ <,FwAj s[Q2y 7L4<) 7"36j *,ueJ 7y}mU YvfA1 ,.=WI ei%>X <,FwAj s[Q2y 7L4<) 7"36j *,ueJ 7y}mU YvfA1 ,.=WI BH{kb <,FwAj s[Q2y 7L4<) 7"36j *,ueJ 7y}mU YvfA1 ,.=WI <,FwAj -p1/? s[Q2y tyN}; io6AT$ 7L4<) 7"36j *,ueJ 7y}mU YvfA1 ,.=WI bi%>X <,FwAj %g<SR s[Q2y ,.=WI pI?sg. UQ!za h|yd1 St{xt WI"7k =)\CY =zJJWg 8V"2W B+hxAZ1JO! <{E@&: ?(RAs KxpI x Knq7  /}ewf @#\sF4 }.!}bM En?;Z TLF2UZ &jO~4 ypEx-N8 NB0-g X f8N0Z Uq-l3 [F&TV^9 zx'+FS `?q!C 2NfRG eoSO*/} %5>JD$2W =_C"? hp9x4AJ l,zwp@wJ ),1M~L J`p2+ 1Tq%a ~<5x0L= [DLNn 9bV{\ 8U[s0Z 1=`"( iZEkj" *g`k] 9!0_+ npT{T =UWyux C5@*8XBE |o7^N! zb|CRS t<4&{ aQT=(o *1e=<}o WbE.p 3*{;)# ?m?U#4 _D@`F g^@.q %ePk3 33s"% cOF=& *|yh& H {@V fVOi4 %}W'[H vinYVn vf84q KRF=O 8,J8a Vbtqf 1\7}E Im-ZIw N@r;$ F{-iJ ThddlE Z:^5r XnP#? >"ni) T{77G $H+Bl +[P7. S".D3` &mE7` >BB+|*  u'J?96 R'n<v Z0$]1 7RQD` FK8Jt.* J|o~^K C1&CC DfuY}+ M6Zlu $T%E` K *gbZ/}w C7'K! A[1k0< GsC8{B 1!H=0 V49c4 %dk .FB }^BI_E )0y,(Q ^T!v8 0~2g0.P 2"L]u i4+JM02 v E*oss DV:/D{ BqFoC9 S,6\R1 PbF=(+ gB/wM$A .DCG> c9?,%n '_q"ow :o8|e R4_$$ 2S ?6 X3{m! 1|3IH 5-G/A 5+mSJ haFh,# ,Qt/h Wj]gq L)8<: 6_atj -M.xE B`G3) RaS#d EcC7s A^naQ S]2Zf R+x<VT g-OOo^ Q`B,K sBH5c {mYmc Z:*}8 \)vRR l:)-@ ,FL7N .ooEu$ FT6Ox) mLO]} (yn9M UaU<@ Ii;BF ~Su2z d.0&E +dB8j x1AnY Y+cqu YiS|S .GfZb $jcEC_ P()yB `%TV# C(:m{ pvX=_ ^;V7  &O8|z ^;V7  ~WsYRDd ~WsYRDd ~WsYRDd 3ZwO6 3ZwO6 3ZwO6 ~WsYRDd 3ZwO6 3ZwO6 ~WsYRDd 3ZwO6 3ZwO6 3ZwO6 3ZwO6 3ZwO6 DdQ)r KOM]Q r*=W{k ?#A46h Q]y]= ,GPx8 "O~`lS| b8aT7 Rbqt:7u B=|VM X/EN<: nq89s [yra\O[ VK-^;s ?Idk3 ::aur OeIy) ]coY? 45cQ5 r$p"h ZAG!$/ urIM* {t;T88 >L'`56 A=F<z .53u0 f<EKV jnFy0z sq{jc ]SY}VM N@`iGdw s7-j. Y3JJ! |8h:i sTOFU 9[RDBA d*gmQo [dy@"e- ^[eovB :bTOFU 3dTOFU [dy@"e- sTOFU [dy@"e- 0TOFU [dy@"e- Xf;aTOFU [dy@"e- vd*gmQo [dy@"e- sTOFU d*gmQo 0TOFU sTOFU SndOmeJq }p0s8 x~}5} [pVuXX4 PeMQi hG3 ] >iW7Yk]uz)} cHu/T Ir>*K 8NWP_ 0uhRm %$p876 H~RfL. XEA9~ YI%O< Oz?W;kg :k_}IE cpJYV N6fOx JQ&Sb /#4&, W'm$zk ba%RIE\ ba<XP ba<XP v@XVH ~WsYRDd ~WsYRDd ~WsYRDd x[\M9 x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\MB x[\M4T x[\MB x[\MB x[\M4T x[\MB x[\MB x[\M4T x[\MB x[\MB x[\M) ~WsYRDd ~WsYRDd n0vNF ~WsYRDd ~WsYRDd ~WsYRDd ~WsYRDd tCvj5.e ~WsYRDd ~WsYRDd ~WsYRDd ~WsYRDd ~WsYRDd 3ZwO6 ~WsYRDd 3ZwO6 3ZwO6 3ZwO6 ~WsYRDd 3ZwO6 3ZwO6 ~WsYRDd ~WsYRDd ~WsYRDd ~WsYRDd Mx;f@ ~WsYRDd ~WsYRDd ;#4aYfJW Mx;f4T ;#4aYfJW Mx;f4T ;#4aYfJW Mx;f4T ZT=[@ ~WsYRDd ~WsYRDd ~WsYRDd ~WsYRDd ~WsYRDd ~WsYRDd LaQ`_ ~WsYRDd ~WsYRDd ^oaa2 !m~0(w7  $OoO; e'p;-a# e'p;-a# Wjy2a h `6/ j9gar 7%P}r :IJOu\ eMNaGln =:-5z<a &69". `#==k*V ?`}Mlpk vijHJ`o ]|P#w 87NDX OdU}=_' Oz?W;kg :k_}IE cpJYV N6fOx JQ&Sb YmhMd YmhMd YmhMd YmhMd o`sU!H 9f3 N Y;U!H 9f3 N #i5f0 6_?jGJ mb(70 UYnR\ 0^"U!H y"_K5 6cZ`( y"_K5 0^"*} y"_K5 0^"U!H y"_K5 0^"pF 0^"U!H y"_K5 0^"*} y"_K5 0^"*} y"_K5 0^"*} y"_K5 @p9|1 ((d=m ,#<`d$g{ Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r Z)E@r >w{T; mV\{R mV\{R -imV\{R mV\{R J'mnJ !@Lhj K~!r WxdT B;2U#` B;2U#` ;&!T] p%#*} ;&!T] p%#*} ;&!T] QWsb/ QWsb/ *!.KG QWsb/ QWsb/ u9 $x QWsb/ B2*8S LaQ`_ COBvCK 7'_HF $W.k< o`sr` o`sr` o`sr` o`sn? #}/OudcM 7wF*1 ',?X+H ,UDP@ w/+wW 3p>D_ \W>iVA M0W.; 62iW1o JD-W: fgM|4 'o\i3 [)#zq S"'rid &_%#9: S"'rid {5oX| (^;`)K gXpl1^ 5ND~Pn |{z7G @k<R2 W/Nsw S"'rid {5oX| 5ND~Pn {5oX| 5ND~Pn YME}lw -6OZ{y: }Q1JLw)vD] s_L\,V Ei]u{ =;GBz ,L50p isnP(< o<RsC ]<O'a` $.~6< qH+Uw #M>J" 0;TlM %1'D" dK]#j mzPs8^ 0{+Gw VQ-iK: cl7@3 YaqW7 <$8$jTW N4'w\J 5<|v2 \1L)4 33;!U z\45e U(Fda T%lhx @v9Dm]7 t mPz@B "'Ux7 \ }QY` QRaVV 3}K6@ (++:e<t <mvJz .1RF- )hB:! jzhe* h_gqq 46d7Vd -#grK~ %5i4n T}p1G '-w`^ '-w`^ T%lhx @v9Dm]7 t mPz@B "'Ux7 \ }QY` QRaVV 3}K6@ (++:e<t %BzL5 \1L)4 z\45e 5<|v$, rUz7)!8 &Z`UxN U(Fda &ouQ(yGs 7JSdZ c?nf<( YwZ3P ]QW8v& U(Fda NpS A> SKS\MLdL uO}C_  72D4O 5<|v^= 1k(N07 cl7@3 A%,[R m#/kb [+nD) dF>79K y:V+UW 33;!U z\45e U(Fda $O/=h]) yqi#Cl( T%lhx @v9D# $e'!q W>aCO ]QW8v& U(Fda NpS A> SKS\MLdL uO}C_  72D4O 5<|v^= 1k(N07 cl7@3 <$8$jTW N4'w\J 5<|v2 \1L)4 [+nD) Zg1+AS 6 o&G Zg1+AS Zg1+AS YY=," AftDP Zg1+AS ;trF}K Zg1+AS Zg1+AS YY=," 2_-Rl 7irv>_ Zg1+AS SKS\MLdL uO}C_  72D4O ]QW8v& 5<|v^= 1k(N07 d.QA8lFP ;Er!W 2_-Rl J=Bw1] ,bkKh ,P#67Z ;hb.' -rX&wY D qZf %T(M@:; )M2c- Z,6LeM 317)c Z,6LeM %T(X% Z,6LeM )M2c- Z,6LeM 317)c )M2c- H|&Z5i hj"Rd} 'i_d9d44 \V'QuMQz QWGXk P^R'LP >s08y @|m"UAx' Yq@ J \P$bJx sD6lK9< x!-Rv /rNRC 32-^jN }rce\Q q}iA)e cQXol &&kZn 1@aBE Mi.Vv &/@Oe S{JKc Wjy2a |Q\)N f\J4, p9WM? <}%P< Uovkw 3q1IQ d:+qN%/ 3#Aq1!E;om h-h~U %>->h nr&t[ ogE.pNP9aH< lOS/r (g%tq 3lD$f sUPC.< ,X8hH iF`Og ]7_\< |-P~| e{kSM %v+i1_ ?&3sF WP@s} nYFg= _VXOz, p%>V]-c EAo?$Yj 7,S9B9 O=? N= jH?!C1 &47R!LD a!!t{R= ,Cp&1 t=!lq DjNFe Sp@L" *ARRx FA%i` 41g-T  *LxS ,v%|u ` Lx3 L"&2T +,Fs! Ov`sX nDhq] J`cCv1 EuQ/jP6] T~E+)\P }Sn+Ks 1ggZ] wo]IT 7r+nO q&w?y rw*E] EMPXN :VR6x 3e'Fw A,n&8E ql#PA |a0gmw |eqEr C_1{K 2=uFXo; <0~SZ 5vJ$!  O+PC ,JE46SyqB HUc_h \eX;0 hez\8^8 @,VSA b7sV280 F$<&htx CA[}3x  xt0T kM&"^ gsSy|x FP$f:J fv&4X g~`I" &7G-EP XON.8 ?B"4: [H5P>uo #l$O8U otE)Z "Z.Ez "Mr;$8 k.ZIC N+./r!9-X$ <*_!E, Kv9J  }K'(<b ;L%*PM vdvKK T0xqk! -bb%J wRzZp WG<5W /t'f; OE<d*> $B;+k @Y[dI ,r*n>z A|_Qe XDiY9R WA24`u o0oA= HfY~B ^9(b,<us 8 G|+ BcaL6{+ SW[sT& M]GLN 80CY\#y j($pV [[<W' m]$VF9JT z}uc7 eyYHo p;70^ Az#^" .En!#Q !KW"UKN KVy"s m#e9v Q>XYN tH??~ Fs<&El AUn1; X])lkO UO!T| ATq'| 4BBe#" @<#G` F0c1S} /t.zs Y\Q1@ IW%@\ ]r7'B x2"Je >uT|e $?,jh<: !XI.8 `lpRq \omIY H2yo$r  #Mj'n 7<1b% kLp\a[ m[4w'6 }Fh=} srrjA &O|sLXQ xbZm0( +2;_&u qs(nrY ufT@$]QL k2UNP z@9o' -b!pd Gvh9Jf $X(uiX YUb+fK J'E:K Vun9_ >JI(c y{tDL =/6\L V>@\{ #4O+Gl D4X8S {OaAU N,whD L>Ef` F_*_R O]g\) @0ij{ (:$hA v.AcT p^$P)5 -5xc@ cB|S\ DZdtIU i~iO@~j x"}[F hgx~} hE{ye9 ;w2*[ ,7y|:L pv9?<g oPjEh Ffq7E Kxqpn yAR+} %Xx!N5Hp )h_hG P8wIU 4;lEfU, )1^rf RZZ>Xx ~~u=2 ATN?c YmIK, ;DQ t 5l''-{D5 G.HM] B{2_~^ E\]%+% 2Fz!U,f EqVXr s>^/(]y m\eBFu KOb;A ^iWsr J%_jb i.&s.=< 6!R.= NYO$(/ Zt3^F ^Kzqh 5m7w_  #*uQm\ 8O.# . 1gT7X  DSx.HM :aTyD J'}b{ tOI8rT %@bdeC qCylQU@d R#p:R |UWD{ :>,cd *H?DOC HxJ?_ I@]IO vN'qx Nji5s !IO&il pU!VMF a@fFwu }e+rhM Xh;zPN dO2@_ m, x&. #\GLnp= HV3lH IAmI( =V{cp7 1YRce| :t#fD R8E7* }.!3.6 2V5We RtvNK 0`ovU u_:'% {Z:-5 TG,mY /o 08m ;3t25C ."@[] qGgH2Q d!5b" J%K.1 b 58b!$  ? L: wJ@w+ w;kcQf\  %f%Bt9 t:x-_ AvJ0E 7EC6Y _+EQX 1p+9%v* HK =1 M*l_J 1JU&$ BtE&  %<<nb J[vItu >+&)O H[Tdp@! ~UyC= #MRKI C9S.r (7_'v "<D@-. Pn?hq e_GvY*!B sf_w  #HM,t9 ekFAK PXl8s ^jPD3o ,wncK =,}9  asSzzw HqXe> ~ze<e #r4[9  -?}rQx:L 4]kT> {a,VP h#<US u~tLM g(@HOh 303Ro XLFe^ mx9$Q5z daH@& X?F<; UVRMG~ <V"g+ !\fEZ] iD652: S]-@f 9KX>Vi JT27# dD.o:J P:_XXJ Jw{M+ "*@~y 9tlPTX J8T|- K)=1c Qx<:A  q!W[j #g%5] @<\3c1 eRS/+l^ dbEm,j$ ]E<Ex q9 q._ pbBS93@T pz0Wb jc.PL i&% r4 xg{hk P9$)rf =1G'H +Iu30 GL00( XCa`Y #qRM] Pt6@L X3A?5` 2ty1, &4(H&k GE,<O[s+ L)R^K?Y aq)%T B),~S \G(c < eTOt, ry-H{4ez# H##{@) -Ib<< C}__$e Y7dz[ UaEyQx eOFU7 v@-"b ksEaa Z2.mdr r(d2e 1X{mSB A2iIj Iaz~G FR'X\ xz0^S waDO+ -@{bp 0}]9{ &OeLU LSm@Q/ ~'"CMN \eEv- vM^Xn \$t]6 =GdgW .;/?j @4t(A )zbA/ abZFE8D w{JwX2 U}Z\) Etu*s q\No, QqSw_ oaMgR `Vw^4 dtk.u I;r+= "e1<& _xa>$P 0:{M^ =nXB> KwnPf{P X+qy\ ;j8Fx"Z 'd(iG O44Tj z?OLV y\GDEA] CL?UV 7oC=xd IH4Hs` |5h/D OjtJL |3F41 kN9Ug[" krm9kN +Tjr_* -R!Qp R3Tzi ,^$#  \vv/& z$rhG B%\[D 3Et0P c%z._ GHDC}M YXjDINA!|u [uuYB^ K>[z/ i%$Gt 4{a<It (doT, 6q3.5| C]1m~ |][i] w?F7[ <U5J; 1s\}* @woPE {dR9~ g #NB Lb,V6 Fzw4"E &Q=M-  ]UkY,  >VA< o{|qa; S$lU{ qd]~` $<A@j L8uJZw%l QwEZK] A.zJ; rN`-`zI {# @F 2"ERW@\ >[`Vn \7RE. oD*Ddv )CxjR G006f pSFp\ vf,Zx ?6qdL2\A& AMZd2 j[kR{$ 5D?8AF  59>  HQ_^g 6@E,` BpAc, EW De OA/~O jeO[^7K(iy 4_<.b #[,gH iB:p~9 wcx(QN Y5[A4 0k/p' 6ZIpL 46Lwt[b!c+ rg.)- [cPZ5 eDa<M &VF}8QLz |/B#L %Cmn# cY2!< b0'aFoxPP GU@/GM wP89{ ?Cj61f JVr4X4c3 6)&)_ N2m  " @zSvR; gINcCk A2uzu &-aRG "mBGU, @1[a{ 0*sy~I\s X1hV< ,#Zp` 'TIat X,5rW.G +Rz %L ZUtJ+ DKr:ng `%it& R~0$, BV[24 ;@s'a_f X.vkY Y/-Z8f gEx@0 .Q.S4L} PbBta "*^F,E8 ZDpZ; ~M2+$[i" al--Oh #Qc!L. .pNPE raiAQ lnVMX o]0~A ,'h&Z 9Ph2PgA{ O@*Dj <&5seP mfp|@` =9{ye Eg]#S Q[9QZ kTAd"D La+%& Pd9)r$] OuhXn |9,D#v R)8TK 5pTU| )ah B e%]'@`$ c|Xm) 5y)!4 KzYs~ Pp0@3 ;gsPc .M+G) `|6,Z /(x<1(6J t"i$L w8/X6 [>l`+L Dp~2TS. AZ-~h r``KD 0pZ~Z `'K%, kutEv jzbqv3 F:v*cH !C}c( l{"5] P$ih\ rSH0| m5~21 KqsTw ^?OGJ RG;-7 r_.4U @V&N; u3J&fG ;U_eF FDXZT F!N`$ QK[a+ \h-mN *Q7-W4 fm&#"' %`VH$9 'L\>&5 DLh7^ <qT2T s"K^X 3,;Wm ~E]~a q^ScS I,mKq _CM:3 cV":& Fr[qw3 Dd+O]c -=<R& X=*a^|+ c"+yg $;p6U GUGL,Zi db7I|L u^0S=$ v#}-l \s@7^G3 w$@&l Jq~Tw +@1.(4* X'K@" !(z})5f &+4{Eks =La"~ tf;4U ;Jswx" t;E'g bnOa Fj 4/;F! 4A7ho uf#x]j vni#! j?~L0 kJ{QJ wS$~3Ryq '@"K[ WJ/~H Vakf_9 JWzGx M5:%g eWICj (;/U9m Uo"JE9 &?_1~ \Jmfus -v0'6' -[$%4 sL7]: p{f2T !\yW4 WHVLu.c* >RuY  v#$Cc oCq1? lgMuN [p.,g dNHn\% -rM^> [pWMe i,XP}# zLZ3> mz[MB? r$QgVp iJ>Jy` z_}7o 1*{#55; X3]mU~ 2;#Dr ]EO*U xPOVO VrlZ[6 buLq' Q-U_[r~7 cc_\H[ T"TV1 Fzx/'^ PWQ*}% "_0Ng ~t#v~3x [BZZi BOuW' 8=p.m 7>B } $+e@=T v,PQ4 G'i\0M JGs`5 *A(j"g Wb@>9f= Dj,L28 i#$C+{ P$u$L9 //$)+ l)*O+ =>yWVCbl &F{V5U5 mb?e& tbs6&` UH$GB :Y1$ne )Ew*" 4!4Qq X+l9+_ 55xI$ PQI@? Jc?llL ]XKel $Gi q _f&(" XYqOl Msv\|e ,`WI^ SzOfI3. ].reD %9V'; _'`@J yzbeR Thg!S 3=f&` _~>Ti Q_591= .a?tR  '_s<wpBJ?4 4~ae/O m1Prq( 3{c?C )^mXi DQ&m$m Qs*!A hQQQjr' ]X#r( lo5jK< [wq-N Sng9/ c+Vu  r-.:~c o},CS9 !@?'9 y}Y@1h3 5rb/[ \)8"l  7<yT #;}PD -Et0C Lz.?hO U4{)D H@)'a 4#Y7" </rza S,CmA oV= p& }K~=s -As-,SXt +LY|uKSu B9HyC d3*)| O8FX1 |*+c2 ?bt9a J;IS~ Voqx\E cHo,"y o.0T'lHmMM kKtB0iB us}a# Z3hSL;' Q'crA :lXs5Q TWEZVI SQ%E) &:D7n{ u"4S#>> 4)D28 =G= u Yj2K.! ;ty2A9 W_>]k (:35 T uwDBq -7Fc.:[ +",'S `kztK $3m6Eh lO@A1 Ws#]4 INH>1k UM^U# 1!%u  _3L7EEc D+OB[ Ck#kL "gpso@ w|NNI `3ty> cp,/[ X7dXB `-])T. wFH[Cd IiaUL#2 Pj40: ^4shE +Zu5(f oEt{S 8cKxB K$R'o HReg+C 6T%s@ >s&z{ m_XU# KzYw; <M}fn +Q(K7d RhX^| jYuYd v2,Ji iL{E&PH "rC l@ Vcaz20 0:H/w4N dq\MS :>qr7 j@/0| &u1ap T`O2~ +c2Qi ob "bQ DP%\2 ),[GM Y)+||Tb V[}de;E {OSzww V.Rm& @&_ O 3?liS uBLd;.T QGC1w riy0*` Y0k1B fF[S$,9 ;wj|& (VxUK 8={5[9 t1pMjnp  A,h)IM=4 6t4uzG ?_`\! H)@mfL j\?R7 P?\+i e^]#.$A YTp~w pj6P9 P-v(#|} ^&O_+ _:msD0U B]=uL Ach(bT G?y2Xn =p$i: <8z+> 'Vjme xq<P# N T|C =tQGa rxUb2 *"A,x jBO\?t| D#<Ux CDnm^`1 "b(BP {'t;C -i>[, p|dM{z =J;\%\` UB"Ut .h:Lmc7 ^>etP S/<}b H=TZC ;%sV) ZZK\@ 6g$}A m]IKvW wJ5}2\ #nlj;- ="Nck sgGG^ 1[s[I %r,SK J$t1h =AT%k >^T"V 3eNpBO &=cdwT orZ^!. M7Y!T *^"1bO =k+0w DQ,\x' Gn{iKd zDhOyUt A/`q< -P"'| o-<<q HP*[n_ &W[*Gq S[1QD WIh{W ?l|mE Fe"\| 8SO="5 'U5%` @{[Q.  &ucm zpsaI \Az1l ^9E6MvE \B#]~ #^v/= c1Xsh 2y"yzaU mv2']* 6zEY% _se(g 0k5pw Zg|;' HV\r* dH7c'P oBF0e 6(r}` XhN(, i),Ruf s;jy$ M~WO\ 4MW\R %0.]Lg UP[E5 Zgu-" %CK3>D l?(,. {J.$N'X "wlX~ Z!&\3 -@Xif| 3@K8`, ?yGOb h%N*%  !ro5: ^3VMU; 05Npr N'BKx ?^{t6nYq kLNCXB vP:4t R%c"E /eR 84 Fhn"m ](hQI "Ghe` q7v'H c]cks xHfY_ t'=D{ -?#aGt [E,#bD oY1*/ zEA<w Y$$P6 R&Kf*K d8jK<3 7Llk"B $|>R`K QVL[P&Gz ~zJA: 3M7L@$ 4p_<d $C2wk fko#+" Z"SQp E cp5 'Y2,Hl9 ^UDTZ'1 \l?KH )Yi9I '}Uw~ 7r4"rBn w'(yjUe l($HKuw" mM00" X,Ag^[* MzzWOE ?(.R}h yz[9:/s" Y\}DS 8`Eh%F op!]d `d@Ad <y.7{ E)Rg^ Q570/c %j(sAi ]InMt ZDo'&=+N:'1 61s=]3 F_kfOX 9$PQL Ew<8d A1=h1p h[nf< ;}=En" \/*oNs v79:7G q|CB? @K]#Rs DnN}J 8)DT*j~ yV~CZ6 q$3oc k2quM g#I}  r5!zt\ LZb|j` 1,H ( 9,8ul +3):_ okY"|Ma S>d16 r~;t<< WRL1o k~o_=iF2]sFPermission for this document is currently restricted. If you are not running Microsoft Office 2003 or an application that supports documents with restricted permission, you can read this document by downloading the Rights Management Add-on for Internet Explorer. HYPERLINK "http://r.office.microsoft.com/r/rlidRestrictedPermissionViewer?clid=1033" \o "Download the Rights Management Add-on for Internet Explorer" Download the Rights Management Add-on for Internet Explorer HYPERLINK "http://r.office.microsoft.com/r/rlidDRMMoreInfoLicenseReq?clid=1033" \o "Learn more about documents with restricted permission" Learn more about documents with restricted permission U}HSQ $"$,GE(TP VU*[ptP jq7z#J MG5$|
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\sg\Challenge Response Outline.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Processes TitleProcesses Michael Courage Normal Michael Courage Microsoft Word 10.0b%MC%Challenge/Response overview This document contains a brief description of the challenge/response mechanism we use to detect modified Xboxes and pirated games, a set of processes and tools that will be required to deploy the feature, a list of policy questions and the beginnings of a plan to get the challenges going for launch. The mechanism The XSP protocol between XNet and the Security Gateway includes a Challenge/Response mechanism designed to detect piracy and modified Xboxes. The SG may include a challenge in a key exchange reply. If the reply contains a challenge, XNet must respond to the challenge in an XSP SECMSG before attempting to send any other traffic through the SG. Each challenge the SG may send has two configurable expressions associated with it. The expressions are evaluated given the response as a parameter. One expression determines if the response is interesting enough to be recorded in the SG s log file. The second determines whether or not the box should be immediately disconnected (kicked) from the service. These expressions are called the log expression and the kick expression. DVD challenges The DVD challenge is designed to detect piracy. Pirated copies of games do not generally include a full image of the original game disc. The DVD challenge takes advantage of this fact by challenge the client to prove that it has access to the image. The SG sends a block number and two offsets to the Xbox. The Xbox responds with two 20 byte buffers that contain a 20 byte hash value and 20 copied bytes from the DVD. The hash is a SHA1 hash of the block starting at the first offset and covering the remainder of the block. The copied bytes are copied from the second offset. The SG does not select challenges from the full available set. Instead it computes the index of the  current  challenge as a function of time elapsed since the generation of the challenge set. For each key exchange there is a 50% chance that the current challenge will be selected, and the other 50% is distributed evenly among previously used challenges. This means that we always have a new challenge available that pirates haven t seen before. It also means that we have to periodically harvest a new set of challenges so we can continue to advance the current challenge. Code challenges The code challenge is designed to detect modifications to the Xbox. The Security Gateway sends a small piece of signed code to the Xbox. The Xbox verifies the signature and runs the code. The code generates a 256 byte response buffer that is sent back to the SG. The SG selects challenges from the full set available. At some point we may want to update the code challenges to use a time-based scheme like the DVD challenges do so that we can always have fresh code challenges available. Processes Generating challenges DVD challenges DVD challenges will be generated automatically by a tool. For each DVD, the tool will generate a large set of random challenge parameters. It will then read the game DVD to determine the expected responses. Then it will generate a Security Gateway configuration file that contains the challenge set. When do we generate new challenges? When a new title goes live. When a new version of a title goes live. When we auto-update a title. Even though there is no new physical media the auto-updated title has a new version number, so the SG views it as a potentially different DVD with its own set of challenges. At some periodic interval. If we allow our challenge sets to get stale, then pirates will harvest all the challenges we might send. To reduce configuration churn on the SG we can refresh the challenge sets for all titles at once. To do this someone needs to keep a collection of every DVD that has a title that connects to Live. Code challenges Code challenges are partly written by hand and partly generated by tools. Many code challenges will be sent with a 16 byte parameter block that influences the response. This makes it harder for modified net stacks to keep a table of responses. We may also run tools that generate multiple obfuscated challenges from a hand built sources challenge. When do we generate new challenges? When we think of a way to detect mods that isn t covered by existing challenges. At some periodic interval we should generate new versions of parameterized challenges. Testing challenges In a test harness Running in a test harness allows us to check all challenges in a set. Since the SG assigns challenges randomly, it would be difficult to use the deployed SGs to test the full range of challenges. We can also use the harness to test against the full range of known kernels and hardware. On *Net, limited client set The SG has a feature that allows code challenges to be targeted at a specific set of clients. This allows us to do a controlled test in a more real-world environment that the test harness. On *Net, logging only The Kick and Log expressions can be set to FALSE and TRUE respectively to sanity check response data from the full range of clients that are hitting one of the networks. Storing challenges The challenge configuration files on the SG should be kept somewhat protected because they will contain the  answers  to all challenges. We can use the same protected configuration system that is used to store the site keys on the SG.  Deploying challenges on the SG As long as the number of configuration files is small, we can use xkeymgr.exe to install challenges. If we decide to keep challenges in a large number of separate files then we may want a new tool to do a bulk install. Storing & analyzing responses The SG generates text logs containing challenge responses. There are separate logs for DVD and Code challenges. A response is logged if either or both of the kick or log expressions evaluated to true. The log files generated by the challenges should be analyzed by a reporting tool that can provide a list of Xboxes that failed challenges, compute pass rates for each challenge, etc. It may also be useful to store response information in the UODB for each box so that we can see patterns of failure on particular machines. We may not want to Kick a box for certain types of failure cases, like if the Xbox reports an error while reading the DVD. However if a certain box always reports a DVD read error we want to know. Code challenges may uncover similar anomalous readings that are only interesting if additional responses are also out of expected ranges. Bad challenges If a bad challenge makes it to production we may suddenly see zillions of Xboxes unable to log on. The SG challenge configuration has a global on/off switch for exactly this situation. It may be that the problem is limited to a specific type of Xbox or a specific title or challenge (e.g. people with 4034 kernel can t sign on with Foo 2k3 20% of the time). We should make sure the log analysis tools are designed to detect this sort of pattern. Any code challenge can be disabled for a specific title if necessary. Tools DVD challenge generator From a DVD in the drive, the DVD challenge generator creates a set of DVD challenges and outputs them to a file in the format read by the security gateway. This would be easiest to do on a DevKit (because it s easy to retrieve the output), but the kernel needs to be modified to read retail discs. Code challenge signer The code challenge signer takes an executable image and generates a challenge file containing the digital signature for the challenge code followed by the code itself. Code challenge builder Given a challenge, we need to be able to generate a set of parameter/response pairs and an SG configuration file. The tool (or its output) will probably require some tweaking for each challenge because the responses may not be simple fixed numbers as with the DVD challenges. Challenge installer The challenge configuration files on the SG should be kept somewhat protected because they will contain the  answers  to all challenges. We can use the same protected configuration system that is used to store the site keys on the SG. As long as the number of configuration files is small, we can use xkeymgr.exe to install challenges. If we decide to keep challenges in a large number of separate files then we may want a new tool to do a bulk install. Test tools ll need a harness that can send sets of new challenges to titles in a non-random way so we can sanity check the results and determine the ranges of acceptable results. Reporting tool The log files generated by the challenges should be analyzed by a reporting tool that can provide a list of Xboxes that failed challenges, compute pass rates for each challenge, etc. Tools to add and query UODB information If we want to keep track of failures & other anomalies per-machine, we ll need to have tools to save away the data and get it out afterwards. Policy questions When should we Log? When should we Kick? When should we ban a box from the Live service? What do we tell people who get kicked or banned? Getting to Launch Goals Since the launch is close at hand we won t have time to make all the tools and other infrastructure that will eventually exist. However with some care we should be able to meet a couple of simple objectives. Avoid screwing up the experience of the vast majority that aren t running a mod chip There are three things that will make this go smoother. A limited scope for the initial code challenges, avoiding super aggressive challenges and of course lots of testing. Limiting the scope of the initial code challenge means less new code to test and more time to test it. What this means is that the response expressions that flag modded boxes should be somewhat lenient in cases where hardware or timing glitches will influence the response. Since the number of modified boxes in the service is likely to be a small percentage, the negative consequences of a test that produces false positives are likely to outweigh the result of a few modded systems slipping through. Of course there s no reason for mercy if we discover a clearly modified kernel. The number of titles, kernel versions and challenges isn t that large yet. We should be able to run through all of them at least once to make sure they work. Detect and lock out most or all modded systems for a limited time Even with a small number (like one or two) of code challenges we can probably detect all existing mods by examining the kernel code in main memory or in ROM and matching them against the set of all official kernels.  Things to do by week October 7 Refine the plan. Write ops documents describing challenge deployment and log handling during this ramp up period. Build DVD reading tool.  Build the code challenge. October 14 Deploy challenges on BetaNet and ProductionNet as soon as we can in log only mode. Deploy code challenge on TestNet & BetaNet and log all results. Test the code challenge against all of our kernels and as many real titles as we can. October 21 Build log analysis tools to find challenges that could cause trouble. Figure out expected ranges of response values. Test the challenge against all available kernels (including mods) and all currently enabled titles. October 28 Put challenges in production net targeted at our test machines. November 4 Send challenges to all boxes in production and log results. November 11 Throw switch to lock out modded boxes. Continue logging all responses. Things we need to get Retail & Beta Xboxes in every version. DVDs of all Retail & Beta games that are Live. Things to make Some level of automated test framework. The code challenge. The DVD challenge generator. A document that describes the challenge deployment process in more detail as well as what to do with the generated log files. Should include  emergency off-switch  instructions. Simple log analysis tool. Things to put off for now More sophisticated code challenges and tools to generate them. Longer term storage of response data. Detailed process document for updating challenges. Questions When will we get final bits for each of the launch titles? What kernel versions are available on Beta Xboxes? Are they the same set as we have in retail? Do we already have a process for denying an Xbox access to the service? Other stuff Things that would be nice to change in the SG The SG can release new DVD challenges every N minutes, but can t do so for code challenges. Adding this functionality for code challenges would make it harder for hackers to memorize the set of correct responses. The challenge logs don t contain records for boxes that did not respond to a challenge. It s possible that we could derive this information from other log files, but life would be easier if that wasn t necessary. Microsoft Confidential gd%zu gd%zu gd3u@ gd3u@ gdpEA gd&Rq
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\Presence\Test\Presence Server Cluster Test Plan.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Spec Template Title _PID_HLINKSXbox Online Spec Template William Patterson Xbox Live Test Plan Template.dot Jay Patterson Microsoft Word 9.0TOC \o "1-4" \h \z \u   HYPERLINK \l "_Toc78283889"  Table of Contents  PAGEREF _Toc78283889 \h   HYPERLINK \l "_Toc78283890"  Summary  PAGEREF _Toc78283890 \h   HYPERLINK \l "_Toc78283891"  Schedule  PAGEREF _Toc78283891 \h   HYPERLINK \l "_Toc78283892"  Goals  PAGEREF _Toc78283892 \h   HYPERLINK \l "_Toc78283893"  Non-Goals  PAGEREF _Toc78283893 \h   HYPERLINK \l "_Toc78283894"  Related Documents  PAGEREF _Toc78283894 \h   HYPERLINK \l "_Toc78283895"  Functional Testing  PAGEREF _Toc78283895 \h   HYPERLINK \l "_Toc78283896"  Summary  PAGEREF _Toc78283896 \h   HYPERLINK \l "_Toc78283897"  7.1.1 General Overview  PAGEREF _Toc78283897 \h   HYPERLINK \l "_Toc78283898"  7.1.2 Messaging Service Specifics  PAGEREF _Toc78283898 \h   HYPERLINK \l "_Toc78283899"  7.1.3 Team s Service Specifics  PAGEREF _Toc78283899 \h   HYPERLINK \l "_Toc78283900"  New Test Cases for M1 Milestone  PAGEREF _Toc78283900 \h   HYPERLINK \l "_Toc78283901"  7.2.1 Expand Coverage of Existing Protocol.  PAGEREF _Toc78283901 \h   HYPERLINK \l "_Toc78283902"  7.2.2 Configuration Changes  PAGEREF _Toc78283902 \h   HYPERLINK \l "_Toc78283903"  7.2.2.1 Stateful Backend (INH)  PAGEREF _Toc78283903 \h   HYPERLINK \l "_Toc78283904"  7.2.2.2 Front Door (IIS)  PAGEREF _Toc78283904 \h   HYPERLINK \l "_Toc78283905"  New Test Cases for M2 Milestone  PAGEREF _Toc78283905 \h   HYPERLINK \l "_Toc78283906"  7.3.1 User Migration  PAGEREF _Toc78283906 \h   HYPERLINK \l "_Toc78283907"  Existing Reusable Test Cases  PAGEREF _Toc78283907 \h   HYPERLINK \l "_Toc78283908"  7.4.1 Presence Service (ID: 2)  PAGEREF _Toc78283908 \h   HYPERLINK \l "_Toc78283909"  7.4.1.1 PMSG_ALIVE  PAGEREF _Toc78283909 \h   HYPERLINK \l "_Toc78283910"  7.4.1.2 PMSG_ALIVE_2  PAGEREF _Toc78283910 \h   HYPERLINK \l "_Toc78283911"  7.4.1.3 PMSG_ADD  PAGEREF _Toc78283911 \h   HYPERLINK \l "_Toc78283912"  7.4.1.4 PMSG_ADD_2  PAGEREF _Toc78283912 \h   HYPERLINK \l "_Toc78283913"  7.4.1.5 PMSG_DELETE  PAGEREF _Toc78283913 \h   HYPERLINK \l "_Toc78283914"  7.4.1.6 PMSG_ACCEPT  PAGEREF _Toc78283914 \h   HYPERLINK \l "_Toc78283915"  7.4.1.7 PMSG_REJECT  PAGEREF _Toc78283915 \h   HYPERLINK \l "_Toc78283916"  7.4.1.8 PMSG_BLOCK  PAGEREF _Toc78283916 \h   HYPERLINK \l "_Toc78283917"  7.4.1.9 PMSG_UNBLOCK  PAGEREF _Toc78283917 \h   HYPERLINK \l "_Toc78283918"  7.4.1.10 PMSG_INVITE  PAGEREF _Toc78283918 \h   HYPERLINK \l "_Toc78283919"  7.4.1.11 PMSG_INVITE_2  PAGEREF _Toc78283919 \h   HYPERLINK \l "_Toc78283920"  7.4.1.12 PMSG_CANCEL  PAGEREF _Toc78283920 \h   HYPERLINK \l "_Toc78283921"  7.4.1.13 PMSG_INVITE_ANSWER  PAGEREF _Toc78283921 \h   HYPERLINK \l "_Toc78283922"  7.4.1.14 PMSG_NICKNAME  PAGEREF _Toc78283922 \h   HYPERLINK \l "_Toc78283923"  7.4.1.15 PMSG_STATE  PAGEREF _Toc78283923 \h   HYPERLINK \l "_Toc78283924"  7.4.1.16 PMSG_WEB_FRIENDS  PAGEREF _Toc78283924 \h   HYPERLINK \l "_Toc78283925"  7.4.1.17 PMSG_PEER_SESSION  PAGEREF _Toc78283925 \h   HYPERLINK \l "_Toc78283926"  7.4.1.18 PMSG_PEER_SUBSCRIBE  PAGEREF _Toc78283926 \h   HYPERLINK \l "_Toc78283927"  7.4.1.19 PMSG_PEER_UNSUBSCRIBE  PAGEREF _Toc78283927 \h   HYPERLINK \l "_Toc78283928"  7.4.1.20 QMSG_DEQUEUE  PAGEREF _Toc78283928 \h   HYPERLINK \l "_Toc78283929"  7.4.1.21 PMSG_DEAD_USER  PAGEREF _Toc78283929 \h   HYPERLINK \l "_Toc78283930"  7.4.2 Messaging Service (ID: 18)  PAGEREF _Toc78283930 \h   HYPERLINK \l "_Toc78283931"  7.4.2.1 QMSG_SEND_MESSAGE  PAGEREF _Toc78283931 \h   HYPERLINK \l "_Toc78283932"  7.4.2.2 QMSG_MESSAGE_SUMMARY  PAGEREF _Toc78283932 \h   HYPERLINK \l "_Toc78283933"  7.4.2.3 QMSG_MESSAGE_DETAILS  PAGEREF _Toc78283933 \h   HYPERLINK \l "_Toc78283934"  7.4.2.4 QMSG_MESSAGE_FLAGS  PAGEREF _Toc78283934 \h   HYPERLINK \l "_Toc78283935"  7.4.2.5 QMSG_ENUM_MESSAGES  PAGEREF _Toc78283935 \h   HYPERLINK \l "_Toc78283936"  7.4.2.6 QMSG_DELETE_MESSAGE  PAGEREF _Toc78283936 \h   HYPERLINK \l "_Toc78283937"  7.4.2.7 QMSG_REVOKE_MESSAGE  PAGEREF _Toc78283937 \h   HYPERLINK \l "_Toc78283938"  7.4.2.8 QMSG_REVOKE_MESSAGE_EX  PAGEREF _Toc78283938 \h   HYPERLINK \l "_Toc78283939"  7.4.2.9 QMSG_ENUM_TITLES  PAGEREF _Toc78283939 \h   HYPERLINK \l "_Toc78283940"  7.4.2.10 QMSG_DELETE_TITLE  PAGEREF _Toc78283940 \h   HYPERLINK \l "_Toc78283941"  7.4.2.11 QMSG_SEND_SYSTEM_MESSAGE  PAGEREF _Toc78283941 \h   HYPERLINK \l "_Toc78283942"  7.4.2.12 QMSG_SYSTEM_MESSAGE_DETAILS  PAGEREF _Toc78283942 \h   HYPERLINK \l "_Toc78283943"  7.4.2.13 QMSG_ENUM_SYSTEM_MESSAGES  PAGEREF _Toc78283943 \h   HYPERLINK \l "_Toc78283944"  7.4.2.14 QMSG_DELETE_SYSTEM_MESSAGE  PAGEREF _Toc78283944 \h   HYPERLINK \l "_Toc78283945"  7.4.3 Teams Service (ID: 19)  PAGEREF _Toc78283945 \h   HYPERLINK \l "_Toc78283946"  7.4.3.1 PMSG_TEAM_CREATE  PAGEREF _Toc78283946 \h   HYPERLINK \l "_Toc78283947"  7.4.3.2 PMSG_TEAM_LIST_TEAMS  PAGEREF _Toc78283947 \h   HYPERLINK \l "_Toc78283948"  7.4.3.3 PMSG_TEAM_LIST_MEMBERS  PAGEREF _Toc78283948 \h   HYPERLINK \l "_Toc78283949"  7.4.3.4 PMSG_TEAM_DELETE  PAGEREF _Toc78283949 \h   HYPERLINK \l "_Toc78283950"  7.4.3.5 PMSG_TEAM_REMOVE  PAGEREF _Toc78283950 \h   HYPERLINK \l "_Toc78283951"  7.4.3.6 PMSG_TEAM_MANAGE_TEAM  PAGEREF _Toc78283951 \h   HYPERLINK \l "_Toc78283952"  7.4.3.7 PMSG_TEAM_MANAGE_MEMBER  PAGEREF _Toc78283952 \h   HYPERLINK \l "_Toc78283953"  7.4.3.8 PMSG_TEAM_RECRUIT  PAGEREF _Toc78283953 \h   HYPERLINK \l "_Toc78283954"  7.4.3.9 PMSG_TEAM_JOIN  PAGEREF _Toc78283954 \h   HYPERLINK \l "_Toc78283955"  7.4.3.10 PMSG_TEAM_GET_TICKET  PAGEREF _Toc78283955 \h   HYPERLINK \l "_Toc78283956"  Stress Testing  PAGEREF _Toc78283956 \h   HYPERLINK \l "_Toc78283957"  Revision History  PAGEREF _Toc78283957 \h  Summary This test plan will cover all services offered by the Presence Server Cluster: Presence (and supporting notification queue management) Messaging Teams It is a combination of the plans that were previously done separately for each of the above three feature areas.  It expands on them by calling out specifics of what s new for each milestone. Functional cases are enumerated and stress (performance) testing methods are given that will be used to validate the cluster against release criteria.  In other words, II it isn t in here it isn t part of regression or stress runs that contribute to the decision by test to sign off. M1 Milestone The Presence and Notification in house (INH) server clusters are being combined into one stateful server cluster (PRESINH).   This cluster will provide backend support for the presence, teams and messaging services.   The Presence and Notification Front Doors (XPNFIIS) will continue to provide the same entry points for all of these services, so from the client perspective (Web and Xbox) these changes are transparent.   However, the changes being made to the backend are huge: A cluster of independent servers (NotiInh) and the internal protocol used to communicate to and between them is going away.   The new combined stateful backend (INH) server will support dynamic scalability via user migration. The stateless front door (IIS) server will be rewritten in C#. Configuration information will be loaded from the new configuration database instead of a local initialization file.   The XProfile database is going away, its contents merged into the UODB. The Monitoring server is also going away this release so the new presence cluster will have new means of recognizing dead Xboxes or SG. M2 Milestone Schedule The dates for these deliverables are set and managed by the release manager in conjunction with input from test management.  Deliverables for each milestone are:  M1 Milestone: Test Plan Complete -- 7/11/2004 Test plans written and updated for the current milestone.  Get test plans formally reviewed before  Test Functional Code Complete Test Functional Code Complete -- 7/30/2004 Test plan reviewed and functional test code written but not necessarily run against service yet. Test Stress Code Complete -- N/A There is no required stress testing for M1 Test Functional Test Complete   8/20/2004 Functional Test Complete passing percentage criteria for this milestone is 100% positive cases and 80%+ for negative test cases. Test Stress Complete -- N/A There is no required stress testing for M1 Test Complete   8/20/2004 Both the  Test Functional Test Complete  and  Test Stress Compete  criteria have been satisfied and all active bugs for the milestone have been closed and ready for signoff M2 Milestone Goals Fundamentally the intention of this document is to: Enumerate functional test cases for peer and dev review to ensure completeness and solid criteria for sign off. Describe stress testing enough to give a clear picture of what s expected of the servers for the same reason. Also each milestone may have specific goals. M1 Milestone The emphasis for this release will by to quickly identify problems caused by the vast changes being made to the internal working of the service. Take advantage of the fact that the external protocol is not changing to reuse and expand the large number of existing tests focused on it. Develop new methods and tests for validating proper use of the configuration database.  M2 Milestone Non-Goals This plan does not include the following for any milestone:  Validation of external tools or batch processes.  That is, anything not done in the context of processing requests in real time, with the exception of message expiration.  For example, team data expiration and reclamation. Testing of internal or in-cluster messages.   Client driven scenarios such as cross title message filtering or team invitations. Any explicit testing of services not provided by the presence cluster that make use of those services.  For example, competitions using messaging, stats using teams, etc.  (Though the shared test library will be made to support the simple use of presence, teams, or messaging when testing these other services.) Any testing of the alerts system or generation of alerts by the cluster.  (Though it will be a priority to provide shared test library support for creating situation that would cause a presence cluster generated alert.) Any testing of String server or Storage server to verify message properties that contain references to them. Any testing of other services that make use of the concept of teams, such as competitions, storage, stats, etc.  As testing progresses to final release, each milestone may also need to additionally specify what it will not include. M1 Milestone Testing directly to stateful (INH) servers.  This may be necessary later for testing of user migration but that question will not be resolved in the M1 timeframe. M2 Milestone:  Related Documents Messaging Service Implementation   Tsunami ($corext\private\doc\server\presence) Excellent details on how the messaging service works. Xbox Live Common Configuration Development Spec ($corext\private\doc\common\config) Details on how configuration database will work and be used. Detecting Offline Users and Xboxes ($corext\private\doc\server\presence) Discussion of reasons for eliminating the Monitoring server and how that might be done. Xenon DB Dev Spec Xenon DB Dev Spec ($corext\private\doc\sql) Discussion or database reorganization including merge of XProfile into UODB Server Consolidation (($corext\private\doc\common) Stateful Server Migration (($corext\private\doc\common) Not specific to how the merging of NotiInh or PresInh will be done, but as good as it gets for how user migration will work. There are no docs checked in concerning the teams or presence service interfaces or implementations. Functional Testing Summary Whenever possible, functional tests interact with only the front door.  The protocol to the INH servers in most cases is identical and messages are merely routed, but in some cases legacy messages are translated to newer versions at the front door so that is the only place they can be sent.   Also because the internal intra-server messaging is more fluid and not well documented, it became too difficult to keep up with.  All intra-server interaction is tested implicitly by use of the established external protocols that are established by client and web service API. Functional testing is divided into sections for each of the services the cluster supports.  Presence (and Notification), Teams, and Messaging.  All messages share a common header structure but are serviced via a URL and ports at the FD specific to each. General Overview The common header used for all messages to the FD (as well as other internal messages) is: struct BASE_MSG_HEADER     DWORD  dwMsgType;     DWORD  dwMsgLen;     DWORD dwSeqNum;     SGADDR sgaddr;     // BYTE rgbMsgData[ dwMsgLen ]; In addition to messages using the header above that travel to and between presence cluster servers on TCP connections there are messages with the SG via UDP to provide asynchronous notification of the results of certain requests made to the front door as well as notification of external events.   These are QVal messages and to the SG they are similar to SPI Auth/Data requests, except the purpose of them is to allow the SG to collect notification state and deliver It to the client via the heartbeat.   The QVal message is designed to be extremely flexible and self describing but it practice it s always the same:  It always contains the following QVals: QFlags   Signal to Dequeue notifications of types flagged. NewInvite   Signal to display in game that a new game invite has arrived. NewMsgIDs   ID of last 3 new messages. NewMsgData   Additional data for the last 3 new messages. DelMsgIDs   ID of last 3 deleted messages. When QVals are expected they are verified.  Also when QFlags indicate the need to dequeue that is done and verified. Messaging Service Specifics The message server is designed for flexibility and expansion.  For that reason there isn t a lot of enforcement of particular message semantics, or access restrictions on the server.  This is mostly left for the client API and/or other services to enforce. The basic information about a message is the message summary. struct Q_MESSAGE_SUMMARY     ULONGLONG qwSenderID;     ULONGLONG qwSenderContext;     MSGTIME   mtSentTime;     DWORD     dwMessageID;     DWORD     dwMessageFlags;     DWORD     dwSenderTitleID;     WORD      wExpireMinutes; // An offset in minutes from the sent time     WORD      cbDetails;     BYTE      bMessageType;     char      szSenderName[XONLINE_GAMERTAG_SIZE-1]; System messages have slightly different summary information. struct Q_SYSTEM_MESSAGE_SUMMARY     DWORD     dwTitleID;      ULONGLONG qwSenderContext;     FILETIME  ftSentTime;     DWORD     dwRegion;     DWORD     dwMessageID;     DWORD     dwMessageFlags;     WORD      wExpireMinutes; // An offset in minutes from the sent time     WORD      cbDetails;     BYTE      bMessageType;     char      szSenderName[XONLINE_GAMERTAG_SIZE-1];     char      szDescription[XMSG_SYSTEM_MESSAGE_DESCRIPTION_LEN]; Message details are more complicated. They are a free form collection of properties.  This is the header: typedef struct _XMSG_DETAILS     WORD wPropCount;     WORD cbData;     // This is redundant with cbDetails in Q_MESSAGE_SUMMARY     // XMSG_PROPERTY rgProperties[wPropCount]; // Property descriptors     // BYTE          rgbData[cbData];          // Property data } XMSG_DETAILS, *PXMSG_DETAILS; The definition of specific message property structures, constants, and macros is not included here because it is not necessary for the purpose of evaluating test case coverage for the messaging server.  To do so would be overly complicated and distracting.  It will be enough to note when a particular property is being set and verified.  In other words, for the most part details are a list of property structs and a blob of binary data. The messaging server doesn t care about what s inside the blob, though at least the existence of certain properties is sometimes checked.  However, test cases involving properties will make sure this data is not modified on its way through. typedef struct _XMSG_PROPERTY     WORD wPropTag; // This property's type and unique identifier     union     {         WORD wPropOffset; // The offset from the start of rgbData of this property's data         WORD wData;       // For type XONLINE_MSG_PROP_TYPE_I2 this contains the actual data         BYTE bData;       // For type XONLINE_MSG_PROP_TYPE_I1 and                            //   XONLINE_MSG_PROP_TYPE_BOOL this contains the actual data     }; } XMSG_PROPERTY, *PXMSG_PROPERTY; The message type establishes the purpose of the message and the properties that are required for a message of that type: Context Required Properties Title Custom Title defined Title defined Friend Request Game Invite See Flags Session ID Team Recruit Team ID Comp Reminder Comp Event ID Comp Name & Start Comp Request Comp Entity ID Comp Name, Start, & Close Live Message System Text Message Flags can be set or cleared, these are: #define XONLINE_MSG_FLAG_REQUIRED        0x00000001 // user is required to read this #define XONLINE_MSG_FLAG_RECOMMENDED     0x00000002 // user has a system recommended message #define XONLINE_MSG_FLAG_HAS_VOICE       0x00000004 // message contains a voice attachment #define XONLINE_MSG_FLAG_HAS_TEXT        0x00000008 // message contains a text body #define XONLINE_MSG_FLAG_READ            0x00000010 // message has been read #define XONLINE_MSG_FLAG_NON_EXPORTABLE  0x00000020 // only display on consoles, not web #define XONLINE_MSG_FLAG_TEAM_CONTEXT    0x00000040 // context refers to a team ID #define XONLINE_MSG_FLAG_COMP_CONTEXT    0x00000080 // context is comp event or entity ID #define XONLINE_MSG_FLAG_ALTERNATE_TITLE 0x00000100 // message is from an alt Title  #define XONLINE_MSG_FLAG_MARKETING       0x00000200 // Used on title-wide msgs to indicate                                                     //   opt-in settings should be checked #define XONLINE_MSG_FLAGS_TITLE_RESERVED 0xFF000000 // reserved for title custom messages // Flags valid in a call to send a message #define XONLINE_MSG_FLAGS_VALID_SEND_MASK ( XONLINE_MSG_FLAGS_TITLE_RESERVED | \                                             XONLINE_MSG_FLAG_NON_EXPORTABLE | \                                             XONLINE_MSG_FLAG_REQUIRED | \                                             XONLINE_MSG_FLAG_RECOMMENDED | \                                             XONLINE_MSG_FLAG_HAS_VOICE | \                                             XONLINE_MSG_FLAG_HAS_TEXT | \                                             XONLINE_MSG_FLAG_TEAM_CONTEXT | \                                             XONLINE_MSG_FLAG_COMP_CONTEXT )  // Flags a title is allowed to set on an already sent message #define XONLINE_MSG_FLAGS_TITLE_SETABLE   ( XONLINE_MSG_FLAG_READ | \                                             XONLINE_MSG_FLAGS_TITLE_RESERVED )  // Flags a title is allowed to clear on an already sent message #define XONLINE_MSG_FLAGS_TITLE_CLEARABLE         ( XONLINE_MSG_FLAGS_TITLE_RESERVED )  Finally, the Recipient Result (of send to an individual user) is: struct Q_RECIPIENT_RESULT     ULONGLONG qwUserID;     union // If send failed, this is the error code, if it succeeded this is the message ID     {         DWORD   dwMessageID;          HRESULT hrRecipient;     }; Team s Service Specifics The following structures are used by various messages in the protocol. Team Info consists of: struct P_REPLY_TEAM     ULONGLONG qwTeamID;     DWORD     dwNumMembers;     WORD      cbTeamName;     WORD      cbTeamDescription;     WORD      cbTeamMotto;     WORD      cbTeamURL;     WORD      cbTeamData;     FILETIME  ftCreated;      // WCHAR wszTeamName[cbTeamName]     // WCHAR wszTeamDescription[cbTeamDescription]     // WCHAR wszTeamMotto[cbTeamMotto]     // WCHAR wszTeamURL[cbTeamURL]     // BYTE  pbTeamData[cbTeamData] Team Member Info consists of: struct P_REPLY_TEAM_MEMBER     ULONGLONG qwMemberID;     BYTE      cbMemberName;     BOOL      fMember;     DWORD     dwMemberPriv;     WORD      cbMemberData;     FILETIME  ftJoined;     // CHAR szMemberName[cbMemberName]     // BYTE pbMemberData[cbMemberData] Finally, Predefined member permissions are: typedef enum {     XONLINE_TEAM_DELETE                    = 0x00000001,     XONLINE_TEAM_MODIFY_DATA               = 0x00000002,     XONLINE_TEAM_MODIFY_MEMBER_PERMISSIONS = 0x00000004,     XONLINE_TEAM_DELETE_MEMBER             = 0x00000008,     XONLINE_TEAM_RECRUIT_MEMBERS           = 0x00000010,     XONLINE_TEAM_LIVE_PERMISSIONS_FORCE_DWORD = 0xFFFFFFFF } XONLINE_TEAM_LIVE_PERMISSIONS; New Test Cases for M1 Milestone Expand Coverage of Existing Protocol.  Rather than list those cases here they are listed with existing cases for clarity. Configuration Changes Configuration database values will be changed and their effects verified.  Cases are divided into sections based on the server (front door or stateful backend) being controlled.  Each case will cover one value and indicate what action needs to be taken to get the value to   as well as how that change will be verified.  In some case this will involve manual manipulation and examination.     Stateful Backend (INH)  presence_HeartbeatDelay Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_MaxQValsPerHeartbeat Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_PresUserCleanupDelay Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_IdleQValsCheck Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_SGQValSendPort Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_SGQValRecvPort Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_QvalRetryDelays Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_UserIndexSize Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_XboxIndexSize Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_SGIndexSize Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_WebUserTimeout Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_ExplicitIndex Set and validated via Xmgmt Service behavior changed immediately with no restart presence_DeadSgOnFailedQVal Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_ConcurrentSQLThreads, Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_NumSQLThreads Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_MaxPresenceUsers Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_XonWatchIPs Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_ExpirationCheckInterval Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_ValidMessageTypes Set and validated via Xmgmt Service behavior changed immediately with no restart  presence_MessageTypeExpiration Set and validated via Xmgmt Service behavior changed immediately with no restart Front Door (IIS)  presencefd_HeartbeatDelay Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_ContextIndexSize Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_SGPort Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_SGInfoTimeout Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_SGInfoRetries Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_AliveTimeout Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_ListTimeout Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_WebAliveWait Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_WebAliveTimeout Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_WebListTimeout Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_DatacenterPort Set and validated via Xmgmt Service behavior changed immediately with no restart  presencefd_SendMessageTimeout Set and validated via Xmgmt Service behavior changed immediately with no restart New Test Cases for M2 Milestone User Migration Functional tests that fully exercise the protocol as well as possibly stress test will be run during periods when the number of stateful serviers is being both raised and lowered.  In addition to this specific cases will test the basic functionality. A test tool will be developed to create a set of active users whose stateful server location is known.  XMgmnt commands will be need to be added to validate the current state and hashing of a user to verify before, during and after conditions for each of the following cases. Server added   User logs off and comes back comes back moved  Server added   User does not log off and is eventually forced to move. Server removed   User logs off and comes back moved Server removed   User does not log off and is eventually forced to move  More TBD Existing Reusable Test Cases There are no additions to the protocol for this release.  Existing cases focus on the exercise of each message in the protocol which is identified by its unique ID. Presence Service (ID: 2) Covered here are message that are sent to the Presence service, using it s ports and URL.  This is pretty much everything that besides Teams and Messaging. PMSG_ALIVE This is the message used by logon for pre aftershock clients.  It is translated to the more up to date version by the Front door. Request: struct P_ALIVE_MSG : public BASE_MSG_HEADER     // User Info     ULONGLONG qwUserID;     DWORD     dwTitleID;     WORD      cbAcctName;     // Sync info     DWORD dwBuddyListVersion;     DWORD dwBlockListVersion;     // State into     DWORD     dwState;     ULONGLONG qwMatchSessionID;     WORD      cbNickname;     WORD      cbTitleStuff;     // char   szAcctName[];     // ASCII Null terminated     // byte   rgbTitleStuff[];  // Binary     // byte   rgbNickName[];    // Binary Reply: struct P_REPLY_BUDDY     ULONGLONG qwBuddyID;     WORD      cbAcctName; // Includes the '\0'     BYTE      bStatus;     // char   szAcctName; // ASCII Null terminated struct P_REPLY_BLOCK     ULONGLONG qwBlockID; struct P_ALIVE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr;                  // On fail other fields set to 0     DWORD   dwBuddyListVersion;     WORD    cBuddiesSent;     DWORD   dwBlockListVersion;     WORD    cBlocksSent;     // P_REPLY_BUDDY rgBuddies[]     // P_REPLY_BLOCK rgBlocks[] Positive cases: All check for success hr.   Simple Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) PMSG_ALIVE_2 This is the message currently user during logon. Request: struct P_ALIVE_2_MSG : public BASE_MSG_HEADER     // User Info     ULONGLONG            qwUserID;    // User Id     WORD                 cbAcctName;  // Size of szAcctName     // Peer Session     XNADDR  xnaddr;     XNKID  xnkid;     XNKEY  xnkey;     // Sync info     DWORD dwBuddyListVersion;  // Client Friend list version     DWORD   dwBlockListVersion;  // Client Mute list version     // Auth info     XBOX_LIBRARY_VERSION clientVersion;   // Client library version     DWORD                dwTitleID;       // Title Id     DWORD                dwTitleVersion;  // Title version     DWORD                dwTitleRegion;   // Title region     WORD                 ipportI;         // IP port of the client on the Internet     IN_ADDR              ipaI;            // IP address of the client on the Internet     LARGE_INTEGER        liNonce;         // A random nonce associated with this session     LARGE_INTEGER        liTimeInit;      // FILETIME marking session initiation with SG     // char  szAcctName[];  // ASCII Null terminated Reply: struct P_REPLY_BUDDY     ULONGLONG qwBuddyID;     WORD      cbAcctName; // Includes the '\0'     BYTE      bStatus;     // char   szAcctName; // ASCII Null terminated struct P_REPLY_BLOCK     ULONGLONG qwBlockID; struct P_ALIVE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr;                  // On fail other fields set to 0     DWORD   dwBuddyListVersion;     WORD    cBuddiesSent;     DWORD   dwBlockListVersion;     WORD    cBlocksSent;     // P_REPLY_BUDDY rgBuddies[]     // P_REPLY_BLOCK rgBlocks[] Positive cases: All check for success hr.  Simple Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) PMSG_ADD This is the message used to ask someone to be a friend by pre Tsunami clients.  It is translated to the newer version by the front door. Request: struct P_ADD_MSG : public BASE_MSG_HEADER     ULONGLONG qwSenderID;     ULONGLONG qwBuddyID;     WORD      cbBuddyAcctname;     // char   szBuddyAcctName[ cbBuddyAcctname];  // ASCII Null terminated                                                   // only used if qwBuddyID == 0 Reply: None.  Result obtained when List Change notification is dequeued. Positive cases: All check for proper notification of both the user requesting and the user being requested X-Delay  Negative Cases: All check for failure that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_ADD_2 This is the message currently in use to ask someone to be a friend. Request: struct P_ADD_2_MSG : public BASE_MSG_HEADER     ULONGLONG qwSenderID;     ULONGLONG qwBuddyID;     DWORD dwMessageFlags;     WORD cbDetails;     char szBuddyAcctName[ XONLINE_GAMERTAG_SIZE ]; // ASCII Null terminated                                                    // only used if qwBuddyID == 0     // BYTE pbDetails[cbDetails]; Reply: None.  Result obtained when List Change notification is dequeued. Positive cases: All check for proper notification of both the user requesting and the user being requested X-Delay  Negative Cases: All check for failure that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_DELETE This message deletes an existing friend or cancels a friend request. Request: struct P_DELETE_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     ULONGLONG qwBuddyID; Reply: None.  Result obtained when List Change notification is dequeued. Positive cases: All check for proper notification of both the user deleting and the user being deleted. X-Delay  Negative Cases: All check for failure that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_ACCEPT Used to accept a friend request. Request: struct P_ACCEPT_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     ULONGLONG qwBuddyID; Reply: None.  Result obtained when List Change notification is dequeued. Positive cases: All check for proper notification of both the user requesting and the user being requested X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_REJECT Used to decline a friend request. Request: struct P_REJECT_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     ULONGLONG qwBuddyID;     BOOL      fNever; Reply: None.  Result obtained when List Change notification is dequeued. Positive cases: All check for proper notification of both the user requesting and the user being requested X-Delay  Negative Cases: All check for failure that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_BLOCK Used to mute the voice of other users. Request: struct P_BLOCK_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     ULONGLONG qwBlockID; Reply: None.  If this ever failed it would become apparent on the next login. Positive cases: X-Delay  Negative Cases: DataCenter Port (no SPI Data) User not logged on. PMSG_UNBLOCK Used to un-mute people that have been previously muted. Request: struct P_UNBLOCK_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     ULONGLONG qwBlockID; Reply: None.  If this ever failed it would become apparent on the next login. Positive cases: X-Delay  Negative Cases: DataCenter Port (no SPI Data) User not logged on. PMSG_INVITE Message used to invite others to a game by pre Tsunami clients.  This message is translated to the newer version by the front door. Request: struct P_INVITE_MSG : public BASE_MSG_HEADER     ULONGLONG    qwUserID;     DWORD        dwTitleID;     ULONGLONG    qwMatchSessionID;     WORD         cInvitees;     // ULONGLONG rgqwInvitees[ cInvitees ]; Reply: None.  Result obtained when Invite notification is dequeued. Positive cases: All check for proper notification of all users involved X-Delay  Negative Cases: All check for failure that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_INVITE_2 Currently method of inviting other users to join a game. Request: struct P_INVITE_2_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     ULONGLONG qwSenderContext;     DWORD     dwTitleID;     DWORD     dwMessageFlags;     WORD      cInvitees;     WORD      cbDetails;     // ULONGLONG rgqwInvitees[ cInvitees ];     // BYTE      pbDetails[cbDetails]; Reply: None.  Result obtained when Invite notification is dequeued. Positive cases: All check for proper notification of all users involved Invites to non friends X-Delay  Negative Cases: All check for failure that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_CANCEL Used to cancel a game invitation. Request: struct P_CANCEL_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     ULONGLONG qwMatchSessionID;     WORD      Invitees;     // ULONGLONG rgqwInvitees[ dwNumInvitees ]; Reply: None. Invitations are just removed.  Positive cases: All check that invitations notification can no longer be dequeued, and that message has been revoked. Flagged Non Exportable X-Delay  Negative Cases: All check for failure that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_INVITE_ANSWER Used to answer a game invitation. Request: struct P_INVITE_ANSWER_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     ULONGLONG qwHostID;     ULONGLONG qwMatchSessionID;     WORD      wAnswer; Reply: None.  Result obtained when Invite answer notification is dequeued. Positive cases: All check for proper notification of all users involved Invites to non friends X-Delay  Negative Cases: All check for failure that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_NICKNAME Used to update a portion of presence state.  Note this is deprecated and only used by a few titles from the V1 timeframe. Request: struct P_NICKNAME_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     WORD      cbNickname;     // byte   rgbNickName[]; // Binary Reply: None. Others should see presence change. There s no way to know success otherwise. Positive cases: All check to see that Presence State does change X-Delay  Negative Cases: All check for failure that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_STATE Used to update presence state. Request: struct P_STATE_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwState;     ULONGLONG qwMatchSessionID;     WORD      cbTitleStuff;     // byte   rgbTitleStuff[]; // Binary Reply: None. Others should see presence change. There s no way to know success otherwise. Positive cases: All check to see that Presence State does change X-Delay  Negative Cases: All check for failure that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_WEB_FRIENDS Gets a snapshot of friend list with their presence state. Request: struct P_WEB_FRIENDS_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID; Reply: struct P_WEB_FRIENDS_REPLY_MSG : public BASE_MSG_HEADER     HRESULT   hr;     ULONGLONG qwUserID;     DWORD     dwVersion;     WORD      wOnlineFriendsSent;     WORD      wOfflineFriendsSent; Positive cases: All check for success hr.  Flagged Non Exportable X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_PEER_SESSION Used to get info needed to make a direct peer-to-peer connection Request: struct P_PEER_SESSION_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     ULONGLONG qwHostUserID; Reply: struct P_PEER_SESSION_REPLY_MSG : public BASE_MSG_HEADER     ULONGLONG qwHostUserID;     DWORD dwTitleID;     DWORD dwTitleVersion;     DWORD dwTitleRegion;     XNADDR xnaddr;     XNKID xkid;     XNKEY xnkey; Positive cases: All check for success hr. Flagged Non Exportable X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_PEER_SUBSCRIBE Enables peer presence notification. Request: struct P_PEER_SUBSCRIBE_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     WORD cSrcUserIDs;     //ULONGLONG qwSrcUserIDs[]; Reply: struct P_PEER_SUBSCRIBE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr.   X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_PEER_UNSUBSCRIBE Disables peer presence notications Request: struct P_PEER_UNSUBSCRIBE_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID; Reply: struct P_PEER_UNSUBSCRIBE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr.   X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. QMSG_DEQUEUE Used to fetch notifications for things such as other user s presence state, game invitations, and friend list changes. Request: struct Q_DEQUEUE_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     WORD  wQType;     DWORD dwStartItemID;     WORD  wMaxItems;     DWORD dwMaxTotalItemDataSize; Reply: struct Q_LIST_REPLY_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     WORD      wQType;     HRESULT   hr;     DWORD     dwNextItemID;     WORD      wQLeft;     WORD      wNumItems;     DWORD     dwTotalItemDataSize;     DWORD     cdwQVals;     // CQVal       rgdwQVals[ cdwQVals ];     // Q_LIST_ITEM rgItems[ wNumItems ]; struct P_LIST_CHANGE_ITEM     DWORD     dwListVersion;     ULONGLONG qwTargetID;     WORD      wOperationID;     HRESULT   hr;     WORD      cbTargetAcctName;     // char   szTargetAcctName[ cbTargetAcctName ];  // ASCII string null terminated struct P_PRESENCE_ITEM     ULONGLONG qwBuddyID;     DWORD     dwTitleID;     DWORD     dwState;     ULONGLONG qwMatchSessionID;     WORD      cbNickname;     WORD      cbTitleStuff;     // byte   rgbNickName[];              // Binary     // byte   rgbTitleStuff[];            // Binary struct P_INVITATION_ITEM     ULONGLONG qwHostID;     ULONGLONG qwMatchSessionID;     DWORD     dwTitleID;     FILETIME  ftSent; struct P_INVITATION_ANSWER_ITEM     ULONGLONG qwInviteeID;     ULONGLONG qwMatchSessionID;     FILETIME  ftSent;     WORD      wAnswer; struct P_PEER_PRESENCE_ITEM     ULONGLONG qwUserID;     DWORD     dwTitleID;     DWORD     dwState;     ULONGLONG qwMatchSessionID;     WORD      cbTitleStuff;     // byte   rgbTitleStuff[];            // Binary Positive cases: All check for success hr.   This message is used extensively in the course of testing other messages.  X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero DataCenter Port (no SPI Data) User not logged on. PMSG_DEAD_USER Used by an API that changes the set of users logged in via a single Xbox when there will be at least one user remaining. Request: struct P_DEAD_USER_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID; Reply: Positive cases: Negative Cases: Messaging Service (ID: 18) QMSG_SEND_MESSAGE Sends a message to a specific set of users. The logging of recipients no matter what logging level is set via Xmgmt must be manually verified. Request: struct Q_SEND_MESSAGE_MSG : public BASE_MSG_HEADER     ULONGLONG qwSenderID;     ULONGLONG qwSenderContext;     DWORD     dwMessageFlags;     DWORD     dwSenderTitleID;     WORD      wExpireMinutes;     WORD      cbDetails;     WORD      cRecipients;     BYTE      bMessageType;     char      szSenderName[XONLINE_GAMERTAG_SIZE-1];     // ULONGLONG qwRecipientIDs[];     // BYTE      pbDetails[]; Reply: struct Q_SEND_MESSAGE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr;     WORD    cRecipients;     // Q_RECIPIENT_RESULT recipients[]; Positive cases: All check for success hr and valid message IDs in the recipient results and proper QVals received by logged on users. Also message contents are verified with QMSG_MESSAGE_DETAILS, QMSG_MESSAGE_SUMMARY, and QMSG_ENUM_MESSAGES.by all recipients. Sender PUID zero (DataCenter Po SGAddr zero (DataCenter Port) Flagged Required Flagged Recommended Flagged Has Voice, with all associated properties present   Check for notification flag Flagged Has Text, with all associated properties present.   Check for notification flag Flagged Non Exportable  Flagged Comp Context ???  Flagged Team Context  ??? Flagged All title reserved   Check for notification flag Current Title   Check for notification flag Alt Title ID in all 4 SPIData positions Expiration zero, All Types Expiration In range, All Types Expiration Max, All Types Null Property Byte Property Word Property Dword Property Qword Property String Property Filetime Property Binary Property Attachment Property Bool Property String ID Property All Properties Max Details Size Alt Title, recipient   Check for notification flag Upper bound recipients   all logged on Upper bound recipients   all logged off Mix of logged on and off recipients Recipient logged off then on to verify Recipient logged on then off to verify Sender in never list of all recipients Sender in never list of some recipients Sender in never list of only recipient Send to remove all recipients from never list Send to remove some recipients from never list Send to remove only recipient from never list Send Persistent type to user with Max Persistent messages Send Transient type to user with Max Transient messages Send Persistent to user with Max Transient messages Send Transient to user with Max Persistent messages Type Friend Request,  No properties Sender Name not correct (doesn t match PUID (to DataCenter) X-Delay Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong  UA Version No SPIData User Doesn t Exist User Not Logged On User PUID zero User doesn t match SPIData Flagged both Required and Recommended Flagged Has Voice, with Data property missing Flagged Has Voice, with Codec property missing Flagged Has Voice, with Duration property missing Flagged Has Text, with Text property missing Flagged Has Text, with Language property missing Flagged both Comp and Team Context Flagged Read Flagged Marketing Flagged with other random invalid. Title ID zero Title ID invalid Expiration to high, All Types Details Too large Too Many Properties Duplicate Property Tags Duplicate Property Index (but different type) No recipients Too Many recipients Single recipient, ID zero Single recipient, ID self Multiple recipients, some IDs zero Multiple recipients, one ID self Multiple recipients, duplicate IDs Type Game Invite (transient), no properties Type Team Recruit, no properties Type Comp Reminder, no properties Type Comp Request, no properties Type Live Message, no properties Sender Name blank Sender Name not correct (doesn t match PUID (messaging FD port) Blocked  Blocked when logging in with alive cache QMSG_MESSAGE_SUMMARY Gets summary for a single user message Request: struct Q_MESSAGE_SUMMARY_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwMessageID; Reply: struct Q_MESSAGE_SUMMARY_REPLY_MSG : public BASE_MSG_HEADER     HRESULT           hr;     Q_MESSAGE_SUMMARY summary; Positive cases: All check for success hr.  Because this message is used to validate the exhaustive set of Send cases this list is short.  Summary contents will be checked against expected. Flagged Non Exportable DataCenter Port (no SPI Data) User not logged on. X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero Message ID zero Message ID invalid Flagged Non Exportable, Datacenter FD port. QMSG_MESSAGE_DETAILS Gets details (as well as summary) for a single user message and sets and clears specified flags. Request: struct Q_MESSAGE_DETAILS_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwMessageID;     DWORD     dwSetFlags;     DWORD     dwUnsetFlags; Reply: struct Q_MESSAGE_DETAILS_REPLY_MSG : public BASE_MSG_HEADER     HRESULT           hr;     Q_MESSAGE_SUMMARY summary;     // BYTE pbDetails[]; Positive cases: All check for success hr.  Because this message is used to validate the exhaustive set of Send cases this list is short.  Summary and details contents will be checked against expected, and then validated separately. Flagged Non Exportable Attachment Flagged Non Exportable DataCenter Port (no SPI Data) Set Flag, Read Set Flags, All Title Reserved  Set Flag, Random Title Reserved  Clear Flags, All Title Reserved Clear Flags, Some Title Reserved User Not Logged On X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero Message ID zero Message ID invalid Clear Flag, Read Clear Flags, Random Invalid Set Flags, Random Invalid Flagged Non Exportable, Datacenter FD port. Attachment Flagged Non Exportable, Datacenter FD port. QMSG_MESSAGE_FLAGS Sets and/or unsets the flags for a single user message Request: struct Q_MESSAGE_FLAGS_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwMessageID;     DWORD     dwSetFlags;     DWORD     dwUnsetFlags; Reply: struct Q_MESSAGE_FLAGS_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr. Flagged Non Exportable DataCenter Port (no SPI Data) Set Flag, Read Set Flags, All Title Reserved  Set Flag, Random Title Reserved  Clear Flags, All Title Reserved Clear Flags, Some Title Reserverd X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero User Not Logged On Message ID zero Message ID invalid Clear Flag, Read Clear Flags, Random Invalid Set Flags, Random Invalid Flagged Non Exportable, Datacenter FD port. QMSG_ENUM_MESSAGES Gets summaries for all a users messages Request: struct Q_ENUM_MESSAGES_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;  Reply: struct Q_ENUM_MESSAGES_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr;     WORD    cMessages;     // Q_MESSAGE_SUMMARY rgMessages[]; Positive cases: All check for success hr.  Because this message is used to validate the exhaustive set of Send cases this list is short.  Summary contents will be checked against expected. Flagged Non Exportable DataCenter Port (no SPI Data) User not logged on. X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero Flagged Non Exportable, Datacenter FD port. No messages QMSG_DELETE_MESSAGE Deletes a single user message, and optionally adds sender to user s never list. Request: struct Q_DELETE_MESSAGE_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwMessageID;     DWORD     dwFlags; define XMSG_DELETE_MESSAGE_FLAG_BLOCK_SENDER 0x00000001 Reply: struct Q_DELETE_MESSAGE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr, and that QVal is received. (Is it when I delete my own message???) For current title For other title (dash, alt???) DataCenter Port (no SPI Data) Block Sender X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User Not Logged On User PUID zero Message ID zero Message ID invalid Flagged Non Exportable, Datacenter FD port. Block Sender that already blocked user Same message twice QMSG_REVOKE_MESSAGE Revokes a message user has sent from a specific set of users.  This is only way to revoke through the FD, the EX version is reserved for internal use. Request: struct Q_REVOKE_MESSAGE_MSG : public BASE_MSG_HEADER     ULONGLONG qwSenderID;        ULONGLONG qwSenderContext; // Never used, must be zero     WORD      cRecipients;     BYTE      bMessageType;    // Never used, must be zero     // Q_RECIPIENT_RESULT recipients[]; Reply: struct Q_REVOKE_MESSAGE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr, and that recipients get the QVAL and message is removed Single Recipient Multiple Recipients Upper bound Recipients DataCenter Port (no SPI Data) X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version Sender Doesn t Exist Sender Not Logged On Sender PUID zero Sender did not send to only recipient  Sender did not send to some of many recipients  Sender did not send to all of many recipients Context not zero Message Type not zero Flagged Non Exportable, Datacenter FD port. QMSG_REVOKE_MESSAGE_EX Internal Only   Revokes messages that match criteria set by flags.: Request: struct Q_REVOKE_MESSAGE_EX_MSG : public BASE_MSG_HEADER     ULONGLONG qwSenderID;     ULONGLONG qwSenderContext;     DWORD     dwFlags;     WORD      wPropTag;     WORD      cRecipients;     WORD      cbProp;     BYTE      bMessageType;     // Q_RECIPIENT_RESULT rgRecipients[cRecipients];     // BYTE               rgbProp[cbProp]; #define XMSG_REVOKE_MESSAGE_EX_FLAG_BLOCK_SENDER 0x00000001 #define XMSG_REVOKE_MESSAGE_EX_FLAG_USE_ID       0x00000002 #define XMSG_REVOKE_MESSAGE_EX_FLAG_USE_SENDER   0x00000004 #define XMSG_REVOKE_MESSAGE_EX_FLAG_USE_CONTEXT  0x00000008 #define XMSG_REVOKE_MESSAGE_EX_FLAG_USE_PROP     0x00000010 #define XMSG_REVOKE_MESSAGE_EX_FLAG_USE_TYPE     0x00000020 #define XMSG_REVOKE_MESSAGE_EX_FLAGS_RESERVED    0xFFFFFFC0 Reply: struct Q_REVOKE_MESSAGE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: None   This message is not valid to the front door Negative Cases: All check for failure hr that makes sense and is consistent. PresNotii FD port Teams FD port Messaging FD port Datacenter FD port QMSG_ENUM_TITLES Gets list of user s owned titles. (Title IDs and Alt Title IDs user has logged on with.) Request: struct Q_ENUM_TITLES_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID; Reply: struct Q_ENUM_TITLES_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr;     WORD    cTitles;     // Q_USER_TITLE rgTitles[cTitles]; struct Q_USER_TITLE     DWORD    dwTitleID;     FILETIME ftLastLogon;     DWORD    dwFlags; #define USER_TITLE_FLAG_ACCEPT_MARKETING 0x00000001 // Opted in to marketing for this title Positive cases: All check for success hr, and verify count and contents of title info blocks Alive with no Alt titles Alive with 1 Alt title Alive with 4 Alt tiles Alive cache doesn t change last logon time. Set Opt Out  DataCenter Port (no SPI Data) X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent Wrong URL Wrong UA Version User Doesn t Exist User Not Logged On User PUID zero QMSG_DELETE_TITLE Deletes a title from user s list of owned titles. (Title IDs and Alt Title IDs user has logged on with.) Request: struct Q_DELETE_TITLE_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwTitleID; Reply: struct Q_DELETE_TITLE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr.  QMSG_ENUM_TITLES used to verify changes. Current Title Other Title DataCenter Port (no SPI Data) X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent. Wrong URL Wrong UA Version User Doesn t Exist User PUID zero User not logged on Title ID zero Title ID invalid QMSG_SEND_SYSTEM_MESSAGE Question Delivery of these during alive doesn t generate QVals does it? There is no periodic process that delivers these for the benefit of web and alerts, correct? Sends a system message to all users of a title in a region. Request: struct Q_SEND_SYSTEM_MESSAGE_MSG : public BASE_MSG_HEADER     DWORD     dwTitleID;     ULONGLONG qwSenderContext;     FILETIME  ftSentTime;     DWORD     dwRegion;      DWORD     dwMessageFlags;     WORD      wExpireMinutes;     WORD      cbDetails;     BYTE      bMessageType;     char      szSenderName[XONLINE_GAMERTAG_SIZE-1];     char      szDescription[XMSG_SYSTEM_MESSAGE_DESCRIPTION_LEN];     // BYTE pbDetails[cbDetails]; Reply: struct Q_SEND_SYSTEM_MESSAGE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr;     DWORD   dwMessageID; Positive cases: All check for success hr, and that the message ID has system message bit set.  Also message contents are verified with QMSG_SYSTEM_MESSAGE_DETAILS and QMSG_ENUM_SYSTEM_MESSAGES. Delivery, or not, to expected recipients once they Alive is validated by QMSG_ENUM_MESSAGES with contents checked using QMSG_MESSAGE_DETAILS if needed. DataCenter Port (no SPI Data) No X-Delay  Title ID zero   Verify changed to Dash for users. Title ID dash Specific Title ID Specific Alt Title ID Context Random  Future activation Region zero Specific region Flagged Required Flagged Recommended Flagged Has Voice, with all associated properties present   Check for notification flag Flagged Has Text, with all associated properties present.   Check for notification flag Flagged Non Exportable  Flagged Comp Context ???  Flagged Team Context  ??? Flagged All title reserved   Check for notification flags Flagged Marketing  Opt out users Expiration zero, All Types Expiration In range, All Types Expiration Max, All Types Null Property Byte Property Word Property Dword Property Qword Property String Property Filetime Property Binary Property Attachment Property Bool Property String ID Property All Properties Max Details Size Live Type Lower bound Sender name Upper bound Sender name Upper bound description Negative Cases: All check for failure hr that makes sense and is consistent. Wrong FD port (presnoti) Wrong FD port (teams) Wrong FD port (messaging) Wrong URL Wrong UA Version Already Expired Flagged both Required and Recommended Flagged Has Voice, with Data property missing Flagged Has Voice, with Codec property missing Flagged Has Voice, with Duration property missing Flagged Has Text, with Text property missing Flagged Has Text, with Language property missing Flagged both Comp and Team Context Flagged Read Flagged with other random invalid. Expiration to high, All Types Details Too large Too Many Properties Duplicate Property Tags Duplicate Property Index (but different type) Type Friend Request Type Game Invite Type Team Recruit Type Comp Reminder Type Comp Request Type Live Message, no properties Sender Name blank Sender Name too long Description too long Description not null terminated QMSG_SYSTEM_MESSAGE_DETAILS Gets details (as well as summary) for a single system message Request: struct Q_SYSTEM_MESSAGE_DETAILS_MSG : public BASE_MSG_HEADER     DWORD dwTitleID;     DWORD dwMessageID; Reply: struct Q_SYSTEM_MESSAGE_DETAILS_REPLY_MSG : public BASE_MSG_HEADER     HRESULT                  hr;     Q_SYSTEM_MESSAGE_SUMMARY summary;     // BYTE pbDetails[summary.cbDetails]; Positive cases: Because this message is used to validate the exhaustive set of Send cases this list is short.  Contents will be checked against expected. Title ID zero  Title ID Dash  Title ID not Dash DataCenter Port (no SPI Data) No X-Delay  Ignore Flagged Non Exportable Negative Cases: All check for failure hr that makes sense and is consistent. Wrong FD port (presnoti) Wrong FD port (teams) Wrong FD port (messaging) Wrong URL Wrong UA Version Message ID zero Message doesn t exist, never sent Message doesn t exist, expired QMSG_ENUM_SYSTEM_MESSAGES Gets list of system messages sent for a specific Title ID. Request: struct Q_ENUM_SYSTEM_MESSAGES_MSG : public BASE_MSG_HEADER     DWORD dwTitleID; Reply: struct Q_ENUM_SYSTEM_MESSAGES_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr;     WORD    cMessages; // Q_SYSTEM_MESSAGE_SUMMARY rgMessages[cMessages]; Positive cases: Because this message is used to validate the exhaustive set of Send cases this list is short.  Summary contents will be checked against expected. Title ID zero  Title ID Dash  Title ID not Dash DataCenter Port (no SPI Data) No X-Delay  Ignore Flagged Non Exportable Negative Cases: All check for failure hr that makes sense and is consistent. Wrong FD port (presnoti) Wrong FD port (teams) Wrong FD port (messaging) Wrong URL Wrong UA Version No messages, never sent No messages, all expired QMSG_DELETE_SYSTEM_MESSAGE Deletes a system message, and optionally revokes it from any users that it has already been delivered to. Request: struct Q_DELETE_SYSTEM_MESSAGE_MSG : public BASE_MSG_HEADER     DWORD dwTitleID;     DWORD dwMessageID;     DWORD dwFlags; #define XMSG_DELETE_SYSTEM_MESSAGE_FLAG_REVOKE_ALL  0x00000001 Reply: struct Q_DELETE_SYSTEM_MESSAGE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr. Changes are verified with QMSG_ENUM_SYSTEM_MESSAGES Title ID zero  Title ID Dash  Title ID not Dash Revoke Also Revoke Also, None delivered yet DataCenter Port (no SPI Data) No X-Delay  Ignore Flagged Non Exportable Negative Cases: All check for failure hr that makes sense and is consistent. Wrong FD port (presnoti) Wrong FD port (teams) Wrong FD port (messaging) Wrong URL Wrong UA Version Message ID zero Message doesn t exist, never sent Message doesn t exist, expired Teams Service (ID: 19) PMSG_TEAM_CREATE Creates a new team, with one member (the creator).  A name is required and must be unique per title (case insensitive and ignoring spaces.)  Max members must be greater than 2.   Request: struct P_TEAM_CREATE_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwTitleID;     DWORD dwMaxMembers;     WORD  cbTeamName;     WORD  cbTeamDescription;     WORD  cbTeamMotto;     WORD  cbTeamURL;     WORD  cbTeamData;     WORD  cbCreatorData;     // WCHAR wszTeamName[cbTeamName]     // WCHAR wszTeamDescription[cbTeamDescription]     // WCHAR wszTeamMotto[cbTeamMotto]     // WCHAR wszTeamURL[cbTeamURL]     // BYTE  pbTeamData[cbTeamData]     // BYTE  pbCreatorData[cbCreatorData] Reply: struct P_TEAM_CREATE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT   hr;     ULONGLONG qwTeamID;     FILETIME  ftCreated; Positive cases: All check for success hr, valid team PUID, and reasonable create time. Also team and creator data are verified using PMSG_TEAM_LIST_TEAMS and PMSG_TEAM_LIST_MEMBERS. Simple, common data Upper bound User teams (All my teams created) Upper bound User teams (All my teams joined) Upper bound User teams (All my teams recruits) Upper bound User teams (my teams Mixed) Upper bound User teams is per title. Lower bound MaxMembers  (2) Upper bound MaxMembers (100) Lower bound Name  Upper bound Name Reuse name (Just deleted, same user) Reuse name (Just deleted, other user) Reuse name (Just changed, same user) Reuse name (Just changed, other user) Name used in other title Lower bound Description Upper bound Description Lower bound Motto Upper bound Motto Lower bound Url Upper bound Url Lower bound Data Upper bound Data Lower bound CreatorData Upper bound CreatorData Creator has all permissions Alt Title ID in all 4 SPIData positions UserID all 4 SPIData positions  DataCenter Port (no SPI Data) DataCenter Port (User offline) X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent, and zero PUID is returned Wrong URL (notification) Wrong URL (presence) Wrong URL (messaging) Wrong UA version No SPIData User Doesn t Exist User Doesn t Exist (Datacenter port) User Not Logged On User PUID zero User PUID zero (Datacenter port) User doesn t match SPIData  Title ID zero Title ID doesn t match SPIData  User Over max teams (All created) User Over max teams (All joined) MaxMembers  zero MaxMembers  too low MaxMembers too high No name Name in use (Same user) Name in use (Other user) Name in use (Case insensitivity) Name in use (Case insensitivity, ASCII Only)  Name in use (Ignore spaces) Name in use (Ignore spaces, ASCII Only) Nam null (0 bytes) Name too long Name not null terminated. Description null (0 bytes) Description too long Description not null terminated. Motto null (0 bytes) Motto too long Motto not null terminated. Url null (0 bytes) Url too long Url not null terminated. Data too long Data count too low Data count too high CreatorData to long CreatorData count too low CreatorData count too high PMSG_TEAM_LIST_TEAMS Get information about one or more teams user is a member of. Request: struct P_TEAM_LIST_TEAMS_MSG : public BASE_MSG_HEADER     ULONGLONG  qwUserID;     DWORD      dwTitleID;     DWORD      cTeamIDs;     // ULONGLONG rgqwTeamIDs[] Reply: struct P_TEAM_LIST_TEAMS_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr;     DWORD   cTeams;     //P_REPLY_TEAM rgsTeams[] Positive cases: All check for success hr and correct number of team info blocks returned. Because these messages are used extensively elsewhere to retrieve and verify new or changed data for single teams those situations are not listed here. Instead positive cases focus on getting info for multiple teams.  All data in all reply blocks are verified against what s expected. Upper bound teams, mine, specified (All created) Upper bound teams, mine, specified (All joined) Upper bound teams, mine, specified (All recruits) Upper bound teams, mine, specified (Mixed) Upper bound teams, mine, not specified (All created) Upper bound teams, mine, not specified (All joined) Upper bound teams, mine, not specified (All recruits) Upper bound teams, mine, not specified (Mixed) Upper bound teams, not mine Largest possible reply One team, mine One team, not mine Alt Title ID in all 4 SPIData positions UserID all 4 SPIData positions  DataCenter Port (no SPI Data) DataCenter Port (User offline) X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent, and zero team info blocks returned. Wrong URL Wrong UA version No SPIData User Doesn t Exist User Doesn t Exist (Datacenter port) User Not Logged On User PUID zero User PUID zero (Datacenter port) User doesn t match SPIData  User No Teams Title ID zero Title ID max Title ID doesn t match SPIData  Team ID array contains Team ID zero  Team ID array Contains Team that Doesn t exist in any title Team ID array Contains Team that Exists in other title Team ID array Contains Team that Exists in other title (User is member) Team ID array Contains too many Team IDs. Team ID count too low Team ID count too high PMSG_TEAM_LIST_MEMBERS Gets information about the members of a particular team Request: struct P_TEAM_LIST_MEMBERS_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwTitleID;     ULONGLONG qwTeamID;     BOOL      fShowRecruits; Reply: struct P_TEAM_LIST_MEMBERS_REPLY_MSG : public BASE_MSG_HEADER     HRESULT   hr;     ULONGLONG qwTeamID;     WORD      cMembers;     //P_REPLY_TEAM_MEMBER rgsMembers[] Positive cases: All check for success hr, correct Team PUID, and correct number of member info blocks returned. Because these messages are used extensively elsewhere to retrieve and verify new or changed data for single members those situations are not listed here. Instead positive cases focus on getting info for multiple members.  All data in all reply blocks are verified against what s expected. Upper bound members, my team (All joined, show recruits) Upper bound members, my team (All joined, hide recruits) Upper bound members, my team (All but creator recruits, show recruits) Upper bound members, my team (All but creator recruits, hide recruits) Upper bound members, my team (Mixed, show recruits) Upper bound members, my team (Mixed, hide recruits) Upper bound members, not my team (All joined, show recruits) Upper bound members, not my team (All joined, hide recruits) Upper bound members, not my team (All but creator recruits, show recruits) Upper bound members, not my team (All but creator recruits, hide recruits) Upper bound members, not my team (Mixed, show recruits) Upper bound members, not my team (Mixed, hide recruits) One member, my team (show recruits) One member, not my team (show recruits) Largest possible reply Alt Title ID in all 4 SPIData positions UserID all 4 SPIData positions  DataCenter Port (no SPI Data) DataCenter Port (User offline) X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent, correct Team PUID, and zero members.  Wrong URL Wrong UA version No SPIData User Doesn t Exist User Doesn t Exist (Datacenter port) User Not Logged On User PUID zero User PUID zero (Datacenter port) User doesn t match SPIData  User Not on team Title ID zero Title ID max Title ID doesn t match SPIData  Team ID zero Team Doesn t exist in any title Team Exists in other title Team Exists in other title (User is member) PMSG_TEAM_DELETE Deleted a team: Request: struct P_TEAM_DELETE_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwTitleID;     ULONGLONG qwTeamID; Reply: struct P_TEAM_DELETE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr. and team is no longer listed by any former members using PMSG_TEAM_LIST_TEAMS.  One Member (Creator) One Member (Not Creator) Max Members (Joined) Max Members (Recruits)   Verify Recruit messages are revoked Max Members (Mixed)   Verify Recruit messages are revoked Alt Title ID in all 4 SPIData positions UserID all 4 SPIData positions  DataCenter Port (no SPI Data) DataCenter Port (User offline) X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent, and, if applicable, that team is not deleted. Wrong URL Wrong UA version No SPIData User Doesn t Exist User Doesn t Exist (Datacenter port) User Not Logged On User PUID zero User PUID zero (Datacenter port) User doesn t match SPIData  User No Permission User Not on team Title ID zero Title ID doesn t match SPIData  Team ID zero Team Doesn t exist in any title Team Exists in other title Team Exists in other title (User is member, with permission) Double delete PMSG_TEAM_REMOVE Removes a team member Request: struct P_TEAM_REMOVE_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwTitleID;     ULONGLONG qwTeamID;     ULONGLONG qwMemberID; Reply: struct P_TEAM_REMOVE_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr, and that removed member is no longer in team. Changes are verified using PMSG_TEAM_LIST_MEMBERS and PMSG_TEAM_LIST_TEAMS. Mixed Max Members (Remove Creator) Mixed Max Members (Remove Recruit) - Verify message is revoked. Mixed Max Members (Remove Joined) Remove self (with permission) Remove self (without permission) Alt Title ID in all 4 SPIData positions UserID all 4 SPIData positions  DataCenter Port (no SPI Data) DataCenter Port (User offline) X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent, and, if applicable, that member list is not changed. Wrong URL Wrong UA version No SPIData User Doesn t Exist User Doesn t Exist (Datacenter port) User Not Logged On User PUID zero User PUID zero (Datacenter port) User doesn t match SPIData  User Not on team User No Permission Title ID zero Title ID max Title ID doesn t match SPIData  Team ID zero Team Doesn t exist in any title Team Exists in other title Team Exists in other title (User is member, with permission) Team Exists in other title (Member and User are members, User has permission) Member ID zero Member not on team Last Member (Creator) Last Member (Not Creator) Remove self, last Member not last, but last with all permissions Remove self, last with all permissions Last Member Race PMSG_TEAM_MANAGE_TEAM Change information stored about a team Request: struct P_TEAM_MANAGE_TEAM_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwTitleID;     ULONGLONG qwTeamID;     WORD      cbTeamName;     WORD      cbTeamDescription;     WORD      cbTeamMotto;     WORD      cbTeamURL;     WORD      cbTeamData;     // WCHAR wszTeamName[cbTeamName]     // WCHAR wszTeamDescription[cbTeamDescription]     // WCHAR wszTeamMotto[cbTeamMotto]     // WCHAR wszTeamURL[cbTeamURL]     // BYTE  pbTeamData[cbTeamData] Reply: struct P_TEAM_MANAGE_TEAM_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr.  Changes are verified using PMSG_TEAM_LIST_TEAMS.  Lower to upper bound Name  Upper to lower bound Name Reuse name (Just deleted, same user) Reuse name (Just deleted, other user) Reuse name (Just changed, same user) Reuse name (Just changed, other user) Name used in other title Upper to lower bound Description Lower to upper bound Description Upper to lower bound Motto Lower to upper bound Motto Upper to lower bound Url Lower to upper bound Url Upper to lower bound Data Lower to upper bound Data Alt Title ID in all 4 SPIData positions UserID all 4 SPIData positions  DataCenter Port (no SPI Data) DataCenter Port (User offline) X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent, and, if applicable, that team data not changed. Wrong URL Wrong UA version No SPIData User Doesn t Exist User Doesn t Exist (Datacenter port) User Not Logged On User PUID zero User PUID zero (Datacenter port) User doesn t match SPIData  User No Permission User Not on team Title ID zero Title ID max Title ID doesn t match SPIData  Team ID zero Team Doesn t exist in any title Team Exists in other title Team Exists in other title (User is member, with permission) No name Name in use (Same user) Name in use (Other user) Name in use (Case insensitivity) Name in use (Ignore spaces) Name too long Name not null terminated. Description too long Description not null terminated. Motto too long Motto not null terminated. Url too long Url not null terminated Data too long Data count too low Data count too high PMSG_TEAM_MANAGE_MEMBER Change Information stored about a team member Request: struct P_TEAM_MANAGE_MEMBER_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwTitleID;     ULONGLONG qwTeamID;     ULONGLONG qwMemberID;     DWORD     dwMemberPriv;     WORD      cbMemberData;     // BYTE pbMemberData[cbMemberData] Reply: struct P_TEAM_MANAGE_MEMBER_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr.  Changes are verified using PMSG_TEAM_LIST_MEMBERS. Set all Privileges (On Self) Set all Privileges (On Other) Clear all privileges (On Self) Clear all privileges (On Other) Set / Clear some Live defined privilege (On Self) Set / Clear some Live defined privilege (On other) Set / Clear some Title defined privilege (On Self) Set / Clear some Title defined privilege (On other) Lower to upper bound Data  Upper to lower bound Data Alt Title ID in all 4 SPIData positions UserID all 4 SPIData positions  DataCenter Port (no SPI Data) DataCenter Port (User offline) X-Delay  Negative Cases: All check for failure hr that makes sense and is consistent, and, if applicable, that member is not changed. Wrong URL Wrong UA version No SPIData User Doesn t Exist User Doesn t Exist (Datacenter port) User Not Logged On User PUID zero User PUID zero (Datacenter port) User doesn t match SPIData  User No Permission User Not on team Title ID zero Title ID doesn t match SPIData  Data too long Data count too low Data count too high Team ID zero Team Doesn t exist in any title Team Exists in other title Team Exists in other title (User is member, with permission) Team Exists in other title (Member and User are members, User has permission) Member ID zero Member not on team Change permission to not full when last with full Change permission on self to not full when last with full Change permissions on self (no permission) Last with full permission race PMSG_TEAM_RECRUIT Ask another user to join your team, by either name or PUID.   Request: struct P_TEAM_RECRUIT_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwTitleID;     ULONGLONG qwTeamID;     ULONGLONG qwMemberID;     CHAR      szMemberName[XONLINE_GAMERTAG_SIZE];     DWORD     dwMemberPriv;     DWORD     dwMessageFlags; WORD      cbMemberData;     WORD      cbDetails;     // BYTE pbDetails[cbDetails];     // BYTE pbMemberData[cbMemberData] Reply: struct P_TEAM_RECRUIT_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Message to Recruit Generated by Server:  qwSenderID qwUserID from request (P_TEAM_RECRUIT_MSG) qwSenderContext qwTeamID from request (P_TEAM_RECRUIT_MSG) mtSentTime Time message sent by Teams server. dwMessageID ID generated by Message server when sent dwMessageFlags qwTeamID from request (P_TEAM_RECRUIT_MSG) dwSenderTitleID dwTitleID from request (P_TEAM_RECRUIT_MSG) wExpireMinutes 30 days (43200) cbDetails cbDetails from request (P_TEAM_RECRUIT_MSG).  There are no properties specific to the Team recruit message but any that were added by title should pass through. bMessageType XONLINE_MSG_TYPE_TEAM_RECRUIT (4) szSenderName Gamertag of qwUserID from P_TEAM_RECRUIT_MSG Positive cases: All check for success hr, and that recruit is received with correct data, and that member is added with correct data. Upper bound Members on this team Upper bound Members teams Upper bound of member teams is title specific By ID, Member Online (gets notification and message) By ID, Member Offline (gets message at logon) By Name, Member Online (gets notification and message) By Name, Member Offline (gets message at logon) Lower bound Name Upper bound Name All Privileges No Privileges Custom Flags Lower bound data Upper bound data Custom details (properties) Max size (details and data) Alt Title ID in all 4 SPIData positions UserID all 4 SPIData positions  DataCenter Port (no SPI Data) DataCenter Port (User offline) X-Delay Negative Cases: All check for failure hr that makes sense and is consistent, and no recruit message is sent or member list change. Wrong URL Wrong UA version No SPIData User Doesn t Exist User Doesn t Exist (Datacenter port) User Not Logged On User PUID zero User PUID zero (Datacenter port) User doesn t match SPIData  User No Permission User Not on team Title ID zero Title ID max Title ID doesn t match SPIData  Team ID zero Team Doesn t exist in any title Team Exists in other title Team Exists in other title (User is member, with permission) Member ID zero and Member Name empty  Member ID already recruited Member ID already joined Member ID already in max teams for this title Member is self (user)   by PUID Member ID does not exist Member Name already recruited Member Name already joined Member Name already in max teams for this title Member is self (user)   by name Member Name Does not exist  Member Name not null terminated. Member Name too long Member name, invalid chars Both member name and ID  SenderName doesn t match userID SenderName doesn t match userID (Datacenter port) Required flags missing??? Reserved flags set. Data too long Data count too low Data count too high No details. User on recruits never list   Verify Member not added and message not received. PMSG_TEAM_JOIN Respond to a recruit message. Request: struct P_TEAM_JOIN_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwTitleID;     ULONGLONG qwTeamID;     DWORD     dwRecruitMsgID;     BYTE      bAnswer; enum P_INVITE_REPLIES     PINVITE_REPLY_NO    = 0,     PINVITE_REPLY_YES   = 1,     PINVITE_REPLY_NEVER = 2, Reply: struct P_TEAM_JOIN_REPLY_MSG : public BASE_MSG_HEADER     HRESULT hr; Positive cases: All check for success hr, and that member status has changed Yes, Upper bound members (Last to join this team) Yes, Upper bound teams (Last team member can join) Yes, Upper bound teams is title specific Never, make sure sender is now blocked Got on sender of recruitMsgID s never list after recruit sent Alt Title ID in all 4 SPIData positions UserID all 4 SPIData positions  DataCenter Port (no SPI Data) DataCenter Port (User offline) X-Delay Negative Cases: All check for failure hr that makes sense and is consistent, and zero PUID. Also, if applicable, that member list is not changed. Wrong URL Wrong UA version No SPIData User Doesn t Exist User Doesn t Exist (Datacenter port) User Not Logged On User PUID zero User PUID zero (Datacenter port) User doesn t match SPIData  User never recruited  User recruit deleted  Title ID zero Title ID max Title ID doesn t match SPIData  Team ID zero Team Doesn t exist in any title Team did exist but was deleted  Team Exists in other title (Msg is for that team) Recruit message revoked, member deleted  Recruit message revoked Recruit message deleted Message ID zero Message ID zero, member recruited  Message ID invalid, doesn t match recruit for this team. Answer Invalid PMSG_TEAM_GET_TICKET Asks for the team ticket for a user on a particular title.  Request: struct P_TEAM_GET_TICKET_MSG : public BASE_MSG_HEADER     ULONGLONG qwUserID;     DWORD     dwTitleID; Reply: struct P_TEAM_GET_TICKET_REPLY_MSG : public BASE_MSG_HEADER     HRESULT       hr;     P_TEAM_TICKET sTeamTicket; struct P_TEAM_TICKET     ULONGLONG qwUserID;     WORD      cTeams;     WORD      cbSignature;     // ULONGLONG rgqwTeamIDs[];  // len dictated by cTeams, max MAX_TEAMS     // BYTE      rgbSignature[]; // len dictated by cbSignature. For now = 8. Positive cases: All check for success hr, expected Team IDs and signature. No teams,  all zeros in signature expected One team Some teams Max teams Team in other title not listed Change Key and ticket changes Alt Title ID in all 4 SPIData positions UserID all 4 SPIData positions  DataCenter Port   signature all zeros X-Delay Negative Cases: All check for failure hr that makes sense and is consistent Wrong URL Wrong UA version No SPI Data User Doesn t Exist User Not Logged On User PUID zero User doesn t match SPIData  Title ID zero Title ID doesn t match SPIData  Stress Testing M1 Milestone:  No stress testing will be performed for this milestone due to the functional changes being validated in this timeframe. M2 Milestone:  Revision History Changes made Author 6/23/2004 First Draft Jay Patterson Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES  Microsoft Confidential. Unpublished work.   2002 Microsoft Corporation. All rights reserved. Page   PAGE   NUMPAGES
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\sg\Challenge Response Configuration.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation Challenge/Response configuration TitleChallenge/Response configuration Michael Courage Normal Michael Courage Microsoft Word 10.0Challenge/Response configuration This document describes procedures for installing, removing, updating, activating or deactivating code challenges on the Security Gateway. Enabling challenges The Security Gateway will not issue challenges to clients unless you enable challenges. This step has to happen before challenges are added (or removed), because the SG will not accept other challenge configuration if challenges are disabled. Add the following line to D:\sgroot\sgconfig.ini: EnableChallengeResponse 1. Run the management command e :sg configure_string  EnableChallengeResponse 1 Disabling all challenges The gateway will not send any challenges when challenges are disabled. Also, the gateway will not accept any challenge configuration (except a command to enable challenges) when challenges are disabled. Remove the EnableChallengeResponse line from D:\sgroot\sgconfig.ini. Run the management command e :sg configure_string  EnableChallengeResponse 0 Installing challenges Each code challenge will be provided in a cleartext INI file. Each challenge has an ID number, N. The file that contains the challenge will be sg_chal_N.ini. These files should be stored and backed up to secure locations as they will contain information required to defeat the challenge mechanism.  The following instructions should be followed on every SG in the datacenter. (I know this is redundant, but it s to make sure someone doesn t skip read it) Challenges must be enabled before installing challenges. Copy the file sg_chal_N.ini to all SGs on site one (site two will not run challenges) and open a command window on each machine. In these cmd windows, run xkeymgr protect sg_chal_N.ini D:\sgcfg\sg_chal_N.cfg to generate protected versions of the files. You can should then delete all the sg_chal_N.ini files that you have already incrypted. Make the SG accept the new challenge in sg_chal_N.cfg by running the management command e :sg configure_file_secure D:\sgcfg\sg_chal_N.cfg. Removing challenges Challenges must be enabled when removing challenges. Delete the file D:\sgcfg\sg_chal_N.cfg. Run the management command e :sg configure_string  CodeChallenge { Id N } Where N is the number of the challenge you wish to remove.  This will only disable the one challenge.  Once a challenge is disabled in this way, it can not be re-enabled.  It must be reinstalled by following the instructions under Installing Challenges. Log processing The challenges will generate logs in the D:\sglog directory with the prefix SGCHALCODE. These logs should be gathered from the SGs for analysis, but they should not be put up on the share with all the other text logs as they contain information that could be used to bypass the challenges. To do Add information on configuring DVD challenges. Maybe this should go before describing how to install challenges, so that they are enabled before they add them gd8Xl gd8Xl
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\Presence\Detecting Offline Users and Xboxes.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Detecting Offline Users and Xboxes TitleDetecting Offline Users and Xboxes Brian Morin Normal.dot Peter Hansen Microsoft Office WordbjbjqPqP Detecting Offline Users and Xboxes Current Design  SHAPE  \* MERGEFORMAT  All Xboxes maintain a stream of heartbeats (aka pulses) to and from the SG to maintain connectivity.  When an Xbox stops sending heartbeats for several seconds, the SG declares the box dead and sends a XMSP_MSG_DEADXBOX message saying so to both Monitoring Servers.  Each Monitoring server then rebroadcasts that message out to all Presence (PMSG_DEAD_XBOX message), Notification (QMSG_DEAD_XBOX message) and Matchmaking (XMATCH_DEAD_XBOX message) servers.  Each of these messages includes only the SGADDR of the Xbox that has gone offline in addition to metadata (length, type, etc.) In addition, there is a heartbeat maintained from the each SG to the Monitoring servers (XMSP_MSG_SG2MSHEARTBEAT) and from the Monitoring servers to each SG (XMSP_MSG_SG2MSHEARTBEAT).  When an SG stops sending heartbeats for several seconds, the Monitoring server declares the SG dead and broadcasts this information out to all Presence (PMSG_DEAD_SG message), Notification (QMSG_DEAD_SG message) and Matchmaking (XMATCH_DEAD_SG message) servers. Problems Server Cost The monitoring servers were originally envisioned as a service that monitored the health of all xbox live services. Ultimately, this vision was not realized, and the monitoring servers have remained as solely a dead xbox forwarding service. Since this cluster requires redundancy, there are 2 monitoring servers in all production level networks, and a single server in each of the other environments, meaning a total of about 10 monitoring servers across all environments. These servers cost money to purchase, currently about $5000 each, and require operations personnel to monitor the servers.  As we look forward to Xenon, the Live team is looking at replacing all servers in all environments with new hardware over the next few years. Reducing the total number of servers will result in a significant savings in operating budget. It also results in a simpler environment to operate and monitor for ops.  The monitoring servers are currently under-utilized in every respect, which is why they are considered a candidate for removal from the service. This is the driving reason for performing this work at this time. DeadXbox messages are sometimes dropped Due to network conditions, failed servers, load, etc.  We should expect a small percentage of all DeadXbox messages sent to not reach their final destination.  Since SGs can stay in service for several days, waiting for a DeadSG message to clean these sessions up is not practical.  Matchmaking handles this by timing out sessions. Presence has no mechanism to recover from this situation, and will only clear up the user once they log on again.  Two monitoring server does not mean there is a not a single point of failure There still are several ways to bring down the entire monitoring system despite having two servers.  Both use the same configuration file that could be incorrect.  Both have the same software which could fault at the same time.  Perhaps other failures as well depending on network and hardware configuration. Broadcasting DeadXbox messages (twice) does not scale At 50,000 concurrent Xboxes, with 5 minutes between logons (due to soft reboots between XBEs) the monitoring service will generate 333 DeadXbox messages per second.  As we grow as a service this number will increase, putting an increasing burden on all Presence, Notification and Matchmaking servers. Restarting an SG can cause the first few new Xboxes on the SG to be declared dead There is several seconds of latency between the SG going offline, the Monitoring service detecting it and the DeadSG message being sent.  Within that window it is possible for the SG to be restarted and start accepting new Xboxes before the services (particularly Presence and Notification) receive the DeadSG message.  As a result, the Xboxes/users that got onto the restarted SG within that window will caught by the DeadSG message.  This accidentally happened on BetaNet by restarting the user-mode part of the SG. Alternate Detection of Dead Xboxes in Presence and Notification Presence and notification need an alternate way to expire user sessions when DeadXbox messages fail to arrive for the user. Notification Service For the notification service, we can leverage the QFlags mechanism we already have built for Notification to SG communication to do this. Currently, the notification service sends a SGMSG_TYPE_SET_QVALS_LAZY or SGMSG_TYPE_SET_QVALS_PUSH message to the SG when it has a changed QValue to send to the SG.  For example, when the first notification of a given type arrives.  The SG then responds with a SGMSG_TYPE_SET_QVALS_REP message acknowledging receipt of the QVals.  Part of this acknowledgement is two boolean values,  _fNotFound and _fNoSuchUser.  _fNotFound is set if the Xbox was not found.  _fNoSuchUser is set if the user was not found.  The notification server expiries the user/Xbox if either of these flags are set. It would be a simple modification for the Notification server to resend the current set of QVals if they have not been sent for several minutes.  The Notification server then could check the reply to determine if the user and xbox is still online.  This would add a minimal amount of extra traffic and avoid any arbitrary expiration of users or queue items based on a timeout. A further enhancement would be to timing out users (or Xboxes or perhaps even the entire SG) if the SG fails to reply to a SGMSG_TYPE_SET_QVALS_LAZY or SGMSG_TYPE_SET_QVALS_PUSH message within a given number of retries. Presence Service To avoid arbitrarily expiring users, the Presence server should also query the SG for the status of idle users.  The Presence server can do this by sending a SGMSG_TYPE_SET_QVALS_LAZY message with 0 QVals for these idle users.  This operation will NOP on the SG, but return the status of the requested user and SG.  If there is no answer, the Presence server can retry until it assumes the SG is out of service and then times out the user. Matchmaking Matchmaking will continue to expire session naturally as it always has been designed to do. As a result of this work, we may want to make the expiration of match sessions more aggressive than it already is to ensure there are a minimum number of dead sessions in match.  Better Routing of DeadXbox Messages Broadcasting DeadXbox messages twice to every presence, notification and matchmaking server does not scale.  Projecting out even further it is questionable if a redundant pair of monitoring servers could handle all of the load generated by spikes of Xboxes going offline.  There are three changes we could make to fix these problems. First, have the SGs send DeadXbox messages to the Front Doors directly, instead of via the monitoring servers.  The SGs would have to be configured with both Front Door VIPs (they already have the P&N Front Door VIP for state changes.)  Also, the P&N Front Door would have to add support for broadcasting DeadXbox messages.  This would immediately reduce the number of DeadXbox messages received by their destination servers in half and eliminate the monitoring service as a point a failure for their delivery. Second, include the user PUIDs of the users on the Xbox and TitleId they were in when sending DeadXbox messages.  This data is already tracked by the SG within the authentication ticket.  This would allow the front doors to only send these messages to servers interested in them, further reducing the load. To reduce network traffic, the Monitoring server did some batching of dead xbox messages before sending them to matchmaking. With the new implementation, dead xbox messages will be batched together for both presence and matchmaking, in the same manner that the SG currently batches State messages for presence.  Do We Need a Monitoring Service? If SGs send DeadXbox messages directly to the Front Doors, then all that is left for the monitoring service to do is send DeadSG messages.  So, do we even need them for this functionality? The SGs could send their own DeadSG message before they are gracefully shutdown, and perhaps send another DeaadSG a few seconds before they accept new connections.  This would provide some immediate cleanup of offline users.  Then remove the monitoring service and with it the window where new online users are killed with the late DeadSG message.   For cases this does not cover we can rely on the individual services to eventually expire users on a failed SG, which we needed to have anyway. Since this case should be extremely rare, allowing the users to timeout from presence and matchmaking naturally should not pose any serious performance problems for the service. Proposal Priority 0 Work Items Add User PUIDs and TitleID to DeadXBox messages By doing this work now, we eliminate the need to change intra-service protocols at a later date when we need to leverage this information to scale out. Implement dead user detection in the Notification Server Reply QVal messages to the SG for idle users to determine if they are online.  If there is no response after a number of retries, cleanup the user. Implement dead user detection in the Presence Server Send empty QVal messages to the SG for idle users to determine if they are online.  If there is no response after a number of retries, cleanup the user. Note: Merging the presence and notification services into a single NT service will mean that only the notification version of these changes is required, as the user record and maintenance will be shared.  Have the Presence and Notification Front Door process Dead Xbox Messages Move this message to the Front Door, eliminates the need for the monitoring service to know the address of every Presence and Notification server and allows the front door to use existing code to route the messages to the interested servers. Have the SGs send DeadXbox messages directly to the P&N and Match Front Doors. At this point the Monitoring Service is just a big relay that doubles the traffic.  Cut out the relay by sending the messages directly.  Will reduce the amount of DeadXbox messages generated in half. Remove the Monitoring Service No longer used Priority 1 Work Items Have the matchmaking front door use PUIDs and/or TitleID to route DeadXBox messages Helps the Matchmaking service scale with the service. Priority 2 Work Items Have the SGs send their own DeadSG messages when they are gracefully brought offline. Speed up detection of dead users in some cases. Monitoring Server Monitoring Server Presence Sever Cluster Notification Sever Cluster Match Making Sever Cluster XbToSG Heartbeat DeadXBox and SGToMS Heartbeat DeadXBox and DeadSG
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\doc\server\Presence\Messaging Service Implementation - Tsunami.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Xbox Online Tsunami - Messaging Service Implementation Title _PID_HLINKSXbox Online Tsunami - Messaging Service Implementation Mason Boswell Normal.dot Mason Boswell Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags PersonName urn:schemas-microsoft-com:office:smarttags Month transbjbjqPqP ization  Spec Status Draft   Reviewed   Complete  Table of Contents  TOC \o "1-2" \h \z \u   HYPERLINK \l "_Toc75265819"  Table of Contents  PAGEREF _Toc75265819 \h   HYPERLINK \l "_Toc75265820"  Executive Summary  PAGEREF _Toc75265820 \h   HYPERLINK \l "_Toc75265821"  Architecture Diagram  PAGEREF _Toc75265821 \h   HYPERLINK \l "_Toc75265822"  Design  PAGEREF _Toc75265822 \h   HYPERLINK \l "_Toc75265823"  Conceptual Components  PAGEREF _Toc75265823 \h   HYPERLINK \l "_Toc75265824"  Messaging Operations  PAGEREF _Toc75265824 \h   HYPERLINK \l "_Toc75265825"  Special Situations  PAGEREF _Toc75265825 \h   HYPERLINK \l "_Toc75265826"  Implementation  PAGEREF _Toc75265826 \h   HYPERLINK \l "_Toc75265827"  Messages  PAGEREF _Toc75265827 \h   HYPERLINK \l "_Toc75265828"  Front Door APIs  PAGEREF _Toc75265828 \h   HYPERLINK \l "_Toc75265829"  Server/Web Interface  PAGEREF _Toc75265829 \h   HYPERLINK \l "_Toc75265830"  Profile Store/SQL  PAGEREF _Toc75265830 \h   HYPERLINK \l "_Toc75265831"  Security  PAGEREF _Toc75265831 \h   HYPERLINK \l "_Toc75265832"  Spoofing Identity  PAGEREF _Toc75265832 \h   HYPERLINK \l "_Toc75265833"  Tampering with Data  PAGEREF _Toc75265833 \h   HYPERLINK \l "_Toc75265834"  Information Disclosure  PAGEREF _Toc75265834 \h   HYPERLINK \l "_Toc75265835"  Denial of Service (DoS)  PAGEREF _Toc75265835 \h   HYPERLINK \l "_Toc75265836"  Operations  PAGEREF _Toc75265836 \h   HYPERLINK \l "_Toc75265837"  Interactions/Dependencies  PAGEREF _Toc75265837 \h   HYPERLINK \l "_Toc75265838"  Revision History  PAGEREF _Toc75265838 \h  Executive Summary This document outlines the implementation details of the Messaging Service for the Tsunami release of Xbox Live.  Please see   HYPERLINK "http://sts/xbox_online/Specs/Messaging.doc"  http://sts/xbox_online/Specs/Messaging.doc  for a feature-level description of Messaging and   HYPERLINK "http://sts/xbox_online"  http://sts/xbox_online  for the client-side spec. Architecture Diagram  SHAPE  \* MERGEFORMAT  Design Conceptual Components Messages Messages are divided into three basic pieces.  First, there is a message summary which contains a common set of properties found on all messages that are used to make initial decisions about the routing and display of the message to the user.  Next, there are 4096 bytes of message details made up of any properties applicable to the particular message type, that should be retrieved when the user opens the message.  Finally, a message may have attachments which are represented as URLs from the Storage service and stored as properties in the message details. In the implementation, messages are divided into two types, persistent and transient.  Persistent messages are messages that have a lifetime generally greater than one day and are stored in the Profile store.  Transient messages are messages with a shorter lifetime and are stored in memory on the Notification server.  Currently only Game Invites are transient messages. All messages have an expiration which has a maximum value of 45 days.  A default expiration for each message type can be set in the xpnconfig.ini file on the Notification server(s).  A client requests the default expiration by passing zero when sending a message. Message Properties Message properties are the smallest unit of data on a message.  Each property is given a unique ID and a type which defines the property s contents.  The type and ID together form a property tag which is used when setting and retrieving the property.  The client code is written such that the binary format of properties is never exposed to titles, and titles are required to request the properties they are interested in off of a message rather than being able to see all properties on a message.  This is done so that a particular message that a title is familiar with handling does not break that title if new properties are added to the message type in the future. Message Types Messages are given a type which acts as a contract that informs the client how the message should be handled, what required properties should be expected, and how the sender context field should be interpreted. User Message Queue The user message queue contains the messages for an individual user and is limited to 100 persistent messages and 25 transient messages.  There are APIs that allow a user to enumerate and delete from this list, as well as for sending new messages to the queues of other users.  The user message queue is a merging of the persistent messages for a user stored in the Profile store, and the transient messages for a user stored in memory on the Notification server.  Global Message Queue The global message queue contains messages that are destined for all users on the system, all users of a specific title, or all users of a specific region.  This is where both system messages and publisher-sent title messages are stored.  Messages in this queue can be flagged as required, which means that a user is prevented from further activity on the service until they read them, or as recommended, meaning that a user should be warned of their existence when they logon, but allowed to proceed.  When a user logs on, the global message queue is checked for messages applicable to the user, and if any are found they are copied into the user message queue.  The time of the last retrieval from the queue is stored so that the same messages are not re-retrieved at the next logon.   This queue is persisted in the Profile store, and there are APIs for enumerating, sending, and deleting messages from it.  A global message can be set to expire on a specific date similar to normal messages in the user message queue, and this expiration will be copied to the user queue for any users that receive it.   This could be used to send a message of the day or week, which is then set to expire at the end of the specified time period after which it is no longer applicable.  Messages in the global queue can also have a sent time dated in the future, such that the message is not delivered to any users before a specified point in time.  This allows a publisher to send a message to be delivered at a specified time without having to  sit at the send button  at that time. Owned Title List This list contains the titles a user has logged on with in the past, and is used to prevent a user from receiving publisher-sent messages from titles they don't own.  There is an API for enumerating the list so that the Dash/Lounge/Web can allow the user to manage the titles they want to receive publisher messages from.  There is also an API to allow the user to delete from this list, which might be used when a user has rented and returned a title and no longer wishes to receive publisher-sent messages related to it.  The owned-title list is persisted in the Profile store.  Notification Server The Notification server handles all Messaging requests.  Transient messages are stored in memory on the Notification server, and the Notification server is responsible for sending QVals on the SG heartbeat when a message is added or deleted from a user's queue.  The Notification server also remains responsible for sending V1 QFlags and a QVal for Friend Game Invites in order to keep existing titles working properly. SG Heartbeat Notification Notifications are sent to Xbox clients using the SG heartbeat mechanism using structures called QVals.  QVals contain a sequence number and up to three DWORDs of associated data.  Messaging uses three new QVals, two are used when messages are added, the first contains the message IDs of the 3 most recently added messages, and the second contains additional data about the 3 most recently added messages.  A third QVal is used when a message is deleted and contains the message ID of the 3 most recently deleted messages.  The client can look at the sequence number on the QVal and compare it against the last seen sequence number to determine if it has the message IDs for each notification that has occurred for that QVal.  If the client has missed three notifications, it will have to use the Messaging APIs to enumerate all messages for the user.  If the client is keeping up with notifications, it can enumerate only once at logon and then use the message IDs in the notifications to keep its stored list of messages up to date. Front Door The Messaging front door shares the existing Presence and Notification front door, adding new commands as noted below Messaging Operations Initialization/Logon Each time a user logs on, the owned title list is first checked to see if the current title is new and should be added to the list.  Then, the title ID and title region being logged in with are used to copy appropriate messages from the global message queue into the user message queue.  Since this only occurs at logon, a user will not receive new system, title, or region messages sent after the user logs on until the user logs off and back on again. Message Enumeration When a client attempts to retrieve messages for the first time, they will request a list containing the summary for all of the messages in a user s queue.  The client will then cache this information, and begin listening to notifications to keep the local list up to date when messages are added and deleted.  If the client misses too many notifications due to packet loss or more than three messages arriving during one heartbeat interval, the client can always re-enumerate to get the full message list.  Message lists are returned to the client sorted from newest to oldest by sent time.  The data returned in an enumeration is kept small in order to make enumerating a very efficient means of finding out enough information about all available messages to make routing and UI decisions about where to display new message icons and display enough summary information to the user so that the user can decide whether the message is one they want to open and read in more detail.  The message summary data returned in an enumeration is 58 bytes, and since the user can have a maximum of 125 message, the maximum amount of data returned by an enumeration is 7,250 bytes. Message Retrieval Message retrieval is used to get the details of a message, and requires knowing the user PUID and message ID of the message of interest.  A client is expected to have first obtained the message ID by enumerating messages, receiving a new message notification, or receiving the message ID from another Live service.  This operation will return both the 58 byte message summary as well as the up to 4096 byte details of the message.  Any attachments that are stored in the Storage service will be represented as Storage URLs in the message details.  Attachment retrieval is separated from message retrieval because attachments can potentially be very large and should require additional user interaction prior to downloading them.  For example, if an attachment were a 5MB map, the user might be required to select  Save Map  before the map would actually be downloaded to the client Xbox console. Attachment Retrieval Properties over a certain threshold are stored on the Storage server as attachments, and are represented as Storage URLs in the message details.  These properties could contain things like a large map, armor, or a ghost race and are not retrieved along with other message details until the client explicitly requests for them to be retrieved.  Storage APIs outside of Messaging are used for storing and retrieving attachments and will not be covered here.  Once the Storage URL is retrieved from Messaging, it is up to the client to call the appropriate APIs to download the attachment.  Message Deletion A message may be deleted in several different ways: explicit deletion by a title/user/service, message expiration, and full user queue handling (see below).  Messages will not be deleted automatically upon being viewed.  Messages may be explicitly deleted by a service such as Presence deleting game invites when the sending user logs off, or the Tournament service deleting messages related to a cancelled tournament.  A user may also explicitly delete messages from their own queue. Message Sending When a client wants to send a message, it builds up the required properties for the type of message being sent, and then builds a list of PUIDs the message will be sent to, which may be up to 100 users.  The Messaging service does not validate one user's rights to send to another user, this is expected to be controlled by client policy.  If any attachments are to be stored in external storage, the client will first store those properties using the Storage service APIs, and then pass the Storage URL as a part of the properties it is building up for the message.  For title-custom messages, the title is allowed to specify the expiration for the message up to 45 days.  The message is then passed to the server for sending to the specified list of recipients.  The server will set certain properties on the message at the time of receipt, such as the sent time and deliver the message to the specified recipients. Message Revocation A message sender is allowed to revoke any message that they send.  The revoke API accepts parameters that are very similar to the reply returned from the send API, so that any client or service sending messages can easily store the send reply if they later anticipate needing to revoke the message.  The revoke API accepts the same limit of 100 recipients in one call that the send API does. Message Blocking When a user deletes a message they have the option of blocking the sender of that message from sending them messages in the future.  A user may unblock a user that they have previously blocked by sending that user any message.  When a message is sent to a user that has blocked the sender a special error code is returned to the client which may or may not be displayed to the user depending on client policy. A user can stop receiving messages from a particular publisher by deleting the particular title from the owned title list, and not playing that title again.  If the user does logon with the title again, it will be added back to the owned title list and the user will again receive messages related to tha