ref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Single" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Double" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Double" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Guid" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Guid" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to an <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int32" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.String" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Single" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String)">
      <summary>Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</returns>
      <param name="text">A <see cref="T:System.String" /> that contains XML.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</returns>
      <param name="text">A <see cref="T:System.String" /> that contains XML.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAll">
      <summary>Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAttributes">
      <summary>Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
      <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
      <param name="content">The content that will replace the child nodes and attributes of this element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
      <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
      <summary>Replaces the attributes of this element with the specified content.</summary>
      <param name="content">The content that will replace the attributes of this element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
      <summary>Replaces the attributes of this element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
      <summary>Serialize this element to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.String)">
      <summary>Serialize this element to a file.</summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this element to a file, optionally disabling formatting.</summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
      <summary>Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
      <summary>Sets the value of an attribute, adds an attribute, or removes an attribute. </summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</param>
      <param name="value">The value to assign to the attribute. The attribute is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
      <summary>Sets the value of a child element, adds a child element, or removes a child element.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</param>
      <param name="value">The value to assign to the child element. The child element is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetValue(System.Object)">
      <summary>Sets the value of this element.</summary>
      <param name="value">The value to assign to this element. The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Gets an XML schema definition that describes the XML representation of this object.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Generates an object from its XML representation.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> from which the object is deserialized.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts an object into its XML representation.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to which this object is serialized.</param>
    </member>
    <member name="P:System.Xml.Linq.XElement.Value">
      <summary>Gets or sets the concatenated text contents of this element.</summary>
      <returns>A <see cref="T:System.String" /> that contains all of the text content of this element. If there are multiple text nodes, they will be concatenated.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XName">
      <summary>Represents a name of an XML element or attribute. </summary>
    </member>
    <member name="M:System.Xml.Linq.XName.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>true if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise false.</returns>
      <param name="obj">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</returns>
      <param name="expandedName">A <see cref="T:System.String" /> that contains an expanded XML name in the format {namespace}localname.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String,System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</returns>
      <param name="localName">A local (unqualified) name.</param>
      <param name="namespaceName">An XML namespace.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.LocalName">
      <summary>Gets the local (unqualified) part of the name.</summary>
      <returns>A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.Namespace">
      <summary>Gets the namespace part of the fully qualified name.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.NamespaceName">
      <summary>Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
      <summary>Converts a string formatted as an expanded XML name (that is,{namespace}localname) to an <see cref="T:System.Xml.Linq.XName" /> object.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</returns>
      <param name="expandedName">A string that contains an expanded XML name in the format {namespace}localname.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.System#IEquatable{T}#Equals(System.Xml.Linq.XName)">
      <summary>Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>true if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise false.</returns>
      <param name="other">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.ToString">
      <summary>Returns the expanded XML name in the format {namespace}localname.</summary>
      <returns>A <see cref="T:System.String" /> that contains the expanded XML name in the format {namespace}localname.</returns>
    </member>
    <member name="T:System.Xml.Linq.XNamespace">
      <summary>Represents an XML namespace. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</returns>
      <param name="obj">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Get(System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</returns>
      <param name="namespaceName">A <see cref="T:System.String" /> that contains a namespace URI.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetName(System.String)">
      <summary>Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</returns>
      <param name="localName">A <see cref="T:System.String" /> that contains a local name.</param>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.NamespaceName">
      <summary>Gets the Uniform Resource Identifier (URI) of this namespace.</summary>
      <returns>A <see cref="T:System.String" /> that contains the URI of the namespace.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.None">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
      <summary>Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</returns>
      <param name="ns">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</param>
      <param name="localName">A <see cref="T:System.String" /> that contains the local name.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
      <summary>Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</returns>
      <param name="namespaceName">A <see cref="T:System.String" /> that contains the namespace URI.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.ToString">
      <summary>Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xml">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (http://www.w3.org/XML/1998/namespace).</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (http://www.w3.org/XML/1998/namespace).</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xmlns">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (http://www.w3.org/2000/xmlns/).</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the xmlns URI (http://www.w3.org/2000/xmlns/).</returns>
    </member>
    <member name="T:System.Xml.Linq.XNode">
      <summary>Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)">
      <summary>Adds the specified content immediately after this node.</summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this node.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])">
      <summary>Adds the specified content immediately after this node.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)">
      <summary>Adds the specified content immediately before this node.</summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this node.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])">
      <summary>Adds the specified content immediately before this node.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors">
      <summary>Returns a collection of the ancestor elements of this node.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.The nodes in the returned collection are in reverse document order.This method uses deferred execution.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares two nodes to determine their relative XML document order.</summary>
      <returns>An int containing 0 if the nodes are equal; -1 if <paramref name="n1" /> is before <paramref name="n2" />; 1 if <paramref name="n1" /> is after <paramref name="n2" />.</returns>
      <param name="n1">First <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="n2">Second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader">
      <summary>Creates an <see cref="T:System.Xml.XmlReader" /> for this node.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> that can be used to read this node and its descendants.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)">
      <summary>Creates an <see cref="T:System.Xml.XmlReader" /> with the options specified by the <paramref name="readerOptions" /> parameter.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object.</returns>
      <param name="readerOptions">A <see cref="T:System.Xml.Linq.ReaderOptions" /> object that specifies whether to omit duplicate namespaces.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares the values of two nodes, including the values of all descendant nodes.</summary>
      <returns>true if the nodes are equal; otherwise false.</returns>
      <param name="n1">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="n2">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    </member>
    <member name="P:System.Xml.Linq.XNode.DocumentOrderComparer">
      <summary>Gets a comparer that can compare the relative position of two nodes.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> that can compare the relative position of two nodes.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf">
      <summary>Returns a collection of the sibling elements after this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf">
      <summary>Returns a collection of the sibling elements before this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="P:System.Xml.Linq.XNode.EqualityComparer">
      <summary>Gets a comparer that can compare two nodes for value equality.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> that can compare two nodes for value equality.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)">
      <summary>Determines if the current node appears after a specified node in terms of document order.</summary>
      <returns>true if this node appears after the specified node; otherwise false.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)">
      <summary>Determines if the current node appears before a specified node in terms of document order.</summary>
      <returns>true if this node appears before the specified node; otherwise false.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</param>
    </member>
    <member name="P:System.Xml.Linq.XNode.NextNode">
      <summary>Gets the next sibling node of this node.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNode" /> that contains the next sibling node.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesAfterSelf">
      <summary>Returns a collection of the sibling nodes after this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes after this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesBeforeSelf">
      <summary>Returns a collection of the sibling nodes before this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes before this node, in document order.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.PreviousNode">
      <summary>Gets the previous sibling node of this node.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNode" /> that contains the previous sibling node.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)">
      <summary>Creates an <see cref="T:System.Xml.Linq.XNode" /> from an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode" /> that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type (<see cref="P:System.Xml.Linq.XObject.NodeType" />) of the first node encountered in the reader.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode" />.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on a recognized node type.</exception>
      <exception cref="T:System.Xml.XmlException">The underlying <see cref="T:System.Xml.XmlReader" /> throws an exception.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XNode.Remove">
      <summary>Removes this node from its parent.</summary>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object)">
      <summary>Replaces this node with the specified content.</summary>
      <param name="content">Content that replaces this node.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])">
      <summary>Replaces this node with the specified content.</summary>
      <param name="content">A parameter list of the new content.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString">
      <summary>Returns the indented XML for this node.</summary>
      <returns>A <see cref="T:System.String" /> containing the indented XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)">
      <summary>Returns the XML for this node, optionally disabling formatting.</summary>
      <returns>A <see cref="T:System.String" /> containing the XML.</returns>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XNodeDocumentOrderComparer">
      <summary>Contains functionality to compare nodes for their document order. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares two nodes to determine their relative document order.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains 0 if the nodes are equal; -1 if <paramref name="x" /> is before <paramref name="y" />; 1 if <paramref name="x" /> is after <paramref name="y" />.</returns>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>Compares two nodes to determine their relative document order.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains 0 if the nodes are equal; -1 if <paramref name="x" /> is before <paramref name="y" />; 1 if <paramref name="x" /> is after <paramref name="y" />.</returns>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
      <exception cref="T:System.ArgumentException">The two nodes are not derived from <see cref="T:System.Xml.Linq.XNode" />.</exception>
    </member>
    <member name="T:System.Xml.Linq.XNodeEqualityComparer">
      <summary>Compares nodes to determine whether they are equal. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares the values of two nodes.</summary>
      <returns>A <see cref="T:System.Boolean" /> indicating if the nodes are equal.</returns>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)">
      <summary>Returns a hash code based on an <see cref="T:System.Xml.Linq.XNode" />.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains a value-based hash code for the node.</returns>
      <param name="obj">The <see cref="T:System.Xml.Linq.XNode" /> to hash.</param>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>Compares the values of two nodes.</summary>
      <returns>true if the nodes are equal; otherwise false.</returns>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>Returns a hash code based on the value of a node.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains a value-based hash code for the node.</returns>
      <param name="obj">The node to hash.</param>
    </member>
    <member name="T:System.Xml.Linq.XObject">
      <summary>Represents a node or an attribute in an XML tree. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
      <summary>Adds an object to the annotation list of this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <param name="annotation">An <see cref="T:System.Object" /> that contains the annotation to add.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation``1">
      <summary>Get the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />. </summary>
      <returns>The first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
      <typeparam name="T">The type of the annotation to retrieve.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation(System.Type)">
      <summary>Gets the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The <see cref="T:System.Object" /> that contains the first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the annotation to retrieve.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations``1">
      <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
      <typeparam name="T">The type of the annotations to retrieve.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations(System.Type)">
      <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the annotations to retrieve.</param>
    </member>
    <member name="P:System.Xml.Linq.XObject.BaseUri">
      <summary>Gets the base URI for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the base URI for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changed">
      <summary>Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants have changed.</summary>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changing">
      <summary>Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants are about to change.</summary>
    </member>
    <member name="P:System.Xml.Linq.XObject.Document">
      <summary>Gets the <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />. </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.NodeType">
      <summary>Gets the node type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The node type for this <see cref="T:System.Xml.Linq.XObject" />. </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.Parent">
      <summary>Gets the parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
      <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <typeparam name="T">The type of annotations to remove.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
      <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <param name="type">The <see cref="T:System.Type" /> of annotations to remove.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
      <summary>Gets a value indicating whether or not this <see cref="T:System.Xml.Linq.XObject" /> has line information.</summary>
      <returns>true if the <see cref="T:System.Xml.Linq.XObject" /> has line information, otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
      <summary>Gets the line number that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the line number reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
      <summary>Gets the line position that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the line position reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    </member>
    <member name="T:System.Xml.Linq.XObjectChange">
      <summary>Specifies the event type when an event is raised for an <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Add">
      <summary>An <see cref="T:System.Xml.Linq.XObject" /> has been or will be added to an <see cref="T:System.Xml.Linq.XContainer" />.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Remove">
      <summary>An <see cref="T:System.Xml.Linq.XObject" /> has been or will be removed from an <see cref="T:System.Xml.Linq.XContainer" />.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Name">
      <summary>An <see cref="T:System.Xml.Linq.XObject" /> has been or will be renamed.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Value">
      <summary>The value of an <see cref="T:System.Xml.Linq.XObject" /> has been or will be changed. In addition, a change in the serialization of an empty element (either from an empty tag to start/end tag pair or vice versa) raises this event.</summary>
    </member>
    <member name="T:System.Xml.Linq.XObjectChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Linq.XObject.Changing" /> and <see cref="E:System.Xml.Linq.XObject.Changed" /> events.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XObjectChangeEventArgs.#ctor(System.Xml.Linq.XObjectChange)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XObjectChangeEventArgs" /> class. </summary>
      <param name="objectChange">An <see cref="T:System.Xml.Linq.XObjectChange" /> that contains the event arguments for LINQ to XML events.</param>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Add">
      <summary>Event argument for an <see cref="F:System.Xml.Linq.XObjectChange.Add" /> change event.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Name">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Name" /> change event.</summary>
    </member>
    <member name="P:System.Xml.Linq.XObjectChangeEventArgs.ObjectChange">
      <summary>Gets the type of change.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XObjectChange" /> that contains the type of change.</returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Remove">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Remove" /> change event.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Value">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Value" /> change event.</summary>
    </member>
    <member name="T:System.Xml.Linq.XProcessingInstruction">
      <summary>Represents an XML processing instruction. </summary>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XProcessingInstruction" /> class. </summary>
      <param name="target">A <see cref="T:System.String" /> containing the target application for this <see cref="T:System.Xml.Linq.XProcessingInstruction" />.</param>
      <param name="data">The string data for this <see cref="T:System.Xml.Linq.XProcessingInstruction" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> or <paramref name="data" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="target" /> does not follow the constraints of an XML name.</exception>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.Xml.Linq.XProcessingInstruction)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XProcessingInstruction" /> class. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XProcessingInstruction" /> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Data">
      <summary>Gets or sets the string value of this processing instruction.</summary>
      <returns>A <see cref="T:System.String" /> that contains the string value of this processing instruction.</returns>
      <exception cref="T:System.ArgumentNullException">The string <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XProcessingInstruction" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.ProcessingInstruction" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Target">
      <summary>Gets or sets a string containing the target application for this processing instruction.</summary>
      <returns>A <see cref="T:System.String" /> containing the target application for this processing instruction.</returns>
      <exception cref="T:System.ArgumentNullException">The string <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="target" /> does not follow the constraints of an XML name.</exception>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this processing instruction to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write this processing instruction to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XStreamingElement">
      <summary>Represents elements in an XML tree that supports deferred streaming output.</summary>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XStreamingElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XStreamingElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
      <summary>Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement" />.</summary>
      <param name="content">Content to be added to the streaming element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
      <summary>Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement" />.</summary>
      <param name="content">Content to be added to the streaming element.</param>
    </member>
    <member name="P:System.Xml.Linq.XStreamingElement.Name">
      <summary>Gets or sets the name of this streaming element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this streaming element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XStreamingElement" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XStreamingElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
      <summary>Serialize this streaming element to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XStreamingElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this streaming element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
      <summary>Serialize this streaming element to a file.</summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this streaming element to a file, optionally disabling formatting.</summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
      <summary>Serialize this streaming element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString">
      <summary>Returns the formatted (indented) XML for this streaming element.</summary>
      <returns>A <see cref="T:System.String" /> containing the indented XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
      <summary>Returns the XML for this streaming element, optionally disabling formatting.</summary>
      <returns>A <see cref="T:System.String" /> containing the XML.</returns>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this streaming element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XText">
      <summary>Represents a text node. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class. </summary>
      <param name="value">The <see cref="T:System.String" /> that contains the value of the <see cref="T:System.Xml.Linq.XText" /> node.</param>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class from another <see cref="T:System.Xml.Linq.XText" /> object.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XText" /> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XText.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XText" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Text" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XText.Value">
      <summary>Gets or sets the value of this node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the value of this node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Schema.Extensions">
      <summary>This class contains the LINQ to XML extension methods for XSD validation. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)">
      <summary>Gets the post-schema-validation infoset (PSVI) of a validated attribute.</summary>
      <returns>A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset for an <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="source">An <see cref="T:System.Xml.Linq.XAttribute" /> that has been previously validated.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)">
      <summary>Gets the post-schema-validation infoset (PSVI) of a validated element.</summary>
      <returns>A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset (PSVI) for an <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="source">An <see cref="T:System.Xml.Linq.XElement" /> that has been previously validated.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>This method validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <param name="addSchemaInfo">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>This method validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <param name="addSchemaInfo">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>This method validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <param name="addSchemaInfo">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.XPath.Extensions">
      <summary>This class contains the LINQ to XML extension methods that enable you to evaluate XPath expressions.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)">
      <summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for an <see cref="T:System.Xml.Linq.XNode" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> that can process XPath queries.</returns>
      <param name="node">An <see cref="T:System.Xml.Linq.XNode" /> that can process XPath queries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)">
      <summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for an <see cref="T:System.Xml.Linq.XNode" />. The <see cref="T:System.Xml.XmlNameTable" /> enables more efficient XPath expression processing.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> that can process XPath queries.</returns>
      <param name="node">An <see cref="T:System.Xml.Linq.XNode" /> that can process an XPath query.</param>
      <param name="nameTable">A <see cref="T:System.Xml.XmlNameTable" /> to be used by <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)">
      <summary>Evaluates an XPath expression.</summary>
      <returns>An object that can contain a bool, a double, a string, or an <see cref="T:System.Collections.Generic.IEnumerable`1" />. </returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Evaluates an XPath expression, resolving namespace prefixes using the specified <see cref="T:System.Xml.IXmlNamespaceResolver" />.</summary>
      <returns>An object that contains the result of evaluating the expression. The object can be a bool, a double, a string, or an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <param name="resolver">A <see cref="T:System.Xml.IXmlNamespaceResolver" /> for the namespace prefixes in the XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)">
      <summary>Selects an <see cref="T:System.Xml.Linq.XElement" /> using a XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" />, or null.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Selects an <see cref="T:System.Xml.Linq.XElement" /> using a XPath expression, resolving namespace prefixes using the specified <see cref="T:System.Xml.IXmlNamespaceResolver" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" />, or null.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <param name="resolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> for the namespace prefixes in the XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)">
      <summary>Selects a collection of elements using an XPath expression.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the selected elements.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Selects a collection of elements using an XPath expression, resolving namespace prefixes using the specified <see cref="T:System.Xml.IXmlNamespaceResolver" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the selected elements.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <param name="resolver">A <see cref="T:System.Xml.IXmlNamespaceResolver" /> for the namespace prefixes in the XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\UIAutomationClientsideProviders.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UIAutomationClientsideProviders</name>
  </assembly>
  <members>
    <member name="T:UIAutomationClientsideProviders.UIAutomationClientSideProviders">
      <summary>Enables applications to discover client-side UI Automation providers.</summary>
    </member>
    <member name="F:UIAutomationClientsideProviders.UIAutomationClientSideProviders.ClientSideProviderDescriptionTable">
      <summary>Provides information about client-side UI Automation providers.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.WorkflowModel.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.WorkflowModel</name>
  </assembly>
  <members>
    <member name="T:System.WorkflowModel.ActionArgument">
      <summary>Represents a parameter of an <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.ActionArgument.#ctor(System.WorkflowModel.Variable,System.Type,System.WorkflowModel.ArgumentDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ActionArgument" /> class.</summary>
      <param name="data">The value of the argument.</param>
      <param name="type">The data type of the argument.</param>
      <param name="direction">The direction of the data flow between the invoking activity and the <see cref="T:System.WorkflowModel.ActivityAction" />.</param>
    </member>
    <member name="P:System.WorkflowModel.ActionArgument.Data">
      <summary>Gets the value of the argument.</summary>
      <returns>The value of the argument.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActionArgument.Direction">
      <summary>Gets the direction of the data flow between the invoking activity and the <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>The direction of the data flow between the invoking activity and the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActionArgument.Type">
      <summary>Gets the data type of the argument.</summary>
      <returns>The data type of the argument.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActionArgumentAttribute">
      <summary>Indicates that a <see cref="T:System.WorkflowModel.Variable" /> in a class derived from <see cref="T:System.WorkflowModel.ActivityAction" /> is an <see cref="T:System.WorkflowModel.ActionArgument" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.ActionArgumentAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ActionArgumentAttribute" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActionArgumentAttribute.Direction">
      <summary>Gets or sets the direction of the data flow through the argument.</summary>
      <returns>The direction of the data flow through the argument.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activity"></member>
    <member name="M:System.WorkflowModel.Activity.#ctor"></member>
    <member name="P:System.WorkflowModel.Activity.Body"></member>
    <member name="M:System.WorkflowModel.Activity.CreateBody"></member>
    <member name="M:System.WorkflowModel.Activity.Execute(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activity.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})"></member>
    <member name="M:System.WorkflowModel.Activity.OnOpen(System.WorkflowModel.DeclaredEnvironment)"></member>
    <member name="T:System.WorkflowModel.ActivityAbortContext">
      <summary>Provides information about the reason a workflow was aborted.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActivityAbortContext.Environment"></member>
    <member name="M:System.WorkflowModel.ActivityAbortContext.GetExtension``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.WorkflowModel.ActivityAbortContext.Reason">
      <summary>Gets an <see cref="T:System.Exception" /> that contains the reason for the workflow being aborted.</summary>
      <returns>An <see cref="T:System.Exception" /> that contains the reason for the workflow being aborted.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActivityAction">
      <summary>An extensibility point for activities where a developer can specify another activity to run when a specific event occurs.</summary>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ActivityAction" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction.GetActionArguments">
      <summary>Gets the arguments for the activity that is called by this <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.WorkflowModel.ActionArgument" /> that contains the arguments for the activity that is called by this <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction.Handler">
      <summary>Gets or sets the activity that is called by this <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.WorkflowElement" /> that represents the activity that is called by this <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction.ThrowIfOpen">
      <summary>Throws an exception when the <see cref="P:System.WorkflowModel.ActivityAction.Handler" /> is set and the handler is running. </summary>
    </member>
    <member name="T:System.WorkflowModel.ActivityAction`1">
      <summary>An extensibility point for activities where a developer can specify another activity to run when a specific event occurs. This <see cref="T:System.WorkflowModel.ActivityAction" /> takes one argument.</summary>
      <typeparam name="T">An argument to the activity that is called by this <see cref="T:System.WorkflowModel.ActivityAction" /></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ActivityAction`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`1.Argument">
      <summary>Gets or sets the argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActivityAction`2">
      <summary>An extensibility point for activities where a developer can specify another activity to run when a specific event occurs. This <see cref="T:System.WorkflowModel.ActivityAction" /> takes two arguments.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction`2.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ActivityAction`2" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`2.Argument1">
      <summary>Gets or sets the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`2.Argument2">
      <summary>Gets or sets the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActivityAction`3">
      <summary>An extensibility point for activities where a developer can specify another activity to run when a specific event occurs. This <see cref="T:System.WorkflowModel.ActivityAction" /> takes three arguments. </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction`3.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ActivityAction`3" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`3.Argument1">
      <summary>Gets or sets the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`3.Argument2">
      <summary>Gets or sets the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`3.Argument3">
      <summary>Gets or sets the third argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the third argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActivityAction`4">
      <summary>An extensibility point for activities where a developer can specify another activity to run when a specific event occurs. This <see cref="T:System.WorkflowModel.ActivityAction" /> takes four arguments.</summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="T3"></typeparam>
      <typeparam name="T4"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityAction`4.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ActivityAction`4" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`4.Argument1">
      <summary>Gets or sets the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the first argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`4.Argument2">
      <summary>Gets or sets the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the second argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`4.Argument3">
      <summary>Gets or sets the third argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the third argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ActivityAction`4.Argument4">
      <summary>Gets or sets the fourth argument for the <see cref="T:System.WorkflowModel.ActivityAction" />. </summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable`1" /> that represents the fourth argument for the <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.ActivityExecutionContext"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.AbortChildInstance(System.WorkflowModel.ActivityInstance)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.AbortChildInstance(System.WorkflowModel.ActivityInstance,System.Exception)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CancelChild(System.WorkflowModel.ActivityInstance)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CancelChildren"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateAndRegisterSubInstance"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateAndRegisterSubInstance(System.Guid)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateBookmark"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateBookmark(System.WorkflowModel.BookmarkCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateBookmark(System.WorkflowModel.BookmarkCallback,System.WorkflowModel.BookmarkOptions)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateNamedBookmark(System.String)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateNamedBookmark(System.String,System.WorkflowModel.BookmarkCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateNamedBookmark(System.String,System.WorkflowModel.BookmarkCallback,System.WorkflowModel.BookmarkOptions)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateProtocolBookmark(System.String,System.WorkflowModel.BookmarkCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateProtocolBookmark(System.String,System.WorkflowModel.BookmarkCallback,System.WorkflowModel.BookmarkOptions)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateProtocolBookmark(System.String,System.WorkflowModel.BookmarkCallback,System.WorkflowModel.SubInstance)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.CreateProtocolBookmark(System.String,System.WorkflowModel.BookmarkCallback,System.WorkflowModel.SubInstance,System.WorkflowModel.BookmarkOptions)"></member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.DataContext"></member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.DefaultSubInstance"></member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.Environment"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.EvaluateExpression``1(System.WorkflowModel.ValueExpression{``0})">
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.ExecutingActivityInstance"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.GetChildren"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.GetExtension``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.MarkCanceled"></member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.Properties"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.RemoveAllBookmarks"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.RemoveNamedBookmark(System.String)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.RemoveProtocolBookmark(System.String)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.RemoveProtocolBookmark(System.String,System.WorkflowModel.SubInstance)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.ScheduleActivity(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.ScheduleActivity(System.WorkflowModel.WorkflowElement,System.WorkflowModel.CompletionCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.ScheduleActivity(System.WorkflowModel.WorkflowElement,System.WorkflowModel.CompletionCallback,System.WorkflowModel.FaultCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.ScheduleActivity(System.WorkflowModel.WorkflowElement,System.WorkflowModel.FaultCallback)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetupAsyncOperationBlock"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetupIsolationBlock(System.WorkflowModel.BookmarkCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetupIsolationBlock(System.WorkflowModel.Handle,System.WorkflowModel.BookmarkCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetupNoPersistenceBlock"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetValue``1(System.WorkflowModel.InOutArgument{``0},``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.SetValue``1(System.WorkflowModel.OutArgument{``0},``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.Track(System.WorkflowModel.Tracking.TrackingRecord)"></member>
    <member name="M:System.WorkflowModel.ActivityExecutionContext.TryEvaluateExpression``1(System.WorkflowModel.ValueExpression{``0},``0@)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.WorkflowModel.ActivityExecutionContext.WorkflowInstanceId"></member>
    <member name="T:System.WorkflowModel.ActivityFaultContext"></member>
    <member name="M:System.WorkflowModel.ActivityFaultContext.HandleFault"></member>
    <member name="T:System.WorkflowModel.ActivityInstance"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.Activity"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.Environment"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.HasCancelBeenRequested"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.Id"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.IsCompleted"></member>
    <member name="P:System.WorkflowModel.ActivityInstance.State"></member>
    <member name="T:System.WorkflowModel.ActivityInstanceState"></member>
    <member name="F:System.WorkflowModel.ActivityInstanceState.Executing">
      <summary />
    </member>
    <member name="F:System.WorkflowModel.ActivityInstanceState.Closed">
      <summary />
    </member>
    <member name="F:System.WorkflowModel.ActivityInstanceState.Canceled">
      <summary />
    </member>
    <member name="F:System.WorkflowModel.ActivityInstanceState.Faulted">
      <summary />
    </member>
    <member name="T:System.WorkflowModel.Argument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data in and out of a workflow.</summary>
    </member>
    <member name="P:System.WorkflowModel.Argument.ArgumentType">
      <summary>When overridden in a derived class, gets the data type for the data bound to this <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <returns>The data type for the data bound to this <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Argument.Bind(System.WorkflowModel.Argument,System.WorkflowModel.RuntimeArgument)">
      <summary>Binds an <see cref="T:System.WorkflowModel.Argument" /> to a <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <param name="binding"></param>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.Argument.Create(System.Type,System.WorkflowModel.ArgumentDirection)">
      <summary>Initializes and returns a new <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Argument" />.</returns>
      <param name="type">The data type of the <see cref="T:System.WorkflowModel.Argument" />.</param>
      <param name="direction">The direction of the data flow through the <see cref="T:System.WorkflowModel.Argument" />.</param>
    </member>
    <member name="P:System.WorkflowModel.Argument.Direction">
      <summary>Gets an <see cref="T:System.WorkflowModel.ArgumentDirection" /> that specifies whether the <see cref="T:System.WorkflowModel.Argument" /> represents the flow of data into an activity, out of an activity, or both into and out of an activity or workflow. </summary>
      <returns>An <see cref="T:System.WorkflowModel.ArgumentDirection" /> that indicates direction of the flow of data through the <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Argument.DynamicParameterName">
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Argument.Expression">
      <summary>Gets or sets a <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the value of the data bound to this <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the value of the data bound to this <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Argument.Get``1(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Gets the value of the data that is bound to this <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <returns>The value of the data that is bound to this <see cref="T:System.WorkflowModel.Argument" /></returns>
      <param name="context"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Argument.GetLocation(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the <see cref="T:System.WorkflowModel.Location" /> for this <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Location" /> of the executing <see cref="T:System.WorkflowModel.Activity" />.</returns>
      <param name="environment"></param>
    </member>
    <member name="F:System.WorkflowModel.Argument.ReturnValueName"></member>
    <member name="M:System.WorkflowModel.Argument.Set``1(System.WorkflowModel.ActivityExecutionContext,``0)">
      <summary>Sets the value of the data that is bound to this <see cref="T:System.WorkflowModel.Argument" />.</summary>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> of the currently executing <see cref="T:System.WorkflowModel.Activity" />.</param>
      <param name="value">The new value for the bound data.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Argument.ShouldSerializeXamlReferenceName">
      <summary>Indicates whether the <see cref="P:System.WorkflowModel.Argument.XamlReferenceName" /> property value for this <see cref="T:System.WorkflowModel.Argument" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Argument.XamlReferenceName" /> property value should be serialized; otherwise false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Argument.XamlReferenceName">
      <summary>Gets or sets a value that identifies this <see cref="T:System.WorkflowModel.Argument" /> for XAML serialization purposes.</summary>
      <returns>A value that identifies this <see cref="T:System.WorkflowModel.Argument" /> for XAML serialization purposes.</returns>
    </member>
    <member name="T:System.WorkflowModel.ArgumentDirection">
      <summary>Specifies the direction of data flow for an <see cref="T:System.WorkflowModel.Argument" />.</summary>
    </member>
    <member name="F:System.WorkflowModel.ArgumentDirection.In">
      <summary>An <see cref="T:System.WorkflowModel.Argument" /> that represents the flow of data into a workflow or activity.</summary>
    </member>
    <member name="F:System.WorkflowModel.ArgumentDirection.Out">
      <summary>An <see cref="T:System.WorkflowModel.Argument" /> that represents the flow of data out of a workflow or activity.</summary>
    </member>
    <member name="F:System.WorkflowModel.ArgumentDirection.InOut">
      <summary>An <see cref="T:System.WorkflowModel.Argument" /> that represents the flow of data into and out of a workflow or activity.</summary>
    </member>
    <member name="T:System.WorkflowModel.ArgumentValueSerializer"></member>
    <member name="M:System.WorkflowModel.ArgumentValueSerializer.#ctor"></member>
    <member name="M:System.WorkflowModel.ArgumentValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.ArgumentValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="T:System.WorkflowModel.AsyncOperationContext"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.AbortInstance(System.Exception)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.BeginCancelOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.BeginCancelOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.BeginCompleteOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.BeginCompleteOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CancelOperation"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CancelOperation(System.WorkflowModel.BookmarkCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CancelOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CompleteOperation"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CompleteOperation(System.WorkflowModel.BookmarkCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.CompleteOperation(System.WorkflowModel.BookmarkCallback,System.Object,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.EndCancelOperation(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.AsyncOperationContext.EndCompleteOperation(System.IAsyncResult)"></member>
    <member name="T:System.WorkflowModel.Bookmark">
      <summary>Represents a point at which a workflow or activity can passively wait to be resumed.</summary>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.BeginResume(System.WorkflowModel.WorkflowInstance,System.Object,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins the process of resuming a workflow from a <see cref="T:System.WorkflowModel.Bookmark" />. </summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.BeginResume(System.WorkflowModel.WorkflowInstance,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins the process of resuming a workflow from a <see cref="T:System.WorkflowModel.Bookmark" />.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.BeginTryResume(System.WorkflowModel.WorkflowInstance,System.Object,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins the process of resuming a workflow from a <see cref="T:System.WorkflowModel.Bookmark" />.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.BeginTryResume(System.WorkflowModel.WorkflowInstance,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins the process of resuming a workflow from a <see cref="T:System.WorkflowModel.Bookmark" />.</summary>
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Close(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Closes the <see cref="T:System.WorkflowModel.Bookmark" /> and removes it from the workflow.</summary>
      <param name="context"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.EndResume(System.IAsyncResult)">
      <summary>Completes the call to <see cref="Overload:System.WorkflowModel.Bookmark.BeginResume" /> and retrieves the results of the resume operation.</summary>
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.EndTryResume(System.IAsyncResult)">
      <summary>Completes the call to <see cref="Overload:System.WorkflowModel.Bookmark.BeginTryResume" /> and returns true if the <see cref="T:System.WorkflowModel.Bookmark" /> resumed; otherwise false.</summary>
      <returns>A <see cref="T:System.Boolean" />.</returns>
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.WorkflowModel.Bookmark" /> objects refer to the same continuation point in a workflow.</summary>
      <returns>true if the <see cref="T:System.WorkflowModel.Bookmark" /> objects are equal; otherwise false.</returns>
      <param name="obj"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Equals(System.WorkflowModel.Bookmark)">
      <summary>Determines whether two <see cref="T:System.WorkflowModel.Bookmark" /> objects refer to the same continuation point in a workflow.</summary>
      <returns>true if the <see cref="T:System.WorkflowModel.Bookmark" /> objects are equal; otherwise false.</returns>
      <param name="other"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.GetHashCode">
      <summary>Returns a unique identifier for this <see cref="T:System.WorkflowModel.Bookmark" /> instance.</summary>
      <returns>An <see cref="T:System.Int32" /> that uniquely identifies this <see cref="T:System.WorkflowModel.Bookmark" /> instance..</returns>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Resume(System.WorkflowModel.ActivityExecutionContext,System.Object)">
      <summary>Resumes a workflow from a bookmark.</summary>
      <param name="context"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Resume(System.WorkflowModel.WorkflowInstance,System.Object)">
      <summary>Resumes a workflow from a bookmark.</summary>
      <param name="instance"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.Resume(System.WorkflowModel.WorkflowInstance,System.Object,System.TimeSpan)">
      <summary>Resumes a workflow from a bookmark.</summary>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.TryResume(System.WorkflowModel.ActivityExecutionContext,System.Object)">
      <summary>Resumes a workflow from a <see cref="T:System.WorkflowModel.Bookmark" /> without raising an exception if the resume fails.</summary>
      <returns>A <see cref="T:System.Boolean" />.</returns>
      <param name="context"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.TryResume(System.WorkflowModel.WorkflowInstance,System.Object)">
      <summary>Resumes a workflow from a <see cref="T:System.WorkflowModel.Bookmark" /> without raising an exception if the resume fails.</summary>
      <returns>A <see cref="T:System.Boolean" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.Bookmark.TryResume(System.WorkflowModel.WorkflowInstance,System.Object,System.TimeSpan)">
      <summary>Resumes a workflow from a <see cref="T:System.WorkflowModel.Bookmark" /> without raising an exception if the resume fails.</summary>
      <returns>A <see cref="T:System.Boolean" />.</returns>
      <param name="instance"></param>
      <param name="value"></param>
      <param name="timeout"></param>
    </member>
    <member name="T:System.WorkflowModel.BookmarkCallback"></member>
    <member name="T:System.WorkflowModel.BookmarkInfo"></member>
    <member name="P:System.WorkflowModel.BookmarkInfo.BookmarkName"></member>
    <member name="P:System.WorkflowModel.BookmarkInfo.OwnerDisplayName"></member>
    <member name="P:System.WorkflowModel.BookmarkInfo.SubInstanceInfo"></member>
    <member name="T:System.WorkflowModel.BookmarkNotFoundException">
      <summary>The exception that is thrown when a workflow is resumed but the <see cref="T:System.WorkflowModel.Bookmark" /> is not found.</summary>
    </member>
    <member name="M:System.WorkflowModel.BookmarkNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.BookmarkNotFoundException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.BookmarkNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Bookmark" /> class using the given <see cref="T: System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:System.WorkflowModel.BookmarkNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.BookmarkNotFoundException" /> class using the given <see cref="T:System.String" />.</summary>
      <param name="message"></param>
    </member>
    <member name="M:System.WorkflowModel.BookmarkNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.BookmarkNotFoundException" /> class using the given <see cref="T:System.String" /> and <see cref="T:System.Exception" />.</summary>
      <param name="message">The <see cref="T:System.WorkflowModel.BookmarkNotFoundException" />.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current <see cref="T:System.WorkflowModel.BookmarkNotFoundException" />.</param>
    </member>
    <member name="T:System.WorkflowModel.BookmarkOptions">
      <summary>Specifies the options for a <see cref="T:System.WorkflowModel.Bookmark" />.</summary>
    </member>
    <member name="F:System.WorkflowModel.BookmarkOptions.None">
      <summary>Default <see cref="T:System.WorkflowModel.Bookmark" /> options,</summary>
    </member>
    <member name="F:System.WorkflowModel.BookmarkOptions.MultipleResume">
      <summary>A <see cref="T:System.WorkflowModel.Bookmark" /> that can be resumed multiple times.</summary>
    </member>
    <member name="F:System.WorkflowModel.BookmarkOptions.NonBlocking">
      <summary>A <see cref="T:System.WorkflowModel.Bookmark" /> that does not block the workflow.</summary>
    </member>
    <member name="T:System.WorkflowModel.CommitOrCompleteTransactionCallback"></member>
    <member name="T:System.WorkflowModel.CompletionCallback"></member>
    <member name="T:System.WorkflowModel.DeclaredEnvironment"></member>
    <member name="M:System.WorkflowModel.DeclaredEnvironment.#ctor"></member>
    <member name="M:System.WorkflowModel.DeclaredEnvironment.Declare(System.WorkflowModel.Variable)"></member>
    <member name="M:System.WorkflowModel.DeclaredEnvironment.GetVariable(System.String)"></member>
    <member name="T:System.WorkflowModel.DynamicActivityAction"></member>
    <member name="M:System.WorkflowModel.DynamicActivityAction.#ctor"></member>
    <member name="P:System.WorkflowModel.DynamicActivityAction.InVariables"></member>
    <member name="P:System.WorkflowModel.DynamicActivityAction.OutVariables"></member>
    <member name="T:System.WorkflowModel.DynamicArgumentDictionary`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.#ctor(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Add(System.String,`0)"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Clear"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Contains(System.Collections.Generic.KeyValuePair{System.String,`0})"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.ContainsKey(System.String)"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)"></member>
    <member name="P:System.WorkflowModel.DynamicArgumentDictionary`1.Count"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.GetEnumerator"></member>
    <member name="P:System.WorkflowModel.DynamicArgumentDictionary`1.IsReadOnly"></member>
    <member name="P:System.WorkflowModel.DynamicArgumentDictionary`1.Item(System.String)"></member>
    <member name="P:System.WorkflowModel.DynamicArgumentDictionary`1.Keys"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Remove(System.Collections.Generic.KeyValuePair{System.String,`0})"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.Remove(System.String)"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:System.WorkflowModel.DynamicArgumentDictionary`1.TryGetValue(System.String,`0@)"></member>
    <member name="P:System.WorkflowModel.DynamicArgumentDictionary`1.Values"></member>
    <member name="T:System.WorkflowModel.ExecutionProperties"></member>
    <member name="M:System.WorkflowModel.ExecutionProperties.Add(System.String,System.Object)"></member>
    <member name="M:System.WorkflowModel.ExecutionProperties.Find(System.String)"></member>
    <member name="M:System.WorkflowModel.ExecutionProperties.GetEnumerator"></member>
    <member name="P:System.WorkflowModel.ExecutionProperties.IsEmpty"></member>
    <member name="M:System.WorkflowModel.ExecutionProperties.Remove(System.String)"></member>
    <member name="M:System.WorkflowModel.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:System.WorkflowModel.ExtensionCollection"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.#ctor"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.#ctor(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.ClearItems"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.Find``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ExtensionCollection.FindAll``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ExtensionCollection.InsertItem(System.Int32,System.Object)"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.RemoveItem(System.Int32)"></member>
    <member name="M:System.WorkflowModel.ExtensionCollection.SetItem(System.Int32,System.Object)"></member>
    <member name="T:System.WorkflowModel.FaultCallback"></member>
    <member name="T:System.WorkflowModel.Handle"></member>
    <member name="M:System.WorkflowModel.Handle.#ctor"></member>
    <member name="P:System.WorkflowModel.Handle.ExecutionPropertyName"></member>
    <member name="M:System.WorkflowModel.Handle.OnInitialize(System.WorkflowModel.HandleInitializationContext)"></member>
    <member name="M:System.WorkflowModel.Handle.OnUninitialize(System.WorkflowModel.HandleInitializationContext)"></member>
    <member name="P:System.WorkflowModel.Handle.Owner"></member>
    <member name="M:System.WorkflowModel.Handle.ThrowIfUninitialized"></member>
    <member name="T:System.WorkflowModel.HandleInitializationContext"></member>
    <member name="M:System.WorkflowModel.HandleInitializationContext.CreateAndInitializeHandle``1">
      <typeparam name="THandle"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.HandleInitializationContext.Dispose"></member>
    <member name="M:System.WorkflowModel.HandleInitializationContext.UninitializeHandle(System.WorkflowModel.Handle)"></member>
    <member name="T:System.WorkflowModel.IActivityExtensionProvider"></member>
    <member name="M:System.WorkflowModel.IActivityExtensionProvider.EnsureExtensions(System.WorkflowModel.IExtensionCollection)"></member>
    <member name="T:System.WorkflowModel.IExecutionProperty"></member>
    <member name="M:System.WorkflowModel.IExecutionProperty.CleanupWorkflowThread"></member>
    <member name="M:System.WorkflowModel.IExecutionProperty.SetupWorkflowThread"></member>
    <member name="T:System.WorkflowModel.IExpressionContainer"></member>
    <member name="P:System.WorkflowModel.IExpressionContainer.Expression"></member>
    <member name="T:System.WorkflowModel.IExtensibleObject"></member>
    <member name="P:System.WorkflowModel.IExtensibleObject.Extensions"></member>
    <member name="T:System.WorkflowModel.IExtension"></member>
    <member name="M:System.WorkflowModel.IExtension.Attach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.IExtension.Detach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="T:System.WorkflowModel.IExtensionCollection"></member>
    <member name="M:System.WorkflowModel.IExtensionCollection.Find``1">
      <returns>Returns <see cref="{0}" />.</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.IExtensionCollection.FindAll``1">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.WorkflowModel.InArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data into an activity.</summary>
    </member>
    <member name="M:System.WorkflowModel.InArgument.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value of the data that is bound to this <see cref="T:System.WorkflowModel.InArgument" />.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the value of the data that is bound to this <see cref="T:System.WorkflowModel.InArgument" />.</returns>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> for the data.</param>
    </member>
    <member name="T:System.WorkflowModel.InArgument`1">
      <summary>Represents a binding terminal that represents the flow of data into an activity.</summary>
      <typeparam name="T">The type of the data for this <see cref="T:System.WorkflowModel.InArgument`1" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given expression.</summary>
      <param name="lambdaExpression"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.InArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InArgument" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.InArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InArgument`1" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.InOutArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.InOutArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.ValueExpression{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(System.WorkflowModel.Variable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgument`1" /> class using the given value.</summary>
      <param name="constValue"></param>
    </member>
    <member name="P:System.WorkflowModel.InArgument`1.Expression">
      <summary>Gets a <see cref="T:System.WorkflowModel.ValueExpression`1" /> that represents the value of this <see cref="T:System.WorkflowModel.InArgument`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.FromExpression(System.WorkflowModel.ValueExpression{`0})">
      <summary>Creates an <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.FromInOutArgument(System.WorkflowModel.InOutArgument)">
      <summary>Creates an <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.FromInOutArgument(System.WorkflowModel.InOutArgument{`0})">
      <summary>Creates an <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.FromValue(`0)">
      <summary>Create an <see cref="T:System.WorkflowModel.InArgument`1" /> from the given value.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> from the given value.</returns>
      <param name="constValue"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.FromVariable(System.WorkflowModel.Variable)">
      <summary>Create an <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.Variable" />.</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.Get(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</returns>
      <param name="context"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.LocationEnvironment" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.LocationEnvironment" />.</returns>
      <param name="environment"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.op_Implicit(System.WorkflowModel.InOutArgument)~System.WorkflowModel.InArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.op_Implicit(System.WorkflowModel.ValueExpression{`0})~System.WorkflowModel.InArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.op_Implicit(System.WorkflowModel.Variable)~System.WorkflowModel.InArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InArgument`1" /> from the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.InArgument`1.op_Implicit(`0)~System.WorkflowModel.InArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InArgument`1" /> from the given value.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
      <param name="constValue"></param>
    </member>
    <member name="T:System.WorkflowModel.InArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.WorkflowModel.InArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.WorkflowModel.InArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InArgumentConverter" /> class.</summary>
      <param name="type">The data type of the associated <see cref="T:System.WorkflowModel.InArgument" />.</param>
    </member>
    <member name="T:System.WorkflowModel.InOutArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data in and out of a workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value of the data that is bound to this <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the value of the data that is bound to this <see cref="T:System.WorkflowModel.InOutArgument" />.</returns>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> for the data.</param>
    </member>
    <member name="T:System.WorkflowModel.InOutArgument`1">
      <summary>Represents a binding terminal that represents the flow of data into and out of an activity.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given expression.</summary>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.#ctor(System.WorkflowModel.InOutArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.#ctor(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</summary>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.#ctor(System.WorkflowModel.Variable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <param name="variable"></param>
    </member>
    <member name="P:System.WorkflowModel.InOutArgument`1.Expression">
      <summary>Gets a <see cref="T:System.WorkflowModel.ValueExpression`1" /> that represents the value of this <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" />.
</returns>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.FromExpression(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <returns>
An <see cref="T:System.WorkflowModel.InOutArgument`1" />.
</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.FromVariable(System.WorkflowModel.Variable{`0})">
      <summary>Creates an <see cref="T:System.WorkflowModel.InOutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>
An <see cref="T:System.WorkflowModel.InOutArgument`1" />.
</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.Get(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> from the given <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.InAOutrgument`1" /> from the given <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</returns>
      <param name="context"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> from the given <see cref="T:System.WorkflowModel.LocationEnvironment" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.InOutArgument`1" /> from the given <see cref="T:System.WorkflowModel.LocationEnvironment" />.</returns>
      <param name="environment"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.GetLocation(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the location of the value for the <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Location`1" />.
</returns>
      <param name="environment"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.op_Implicit(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})~System.WorkflowModel.InOutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InOutArgument`1" /> from the given expression.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InOutArgument`1" />.
</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.op_Implicit(System.WorkflowModel.Variable{`0})~System.WorkflowModel.InOutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.InOutArgument`1" /> from the given variable.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InOutArgument`1" />.
</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.InOutArgument`1.Set(System.WorkflowModel.ActivityExecutionContext,`0)">
      <summary>Sets the value of the argument.</summary>
      <param name="context"></param>
      <param name="value"></param>
    </member>
    <member name="T:System.WorkflowModel.InOutArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.WorkflowModel.InOutArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.WorkflowModel.InOutArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InOutArgumentConverter" /> class.</summary>
      <param name="type">The data type of the associated <see cref="T:System.WorkflowModel.InOutArgument" />.</param>
    </member>
    <member name="T:System.WorkflowModel.InvokeAction">
      <summary>Invokes an activity’s <see cref="T:System.WorkflowModel.ActivityAction" /> handler.</summary>
    </member>
    <member name="M:System.WorkflowModel.InvokeAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InvokeAction" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction.Action">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ActivityAction" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction.ActionArguments">
      <summary>Gets a <see cref="T:System.Collections.Generic.IList`1" /> of arguments passed to the associated <see cref="T:System.WorkflowModel.ActivityAction" />.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IList`1" /> of arguments passed to the associated <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.InvokeAction`1">
      <summary>Invokes an activity’s <see cref="T:System.WorkflowModel.ActivityAction`1" /> handler.</summary>
      <typeparam name="T">The data type of the <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`1" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.InvokeAction`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InvokeAction`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`1.Action">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ActivityAction`1" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction`1" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`1.Argument">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.InvokeAction`2">
      <summary>Invokes an activity’s <see cref="T:System.WorkflowModel.ActivityAction`2" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`2" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`2" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.InvokeAction`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InvokeAction`2" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`2.Action">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ActivityAction`2" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`2" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction`2" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`2" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`2.Argument1">
      <summary>Gets or sets the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`2" />.</summary>
      <returns>The first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`2" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`2.Argument2">
      <summary>Gets or sets the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`2" />.</summary>
      <returns>The second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`2" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.InvokeAction`3">
      <summary>Invokes an activity’s <see cref="T:System.WorkflowModel.ActivityAction`3" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`3" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`3" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`3" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.InvokeAction`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InvokeAction`3" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`3.Action">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ActivityAction`3" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`3" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction`3" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`3" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`3.Argument1">
      <summary>Gets or sets the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</summary>
      <returns>The first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`3.Argument2">
      <summary>Gets or sets the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</summary>
      <returns>The second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`3.Argument3">
      <summary>Gets or sets the third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</summary>
      <returns>The third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`3" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.InvokeAction`4">
      <summary>Invokes an activity’s <see cref="T:System.WorkflowModel.ActivityAction`4" /> handler.</summary>
      <typeparam name="T1">The data type of the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`4" />.</typeparam>
      <typeparam name="T2">The data type of the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`4" />.</typeparam>
      <typeparam name="T3">The data type of the third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`4" />.</typeparam>
      <typeparam name="T4">The data type of the fourth <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the <see cref="T:System.WorkflowModel.ActivityAction`4" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.InvokeAction`4.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.InvokeAction`4" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`4.Action">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ActivityAction`4" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`4" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction`4" /> invoked by this <see cref="T:System.WorkflowModel.InvokeAction`4" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`4.Argument1">
      <summary>Gets or sets the first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</summary>
      <returns>The first <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`4.Argument2">
      <summary>Gets or sets the second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</summary>
      <returns>The second <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`4.Argument3">
      <summary>Gets or sets the third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</summary>
      <returns>The third <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.InvokeAction`4.Argument4">
      <summary>Gets or sets the fourth <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</summary>
      <returns>The fourth <see cref="T:System.WorkflowModel.InArgument`1" /> passed to the associated <see cref="T:System.WorkflowModel.ActivityAction`4" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.InvokeCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.WorkflowModel.WorkflowInvoker.InvokeCompleted" /> event.</summary>
    </member>
    <member name="P:System.WorkflowModel.InvokeCompletedEventArgs.Outputs">
      <summary>Gets a <see cref="T:System.Collections.Generic.IDictionary`2" /> of public arguments and variables from the completed workflow.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IDictionary`2" /> of public arguments and variables from the completed workflow.</returns>
    </member>
    <member name="T:System.WorkflowModel.IPropertyRegistrationCallback"></member>
    <member name="M:System.WorkflowModel.IPropertyRegistrationCallback.Register(System.WorkflowModel.RegistrationContext)"></member>
    <member name="M:System.WorkflowModel.IPropertyRegistrationCallback.Unregister(System.WorkflowModel.RegistrationContext)"></member>
    <member name="T:System.WorkflowModel.IValueSerializableExpression"></member>
    <member name="M:System.WorkflowModel.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="T:System.WorkflowModel.LambdaLocationExpression`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.LambdaLocationExpression`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,`0}})"></member>
    <member name="M:System.WorkflowModel.LambdaLocationExpression`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.LambdaLocationExpression`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="P:System.WorkflowModel.LambdaLocationExpression`1.System#WorkflowModel#IExpressionContainer#Expression"></member>
    <member name="T:System.WorkflowModel.LambdaValueExpression`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.LambdaValueExpression`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,`0}})"></member>
    <member name="M:System.WorkflowModel.LambdaValueExpression`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.LambdaValueExpression`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="P:System.WorkflowModel.LambdaValueExpression`1.System#WorkflowModel#IExpressionContainer#Expression"></member>
    <member name="T:System.WorkflowModel.Literal`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Literal`1.#ctor"></member>
    <member name="M:System.WorkflowModel.Literal`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.Literal`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="P:System.WorkflowModel.Literal`1.System#WorkflowModel#IExpressionContainer#Expression"></member>
    <member name="M:System.WorkflowModel.Literal`1.ToString"></member>
    <member name="P:System.WorkflowModel.Literal`1.Value"></member>
    <member name="T:System.WorkflowModel.Location"></member>
    <member name="M:System.WorkflowModel.Location.#ctor"></member>
    <member name="P:System.WorkflowModel.Location.CanBeMapped"></member>
    <member name="E:System.WorkflowModel.Location.GlobalLocationChanged"></member>
    <member name="M:System.WorkflowModel.Location.GlobalNotifyLocationChanged(System.Object,System.String)"></member>
    <member name="P:System.WorkflowModel.Location.LocationType"></member>
    <member name="P:System.WorkflowModel.Location.Value"></member>
    <member name="P:System.WorkflowModel.Location.ValueCore"></member>
    <member name="T:System.WorkflowModel.Location`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Location`1.#ctor"></member>
    <member name="P:System.WorkflowModel.Location`1.LocationType"></member>
    <member name="P:System.WorkflowModel.Location`1.Value"></member>
    <member name="P:System.WorkflowModel.Location`1.ValueCore"></member>
    <member name="T:System.WorkflowModel.LocationEnvironment"></member>
    <member name="M:System.WorkflowModel.LocationEnvironment.ResolveExternalSymbolValue(System.String)"></member>
    <member name="M:System.WorkflowModel.LocationEnvironment.ResolveExternalSymbolValue``1(System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.WorkflowModel.MethodInvoke"></member>
    <member name="M:System.WorkflowModel.MethodInvoke.#ctor"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.GenericTypeArguments"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.MethodName"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.Parameters"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.Result"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.RunAsynchronously"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.TargetObject"></member>
    <member name="P:System.WorkflowModel.MethodInvoke.TargetType"></member>
    <member name="T:System.WorkflowModel.NameScopeImplementation"></member>
    <member name="M:System.WorkflowModel.NameScopeImplementation.#ctor"></member>
    <member name="M:System.WorkflowModel.NameScopeImplementation.FindName(System.String)"></member>
    <member name="M:System.WorkflowModel.NameScopeImplementation.RegisterName(System.String,System.Object)"></member>
    <member name="M:System.WorkflowModel.NameScopeImplementation.UnregisterName(System.String)"></member>
    <member name="T:System.WorkflowModel.NoPersistHandle"></member>
    <member name="M:System.WorkflowModel.NoPersistHandle.#ctor"></member>
    <member name="M:System.WorkflowModel.NoPersistHandle.Enter(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.NoPersistHandle.Exit(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="T:System.WorkflowModel.OutArgument">
      <summary>The abstract base class that represents a binding terminal that supports the flow of data out of an activity.</summary>
    </member>
    <member name="T:System.WorkflowModel.OutArgument`1">
      <summary>Represents a binding terminal that represents the flow of data out of an activity.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor">
      <summary>Initialize a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given expression.</summary>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.InOutArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.InOutArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.OutArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.OutArgument" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.OutArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.OutArgument`1" />.</summary>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</summary>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.#ctor(System.WorkflowModel.Variable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <param name="variable"></param>
    </member>
    <member name="P:System.WorkflowModel.OutArgument`1.Expression">
      <summary>Gets a <see cref="T:System.WorkflowModel.ValueExpression`1" /> that represents the location bound to this <see cref="T:System.WorkflowModel.OutArgument`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.FromExpression(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.FromInOutArgument(System.WorkflowModel.InOutArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.FromInOutArgument(System.WorkflowModel.InOutArgument{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.FromVariable(System.WorkflowModel.Variable)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgument`1" /> class using the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.GetLocation(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the location of the value for the <see cref="T:System.WorkflowModel.OutArgument`1" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.Location`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.op_Implicit(System.WorkflowModel.InOutArgument)~System.WorkflowModel.OutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.OutArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.op_Implicit(System.WorkflowModel.InOutArgument{`0})~System.WorkflowModel.OutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.OutArgument`1" /> from the given <see cref="T:System.WorkflowModel.InOutArgument`1" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="argument"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.op_Implicit(System.WorkflowModel.ValueExpression{System.WorkflowModel.Location{`0}})~System.WorkflowModel.OutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.OutArgument`1" /> from the given expression.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="expression"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.op_Implicit(System.WorkflowModel.Variable)~System.WorkflowModel.OutArgument{`0}">
      <summary>Initializes a new <see cref="T:System.WorkflowModel.OutArgument`1" /> from the given <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>An <see cref="T:System.WorkflowModel.OutArgument`1" />.</returns>
      <param name="variable"></param>
    </member>
    <member name="M:System.WorkflowModel.OutArgument`1.Set(System.WorkflowModel.ActivityExecutionContext,`0)">
      <summary>Sets the value of the argument.</summary>
      <param name="context"></param>
      <param name="value"></param>
    </member>
    <member name="T:System.WorkflowModel.OutArgumentConverter">
      <summary>Provides a type converter to convert <see cref="T:System.WorkflowModel.OutArgument" /> classes to and from various other representations.</summary>
    </member>
    <member name="M:System.WorkflowModel.OutArgumentConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.OutArgumentConverter" /> class.</summary>
      <param name="type">The data type of the associated <see cref="T:System.WorkflowModel.OutArgument" />.</param>
    </member>
    <member name="T:System.WorkflowModel.PropertyReferenceExtension`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.PropertyReferenceExtension`1.#ctor"></member>
    <member name="P:System.WorkflowModel.PropertyReferenceExtension`1.PropertyName"></member>
    <member name="M:System.WorkflowModel.PropertyReferenceExtension`1.ProvideValue(System.IServiceProvider)"></member>
    <member name="T:System.WorkflowModel.RegistrationContext"></member>
    <member name="M:System.WorkflowModel.RegistrationContext.FindProperty(System.String)"></member>
    <member name="T:System.WorkflowModel.ResumeBookmark">
      <summary>An activity used to resume unnamed bookmarks within the same workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.ResumeBookmark.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ResumeBookmark" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.ResumeBookmark.Bookmark">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel. Bookmark" /> to be resumed by this activity.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel. Bookmark" /> to be resumed by this activity.</returns>
    </member>
    <member name="P:System.WorkflowModel.ResumeBookmark.Value">
      <summary>Gets or sets the value that is passed to this activity’s <see cref="T:System.WorkflowModel. Bookmark" /> when it is resumed.</summary>
      <returns>An <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the value that is passed to this activity’s <see cref="T:System.WorkflowModel. Bookmark" /> when it is resumed.</returns>
    </member>
    <member name="T:System.WorkflowModel.RuntimeArgument">
      <summary>Describes the characteristics of an argument of an activity to the runtime.</summary>
    </member>
    <member name="M:System.WorkflowModel.RuntimeArgument.#ctor(System.String,System.Type,System.WorkflowModel.ArgumentDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.RuntimeArgument" /> class with a name, data type, and argument direction.</summary>
      <param name="name">The name of the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</param>
      <param name="argumentType">The data type of the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</param>
      <param name="direction">The argument direction.</param>
    </member>
    <member name="M:System.WorkflowModel.RuntimeArgument.#ctor(System.String,System.Type,System.WorkflowModel.ArgumentDirection,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.RuntimeArgument" /> class with a name, data type, argument direction, and a value that indicates whether the <see cref="T:System.WorkflowModel.RuntimeArgument" /> is required to be bound to a value.</summary>
      <param name="name">The name of the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</param>
      <param name="argumentType">The data type of the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</param>
      <param name="direction">The argument direction.</param>
      <param name="isRequired">A value that indicates whether the <see cref="T:System.WorkflowModel.RuntimeArgument" /> is required to be bound to a value</param>
    </member>
    <member name="P:System.WorkflowModel.RuntimeArgument.Direction">
      <summary>Gets the direction of the data flow through this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <returns>The direction of the data flow through this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.RuntimeArgument.Get``1(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Returns the value of the data bound to the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <returns>The value of the data bound to the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</returns>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> associated with the activity that contains the value.</param>
      <typeparam name="T">The data type of the value to return.</typeparam>
    </member>
    <member name="P:System.WorkflowModel.RuntimeArgument.IsRequired">
      <summary>Gets a value that indicates whether the <see cref="T:System.WorkflowModel.RuntimeArgument" /> is required to be bound to a value.</summary>
      <returns>true if the <see cref="T:System.WorkflowModel.RuntimeArgument" /> is required to be bound to a value; otherwise false.</returns>
    </member>
    <member name="P:System.WorkflowModel.RuntimeArgument.Name">
      <summary>Gets the name of this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <returns>The name of this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.RuntimeArgument.Set``1(System.WorkflowModel.ActivityExecutionContext,``0)">
      <summary>Sets the value of the data bound to the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> associated with the activity that contains the value.</param>
      <param name="value">The new value for the data bound to the <see cref="T:System.WorkflowModel.RuntimeArgument" />.</param>
      <typeparam name="T">The data type of the value to return.</typeparam>
    </member>
    <member name="P:System.WorkflowModel.RuntimeArgument.Type">
      <summary>Gets the data type of this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</summary>
      <returns>The data type of this <see cref="T:System.WorkflowModel.RuntimeArgument" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.SubInstance">
      <summary>Represents a group of related bookmarks under a common identifier and allows the runtime to make decisions about whether a particular bookmark resumption is valid or may become valid.</summary>
    </member>
    <member name="M:System.WorkflowModel.SubInstance.Equals(System.WorkflowModel.SubInstance)">
      <summary>Returns a value that indicates whether the specified object is equal to the <see cref="T:System.WorkflowModel.SubInstance" />.</summary>
      <returns>true if the specified object is equal to this <see cref="T:System.WorkflowModel.SubInstance" />; otherwise false.</returns>
      <param name="other">The object to compare.</param>
    </member>
    <member name="M:System.WorkflowModel.SubInstance.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.WorkflowModel.SubInstance" />.</summary>
      <returns>The hash code for this <see cref="T:System.WorkflowModel.SubInstance" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.SubInstance.Id">
      <summary>Gets the unique identifier for this <see cref="T:System.WorkflowModel.SubInstance" />.</summary>
      <returns>The unique identifier for this <see cref="T:System.WorkflowModel.SubInstance" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.SubInstance.Initialize(System.WorkflowModel.ActivityExecutionContext,System.Guid)">
      <summary>Initializes the <see cref="T:System.WorkflowModel.SubInstance" /> to the specified <see cref="T:System.Guid" />.</summary>
      <param name="context">The current <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</param>
      <param name="id">The unique identifier for the <see cref="T:System.WorkflowModel.SubInstance" />.</param>
    </member>
    <member name="P:System.WorkflowModel.SubInstance.IsInitialized">
      <summary>Gets a value that indicates whether the <see cref="T:System.WorkflowModel.SubInstance" /> has been initialized.</summary>
      <returns>true if the <see cref="T:System.WorkflowModel.SubInstance" /> is initialized; otherwise false.</returns>
    </member>
    <member name="T:System.WorkflowModel.SubInstanceHandle"></member>
    <member name="M:System.WorkflowModel.SubInstanceHandle.#ctor"></member>
    <member name="M:System.WorkflowModel.SubInstanceHandle.Initialize(System.WorkflowModel.ActivityExecutionContext,System.Guid)"></member>
    <member name="M:System.WorkflowModel.SubInstanceHandle.OnInitialize(System.WorkflowModel.HandleInitializationContext)"></member>
    <member name="M:System.WorkflowModel.SubInstanceHandle.OnUninitialize(System.WorkflowModel.HandleInitializationContext)"></member>
    <member name="T:System.WorkflowModel.SubInstanceInfo"></member>
    <member name="P:System.WorkflowModel.SubInstanceInfo.Id"></member>
    <member name="P:System.WorkflowModel.SubInstanceInfo.IsInitialized"></member>
    <member name="P:System.WorkflowModel.SubInstanceInfo.TemporaryId"></member>
    <member name="T:System.WorkflowModel.SymbolResolver"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.#ctor"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Add(System.String,System.Object)"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.AsNameScope"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Attach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Clear"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.ContainsKey(System.String)"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)"></member>
    <member name="P:System.WorkflowModel.SymbolResolver.Count"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Detach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.GetEnumerator"></member>
    <member name="P:System.WorkflowModel.SymbolResolver.IsReadOnly"></member>
    <member name="P:System.WorkflowModel.SymbolResolver.Item(System.String)"></member>
    <member name="P:System.WorkflowModel.SymbolResolver.Keys"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.Remove(System.String)"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:System.WorkflowModel.SymbolResolver.TryGetValue(System.String,System.Object@)"></member>
    <member name="P:System.WorkflowModel.SymbolResolver.Values"></member>
    <member name="T:System.WorkflowModel.TransactionHandle"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.#ctor"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.CreateTransactionAndEnlistWorkflow(System.WorkflowModel.ActivityExecutionContext,System.Transactions.IsolationLevel,System.TimeSpan)"></member>
    <member name="P:System.WorkflowModel.TransactionHandle.CurrentTransaction"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.IsWorkflowEnlisted(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.SetTransaction(System.WorkflowModel.ActivityExecutionContext,System.Transactions.Transaction,System.Boolean,System.WorkflowModel.CommitOrCompleteTransactionCallback)"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.SetTransaction(System.WorkflowModel.ActivityExecutionContext,System.Transactions.Transaction,System.WorkflowModel.CommitOrCompleteTransactionCallback)"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.System#WorkflowModel#IExecutionProperty#CleanupWorkflowThread"></member>
    <member name="M:System.WorkflowModel.TransactionHandle.System#WorkflowModel#IExecutionProperty#SetupWorkflowThread"></member>
    <member name="T:System.WorkflowModel.TypeConverterBase"></member>
    <member name="M:System.WorkflowModel.TypeConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"></member>
    <member name="M:System.WorkflowModel.TypeConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"></member>
    <member name="M:System.WorkflowModel.TypeConverterBase.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"></member>
    <member name="M:System.WorkflowModel.TypeConverterBase.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"></member>
    <member name="T:System.WorkflowModel.ValidationException">
      <summary>The exception that is thrown when a workflow or activity is in an invalid state.</summary>
    </member>
    <member name="M:System.WorkflowModel.ValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ValidationException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ValidationException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.ValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ValidationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.ValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ValidationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.ValueExpression">
      <summary>An expression that evaluates to a single value.</summary>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression.Create``1(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,``0}})">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.ValueExpression" /> class using the passed Linq expression.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" />.</returns>
      <param name="expression"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression.Create``1(System.WorkflowModel.Variable{``0})">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.ValueExpression`1" /> class using the passed <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" /> that evaluates to the passed <see cref="T:System.WorkflowModel.Variable`1" />.</returns>
      <param name="variable"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression.CreateLiteral``1(``0)">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.ValueExpression`1" /> class that evaluates to the passed literal value.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" /> that evaluates to the passed literal value.</returns>
      <param name="value"></param>
      <typeparam name="TLiteral"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression.CreateLocationExpression``1(System.Linq.Expressions.Expression{System.Func{System.WorkflowModel.LocationEnvironment,``0}})">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.ValueExpression`1" /> class using the given Linq expression.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" /> that evaluates to the passed Linq expression.</returns>
      <param name="expression"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression.CreateLocationExpression``1(System.WorkflowModel.Variable{``0})">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.ValueExpression`1" /> class using the given <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" /> that evaluates to the given <see cref="T:System.WorkflowModel.Variable`1" />.</returns>
      <param name="variable"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.WorkflowModel.ValueExpression.ExpressionType">
      <summary>Gets the <see cref="T:System.Type" /> to which the <see cref="T:System.WorkflowModel.ValueExpression" /> evaluates.</summary>
      <returns>The <see cref="T:System.Type" /> to which the <see cref="T:System.WorkflowModel.ValueExpression" /> evaluates.</returns>
    </member>
    <member name="P:System.WorkflowModel.ValueExpression.Result">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.OutArgument" /> by referencing the abstract <see cref="P:System.WorkflowModel.ValueExpression.ResultCore" /> property that represents the result of the evaluation of the <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.OutArgument" /> that represents the result of the evaluation of the <see cref="T:System.WorkflowModel.ValueExpression" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.ValueExpression.ResultCore">
      <summary>When overridden in a derived class, gets or sets the <see cref="T:System.WorkflowModel.OutArgument" /> that represents the result of the evaluation of the <see cref="T:System.WorkflowModel.ValueExpression" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.OutArgument" /> that represents the result of the evaluation of the <see cref="T:System.WorkflowModel.ValueExpression" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.ValueExpression`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.ValueExpression`1.#ctor"></member>
    <member name="P:System.WorkflowModel.ValueExpression`1.ExpressionType"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.FromValue(`0)"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.FromVariable(System.WorkflowModel.Variable)"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.FromVariable(System.WorkflowModel.Variable{`0})"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.op_Implicit(System.WorkflowModel.Variable)~System.WorkflowModel.ValueExpression{`0}"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.op_Implicit(System.WorkflowModel.Variable{`0})~System.WorkflowModel.ValueExpression{`0}"></member>
    <member name="M:System.WorkflowModel.ValueExpression`1.op_Implicit(`0)~System.WorkflowModel.ValueExpression{`0}"></member>
    <member name="P:System.WorkflowModel.ValueExpression`1.Result"></member>
    <member name="P:System.WorkflowModel.ValueExpression`1.ResultCore"></member>
    <member name="T:System.WorkflowModel.ValueExpressionConverter"></member>
    <member name="M:System.WorkflowModel.ValueExpressionConverter.#ctor(System.Type)"></member>
    <member name="M:System.WorkflowModel.ValueExpressionConverter.CompileExpression(System.String,System.ComponentModel.ITypeDescriptorContext,System.Type,System.Boolean)"></member>
    <member name="M:System.WorkflowModel.ValueExpressionConverter.RegisterCompileReadyExpressionHandler(System.Func{System.WorkflowModel.ValueExpression,System.Type,System.String,System.WorkflowModel.ValueExpression})"></member>
    <member name="M:System.WorkflowModel.ValueExpressionConverter.RegisterInvalidExpressionHandler(System.Func{System.WorkflowModel.ExpressionParser.SourceExpressionException,System.Type,System.String,System.ComponentModel.ITypeDescriptorContext,System.WorkflowModel.ValueExpression})"></member>
    <member name="T:System.WorkflowModel.ValueExpressionValueSerializer"></member>
    <member name="M:System.WorkflowModel.ValueExpressionValueSerializer.#ctor"></member>
    <member name="M:System.WorkflowModel.ValueExpressionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.ValueExpressionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.ValueExpressionValueSerializer.GetService``1(System.ComponentModel.ITypeDescriptorContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.WorkflowModel.Variable">
      <summary>The abstract base class from which the workflow data member support class <see cref="T:System.WorkflowModel.Variable`1" /> derives.</summary>
    </member>
    <member name="M:System.WorkflowModel.Variable.Create(System.String,System.Type,System.WorkflowModel.VariableModifiers)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Variable" /> class with the given parameters.</summary>
      <returns>A <see cref="T:System.WorkflowModel.Variable" />.</returns>
      <param name="name">The name for the <see cref="T:System.WorkflowModel.Variable" />.</param>
      <param name="type">The <see cref="T:System.Type" /> for the <see cref="T:System.WorkflowModel.Variable" />.</param>
      <param name="modifiers">The configuration options for the <see cref="T:System.WorkflowModel.Variable" />.</param>
    </member>
    <member name="P:System.WorkflowModel.Variable.Default">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the default value for this <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the default value for this <see cref="T:System.WorkflowModel.Variable" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Variable.Get(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Gets the value for the <see cref="T:System.WorkflowModel.Variable" /> using the passed <see cref="T:System.WorkflowModel.ActivityExecutionContext" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.Variable" />.</returns>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> under which the activity is executing.</param>
    </member>
    <member name="M:System.WorkflowModel.Variable.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value for the <see cref="T:System.WorkflowModel.Variable" /> using the passed <see cref="T:System.WorkflowModel.LocationEnvironment" />.</summary>
      <returns>The value of the <see cref="T:System.WorkflowModel.Variable" />.
</returns>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> of the executing activity.</param>
    </member>
    <member name="M:System.WorkflowModel.Variable.GetLocation(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the <see cref="T:System.WorkflowModel.Location" /> for this <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Location" /> for this <see cref="T:System.WorkflowModel.Variable" />.</returns>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> of the executing activity.</param>
    </member>
    <member name="P:System.WorkflowModel.Variable.Modifiers">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.VariableModifiers" /> value for this <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.VariableModifiers" /> value for this <see cref="T:System.WorkflowModel.Variable" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Variable.Name">
      <summary>Gets or sets the name of the <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>The name of the <see cref="T:System.WorkflowModel.Variable" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Variable.Set(System.WorkflowModel.ActivityExecutionContext,System.Object)">
      <summary>Sets the value of the <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> under which the activity is executing.</param>
      <param name="value">The value for the <see cref="T:System.WorkflowModel.Variable" />.</param>
    </member>
    <member name="P:System.WorkflowModel.Variable.VariableType">
      <summary>When overridden in a derived class, gets the data type for this <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <returns>The data type for this <see cref="T:System.WorkflowModel.Variable" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Variable`1">
      <summary>Represents a variable in a workflow.</summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:System.WorkflowModel.Variable`1" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.Variable`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Variable`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Variable`1.Default">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the default value for this <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ValueExpression" /> that represents the default value for this <see cref="T:System.WorkflowModel.Variable`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Variable`1.Get(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.Variable`1" /> using the passed <see cref="M:System.WorkflowModel.Variable.Get(System.WorkflowModel.ActivityExecutionContext)" />.</summary>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> under which the activity is executing.</param>
    </member>
    <member name="M:System.WorkflowModel.Variable`1.Get(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the value of the <see cref="T:System.WorkflowModel.Variable`1" /> using the passed <see cref="T:System.WorkflowModel.LocationEnvironment" /></summary>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> of the executing activity.</param>
    </member>
    <member name="M:System.WorkflowModel.Variable`1.GetLocation(System.WorkflowModel.LocationEnvironment)">
      <summary>Gets the <see cref="T:System.WorkflowModel.Location" /> for this <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Location" /> for this <see cref="T:System.WorkflowModel.Variable`1" />.</returns>
      <param name="environment">The <see cref="T:System.WorkflowModel.LocationEnvironment" /> of the executing activity.</param>
    </member>
    <member name="M:System.WorkflowModel.Variable`1.Set(System.WorkflowModel.ActivityExecutionContext,`0)">
      <summary>Sets the value of the <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <param name="context">The <see cref="T:System.WorkflowModel.ActivityExecutionContext" /> under which the activity is executing.</param>
      <param name="value">The value for the <see cref="T:System.WorkflowModel.Variable`1" />.</param>
    </member>
    <member name="P:System.WorkflowModel.Variable`1.VariableType">
      <summary>Gets the <see cref="T:System.Type" /> of the value for this <see cref="T:System.WorkflowModel.Variable`1" />.</summary>
      <returns>The type of variable.</returns>
    </member>
    <member name="T:System.WorkflowModel.VariableModifiers">
      <summary>Specifies the way the workflow runtime treats <see cref="T:System.WorkflowModel.Variable" /> objects.</summary>
    </member>
    <member name="F:System.WorkflowModel.VariableModifiers.None">
      <summary>No modifiers are specified for the <see cref="T:System.WorkflowModel.Variable" />.</summary>
    </member>
    <member name="F:System.WorkflowModel.VariableModifiers.ReadOnly">
      <summary>The value for the <see cref="T:System.WorkflowModel.Variable" /> cannot be changed.</summary>
    </member>
    <member name="F:System.WorkflowModel.VariableModifiers.Mapped">
      <summary>The <see cref="T:System.WorkflowModel.Variable" /> is mapped for persistence.</summary>
    </member>
    <member name="F:System.WorkflowModel.VariableModifiers.Tracked">
      <summary>The <see cref="T:System.WorkflowModel.Variable" /> is passed to tracking participants.</summary>
    </member>
    <member name="T:System.WorkflowModel.VariableReference`1">
      <summary>Represents a reference to a <see cref="T:System.WorkflowModel.Variable" />.</summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:System.WorkflowModel.VariableReference`1" />.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.VariableReference`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.VariableReference`1" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.VariableReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.VariableReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="P:System.WorkflowModel.VariableReference`1.System#WorkflowModel#IExpressionContainer#Expression">
      <summary>Initializes a new instance of an <see cref="T:System.Linq.Expressions.Expression" /> based on the current <see cref="T:System.WorkflowModel.VariableReference`1" />.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> based on the current <see cref="T:System.WorkflowModel.VariableReference`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.VariableReference`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.VariableReference`1" /> object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.VariableReference`1" /> object.</returns>
    </member>
    <member name="P:System.WorkflowModel.VariableReference`1.Variable">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.Variable" /> for this <see cref="T:System.WorkflowModel.VariableReference`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Variable" /> for this <see cref="T:System.WorkflowModel.VariableReference`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.VariableValue`1">
      <summary>Represents an expression that indicates the value of a variable.</summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the expression’s evaluation.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.VariableValue`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.VariableValue`1" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.VariableValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="M:System.WorkflowModel.VariableValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)"></member>
    <member name="P:System.WorkflowModel.VariableValue`1.System#WorkflowModel#IExpressionContainer#Expression">
      <summary>Initializes a new instance of an <see cref="T:System.Linq.Expressions.Expression" /> based on the current <see cref="T:System.WorkflowModel.VariableValue`1" />.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> based on the current <see cref="T:System.WorkflowModel.VariableValue`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.VariableValue`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.VariableValue`1" /> object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.VariableValue`1" /> object.</returns>
    </member>
    <member name="P:System.WorkflowModel.VariableValue`1.Variable">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.Variable" /> for this <see cref="T:System.WorkflowModel.VariableValue`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Variable" /> for this <see cref="T:System.WorkflowModel.VariableValue`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.WorkflowAbortedEventArgs">
      <summary>Provides data for the <see cref="E:System.WorkflowModel.WorkflowInstance.Aborted" /> event.</summary>
    </member>
    <member name="P:System.WorkflowModel.WorkflowAbortedEventArgs.Reason">
      <summary>Gets the <see cref="T:System.Exception" /> that caused the workflow to abort.</summary>
      <returns>The <see cref="T:System.Exception" /> that caused the workflow to abort.</returns>
    </member>
    <member name="T:System.WorkflowModel.WorkflowAbortedException">
      <summary>The exception that is thrown when an operation is invoked on an aborted workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowAbortedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowAbortedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowClosedException">
      <summary>The exception that is thrown when an operation is invoked on a closed workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowClosedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowClosedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.WorkflowModel.WorkflowInstance.Completed" /> event.</summary>
    </member>
    <member name="P:System.WorkflowModel.WorkflowCompletedEventArgs.CompletionState">
      <summary>Gets the <see cref="T:System.WorkflowModel.ActivityInstanceState" /> for the <see cref="T:System.WorkflowModel.WorkflowInstance" /> for which the <see cref="E:System.WorkflowModel.WorkflowInstance.Completed" /> event is raised.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityInstanceState" /> for the <see cref="T:System.WorkflowModel.WorkflowInstance" /> for which the <see cref="E:System.WorkflowModel.WorkflowInstance.Completed" /> event is raised.</returns>
    </member>
    <member name="P:System.WorkflowModel.WorkflowCompletedEventArgs.Outputs">
      <summary>Gets a <see cref="T:System.Collections.Generic.IDictionary`2" /> that contains public arguments and variables for the completed workflow.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IDictionary`2" /> that contains public arguments and variables for the completed workflow.</returns>
    </member>
    <member name="P:System.WorkflowModel.WorkflowCompletedEventArgs.TerminationException">
      <summary>Gets the <see cref="T:System.Exception" /> that caused the termination of the workflow if it did not completed successfully.</summary>
      <returns>The exception that caused the termination of the workflow if it did not completed successfully.</returns>
    </member>
    <member name="T:System.WorkflowModel.WorkflowCompletedException">
      <summary>The exception that is thrown when an operation is invoked on a completed workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowCompletedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowCompletedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowDataContext"></member>
    <member name="M:System.WorkflowModel.WorkflowDataContext.Dispose"></member>
    <member name="M:System.WorkflowModel.WorkflowDataContext.GetProperties"></member>
    <member name="E:System.WorkflowModel.WorkflowDataContext.PropertyChanged"></member>
    <member name="T:System.WorkflowModel.WorkflowElement"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.#ctor"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.Abort(System.WorkflowModel.ActivityAbortContext)">
      <param name="context"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.Cancel(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.Data"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DisplayName"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.Execute(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.GetActions"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.GetArguments"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.GetChildren"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.GetConstraints"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.GetEnvironmentVariables"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.Id"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.IsOpen"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnGetActions(System.Collections.Generic.IList{System.WorkflowModel.ActivityAction})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnGetArguments(System.Collections.Generic.IList{System.WorkflowModel.RuntimeArgument})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})">
      <param name="children"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnGetConstraints(System.Collections.Generic.IList{System.WorkflowModel.Validation.Constraint})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnGetEnvironmentVariables(System.Collections.Generic.IList{System.WorkflowModel.Variable})">
      <param name="variables"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.OnOpen(System.WorkflowModel.DeclaredEnvironment)">
      <param name="environment"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.ShouldSerializeDisplayName"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.ThrowIfOpen"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.ToString"></member>
    <member name="T:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1.#ctor(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1.ClearItems"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1.InsertItem(System.Int32,`0)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1.RemoveItem(System.Int32)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareCollection`1.SetItem(System.Int32,`0)"></member>
    <member name="T:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2">
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.#ctor(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Add(`0,`1)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Clear"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.ContainsKey(`0)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Count"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.GetEnumerator"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.IsReadOnly"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Item(`0)"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Keys"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Remove(`0)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.TryGetValue(`0,`1@)"></member>
    <member name="P:System.WorkflowModel.WorkflowElement.DesignTimeAwareDictionary`2.Values"></member>
    <member name="T:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2">
      <typeparam name="TKey"></typeparam>
      <typeparam name="TItem"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2.#ctor(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2.ClearItems"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2.InsertItem(System.Int32,`1)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2.RemoveItem(System.Int32)"></member>
    <member name="M:System.WorkflowModel.WorkflowElement.DesignTimeAwareKeyedCollection`2.SetItem(System.Int32,`1)"></member>
    <member name="T:System.WorkflowModel.WorkflowInstance"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Abort"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Abort(System.String)">
      <param name="reason"></param>
    </member>
    <member name="E:System.WorkflowModel.WorkflowInstance.Aborted"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginCancel(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginClose(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginLoad(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginLoad(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.Threading.SynchronizationContext,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="syncContext"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginLoad(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginLoad(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.TimeSpan,System.Threading.SynchronizationContext,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="timeout"></param>
      <param name="syncContext"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPause(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPause(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPersist(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPersist(System.Boolean,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="unlock"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPersist(System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="unlock"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResume(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResume(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeProtocolBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeProtocolBookmark(System.String,System.Object,System.Guid,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="subInstanceId"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeProtocolBookmark(System.String,System.Object,System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="subInstanceId"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginResumeProtocolBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="name"></param>
      <param name="value"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="reason"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="reason"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="reason"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="reason"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryPersist(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryPersist(System.Boolean,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="unlock"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryPersist(System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="unlock"></param>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryUnload(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginTryUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginUnload(System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
      <returns>Returns <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout"></param>
      <param name="callback"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Cancel"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Cancel(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Close"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Close(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="E:System.WorkflowModel.WorkflowInstance.Completed"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="parameters"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.SynchronizationContext)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="parameters"></param>
      <param name="syncContext"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement,System.Guid)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="instanceId"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement,System.Guid,System.Threading.SynchronizationContext)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="instanceId"></param>
      <param name="syncContext"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Create(System.WorkflowModel.WorkflowElement,System.Threading.SynchronizationContext)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="syncContext"></param>
    </member>
    <member name="P:System.WorkflowModel.WorkflowInstance.Definition">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowElement" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndCancel(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndClose(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndLoad(System.IAsyncResult)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndPause(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndPersist(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndResume(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndResumeBookmark(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndResumeProtocolBookmark(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndTerminate(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndTryPersist(System.IAsyncResult)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndTryUnload(System.IAsyncResult)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="result"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.EndUnload(System.IAsyncResult)">
      <param name="result"></param>
    </member>
    <member name="P:System.WorkflowModel.WorkflowInstance.Extensions"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.GetAllBookmarks">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.GetAllBookmarks(System.TimeSpan)">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.GetProtocolBookmarks(System.Guid)">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
      <param name="subInstanceId"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.GetProtocolBookmarks(System.Guid,System.TimeSpan)">
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
      <param name="subInstanceId"></param>
      <param name="timeout"></param>
    </member>
    <member name="P:System.WorkflowModel.WorkflowInstance.Id"></member>
    <member name="E:System.WorkflowModel.WorkflowInstance.Idle"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Load(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Load(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.Threading.SynchronizationContext)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="syncContext"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Load(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.TimeSpan)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Load(System.WorkflowModel.WorkflowElement,System.ServiceModel.Persistence.PersistenceProvider,System.TimeSpan,System.Threading.SynchronizationContext)">
      <returns>Returns <see cref="T:System.WorkflowModel.WorkflowInstance" />.</returns>
      <param name="activity"></param>
      <param name="persistenceProvider"></param>
      <param name="timeout"></param>
      <param name="syncContext"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Pause"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Pause(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Persist"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Persist(System.Boolean)">
      <param name="unlock"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Persist(System.Boolean,System.TimeSpan)">
      <param name="unlock"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Persist(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Resume"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Resume(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeBookmark(System.String,System.Object)">
      <param name="name"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
      <param name="name"></param>
      <param name="value"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeProtocolBookmark(System.String,System.Object)">
      <param name="name"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeProtocolBookmark(System.String,System.Object,System.Guid)">
      <param name="name"></param>
      <param name="value"></param>
      <param name="subInstanceId"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeProtocolBookmark(System.String,System.Object,System.Guid,System.TimeSpan)">
      <param name="name"></param>
      <param name="value"></param>
      <param name="subInstanceId"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.ResumeProtocolBookmark(System.String,System.Object,System.TimeSpan)">
      <param name="name"></param>
      <param name="value"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Terminate(System.Exception)">
      <param name="reason"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Terminate(System.Exception,System.TimeSpan)">
      <param name="reason"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Terminate(System.String)">
      <param name="reason"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Terminate(System.String,System.TimeSpan)">
      <param name="reason"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryPersist">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryPersist(System.Boolean)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="unlock"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryPersist(System.Boolean,System.TimeSpan)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="unlock"></param>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryPersist(System.TimeSpan)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="timeout"></param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryUnload">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstance.TryUnload(System.TimeSpan)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="timeout"></param>
    </member>
    <member name="E:System.WorkflowModel.WorkflowInstance.UnhandledException"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Unload"></member>
    <member name="M:System.WorkflowModel.WorkflowInstance.Unload(System.TimeSpan)">
      <param name="timeout"></param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowInstanceException">
      <summary>The base class for exceptions that are thrown when an operation is invoked on a <see cref="T:System.WorkflowModel.WorkflowInstance" /> when it is in a state for which the operation is not valid. </summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowInstanceException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowInstanceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the unique identifier of the workflow instance associated with this exception. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.WorkflowModel.WorkflowInstanceException.InstanceId">
      <summary>Gets the unique identifier of the workflow instance that raised the exception.</summary>
      <returns>The unique identifier of the workflow instance that raised the exception.</returns>
    </member>
    <member name="T:System.WorkflowModel.WorkflowInstanceInfo"></member>
    <member name="P:System.WorkflowModel.WorkflowInstanceInfo.ActiveBookmarks"></member>
    <member name="P:System.WorkflowModel.WorkflowInstanceInfo.CompletionException"></member>
    <member name="P:System.WorkflowModel.WorkflowInstanceInfo.IsIdle"></member>
    <member name="P:System.WorkflowModel.WorkflowInstanceInfo.State"></member>
    <member name="T:System.WorkflowModel.WorkflowInvoker"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.#ctor(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.CancelAsync(System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.EndInvoke(System.IAsyncResult)"></member>
    <member name="P:System.WorkflowModel.WorkflowInvoker.Extensions"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.WorkflowModel.WorkflowElement)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.WorkflowModel.WorkflowElement,System.Collections.Generic.IDictionary{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.WorkflowModel.WorkflowElement,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.Invoke(System.WorkflowModel.WorkflowElement,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.Object)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)"></member>
    <member name="E:System.WorkflowModel.WorkflowInvoker.InvokeCompleted"></member>
    <member name="T:System.WorkflowModel.WorkflowTerminatedException">
      <summary>The exception that is thrown when an operation is invoked on a terminated workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowTerminatedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowTerminatedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs">
      <summary>Provides data for the <see cref="P:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs.UnhandledException" /> event.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs" /> class.</summary>
      <param name="exception">The <see cref="T:System.Exception" /> that was unhandled by the workflow.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs.HandleException">
      <summary>Marks the exception as handled.</summary>
    </member>
    <member name="P:System.WorkflowModel.WorkflowUnhandledExceptionEventArgs.UnhandledException">
      <summary>Gets the unhandled <see cref="T:System.Exception" /> that was raised by the workflow.</summary>
      <returns>The unhandled <see cref="T:System.Exception" /> that was raised by the workflow.</returns>
    </member>
    <member name="T:System.WorkflowModel.WorkflowUnloadedException">
      <summary>The exception that is thrown when an operation is invoked on an unloaded workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnloadedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnloadedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.WorkflowUnlockedException">
      <summary>The exception that is thrown when an operation is invoked on an unlocked workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class using default values.</summary>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class with a specified error message and the unique identifier of the workflow instance.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
    </member>
    <member name="M:System.WorkflowModel.WorkflowUnlockedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.WorkflowUnlockedException" /> class with a specified error message, the unique identifier of the workflow instance, and the error message that explains the reason for the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="instanceId">The unique identifier of the workflow instance.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.WorkflowModel.Activities.CompensableActivity">
      <summary>An activity that supports compensation of its child activities.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.CompensableActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.CompensableActivity" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensableActivity.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.CompensableActivity" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.CompensableActivity" /> executes.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensableActivity.Compensation">
      <summary>Gets or sets the activity that is scheduled when compensation is performed on the <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
      <returns>The activity that is scheduled when compensation is performed on the <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensableActivity.CompensationHandle">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensableActivity.Confirmation">
      <summary>Gets or sets the activity that is scheduled when confirmation is performed for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
      <returns>The activity that is scheduled when confirmation is performed for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.CompensableActivity.System#WorkflowModel#IActivityExtensionProvider#EnsureExtensions(System.WorkflowModel.IExtensionCollection)">
      <summary>Called by the workflow runtime to ensure that the extensions collection has a <see cref="T:System.WorkflowModel.Activities.CompensationExtension" /> instance registered.</summary>
      <param name="extensions">An IExtensionCollection of extensions.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensableActivity.Variables">
      <summary>Gets the collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
      <returns>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Compensate">
      <summary>An activity used to explicitly invoke the compensation handler of a <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Compensate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Compensate" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Compensate.ShouldSerializeTarget">
      <summary>Indicates whether the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this Compensate activity should be serialized.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.Compensate.Target" /> property value should be serialized; otherwise false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Compensate.Target">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.Compensate" /> activity.</summary>
      <returns>
A <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.Compensate" />.
</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.CompensationContext"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationContext.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.CompensationContext.CompensationId"></member>
    <member name="F:System.WorkflowModel.Activities.CompensationContext.MessagePropertyName"></member>
    <member name="T:System.WorkflowModel.Activities.CompensationException"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationException.#ctor"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationException.#ctor(System.String)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationException.#ctor(System.String,System.Exception)"></member>
    <member name="T:System.WorkflowModel.Activities.CompensationExtension"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.#ctor(System.Boolean)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Attach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.BeginOnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.BeginOnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Canceled(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Canceled(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.CancelParticipant(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.CancelParticipant(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.CompensateParticipant(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.CompensateParticipant(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Completed(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Completed(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Confirmed(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Confirmed(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ConfirmParticipant(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ConfirmParticipant(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Detach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.EndOnDelete(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.EndOnSave(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Fail(System.WorkflowModel.Activities.CompensationContext,System.Exception)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.Fail(System.WorkflowModel.Activities.CompensationContext,System.Exception,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="P:System.WorkflowModel.Activities.CompensationExtension.Instance"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginCancel(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginComplete(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginConfirm(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginCreateCompensationContext(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantCanceled(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantCannotComplete(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantCompensated(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantCompleted(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantConfirmed(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginParticipantFail(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnBeginRegisterParticipant(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnCancel(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnComplete(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnConfirm(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnCreateCompensationContext(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndCancel(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndComplete(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndConfirm(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndCreateCompensationContext(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantCanceled(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantCannotComplete(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantCompensated(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantCompleted(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantConfirmed(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndParticipantFail(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnEndRegisterParticipant(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnGetSaveData(System.WorkflowModel.IExtensionCollection,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnLoad(System.Object,System.WorkflowModel.IExtensionCollection)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnLoadData(System.Object,System.WorkflowModel.IExtensionCollection)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantCanceled(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantCannotComplete(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantCompensated(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantCompleted(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantConfirmed(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnParticipantFail(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext,System.Exception)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnRegisterParticipant(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.OnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ParticipantFailed(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ParticipantFailed(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ParticipantNotCompleted(System.WorkflowModel.Activities.CompensationContext)"></member>
    <member name="M:System.WorkflowModel.Activities.CompensationExtension.ParticipantNotCompleted(System.WorkflowModel.Activities.CompensationContext,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="T:System.WorkflowModel.Activities.CompensationHandle"></member>
    <member name="T:System.WorkflowModel.Activities.CompensationScope">
      <summary>Provides a scoping construct and acts as an execution and compensation lifetime boundary for all nested <see cref="T:System.WorkflowModel.Activities.CompensableActivity" /> instances.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.CompensationScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensationScope.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> executes.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensationScope.CompensationContext">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationContext" /> for this <see cref="T:System.WorkflowModel.Activities.CompensationScope" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationContext" /> for this <see cref="T:System.WorkflowModel.Activities.CompensationScope" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.CompensationScope.ShouldSerializeCompensationContext">
      <summary>Indicates whether the <see cref="T:System.WorkflowModel.Activities.CompensationContext" /> for this <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.CompensationScope.CompensationContext" /> property value should be serialized; otherwise false.
</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CompensationScope.Variables">
      <summary>Gets the collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> activity.</summary>
      <returns>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects for this <see cref="T:System.WorkflowModel.Activities.CompensationScope" /> activity.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Confirm">
      <summary>An activity used to explicitly invoke the confirmation handler of a <see cref="T:System.WorkflowModel.Activities.CompensableActivity" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Confirm.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Confirm" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Confirm.ShouldSerializeTarget">
      <summary>Indicates whether the <see cref="P:System.WorkflowModel.Activities.Confirm.Target" /> property should be persisted.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.Confirm.Target" /> property should be persisted; otherwise false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Confirm.Target">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.Confirm" /> activity.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> that contains the <see cref="T:System.WorkflowModel.Activities.CompensationHandle" /> for this <see cref="T:System.WorkflowModel.Activities.Confirm" /> activity.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.CreateSubInstance"></member>
    <member name="M:System.WorkflowModel.Activities.CreateSubInstance.#ctor"></member>
    <member name="T:System.WorkflowModel.Activities.DeleteSubInstance"></member>
    <member name="M:System.WorkflowModel.Activities.DeleteSubInstance.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.DeleteSubInstance.SubInstance"></member>
    <member name="T:System.WorkflowModel.Activities.HandleScope`1">
      <typeparam name="THandle"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.HandleScope`1.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.HandleScope`1.Body"></member>
    <member name="P:System.WorkflowModel.Activities.HandleScope`1.Handle"></member>
    <member name="T:System.WorkflowModel.Activities.NameScopeElement"></member>
    <member name="M:System.WorkflowModel.Activities.NameScopeElement.#ctor"></member>
    <member name="M:System.WorkflowModel.Activities.NameScopeElement.FindName(System.String)"></member>
    <member name="M:System.WorkflowModel.Activities.NameScopeElement.RegisterName(System.String,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.NameScopeElement.UnregisterName(System.String)"></member>
    <member name="T:System.WorkflowModel.Activities.Persist">
      <summary>Requests that a workflow persist to a durable medium and unload from memory.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Persist.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Persist" /> class.</summary>
    </member>
    <member name="T:System.WorkflowModel.Activities.SuppressCompensation">
      <summary>An activity used to suppress the ambient <see cref="T:System.WorkflowModel.Activities.CompensationContext" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.SuppressCompensation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.SuppressCompensation" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.SuppressCompensation.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.SuppressCompensation" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.SuppressCompensation" /> executes.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.Alternative">
      <summary>Represents a branch in a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> object.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Alternative.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Alternative.Expression">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ValueExpression`1" /> for this <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />.</summary>
      <returns>
The <see cref="T:System.WorkflowModel.ValueExpression`1" /> for this <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />.
</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Alternative.FromBooleanValueExpression(System.WorkflowModel.ValueExpression{System.Boolean})">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> class that is created using the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</summary>
      <returns>Returns a new <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> object that is initialized from the <see cref="T:System.WorkflowModel.ValueExpression`1" />.
</returns>
      <param name="expression">A <see cref="T:System.Boolean" /><see cref="T:System.WorkflowModel.ValueExpression`1" /> used to initialize the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />. </param>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Alternative.Name">
      <summary>Gets or sets the name of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />.</summary>
      <returns>The name of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />.
</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Alternative.op_Implicit(System.WorkflowModel.ValueExpression{System.Boolean})~System.WorkflowModel.Activities.Rules.Alternative">
      <summary>Initializes and returns a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> class that is created using the given <see cref="T:System.WorkflowModel.ValueExpression`1" />.</summary>
      <returns>Returns a new <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> object that is initialized from the <see cref="T:System.WorkflowModel.ValueExpression`1" />.
</returns>
      <param name="expression">A <see cref="T:System.Boolean" /><see cref="T:System.WorkflowModel.ValueExpression`1" /> used to initialize the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" />. </param>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.ConditionInfo">
      <summary>Contains a <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> and an <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> that comprises a condition in a <see cref="T:System.WorkflowModel.Activities.Rules.Decision" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.ConditionInfo.#ctor(System.WorkflowModel.Activities.Rules.Partition,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> class.</summary>
      <param name="Partition">The <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> that contains the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> used by the condition.</param>
      <param name="AlternativeNumber">The index of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> contained in the <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" /> collection of the <see cref="T:System.WorkflowModel.Activities.Rules.Partition" />.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.ConditionInfo.Alternative">
      <summary>Gets the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> used by the condition.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> used by the condition.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.ConditionInfo.AlternativeNumber">
      <summary>Gets the index of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> contained in the <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" /> collection of the <see cref="T:System.WorkflowModel.Activities.Rules.Partition" />.</summary>
      <returns>The index of the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> contained in the <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" /> collection of the <see cref="T:System.WorkflowModel.Activities.Rules.Partition" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.ConditionInfo.Partition">
      <summary>Gets the <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> that contains the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> used by the condition.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> that contains the <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> used by the condition. </returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.ConflictInfo">
      <summary>Contains a collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> and <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> objects that contain the conditions that result in multiple <see cref="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions" /> in a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> being selected.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.ConflictInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.ConflictInfo" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.ConflictInfo.Conditions">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> objects that describe the conflicts in the <see cref="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions" /> of a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> objects that describe the conflicts in the <see cref="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions" /> of a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.ConflictInfo.Decisions">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> objects involved in the conflict.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> objects involved in the conflict.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.ConflictInfo.ToString">
      <summary>Gets a <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.Activities.Rules.ConflictInfo" /> object.</summary>
      <returns>The current <see cref="T:System.WorkflowModel.Activities.Rules.ConflictInfo" /> object.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.Decision">
      <summary>Represents a possible outcome in a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Decision.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Decision.Action">
      <summary>Gets or sets the activity that is scheduled if this <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> is selected by the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <returns>The activity that is scheduled if this <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> is selected by the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Decision.Conditions">
      <summary>Gets the collection of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Decision" />.</summary>
      <returns>The collection of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Decision" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.DecisionTable">
      <summary>Represents the complete set of mutually exclusive conditional expressions in a defined area.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.DecisionTable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.DecisionTable.Conflicts">
      <summary>Analyzes the <see cref="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions" /> in the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> at design-time and returns a collection that indicates which sets of <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" />, if any, cause more than one <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> to apply.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of <see cref="T:System.WorkflowModel.Activities.Rules.ConflictInfo" /> objects that indicate which sets of <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" />, if any, cause more than one <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> to apply.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.DecisionTable.Default">
      <summary>Gets or sets the default action for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <returns>The default action for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.DecisionTable.Gaps">
      <summary>Analyzes the <see cref="P:System.WorkflowModel.Activities.Rules.DecisionTable.Decisions" /> in the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> at design-time and returns a collection that indicates which sets of <see cref="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives" /> if any, cause no <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> to apply.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.DecisionTable.Partitions">
      <summary>Gets the list of <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <returns>The list of <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.GapInfo">
      <summary>Contains a collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> objects that describe which alternatives must be true for each <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> such that no <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> in the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> is selected. </summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.GapInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.GapInfo" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.GapInfo.Conditions">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> objects that describe which alternatives must be true for each <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> such that no <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> in the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> is selected.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Activities.Rules.ConditionInfo" /> objects that describe which alternatives must be true for each <see cref="T:System.WorkflowModel.Activities.Rules.Partition" /> such that no <see cref="T:System.WorkflowModel.Activities.Rules.Decision" /> in the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> is selected.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.GapInfo.ToString">
      <summary>Gets a string that represents the current <see cref="T:System.WorkflowModel.Activities.Rules.GapInfo" /> object.</summary>
      <returns>The current <see cref="T:System.WorkflowModel.Activities.Rules.GapInfo" /> object.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.IterationContext">
      <summary>The abstract base class from which the rule collection support class <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" /> derives.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.IterationContext.Expression">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ValueExpression" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ValueExpression" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.IterationContext.Open">
      <summary>When invoked by a derived class, marks the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" /> as open.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.IterationContext.ThrowIfOpen">
      <summary>Throws an <see cref="T:System.InvalidOperationException" /> if the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" /> has previously invoked the <see cref="M:System.WorkflowModel.Activities.Rules.IterationContext.Open" /> method.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.IterationContext.Variable">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.Variable" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Variable" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.IterationContext`1">
      <summary>Generic class which provides support for processing collections in <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" /> and <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" />.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.IterationContext`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.IterationContext`1.Expression">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.ValueExpression`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ValueExpression`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.IterationContext`1.Variable">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.Variable`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Variable`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.Partition">
      <summary>The abstract base class from which the <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" /> support class <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" /> derives.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Partition.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition.Alternatives">
      <summary>Gets the list of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition" />.</summary>
      <returns>The list of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Partition.Open"></member>
    <member name="M:System.WorkflowModel.Activities.Rules.Partition.ProvideAlternatives(System.Collections.Generic.IList{System.WorkflowModel.Activities.Rules.Alternative})"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition.Subject"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition.SubjectCore"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition.SubjectName"></member>
    <member name="M:System.WorkflowModel.Activities.Rules.Partition.ThrowIfOpen"></member>
    <member name="T:System.WorkflowModel.Activities.Rules.Partition`1">
      <summary>Represents one possible outcome in a <see cref="T:System.WorkflowModel.Activities.Rules.DecisionTable" />.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Partition`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition`1.Alternatives">
      <summary>Gets the list of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</summary>
      <returns>The list of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition`1.Count">
      <summary>Gets the number of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects contained by this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</summary>
      <returns>The number of <see cref="T:System.WorkflowModel.Activities.Rules.Alternative" /> objects contained by this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition`1.Item(System.Int32)"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition`1.Subject">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.InArgument`1" /> for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</summary>
      <returns>The <see cref="T:System.WorkflowModel.InArgument`1" /> for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Partition`1.Type">
      <summary>Gets the data type for the generic parameter for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</summary>
      <returns>The data type for the generic parameter for this <see cref="T:System.WorkflowModel.Activities.Rules.Partition`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.Rule">
      <summary>Defines a condition with an associated set of actions to perform.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Rule.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Condition">
      <summary>Gets or sets a <see cref="T:System.WorkflowModel.ValueExpression`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> to evaluate. </summary>
      <returns>A <see cref="T:System.WorkflowModel.ValueExpression`1" /> for the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> to evaluate.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Contexts">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" /> objects that is used when the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> evaluates members of a collection.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Activities.Rules.IterationContext" /> objects.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Description">
      <summary>Gets or sets a description of the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" />.</summary>
      <returns>A description of the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Else">
      <summary>Gets or sets the activity that is scheduled if the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> object’s <see cref="P:System.WorkflowModel.Activities.Rules.Rule.Condition" /> evaluates to false.</summary>
      <returns>The activity that is scheduled if the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> object’s <see cref="P:System.WorkflowModel.Activities.Rules.Rule.Condition" /> evaluates to false.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Rule.FindName(System.String)"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Name">
      <summary>Gets or sets the name of the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" />.</summary>
      <returns>The name of the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Priority">
      <summary>Gets or sets a value that indicates the order in which a <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> should be run.
</summary>
      <returns>A value that indicates the order in which a <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> should be run.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Rule.RegisterName(System.String,System.Object)"></member>
    <member name="P:System.WorkflowModel.Activities.Rules.Rule.Then">
      <summary>Gets or sets the activity that is scheduled if the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> object’s <see cref="P:System.WorkflowModel.Activities.Rules.Rule.Condition" /> evaluates to true.</summary>
      <returns>The activity that is scheduled if the <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> object’s <see cref="P:System.WorkflowModel.Activities.Rules.Rule.Condition" /> evaluates to false.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.Rule.UnregisterName(System.String)"></member>
    <member name="T:System.WorkflowModel.Activities.Rules.RuleSet">
      <summary>Contains a collection of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects with the semantics for forward-chaining execution of those rules.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.RuleSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.RuleSet.Rules">
      <summary>Gets a list of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" />.</summary>
      <returns>A list of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.RuleSet.Variables">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Variable" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" />.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Variable" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet">
      <summary>Contains a collection of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects that are ordered by <see cref="P:System.WorkflowModel.Activities.Rules.Rule.Priority" /> and executed once in a sequential manner. </summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Rules.SequentialRuleSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.SequentialRuleSet.Rules">
      <summary>Gets a list of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" />.</summary>
      <returns>A list of <see cref="T:System.WorkflowModel.Activities.Rules.Rule" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Rules.SequentialRuleSet.Variables">
      <summary>Gets a collection of <see cref="T:System.WorkflowModel.Variable" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" />.</summary>
      <returns>A collection of <see cref="T:System.WorkflowModel.Variable" /> objects in the <see cref="T:System.WorkflowModel.Activities.Rules.SequentialRuleSet" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Debugger.IDebuggableWorkflowTree">
      <summary>Exposes a method to be called when verifying a workflow object with the Workflow debugger.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.IDebuggableWorkflowTree.GetWorkflowRoot">
      <summary>Returns the root of the workflow tree.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.WorkflowElement" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Debugger.LocalsItemDescription">
      <summary>Represents the name and type of an early bound item that displays in the workflow debugger Locals window.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.LocalsItemDescription.#ctor(System.String,System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.LocalsItemDescription" /> class with the name and type of the local item defined.</summary>
      <param name="name">The name of the specified early bound local item.</param>
      <param name="type">The type of the specified early bound local item.</param>
    </member>
    <member name="P:System.WorkflowModel.Debugger.LocalsItemDescription.Name">
      <summary>Returns the name of a local item accessed while debugging a workflow.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Debugger.LocalsItemDescription.ToString">
      <summary>Returns a string that represents the name and type of an early bound local item that displays in the workflow debugger Locals window.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.LocalsItemDescription.Type">
      <summary>Returns the type of a local item accessed while debugging a workflow.</summary>
      <returns>
        <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Debugger.SourceLocation">
      <summary>Identifies a specific location in a target source code file.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocation.#ctor(System.String,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> class that specifies a source code file name and the number of a line in that file.</summary>
      <param name="fileName">A source code file.</param>
      <param name="line">The number of a line in the source code file.</param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> class that specifies a source code file name and parameters for a range of data within that file.</summary>
      <param name="fileName">The name of a source code file.</param>
      <param name="startLine">A number that designates the line in the source code file where reading begins.</param>
      <param name="startColumn">A number that designates the column in the source code file where reading begins.</param>
      <param name="endLine">A number that designates the line in the source code file where reading ends.</param>
      <param name="endColumn">A number that designates the column in the source code file where reading ends.</param>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.EndColumn">
      <summary>Gets the final column in a range of one or more columns in the source code file.</summary>
      <returns>
        <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.EndLine">
      <summary>Gets the final line in a range of one or more lines in the source code file.</summary>
      <returns>
        <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocation.Equals(System.Object)">
      <summary>Returns a value that indicates whether the source code file line and column settings referenced by the <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> object are an exact match for the line and column settings in another, specified <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> object.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
      <param name="obj">A specified <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> object.</param>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.FileName">
      <summary>Gets the name of the target source code file.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocation.GetHashCode">
      <summary>Returns a unique value to represent the <see cref="T:System.WorkflowModel.Debugger.SourceLocation" /> object.</summary>
      <returns>
        <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.IsSingleWholeLine">
      <summary>Gets a value that indicates whether the line and column settings define a single, complete line, and not multiple lines, in the source code file.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.StartColumn">
      <summary>Gets the first column in a range of one or more columns in the source code file.</summary>
      <returns>
        <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.SourceLocation.StartLine">
      <summary>Gets the first line in a range of one or more lines in the source code file.</summary>
      <returns>
        <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Debugger.SourceLocationProvider">
      <summary>Provides SourceLocation information for activities in a given root activity.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocationProvider.#ctor">
      <summary>Creates new instance of the <see cref="T:System.WorkflowModel.Debugger.SourceLocationProvider" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.SourceLocationProvider.CollectMapping(System.WorkflowModel.WorkflowElement,System.WorkflowModel.WorkflowElement,System.Collections.Generic.Dictionary{System.Object,System.WorkflowModel.Debugger.SourceLocation},System.String)">
      <summary>Publish activity to a file and return the SourceLocation mapping of activities and expressions.</summary>
      <param name="rootActivity1"></param>
      <param name="rootActivity2"></param>
      <param name="mapping"></param>
      <param name="path"></param>
    </member>
    <member name="T:System.WorkflowModel.Debugger.State">
      <summary>Represents any source code location that can serve as a breakpoint or be stepped to by the interpreter.</summary>
    </member>
    <member name="T:System.WorkflowModel.Debugger.StateManager">
      <summary>Manager for supporting debugging with a state machine.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.StateManager.Dispose">
      <summary>Exits each thread in the logical thread list and then clears the list.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.StateManager.Exit(System.Int32)">
      <summary>Exits the specified thread and sets its location in the logical thread list to null.</summary>
      <param name="threadIndex">Number representing an index into a list of logical threads.</param>
    </member>
    <member name="T:System.WorkflowModel.Debugger.ThreadWorkerController">
      <summary>
  Define an auxiliary thread codegen technique for islands.
 This executes the islands on a dedicated worker thread.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.ThreadWorkerController" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.Break"></member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.CreateIsland(System.Reflection.Emit.TypeBuilder,System.WorkflowModel.Debugger.State)">
      <returns>Returns <see cref="T:System.Reflection.Emit.MethodBuilder" />.</returns>
      <param name="typeBuilder"></param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.EnterState(System.WorkflowModel.Debugger.VirtualStackFrame)">
      <param name="newFrame"></param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.Exit"></member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.Initialize(System.WorkflowModel.Debugger.StateManager)">
      <param name="manager"></param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.IslandWorker(System.WorkflowModel.Debugger.ThreadWorkerController)">
      <param name="controller"></param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.ThreadWorkerController.LeaveState"></member>
    <member name="T:System.WorkflowModel.Debugger.VirtualStackFrame">
      <summary>Represents a virtual callstack frame for the interpreter.</summary>
    </member>
    <member name="M:System.WorkflowModel.Debugger.VirtualStackFrame.#ctor(System.WorkflowModel.Debugger.State)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.VirtualStackFrame" /> class with state specified.</summary>
      <param name="state">The source code location that a breakpoint is set on or could be stepped to. </param>
    </member>
    <member name="M:System.WorkflowModel.Debugger.VirtualStackFrame.#ctor(System.WorkflowModel.Debugger.State,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Debugger.VirtualStackFrame" /> class with state and local variables specified.</summary>
      <param name="state">The source code location that a breakpoint is set on or could be stepped to.</param>
      <param name="locals">Early and late bound local variables.</param>
    </member>
    <member name="P:System.WorkflowModel.Debugger.VirtualStackFrame.Locals">
      <summary>Gets both early and late bound local variables.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Debugger.VirtualStackFrame.State">
      <summary>Gets the current source location that a breakpoint is set on or that could be stepped to.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Debugger.State" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Debugger.VirtualStackFrame.ToString">
      <summary>A string version of the state information.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Debugger.XamlDebuggerXmlReader"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.#ctor(System.Runtime.Xaml.XamlReader)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.CopyAttachedSourceLocation(System.Object,System.Object)"></member>
    <member name="P:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.Current"></member>
    <member name="F:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.EndColumnName"></member>
    <member name="F:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.EndLineName"></member>
    <member name="F:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.FileNameName"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.GetEndColumn(System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.GetEndLine(System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.GetFileName(System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.GetStartColumn(System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.GetStartLine(System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.Read"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.SetEndColumn(System.Object,System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.SetEndLine(System.Object,System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.SetFileName(System.Object,System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.SetStartColumn(System.Object,System.Object)"></member>
    <member name="M:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.SetStartLine(System.Object,System.Object)"></member>
    <member name="P:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.Settings"></member>
    <member name="F:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.StartColumnName"></member>
    <member name="F:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.StartLineName"></member>
    <member name="P:System.WorkflowModel.Debugger.XamlDebuggerXmlReader.UnderlyingReader"></member>
    <member name="T:System.WorkflowModel.ExpressionParser.SourceExpressionException">
      <summary>Stores data that is required to serialize or deserialize data source expression errors that occur during a workflow runtime.</summary>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ExpressionParser.SourceExpressionException" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ExpressionParser.SourceExpressionException" /> class initialized with expression field names and values and a context that describes which of those fields and values to include in the serialization.</summary>
      <param name="info">A series of expressions field names and values.</param>
      <param name="context">Information that indicates which field name and value pair in a stream to ignore and which to serialize.</param>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ExpressionParser.SourceExpressionException" /> class initialized with a specified error message.</summary>
      <param name="message">The string that describes the error.</param>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.#ctor(System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.ExpressionParser.SourceExpressionException" /> class initialized with a specified error message and a collection of compiler errors.</summary>
      <param name="message">The string that describes an error.</param>
      <param name="errors">A collection of compiler errors.</param>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.ExpressionParser.SourceExpressionException" /> class with a specified error message and a reference to an inner exception.</summary>
      <param name="message">Text The string that describes an exception.</param>
      <param name="innerException">An exception that catches a pre-existing exception by invoking the code that produces the pre-existing exception.</param>
    </member>
    <member name="P:System.WorkflowModel.ExpressionParser.SourceExpressionException.Errors">
      <summary>Gets the collection of compiler errors.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.ExpressionParser.SourceExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Adds new data to a store of serialized compiler error information.</summary>
      <param name="info">A series of expression field names and values to be serialized.</param>
      <param name="context">Information that indicates whether field names and values in a stream should be ignored or serialized.</param>
    </member>
    <member name="T:System.WorkflowModel.Persistence.IPersistenceParticipant">
      <summary>Exposes methods to be called when a workflow component participates in a persistence operation.</summary>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.BeginOnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the delete phase. The delete phase occurs when state data is permanently deleted from the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="extensions">The collection of extensions associated with the object that is persisted.</param>
      <param name="timeout">The time period after which the persistence provider aborts the attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.BeginOnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the save phase. The save phase occurs when state data is persisted to the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="extensions">The collection of extensions associated with the object that is persisted.</param>
      <param name="timeout">The time period after which the persistence provider aborts the attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.EndOnDelete(System.IAsyncResult)">
      <summary>Represents the end of the delete phase. The delete phase occurs when state data is permanently deleted from the persistence store.</summary>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.EndOnSave(System.IAsyncResult)">
      <summary>Represents the end of the save phase. The save phase occurs when state data is persisted to the persistence store.</summary>
      <returns>An object that is included in the persistence process.</returns>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.OnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan)">
      <summary>Represents the delete phase. The delete phase occurs when state data is permanently deleted from the persistence store.</summary>
      <param name="extensions">The collection of extensions associated with the object that is persisted.</param>
      <param name="timeout">The time period after which the persistence provider aborts the attempt.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.OnLoad(System.Object,System.WorkflowModel.IExtensionCollection)">
      <summary>Represents the load phase. The load phase occurs when state data is read from the persistence store.</summary>
      <param name="loadedObject">The object retrieved from the persistence store.</param>
      <param name="extensions">The collection of extensions associated with the object that is persisted.</param>
    </member>
    <member name="M:System.WorkflowModel.Persistence.IPersistenceParticipant.OnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan)">
      <summary>Represents the save phase. The save phase occurs when state data is persisted to the persistence store.</summary>
      <returns>An object that is included in the persistence process.</returns>
      <param name="extensions">The collection of extensions associated with the object that is persisted.</param>
      <param name="timeout">The time period after which the persistence provider aborts the attempt.</param>
    </member>
    <member name="T:System.WorkflowModel.Tracking.ActivityQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to activity records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.ActivityQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityQuery.ActivityName">
      <summary>The name of the activity that generated the event record.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityQuery.States">
      <summary>The state of the activity when the record was generated.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" />
      </returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityQuery.VariableQueries">
      <summary>The collection of variable queries associated with this activity query.</summary>
      <returns>The query collection.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.ActivityScheduledQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to activity scheduled records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityScheduledQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.ActivityScheduledQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityScheduledQuery.ChildActivityName">
      <summary>The name of the scheduled activity.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.ActivityScheduledRecord">
      <summary>Represents a tracking record of an activity being scheduled for execution. </summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityScheduledRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.ActivityScheduledRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the tracked workflow instance.</param>
      <param name="recordNumber">A sequence that indicates the order in which tracking records are generated.</param>
      <param name="parentActivityId">The name of the activity that scheduled the child element.</param>
      <param name="parentActivityInstanceId">The ID of the activity that scheduled the child element.</param>
      <param name="sourceName">The name of the activity that generated the event.</param>
      <param name="childActivityId">The name of the scheduled activity.</param>
      <param name="childActivityInstanceId">The ID of the scheduled activity.</param>
      <param name="targetName">The name of the scheduled activity.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityScheduledRecord.ChildActivityId">
      <summary>Returns the name of the scheduled activity.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityScheduledRecord.ChildActivityInstanceId">
      <summary>Returns the ID of the scheduled activity.</summary>
      <returns>The activity ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityScheduledRecord.ChildActivityName">
      <summary>Returns the name of the scheduled activity.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityScheduledRecord.ToString">
      <summary>Returns a string that contains all of the details of the event.</summary>
      <returns>The event details.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.ActivityTrackingRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when an activity executes.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityTrackingRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.ActivityTrackingRecord" /> class.</summary>
      <param name="instanceId">The ID of the activity.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="name">The name of the activity.</param>
      <param name="activityId">The ID of the activity instance’s <see cref="P:System.WorkflowModel.ActivityInstance.Activity" /> property.</param>
      <param name="activityInstanceId">The ID of the activity instance.</param>
      <param name="state">The current state of the activity when the record is generated. </param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityTrackingRecord.ActivityId">
      <summary>Returns the ID of the activity instance’s <see cref="P:System.WorkflowModel.ActivityInstance.Activity" /> property.</summary>
      <returns>The activity ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityTrackingRecord.ActivityInstanceId">
      <summary>Returns the ID of the activity instance.</summary>
      <returns>The instance ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityTrackingRecord.Name">
      <summary>Returns the name of the activity.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityTrackingRecord.State">
      <summary>Returns the current state of the activity when the record is generated.</summary>
      <returns>The activity state.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.ActivityTrackingRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.ActivityTrackingRecord.Variables">
      <summary>Returns the current values of the variables associated with the activity when the record is generated. </summary>
      <returns>The variable values.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.BookmarkResumptionQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to bookmark resumption records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.BookmarkResumptionQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.BookmarkResumptionQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionQuery.ExtractPayload">
      <summary>Determines whether the payload of the tracking record is to be extracted when the record is processed.</summary>
      <returns>true if the record is to be extracted.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionQuery.Name">
      <summary>Returns the name of the bookmark.</summary>
      <returns>The bookmark name.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.BookmarkResumptionRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a <see cref="T:System.WorkflowModel.Bookmark" /> is resumed.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.BookmarkResumptionRecord.#ctor(System.Guid,System.Int64,System.Guid,System.String,System.String,System.String,System.String)"></member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.BookmarkName">
      <summary>Gets the name of the <see cref="T:System.WorkflowModel.Bookmark" /> that is referenced by this <see cref="T:System.WorkflowModel.Tracking.BookmarkResumptionRecord" />.</summary>
      <returns>The name of the <see cref="T:System.WorkflowModel.Bookmark" /> that is referenced by this <see cref="T:System.WorkflowModel.Tracking.BookmarkResumptionRecord" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.Payload">
      <summary>Gets the value that was supplied when the <see cref="T:System.WorkflowModel.Bookmark" /> was resumed.</summary>
      <returns>The value that was supplied when the <see cref="T:System.WorkflowModel.Bookmark" /> was resumed.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.SubInstanceId"></member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.TargetActivityId">
      <summary>Gets the ActivityId of the activity that was waiting for the <see cref="T:System.WorkflowModel.Bookmark" /> to be resumed.</summary>
      <returns>The ActivityId of the activity that was waiting for the <see cref="T:System.WorkflowModel.Bookmark" /> to be resumed.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.TargetActivityInstanceId">
      <summary>Gets the ActivityInstanceId of the activity that was waiting for the <see cref="T:System.WorkflowModel.Bookmark" /> to be resumed.</summary>
      <returns>The ActivityInstanceId of the activity that was waiting for the <see cref="T:System.WorkflowModel.Bookmark" /> to be resumed.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.BookmarkResumptionRecord.TargetActivityName"></member>
    <member name="M:System.WorkflowModel.Tracking.BookmarkResumptionRecord.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.WorkflowModel.Tracking.BookmarkResumptionRecord" /> object.</summary>
      <returns>The current <see cref="T:System.WorkflowModel.Tracking.BookmarkResumptionRecord" /> object.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.CancelRequestedQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to cancellation request records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.CancelRequestedQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.CancelRequestedQuery" /> object.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.CancelRequestedQuery.ChildActivityName">
      <summary>The name of the activity for which cancellation was requested.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.CancelRequestedRecord">
      <summary>Represents the data sent by the workflow runtime to tracking participants when <see cref="M:System.WorkflowModel.WorkflowElement.Cancel" /> is called.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.CancelRequestedRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.CancelRequestedRecord" /> class.</summary>
      <param name="instanceId">The ID of the activity instance that generated the event.</param>
      <param name="recordNumber">A sequence that defines the order of generated tracking events.</param>
      <param name="parentActivityId">The ID of the cancelled activity’s parent <see cref="P:System.WorkflowModel.ActivityInstance.Activity" />.</param>
      <param name="parentActivityInstanceId">The ID of the cancelled activity’s parent activity.</param>
      <param name="parentActivityName">The name of the cancelled activity’s parent activity.</param>
      <param name="childActivityId">The ID of the <see cref="P:System.WorkflowModel.ActivityInstance.Activity" /> of the activity to be cancelled.</param>
      <param name="childActivityInstanceId">The ID of the activity to be cancelled.</param>
      <param name="childActivityName">The name of the activity to be cancelled.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.CancelRequestedRecord.ChildActivityId">
      <summary>The ID of the <see cref="P:System.WorkflowModel.ActivityInstance.Activity" /> of the activity to be cancelled.</summary>
      <returns>The ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.CancelRequestedRecord.ChildActivityInstanceId">
      <summary>The ID of the activity to be cancelled. </summary>
      <returns>The ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.CancelRequestedRecord.ChildActivityName">
      <summary>The name of the activity to be cancelled.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.CancelRequestedRecord.ToString">
      <summary>Returns a string that contains the data in the record.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.FaultPropagationQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to fault propagation records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.FaultPropagationQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.FaultPropagationQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationQuery.ExtractFaultData">
      <summary>Determines whether the fault data is to be extracted when the record is returned.</summary>
      <returns>true if the fault data is to be extracted, otherwise, false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationQuery.FaultHandlerActivityName">
      <summary>Returns the name of the fault hander activity that propagated the fault.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.FaultPropagationRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a fault is propagated.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.FaultPropagationRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.FaultPropagationRecord" /> class.</summary>
      <param name="instanceId">The ID of the activity that generated the event.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="parentActivityId">The ID of the generating activity instance’s <see cref="P:System.WorkflowModel.ActivityInstance.Activity" /> property.</param>
      <param name="parentActivityInstanceId">The ID of the generating activity instance.</param>
      <param name="parentActivityName">The name of the generating activity.</param>
      <param name="faultHandlerActivityId">Not implemented.</param>
      <param name="faultHandlerActivityInstanceId">Not implemented.</param>
      <param name="faultHandlerName">Not implemented.</param>
      <param name="fault">Not implemented.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationRecord.Fault">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationRecord.FaultHandlerActivityId">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationRecord.FaultHandlerActivityInstanceId">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.FaultPropagationRecord.FaultHandlerActivityName">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.FaultPropagationRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.SqlTrackingParticipant">
      <summary>The system-provided tracking participant that persists tracking data to a SQL database.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.SqlTrackingParticipant" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.SqlTrackingParticipant" /> class with the specified parameters.</summary>
      <param name="parameters">Name-value collection that defines parameters for the tracking participant. The following are valid parameter names.participateInProcessTransactiontrue if the tracking participant uses the current transaction.profileNameThe name of the tracking profile.connectionStringThe connection string used to access the persistence store.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.BeginGetProfile(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The result of the operation.</returns>
      <param name="scopeTarget">Filters that retrieve the tracking profiles for the specified scope target.</param>
      <param name="scopeType">Filters that retrieve the tracking profiles for the specified scope type.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.BeginOnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the Delete phase. The Delete phase occurs when data is permanently removed from the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="extensions">Not implemented.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.BeginOnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the Save phase. The Save phase occurs when tracking data is persisted to the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="extensions">Not implemented.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.BeginTrack(System.WorkflowModel.Tracking.TrackingRecord,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <returns>The result of the operation.</returns>
      <param name="trackingRecord">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.SqlTrackingParticipant.ConnectionString">
      <summary>The connection string used to access the persistence store.</summary>
      <returns>The connection string.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.SqlTrackingParticipant.CorrelationId">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.EndGetProfile(System.IAsyncResult)">
      <summary>Represents the end of the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The result of the operation.</returns>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.EndOnDelete(System.IAsyncResult)">
      <summary>Represents the end of the Delete phase. The Delete phase occurs when data is permanently removed from the persistence store.</summary>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.EndOnSave(System.IAsyncResult)">
      <summary>Represents the beginning of the Save phase. The Save phase occurs when tracking data is persisted to the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.EndTrack(System.IAsyncResult)">
      <summary>Represents the end of the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.GetProfile(System.String,System.String,System.TimeSpan)">
      <summary>Represents the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The result of the operation.</returns>
      <param name="scopeTarget">Filters that retrieve the tracking profiles for the specified scope target.</param>
      <param name="scopeType">Filters that retrieve the tracking profiles for the specified scope type.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.OnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan)">
      <param name="extensions">Not implemented.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.OnLoad(System.Object,System.WorkflowModel.IExtensionCollection)">
      <summary>Not implemented.</summary>
      <param name="loadedObject">Not implemented.</param>
      <param name="extensions">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.OnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan)">
      <summary>Represents the Save phase. The Save phase occurs when tracking data is persisted to the persistence store.</summary>
      <returns>The result of the operation.</returns>
      <param name="extensions">Not implemented.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.SqlTrackingParticipant.ParticipateInProcessTransaction">
      <summary>Determines whether tracking is enabled.</summary>
      <returns>true if tracking is enabled.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.SqlTrackingParticipant.Track(System.WorkflowModel.Tracking.TrackingRecord,System.TimeSpan)">
      <summary>Represents the end of the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="T:System.WorkflowModel.Tracking.TrackingParticipant">
      <summary>The base class for workflow extensions that interact with the workflow tracking infrastructure.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.BeginGetProfile(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, defines the beginning of the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The result of the operation.</returns>
      <param name="scopeTarget">Filters retrieved tracking profiles for the specified scope target.</param>
      <param name="scopeType">Filters that retrieve the tracking profiles for the specified scope type.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback">The method to be called when the asynchronous operation completes.</param>
      <param name="state"></param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.BeginTrack(System.WorkflowModel.Tracking.TrackingRecord,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, defines the beginning of the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <returns>The result of the operation.</returns>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
      <param name="callback"></param>
      <param name="state">A user-defined object that uniquely identifies this asynchronous operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.EndGetProfile(System.IAsyncResult)">
      <summary>When implemented in a derived class, defines the end of the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The retrieved tracking profile.</returns>
      <param name="result">The status of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.EndTrack(System.IAsyncResult)">
      <summary>When implemented in a derived class, defines the end of the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <param name="result">The status of the operation.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.GetProfile(System.String,System.String,System.TimeSpan)">
      <summary>When implemented in a derived class, defines the GetProfile phase. The GetProfile phase occurs when the tracking profile is retrieved from the tracking participant.</summary>
      <returns>The retrieved tracking profile.</returns>
      <param name="scopeTarget">Filters that retrieve the tracking profiles for the specified scope target.</param>
      <param name="scopeType">Filters that retrieve the tracking profiles for the specified scope type.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingParticipant.ProfileName">
      <summary>When implemented in a derived class, defines the name of the tracking profile.</summary>
      <returns>The profile name.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingParticipant.Track(System.WorkflowModel.Tracking.TrackingRecord,System.TimeSpan)">
      <summary>When implemented in a derived class, defines the Track phase. The Track phase occurs when tracking data is generated by the object to which the tracking participant subscribes.</summary>
      <param name="record">The generated tracking record.</param>
      <param name="timeout">The time period after which the provider aborts the attempt.</param>
    </member>
    <member name="T:System.WorkflowModel.Tracking.TrackingProfile">
      <summary>Creates a subscription to workflow tracking events in a <see cref="T:System.WorkflowModel.Tracking.TrackingParticipant" />. The queries added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection define the kinds of events that are returned by the subscription.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingProfile.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.TrackingProfile" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingProfile.Name">
      <summary>Shows the display name of the tracking profile.</summary>
      <returns>The profile name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingProfile.Queries">
      <summary>The collection of <see cref="T:System.WorkflowModel.Tracking.TrackingQuery" /> objects that define the events to which this tracking profile subscribes.</summary>
      <returns>The collection of queries.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingProfile.ScopeTarget">
      <summary>The target of the query scope, used by <see cref="T:System.WorkflowModel.Tracking.TrackingProfileManager" /> to manage queries.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingProfile.ScopeType">
      <returns>The type of the query scope, used by <see cref="T:System.WorkflowModel.Tracking.TrackingProfileManager" /> to manage queries.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.TrackingQuery">
      <summary>The base class for all tracking queries. Tracking queries are used to create a subscription definition for a <see cref="T:System.WorkflowModel.Tracking.TrackingProfile" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingQuery.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingQuery.EnvironmentQueries">
      <summary>When implemented in a derived class, defines a collection of the names of environment variables, (such as MachineName), to be included in the results of the query.</summary>
      <returns>The collection of variable names.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingQuery.QueryAnnotations">
      <summary>A collection of name-value pairs created by the user that tag all events returned by this query.</summary>
      <returns>The collection of annotations.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.TrackingRecord">
      <summary>The abstract class from which all workflow tracking records derive. Tracking records represent the data sent to tracking participants when tracked events occur.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingRecord.#ctor(System.Guid)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance ID.</summary>
      <param name="instanceId">The ID of the generating workflow element.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingRecord.#ctor(System.Guid,System.Int64)">
      <summary>When implemented in a derived class, creates a new instance of the derived class with the specified instance ID and record number.</summary>
      <param name="instanceId">The ID of the generating workflow element.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.Annotations">
      <summary>When implemented in a derived class, represents a collection of name/value pairs that are added to this tracking record.</summary>
      <returns>The dictionary of elements to be added to this tracking record.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.EndToEndActivityId">
      <summary>When implemented in a derived class, represents the activity ID of the generating activity.</summary>
      <returns>The activity ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.EventTime">
      <summary>When implemented in a derived class, represents the time the tracked event occurred.</summary>
      <returns>The event time.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.InstanceId">
      <summary>When implemented in a derived class, represents the ID of the generating workflow element.</summary>
      <returns>The element ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.Level">
      <summary>The <see cref="T:System.Diagnostics.TraceLevel" /> of the event.</summary>
      <returns>The trace level.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.TrackingRecord.RecordNumber">
      <summary>A sequence that defines the order in which tracking events are generated. </summary>
      <returns>The sequence order.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.TrackingRecord.ToString">
      <summary>When implemented in a derived class, returns a string that contains all tracking data from the record.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.VariableQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to variable records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.VariableQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.VariableQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.VariableQuery.IsRequired">
      <summary>Returns false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.VariableQuery.Name">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.VariableQuery.VariableName">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceAbortedQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to workflow instance aborted records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceAbortedQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.WorkflowInstanceAbortedQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceAbortedQuery.IncludeReasonAborted">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceAbortedRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a workflow instance is aborted.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.Int64,System.String)">
      <param name="instanceId">The instance ID of the aborted workflow.</param>
      <param name="recordNumber">A sequence defining the order in which tracking events are generated.</param>
      <param name="reason">Not implemented.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceAbortedRecord.ReasonAborted">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceAbortedRecord.ToString">
      <summary>Returns a string containing the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to workflow instance records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.WorkflowInstanceQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceQuery.States">
      <summary>The states of the tracked workflow instance when the tracking records were created.</summary>
      <returns>The workflow states.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a workflow instance changes state.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.Int64,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.WorkflowInstanceRecord" /> class.</summary>
      <param name="instanceId">The instance ID of the generating workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="state">The current state of the workflow when the record is generated. </param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceRecord.State">
      <summary>The current state of the workflow when the record is generated. </summary>
      <returns>The workflow state.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionQuery">
      <summary>When added to the <see cref="P:System.WorkflowModel.Tracking.TrackingProfile.Queries" /> collection, subscribes to workflow instance unhandled exception records when the tracking profile is queried for event records.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionQuery.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionQuery" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionQuery.IncludeException">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionRecord">
      <summary>Contains the data sent to a tracking service by the run-time tracking infrastructure when a workflow instance encounters an unhandled exception.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.Int64,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> class.</summary>
      <param name="instanceId">The ID of the workflow instance.</param>
      <param name="recordNumber">A sequence that defines the order in which tracking events are generated.</param>
      <param name="exception"></param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionRecord.ToString">
      <summary>Returns a string that contains the tracking record data.</summary>
      <returns>The tracking data.</returns>
    </member>
    <member name="P:System.WorkflowModel.Tracking.WorkflowInstanceUnhandledExceptionRecord.UnhandledException">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.Configuration.ProfileElement">
      <summary>Maintains the collection of <see cref="T:System.WorkflowModel.Tracking.TrackingProfile" /> elements associated with a workflow runtime. </summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElement" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
      <summary>Deserializes a configuration file to find <see cref="T:System.WorkflowModel.Tracking.TrackingProfile" /> elements to add to the collection of tracking profiles.</summary>
      <param name="reader">The http://go.microsoft.com/fwlink/?LinkID=139189&amp;clcid=0x409 object that parses the configuration file element.</param>
      <param name="serializeCollectionKey">Not implemented.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.Configuration.ProfileElement.Name">
      <summary>Gets or sets the name portion of a profile element attribute.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElement.Reset(System.Configuration.ConfigurationElement)">
      <summary>Copies each <see cref="T:System.WorkflowModel.Tracking.TrackingProfile" /> in the specified parent element to the collection of tracking profiles.</summary>
      <param name="parentElement">The node in the configuration file whose scope encompasses tracking profiles.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.Configuration.ProfileElement.TrackingProfiles">
      <summary>Gets the collection of tracking profiles associated with a workflow runtime.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection">
      <summary>Maintains a collection of <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElement" /> objects.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.Add(System.WorkflowModel.Tracking.Configuration.ProfileElement)">
      <summary>Adds a profile element to a <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</summary>
      <param name="element">The profile element to add.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.Clear">
      <summary>Removes all profile elements from a <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.IndexOf(System.WorkflowModel.Tracking.Configuration.ProfileElement)">
      <summary>Returns the index of the specified profile element in a <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</summary>
      <returns>The index of the specified profile element.</returns>
      <param name="element">The profile element whose index location is returned.</param>
    </member>
    <member name="P:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.Item(System.Int32)">
      <summary>Get or set the profile element at the specified location in the <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" /></summary>
      <returns>
        <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElement" />.</returns>
      <param name="index">The index location of an element in a profile element collection.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.Remove(System.WorkflowModel.Tracking.Configuration.ProfileElement)">
      <summary>Removes a specified profile element from a <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</summary>
      <param name="element">The profile element to remove from the collection.</param>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection.RemoveAt(System.Int32)">
      <summary>Removes the profile element at the specified index location in a <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</summary>
      <param name="index">The index location of the profile element to remove from the collection.</param>
    </member>
    <member name="T:System.WorkflowModel.Tracking.Configuration.TrackingProfileConfigurationSection">
      <summary>Represents a section of a configuration file that contains tracking profile elements.</summary>
    </member>
    <member name="M:System.WorkflowModel.Tracking.Configuration.TrackingProfileConfigurationSection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Tracking.Configuration.TrackingProfileConfigurationSection" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Tracking.Configuration.TrackingProfileConfigurationSection.Profiles">
      <summary>Gets a collection of tracking profile elements.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Tracking.Configuration.ProfileElementCollection" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.AddViolation">
      <summary>Carries out the functionality of gathering constraint violations and putting them in a list.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.AddViolation.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.AddViolation" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.AddViolation.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Adds a workflow constraint violation to a list of constraint violations.</summary>
      <param name="context"></param>
    </member>
    <member name="P:System.WorkflowModel.Validation.AddViolation.IsWarning">
      <summary>Gets or sets the property setting that indicates whether the violation is a warning or an error.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Validation.AddViolation.Message">
      <summary>Gets or sets the string that represents the message that describes the workflow validation constraint violation.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.AssertValidation">
      <summary>Manages the results of assert validation.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.AssertValidation.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.AssertValidation" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Validation.AssertValidation.Assertion">
      <summary>Gets or sets a value that indicates whether the assert validation resolved to true or false.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Validation.AssertValidation.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Adds an assert violation to a list of run-time constraint violations.</summary>
      <param name="context">The activity execution context that contains the properties of the assert to be validated.</param>
    </member>
    <member name="P:System.WorkflowModel.Validation.AssertValidation.IsWarning">
      <summary>Gets or sets the value that indicates whether the result of the assert validation is a warning or an error.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Validation.AssertValidation.Message">
      <summary>Gets or sets the text string that states the results of the assert validation.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.Constraint">
      <summary>Manages constraint violations in a workflow run-time environment.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.Constraint.AddViolation(System.WorkflowModel.ActivityExecutionContext,System.WorkflowModel.Validation.ConstraintViolation)">
      <summary>Adds a constraint violation to a list of run-time constraint violations attached to the execution context.</summary>
      <param name="context">The workflow activity execution context that may include run-time constraints.</param>
      <param name="violation">The error message that describes a constraint violation that occurs during workflow runtime.</param>
    </member>
    <member name="M:System.WorkflowModel.Validation.Constraint.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Invokes the process that validates a workflow element.</summary>
      <param name="context">The workflow activity execution context that may include run-time constraints.</param>
    </member>
    <member name="M:System.WorkflowModel.Validation.Constraint.OnExecute(System.WorkflowModel.ActivityExecutionContext,System.Object)">
      <summary>Carries out specified validation of a workflow element.</summary>
      <param name="context">The workflow activity execution context that may include run-time constraints.</param>
      <param name="objectToValidate">A workflow element.</param>
    </member>
    <member name="F:System.WorkflowModel.Validation.Constraint.ViolationListPropertyName">
      <summary>The name for a list of workflow run-time constraint violations.</summary>
    </member>
    <member name="T:System.WorkflowModel.Validation.Constraint`1">
      <summary>Handles the validation of a generic element whose content is based on the type.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Validation.Constraint`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.Constraint`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Validation.Constraint`1.Body">
      <summary>The contents of a generic element to be validated.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.ActivityAction`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.ConstraintViolation">
      <summary>Represents one constraint violation stored in a message string.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.ConstraintViolation.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.ConstraintViolation" /> class with a message string that describes a specific constraint violation.</summary>
      <param name="message"></param>
    </member>
    <member name="M:System.WorkflowModel.Validation.ConstraintViolation.#ctor(System.String,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.ConstraintViolation" /> class with a message string that describes a constraint violation and a value that indicates whether the constraint violation is a warning or an error.</summary>
      <param name="message"></param>
      <param name="isWarning"></param>
    </member>
    <member name="P:System.WorkflowModel.Validation.ConstraintViolation.IsWarning">
      <summary>Gets the value that indicates whether the constraint violation message is a warning or an error.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Validation.ConstraintViolation.Message">
      <summary>Gets the message string that contains the constraint violation.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.ValidationResults">
      <summary>Processes run-time validation results into lists of errors and warnings that represent the degree of operational compliance with run-time constraints.</summary>
    </member>
    <member name="P:System.WorkflowModel.Validation.ValidationResults.AllViolations">
      <summary>Returns an empty or filled list of error and warning violations that are the result of the workflow run-time validation process.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Validation.ValidationResults.GetErrors">
      <summary>Returns an empty or filled list of error violations that are the result of the workflow run-time validation process.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Validation.ValidationResults.GetWarnings">
      <summary>Returns an empty or filled list of warning violations that are the result of the workflow run-time validation process.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.ValidatorSettings">
      <summary>Represents settings used to control a workflow run-time validation process.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.ValidatorSettings.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Validation.ValidatorSettings" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Validation.ValidatorSettings.AdditionalConstraints">
      <summary>Gets a collection of settings for policy constraints that control a workflow run-time validation process.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Validation.ValidatorSettings.SingleLevel">
      <summary>Indicates whether a configuration file element has child elements.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Validation.ValidatorSettings.SuppressBuildConstraints">
      <summary>Indicates whether build constraints should be ignored during a run-time validation process.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Validation.WorkflowValidator">
      <summary>Verifies that a workflow element complies with run-time constraints.</summary>
    </member>
    <member name="M:System.WorkflowModel.Validation.WorkflowValidator.Validate(System.WorkflowModel.WorkflowElement)">
      <summary>Verifies that a workflow element operates correctly under the default run-time constraints.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Validation.ValidationResults" />.</returns>
      <param name="toValidate">The workflow element that is tested for compliance with run-time constraints.</param>
    </member>
    <member name="M:System.WorkflowModel.Validation.WorkflowValidator.Validate(System.WorkflowModel.WorkflowElement,System.WorkflowModel.Validation.ValidatorSettings)">
      <summary>Verifies that a workflow element operates correctly under the specified constraints.</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Validation.ValidationResults" />.</returns>
      <param name="toValidate">The workflow element that is tested for compliance with run-time constraints.</param>
      <param name="settings">Properties that enable control of the functionality of the validation process.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Xaml.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xaml</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute">
      <summary>Notates types for legacy reporting of XAML markup extension characteristics.</summary>
    </member>
    <member name="M:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" /> class. </summary>
      <param name="type">The return type that this attribute reports. </param>
    </member>
    <member name="P:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.Type">
      <summary>Gets or sets the return type that this attribute reports. </summary>
      <returns>The return type that this attribute reports. </returns>
    </member>
    <member name="T:System.Windows.Markup.AmbientAttribute">
      <summary>Specifies that a property or type should be treated as ambient. The ambient concept relates to how XAML processors determine type owners of members.</summary>
    </member>
    <member name="M:System.Windows.Markup.AmbientAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.AmbientAttribute" /> class.</summary>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary>Implements x:Array support for general CLR XAML processor implementation.</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ArrayExtension" /> class. This creates an empty array. </summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ArrayExtension" /> class based on the provided raw array.</summary>
      <param name="elements">The array to populate the extension with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ArrayExtension" /> class and initializes the type of the array. </summary>
      <param name="arrayType">The object type of the new array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayType" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary>Appends the supplied object to the end of the array. </summary>
      <param name="value">The object to add to the end of the array.</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary>Adds a text node as a new array item.</summary>
      <param name="text">The text to add to the end of the array.</param>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary>Gets the contents of the array. Settable in XAML through XAML collection setting syntax.</summary>
      <returns>The array contents.</returns>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary>Returns an array that is sized to the number of objects supplied in the <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> values. </summary>
      <returns>The created array.</returns>
      <param name="serviceProvider">An object that can provide services for the markup extension.</param>
      <exception cref="T:System.InvalidOperationException">Provided a value for an array that did not provide a type.-or-There is a type mismatch between the declared type of the array and one of its members. This case will have an inner exception of <see cref="T:System.InvalidCastException" />.</exception>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary>Gets or sets the type of array to be created when calling <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" />.</summary>
      <returns>The type of the array.</returns>
    </member>
    <member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
      <summary>Specifies that a property can be initialized by using a non-default constructor parameter of the specified name. This information is primarily for XAML serialization.</summary>
    </member>
    <member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" /> class.</summary>
      <param name="argumentName">The name of the constructor that will initialize the associated property.</param>
    </member>
    <member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
      <summary>Gets the name parameter of the constructor that will initialize the associated property.</summary>
      <returns>The name of the constructor. Assuming CLR backing, this corresponds to the <see cref="P:System.Reflection.ParameterInfo.Name" /> of the relevant constructor parameter.</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary>Indicates which property of a type is the XAML content property. A XAML processor uses this information when processing XAML child elements of XAML representations of the attributed type.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> class, by using the specified name.</summary>
      <param name="name">The property name for the property that is the content property.</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary>Gets the name of the property that is the content property.</summary>
      <returns>The name of the property that is the content property.</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentWrapperAttribute">
      <summary>Specifies one or more types on the associated collection type that will be used to wrap foreign content.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> class. </summary>
      <param name="contentWrapper">The <see cref="T:System.Type" /> that is declared as a content wrapper for the collection type.</param>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper">
      <summary>Gets the type that is declared as a content wrapper for the collection type associated with this attribute.</summary>
      <returns>The type that is declared as a content wrapper for the collection type.</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> is equivalent this <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> by comparing the <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> properties.</summary>
      <returns>true if the <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> properties are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.GetHashCode">
      <summary>Gets a hash code for this instance.</summary>
      <returns>An integer hash code</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.TypeId">
      <summary>Gets a unique identifier for this attribute. </summary>
      <returns>A unique identifier for the attribute.</returns>
    </member>
    <member name="T:System.Windows.Markup.DateTimeValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DateTimeValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.DateTime" />.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">The string to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified object can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.DateTime" />.</summary>
      <returns>A new instance of <see cref="T:System.DateTime" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert into a <see cref="T:System.DateTime" />.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.DateTime" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.DateTime" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is not a <see cref="T:System.DateTime" /> or is null.</exception>
    </member>
    <member name="T:System.Windows.Markup.DependsOnAttribute">
      <summary>Indicates that the associated property is dependent on the value of another property.</summary>
    </member>
    <member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DependsOnAttribute" /> class.</summary>
      <param name="name">The property that the property associated with this <see cref="T:System.Windows.Markup.DependsOnAttribute" /> depends on.</param>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.Name">
      <summary>Gets the name of the related property declared in this <see cref="T:System.Windows.Markup.DependsOnAttribute" />.</summary>
      <returns>The name of the related property.</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
      <summary>Gets a unique identifier for this <see cref="T:System.Windows.Markup.DependsOnAttribute" />. </summary>
      <returns>The unique identifier.</returns>
    </member>
    <member name="T:System.Windows.Markup.DictionaryKeyPropertyAttribute">
      <summary>Specifies a property of the associated class that provides the implicit key value. Implicit keys are used for keys rather than explicit x:Key attributes defined in XAML for an item in <see cref="T:System.Collections.IDictionary" /> collections.</summary>
    </member>
    <member name="M:System.Windows.Markup.DictionaryKeyPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" /> class.</summary>
      <param name="name">The name of the property that provides the implicit key value.</param>
    </member>
    <member name="P:System.Windows.Markup.DictionaryKeyPropertyAttribute.Name">
      <summary>Gets the name of the property that provides the implicit key value.</summary>
      <returns>The name of the property that provides the implicit key value.</returns>
    </member>
    <member name="T:System.Windows.Markup.IComponentConnector">
      <summary>Provides markup compile and tools support for named XAML elements and for attaching event handlers to them.</summary>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content. </summary>
      <param name="connectionId">An identifier token to distinguish calls.</param>
      <param name="target">The target to connect events and names to.</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
      <summary>Loads the compiled page of a component.</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScope">
      <summary>Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope. </summary>
    </member>
    <member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
      <summary>Returns an object that has the provided identifying name. </summary>
      <returns>The object, if found. Returns null if no object of that name was found.</returns>
      <param name="name">The name identifier for the object being requested.</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
      <summary>Registers the provided name into the current XAML namescope. </summary>
      <param name="name">The name to register.</param>
      <param name="scopedElement">The specific element that the provided <paramref name="name" /> refers to.</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
      <summary>Unregisters the provided name from the current XAML namescope. </summary>
      <param name="name">The name to unregister.</param>
    </member>
    <member name="T:System.Windows.Markup.INameScopeDictionary">
      <summary>Unifies enumerable, collection, and dictionary support that are useful for exposing a dictionary of names in a XAML namescope.</summary>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary>Represents a service that reports situational object-property relationships for markup extension evaluation.</summary>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary>Gets the target object being reported.</summary>
      <returns>The target object being reported.</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary>Gets an identifier for the target property being reported.</summary>
      <returns>An identifier for the target property being reported.</returns>
    </member>
    <member name="T:System.Windows.Markup.IQueryAmbient">
      <summary>Queries for whether a specified property should be treated as ambient in the current scope.</summary>
    </member>
    <member name="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)">
      <summary>Queries for whether a specified named property can be considered ambient in the current scope.</summary>
      <returns>true if the requested property can be considered ambient; otherwise, false.</returns>
      <param name="propertyName">The name of the property to check for ambience state.</param>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary>Represents a service that can use application context to resolve a provided relative URI to an absolute URI.</summary>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary>Gets or sets the base URI of the current application context. </summary>
      <returns>The base URI of the application context.</returns>
    </member>
    <member name="T:System.Windows.Markup.IValueSerializerContext">
      <summary>Defines a context that is provided to a <see cref="T:System.Windows.Markup.ValueSerializer" />. The context can be used to enable special cases of serialization or different modes of serialization.</summary>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>Gets a <see cref="T:System.Windows.Markup.ValueSerializer" /> for the given property descriptor.</summary>
      <returns>A <see cref="T:System.Windows.Markup.ValueSerializer" /> capable of serializing the specified property.</returns>
      <param name="descriptor">The descriptor of the property being converted.</param>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> associated with the specified type.</summary>
      <returns>A <see cref="T:System.Windows.Markup.ValueSerializer" /> capable of serializing the specified type.</returns>
      <param name="type">The type of the value being converted.</param>
    </member>
    <member name="T:System.Windows.Markup.IXamlTypeResolver">
      <summary>Represents a service that resolves from named elements in XAML markup to the appropriate CLR type.</summary>
    </member>
    <member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
      <summary>Resolves a named XAML type to the corresponding CLR <see cref="T:System.Type" />.</summary>
      <returns>The <see cref="T:System.Type" /> that <paramref name="qualifiedTypeName" /> resolves to </returns>
      <param name="qualifiedTypeName">The XAML type name to resolve. The type name is optionally qualified by the prefix for a XML namespace. Otherwise the current default XML namespace is assumed.</param>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtension">
      <summary>Provides a base class for XAML markup extensions.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.#ctor">
      <summary>Initializes a new instance of a class derived from <see cref="T:System.Windows.Markup.MarkupExtension" />. </summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension. </summary>
      <returns>The object value to set on the property where the extension is applied. </returns>
      <param name="serviceProvider">Object that can provide services for the markup extension.</param>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
      <summary>Reports the type that a markup extension can return.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />  class using the provided <see cref="T:System.Type" />.</summary>
      <param name="returnType">The return type that this  .NET Framework attribute reports.</param>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>Do not use, see Remarks.</summary>
      <param name="returnType">The return type that this  .NET Framework attribute reports.</param>
      <param name="expressionType">Do not use; see Remarks.</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ExpressionType">
      <summary>Do not use; see Remarks.</summary>
      <returns>Do not use; see Remarks.</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
      <summary>Gets the <see cref="T:System.Windows.Markup.MarkupExtension" /> return type that this .NET Framework attribute reports.</summary>
      <returns>The type-safe return type of the specific <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> implementation of the markup extension where the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />  .NET Framework attribute is applied.</returns>
    </member>
    <member name="T:System.Windows.Markup.MemberDefinition">
      <summary>Provides the base class that is used for a markup technique of defining members of a class in declarative XAML.</summary>
    </member>
    <member name="M:System.Windows.Markup.MemberDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MemberDefinition" /> class. </summary>
    </member>
    <member name="P:System.Windows.Markup.MemberDefinition.Name">
      <summary>When implemented in a derived class, gets or sets the name of the member to define.</summary>
      <returns>The name of the member to define.</returns>
    </member>
    <member name="T:System.Windows.Markup.NameReferenceConverter">
      <summary>Provides type conversion to convert a string name into an object reference to the object with that name, or to return the name of an object from the object graph.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NameReferenceConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of one type to another object. </summary>
      <returns>true if this converter can perform the conversion; otherwise, false. </returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether the converter can convert an object to the specified destination type. </summary>
      <returns>true if the converter can perform the conversion; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the provided object to another object, using the specified context and culture information. </summary>
      <returns>The returned object, which is potentially any object that is type-mapped in the relevant backing assemblies and capable of being declared in XAML with a XAML name reference.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The reference name string to convert.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is a null string or empty string.-or-<see cref="T:System.Xaml.IXamlNameResolver" /> service is missing or invalid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts an object to the specified type. This is intended to return XAML reference names for objects in an object graph.</summary>
      <returns>The reference name of the input <paramref name="value" /> object.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The object to retrieve the reference name for.</param>
      <param name="destinationType">The type to return. You should always reference the <see cref="T:System.String" /> type.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xaml.IXamlNameProvider" /> service is missing or invalid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Markup.NameScopePropertyAttribute">
      <summary>Specifies a property of the associated class that provides the XAML namescope value.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> class with the specified name.</summary>
      <param name="name">The name of the property on the attributed type that provides the XAML namescope.</param>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> class with the specified name and type.</summary>
      <param name="name">The name of the attachable member that provides the XAML name scope.</param>
      <param name="type">The owner type of the attachable member that provides the XAML name scope.</param>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Name">
      <summary>Gets the name of the property that provides the XAML namescope.</summary>
      <returns>A string value that is the name of the property that provides the XAML namescope.</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Type">
      <summary>Gets the owner type of the attached property that provides the XAML namescope support.</summary>
      <returns>A <see cref="T:System.Type" /> value that is the owner type of the attached property that provides the XAML namescope support, or null. See Remarks.</returns>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary>Implements a XAML markup extension in order to return a null object, which you can use to explicitly set values to null in XAML. </summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NullExtension" /> class. </summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary>Provides null to use as a value as the output of this markup extension. </summary>
      <returns>A null reference.</returns>
      <param name="serviceProvider">An object that can provide services for the markup extension implementation.</param>
    </member>
    <member name="T:System.Windows.Markup.PropertyDefinition">
      <summary>Supports a markup technique of defining properties of a class in declarative XAML.</summary>
    </member>
    <member name="M:System.Windows.Markup.PropertyDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.PropertyDefinition" /> class. </summary>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Attributes">
      <summary>Gets a list of associated CLR attributes.</summary>
      <returns>A list of associated attributes.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Modifier">
      <summary>Gets or sets the access level of the defined property.</summary>
      <returns>The access level of the defined property, as a string.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Name">
      <summary>Gets or sets the name of the property to define.</summary>
      <returns>The name of the property to define.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Type">
      <summary>Gets or sets the <see cref="T:System.Xaml.XamlType" /> of the property to define.</summary>
      <returns>The XAML type identifier of the property to define.</returns>
    </member>
    <member name="T:System.Windows.Markup.Reference">
      <summary>Implements the {x:Reference} markup extension.</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.Reference" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.Reference" /> class with the <paramref name="name" /> argument.</summary>
      <param name="name">The XAML name of the element to reference.</param>
    </member>
    <member name="P:System.Windows.Markup.Reference.Name">
      <summary>Gets or sets the XAML name to obtain the reference for.</summary>
      <returns>The XAML name of the element to obtain the reference for.</returns>
    </member>
    <member name="M:System.Windows.Markup.Reference.ProvideValue(System.IServiceProvider)">
      <summary>Returns an object that is the value of the target property. For the <see cref="T:System.Windows.Markup.Reference" /> type, this is the object that the provided <see cref="P:System.Windows.Markup.Reference.Name" /> references.</summary>
      <returns>The value of the target property. This is potentially any object that is type-mapped in the relevant backing assemblies.</returns>
      <param name="serviceProvider">A class that implements the <see cref="T:System.Xaml.IXamlNameResolver" /> service. </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="serviceProvider" /> value does not implement the <see cref="T:System.Xaml.IXamlNameResolver" /> service.-or-<see cref="P:System.Windows.Markup.Reference.Name" /> value has not been set through construction or positional usage.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Markup.RootNamespaceAttribute">
      <summary>Represents an assembly level attribute that is used to identify the value of the RootNamespace property in a Visual Studio project file.</summary>
    </member>
    <member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.RootNamespaceAttribute" /> class.</summary>
      <param name="nameSpace">The root namespace value.</param>
    </member>
    <member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
      <summary>Gets the string that corresponds to the value of the RootNamespace property in a Visual Studio project file.</summary>
      <returns>The string that corresponds to the value of the RootNamespace property in a Visual Studio project file.</returns>
    </member>
    <member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
      <summary>Represents a type-level attribute that reports which property of the type maps to the XAML x:Name attribute.</summary>
    </member>
    <member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> class.</summary>
      <param name="name">The name of the property to use as the x:Name equivalent of the class.</param>
    </member>
    <member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
      <summary>Gets the name of the runtime name property that is specified by this <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" />.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary>Implements a markup extension that returns static field and property references. </summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.StaticExtension" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.StaticExtension" /> class using the provided <paramref name="member" /> string.</summary>
      <param name="member">A string that identifies the member to make a reference to. This string uses the format prefix:typeName.fieldOrPropertyName. prefix is the mapping prefix for a XAML namespace, and is only required to reference static values that are not mapped to the default XAML namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary>Gets or sets a member name string that is used to resolve a static field or property based on the service-provided type resolver.</summary>
      <returns>A string that identifies the member to make a reference to. See Remarks.</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set <see cref="P:System.Windows.Markup.StaticExtension.Member" />  to null.</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.MemberType">
      <summary>Gets or sets the <see cref="T:System.Type" /> that defines the static member to return.</summary>
      <returns>The <see cref="T:System.Type" /> that defines the static member to return.</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set <see cref="P:System.Windows.Markup.StaticExtension.MemberType" />  to null.</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary>Returns an object value to set on the property where you apply this extension. For <see cref="T:System.Windows.Markup.StaticExtension" />, the return value is the static value that is evaluated for the requested static member.</summary>
      <returns>The static value to set on the property where the extension is applied. </returns>
      <param name="serviceProvider">An object that can provide services for the markup extension. The service provider is expected to provide a service that implements a type resolver (<see cref="T:System.Windows.Markup.IXamlTypeResolver" />).</param>
      <exception cref="T:System.InvalidOperationException">The <paramref name="member" /> value for the extension is null at the time of evaluation.</exception>
      <exception cref="T:System.ArgumentException">Some part of the <paramref name="member" /> string did not parse properly-or-<paramref name="serviceProvider" /> did not provide a service for <see cref="T:System.Windows.Markup.IXamlTypeResolver" />-or-<paramref name="member" /> value did not resolve to a static member.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
      <summary>Indicates to XAML processors that the whitespace surrounding elements of the type in markup should be trimmed when serializing.</summary>
    </member>
    <member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" /> class.</summary>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary>Implements a markup extension that returns a <see cref="T:System.Type" /> based on a string input. </summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TypeExtension" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TypeExtension" /> class, initializing the <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> value based on the provided <paramref name="typeName" /> string.</summary>
      <param name="typeName">A string that identifies the type to make a reference to. This string uses the format prefix:className. prefix is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace.</param>
      <exception cref="T:System.ArgumentNullException">Attempted to specify <paramref name="typeName" /> as null.</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TypeExtension" /> class, declaring the type directly.</summary>
      <param name="type">The type to be represented by this <see cref="T:System.Windows.Markup.TypeExtension" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary>Returns an object that should be set on the property where this extension is applied. For <see cref="T:System.Windows.Markup.TypeExtension" /> , this is the <see cref="T:System.Type" /> value as evaluated for the requested type name.</summary>
      <returns>The <see cref="T:System.Type" /> to set on the property where the extension is applied. </returns>
      <param name="serviceProvider">Object that can provide services for the markup extension. The provider is expected to provide a service for <see cref="T:System.Windows.Markup.IXamlTypeResolver" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="member" /> value for the extension is null.</exception>
      <exception cref="T:System.ArgumentException">Some part of the <paramref name="typeName" /> string did not parse properly.-or-<paramref name="serviceProvider" /> did not provide a service for <see cref="T:System.Windows.Markup.IXamlTypeResolver" />-or-<paramref name="typeName" /> value did not resolve to a type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> is null</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary>Gets or sets the type information for this extension.</summary>
      <returns>The established type. For runtime purposes, this may be null for get access, but cannot be set to null.</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set to null.</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary>Gets or sets the type name represented by this markup extension.</summary>
      <returns>A string that identifies the type. This string uses the format prefix:className. (prefix is the mapping prefix for an XML namespace, and is only required to reference types that are not mapped to the default XML namespace for WPF (http://schemas.microsoft.com/winfx/2006/xaml/presentation).</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set to null.</exception>
    </member>
    <member name="T:System.Windows.Markup.UidPropertyAttribute">
      <summary>Indicates the CLR property of a class that provides the x:Uid Attribute value.</summary>
    </member>
    <member name="M:System.Windows.Markup.UidPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.UidPropertyAttribute" /> class.</summary>
      <param name="name">The name of the property that provides the x:Uid Attribute value.</param>
    </member>
    <member name="P:System.Windows.Markup.UidPropertyAttribute.Name">
      <summary>Gets the name of the CLR property that represents the x:Uid Attribute value.</summary>
      <returns>The name of the CLR property that represents x:Uid Attribute.</returns>
    </member>
    <member name="T:System.Windows.Markup.UsableDuringInitializationAttribute">
      <summary>Indicates whether this type is built top-down during XAML object graph creation.</summary>
    </member>
    <member name="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> class.</summary>
      <param name="usable">Defines whether the associated class is usable during initialization.</param>
    </member>
    <member name="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable">
      <summary>Gets a value that indicates whether the associated class is usable during initialization.</summary>
      <returns>true if the associated class is usable during initialization; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializer">
      <summary>Abstract class that defines conversion behavior for serialization from an object representation.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">The string to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion. </param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, determines whether the specified object can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</summary>
      <returns>A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, converts the specified object to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified object.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
      <summary>Returns an exception to throw when a conversion cannot be performed.</summary>
      <returns>An <see cref="T:System.Exception" /> object for the exception to throw when a ConvertFrom conversion cannot be performed.</returns>
      <param name="value">The object that could not be converted.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
      <summary>Returns an exception to throw when a conversion cannot be performed.</summary>
      <returns>An <see cref="T:System.Exception" /> object for the exception to throw when a ConvertTo conversion cannot be performed.</returns>
      <param name="value">The object that could not be converted.</param>
      <param name="destinationType">A type that represents the type the conversion was trying to convert to.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for a property, by passing a CLR property descriptor for the property.</summary>
      <returns>The serializer associated with the specified property. May return null.</returns>
      <param name="descriptor">The CLR property descriptor for the property to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
      <summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified property, using the specified context.</summary>
      <returns>The serializer associated with the specified property.</returns>
      <param name="descriptor">Descriptor for the property to be serialized.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
      <summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type.</summary>
      <returns>The serializer associated with the specified type. May return null.</returns>
      <param name="type">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type, using the specified context.</summary>
      <returns>The serializer associated with the specified type.</returns>
      <param name="type">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer" />.</summary>
      <returns>The types converted by this serializer.</returns>
      <param name="value">The value being serialized.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Markup.ValueSerializer" /> class that a type or property should use when it is serialized.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> class, using an assembly qualified type name string.</summary>
      <param name="valueSerializerTypeName">The assembly qualified type name string for the <see cref="T:System.Windows.Markup.ValueSerializer" /> class to use.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> class, using the specified type.</summary>
      <param name="valueSerializerType">A type that represents the type of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class.</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>Gets the type of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class reported by this attribute.</summary>
      <returns>The type of the <see cref="T:System.Windows.Markup.ValueSerializer" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>Gets the assembly qualified name of the <see cref="T:System.Windows.Markup.ValueSerializer" /> type for this type or property.</summary>
      <returns>The assembly qualified name of the type.</returns>
    </member>
    <member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
      <summary>Indicates that a collection type should be processed as being whitespace significant by a XAML processor.</summary>
    </member>
    <member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" /> class.</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlDeferLoadAttribute">
      <summary>Indicates that a class or property has a deferred load usage for XAML (such as a template behavior), and reports the class that enables the deferring behavior and its destination/content type.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> class, using string names of types. </summary>
      <param name="loaderType">The string name of the type for the implementation to use for the defer load behavior.</param>
      <param name="contentType">The string name of the type for the destination/content type of the defer load behavior.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> or <paramref name="contentType" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> class, using CLR <see cref="T:System.Type" /> values. </summary>
      <param name="loaderType">The CLR <see cref="T:System.Type" /> value for the implementation to use for the defer load behavior.</param>
      <param name="contentType">The CLR <see cref="T:System.Type" /> value for the destination/content type of the defer load behavior.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> or <paramref name="contentType" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentType">
      <summary>Gets the CLR <see cref="T:System.Type" /> value for the destination/content type of the defer load behavior.</summary>
      <returns>The CLR <see cref="T:System.Type" /> value for the destination/content type of the defer load behavior.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentTypeName">
      <summary>Gets the string name of the type for the implementation to use for the defer load behavior.</summary>
      <returns>The string name of the type for the converter to use for the defer load behavior.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderType">
      <summary>Gets the CLR <see cref="T:System.Type" /> value for the implementation to use for the defer load behavior.</summary>
      <returns>The CLR <see cref="T:System.Type" /> value for the implementation to use for the defer load behavior.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderTypeName">
      <summary>Gets the string name of the type for the destination/content type of the defer load behavior.</summary>
      <returns>The string name of the type for the destination/content type of the defer load behavior.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute">
      <summary>Indicates that a class can use a markup extension to provide a value, and references a handler to use for markup extension set operations.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" /> class. </summary>
      <param name="xamlSetMarkupExtensionHandler">The name of the handler to use for markup extension set operations.</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionAttribute.XamlSetMarkupExtensionHandler">
      <summary>Gets the name of the handler to use for markup extension set operations.</summary>
      <returns>The name of the handler to use for markup extension set operations.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs">
      <summary>Provides data for callbacks that are invoked when a XAML object writer sets a value using a markup extension.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.#ctor(System.Xaml.XamlMember,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> class. </summary>
      <param name="member">XAML type system / schema information for the member being set.</param>
      <param name="value">The markup extension reference to provide for the member being set.</param>
      <param name="serviceProvider">Service provider information passed to the markup extension.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.CallBase">
      <summary>Provides a way to invoke a callback as defined on a base class of the current acting type.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.MarkupExtension">
      <summary>Gets the <see cref="T:System.Windows.Markup.MarkupExtension" /> reference that is relevant to this <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />.</summary>
      <returns>The markup extension reference that is relevant to this <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.ServiceProvider">
      <summary>Gets service provider information that was passed to the markup extension.</summary>
      <returns>Service provider information that was passed to the markup extension.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterAttribute">
      <summary>Indicates that a class can use a type converter to provide a value, and references a handler to use for type converter setting cases.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> class.</summary>
      <param name="xamlSetTypeConverterHandler">The name of the handler to use for type converter setting operations.</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterAttribute.XamlSetTypeConverterHandler">
      <summary>Gets the <paramref name="xamlSetTypeConverterHandler" /> initialization value (the handler name) specified in the <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />.</summary>
      <returns>The <paramref name="xamlSetTypeConverterHandler" /> value specified in the <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterEventArgs">
      <summary>Provides data for callbacks that are invoked when a XAML writer sets a value using a type converter call.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.#ctor(System.Xaml.XamlMember,System.ComponentModel.TypeConverter,System.Object,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" /> class. </summary>
      <param name="member">XAML type system / schema information for the member being set.</param>
      <param name="typeConverter">The specific type converter instance being invoked.</param>
      <param name="value">The value to provide for the member being set.</param>
      <param name="serviceProvider">Service provider information that can be used by the <paramref name="typeConverter" /> class.</param>
      <param name="cultureInfo">Culture information that can be used by the <paramref name="typeConverter" /> class when calling <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> and other methods.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.CallBase">
      <summary>Provides a way to invoke a callback as defined on a base class of the current acting type.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.CultureInfo">
      <summary>Gets <see cref="T:System.Globalization.CultureInfo" /> information that can be used by the type converter class when calling <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> and other methods.</summary>
      <returns>Culture information that can be used by the type converter class </returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.ServiceProvider">
      <summary>Gets <see cref="T:System.IServiceProvider" /> information that can be used by the type converter class.</summary>
      <returns>Service provider information that can be used by the <paramref name="typeConverter" /> class.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.TypeConverter">
      <summary>Gets the <see cref="T:System.ComponentModel.TypeConverter" /> instance that is invoked and provides type conversion behavior.</summary>
      <returns>The type converter that provides type conversion behavior.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetValueEventArgs">
      <summary>Provides data for callbacks that are invoked when a <see cref="T:System.Xaml.XamlObjectWriter" /> sets certain values.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> class. </summary>
      <param name="member">XAML type system / schema information for the member being set.</param>
      <param name="value">The value to provide for the member.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase">
      <summary>When overridden in a derived class, provides a way to invoke a SetValue callback as defined on a base class of the current acting type.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Handled">
      <summary>Gets or sets a value that determines whether a caller that is using the <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> can use the values without having to call <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />.</summary>
      <returns>true if the values were useful and calling <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" /> is not necessary; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Member">
      <summary>Gets XAML type system / schema information for the member being set.</summary>
      <returns>XAML type system / schema information for the member being set.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Value">
      <summary>Gets the value to provide for the member being set.</summary>
      <returns>The value to provide for the member being set.</returns>
    </member>
    <member name="T:System.Windows.Markup.XData">
      <summary>Represents literal data that can appear as the value for a Value node.</summary>
    </member>
    <member name="M:System.Windows.Markup.XData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XData" /> class. </summary>
    </member>
    <member name="P:System.Windows.Markup.XData.Text">
      <summary>Gets or sets the literal value string that this <see cref="T:System.Windows.Markup.XData" /> wraps.</summary>
      <returns>The literal value string.</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.XmlReader">
      <summary>Gets or sets a reader for the literal data.</summary>
      <returns>A reader for the literal data.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
      <summary>Identifies the property to associate with the xml:lang attribute.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" /> class.</summary>
      <param name="name">The property name to associate with the xml:lang attribute.</param>
    </member>
    <member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
      <summary>Gets the name of the property that is specified in this attribute.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
      <summary>Specifies that a namespace (typically one that is indicated in a previously defined <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" />) is subsumed by a new namespace.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new of the <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" /> class.</summary>
      <param name="oldNamespace">The reference XML namespace URI.</param>
      <param name="newNamespace">The subsuming XML namespace URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldNamespace" /> or <paramref name="newNamespace" /> are null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
      <summary>Gets the subsuming namespace URI reported by this attribute.</summary>
      <returns>The subsuming namespace URI reported in the attribute.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
      <summary>Gets the reference namespace URI reported by this attribute.</summary>
      <returns>The reference namespace URI.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary>Specifies a mapping on a per-assembly basis between an XML namespace and a CLR namespace, which is then used for type resolution by a XAML object writer.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> class.</summary>
      <param name="xmlNamespace">The XML namespace URI.</param>
      <param name="clrNamespace">The CLR namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> or <paramref name="clrNamespace" /> are null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary>Gets or sets the name of the assembly associated with the attribute. </summary>
      <returns>The assembly name.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>Gets the CLR namespace specified in this attribute </summary>
      <returns>The CLR namespace, specified as a string.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>Gets the XML namespace URI specified in this attribute.</summary>
      <returns>The XML namespace URI.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary>Identifies a recommended prefix to associate with an XML namespace for XAML usage, when writing elements and attributes in a XAML file (serialization).</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> class.</summary>
      <param name="xmlNamespace">The XML namespace URI.</param>
      <param name="prefix">The recommended prefix string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> or <paramref name="prefix" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary>Gets the recommended prefix associated with this attribute.</summary>
      <returns>The recommended prefix string.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary>Gets the XAML namespace URI associated with this attribute.</summary>
      <returns>The XAML namespace URI. </returns>
    </member>
    <member name="T:System.Xaml.AmbientPropertyValue">
      <summary>Reports information about an ambient property, as part of an <see cref="T:System.Xaml.IAmbientProvider" /> implementation.</summary>
    </member>
    <member name="M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.AmbientPropertyValue" /> class.</summary>
      <param name="property">The identifier that represents the ambient property.</param>
      <param name="value">The value to report.</param>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.RetrievedProperty">
      <summary>Gets the XAML type system identifier (<see cref="T:System.Xaml.XamlMember" />) that represents the ambient property.</summary>
      <returns>The identifier that represents the ambient property</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.Value">
      <summary>Gets the ambient property's value.</summary>
      <returns>The ambient property's value.</returns>
    </member>
    <member name="T:System.Xaml.AttachableMemberIdentifier">
      <summary>Provides a XAML type system identifier representation for attachable members that matches the <paramref name="declaringType" />.<paramref name="memberName" /> string form for attachable member usage.</summary>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.AttachableMemberIdentifier" /> class.</summary>
      <param name="declaringType">The <paramref name="declaringType" /> component of the identifier, which should match the name of the <see cref="P:System.Xaml.XamlMember.Type" /> of its XAML type system information.</param>
      <param name="memberName">The <paramref name="memberName" /> component of the identifier, which should match the <see cref="P:System.Xaml.XamlMember.Name" /> of its XAML type system information.</param>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.DeclaringType">
      <summary>Gets or sets the <paramref name="declaringType" /> component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />.</summary>
      <returns>The <paramref name="declaringType" /> component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Object)">
      <summary>Determines whether this instance of <see cref="T:System.Xaml.AttachableMemberIdentifier" /> and a specified object, which must also be a <see cref="T:System.Xaml.AttachableMemberIdentifier" /> object, have the same value.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Xaml.AttachableMemberIdentifier" />  and its value is the same as this instance; otherwise, false. </returns>
      <param name="obj">An object (must be <see cref="T:System.Xaml.AttachableMemberIdentifier" />  in order to have a possibility of evaluating true). </param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Xaml.AttachableMemberIdentifier)">
      <summary>Determines whether this instance and another specified <see cref="T:System.Xaml.AttachableMemberIdentifier" /> object have the same value</summary>
      <returns>true if the objects have the same value; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Xaml.AttachableMemberIdentifier" /> to compare with the current <see cref="T:System.Xaml.AttachableMemberIdentifier" />. </param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Xaml.AttachableMemberIdentifier" />. </summary>
      <returns>An integer hash code. </returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.MemberName">
      <summary>Gets or sets the <paramref name="memberName" /> component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />.</summary>
      <returns>The <paramref name="memberName" /> component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Equality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.AttachableMemberIdentifier" /> objects have the same value. </summary>
      <returns>true if the value of <paramref name="left" /> is the same as the value of <paramref name="right" />; otherwise, false. </returns>
      <param name="left">A <see cref="T:System.Xaml.AttachableMemberIdentifier" />, or null.</param>
      <param name="right">A <see cref="T:System.Xaml.AttachableMemberIdentifier" />, or null.</param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Inequality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.AttachableMemberIdentifier" /> objects have different values. </summary>
      <returns>true if the value of <paramref name="left" /> is different than the value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.Xaml.AttachableMemberIdentifier" />, or null.</param>
      <param name="right">A <see cref="T:System.Xaml.AttachableMemberIdentifier" />, or null.</param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Xaml.AttachableMemberIdentifier" />. </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Xaml.AttachableMemberIdentifier" />. </returns>
    </member>
    <member name="T:System.Xaml.AttachablePropertyServices">
      <summary>Provides static helper methods that obtain values and accessor method information from an attachable property, and work with an attached property store.</summary>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>Copies all attachable property / value pairs from a specified attachable property store and into a destination array.</summary>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any  nonnull object to use a static default attachable property store.</param>
      <param name="array">The destination array. The array is a generic array, should be passed undimensioned, and should have components of <see cref="T:System.Xaml.AttachableMemberIdentifier" /> and object.</param>
      <param name="index">The source index at which to copy.</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)">
      <summary>Returns the count of the attachable property entries in the specified store.</summary>
      <returns>The integer count of entries in the store.</returns>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any non-null object to use a static default attachable property store.</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)">
      <summary>Removes the entry for the specified attachable property from the specified store.</summary>
      <returns>true if an attachable property entry for <paramref name="name" /> was found in the store and removed; otherwise, false.</returns>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any non-null object to use a static default attachable property store.</param>
      <param name="name">The identifier for the attachable property entry to remove.</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>Sets a value for the specified attachable property in the specified store.</summary>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any non-null object to use a static default attachable property store.</param>
      <param name="name">The identifier for the attachable property entry to set.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:System.InvalidOperationException">Could not set a value in the store. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>Attempts to get a value for the specified attachable property in the specified store. Does not throw an exception if the specific attachable property does not exist in the store.</summary>
      <returns>true if an attachable property entry for <paramref name="name" /> was found in the store and a value was posted to <paramref name="value" />; otherwise, false.</returns>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any nonnull object to use a static default attachable property store.</param>
      <param name="name">The string name identifier for the attachable property entry to get.</param>
      <param name="value">Out parameter. Destination object for the value if <paramref name="name" /> exists in the store and has a value.</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)">
      <summary>Attempts to get a value for the specified attachable property in the specified store, using a generic output form. Does not throw an exception if the specific attachable property does not exist in the store.</summary>
      <returns>true if an attachable property entry for <paramref name="name" /> was found in the store and a value was posted to <paramref name="value" />; otherwise, false.</returns>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any non-null object to use a static default attachable property store.</param>
      <param name="name">The identifier for the attachable property entry to get.</param>
      <param name="value">Out parameter. Destination object for the value if <paramref name="name" /> exists in the store and has a value.</param>
      <typeparam name="T">The expected type of the output.</typeparam>
    </member>
    <member name="T:System.Xaml.IAmbientProvider">
      <summary>Represents a service that can return information items of ambient properties or ambient types to type converters and markup extensions.</summary>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>Returns an enumerable set of ambient property information items for the requested set of properties.</summary>
      <returns>An enumerable set of ambient property information for the requested set of properties. The property information of each <see cref="T:System.Xaml.AmbientPropertyValue" /> returned will match one of the input <paramref name="properties" />.</returns>
      <param name="ceilingTypes">Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property. May be null.</param>
      <param name="properties">Specifies one or more property identifier objects that identify the properties to be considered ambient.</param>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])">
      <summary>Returns an enumerable set of object instances of possible ambient types for the requested types.</summary>
      <returns>An enumerable set of objects for the requested set.</returns>
      <param name="types">The set of types from which to retrieve ambient type information.</param>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>Returns a single ambient property information item from the requested set of properties, based on which such property is first encountered.</summary>
      <returns>A single ambient property information item for the first ambient property value from the <paramref name="properties" /> list that is found. </returns>
      <param name="ceilingTypes">Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property.</param>
      <param name="properties">Specifies one or more objects that identify the properties to be considered ambient.</param>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])">
      <summary>Returns the first matching object that is a possible ambient type for the requested types.</summary>
      <returns>The first result object for the requested set.</returns>
      <param name="types">The set of types from which to retrieve ambient type information.</param>
    </member>
    <member name="T:System.Xaml.IAttachedPropertyStore">
      <summary>Represents an attachable member store for an object where attachable members are set. This attachable member store can then be referenced with <see cref="T:System.Xaml.AttachablePropertyServices" />.</summary>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>Copies all attachable member / value pairs from this attachable member store and into a destination array.</summary>
      <param name="array">The destination array. The array is a generic array, should be passed undimensioned, and should have components of <see cref="T:System.Xaml.AttachableMemberIdentifier" /> and object.</param>
      <param name="index">The source index at which to copy.</param>
    </member>
    <member name="P:System.Xaml.IAttachedPropertyStore.PropertyCount">
      <summary>Gets the count of the attachable member entries in this attachable member store.</summary>
      <returns>The integer count of entries in the store.</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)">
      <summary>Removes the entry for the specified attachable member from this attachable member store.</summary>
      <returns>true if an attachable member entry for <paramref name="name" /> was found in the store and removed; otherwise, false.</returns>
      <param name="attachableMemberIdentifier">The XAML type system identifier for the attachable member entry to remove.</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>Sets a value for the specified attachable member in the specified store.</summary>
      <param name="attachableMemberIdentifier">The XAML type system identifier for the attachable member entry to set.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>Attempts to get a value for the specified attachable member in the specified store. </summary>
      <returns>true if an attachable member entry for <paramref name="name" /> was found in the store and a value was posted to <paramref name="value" />; otherwise, false.</returns>
      <param name="attachableMemberIdentifier">The XAML type system identifier for the attachable member entry to get.</param>
      <param name="value">Out parameter. Destination object for the value if <paramref name="attachableMemberIdentifier" /> exists in the store and has a value.</param>
    </member>
    <member name="T:System.Xaml.IDestinationTypeProvider">
      <summary>Represents a service that can return a type system identifier for the destination type. The destination type is relevant for cases where there is an indirect reporting of destination type for a set operation based on reflection or other mechanisms.</summary>
    </member>
    <member name="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
      <summary>Returns the CLR <see cref="T:System.Type" /> that identifies the destination type for the relevant type converter or markup extension, at the current position in a XAML node stream and using active schema context.</summary>
      <returns>A CLR <see cref="T:System.Type" /> value for the destination type.</returns>
    </member>
    <member name="T:System.Xaml.INamespacePrefixLookup">
      <summary>Represents a service that can return the recommended prefix for a XAML namespace mapping to consumers such as design environments or serializers.</summary>
    </member>
    <member name="M:System.Xaml.INamespacePrefixLookup.LookupPrefix(System.String)">
      <summary>Returns the recommended prefix to use in XAML markup, based on a specified XAML namespace identifier.</summary>
      <returns>The recommended prefix.</returns>
      <param name="ns">The XAML namespace identifier to get a prefix for, specified as a string (not URI).</param>
    </member>
    <member name="T:System.Xaml.IRootObjectProvider">
      <summary>Describes a service that can return the root object of markup being parsed.</summary>
    </member>
    <member name="P:System.Xaml.IRootObjectProvider.RootObject">
      <summary>Gets the root object from markup or from an object graph.</summary>
      <returns>The root object.</returns>
    </member>
    <member name="T:System.Xaml.IXamlIndexingReader">
      <summary>Provides a service that represents indexed node control for a simple implementation of a node based XAML reader.</summary>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.Count">
      <summary>Gets the number of nodes in the current external node set.</summary>
      <returns>The number of nodes in the current external node set.</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.CurrentIndex">
      <summary>Gets or sets the index number of the current reader position in terms of the indexed list of nodes.</summary>
      <returns>The index number of the current reader position.</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfo">
      <summary>Describes a service for reporting text line information in XAML reader implementations.</summary>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.HasLineInfo">
      <summary>Gets a value that specifies whether line information is available.</summary>
      <returns>true if line information is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LineNumber">
      <summary>Gets the line number to report.</summary>
      <returns>The line number to report.</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LinePosition">
      <summary>Gets the line position to report.</summary>
      <returns>The line position to report.</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfoConsumer">
      <summary>Describes a service where a XAML writer can use reported line information, and potentially include it in the output.</summary>
    </member>
    <member name="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)">
      <summary>Collects line information.</summary>
      <param name="lineNumber">The line number to potentially use in output.</param>
      <param name="linePosition">The line position to potentially use in output.</param>
    </member>
    <member name="P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo">
      <summary>Gets a value that determines whether a line information service should provide values and therefore also call <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> when relevant.</summary>
      <returns>true if line information is used by the implementation; otherwise, false.</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameProvider">
      <summary>Provides a service that is used during save/write operations to input an object and return a XAML name (x:Name).</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameProvider.GetName(System.Object)">
      <summary>Retrieves the name of the provided object graph object.</summary>
      <returns>The x:Name of the requested object.</returns>
      <param name="value">The object to get the name for.</param>
    </member>
    <member name="T:System.Xaml.IXamlNameResolver">
      <summary>Describes a service that can return objects specified by name, or alternatively returns a token. The service can also return an enumerable set of all named objects that are in the XAML namescope.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope">
      <summary>Returns an enumerable set of all named objects in the XAML namescope.</summary>
      <returns>An enumerable set of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> objects. For each <see cref="T:System.Collections.Generic.KeyValuePair`2" />, the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> component is a string, the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> component is the object that uses the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> name in the XAML namescope.</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Returns an object that can correct for certain markup patterns that produce forward references.</summary>
      <returns>An object that provides a token for lookup behavior to be evaluated later.</returns>
      <param name="names">Collection of names that are relevant.</param>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>Returns an object that can correct for certain markup patterns that produce forward references.</summary>
      <returns>An object that provides a token for lookup behavior to be evaluated later.</returns>
      <param name="names">Collection of names that are relevant.</param>
      <param name="canAssignDirectly">true to have the implementation immediately assign the resolved name reference to the target property. false to call the user code for a reparse. The default behavior is false.</param>
    </member>
    <member name="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable">
      <summary>Gets a value that determines whether calling <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Object,System.Collections.Generic.IEnumerable{System.String})" /> is available in order to resolve a name into a token for forward resolution.</summary>
      <returns>true if <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Object,System.Collections.Generic.IEnumerable{System.String})" /> is available as an implementation that returns a useful token for forward resolution, otherwise, false.</returns>
    </member>
    <member name="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete">
      <summary>Occurs when a XAML processor has registered all the relevant names to the backing XAML namescope.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String)">
      <summary>Resolves an object from a name reference.</summary>
      <returns>The resolved object.</returns>
      <param name="name">The name reference to resolve.</param>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)">
      <summary>Resolves an object from a name reference, and provides a tracking value that reports whether the object is fully initialized for object graph purposes.</summary>
      <returns>An object that provides a token for lookup behavior to be evaluated later.</returns>
      <param name="name">The name reference to resolve.</param>
      <param name="isFullyInitialized">true if the returned object has any dependencies on unresolved references; otherwise, false.</param>
    </member>
    <member name="T:System.Xaml.IXamlNamespaceResolver">
      <summary>Describes a service that can return a XAML namespace based on its prefix as mapped in XAML markup.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespace(System.String)">
      <summary>Retrieves a XAML namespace for the provided prefix string.</summary>
      <returns>The requested XAML namespace identifier as a string (not a URI).</returns>
      <param name="prefix">The prefix to retrieve the XAML namespace for.</param>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes">
      <summary>Returns all possible prefix-XAML namespace mappings (<see cref="T:System.Xaml.NamespaceDeclaration" /> values) that are available in the active schema context.</summary>
      <returns>An enumerable set of <see cref="T:System.Xaml.NamespaceDeclaration" /> values. To get the prefix strings specifically, get the <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" /> value from each value returned.</returns>
    </member>
    <member name="T:System.Xaml.IXamlObjectWriterFactory">
      <summary>Represents a service that generates a <see cref="T:System.Xaml.XamlObjectWriter" /> based on current internal parser context.</summary>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetParentSettings">
      <summary>Returns the <see cref="T:System.Xaml.XamlObjectWriterSettings" /> from the original internal parser context.</summary>
      <returns>Settings from the original internal parser context.</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)">
      <summary>Returns a <see cref="T:System.Xaml.XamlObjectWriter" /> based on active schema context.</summary>
      <returns>A <see cref="T:System.Xaml.XamlObjectWriter" /> with the specified settings.</returns>
      <param name="settings">Settings to use for construction and initialization of the <see cref="T:System.Xaml.XamlObjectWriter" />.</param>
    </member>
    <member name="T:System.Xaml.IXamlSchemaContextProvider">
      <summary>Represents a service that provides XAML schema context information to type converters and markup extensions.</summary>
    </member>
    <member name="P:System.Xaml.IXamlSchemaContextProvider.SchemaContext">
      <summary>Gets the <see cref="T:System.Xaml.XamlSchemaContext" /> reported by the service.</summary>
      <returns>The XAML schema context reported by the service.</returns>
    </member>
    <member name="T:System.Xaml.NamespaceDeclaration">
      <summary>Declares the identifier and a prefix for a XAML namespace, by storing these string values as separate properties.</summary>
    </member>
    <member name="M:System.Xaml.NamespaceDeclaration.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.NamespaceDeclaration" /> class with initial property values.</summary>
      <param name="ns">The XAML namespace identifier, as a string. May be null or empty.</param>
      <param name="prefix">The string prefix used for the namespace in prefix mappings. May be null or empty. Empty string may connote the default XAML namespace.</param>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Namespace">
      <summary>Gets the XAML namespace identifier component of a <see cref="T:System.Xaml.NamespaceDeclaration" />.</summary>
      <returns>The identifier of the XAML namespace.</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Prefix">
      <summary>Gets the prefix to use for mapping and usage of <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" />.</summary>
      <returns>The prefix string for this <see cref="T:System.Xaml.NamespaceDeclaration" />.</returns>
    </member>
    <member name="T:System.Xaml.XamlBackgroundReader">
      <summary>Implements a double-buffered <see cref="T:System.Xaml.XamlReader" /> that can split reading and writing to different threads.</summary>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.#ctor(System.Xaml.XamlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlBackgroundReader" /> class. </summary>
      <param name="wrappedReader">The <see cref="T:System.Xaml.XamlReader" /> that this <see cref="T:System.Xaml.XamlBackgroundReader" /> is based on. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wrappedReader" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlBackgroundReader" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release managed resources.</param>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.HasLineInfo">
      <summary>Gets a value that specifies whether line information is available.</summary>
      <returns>true if line information is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.IsEof">
      <summary>Gets a value that reports whether the reader position is at the end of file.</summary>
      <returns>true if the position is at the end of the file; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LineNumber">
      <summary>Gets the line number to report.</summary>
      <returns>The line number to report.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LinePosition">
      <summary>Gets the line position to report.</summary>
      <returns>The line position to report.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Member">
      <summary>Gets the current member at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
      <returns>The current member, or null if the position is not on a member.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Namespace">
      <summary>Gets the XAML namespace from the current node.</summary>
      <returns>The XAML namespace if available, otherwise null.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>A value of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Read">
      <summary>Provides the next XAML node from the source, if a node is available. </summary>
      <returns>true if a node is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.SchemaContext">
      <summary>Gets an object that provides schema context information for the information set.</summary>
      <returns>An object that provides schema context information for the information set.</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread">
      <summary>Creates and starts a new <see cref="T:System.Threading.Thread" /> (<see cref="T:System.Threading.ParameterizedThreadStart" /> constructed) that handles a named thread for the <see cref="T:System.Xaml.XamlReader" /> .</summary>
      <exception cref="T:System.InvalidOperationException">Thread is already started.</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread(System.String)">
      <summary>Creates and starts a new <see cref="T:System.Threading.Thread" /> (<see cref="T:System.Threading.ParameterizedThreadStart" /> constructed) that handles a named thread for the <see cref="T:System.Xaml.XamlReader" />, using a provided thread name.</summary>
      <param name="threadName">Name for the thread.</param>
      <exception cref="T:System.InvalidOperationException">Thread is already started.</exception>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Type">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> of the current node.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the current node, or null if the current reader position is not on an object.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Value">
      <summary>Gets the value of the current node.</summary>
      <returns>The value of the current node, or null if the current reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</returns>
    </member>
    <member name="T:System.Xaml.XamlDeferringLoader">
      <summary>Represents a XAML reader behavior that loads and returns deferred content.</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDeferringLoader" /> class. </summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>Loads XAML content in a deferred mode, based on a <see cref="T:System.Xaml.XamlReader" /> and certain required services from a service provider.</summary>
      <returns>The root object for the node stream of the input <see cref="T:System.Xaml.XamlReader" />.</returns>
      <param name="xamlReader">The initiating reader that is then returned on calls to <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" />.</param>
      <param name="serviceProvider">Service provider for required services.</param>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>Commits a value for deferred loading.</summary>
      <returns>A reader that can be used to obtain the deferred value as XAML node information.</returns>
      <param name="value">The input value to commit for deferred loading.</param>
      <param name="serviceProvider">Service provider for required services.</param>
    </member>
    <member name="T:System.Xaml.XamlDirective">
      <summary>Provides the XAML type system identifier for a member that is also a XAML directive. The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />, and <see cref="P:System.Xaml.XamlMember.IsDirective" /> is true).</summary>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDirective" /> class, specifying values for each of the possible per-case values of a <see cref="T:System.Xaml.XamlDirective" />. </summary>
      <param name="xamlNamespaces">A set of XAML namespaces where this <see cref="T:System.Xaml.XamlDirective" /> can exist, passed as an enumerable set of the identifier strings..</param>
      <param name="name">The identifying name of the <see cref="T:System.Xaml.XamlDirective" />.</param>
      <param name="xamlType">The XAML type that backs the <see cref="T:System.Xaml.XamlDirective" />.</param>
      <param name="typeConverter">The type converter that this <see cref="T:System.Xaml.XamlDirective" /> uses for text syntax conversion.</param>
      <param name="allowedLocation">A value of the <see cref="T:System.Xaml.Schema.AllowedMemberLocations" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDirective" /> class, specifying values for a name and a single XAML namespace. Use this signature only when you want or expect <see cref="P:System.Xaml.XamlMember.IsUnknown" /> to report true for the directive.</summary>
      <param name="xamlNamespace">The primary XAML namespace where this <see cref="T:System.Xaml.XamlDirective" /> can exist.</param>
      <param name="name">The identifying name of the <see cref="T:System.Xaml.XamlDirective" />.</param>
    </member>
    <member name="P:System.Xaml.XamlDirective.AllowedLocation">
      <summary>Gets a value that specifies the XAML node types where the directive can be specified.</summary>
      <returns>A value of the enumeration. The default is the enumeration default, <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>An integer hash code.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetXamlNamespaces">
      <summary>Returns a list of XAML namespaces where this XAML member can exist. </summary>
      <returns>A list of XAML namespace identifiers as strings.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
      <summary>Returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDeferringLoader">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDependsOn">
      <summary>Returns a list of <see cref="T:System.Xaml.XamlMember" /> objects. These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupInvoker">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> associated with a <see cref="T:System.Xaml.XamlDirective" />.</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information for this <see cref="T:System.Xaml.XamlMember" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsAmbient">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> is reported as being an ambient property.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsEvent">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents an event.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadOnly">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents an intended read-only property.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadPublic">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents a property that has a public get accessor.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsUnknown">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents a member that is not resolvable by the backing system used for type and member resolution.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlDirective" /> represents a non-resolvable member; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents an intended write-only property.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWritePublic">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents a property that has a public set accessor.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTargetType">
      <summary>Returns the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupType">
      <summary>Returns the <see cref="T:System.Xaml.XamlType" /> of the type used by the member. </summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the type used by the member. </returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTypeConverter">
      <summary>Returns a type converter implementation that is associated with this <see cref="T:System.Xaml.XamlDirective" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.ComponentModel.TypeConverter" /> constraint, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
      <summary>Returns a get accessor that is associated with this <see cref="T:System.Xaml.XamlDirective" />. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
      <summary>Returns a CLR reflection <see cref="T:System.Reflection.MemberInfo" /> that is associated with this <see cref="T:System.Xaml.XamlDirective" />. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
      <summary>Returns a set accessor that is associated with this <see cref="T:System.Xaml.XamlDirective" />. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Xaml.XamlDirective" />.</summary>
      <returns>A string representation of this <see cref="T:System.Xaml.XamlDirective" />.</returns>
    </member>
    <member name="T:System.Xaml.XamlDuplicateMemberException">
      <summary>The exception that is thrown when a XAML writer attempts to write a value for a duplicate member into the same object node. </summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Xaml.XamlMember,System.Xaml.XamlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with the relevant member and type information to report.</summary>
      <param name="member">The XAML member identifier to report.</param>
      <param name="type">The XAML type identifier to report as the parent type.</param>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.DuplicateMember">
      <summary>Gets or sets the XAML member identifier for the property to report as a duplicate.</summary>
      <returns>The <see cref="T:System.Xaml.XamlMember" /> (XAML member identifier) to report.</returns>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.ParentType">
      <summary>Gets or sets the XAML type identifier to report as the parent type.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> (XAML type identifier) to report as the parent type.</returns>
    </member>
    <member name="T:System.Xaml.XamlException">
      <summary>The exception that is thrown for general XAML reader or XAML writer exception cases. See Remarks.</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" /> class with a specified error message , inner exception, and line information.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. </param>
      <param name="lineNumber">Line number to report to debugging or line information consumers.</param>
      <param name="linePosition">Line position to report to debugging or line information consumers.</param>
    </member>
    <member name="M:System.Xaml.XamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> and provides serialization support for the line information data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlException.LineNumber">
      <summary>Gets or sets the line number component of XAML text line information that the exception reports.</summary>
      <returns>The  line number component of XAML text line information.</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LinePosition">
      <summary>Gets or sets the line position component of XAML text line information that the exception reports.</summary>
      <returns>The  line position component of XAML text line information.</returns>
    </member>
    <member name="P:System.Xaml.XamlException.Message">
      <summary>Gets or sets the exception message with line information appended, if line information is available.</summary>
      <returns>The exception message with line information appended.</returns>
    </member>
    <member name="T:System.Xaml.XamlInternalException">
      <summary>The exception that is thrown for cases of internal inconsistencies during XAML reading and XAML writing. </summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlLanguage">
      <summary>Defines constants that provide strings or objects that are useful for XAML markup or programming with XAML types. These strings or objects are relevant to XAML language concepts, to the implementation of XAML language concepts in .NET XAML services, or both.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllDirectives">
      <summary>Gets a read-only generic collection of each individual <see cref="T:System.Xaml.XamlDirective" /> identifier that is defined in System.Xaml.</summary>
      <returns>A read-only generic collection of each individual <see cref="T:System.Xaml.XamlDirective" /> identifier that is defined in System.Xaml.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllTypes">
      <summary>Gets a read-only generic collection of individual <see cref="T:System.Xaml.XamlType" /> values that match or alias a XAML language intrinsic and are defined in System.Xaml.</summary>
      <returns>A read-only generic collection of each individual <see cref="T:System.Xaml.XamlType" /> that matches a XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Arguments">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Arguments of a factory method or a generic usage.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Arguments of a factory method or generic usage.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Array">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Array XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Array XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AsyncRecords">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the AsyncRecords pseudomember.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the AsyncRecords pseudomember.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Base">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the base directive from XML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the base directive from XML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Boolean">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Boolean XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Boolean XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Byte">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Byte XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Byte XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Char">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Char XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Char XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Class">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Class directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Class directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassAttributes">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the ClassAttributes directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the ClassAttributes directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassModifier">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the ClassModifier directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the ClassModifier directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Code">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for Code per [MS-XAML].</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for Code per [MS-XAML].</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ConnectionId">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> that identifies a connection point for wiring events to handlers.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> that identifies a connection point for wiring events to handlers.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Decimal">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Decimal XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Decimal XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Double">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Double XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Double XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FactoryMethod">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> that identifies a factory method for XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> that identifies a factory method for XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FieldModifier">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the FieldModifier directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the FieldModifier directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Initialization">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Initialization directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Initialization directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int16">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Int16 XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Int16 XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int32">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Int32 XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Int32 XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int64">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Int64 XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Int64 XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Items">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Items directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Items directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Key">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Key directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Key directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Lang">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the lang directive from XML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the lang directive from XML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Member">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the type that is the item type of <see cref="P:System.Xaml.XamlLanguage.Members" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the type that is the item type of <see cref="P:System.Xaml.XamlLanguage.Members" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Members">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Members concept in XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Members concept in XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Name">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Name directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Name directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Null">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Null/NullExtension XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Null/NullExtension XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Object">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Object XAML language concept.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Object XAML language concept.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.PositionalParameters">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the PositionalParameters directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the PositionalParameters directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Property">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Property concept in XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Property concept in XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Reference">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> that represents a Reference for XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> that represents a Reference for XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Shared">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Shared directive for XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Shared directive for XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Single">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Single XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Single XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Space">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the space directive from XML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the space directive from XML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Static">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Static/StaticExtension XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Static/StaticExtension XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.String">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the String XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the String XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Subclass">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Subclass directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Subclass directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.SynchronousMode">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> that enables loading XAML asynchronously if the XAML processor supports such a mode.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> that enables loading XAML asynchronously.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TimeSpan">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the TimeSpan concept in XAML language.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the TimeSpan XAML language concept.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Type">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Type/TypeExtension XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Type/TypeExtension XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TypeArguments">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the TypeArguments directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the TypeArguments directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uid">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Uid directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Uid directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.UnknownContent">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the UnknownContent directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the UnknownContent directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uri">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Uri XAML language concept.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Uri XAML language concept.</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xaml2006Namespace">
      <summary>Gets a string value for the string that identifies the XAML (2006) language namespace. That namespace corresponds to the XAML (2006) "x" prefixed namespace as defined in [MS-XAML] Section 5.1.1.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XamlNamespaces">
      <summary>Gets a collection of the namespace identifiers for XAML.</summary>
      <returns>A collection of the namespace identifiers for XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XData">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the XAML type that backs an XData block in XAML. See [MS-XAML] Section 5.2.23.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> for the XAML type that backs an XData block.</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xml1998Namespace">
      <summary>Gets a string value for the string that identifies the XML (1998) language namespace. That namespace corresponds to the XML "xml" prefixed namespace as referenced in [MS-XAML] Section 5.1.2.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XmlNamespaces">
      <summary>Gets a collection of the namespace identifiers for XML.</summary>
      <returns>A collection of the namespace identifiers for XML.</returns>
    </member>
    <member name="T:System.Xaml.XamlMember">
      <summary>Provides the XAML type system identifier for members of XAML types. The identifier is used by XAML readers and writers during processing of member nodes (when the reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />).</summary>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, based on reflection <see cref="T:System.Reflection.EventInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />.</summary>
      <param name="eventInfo">The reflection <see cref="T:System.Reflection.EventInfo" /> representing the event member.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, based on reflection <see cref="T:System.Reflection.EventInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />, along with <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</summary>
      <param name="eventInfo">The reflection <see cref="T:System.Reflection.EventInfo" /> representing the event member.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
      <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles runtime reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, based on reflection <see cref="T:System.Reflection.PropertyInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />.</summary>
      <param name="propertyInfo">The reflection <see cref="T:System.Reflection.PropertyInfo" /> representing the property member.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, based on reflection <see cref="T:System.Reflection.PropertyInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />, along with <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</summary>
      <param name="propertyInfo">The reflection <see cref="T:System.Reflection.PropertyInfo" /> representing the property member.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
      <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles runtime reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, specifically for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable property.</summary>
      <param name="attachablePropertyName">The string name of the attachable property.</param>
      <param name="getter">The reflection <see cref="T:System.Reflection.MethodInfo" /> for the get accessor of the attachable member's backing implementation.</param>
      <param name="setter">The reflection <see cref="T:System.Reflection.MethodInfo" /> for the set accessor of the attachable member's backing implementation.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, specifically for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable property, along with <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</summary>
      <param name="attachablePropertyName">The string name of the attachable property.</param>
      <param name="getter">The reflection <see cref="T:System.Reflection.MethodInfo" /> for the get accessor of the attachable member's backing implementation.</param>
      <param name="setter">The reflection <see cref="T:System.Reflection.MethodInfo" /> for the set accessor of the attachable member's backing implementation.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
      <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles runtime reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, specifically for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable event.</summary>
      <param name="attachableEventName">The string name of the attachable event.</param>
      <param name="adder">The reflection <see cref="T:System.Reflection.MethodInfo" /> for the handler add method of the attachable member's backing implementation.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, specifically for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable event, along with <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</summary>
      <param name="attachableEventName">The string name of the attachable event.</param>
      <param name="adder">The reflection <see cref="T:System.Reflection.MethodInfo" />for the handler add method of the attachable member's backing implementation.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
      <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles runtime reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, using a string name and declaring <see cref="T:System.Xaml.XamlType" /> information. A <see cref="T:System.Xaml.XamlMember" /> constructed with this signature has significant limitations; see Remarks.</summary>
      <param name="name">The string name of the member.</param>
      <param name="declaringType">
        <see cref="T:System.Xaml.XamlType" /> information for the declaring type.</param>
      <param name="isAttachable">true if the member is attachable; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="declaringType" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlMember.DeclaringType">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> for the type that declares the member associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> for the type that declares the member associated with this <see cref="T:System.Xaml.XamlMember" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeferringLoader">
      <summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DependsOn">
      <summary>Gets a list of <see cref="T:System.Xaml.XamlMember" /> objects. These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A list of <see cref="T:System.Xaml.XamlMember" /> objects.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Object)">
      <summary>Indicates whether the current object is equal to another object.</summary>
      <returns>true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.</returns>
      <param name="obj">The object to compare with this object.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>An integer hash code.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetXamlNamespaces">
      <summary>Returns a list of XAML namespaces where this XAML member can exist. </summary>
      <returns>A list of XAML namespace identifiers as strings. </returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Invoker">
      <summary>Gets the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation associated with this <see cref="T:System.Xaml.XamlMember" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAmbient">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> is reported as being an ambient property.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> is reported as being an ambient property; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAttachable">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> is an attachable member.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> is an attachable member; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsDirective">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> is a XAML directive.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> is a XAML directive; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsEvent">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> represents an event member.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents an event; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsNameValid">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> is initialized with a valid xamlName string as its <see cref="P:System.Xaml.XamlMember.Name" />.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> is initialized with a valid xamlName string; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadOnly">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> represents a read-only member.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a read-only member; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadPublic">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> represents a member with a callable public get accessor.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a callable public get accessor; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsUnknown">
      <summary>Gets a value indicating whether the member is not resolvable by the backing system used for type and member resolution.</summary>
      <returns>true if the member is not resolvable. false if the member is resolvable.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWriteOnly">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWritePublic">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> represents a member with a callable public set accessor.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a callable public set accessor; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
      <summary>When implemented in a derived class, returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</summary>
      <returns>An <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDeferringLoader">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDependsOn">
      <summary>Returns a list of <see cref="T:System.Xaml.XamlMember" /> objects. These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A list of <see cref="T:System.Xaml.XamlMember" /> objects.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupInvoker">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information for this <see cref="T:System.Xaml.XamlMember" />, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsAmbient">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> is reported as being an ambient property.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> is reported as being an ambient property; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsEvent">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents an event.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents an event; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadOnly">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents an intended read-only property.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents an intended read-only property; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadPublic">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a property that has a public get accessor.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a property with a public get accessor; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsUnknown">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that is not resolvable by the backing system used for type and member resolution.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a non-resolvable member; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWriteOnly">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a public set accessor but not a public get accessor.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWritePublic">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a public set accessor.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a writeable member; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTargetType">
      <summary>Returns the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</summary>
      <returns>The type where the <see cref="T:System.Xaml.XamlMember" /> can exist. See Remarks.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupType">
      <summary>Returns the <see cref="T:System.Xaml.XamlType" /> of the type used by the member. See Remarks.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the type used by the member. See Remarks.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTypeConverter">
      <summary>Returns a type converter implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.ComponentModel.TypeConverter" /> constraint, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
      <summary>Returns a get accessor that is associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> for the associated get accessor, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingMember">
      <summary>Returns a CLR reflection <see cref="T:System.Reflection.MemberInfo" /> that is associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A CLR reflection <see cref="T:System.Reflection.MemberInfo" /> that is associated with this <see cref="T:System.Xaml.XamlMember" />, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
      <summary>Returns a set accessor that is associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> for the associated set accessor, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupValueSerializer">
      <summary>Returns a value serializer implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint, or null.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Name">
      <summary>Gets the xamlName name string that declares this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>The xamlName name string that declares this <see cref="T:System.Xaml.XamlMember" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.XamlMember" /> objects have the same value.</summary>
      <returns>true if the value of <paramref name="xamlMember1" /> is the same as the value of <paramref name="xamlMember1" />; otherwise, false.</returns>
      <param name="xamlMember1">A <see cref="T:System.Xaml.XamlMember" /> or null.</param>
      <param name="xamlMember2">A <see cref="T:System.Xaml.XamlMember" /> or null.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.XamlMember" /> objects have different values.</summary>
      <returns>true if the value of <paramref name="xamlMember1" /> is different from the value of <paramref name="xamlMember2" />; otherwise, false.</returns>
      <param name="xamlMember1">A <see cref="T:System.Xaml.XamlMember" /> or null.</param>
      <param name="xamlMember2">A <see cref="T:System.Xaml.XamlMember" /> or null.</param>
    </member>
    <member name="P:System.Xaml.XamlMember.PreferredXamlNamespace">
      <summary>Gets the single XAML namespace URI that identifies the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />. </summary>
      <returns>The identifier for the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />, as a string.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.SerializationVisibility">
      <summary>Gets a <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> value, which indicates how a visual designer should process the member.</summary>
      <returns>A value of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> enumeration. The default is <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TargetType">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</summary>
      <returns>The type where the <see cref="T:System.Xaml.XamlMember" /> can exist. See Remarks.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A string representation of this <see cref="T:System.Xaml.XamlMember" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Type">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> of the type used by the member. See Remarks.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the type used by the member. See Remarks.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TypeConverter">
      <summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for type conversion construction of XAML declared objects.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint on the generic.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.UnderlyingMember">
      <summary>Gets <see cref="T:System.Reflection.MemberInfo" /> that is available for a member constructed by <see cref="T:System.Reflection.PropertyInfo" />, <see cref="T:System.Reflection.MethodInfo" />, or <see cref="T:System.Reflection.EventInfo" />.</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> information as cast from the initial constructor parameters. A <see cref="T:System.Xaml.XamlMember" /> constructed with the <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> signature returns null.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.ValueSerializer">
      <summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for value serialization of XAML declared objects.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint on the generic.</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeList">
      <summary>Provides a list of XAML nodes for usages such as writing XAML nodes in a deferred manner.</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlNodeList" /> class, using a provided schema context.</summary>
      <param name="schemaContext">The schema context to use for node operations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlNodeList" /> class, using a provided schema context and list size.</summary>
      <param name="schemaContext">The schema context to use for node operations.</param>
      <param name="size">The intended item count of the list.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.Clear">
      <summary>Clears the items in this list.</summary>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Count">
      <summary>Gets the number of nodes in this <see cref="T:System.Xaml.XamlNodeList" />.</summary>
      <returns>The number of nodes in this <see cref="T:System.Xaml.XamlNodeList" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlNodeList.GetReader">
      <summary>Returns a XAML reader implementation delegate.</summary>
      <returns>A XAML reader implementation delegate.</returns>
      <exception cref="T:System.Xaml.XamlException">The <see cref="T:System.Xaml.XamlNodeList" /> is still in Write mode.-or-The writer used for the node list has no schema context.</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Writer">
      <summary>Gets the associated XAML writer.</summary>
      <returns>The associated XAML writer. </returns>
    </member>
    <member name="T:System.Xaml.XamlNodeQueue">
      <summary>Provides a buffer for writing nodes and reading them again.</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeQueue.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlNodeQueue" /> class, using a provided schema context.</summary>
      <param name="schemaContext">The schema context to use for node operations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlSchemaContext" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Count">
      <summary>Gets the number of nodes in the <see cref="T:System.Xaml.XamlNodeQueue" />.</summary>
      <returns>The number of nodes in the <see cref="T:System.Xaml.XamlNodeQueue" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.IsEmpty">
      <summary>Gets a value that determines whether this <see cref="T:System.Xaml.XamlNodeQueue" /> does not contain nodes.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlNodeQueue" /> does not contain nodes. false if this <see cref="T:System.Xaml.XamlNodeQueue" /> contains nodes.</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Reader">
      <summary>Gets a XAML reader implementation delegate.</summary>
      <returns>A XAML reader implementation delegate.</returns>
      <exception cref="T:System.Xaml.XamlException">The writer used for the node list has no schema context.</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Writer">
      <summary>Gets the associated XAML writer.</summary>
      <returns>The associated XAML writer. </returns>
    </member>
    <member name="T:System.Xaml.XamlNodeType">
      <summary>Describes the type of the node currently being processed by a XAML reader.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.None">
      <summary>Not a true node (for instance might be end of file).</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartObject">
      <summary>The reader is at the start of an object node.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.GetObject">
      <summary>The reader is within an object node and writing a default or implicit value, rather than being a specified object value.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndObject">
      <summary>The reader is at the end of an object node.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartMember">
      <summary>The reader is at the start of a member node.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndMember">
      <summary>The reader is at the end of a member node.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.Value">
      <summary>The reader is within a node and processing a value.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.NamespaceDeclaration">
      <summary>The reader is within an XML namespace declaration.</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectEventArgs">
      <summary>Provides data for callbacks that can be inserted in the sequence for object initialization and property setting performed by <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectEventArgs.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectEventArgs" /> class. </summary>
      <param name="instance">The object instance that is relevant to the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.Instance">
      <summary>Gets the object instance that is relevant to the event data.</summary>
      <returns>The object instance that is relevant to the event data.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReader">
      <summary>Provides a <see cref="T:System.Xaml.XamlReader" /> implementation that reads object graphs and generates a XAML node stream.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" /> class.</summary>
      <param name="instance">The root of the object tree / object graph to read.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlObjectReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" /> class with the specified reader settings.</summary>
      <param name="instance">The root of the object tree to read.</param>
      <param name="settings">A settings object.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" /> class with the specified schema context.</summary>
      <param name="instance">The root of the object tree to read.</param>
      <param name="schemaContext">The schema context for the reader to use.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" /> class with the specified schema context and reader settings.</summary>
      <param name="instance">The root of the object tree to read.</param>
      <param name="schemaContext">The schema context for the reader to use.</param>
      <param name="settings">A settings object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Instance">
      <summary>Gets the object instance that is available at the current reader position.</summary>
      <returns>The object instance at the current reader position, or null if the reader position is not on an object.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.IsEof">
      <summary>Gets a value that reports whether the reader position is at the end of the file.</summary>
      <returns>true if the reader position is at the end of the file; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Member">
      <summary>Gets the current <see cref="T:System.Xaml.XamlMember" /> at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
      <returns>The current member, or null if the reader position is not on a member.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Namespace">
      <summary>Gets the XAML namespace declaration from the current reader position.</summary>
      <returns>The XAML namespace declaration if the reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" />; otherwise, null.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The type of the current node.</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.Read">
      <summary>Provides the next XAML node from the source object graph, if a node is available. </summary>
      <returns>true if a node is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.SchemaContext">
      <summary>Gets an object that provides schema information for the information set.</summary>
      <returns>An object that provides schema information for the information set.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Type">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> of the object at the current reader position.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the object at the current reader position, or null if the position is not on an object.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Value">
      <summary>Gets the value of the node at the current reader position.</summary>
      <returns>The value of the current node, or null if the reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderException">
      <summary>The exception that is thrown by several <see cref="T:System.Xaml.XamlObjectReader" /> internal helper APIs. </summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderSettings">
      <summary>Specifies processing rules or option settings for a <see cref="T:System.Xaml.XamlObjectReader" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderSettings" /> class.</summary>
    </member>
    <member name="P:System.Xaml.XamlObjectReaderSettings.RequireExplicitContentVisibility">
      <summary>Gets or sets a value that determines whether writers that use the associated <see cref="T:System.Xaml.XamlObjectReader" /> for context should use designer settings for writing out content.</summary>
      <returns>true if writers with this context should use designer settings for writing out content in non-<see cref="P:System.Xaml.XamlMember.IsWritePublic" /> cases. false if designer settings should be ignored.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectWriter">
      <summary>Creates an object graph from a source XAML node stream.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class that is based on the context that is used by a <see cref="T:System.Xaml.XamlReader" />.</summary>
      <param name="schemaContext">A schema context that is shared with the XAML reader that provides nodes for writing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class that is based on the context that is used by a <see cref="T:System.Xaml.XamlReader" /> and its settings.</summary>
      <param name="schemaContext">A schema context that is shared with the XAML reader that provides nodes for writing.</param>
      <param name="settings">A settings object that specifies certain options for <see cref="T:System.Xaml.XamlObjectWriter" /> behavior and output.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Clear">
      <summary>Resets all possible frames and clears the object graph.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the <see cref="T:System.Xaml.XamlObjectWriter" />, and optionally, releases the managed resources. </summary>
      <param name="disposing">true to release the managed resources; otherwise, false.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
      <summary>Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
      <param name="value">The object to report on. The object is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
      <summary>Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
      <param name="value">The object to report on. This is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
      <summary>Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
      <param name="value">The object to report on. This is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
      <summary>Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
      <param name="value">Value to pass through <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
      <summary>Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this writer, as long as <paramref name="handled" /> in <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> event data is not true.</summary>
      <returns>A Boolean value that is set by any associated handler; otherwise, false. See Remarks.</returns>
      <param name="eventSender">Object to report to the handler as the source.</param>
      <param name="member">The name of the property to set, which is passed to the handler as part of <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</param>
      <param name="value">The value to provide for the property named by <paramref name="property" />, which is passed to the handler as part of <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.Result">
      <summary>Gets the last object written. Can be null if the writer is in certain scopes.</summary>
      <returns>The last object written, or null. See Remarks.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.RootNameScope">
      <summary>Gets the <see cref="T:System.Windows.Markup.INameScope" /> service that maintains the XAML namescope for the absolute node root of the XAML object writer.</summary>
      <returns>The <see cref="T:System.Windows.Markup.INameScope" /> service that maintains the XAML namescope for the current root of the object writer.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.SchemaContext">
      <summary>Gets the active schema context.</summary>
      <returns>The schema context.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to use the set accessor.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
      <summary>Implements <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> and provides line information for exceptions.</summary>
      <param name="lineNumber">The line number from the reader.</param>
      <param name="linePosition">The line position from the reader.</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
      <summary>Gets a value that reports whether a line information service should provide values and therefore, also call <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> when relevant.</summary>
      <returns>true if line information is used by the writer; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndMember">
      <summary>Closes the current member scope, and may write the value of the member scope while it closes. The new scope becomes the parent object scope of the member.</summary>
      <exception cref="T:System.Xaml.XamlObjectWriterException">Failed to create member value from inner text/value.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndObject">
      <summary>Closes the current object scope in the writer. The new object scope becomes the parent member scope (or it becomes the root scope if the method closes the root object).</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteGetObject">
      <summary>Writes out an object for cases where the specified object is a default or implicit value of the parent property, instead of being specified as an object value in the input XAML node set.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>Defines a namespace declaration that applies to the next object scope or member scope.</summary>
      <param name="namespaceDeclaration">The namespace declaration to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> is null.</exception>
      <exception cref="T:System.ArgumentException">A component of <paramref name="namespaceDeclaration" /> is null.</exception>
      <exception cref="T:System.Xaml.XamlObjectReaderException">Attempted to write a XAML namespace node in an invalid scope.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>Writes a new member node into the current object scope, and the scope becomes a new member scope.</summary>
      <param name="property">The XAML property to write. Typically you obtain this value from a XAML reader.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">
        <paramref name="property" /> has <see cref="P:System.Xaml.XamlMember.IsUnknown" /> set to true.-or-<see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> passed, but not a content property.-or-Attempted to write a start member in an invalid scope.</exception>
      <exception cref="T:System.Xaml.XamlDuplicateMemberException">
        <paramref name="property" /> specifies a property that is already explicitly set in the parent object scope.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>Writes an object node into the current scope, and sets the scope to a new object scope.</summary>
      <param name="xamlType">The type to write. Typically you obtain this value from a XAML reader.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">Processing an <see cref="P:System.Xaml.XamlType.IsUnknown" /> type, and cannot create an object.-or-Attempted to write a start object in an invalid scope.</exception>
      <exception cref="T:System.Xaml.XamlParseException">Attempted to write root object when root object was already provided in the settings. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
      <summary>Writes a value to the current member scope. If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.</summary>
      <param name="value">The value to write.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">Attempted to write value in an invalid scope.</exception>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterException">
      <summary>The exception that is thrown when a XAML writer (such as <see cref="T:System.Xaml.XamlObjectWriter" /> class) encounters an error while attempting to produce object graphs from a XAML node stream. </summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterSettings">
      <summary>Provides specific XAML writer settings for <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterSettings" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterSettings" /> class that is based on the copy of an existing instance.</summary>
      <param name="settings">The settings instance to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settings" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AccessLevel">
      <summary>Gets or sets <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> permissions that the XAML writer observes.</summary>
      <returns>The <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> permissions.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler">
      <summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> phase of the object lifetime for each created object.</summary>
      <returns>A callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> phase of object lifetime.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler">
      <summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> phase of the object lifetime for each created object.</summary>
      <returns>A callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> phase of object lifetime.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler">
      <summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the post-member-write phase of the object lifetime for each created object.</summary>
      <returns>A callback that is invoked by the XAML writer at the post-member-write phase of object lifetime.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler">
      <summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the pre-member-write phase of the object lifetime for each created object.</summary>
      <returns>A callback that is invoked by the XAML writer at the pre-member-write phase of object lifetime.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope">
      <summary>Gets or sets the XAML namescope to use for registering names from the XAML writer if <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" /> is true.</summary>
      <returns>The XAML namescope to use for registering names. The default is null.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert">
      <summary>Gets or sets a value that specifies whether the XAML writer should ignore (not call) <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> implementations on a <see cref="T:System.ComponentModel.TypeConverter" /> in type-converter situations.</summary>
      <returns>true if the XAML writer ignores <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> implementations; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys">
      <summary>Gets or sets a value that determines whether to disable a default <see cref="T:System.Xaml.XamlObjectWriter" /> feature that runs type conversion on the <paramref name="K" /> component of a <see cref="T:System.Collections.Generic.Dictionary`2" /> before writing the object graph representation.</summary>
      <returns>true if <paramref name="K" /> type conversion for a <see cref="T:System.Collections.Generic.Dictionary`2" /> object should be disabled. false if performing <paramref name="K" /> type conversion for a <see cref="T:System.Collections.Generic.Dictionary`2" /> object applies. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope">
      <summary>Gets or sets a value that determines whether name registration should occur against the specified <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />.</summary>
      <returns>true if name registration should occur against the <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />; false if name registration should occur into the parent XAML namescope. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance">
      <summary>Gets or sets a preexisting root object for <see cref="T:System.Xaml.XamlObjectWriter" /> operations.</summary>
      <returns>A preexisting root object for <see cref="T:System.Xaml.XamlObjectWriter" /> operations.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck">
      <summary>Gets or sets a value that determines whether the XAML writer omits to check for the code path that checks for duplicate properties. </summary>
      <returns>true if the duplicate property check should be omitted; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xaml.XamlObjectWriter" /> should omit a call ProvideValue on a markup extension, which is relevant when the markup extension represents the root of an object graph. </summary>
      <returns>true if the <see cref="T:System.Xaml.XamlObjectWriter" /> should omit to call ProvideValue on a markup extension; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler">
      <summary>Gets or sets the handler to use when the object writer calls into a CLR-implemented SetValue for dependency properties.</summary>
      <returns>A handler implementation that handles this case.</returns>
    </member>
    <member name="T:System.Xaml.XamlParseException">
      <summary>The exception that is thrown when a XAML reader cannot process elements of the reader source into a XAML node stream.</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlReader">
      <summary>Provides base definitions for classes that consume XAML input and produce XAML node streams.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.#ctor">
      <summary>Initializes the <see cref="T:System.Xaml.XamlReader" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Close">
      <summary>Closes the XAML node stream.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlReader" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release the managed resources; otherwise, false.</param>
    </member>
    <member name="P:System.Xaml.XamlReader.IsDisposed">
      <summary>Gets whether <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called.</summary>
      <returns>true if <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsEof">
      <summary>When implemented in a derived class, gets a value that reports whether the reader position is at end of file.</summary>
      <returns>true if the position is at the conceptual end of file of the XAML node stream; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Member">
      <summary>When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
      <returns>The current member; or null if the position is not on a member.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Namespace">
      <summary>When implemented in a derived class, gets the XAML namespace information from the current node.</summary>
      <returns>The XAML namespace information, if it is available; otherwise, null.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.NodeType">
      <summary>When implemented in a derived class, gets the type of the current node.</summary>
      <returns>A value of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Read">
      <summary>When implemented in a derived class, provides the next XAML node from the source, if a node is available. </summary>
      <returns>true if a node is available; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.ReadSubtree">
      <summary>Returns a <see cref="T:System.Xaml.XamlReader" /> based on the current <see cref="T:System.Xaml.XamlReader" />, where the returned <see cref="T:System.Xaml.XamlReader" /> is used to iterate through a subtree of the XAML node structure.</summary>
      <returns>A new XAML reader instance for the subtree.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.SchemaContext">
      <summary>When implemented in a derived class, gets an object that provides XAML schema context information for the information set.</summary>
      <returns>An object that provides XAML schema context information for the information set.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Skip">
      <summary>Skips the current node and advances the reader position to the next node.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Xaml.XamlReader" /> class.</summary>
    </member>
    <member name="P:System.Xaml.XamlReader.Type">
      <summary>When implemented in a derived class, gets the <see cref="T:System.Xaml.XamlType" /> of the current node.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the current node; or null, if the current reader position is not on an object.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Value">
      <summary>When implemented in a derived class, gets the value of the current node.</summary>
      <returns>The value of the current node; or null, if the current reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</returns>
    </member>
    <member name="T:System.Xaml.XamlReaderSettings">
      <summary>Specifies processing rules or option settings for a <see cref="T:System.Xaml.XamlReader" /> implementation.</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlReaderSettings" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor(System.Xaml.XamlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlReaderSettings" /> class based on values in another <see cref="T:System.Xaml.XamlReaderSettings" /> object .</summary>
      <param name="settings">An existing <see cref="T:System.Xaml.XamlReaderSettings" /> object.</param>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot">
      <summary>Gets or sets a value that indicates whether the root object may include members that have a protected code access model when it reports the XAML type representation.</summary>
      <returns>true if the root object may include members that have a protected code access model; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.BaseUri">
      <summary>Gets or sets the base URI that is used to resolve relative paths.</summary>
      <returns>The base URI to use.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements">
      <summary>Gets or sets a value that specifies whether the reader should ignore values for x:Uid attributes that exist on property elements.</summary>
      <returns>true if the reader should ignore values for x:Uid attributes on property elements. false if the reader should process x:Uid attributes on property elements. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.LocalAssembly">
      <summary>Gets or sets the object that represents the current local assembly for processing. This assembly information is used for calls to helper APIs such as <see cref="M:System.Xaml.XamlType.GetAllMembers" />.</summary>
      <returns>A CLR reflection <see cref="T:System.Reflection.Assembly" /> object.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ProvideLineInfo">
      <summary>Gets or sets a value that specifies whether the reader can provide line number and position.</summary>
      <returns>true if the reader can provide line number and position information; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ValuesMustBeString">
      <summary>Gets or sets a value that specifies whether the reader enforces that all Value nodes are processed as a String type.</summary>
      <returns>true if the reader uses String exclusively for Value nodes; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaContext">
      <summary>Defines a reusable context for interpreting or mapping XAML types and the types in assemblies that underlie them.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class based on a set of reference assemblies.</summary>
      <param name="referenceAssemblies">An enumerable set of assemblies (each specified by <see cref="T:System.Reflection.Assembly" /> values).</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class based on a set of reference assemblies and a settings object.</summary>
      <param name="referenceAssemblies">An enumerable set of assemblies (each specified by <see cref="T:System.Reflection.Assembly" /> values).</param>
      <param name="settings">The settings object to use to construct the <see cref="T:System.Xaml.XamlSchemaContext" />.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class based on a settings object.</summary>
      <param name="settings">The settings object to use to construct the <see cref="T:System.Xaml.XamlSchemaContext" />.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.Finalize">
      <summary>Provides a nonstandard Finalize implementation that does not invoke Dispose.</summary>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>Gets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values returned by the lookup API.</summary>
      <returns>true if a XAML schema and its context use fully qualified assembly names in the values returned by the lookup APIs; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
      <summary>Searches the assemblies held by this <see cref="T:System.Xaml.XamlSchemaContext" /> and returns a set of namespaces. </summary>
      <returns>An enumerable set of namespace identifiers. These are provided as strings (not necessarily true URIs).</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
      <summary>Searches the assemblies held by this <see cref="T:System.Xaml.XamlSchemaContext" /> and returns a set of types from the specified XAML namespace. </summary>
      <returns>An enumerable set of XAML types (<see cref="T:System.Xaml.XamlType" /> objects).</returns>
      <param name="xamlNamespace">The XAML namespace to return types for.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
      <summary>Gets a string that is reported as the preferred prefix for consumers to use when mapping the specified XAML namespace.</summary>
      <returns>A string that consumers should use when mapping the specified XAML namespace for markup use.</returns>
      <param name="xmlns">The XAML namespace to get the preferred prefix for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlns" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
      <summary>Returns a value converter that can convert to the requested <paramref name="targetType." /></summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, with constraint matching the constraint placed on the method call.</returns>
      <param name="converterType">The converter implementation.</param>
      <param name="targetType">The desired conversion destination type.</param>
      <typeparam name="TConverterBase">The specific converter base class. </typeparam>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
      <summary>Returns a <see cref="T:System.Xaml.XamlDirective" /> value that represents a directive (either for the XAML language, or for a particular implementation).</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> object that represents the requested directive.</returns>
      <param name="xamlNamespace">The XAML namespace that contains the named directive.</param>
      <param name="name">The name of the directive to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> or <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
      <summary>Returns a <see cref="T:System.Xaml.XamlType" /> based on a XAML namespace, a string for type name, and type arguments for a possible generic type.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> that matches the input criteria.</returns>
      <param name="xamlNamespace">The XAML namespace that contains the desired type.</param>
      <param name="name">String name of the desired type.</param>
      <param name="typeArguments">Initialization type arguments for a generic type.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
      <summary>Returns a <see cref="T:System.Xaml.XamlType" /> based on a CLR type identifier.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> that matches the input <paramref name="type" />.</returns>
      <param name="type">The type to get a <see cref="T:System.Xaml.XamlType" /> for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
      <summary>Returns a <see cref="T:System.Xaml.XamlType" /> based on a XAML system type name.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> that matches the input <paramref name="xamlTypeName" />.</returns>
      <param name="xamlTypeName">The XAML type name to get a <see cref="T:System.Xaml.XamlType" /> for.</param>
      <exception cref="T:System.ArgumentException">A component of <paramref name="xamlTypeName" /> (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> or <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />) is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlTypeName" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
      <summary>Called when operations use this schema context to resolve an assembly that is required in order to resolve the XAML namespaces it contains.</summary>
      <returns>The resolved assembly.</returns>
      <param name="assemblyName">The name of the assembly to load. See Remarks.</param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
      <summary>Gets an enumerable set of reference assemblies for the schema context.</summary>
      <returns>An enumerable set of reference assemblies for the schema context.</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
      <summary>Gets a value that specifies whether a XAML schema and its context support markup extensions where there are two constructors with the same arity (number of input parameters).</summary>
      <returns>true if the schema context permits markup extensions with duplicate arity; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
      <summary>Returns success or failure of a request for a compatible XAML namespace, with a successful request reporting that XAML namespace as an out parameter.</summary>
      <returns>true if <paramref name="compatibleNamespace" /> contains a usable result; otherwise, false.</returns>
      <param name="xamlNamespace">The xmlns string  for the XAML namespace to be checked for a compatible result.</param>
      <param name="compatibleNamespace">If successful, the xmlns string for a compatible XAML namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> is null.</exception>
    </member>
    <member name="T:System.Xaml.XamlSchemaContextSettings">
      <summary>Provides optional settings for a <see cref="T:System.Xaml.XamlSchemaContext" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContextSettings" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContextSettings" /> class by copying the values of an existing <see cref="T:System.Xaml.XamlSchemaContextSettings" /> instance.</summary>
      <param name="settings">An existing <see cref="T:System.Xaml.XamlSchemaContextSettings" />. </param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>Gets or sets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values returned by the lookup API.</summary>
      <returns>true if a XAML schema and its context use fully qualified assembly names in the values returned by the lookup APIs; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity">
      <summary>Gets or sets a value that specifies whether a XAML schema and its context support markup extensions where there are two constructors with the same arity (number of input parameters).</summary>
      <returns>true if the schema context permits markup extensions with duplicate arity; otherwise, false.</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaException">
      <summary>The exception that is thrown when a binding system or other schema representation system for XAML reports an exception to the schema context.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlServices">
      <summary>Provides higher-level services (static methods) for the common XAML tasks of reading XAML and writing an object graph; or reading an object graph and writing XAML file output for serialization purposes.</summary>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
      <summary>Loads a <see cref="T:System.IO.Stream" /> source for a XAML reader and outputs an object graph.</summary>
      <returns>The output object graph.</returns>
      <param name="stream">The stream to load as input.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
      <summary>Creates a XAML reader from a <see cref="T:System.IO.TextReader" />, and returns an object tree.</summary>
      <returns>The output object graph.</returns>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> to use as the basis for the created <see cref="T:System.Xml.XmlReader" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.String)">
      <summary>Loads a <see cref="T:System.IO.Stream" /> source for a XAML reader and outputs an object graph.</summary>
      <returns>The output object graph.</returns>
      <param name="fileName">The file name to load and use as source.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
      <summary>Loads a specific XAML reader implementation and returns an object graph.</summary>
      <returns>The output object graph.</returns>
      <param name="xamlReader">The XAML reader implementation to use as the reader for this Load operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
      <summary>Loads a specific XML reader implementation and returns an object graph.</summary>
      <returns>The output object graph.</returns>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> implementation to use as the reader for this Load operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Parse(System.String)">
      <summary>Reads XAML as string output and returns an object graph.</summary>
      <returns>The output object graph.</returns>
      <param name="xaml">The XAML string input to parse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xaml" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
      <summary>Processes a provided object graph into a XAML node representation and then into an output stream for serialization.</summary>
      <param name="stream">The destination stream.</param>
      <param name="instance">The root of the object graph to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
      <summary>Processes a provided object graph into a XAML node representation and then into an output that goes to the provided <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> that writes the output.</param>
      <param name="instance">The root of the object graph to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Object)">
      <summary>Processes a provided object tree into a XAML node representation, and returns a string representation of the output XAML.</summary>
      <returns>The XAML markup output as a string. </returns>
      <param name="instance">The root of the object graph to process.</param>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
      <summary>Processes a provided object graph into a XAML node representation and then writes it to an output file at a provided location.</summary>
      <param name="fileName">The name and location of the file to write the output to.</param>
      <param name="instance">The root of the object graph to process.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> is an empty string.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
      <summary>Processes a provided object graph into a XAML node representation and then writes it to the provided XAML writer.</summary>
      <param name="writer">The <see cref="T:System.Xaml.XamlWriter" /> implementation to use.</param>
      <param name="instance">The root of the object graph to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
      <summary>Processes a provided object graph into a XAML node representation and then writes it to the provided <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> implementation to use.</param>
      <param name="instance">The root of the object graph to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
      <summary>Connects a <see cref="T:System.Xaml.XamlReader" /> and a <see cref="T:System.Xaml.XamlWriter" /> to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided.</summary>
      <param name="xamlReader">The <see cref="T:System.Xaml.XamlReader" /> implementation to use.</param>
      <param name="xamlWriter">The <see cref="T:System.Xaml.XamlWriter" /> to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> or <paramref name="xamlWriter" /> input is null.</exception>
      <exception cref="T:System.Xaml.XamlException">The XAML schema context does not match between the provided <paramref name="xamlReader" /> and <paramref name="xamlWriter" />.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
      <summary>Connects a <see cref="T:System.Xaml.XamlReader" /> and a <see cref="T:System.Xaml.XamlWriter" /> to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided. Provides a parameter for specifying whether to close the writer after the call is completed.</summary>
      <param name="xamlReader">The <see cref="T:System.Xaml.XamlReader" /> implementation to use.</param>
      <param name="xamlWriter">The <see cref="T:System.Xaml.XamlWriter" /> to use.</param>
      <param name="closeWriter">true to close the writer after the call is complete; false to leave the writer active at the last written position.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> or <paramref name="xamlWriter" /> input is null.</exception>
      <exception cref="T:System.Xaml.XamlException">The XAML schema context does not match between the provided <paramref name="xamlReader" /> and <paramref name="xamlWriter" />.</exception>
    </member>
    <member name="T:System.Xaml.XamlType">
      <summary>Reports information about XAML types as part of the overall XAML system that is implemented in System.Xaml.</summary>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class that is based on a string name for the type.</summary>
      <param name="typeName">The name of the type to create.</param>
      <param name="typeArguments">The type arguments for cases where the <see cref="T:System.Xaml.XamlType" /> is generic. May be (and often is) null.</param>
      <param name="schemaContext">Context for the XAML reader.</param>
      <exception cref="T:System.ArgumentNullException">One or more of <paramref name="typeName" /> or <paramref name="schemaContext" /> are null.</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class that is based on the XAML namespace and a string name for the type. This constructor is exclusively for analysis and XAML-node recording of types that are known to not have backing in the supporting type system and XAML schema context.</summary>
      <param name="unknownTypeNamespace">The XAML namespace for the type, as a string.</param>
      <param name="unknownTypeName">The name of the type in the provided <paramref name="unknownTypeNamespace" /> XAML namespace.</param>
      <param name="typeArguments">The type arguments for cases where the <see cref="T:System.Xaml.XamlType" /> is generic. May be (and often is) null.</param>
      <param name="schemaContext">The context for the XAML reader.</param>
      <exception cref="T:System.ArgumentNullException">One or more of <paramref name="unknownTypeNamespace" />, <paramref name="unknownTypeName" />, or <paramref name="schemaContext" /> are null.</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class that is based on the underlying CLR type information.</summary>
      <param name="underlyingType">The underlying CLR <see cref="T:System.Type" /> for the XAML type to construct.</param>
      <param name="schemaContext">The context for the XAML reader.</param>
      <exception cref="T:System.ArgumentNullException">One or more of <paramref name="underlyingType" /> or <paramref name="schemaContext" /> are null.</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class that is based on underlying type information and a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation.</summary>
      <param name="underlyingType">The underlying type for the XAML type to construct.</param>
      <param name="schemaContext">The context for the XAML reader.</param>
      <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that handles run-time reflection calls against the <see cref="T:System.Xaml.XamlType" />.</param>
      <exception cref="T:System.ArgumentNullException">One or more of <paramref name="underlyingType" /> or <paramref name="schemaContext" /> are null.</exception>
    </member>
    <member name="P:System.Xaml.XamlType.AllowedContentTypes">
      <summary>Gets a read-only collection of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" /> value for this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A read-only collection of possible content types.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.BaseType">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" /> and schema context.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
      <summary>Returns a value that indicates whether an instance of this <see cref="T:System.Xaml.XamlType" /> has the specified <see cref="T:System.Xaml.XamlType" /> in its list of assignable types.</summary>
      <returns>true if <paramref name="xamlType" /> is in the assignable types list; otherwise, false.</returns>
      <param name="xamlType">The type to check assignment from.</param>
    </member>
    <member name="P:System.Xaml.XamlType.ConstructionRequiresArguments">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> must have arguments (generic constraints through x:TypeArguments, initialization text, or other XAML techniques) to construct a valid instance of the type.</summary>
      <returns>true if construction of an instance requires some argument value; otherwise, false. </returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentProperty">
      <summary>Gets the <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />. May be null if no content property exists.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentWrappers">
      <summary>Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed Collection&lt;T&gt;.</summary>
      <returns>A read-only collection of possible content wrapper types; otherwise, null. See Remarks.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.DeferringLoader">
      <summary>Gets the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that represents the deferred loading conversion behavior for this type.</summary>
      <returns>The <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint that represents the deferred loading behavior for this type.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Object)">
      <summary>Indicates whether the current object is equal to another object.</summary>
      <returns>true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.</returns>
      <param name="obj">The object to compare with this object.</param>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
      <summary>Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The aliased member, if found; otherwise, null.</returns>
      <param name="directive">The directive to find the aliased member.</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllAttachableMembers">
      <summary>Returns a collection that contains all the attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllMembers">
      <summary>Returns a collection that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
      <summary>Specifies the name of the attachable member of the <see cref="T:System.Xaml.XamlMember" /> object from this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlMember" /> object for the requested attachable member; otherwise, null, if no attachable member by that name exists.</returns>
      <param name="name">The name of the attachable member to get, in ownerTypeName.MemberName form.</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>An integer hash code.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetMember(System.String)">
      <summary>Returns a specific member from this <see cref="T:System.Xaml.XamlType" /> by name.</summary>
      <returns>The <see cref="T:System.Xaml.XamlMember" /> information for the member, if such a member was found; otherwise, null.</returns>
      <param name="name">The name of the member to get (as a string).</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
      <summary>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A list of <see cref="T:System.Xaml.XamlType" /> values, where each <see cref="T:System.Xaml.XamlType" /> is the type for that position in the syntax. You must specify the types in the same order when you supply markup input for the markup extension.</returns>
      <param name="parameterCount">The count (arity) of the particular syntax or constructor mode that you want information about.</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetXamlNamespaces">
      <summary>Returns a list of string identifiers for XAML namespaces that the type is included in.</summary>
      <returns>A list of string values, where each string is the URI identifier for a XAML namespace.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Invoker">
      <summary>Gets the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsAmbient">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an ambient type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents an ambient type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsArray">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an array.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents an array; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsCollection">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a collection.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a collection; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsConstructible">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a constructible type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a constructible type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsDictionary">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a dictionary, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a dictionary; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsGeneric">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a generic type.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a generic type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsMarkupExtension">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a markup extension.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a markup extension; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameScope">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameValid">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is initialized by using a valid xamlName string as its <see cref="P:System.Xaml.XamlType.Name" />.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> is initialized by using a valid xamlName string; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNullable">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a nullable type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a nullable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsPublic">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a public type in the relevant type system.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a public type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUnknown">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a type that cannot be resolved in the underlying type system.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents an unresolvable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUsableDuringInitialization">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection, as per the XML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsXData">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents XML XDATA, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents XDATA; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ItemType">
      <summary>Gets a value that provides the type information for the Items property of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the type of the items in the collection; otherwise, null, if this <see cref="T:System.Xaml.XamlType" /> does not represent a collection.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.KeyType">
      <summary>Gets a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />, if the <see cref="T:System.Xaml.XamlType" /> represents a dictionary.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the type of the dictionary usage key; otherwise, null, if this <see cref="T:System.Xaml.XamlType" /> does not represent a dictionary.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
      <summary>Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The aliased member, if found; otherwise, null.</returns>
      <param name="directive">The directive to find the aliased member for.</param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllAttachableMembers">
      <summary>Returns an enumerable set that contains all attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>An enumerable set that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values; otherwise, null.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllMembers">
      <summary>Returns an enumerable set that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>An enumerable set that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllowedContentTypes">
      <summary>Returns a list of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" /> value for this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A list of possible content types.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
      <summary>Returns a specific attachable <see cref="T:System.Xaml.XamlMember" /> object from this <see cref="T:System.Xaml.XamlType" /> by name.</summary>
      <returns>A <see cref="T:System.Xaml.XamlMember" /> object for the requested attachable member; otherwise, null, if no attachable member by that name exists.</returns>
      <param name="name"></param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupBaseType">
      <summary>Returns the <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" /> and schema context.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCollectionKind">
      <summary>Returns a value of the <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> enumeration that declares which specific collection type this <see cref="T:System.Xaml.XamlType" /> uses.</summary>
      <returns>A value of the <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> enumeration </returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> must have arguments (generic constraints through x:TypeArguments, initialization text, or other XAML techniques) to construct a valid instance of the type.</summary>
      <returns>true if construction of an instance requires some argument value; otherwise, false. </returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentProperty">
      <summary>Returns <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />. May be null.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentWrappers">
      <summary>Gets a list of <see cref="T:System.Xaml.XamlType" /> values that represent the content wrappers for this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A list of <see cref="T:System.Xaml.XamlType" /> values that represent the content wrappers for this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
      <summary>When implemented in a derived class, returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</summary>
      <returns>An <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupDeferringLoader">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML-declared objects.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupInvoker">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is associated with this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> information for this <see cref="T:System.Xaml.XamlType" />; otherwise, null.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsAmbient">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an ambient type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents an ambient type; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsConstructible">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a constructible type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a constructible type; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsMarkupExtension">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a markup extension.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a markup extension; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNameScope">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNullable">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a nullable type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a nullable type; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsPublic">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a public type in the relevant type system.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a public type; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsUnknown">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a type that cannot be resolved in the underlying type system.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a nonresolvable type; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection, as per the XML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsXData">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents XML XDATA, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents XDATA; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupItemType">
      <summary>Returns a value that provides the type information for the Items property of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the type of the items in the collection; otherwise, null if this <see cref="T:System.Xaml.XamlType" /> does not represent a collection.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupKeyType">
      <summary>Returns a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />, if the <see cref="T:System.Xaml.XamlType" /> represents a dictionary.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the type of the key for dictionary usage, or null if this <see cref="T:System.Xaml.XamlType" /> does not represent a dictionary,</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
      <summary>Returns a value that provides the type information for the returned ProvideValue of this <see cref="T:System.Xaml.XamlType" />, if it represents a markup extension.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the return type for markup extension usage; otherwise, null, if this <see cref="T:System.Xaml.XamlType" /> does not represent a markup extension.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
      <summary>Returns a specific member from this <see cref="T:System.Xaml.XamlType" /> by name.</summary>
      <returns>The <see cref="T:System.Xaml.XamlMember" /> information for the member, if a member was found; otherwise, null.</returns>
      <param name="name">The name of the member to get (as a string).</param>
      <param name="skipReadOnlyCheck">true to return a member even if that member has a true value for <see cref="P:System.Xaml.XamlMember.IsReadOnly" />; false to not return a <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> member. The default is false.</param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
      <summary>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A list of <see cref="T:System.Xaml.XamlType" /> values where each such <see cref="T:System.Xaml.XamlType" /> is the type for that position in the syntax. You must specify those types in the same order when supplying markup input for the markup extension.</returns>
      <param name="parameterCount">The count (arity) of the particular syntax or constructor mode that you want information about.</param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
      <summary>Returns a handler to use for the set operations of markup extensions.</summary>
      <returns>A handler to use for the set operations of markup extensions.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
      <summary>Returns a handler to use for type converter setting cases.</summary>
      <returns>A handler to use for type converter setting cases.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> should serialize with trimmed surrounding white space.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> should serialize with trimmed surrounding white space; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTypeConverter">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type-conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type-conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, null.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUnderlyingType">
      <summary>Returns the CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />; otherwise, null.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupValueSerializer">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, null.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.MarkupExtensionReturnType">
      <summary>Gets a value that provides the type information for the returned ProvideValue of this <see cref="T:System.Xaml.XamlType" />, if it represents a markup extension.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the return type for markup extension usage; otherwise, null, if this <see cref="T:System.Xaml.XamlType" /> does not represent a markup extension.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Name">
      <summary>Gets the string name of the type that this <see cref="T:System.Xaml.XamlType" /> represents.</summary>
      <returns>The string name of this XAML type.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.XamlType" /> objects have the same value.</summary>
      <returns>true if the value of <paramref name="xamlType1" /> is the same as the value of <paramref name="xamlType2" />; otherwise, false.</returns>
      <param name="xamlType1">A <see cref="T:System.Xaml.XamlType" /> or null.</param>
      <param name="xamlType2">A <see cref="T:System.Xaml.XamlType" /> or null.</param>
    </member>
    <member name="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.XamlType" /> objects have different values.</summary>
      <returns>true if the value of <paramref name="xamlType1" /> differs from the value of <paramref name="xamlType2" />; otherwise, false.</returns>
      <param name="xamlType1">A <see cref="T:System.Xaml.XamlType" /> or null.</param>
      <param name="xamlType2">A <see cref="T:System.Xaml.XamlType" /> or null.</param>
    </member>
    <member name="P:System.Xaml.XamlType.PreferredXamlNamespace">
      <summary>Gets the single XAML namespace that is the primary XAML namespace for this <see cref="T:System.Xaml.XamlType" />. </summary>
      <returns>The identifier, as a string, of the primary XAML namespace for this XAML type.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.SchemaContext">
      <summary>Gets the active <see cref="T:System.Xaml.XamlSchemaContext" /> for processing this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The active <see cref="T:System.Xaml.XamlSchemaContext" /> for processing this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A string representation of this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> has white-space handling behavior that trims the surrounding white space in its content.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a type that uses white-space trimming; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeArguments">
      <summary>Gets a list of type arguments for cases where this <see cref="T:System.Xaml.XamlType" /> represents a generic.</summary>
      <returns>A list of type argument types; otherwise, null, if this <see cref="T:System.Xaml.XamlType" /> does not represent a generic.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeConverter">
      <summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.UnderlyingType">
      <summary>Gets the CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ValueSerializer">
      <summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, null.</returns>
    </member>
    <member name="T:System.Xaml.XamlWriter">
      <summary>Provides base implementation and base class definition for a XAML writer.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlWriter" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Close">
      <summary>Closes the XAML writer object.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlWriter" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release the managed resources; otherwise, false.</param>
    </member>
    <member name="P:System.Xaml.XamlWriter.IsDisposed">
      <summary>Gets whether <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> has been called.</summary>
      <returns>true if <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> has been called; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.SchemaContext">
      <summary>When implemented in a derived class, gets the active XAML schema context.</summary>
      <returns>The active schema context.</returns>
    </member>
    <member name="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
      <summary>See <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndMember">
      <summary>When implemented in a derived class, writes the representation of an end member node.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndObject">
      <summary>When implemented in a derived class, writes the representation of an end object node.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteGetObject">
      <summary>When implemented in a derived class, writes out an object for cases where the object in question is a default or implicit value of the property being set, rather than being specified as a discrete object value in the input XAML node set.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>When implemented in a derived class, writes a XAML namespace declaration node.</summary>
      <param name="namespaceDeclaration">The namespace declaration to write.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
      <summary>Performs switching based on node type from the XAML reader (<see cref="P:System.Xaml.XamlReader.NodeType" />) and calls the relevant Write method for the writer implementation.</summary>
      <param name="reader">The reader to use for node determination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.NotImplementedException">Default implementation encountered a <see cref="T:System.Xaml.XamlNodeType" /> that is not in the default enumeration.</exception>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>When implemented in a derived class, writes the representation of a start member node.</summary>
      <param name="xamlMember">The member node to write.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>When implemented in a derived class, writes the representation of a start object node.</summary>
      <param name="type">The XAML type of the object to write.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
      <summary>When implemented in a derived class, writes a value node.</summary>
      <param name="value">The value to write.</param>
    </member>
    <member name="T:System.Xaml.XamlWriterSettings">
      <summary>Provides initialization settings for a <see cref="T:System.Xaml.XamlWriter" /> implementation.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlWriterSettings" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor(System.Xaml.XamlWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlWriterSettings" /> class based on existing settings.</summary>
      <param name="settings">An existing <see cref="T:System.Xaml.XamlWriterSettings" /> object.</param>
    </member>
    <member name="T:System.Xaml.XamlXmlReader">
      <summary>Processes XAML markup from XML files by using an <see cref="T:System.Xml.XmlReader" /> intermediary, and produces a XAML node stream.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a stream.</summary>
      <param name="stream">The initial stream to load into the reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a stream, with a supplied XAML schema context.</summary>
      <param name="stream">The initial stream to load into the reader.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a stream, with a supplied XAML schema context and XAML-specific settings.</summary>
      <param name="stream">The initial stream to load into the reader.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a stream, with XAML-specific settings.</summary>
      <param name="stream">The initial stream to load into the reader.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a <see cref="T:System.IO.TextReader" />.</summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> to use for initialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a <see cref="T:System.IO.TextReader" />, with a supplied schema context and XAML-specific settings.</summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> to use for initialization.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a <see cref="T:System.IO.TextReader" />, with a supplied schema context and XAML-specific settings.</summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> to use for initialization.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a <see cref="T:System.IO.TextReader" />, with XAML-specific settings.</summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> to use for initialization.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a file name of a file to load into a default XML reader.</summary>
      <param name="fileName">The name of the XML file to load.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on the file name of a file to load into a default XML reader, with a supplied XAML schema context.</summary>
      <param name="fileName">The name of the file to load.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on the file name of a file to load into a default XML reader, with a supplied XAML schema context and XAML-specific reader settings.</summary>
      <param name="fileName">The name of the XML file to load.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on the file name of a file to load into a default XML reader, with XAML-specific reader settings.</summary>
      <param name="fileName">The name of the XML file to load.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, using the provided <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to use as the intermediary XML processor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, using the provided <see cref="T:System.Xml.XmlReader" /> and schema context.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to use as the intermediary XML processor.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, using the provided <see cref="T:System.Xml.XmlReader" />, schema context, and reader settings.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to use as the intermediary XML processor.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, using the provided <see cref="T:System.Xml.XmlReader" /> and reader settings.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to use as the intermediary XML processor.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.HasLineInfo">
      <summary>Gets a value that specifies whether line information is available.</summary>
      <returns>true if line information is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.IsEof">
      <summary>Gets a value that reports whether the reader position is at the end of file.</summary>
      <returns>true if the position is at the end of the file; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LineNumber">
      <summary>Gets the line number to report.</summary>
      <returns>The line number to report.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LinePosition">
      <summary>Gets the line position to report.</summary>
      <returns>The line position to report.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Member">
      <summary>Gets the current member at the reader position, if the current reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
      <returns>The current member; or null, if the current reader position is not on a member.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Namespace">
      <summary>Gets the XAML namespace from the current node.</summary>
      <returns>The XAML namespace from the current node, if it is available; otherwise, null.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>A value of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.Read">
      <summary>Provides the next XAML node from the loaded source, if a XAML node is available. </summary>
      <returns>true if a node is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.SchemaContext">
      <summary>Gets an object that provides schema information for the information set.</summary>
      <returns>An object that provides schema information for the information set.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Type">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> of the current node.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the current node; or null, if the position is not on an object.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Value">
      <summary>Gets the value of the current node.</summary>
      <returns>The value of the current node; or null, if the position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlReaderSettings">
      <summary>Specifies processing rules or option settings for the <see cref="T:System.Xaml.XamlXmlReader" /> XAML reader implementation.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReaderSettings" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor(System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReaderSettings" /> class by copying settings from an existing <see cref="T:System.Xaml.XamlXmlReaderSettings" />.</summary>
      <param name="settings">The existing <see cref="T:System.Xaml.XamlXmlReaderSettings" /> to copy.</param>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.CloseInput">
      <summary>Gets or sets a value that indicates whether the underlying stream or text reader should be closed when the <see cref="T:System.Xaml.XamlXmlReader" /> is closed.</summary>
      <returns>true to close the underlying stream or reader when the <see cref="T:System.Xaml.XamlXmlReader" /> is closed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing">
      <summary>Gets or sets a value that determines whether the reader should differ from the default <see cref="T:System.Xaml.XamlXmlReader" /> behavior of how markup compatibility content is processed.</summary>
      <returns>true to use the initiating reader directly, which means XML compatibility markup separately is processed as part of the main stream. false to use the default behavior, which processes XML compatibility separately. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlLang">
      <summary>Gets or sets the language setting value that the reader may promote to writers that write xml:lang attributes in nodes.</summary>
      <returns>The string to use for possible xml:lang output that is based on the reader.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve">
      <summary>Gets or sets a value that determines whether the reader may promote to writers that write xml:space attributes in nodes.</summary>
      <returns>true if writers that are processing the XAML node stream should potentially write xml:space="preserve" in output; false to not write xml:space attributes.</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlWriter">
      <summary>Uses a <see cref="T:System.IO.TextWriter" /> or <see cref="T:System.Xml.XmlWriter" /> support class to write XAML nodes to text or markup.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a stream.</summary>
      <param name="stream">The stream to write.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a stream, using a writer settings object.</summary>
      <param name="stream">The stream to write.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <param name="settings">An instance of <see cref="T:System.Xaml.XamlXmlWriterSettings" />, which typically has specific non-default settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="schemaContext" /> is null</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a <see cref="T:System.IO.TextWriter" /> basis.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> that writes the output.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> or <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a <see cref="T:System.IO.TextWriter" /> basis by using a settings object.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> that writes the output.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <param name="settings">An instance of <see cref="T:System.Xaml.XamlXmlWriterSettings" />, which typically has specific non-default settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> or <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a <see cref="T:System.Xml.XmlWriter" /> basis.</summary>
      <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter" /> that writes the output.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> or <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a <see cref="T:System.Xml.XmlWriter" /> basis by using a settings object.</summary>
      <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter" /> that writes the output.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <param name="settings">An instance of <see cref="T:System.Xaml.XamlXmlWriterSettings" />, which typically has specific non-default settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> or <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by <see cref="T:System.Xaml.XamlXmlWriter" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release the unmanaged resources; otherwise, false.</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Flush">
      <summary>Calls the Flush method of the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />, which writes anything that is currently in the buffer, and then closes the writer.</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.SchemaContext">
      <summary>Gets the XAML schema context that this <see cref="T:System.Xaml.XamlXmlWriter" /> uses for processing.</summary>
      <returns>The XAML schema context that this <see cref="T:System.Xaml.XamlXmlWriter" /> uses for XAML processing.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.Settings">
      <summary>Gets the writer settings that this <see cref="T:System.Xaml.XamlXmlWriter" /> uses for XAML processing.</summary>
      <returns>The writer settings that this <see cref="T:System.Xaml.XamlXmlWriter" /> uses for XAML processing.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndMember">
      <summary>Writes a XAML end member node to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. Throws an exception if the current position of the XAML node stream is not within a member, or if the internal writer state does not support writing to an end member.</summary>
      <exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is not within a member.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The current writer state does not support writing an end member.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndObject">
      <summary>Writes a XAML end object node to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. Throws an exception if the current position of the XAML node stream being processed is incompatible with writing an end object.</summary>
      <exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is within a member; or it is not in a scope where an end member can be written.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The current writer state does not support writing an end object.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteGetObject">
      <summary>Writes an object for cases where the specified object is a default or implicit value of the property being written, instead of being specified as an object value in the input XAML node set.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>Writes namespace information to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. May throw an exception for certain states; however, may instead defer writing the namespace information until the writer and the XAML node stream being processed reaches a position where a XAML namespace declaration can be inserted.</summary>
      <param name="namespaceDeclaration">The XAML namespace declaration to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" /> is not a valid XAML namespace declaration (has a null prefix or null identifier component).</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The current writer state does not support writing a XAML namespace declaration.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>Writes a XAML start member node to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. Throws an exception if the current position of the XAML node stream is within another member, or if it is not in a scope or writer state where a start member can be written.</summary>
      <param name="property">The XAML member identifier for the member to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="property" /> is not a valid <see cref="T:System.Xaml.XamlMember" />.</exception>
      <exception cref="T:System.InvalidOperationException">The current position of the XAML node stream does not support writing a start member.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The writer state is not valid for writing a start member.-or-The XAML writer attempted to write a duplicate member. This may have a more precise inner exception.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>Writes a XAML start object node to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. Throws an exception if the current position of the XAML node stream is not in a scope where a start object can be written, or if the writer is not in a state that can write a start object.</summary>
      <param name="type">The <see cref="T:System.Xaml.XamlType" /> (XAML type identifier) for the object to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a valid <see cref="T:System.Xaml.XamlType" />.</exception>
      <exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is not valid for writing a new start object.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The state of the XAML writer is not valid for writing a new start object.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteValue(System.Object)">
      <summary>Writes a XAML value node to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. Throws an exception if the current position of the XAML node stream does not support writing a value, or the writer is in a state where a value cannot be written.</summary>
      <param name="value">The value information to write.</param>
      <exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is not valid for writing a value.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The XAML writer state does not support writing a value node.</exception>
      <exception cref="T:System.ArgumentException">Attempted to write a value that was not null or a string.</exception>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterException">
      <summary>The exception that is thrown by some <see cref="T:System.Xaml.XamlXmlWriter" /> APIs. </summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterSettings">
      <summary>Provides initialization settings for the <see cref="T:System.Xaml.XamlXmlWriter" /> XAML writer implementation.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterSettings" /> class.</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.AssumeValidInput">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Xaml.XamlXmlWriter" /> always assumes valid XAML input for purposes of duplicate resolution or other error checking.</summary>
      <returns>true to have the <see cref="T:System.Xaml.XamlXmlWriter" /> skip certain validation or error checks, such as throwing exceptions on duplicate members. false to have the <see cref="T:System.Xaml.XamlXmlWriter" /> process with exceptions if invalid XAML is encountered. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.CloseOutput">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Xaml.XamlXmlWriter" /> should close immediately on Dispose or other operations (potentially leaving incomplete and thus invalid XAML written), or should instead write out the buffer before closing.</summary>
      <returns>true to close <see cref="T:System.Xaml.XamlXmlWriter" /> immediately on Dispose or similar operations. false to write out the remaining buffer before the <see cref="T:System.Xaml.XamlXmlWriter" /> is released. The default is false.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.Copy">
      <summary>Returns a copy of this <see cref="T:System.Xaml.XamlXmlWriterSettings" /> instance.</summary>
      <returns>The returned copy.</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>Defines access control to assemblies and types for purposes of XAML loading.</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance based on an assembly requested by <see cref="T:System.Reflection.Assembly" />.</summary>
      <returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance, with the <paramref name="assembly" /> value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />. </returns>
      <param name="assembly">The assembly for the request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance based on an assembly requested by <see cref="T:System.Reflection.AssemblyName" />.</summary>
      <returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance, with the <paramref name="assemblyName" /> value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />. </returns>
      <param name="assemblyName">The assembly name for the request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> is not a valid fully qualified assembly name.</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>Gets the <see cref="T:System.Reflection.AssemblyName" /> of the assembly for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> determines permissions.</summary>
      <returns>The <see cref="T:System.Reflection.AssemblyName" /> of the assembly for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> determines permissions.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance based on a specific type specified by its qualified name.</summary>
      <returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance, with the <paramref name="assemblyQualifiedTypeName" /> value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> and <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> determined by reflection on the type. </returns>
      <param name="assemblyQualifiedTypeName">A string that is parsed as an assembly-qualified type name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" /> is not a valid assembly-qualified type name.-or-Assembly name within <paramref name="assemblyQualifiedTypeName" /> is not a valid assembly name.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance based on a specific type specified by <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance, with the <paramref name="type" /> value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> and <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> determined by reflection on the type. </returns>
      <param name="type">The <see cref="T:System.Type" /> to request access for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>Gets the unqualified string name of the type for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> determines permissions.</summary>
      <returns>The unqualified string name of the type for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> determines permissions.</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>Declares permissions for loading types from assemblies that are used by a XAML reader or writer.</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> class, using an enumerable set of specific <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> values.</summary>
      <param name="allowedAccess">An enumerable set of specific <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" /> contained invalid information, such as a null item.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> class, using existing permissions.</summary>
      <param name="state">A <see cref="T:System.Security.Permissions.PermissionState" /> enumeration value.</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> class, using a single <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> value.</summary>
      <param name="allowedAccess">The defining <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>Gets the list of all <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> values that this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> represents.</summary>
      <returns>A read-only list of <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> values, or null. See Remarks.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>Creates and returns an identical copy of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</summary>
      <returns>A copy of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="elem">The XML encoding to use to reconstruct the security object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> does not contain the XML encoding for a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.-or- The version attribute within <paramref name="elem" /> is not supported. </exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>Returns whether this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> includes a specified <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> in its <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> list.</summary>
      <returns>true if <paramref name="requestedAccess" /> exists as an item in the <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> list of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />. Otherwise, false.</returns>
      <param name="requestedAccess">The specific <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> that is the intersection of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> and the specified permission.</summary>
      <returns>A new permission that represents the intersection of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> and the specified <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />. This new permission is null if the intersection is empty.</returns>
      <param name="target">A <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> to intersect with the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />. Can be null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not null or is not a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> is a subset of the specified permission.</summary>
      <returns>true if the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> is a subset of the specified permission; otherwise, false.</returns>
      <param name="target">A permission that is to be tested for the subset relationship. Can be null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not null or is not a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>Returns whether this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> denotes unrestricted permissions.</summary>
      <returns>true if this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> denotes unrestricted permissions. false if this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> has specific access level restrictions in <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />, or has no permissions. </returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>Creates an XML encoding of this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> and its current state.</summary>
      <returns>An XML encoding of this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />, including any state information.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> and the specified permission.</summary>
      <returns>A new <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> that represents the union of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> and the specified <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</returns>
      <param name="other">A <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />  to combine with the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />. Can be null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not null or is not a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</exception>
    </member>
    <member name="T:System.Xaml.Schema.AllowedMemberLocations">
      <summary>Specifies the syntax restrictions enforced on a property when it is set in XAML, as reported by a <see cref="T:System.Xaml.XamlDirective" />.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.None">
      <summary>Property cannot be set in XAML at all. This is the default.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Attribute">
      <summary>Property can be set in XAML attribute syntax.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement">
      <summary>Property can be set in XAML property element syntax.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Any">
      <summary>Property can be set in either <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" /> or <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" /> location. (This enumeration member is defined as the combination of those values.)</summary>
    </member>
    <member name="T:System.Xaml.Schema.ShouldSerializeResult">
      <summary>Defines serialization behavior as reported by a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.Default">
      <summary>Unknown, defer to the type of the member.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.True">
      <summary>Serialize the result.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.False">
      <summary>Do not serialize the result.</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlCollectionKind">
      <summary>Describes the collection metaphor (if any) used by a XAML member.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.None">
      <summary>XAML member does not support a collection.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Collection">
      <summary>XAML member supports a list or a collection.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Dictionary">
      <summary>XAML member supports a dictionary (key-value pairs).</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Array">
      <summary>XAML member supports an array collection.</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlMemberInvoker">
      <summary>Provides an extension point that can access member characteristics of a XAML member through techniques other than reflection.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> class. </summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlMember" />.</summary>
      <param name="member">The <see cref="T:System.Xaml.XamlMember" /> value for the specific XAML member relevant to this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
      <summary>Gets a value of the relevant property from an instance.</summary>
      <returns>The requested property value.</returns>
      <param name="instance">An instance of the owner type for the member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlMember" />.-or-Invoked this method on a write-only member.-or-<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
      <summary>Sets a value of the relevant property on an instance.</summary>
      <param name="instance">An instance of the owner type for the member.</param>
      <param name="value">The property value to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlMember" />.-or-Invoked this method on a read-only member.-or-<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
      <summary>Indicates whether the value needs to be persisted by serialization processes.</summary>
      <returns>A value of the enumeration.</returns>
      <param name="instance">The instance with the property to be examined for persistence.</param>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that gets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that gets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />, or null.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that sets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that sets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />, or null.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
      <summary>Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
      <returns>A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeInvoker">
      <summary>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlType" />.</summary>
      <param name="type">The <see cref="T:System.Xaml.XamlType" /> value for the specific XAML type relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
      <summary>Adds the provided item to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />. </summary>
      <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
      <param name="item">The item to add.</param>
      <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.-or-Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">
        <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this<see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
      <summary>Adds the provided key and item value to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />. </summary>
      <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
      <param name="key">Dictionary key for the item to add.</param>
      <param name="item">The item value to add.</param>
      <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.-or-Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a dictionary.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">
        <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this<see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
      <summary>Creates an object instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
      <returns>The created instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
      <param name="arguments">An array of objects that supply the x:ConstructorArgs for the instance. May be null for types that do not require or use x:ConstructorArgs.</param>
      <exception cref="T:System.MissingMethodException">Could not resolve a constructor.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
      <summary>Returns the relevant Add method for a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is relevant to a collection or dictionary. </summary>
      <returns>CLR <see cref="T:System.Reflection.MethodInfo" /> information for the Add method, or null.</returns>
      <param name="contentType">
        <see cref="T:System.Xaml.XamlType" /> for the item type that is used by the Add method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
      <summary>Returns an object representing a method that can enumerate over items.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> for an enumerator method, or null.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> object representing the set of items.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object, or null.</returns>
      <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
      <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.-or-Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection or dictionary.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
      <summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into an implemented <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
      <returns>A handler implementation that handles this case.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
      <summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into a CLR-implemented <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
      <returns>A handler implementation that handles this case.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
      <summary>Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
      <returns>A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeName">
      <summary>Provides a means to specify a XAML type in terms of name and namespace.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" /> class.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" /> class, based on name and namespace strings.</summary>
      <param name="xamlNamespace">The XAML namespace that contains name.</param>
      <param name="name">The name of the type to create a <see cref="T:System.Xaml.Schema.XamlTypeName" /> for.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" /> class, based on name and namespace strings as well as an array of type arguments.</summary>
      <param name="xamlNamespace">The XAML namespace that contains <paramref name="name" />.</param>
      <param name="name">The name of the type to create a <see cref="T:System.Xaml.Schema.XamlTypeName" /> for.</param>
      <param name="typeArguments">An array of type arguments, each of which must be a <see cref="T:System.Xaml.Schema.XamlTypeName" />.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" /> class, based on an existing <see cref="T:System.Xaml.XamlType" />.</summary>
      <param name="xamlType">An existing <see cref="T:System.Xaml.XamlType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Name">
      <summary>Gets the name used to construct this <see cref="T:System.Xaml.Schema.XamlTypeName" />.</summary>
      <returns>The name of the type.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Namespace">
      <summary>Gets the XAML namespace identifier used to construct this <see cref="T:System.Xaml.Schema.XamlTypeName" />.</summary>
      <returns>The XAML namespace identifier.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>Provides a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value based on a type name and an object that can resolve a markup prefix into a namespace.</summary>
      <returns>The created <see cref="T:System.Xaml.Schema.XamlTypeName" />.</returns>
      <param name="typeName">The type name to create a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value for.</param>
      <param name="namespaceResolver">An object or service provider that implements <see cref="T:System.Xaml.IXamlNamespaceResolver" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> or <paramref name="namespaceResolver" /> is null.</exception>
      <exception cref="T:System.FormatException">String cannot be parsed.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>Provides a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</summary>
      <returns>The created <see cref="T:System.Xaml.Schema.XamlTypeName" />.</returns>
      <param name="typeNameList">A string that contains multiple types. See Remarks. </param>
      <param name="namespaceResolver">An object or service provider that implements <see cref="T:System.Xaml.IXamlNamespaceResolver" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> or <paramref name="namespaceResolver" /> is null.</exception>
      <exception cref="T:System.FormatException">String cannot be parsed.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString">
      <summary>Converts the value of this <see cref="T:System.Xaml.Schema.XamlTypeName" /> to its equivalent string representation.</summary>
      <returns>The equivalent string representation of this <see cref="T:System.Xaml.Schema.XamlTypeName" /> .</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
      <summary>Converts the value of this <see cref="T:System.Xaml.Schema.XamlTypeName" /> to its equivalent string representation, which can be used in markup syntax for an object element usage of multiple types.</summary>
      <returns>A concatenated string of all type results.</returns>
      <param name="typeNameList">A list of types.</param>
      <param name="prefixLookup">A service reference for prefix lookup.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefixLookup" /> or <paramref name="typeNameList" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
      <summary>Converts the value of this <see cref="T:System.Xaml.Schema.XamlTypeName" /> to its equivalent string representation, which can be used in markup syntax for an object element usage of a type.</summary>
      <returns>A prefixed usage string.</returns>
      <param name="prefixLookup">A service reference for prefix lookup.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /> for this <see cref="T:System.Xaml.Schema.XamlTypeName" /> is null.-or-<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> is not valid.-or-Could not look up the prefix.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
      <summary>Provides a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value based on a type name and an object that can resolve a markup prefix into a namespace.</summary>
      <returns>true if the parse was successful and <paramref name="result" /> contains a useful value; otherwise, false.</returns>
      <param name="typeName">The type name to create a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value for.</param>
      <param name="namespaceResolver">An object or service provider that implements <see cref="T:System.Xaml.IXamlNamespaceResolver" />.</param>
      <param name="result">Out parameter that contains the created <see cref="T:System.Xaml.Schema.XamlTypeName" /> if the return value is true.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> or <paramref name="namespaceResolver" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
      <summary>Provides a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</summary>
      <returns>true if the parse was successful and <paramref name="result" /> contains a useful value; otherwise, false.</returns>
      <param name="typeNameList">A string that contains multiple types. See Remarks. </param>
      <param name="namespaceResolver">An object or service provider that implements <see cref="T:System.Xaml.IXamlNamespaceResolver" />.</param>
      <param name="result">Out parameter that contains the created <see cref="T:System.Xaml.Schema.XamlTypeName" /> if the return value is true.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> or <paramref name="namespaceResolver" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
      <summary>Gets the type arguments used to construct this <see cref="T:System.Xaml.Schema.XamlTypeName" />.</summary>
      <returns>The type arguments, if any. May be null.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeTypeConverter">
      <summary>Converts a <see cref="T:System.Xaml.XamlType" /> object to and from a string that represents the type name. This functionality is used for XAML extensibility by markup definitions, via <see cref="T:System.Windows.Markup.PropertyDefinition" />.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" /> class.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Xaml.XamlType" />, using the specified context.</summary>
      <returns>true if this converter can perform the operation; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Xaml.XamlType" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if this converter can perform the operation; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Xaml.XamlType" />, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Xaml.XamlType" /> to the specified type, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="T:System.Xaml.Schema.XamlValueConverter`1">
      <summary>Provides a common API surface for techniques that generate initialization or serialization values for XAML based on input other than the eventual destination type. This includes markup extensions and type converters.</summary>
      <typeparam name="TConverterBase">The CLR base class for the particular converter that this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> represents. Typically this is one of the following: <see cref="T:System.ComponentModel.TypeConverter" />; <see cref="T:System.Windows.Markup.MarkupExtension" />; <see cref="T:System.Windows.Markup.ValueSerializer" />; </typeparam>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> class, based on a converter implementing <see cref="T:System.Type" /> and the target/destination type of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
      <param name="converterType">The <see cref="T:System.Type" /> that implements the converter behavior.</param>
      <param name="targetType">The target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> class, based on a converter implementing <see cref="T:System.Type" /> the target/destination type of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, and a string name.</summary>
      <param name="converterType">The <see cref="T:System.Type" /> that implements the converter behavior.</param>
      <param name="targetType">The target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</param>
      <param name="name">The string name.</param>
      <exception cref="T:System.ArgumentException">All three parameters are null (at least one is required to be non-null).</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
      <summary>Gets a created instance of the converter implementation.</summary>
      <returns>A created instance of the converter implementation, or null.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
      <summary>Gets the <see cref="T:System.Type" /> for the class that implements the converter behavior.</summary>
      <returns>The <see cref="T:System.Type" /> for the class that implements the converter behavior.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
      <summary>Returns an instance of the converter implementation.</summary>
      <returns>An instance of the converter implementation, or null.</returns>
      <exception cref="T:System.Xaml.XamlSchemaException">Converter did not implement the correct base type.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
      <summary>Determines whether this instance of <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and a specified object, which must also be a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, have the same value.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and its value is the same as this instance; otherwise, false. </returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>Determines whether this instance of <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and another <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object have the same value.</summary>
      <returns>true if <paramref name="other" /> is a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and its value is the same as this instance; otherwise, false. </returns>
      <param name="other">The <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />  to compare.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />. </summary>
      <returns>An integer hash code. </returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.Name">
      <summary>Gets a string name for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
      <returns>A string name for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>Determines whether two specified <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> objects have the same value. </summary>
      <returns>true if the value of <paramref name="converter1" /> is the same as the value of <paramref name="converter2" />; otherwise, false. </returns>
      <param name="converter1">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or null.</param>
      <param name="converter2">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or null.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>Determines whether two specified <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> objects have different values. </summary>
      <returns>true if the value of <paramref name="converter1" /> is different than the value of <paramref name="converter2" />; otherwise, false. </returns>
      <param name="converter1">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or null.</param>
      <param name="converter2">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or null.</param>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
      <summary>Gets the target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
      <returns>The target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />. </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />. </returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\UIAutomationClient.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UIAutomationClient</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.AndCondition">
      <summary>Represents a combination of two or more <see cref="T:System.Windows.Automation.PropertyCondition" /> objects that must both be true for a match.</summary>
    </member>
    <member name="M:System.Windows.Automation.AndCondition.#ctor(System.Windows.Automation.Condition[])">
      <summary>Creates a <see cref="T:System.Windows.Automation.PropertyCondition" /> that is true if all the subconditions are true. </summary>
      <param name="conditions">Two or more subconditions.</param>
    </member>
    <member name="M:System.Windows.Automation.AndCondition.GetConditions">
      <summary>Retrieves an array of the subconditions for this condition. </summary>
    </member>
    <member name="T:System.Windows.Automation.Automation">
      <summary>Contains methods and fields for UI Automation client applications.</summary>
    </member>
    <member name="M:System.Windows.Automation.Automation.AddAutomationEventHandler(System.Windows.Automation.AutomationEvent,System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.AutomationEventHandler)">
      <summary>Registers a method that handles UI Automation events.</summary>
      <param name="eventId">The identifier for the event the method will handle.</param>
      <param name="element">The UI Automation element to associate with the event handler.</param>
      <param name="scope">The scope of events to be handled; that is, whether they are on the element itself, or on its ancestors and descendants.</param>
      <param name="eventHandler">The method to call when the specified event occurs.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.AddAutomationFocusChangedEventHandler(System.Windows.Automation.AutomationFocusChangedEventHandler)">
      <summary>Registers a method that will handle focus-changed events.</summary>
      <param name="eventHandler">The method to call when the event occurs.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.AddAutomationPropertyChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.AutomationPropertyChangedEventHandler,System.Windows.Automation.AutomationProperty[])">
      <summary>Registers a method that will handle property-changed events.</summary>
      <param name="element">The UI Automation element with which to associate the event handler.</param>
      <param name="scope">The scope of events to be handled; that is, whether they are on the element itself, or on its ancestors and children.</param>
      <param name="eventHandler">The method to call when the event occurs.</param>
      <param name="properties">The UI Automation properties of interest.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.AddStructureChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.StructureChangedEventHandler)">
      <summary>Registers the method that will handle structure-changed events.</summary>
      <param name="element">The UI Automation element with which to associate the event handler.</param>
      <param name="scope">The scope of events to be handled; that is, whether they are on the element itself, or on its ancestors and descendants.</param>
      <param name="eventHandler">The method to call when the structure-changed event occurs.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.Compare(System.Int32[],System.Int32[])">
      <summary>Compares two integer arrays containing run-time identifiers (IDs) to determine whether their content is the same.</summary>
      <returns>true if the compared run-time IDs refer to the same user interface (UI) element; otherwise false.</returns>
      <param name="runtimeId1">The first run-time ID to compare.</param>
      <param name="runtimeId2">The second run-time ID to compare.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.Compare(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationElement)">
      <summary>Compares two UI Automation elements, returning true if both refer to the same UI element.</summary>
      <returns>true if the run time identifiers of the UI elements are the same; otherwise false.</returns>
      <param name="el1">The first UI Automation element to compare.</param>
      <param name="el2">The second UI Automation element to compare.</param>
    </member>
    <member name="F:System.Windows.Automation.Automation.ContentViewCondition">
      <summary>Represents a predefined view of the UI Automation tree that includes only UI Automation elements that can contain content.</summary>
    </member>
    <member name="F:System.Windows.Automation.Automation.ControlViewCondition">
      <summary>Represents a predefined view of the UI Automation tree that includes only UI Automation elements that are controls.</summary>
    </member>
    <member name="M:System.Windows.Automation.Automation.PatternName(System.Windows.Automation.AutomationPattern)">
      <summary>Retrieves the name of the specified control pattern.</summary>
      <returns>The friendly name of the control pattern, or a null reference (Nothing in Microsoft Visual Basic .NET) if the specified pattern is not found.</returns>
      <param name="pattern">The identifier of the control pattern.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.PropertyName(System.Windows.Automation.AutomationProperty)">
      <summary>Retrieves the name of the specified UI Automation property.</summary>
      <returns>The friendly name of the UI Automation property, or a null reference (Nothing in Microsoft Visual Basic .NET) if the specified UI Automation property is not found.</returns>
      <param name="property">The UI Automation property identifier of the named property.</param>
    </member>
    <member name="F:System.Windows.Automation.Automation.RawViewCondition">
      <summary>Represents a predefined view of the UI Automation tree that includes all UI Automation elements.</summary>
    </member>
    <member name="M:System.Windows.Automation.Automation.RemoveAllEventHandlers">
      <summary>Removes all registered UI Automation event handlers. </summary>
    </member>
    <member name="M:System.Windows.Automation.Automation.RemoveAutomationEventHandler(System.Windows.Automation.AutomationEvent,System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationEventHandler)">
      <summary>Removes the specified UI Automation event handler.</summary>
      <param name="eventId">An event identifier.</param>
      <param name="element">The UI Automation element on which to remove the event handler.</param>
      <param name="eventHandler">The handler method that was passed to <see cref="M:System.Windows.Automation.Automation.AddAutomationEventHandler(System.Windows.Automation.AutomationEvent,System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.AutomationEventHandler)" /> for the specified event identifier and UI Automation element.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.RemoveAutomationFocusChangedEventHandler(System.Windows.Automation.AutomationFocusChangedEventHandler)">
      <summary>Removes the specified focus-changed event handler.</summary>
      <param name="eventHandler">A handler method that was passed to <see cref="M:System.Windows.Automation.Automation.AddAutomationFocusChangedEventHandler(System.Windows.Automation.AutomationFocusChangedEventHandler)" /></param>
    </member>
    <member name="M:System.Windows.Automation.Automation.RemoveAutomationPropertyChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationPropertyChangedEventHandler)">
      <summary>Removes the specified property-changed event handler.</summary>
      <param name="element">The UI Automation element from which to remove the event handler.</param>
      <param name="eventHandler">A handler method that was passed to <see cref="M:System.Windows.Automation.Automation.AddAutomationPropertyChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.AutomationPropertyChangedEventHandler,System.Windows.Automation.AutomationProperty[])" /> for the specified UI Automation element.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.RemoveStructureChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.StructureChangedEventHandler)">
      <summary>Removes the specified structure-changed event handler.</summary>
      <param name="element">The UI Automation element from which to remove the event handler.</param>
      <param name="eventHandler">A handler method that was passed to <see cref="M:System.Windows.Automation.Automation.AddStructureChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.StructureChangedEventHandler)" /> for the specified UI Automation element.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationElement">
      <summary>Represents a UI Automation element in the UI Automation tree, and contains values used as identifiers by UI Automation client applications.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AcceleratorKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AcceleratorKey" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AccessKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AccessKey" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AsyncContentLoadedEvent">
      <summary>Identifies an event raised during asynchronous content-loading.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AutomationFocusChangedEvent">
      <summary>Identifies an event that is raised when the focus has changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AutomationIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId" /> property, which is used to identify elements.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AutomationPropertyChangedEvent">
      <summary>Identifies a property-changed event.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.BoundingRectangleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.BoundingRectangle" /> property.</summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.AutomationElement" /> object.</summary>
      <returns>A structure containing the cached property values for the <see cref="T:System.Windows.Automation.AutomationElement" />.</returns>
      <exception cref="T:System.InvalidOperationException">There are no cached properties. </exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.CachedChildren">
      <summary>Gets the cached child elements of this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The collection of child elements. This collection can be empty if the element has no children.</returns>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
      <exception cref="T:System.InvalidOperationException">No request was made to cache the children of this element.</exception>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.CachedParent">
      <summary>Gets the cached parent of this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The parent element. The return value can be null if the specified element has no parent—for example, if this element is the root node.</returns>
      <exception cref="T:System.InvalidOperationException">No parent element is cached.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ClassNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ClassName" /> property. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ClickablePointProperty">
      <summary>Identifies the clickable point property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ControlTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ControlType" /> property. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.CultureProperty">
      <summary>Identifies the culture property.</summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.Current">
      <summary>Gets the current property values of the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>A structure containing the current property values.</returns>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Automation.AutomationElement" /> has the same value as this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.Automation.AutomationElement" /> is equal to this <see cref="T:System.Windows.Automation.AutomationElement" />;otherwise false.</returns>
      <param name="obj">An <see cref="T:System.Windows.Automation.AutomationElement" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.FindAll(System.Windows.Automation.TreeScope,System.Windows.Automation.Condition)">
      <summary>Returns all <see cref="T:System.Windows.Automation.AutomationElement" /> objects that satisfy the specified condition.</summary>
      <returns>A collection of objects that satisfies the specified condition. If there are no matches, an empty collection is returned.</returns>
      <param name="scope">A bitwise combination of values that specifies the scope of the search.</param>
      <param name="condition">The object containing the criteria to match.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.FindFirst(System.Windows.Automation.TreeScope,System.Windows.Automation.Condition)">
      <summary>Returns the first child or descendant element that matches the specified condition.</summary>
      <returns>The first element that satisfies the condition, or null if no match is found.</returns>
      <param name="scope">A bitwise combination of values that specifies the scope of the search.</param>
      <param name="condition">The object containing the criteria to match.</param>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.FocusedElement">
      <summary>Gets the <see cref="T:System.Windows.Automation.AutomationElement" /> that currently has focus.</summary>
      <returns>The focused UI element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.FrameworkIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.FrameworkId" /> property. </summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.FromHandle(System.IntPtr)">
      <summary>Retrieves a new <see cref="T:System.Windows.Automation.AutomationElement" /> object for the user interface (UI) item referenced by the specified window handle.</summary>
      <returns>An <see cref="T:System.Windows.Automation.AutomationElement" /> for the UI item identified by <paramref name="hwnd" />.</returns>
      <param name="hwnd">The handle of the UI element.         </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.FromLocalProvider(System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Retrieves a new <see cref="T:System.Windows.Automation.AutomationElement" /> object from a local <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> implementation.</summary>
      <returns>An <see cref="T:System.Windows.Automation.AutomationElement" /> that represents the element served by the provider object.</returns>
      <param name="localImpl">The provider object.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.FromPoint(System.Windows.Point)">
      <summary>Retrieves a new <see cref="T:System.Windows.Automation.AutomationElement" /> object for the user interface (UI) item at specified point on the desktop.</summary>
      <returns>The UI item at the specified point.</returns>
      <param name="pt">The physical screen coordinates on the desktop at which to locate the UI element.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCachedPattern(System.Windows.Automation.AutomationPattern)">
      <summary>Retrieves the specified pattern from the cache of this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>An object representing the specified pattern. If there are no matching patterns, null is returned.</returns>
      <param name="pattern">The identifier of the pattern to retrieve.</param>
      <exception cref="T:System.InvalidOperationException">The requested pattern is not in the cache or is not supported by the element.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCachedPropertyValue(System.Windows.Automation.AutomationProperty)">
      <summary>Retrieves the value of the specified property from the cache of this <see cref="T:System.Windows.Automation.AutomationElement" />. An appropriate default value for the property type is returned for properties not explicitly supported by the target user interface (UI) element.</summary>
      <returns>An object containing the value of the specified property.</returns>
      <param name="property">The identifier of the property to retrieve.</param>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The user interface (UI) for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCachedPropertyValue(System.Windows.Automation.AutomationProperty,System.Boolean)">
      <summary>Retrieves the value of the specified property from the cache of this <see cref="T:System.Windows.Automation.AutomationElement" />, optionally ignoring any default property.</summary>
      <returns>An object containing the value of the specified property, or <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the element does not supply a value and <paramref name="ignoreDefaultValue" /> is true.</returns>
      <param name="property">The identifier of the property to retrieve.</param>
      <param name="ignoreDefaultValue">A value that specifies whether a default value should be ignored if the specified property is not supported.</param>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetClickablePoint">
      <summary>Retrieves a point on the <see cref="T:System.Windows.Automation.AutomationElement" /> that can be clicked.</summary>
      <returns>The physical screen coordinates of a point that can be used by a client to click on this element.</returns>
      <exception cref="T:System.Windows.Automation.NoClickablePointException">There is no clickable point.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCurrentPattern(System.Windows.Automation.AutomationPattern)">
      <summary>Retrieves the specified pattern object on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The pattern object, if the specified pattern is currently supported by the <see cref="T:System.Windows.Automation.AutomationElement" />.</returns>
      <param name="pattern">The identifier of the pattern to retrieve.</param>
      <exception cref="T:System.InvalidOperationException">The pattern is not supported by the element.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue(System.Windows.Automation.AutomationProperty)">
      <summary>Retrieves the value of the specified property on this <see cref="T:System.Windows.Automation.AutomationElement" />. An appropriate default value for the property type is returned for properties not explicitly supported by the target user interface (UI) element.</summary>
      <returns>An object containing the value of the specified property.</returns>
      <param name="property">The UI Automation property identifier specifying which property to retrieve.</param>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue(System.Windows.Automation.AutomationProperty,System.Boolean)">
      <summary>Retrieves the value of the specified property on this <see cref="T:System.Windows.Automation.AutomationElement" />, optionally ignoring any default property.</summary>
      <returns>An object containing the value of the specified property, or <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the element does not supply a value and <paramref name="ignoreDefaultValue" /> is true.</returns>
      <param name="property">The UI Automation property identifier specifying which property to retrieve.</param>
      <param name="ignoreDefaultValue">A value that specifies whether a default value should be ignored if the specified property is supported.</param>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetHashCode">
      <summary>Retrieves the hash code for this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetRuntimeId">
      <summary>Retrieves the unique identifier assigned to the user interface (UI) item. </summary>
      <returns>An array of integers representing the run-time identifier.</returns>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetSupportedPatterns">
      <summary>Retrieves the control patterns that this <see cref="T:System.Windows.Automation.AutomationElement" /> supports.</summary>
      <returns>An array of <see cref="T:System.Windows.Automation.AutomationPattern" /> objects that represent the supported control patterns.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetSupportedProperties">
      <summary>Retrieves the identifiers of properties supported by the element.</summary>
      <returns>An array of supported property identifiers.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetUpdatedCache(System.Windows.Automation.CacheRequest)">
      <summary>Retrieves a new <see cref="T:System.Windows.Automation.AutomationElement" /> with an updated cache.</summary>
      <returns>A new <see cref="T:System.Windows.Automation.AutomationElement" /> that has an updated cache.</returns>
      <param name="request">The patterns and properties to include in the updated cache.</param>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.HasKeyboardFocusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HasKeyboardFocus" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.HelpTextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HelpText" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsContentElementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsContentElement" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsControlElementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsDockPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.DockPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> property, which specifies whether the user interface (UI) item referenced by the <see cref="T:System.Windows.Automation.AutomationElement" /> is enabled.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsExpandCollapsePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.ExpandCollapsePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsGridItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.GridItemPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsGridPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.GridPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsInvokePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsItemContainerPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElement.IsKeyboardFocusableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsKeyboardFocusable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsMultipleViewPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.MultipleViewPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsOffscreenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen" /> property, which indicates whether the user interface (UI) item is visible on the screen. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsPasswordProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsRangeValuePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.RangeValuePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsRequiredForFormProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsScrollItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.ScrollItemPattern" /> control pattern is available for this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsScrollPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.ScrollPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsSelectionItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.SelectionItemPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsSelectionPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.SelectionPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsSynchronizedInputPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElement.IsTableItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TableItemPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsTablePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TablePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsTextPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TextPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsTogglePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TogglePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsTransformPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TransformPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsValuePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.ValuePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsVirtualizedItemPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElement.IsWindowPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.WindowPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ItemStatusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemStatus" /> property, which specifies the status of the visual representation of a complex item. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.LabeledByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LabeledBy" /> property, which identifies the label associated with a control.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.LayoutInvalidatedEvent">
      <summary>Identifies the event that is raised when the layout is invalidated.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.LocalizedControlTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LocalizedControlType" /> property in the local language.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.MenuClosedEvent">
      <summary>Identifies the event that is raised when a menu is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.MenuOpenedEvent">
      <summary>Identifies the event that is raised when a menu is opened.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.NativeWindowHandleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.NativeWindowHandle" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.NotSupported">
      <summary>Indicates that a property is not supported.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.op_Equality(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationElement)">
      <summary>Returns a value indicating whether the specified <see cref="T:System.Windows.Automation.AutomationElement" /> objects refer to the same user interface (UI) element.</summary>
      <returns>true if the two <see cref="T:System.Windows.Automation.AutomationElement" /> objects refer to the same UI element; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Windows.Automation.AutomationElement" /> to compare. </param>
      <param name="right">The second <see cref="T:System.Windows.Automation.AutomationElement" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.op_Inequality(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationElement)">
      <summary>Returns a value indicating whether the specified <see cref="T:System.Windows.Automation.AutomationElement" /> objects refer to different user interface (UI) elements.</summary>
      <returns>true if the two objects refer to different UI elements; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Windows.Automation.AutomationElement" /> to compare. </param>
      <param name="right">The second <see cref="T:System.Windows.Automation.AutomationElement" /> to compare. </param>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Orientation" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ProcessIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ProcessId" /> property.</summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.RootElement">
      <summary>Gets the root <see cref="T:System.Windows.Automation.AutomationElement" /> for the current desktop.</summary>
      <returns>The root element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.RuntimeIdProperty">
      <summary>Identifies the property that contains the runtime identifier of the element.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.SetFocus">
      <summary>Sets focus on the <see cref="T:System.Windows.Automation.AutomationElement" />. </summary>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.StructureChangedEvent">
      <summary>Identifies the event that is raised when the UI Automation tree structure is changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ToolTipClosedEvent">
      <summary>Identifies the event that is raised when a tooltip is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ToolTipOpenedEvent">
      <summary>Identifies the event that is raised when a tooltip is opened.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.TryGetCachedPattern(System.Windows.Automation.AutomationPattern,System.Object@)">
      <summary>Retrieves a control pattern from the cache.</summary>
      <returns>true if the pattern is in the cache; false if it is not in the cache or not supported.</returns>
      <param name="pattern">The identifier of the control pattern to retrieve.</param>
      <param name="patternObject">On return, contains the pattern if it is in the cache; otherwise null.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.TryGetClickablePoint(System.Windows.Point@)">
      <summary>Retrieves a point within the element that can be clicked.</summary>
      <returns>true if there is a point that is clickable; otherwise false.</returns>
      <param name="pt">When this method returns, contains the physical screen coordinates of a clickable point.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.TryGetCurrentPattern(System.Windows.Automation.AutomationPattern,System.Object@)">
      <summary>Retrieves an object that implements a control pattern.</summary>
      <returns>true if the pattern is supported; otherwise false.</returns>
      <param name="pattern">The identifier of the control pattern to retrieve.</param>
      <param name="patternObject">On return, the control pattern if it is supported; otherwise null.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationElement.AutomationElementInformation">
      <summary>Contains the property accessors used by the <see cref="P:System.Windows.Automation.AutomationElement.Cached" /> or <see cref="P:System.Windows.Automation.AutomationElement.Current" /> properties.</summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AcceleratorKey">
      <summary>Gets a string containing the accelerator key combinations for the element.</summary>
      <returns>The sequence of key combinations that invoke an action associated with the element.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AccessKey">
      <summary>Gets a string containing the access key character for the element.</summary>
      <returns>The character, associated with an element, that is used to activate that element.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId">
      <summary>Gets a string containing the UI Automation identifier (ID) for the element.</summary>
      <returns>An ID for an element that is unique among siblings within its container.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.BoundingRectangle">
      <summary>Gets the coordinates of the rectangle that completely encloses the element.</summary>
      <returns>The point coordinates of the enclosing rectangle.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ClassName">
      <summary>Gets a string containing the class name of the element as assigned by the control developer.</summary>
      <returns>The class name assigned by the control developer.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ControlType">
      <summary>Gets the <see cref="T:System.Windows.Automation.ControlType" /> of the element.</summary>
      <returns>The interaction model for this element. The default value is <see cref="F:System.Windows.Automation.ControlType.Custom" />.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.FrameworkId">
      <summary>Gets the name of the underlying UI framework.</summary>
      <returns>The name of the UI framework, such as "Win32", "WinForm", or "DirectUI". The default value is an empty string.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HasKeyboardFocus">
      <summary>Gets a value that indicates whether the element has keyboard focus.</summary>
      <returns>true if the element has keyboard focus; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HelpText">
      <summary>Gets the help text associated with the element.</summary>
      <returns>The tooltip help text for the element.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsContentElement">
      <summary>Gets a value that specifies whether the element is a content element.</summary>
      <returns>true if the element is a content element; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement">
      <summary>Gets a value that indicates whether the element is viewed as a control.</summary>
      <returns>true if the element is viewed as a control; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled">
      <summary>Gets a value that indicates whether the user interface (UI) item referenced by the UI Automation element is enabled.</summary>
      <returns>true if the control is enabled; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsKeyboardFocusable">
      <summary>Gets a value that indicates whether the UI Automation element can accept keyboard focus.</summary>
      <returns>true if the control can receive keyboard focus; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen">
      <summary>Gets a value that indicates whether the UI Automation element is visible on the screen. </summary>
      <returns>true if the control is not visible; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword">
      <summary>Gets a value that indicates whether the UI Automation element contains protected content.</summary>
      <returns>true if the element contains protected content; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm">
      <summary>Gets a value that indicates whether the UI Automation element is required to be filled out on a form. </summary>
      <returns>true if the element is required to be filled out; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemStatus">
      <summary>Gets a description of the status of an item within an element.</summary>
      <returns>The description of the status.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType">
      <summary>Gets a description of the type of an item.</summary>
      <returns>A localized string that describes the item.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LabeledBy">
      <summary>Gets the element that contains the text label for this element.</summary>
      <returns>The element that is the label for this element.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LocalizedControlType">
      <summary>Gets a description of the control type.</summary>
      <returns>A localized description of the control type, such as "button".</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name">
      <summary>Gets the name of the element.</summary>
      <returns>The name of the user interface (UI) element.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.NativeWindowHandle">
      <summary>Gets the handle of the element's window.</summary>
      <returns>The handle of the window, if one exists; otherwise 0.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Orientation">
      <summary>Gets the orientation of the control.</summary>
      <returns>The orientation.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ProcessId">
      <summary>Gets the process identifier (ID) of this element.</summary>
      <returns>The ID of the process that hosts the element. The default value for the property is 0.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationElementCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Automation.AutomationElement" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationElementCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the collection's elements to an array, starting at the specified index in the target array. </summary>
      <param name="array">The destination of the elements copied from the collection.</param>
      <param name="index">The zero-based index in the target array where copying should begin.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElementCollection.CopyTo(System.Windows.Automation.AutomationElement[],System.Int32)">
      <summary>Copies the collection's elements to a specialized array instance, starting at the specified index in the target array. </summary>
      <param name="array">The destination of the elements copied from the collection.</param>
      <param name="index">The zero-based index in the target array where copying should begin.</param>
      <exception cref="T:System.ArgumentException">The destination array is not large enough, or <paramref name="index" /> is outside the bounds of the array.</exception>
    </member>
    <member name="P:System.Windows.Automation.AutomationElementCollection.Count">
      <summary>Gets the number of elements in this collection.</summary>
      <returns>The number of elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationElementCollection.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the items in the collection.</summary>
      <returns>An enumerator that can be used to iterate through the <see cref="T:System.Windows.Automation.AutomationElementCollection" />.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElementCollection.IsSynchronized">
      <summary>Gets a value indicating whether the <see cref="T:System.Windows.Automation.AutomationElementCollection" /> object is synchronized (thread-safe).</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElementCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Windows.Automation.AutomationElement" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Windows.Automation.AutomationElement" /> at the specified index. </returns>
      <param name="index">The zero-based index of the element in the collection.</param>
      <exception cref="T:System.IndexOutOfRangeException">A negative integer was specified for <paramref name="index" />, or <paramref name="index" /> is greater than or equal to <see cref="P:System.Windows.Automation.AutomationElementCollection.Count" />.</exception>
    </member>
    <member name="P:System.Windows.Automation.AutomationElementCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Automation.AutomationElementCollection" /> collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationElementMode">
      <summary>Contains values that specify the type of reference to use when returning UI Automation elements. These values are used in the <see cref="P:System.Windows.Automation.CacheRequest.AutomationElementMode" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementMode.None">
      <summary>Specifies that returned elements have no reference to the underlying UI and contain only cached information. This mode might be used, for example, to retrieve the names of items in a list box without obtaining references to the items themselves.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementMode.Full">
      <summary>Specifies that returned elements have a full reference to the underlying UI. </summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationFocusChangedEventArgs">
      <summary>Provides data for a focus-changed event.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationFocusChangedEventArgs.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AutomationFocusChangedEventArgs" /> class.</summary>
      <param name="idObject">The identifier (ID) of the object that received focus.</param>
      <param name="idChild">The child ID of the object that received focus.</param>
    </member>
    <member name="P:System.Windows.Automation.AutomationFocusChangedEventArgs.ChildId">
      <summary>Gets the child Microsoft Active Accessibility identifier of the object receiving focus.</summary>
      <returns>The identifier.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationFocusChangedEventArgs.ObjectId">
      <summary>Gets the identifier (ID) of the Microsoft Active Accessibility object that generated the event.</summary>
      <returns>The ID of the user interface (UI) element that is receiving focus. For possible values, see Object Identifiers in the Microsoft Active Accessibility documentation.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationFocusChangedEventHandler">
      <summary>Represents the method implemented by the UI Automation client application to handle the event raised by a UI Automation provider when the focus has changed.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.Windows.Automation.BasePattern">
      <summary>Provides the base implementation for control pattern classes.</summary>
    </member>
    <member name="M:System.Windows.Automation.BasePattern.Finalize">
      <summary>Frees resources and performs other cleanup operations before the object is reclaimed by garbage collection.</summary>
    </member>
    <member name="T:System.Windows.Automation.CacheRequest">
      <summary>Specifies properties and patterns that the UI Automation framework caches when an <see cref="T:System.Windows.Automation.AutomationElement" /> is obtained.</summary>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.CacheRequest" /> class. </summary>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Activate">
      <summary>Sets this <see cref="T:System.Windows.Automation.CacheRequest" /> as the active specification for the items that are returned when an <see cref="T:System.Windows.Automation.AutomationElement" /> is requested on the same thread.</summary>
      <returns>The object that can be used to dispose the <see cref="T:System.Windows.Automation.CacheRequest" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)">
      <summary>Adds the specified <see cref="T:System.Windows.Automation.AutomationPattern" /> identifier to this <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
      <param name="pattern">An identifier specifying a pattern to cache.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Automation.CacheRequest" /> is active.</exception>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)">
      <summary>Adds the specified <see cref="T:System.Windows.Automation.AutomationProperty" /> identifier to this <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
      <param name="property">An identifier specifying a property value to cache.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Automation.CacheRequest" /> is active.</exception>
    </member>
    <member name="P:System.Windows.Automation.CacheRequest.AutomationElementMode">
      <summary>Gets or sets a value that specifies whether returned elements should contain full references to the underlying user interface (UI), or only cached information. </summary>
      <returns>
        <see cref="F:System.Windows.Automation.AutomationElementMode.Full" /> if the returned elements have a full reference to the underlying user interface (UI); otherwise <see cref="F:System.Windows.Automation.AutomationElementMode.None" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Clone">
      <summary>Creates a copy of this <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
      <returns>A modifiable copy of the current object.</returns>
    </member>
    <member name="P:System.Windows.Automation.CacheRequest.Current">
      <summary>Gets the <see cref="T:System.Windows.Automation.CacheRequest" /> that is active on the current thread.</summary>
      <returns>The active <see cref="T:System.Windows.Automation.CacheRequest" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Pop">
      <summary>Removes the active <see cref="T:System.Windows.Automation.CacheRequest" /> from the internal stack for the current thread.</summary>
      <exception cref="T:System.InvalidOperationException">An attempt was made to remove a cache request that was not the last one pushed onto the stack.</exception>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Push">
      <summary>Places the <see cref="T:System.Windows.Automation.CacheRequest" /> on the internal state stack, making it the active request on the current thread.</summary>
    </member>
    <member name="P:System.Windows.Automation.CacheRequest.TreeFilter">
      <summary>Gets or sets a value specifying the view of the UI Automation element tree to use when caching.</summary>
      <returns>The view of the UI Automation element tree. The default view is <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />.</returns>
    </member>
    <member name="P:System.Windows.Automation.CacheRequest.TreeScope">
      <summary>Gets or sets a value that specifies whether caching is done only for the root of the subtree, or also for its children or descendants.</summary>
      <returns>One or more of <see cref="F:System.Windows.Automation.TreeScope.Element" />, <see cref="F:System.Windows.Automation.TreeScope.Children" />, <see cref="F:System.Windows.Automation.TreeScope.Descendants" />, or <see cref="F:System.Windows.Automation.TreeScope.Subtree" />. The default value is <see cref="F:System.Windows.Automation.TreeScope.Element" />.</returns>
      <exception cref="T:System.ArgumentException">An attempt was made to set the property to <see cref="F:System.Windows.Automation.TreeScope.Parent" /> or <see cref="F:System.Windows.Automation.TreeScope.Ancestors" />.</exception>
    </member>
    <member name="T:System.Windows.Automation.ClientSettings">
      <summary>Contains methods that make client-side providers available to the client.</summary>
    </member>
    <member name="M:System.Windows.Automation.ClientSettings.RegisterClientSideProviderAssembly(System.Reflection.AssemblyName)">
      <summary>Registers an assembly that contains client-side providers.</summary>
      <param name="assemblyName">Name of the assembly.</param>
      <exception cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException">The assembly could not be loaded.</exception>
    </member>
    <member name="M:System.Windows.Automation.ClientSettings.RegisterClientSideProviders(System.Windows.Automation.ClientSideProviderDescription[])">
      <summary>Registers client-side providers.</summary>
      <param name="clientSideProviderDescription">An array of provider descriptions.</param>
      <exception cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException">The assembly could not be loaded.</exception>
    </member>
    <member name="T:System.Windows.Automation.ClientSideProviderDescription">
      <summary>Describes the scope of a client-side UI Automation provider so that it can be registered with the UI Automation client application.</summary>
    </member>
    <member name="M:System.Windows.Automation.ClientSideProviderDescription.#ctor(System.Windows.Automation.ClientSideProviderFactoryCallback,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ClientSideProviderDescription" /> class.</summary>
      <param name="clientSideProviderFactoryCallback">The method that creates the client-side provider for a window.</param>
      <param name="className">The class name of the windows that the provider is used for.</param>
    </member>
    <member name="M:System.Windows.Automation.ClientSideProviderDescription.#ctor(System.Windows.Automation.ClientSideProviderFactoryCallback,System.String,System.String,System.Windows.Automation.ClientSideProviderMatchIndicator)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ClientSideProviderDescription" /> class.</summary>
      <param name="clientSideProviderFactoryCallback">The method that creates the client-side provider for a window.</param>
      <param name="className">The class name of the window that the provider is used for.</param>
      <param name="imageName">The name of the executable or DLL for the process where the window resides.</param>
      <param name="flags">Flags that specify behavior when matching window class names.</param>
    </member>
    <member name="P:System.Windows.Automation.ClientSideProviderDescription.ClassName">
      <summary>Gets the class name of the windows that the provider is used for.</summary>
      <returns>The window class name.</returns>
    </member>
    <member name="P:System.Windows.Automation.ClientSideProviderDescription.ClientSideProviderFactoryCallback">
      <summary>Gets the method that creates the client-side provider.</summary>
      <returns>The callback method.</returns>
    </member>
    <member name="P:System.Windows.Automation.ClientSideProviderDescription.Flags">
      <summary>Gets the flags that specify behavior when matching window class names.</summary>
      <returns>A bitwise combination of values.</returns>
    </member>
    <member name="P:System.Windows.Automation.ClientSideProviderDescription.ImageName">
      <summary>Gets the name of the executable or dynamic-link library (DLL) for the process where the window resides.</summary>
      <returns>The image name.</returns>
    </member>
    <member name="T:System.Windows.Automation.ClientSideProviderFactoryCallback">
      <summary>Represents the method that creates a client-side UI Automation provider for a window.</summary>
      <param name="hwnd">The window for which the provider is created.</param>
      <param name="idChild">The child ID of the object.</param>
      <param name="idObject">The ID of the object.</param>
    </member>
    <member name="T:System.Windows.Automation.ClientSideProviderMatchIndicator">
      <summary>Contains values that specify behavior when matching class names in a <see cref="T:System.Windows.Automation.ClientSideProviderDescription" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.ClientSideProviderMatchIndicator.None">
      <summary>No special flags.</summary>
    </member>
    <member name="F:System.Windows.Automation.ClientSideProviderMatchIndicator.AllowSubstringMatch">
      <summary>Specifies that substring comparison is used for comparing class names.</summary>
    </member>
    <member name="F:System.Windows.Automation.ClientSideProviderMatchIndicator.DisallowBaseClassNameMatch">
      <summary>Specifies that the base class of the object is not used when matching window class names.</summary>
    </member>
    <member name="T:System.Windows.Automation.Condition">
      <summary>Base type for conditions used in filtering when searching for elements in the UI Automation tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.Condition.FalseCondition">
      <summary>Represents a <see cref="T:System.Windows.Automation.Condition" /> that always evaluates to false.</summary>
    </member>
    <member name="F:System.Windows.Automation.Condition.TrueCondition">
      <summary>Represents a <see cref="T:System.Windows.Automation.Condition" /> that always evaluates to true. </summary>
    </member>
    <member name="T:System.Windows.Automation.DockPattern">
      <summary>Represents controls that expose their dock properties within a docking container. </summary>
    </member>
    <member name="P:System.Windows.Automation.DockPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.DockPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.DockPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.DockPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.DockPattern.DockPositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.DockPattern.DockPatternInformation.DockPosition" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.DockPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.DockPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.DockPattern.SetDockPosition(System.Windows.Automation.DockPosition)">
      <summary>Docks the <see cref="T:System.Windows.Automation.AutomationElement" /> at the requested <see cref="T:System.Windows.Automation.DockPosition" /> within a docking container.</summary>
      <param name="dockPosition">The dock position relative to the boundaries of the docking container and other elements within the container.</param>
      <exception cref="T:System.InvalidOperationException">When a control is not able to execute the requested dock style.</exception>
    </member>
    <member name="T:System.Windows.Automation.DockPattern.DockPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.DockPattern" /> object using its <see cref="P:System.Windows.Automation.DockPattern.Current" /> or <see cref="P:System.Windows.Automation.DockPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.DockPattern.DockPatternInformation.DockPosition">
      <summary>Retrieves the <see cref="T:System.Windows.Automation.DockPosition" /> of an <see cref="T:System.Windows.Automation.AutomationElement" /> within a docking container.</summary>
      <returns>The <see cref="T:System.Windows.Automation.DockPosition" /> of the element, relative to the boundaries of the docking container and other elements within the container.</returns>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapsePattern">
      <summary>Represents controls that visually expand to display content and collapse to hide content.</summary>
    </member>
    <member name="P:System.Windows.Automation.ExpandCollapsePattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.ExpandCollapsePattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="M:System.Windows.Automation.ExpandCollapsePattern.Collapse">
      <summary>Hides all descendant nodes, controls, or content of the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Windows.Automation.ExpandCollapsePattern.Collapse" /> is called when the <see cref="T:System.Windows.Automation.ExpandCollapseState" /> = <see cref="F:System.Windows.Automation.ExpandCollapseState.LeafNode" />.</exception>
    </member>
    <member name="P:System.Windows.Automation.ExpandCollapsePattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.ExpandCollapsePattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="M:System.Windows.Automation.ExpandCollapsePattern.Expand">
      <summary>Displays all child nodes, controls, or content of the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Windows.Automation.ExpandCollapsePattern.Expand" /> is called when the <see cref="T:System.Windows.Automation.ExpandCollapseState" /> = <see cref="F:System.Windows.Automation.ExpandCollapseState.LeafNode" />.</exception>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePattern.ExpandCollapseStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ExpandCollapsePattern.ExpandCollapsePatternInformation.ExpandCollapseState" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ExpandCollapsePattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapsePattern.ExpandCollapsePatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.ExpandCollapsePattern" /> object using its <see cref="P:System.Windows.Automation.ExpandCollapsePattern.Current" /> or <see cref="P:System.Windows.Automation.ExpandCollapsePattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.ExpandCollapsePattern.ExpandCollapsePatternInformation.ExpandCollapseState">
      <summary>Gets the <see cref="T:System.Windows.Automation.ExpandCollapseState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.ExpandCollapseState" /> of <see cref="T:System.Windows.Automation.AutomationElement" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.GridItemPattern">
      <summary>Represents child controls of containers that support <see cref="T:System.Windows.Automation.GridPattern" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.Cached">
      <summary>Gets the cached property values for this <see cref="T:System.Windows.Automation.GridItemPattern" />.</summary>
      <returns>The cached property values.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.ColumnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.Column" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.ColumnSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.ColumnSpan" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.ContainingGridProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.ContainingGrid" /> property. </summary>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.Current">
      <summary>Gets the current property values for this <see cref="T:System.Windows.Automation.GridItemPattern" />.</summary>
      <returns>The current property values.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.GridItemPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.RowProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.Row" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.RowSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.RowSpan" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.GridItemPattern.GridItemPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.GridItemPattern" /> object using its <see cref="P:System.Windows.Automation.GridItemPattern.Current" /> or <see cref="P:System.Windows.Automation.GridItemPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.Column">
      <summary>Gets the ordinal number of the column that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the column containing the cell or item. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.ColumnSpan">
      <summary>Gets the number of columns spanned by a cell or item.</summary>
      <returns>The number of columns spanned. The default value is 1.</returns>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.ContainingGrid">
      <summary>Gets a UI Automation element that supports <see cref="T:System.Windows.Automation.GridPattern" /> and represents the container of the cell or item.</summary>
      <returns>A UI Automation element that supports the GridPattern and represents the table cell or item container. The default is a null reference (Nothing in Microsoft Visual Basic .NET).</returns>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.Row">
      <summary>Gets the ordinal number of the row that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the row containing the table cell or item. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.RowSpan">
      <summary>Gets the number of rows spanned by a cell or item.</summary>
      <returns>The number of rows spanned. The default value is 1.</returns>
    </member>
    <member name="T:System.Windows.Automation.GridPattern">
      <summary>Represents controls that act as containers for a collection of child elements. The children of this control support <see cref="T:System.Windows.Automation.GridItemPattern" /> and are organized in a two-dimensional logical coordinate system that can be traversed by row and column.</summary>
    </member>
    <member name="P:System.Windows.Automation.GridPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.GridPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.GridPattern.ColumnCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridPattern.GridPatternInformation.ColumnCount" /> property.</summary>
    </member>
    <member name="P:System.Windows.Automation.GridPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.GridPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="M:System.Windows.Automation.GridPattern.GetItem(System.Int32,System.Int32)">
      <summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationElement" /> that represents the specified cell.</summary>
      <returns>An <see cref="T:System.Windows.Automation.AutomationElement" /> that represents the retrieved cell.</returns>
      <param name="row">The ordinal number of the row of interest.</param>
      <param name="column">The ordinal number of the column of interest.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either the requested row or column coordinate is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The requested row coordinate is larger than the <see cref="P:System.Windows.Automation.GridPattern.GridPatternInformation.RowCount" /> or the column coordinate is larger than the <see cref="P:System.Windows.Automation.GridPattern.GridPatternInformation.ColumnCount" />.</exception>
    </member>
    <member name="F:System.Windows.Automation.GridPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.GridPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridPattern.RowCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridPattern.GridPatternInformation.RowCount" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.GridPattern.GridPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.GridPattern" /> object using its <see cref="P:System.Windows.Automation.GridPattern.Current" /> or <see cref="P:System.Windows.Automation.GridPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.GridPattern.GridPatternInformation.ColumnCount">
      <summary>Gets the number of columns in a grid.</summary>
      <returns>The total number of columns in a grid.</returns>
    </member>
    <member name="P:System.Windows.Automation.GridPattern.GridPatternInformation.RowCount">
      <summary>Gets the total number of rows in a grid.</summary>
      <returns>The total number of rows in a grid.</returns>
    </member>
    <member name="T:System.Windows.Automation.InvokePattern">
      <summary>Represents controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</summary>
    </member>
    <member name="M:System.Windows.Automation.InvokePattern.Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
      <exception cref="T:System.InvalidOperationException">The element does not support the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern or is hidden or blocked.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">The element is not enabled. Can be raised when a UI Automation provider has implemented its own handling of the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> property.</exception>
    </member>
    <member name="F:System.Windows.Automation.InvokePattern.InvokedEvent">
      <summary>Identifies the event raised when a control is invoked or activated. </summary>
    </member>
    <member name="F:System.Windows.Automation.InvokePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern. </summary>
    </member>
    <member name="T:System.Windows.Automation.ItemContainerPattern">
      <summary>Represents an object that manages items and supports retrieving an item by property value. </summary>
    </member>
    <member name="M:System.Windows.Automation.ItemContainerPattern.FindItemByProperty(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationProperty,System.Object)">
      <summary>Retrieves an element by the specified property value.</summary>
      <returns>The first item that matches the search criterion; otherwise, null if no items match.</returns>
      <param name="startAfter">The item in the container after which to begin the search.</param>
      <param name="property">The property that contains the value to retrieve.</param>
      <param name="value">The value to retrieve.</param>
    </member>
    <member name="F:System.Windows.Automation.ItemContainerPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ItemContainerPattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.MultipleViewPattern">
      <summary>Represents controls that provide, and are able to switch between, multiple representations of the same set of information or child controls.</summary>
    </member>
    <member name="P:System.Windows.Automation.MultipleViewPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.MultipleViewPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.MultipleViewPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.MultipleViewPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPattern.CurrentViewProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.MultipleViewPattern.MultipleViewPatternInformation.CurrentView" /> property.</summary>
    </member>
    <member name="M:System.Windows.Automation.MultipleViewPattern.GetViewName(System.Int32)">
      <summary>Retrieves the name of a control-specific view.</summary>
      <returns>A localized string representing the control-specific view name.</returns>
      <param name="viewId">The control-specific view identifier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewId" /> is not a member of the supported views collection.</exception>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.MultipleViewPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.MultipleViewPattern.SetCurrentView(System.Int32)">
      <summary>Sets the current control-specific view. </summary>
      <param name="viewId">A control-specific view identifier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewId" /> is not a member of the supported views collection.</exception>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPattern.SupportedViewsProperty">
      <summary>Identifies the property that gets the control-specific collection of views.</summary>
    </member>
    <member name="T:System.Windows.Automation.MultipleViewPattern.MultipleViewPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.MultipleViewPattern" /> object using its <see cref="P:System.Windows.Automation.MultipleViewPattern.Current" /> or <see cref="P:System.Windows.Automation.MultipleViewPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.MultipleViewPattern.MultipleViewPatternInformation.CurrentView">
      <summary>Retrieves the current control-specific view.</summary>
      <returns>The integer value for the current view of the <see cref="T:System.Windows.Automation.AutomationElement" />. The default value is 0.</returns>
    </member>
    <member name="M:System.Windows.Automation.MultipleViewPattern.MultipleViewPatternInformation.GetSupportedViews">
      <summary>Retrieves a collection of control-specific view identifiers.</summary>
      <returns>A collection of integer values that identify the views available for an <see cref="T:System.Windows.Automation.AutomationElement" />. The default is an empty integer array.</returns>
    </member>
    <member name="T:System.Windows.Automation.NotCondition">
      <summary>Represents a <see cref="T:System.Windows.Automation.Condition" /> that is the negative of a specified <see cref="T:System.Windows.Automation.Condition" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.NotCondition.#ctor(System.Windows.Automation.Condition)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NotCondition" /> class.</summary>
      <param name="condition">The condition to negate.</param>
    </member>
    <member name="P:System.Windows.Automation.NotCondition.Condition">
      <summary>Gets the <see cref="T:System.Windows.Automation.Condition" /> that this <see cref="T:System.Windows.Automation.NotCondition" /> negates. </summary>
      <returns>The <see cref="T:System.Windows.Automation.Condition" /> that this <see cref="T:System.Windows.Automation.NotCondition" /> negates.</returns>
    </member>
    <member name="T:System.Windows.Automation.OrCondition">
      <summary>Represents a combination of two or more conditions where a match exists if any one of the conditions is true.</summary>
    </member>
    <member name="M:System.Windows.Automation.OrCondition.#ctor(System.Windows.Automation.Condition[])">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.OrCondition" /> class.</summary>
      <param name="conditions">Two or more conditions, any one of which may be true for a match.</param>
    </member>
    <member name="M:System.Windows.Automation.OrCondition.GetConditions">
      <summary>Retrieves the conditions that are combined in this condition.</summary>
      <returns>The conditions combined in this condition.</returns>
    </member>
    <member name="T:System.Windows.Automation.PropertyCondition">
      <summary>Represents a <see cref="T:System.Windows.Automation.Condition" /> that tests whether a property has a specified value.</summary>
    </member>
    <member name="M:System.Windows.Automation.PropertyCondition.#ctor(System.Windows.Automation.AutomationProperty,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.PropertyCondition" /> class.</summary>
      <param name="property">The property to test.</param>
      <param name="value">The value to test the property for.</param>
    </member>
    <member name="M:System.Windows.Automation.PropertyCondition.#ctor(System.Windows.Automation.AutomationProperty,System.Object,System.Windows.Automation.PropertyConditionFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.PropertyCondition" /> class, with flags.</summary>
      <param name="property">The property to test.</param>
      <param name="value">The value to test the property for.</param>
      <param name="flags">Flags that affect the comparison.</param>
    </member>
    <member name="P:System.Windows.Automation.PropertyCondition.Flags">
      <summary>Gets the flags used for testing the property value.</summary>
    </member>
    <member name="P:System.Windows.Automation.PropertyCondition.Property">
      <summary>Gets the property that this condition is testing.</summary>
    </member>
    <member name="P:System.Windows.Automation.PropertyCondition.Value">
      <summary>Gets the property value that this condition is testing.</summary>
    </member>
    <member name="T:System.Windows.Automation.PropertyConditionFlags">
      <summary>Contains values that specify how a property value is tested in a <see cref="T:System.Windows.Automation.PropertyCondition" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.PropertyConditionFlags.None">
      <summary>Specifies that the property value is tested using default behavior (case-sensitive comparison for strings).</summary>
    </member>
    <member name="F:System.Windows.Automation.PropertyConditionFlags.IgnoreCase">
      <summary>Specifies that comparison with a string property value is not case-sensitive.</summary>
    </member>
    <member name="T:System.Windows.Automation.RangeValuePattern">
      <summary>Represents a control that can be set to a value within a range.</summary>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.Cached">
      <summary>Gets the cached property values for this <see cref="T:System.Windows.Automation.RangeValuePattern" />.</summary>
      <returns>The cached property values.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.Current">
      <summary>Gets the current property values for this <see cref="T:System.Windows.Automation.RangeValuePattern" />.</summary>
      <returns>The current property values.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.IsReadOnly" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.LargeChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.LargeChange" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.MaximumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Maximum" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.MinimumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Minimum" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.RangeValuePattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.RangeValuePattern.SetValue(System.Double)">
      <summary>Sets the value associated with the UI Automation element.</summary>
      <param name="value">The new value of the element.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than the minimum or greater than the maximum value of the element.</exception>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.SmallChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.SmallChange" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.RangeValuePattern" /> object using its <see cref="P:System.Windows.Automation.TransformPattern.Current" /> or <see cref="P:System.Windows.Automation.TransformPattern.Cached" /> accessors. </summary>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.IsReadOnly">
      <summary>Gets a value that specifies whether the value of a UI Automation element is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.LargeChange">
      <summary>Gets the control-specific large-change value which is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property.</summary>
      <returns>The large-change value or null if the element does not support <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.LargeChange" />. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Maximum">
      <summary>Gets the maximum range value supported by the UI Automation element.</summary>
      <returns>The maximum value supported by the UI Automation element or null if the element does not support <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Maximum" />. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Minimum">
      <summary>Gets the minimum range value supported by the UI Automation element.</summary>
      <returns>The minimum value supported by the UI Automation element or null if the element does not support <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Minimum" />. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.SmallChange">
      <summary>Gets the small-change value, unique to the UI Automation element, which is added to or subtracted from the elements <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value" /> property.</summary>
      <returns>The small-change value unique to the UI Automation element or null if the element does not support <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.SmallChange" />. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value">
      <summary>Gets the current value of the UI Automation element.</summary>
      <returns>The current value of the UI Automation element or null if the element does not support <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value" />. The default value is 0.0.</returns>
    </member>
    <member name="T:System.Windows.Automation.ScrollItemPattern">
      <summary>Represents child controls of containers that support the <see cref="T:System.Windows.Automation.ScrollPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollItemPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ScrollItemPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.ScrollItemPattern.ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the <see cref="T:System.Windows.Automation.AutomationElement" /> within the visible region (viewport) of the container.</summary>
      <exception cref="T:System.InvalidOperationException">The item could not be scrolled into view.</exception>
    </member>
    <member name="T:System.Windows.Automation.ScrollPattern">
      <summary>Represents controls that act as scrollable containers for a collection of child elements. The children of this element support <see cref="T:System.Windows.Automation.ScrollItemPattern" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.ScrollPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.ScrollPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.HorizontallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontallyScrollable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.HorizontalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontalScrollPercent" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.HorizontalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontalViewSize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.NoScroll">
      <summary>Specifies that scrolling should not be performed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ScrollPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.ScrollPattern.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the visible region of the content area horizontally and vertically.</summary>
      <param name="horizontalAmount">The horizontal increment specific to the control. <see cref="F:System.Windows.Automation.ScrollPattern.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <param name="verticalAmount">The vertical increment specific to the control. <see cref="F:System.Windows.Automation.ScrollPattern.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <exception cref="T:System.ArgumentException">A control supports <see cref="F:System.Windows.Automation.ScrollAmount.SmallIncrement" /> values exclusively for horizontal or vertical scrolling but a <see cref="F:System.Windows.Automation.ScrollAmount.LargeIncrement" /> value is passed in.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="M:System.Windows.Automation.ScrollPattern.ScrollHorizontal(System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the currently visible region of the content area, horizontally, the specified <see cref="T:System.Windows.Automation.ScrollAmount" />.</summary>
      <param name="amount">The horizontal <see cref="T:System.Windows.Automation.ScrollAmount" /> increment specific to the control.</param>
      <exception cref="T:System.ArgumentException">If a control supports <see cref="F:System.Windows.Automation.ScrollAmount.SmallIncrement" /> values exclusively for horizontal or vertical scrolling but a <see cref="F:System.Windows.Automation.ScrollAmount.LargeIncrement" /> value is passed in.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="M:System.Windows.Automation.ScrollPattern.ScrollVertical(System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the currently visible region of the content area, vertically, the specified <see cref="T:System.Windows.Automation.ScrollAmount" />.</summary>
      <param name="amount">The vertical <see cref="T:System.Windows.Automation.ScrollAmount" /> increment specific to the control.</param>
      <exception cref="T:System.ArgumentException">If a control supports <see cref="F:System.Windows.Automation.ScrollAmount.SmallIncrement" /> values exclusively for horizontal or vertical scrolling but a <see cref="F:System.Windows.Automation.ScrollAmount.LargeIncrement" /> value is passed in.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="M:System.Windows.Automation.ScrollPattern.SetScrollPercent(System.Double,System.Double)">
      <summary>Sets the horizontal and/or vertical scroll position as a percentage of the total content area within the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <param name="horizontalPercent">The percentage of the total horizontal content area. <see cref="F:System.Windows.Automation.ScrollPattern.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <param name="verticalPercent">The percentage of the total vertical content area. <see cref="F:System.Windows.Automation.ScrollPattern.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <exception cref="T:System.ArgumentException">A value that cannot be converted to a double is passed in.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A value greater than 100 or less than 0 is passed in (except -1, which is equivalent to <see cref="F:System.Windows.Automation.ScrollPattern.NoScroll" />). The <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontalScrollPercent" /> and <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticalScrollPercent" /> values are normalized to either 0% or 100%. </exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.VerticallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticallyScrollable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.VerticalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticalScrollPercent" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.VerticalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticalViewSize" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollPattern.ScrollPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.ScrollPattern" /> object using its <see cref="P:System.Windows.Automation.ScrollPattern.Current" /> or <see cref="P:System.Windows.Automation.ScrollPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontallyScrollable">
      <summary>Gets a value that indicates whether the UI Automation element can scroll horizontally.</summary>
      <returns>true if the UI Automation element can scroll horizontally; otherwise false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontalScrollPercent">
      <summary>Gets the current horizontal scroll position.</summary>
      <returns>The horizontal scroll position as a percentage of the total content area within the UI Automation element. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontalViewSize">
      <summary>Gets the current horizontal view size.</summary>
      <returns>The horizontal size of the viewable region as a percentage of the total content area within the UI Automation element. The default value is 100.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticallyScrollable">
      <summary>Retrieves a value that indicates whether the UI Automation element can scroll vertically.</summary>
      <returns>true if the UI Automation element can scroll horizontally; otherwise false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticalScrollPercent">
      <summary>Gets the current vertical scroll position.</summary>
      <returns>The vertical scroll position as a percentage of the total content area within the UI Automation element. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticalViewSize">
      <summary>Gets the current vertical view size.</summary>
      <returns>The vertical size of the viewable region as a percentage of the total content area within the UI Automation element. The default value is 100.0.</returns>
    </member>
    <member name="T:System.Windows.Automation.SelectionItemPattern">
      <summary>Represents selectable child items of container controls that support <see cref="T:System.Windows.Automation.SelectionPattern" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.SelectionItemPattern.AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
      <exception cref="T:System.InvalidOperationException">An attempt is made to add a selection to a single-selection container where <see cref="F:System.Windows.Automation.SelectionPattern.CanSelectMultipleProperty" /> = false and another element is already selected.</exception>
    </member>
    <member name="P:System.Windows.Automation.SelectionItemPattern.Cached">
      <summary>Gets the cached property values for this <see cref="T:System.Windows.Automation.SelectionItemPattern" />.</summary>
      <returns>The cached property values.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.SelectionItemPattern.Current">
      <summary>Gets the current property values for this <see cref="T:System.Windows.Automation.SelectionItemPattern" />.</summary>
      <returns>The current property values.</returns>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.ElementAddedToSelectionEvent">
      <summary>Identifies the event raised when an item is added to a collection of selected items.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.ElementRemovedFromSelectionEvent">
      <summary>Identifies the event raised when an item is removed from a collection of selected items.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.ElementSelectedEvent">
      <summary>Identifies the event that is raised when a call to any of <see cref="M:System.Windows.Automation.SelectionItemPattern.Select" />, <see cref="M:System.Windows.Automation.SelectionItemPattern.AddToSelection" />, or <see cref="M:System.Windows.Automation.SelectionItemPattern.RemoveFromSelection" /> results in a single item being selected.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.IsSelected" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SelectionItemPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.SelectionItemPattern.RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
      <exception cref="T:System.InvalidOperationException">An attempt is made to remove a selection from a selection container where one item is selected and <see cref="F:System.Windows.Automation.SelectionPattern.IsSelectionRequiredProperty" /> = true.</exception>
    </member>
    <member name="M:System.Windows.Automation.SelectionItemPattern.Select">
      <summary>Deselects any selected items and then selects the current element.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.SelectionContainerProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.SelectionContainer" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.SelectionItemPattern" /> object using its <see cref="P:System.Windows.Automation.SelectionItemPattern.Current" /> or <see cref="P:System.Windows.Automation.SelectionItemPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.IsSelected">
      <summary>Gets a value that indicates whether an item is selected. </summary>
      <returns>true if the item is selected; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.SelectionContainer">
      <summary>Gets the <see cref="T:System.Windows.Automation.AutomationElement" /> that supports the <see cref="T:System.Windows.Automation.SelectionPattern" /> control pattern and acts as the container for the calling object.</summary>
      <returns>The container object. The default is a null reference (Nothing in Microsoft Visual Basic .NET).</returns>
    </member>
    <member name="T:System.Windows.Automation.SelectionPattern">
      <summary>Represents a control that acts as a container for a collection of selectable child items. The children of this element support the <see cref="T:System.Windows.Automation.SelectionItemPattern" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.SelectionPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.SelectionPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.SelectionPattern.CanSelectMultipleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.CanSelectMultiple" /> property.</summary>
    </member>
    <member name="P:System.Windows.Automation.SelectionPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.SelectionPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.SelectionPattern.InvalidatedEvent">
      <summary>Identifies the event that is raised when a selection in a container has changed significantly and requires sending more addition and removal events than the <see cref="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" /> constant permits.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPattern.IsSelectionRequiredProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.IsSelectionRequired" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SelectionPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPattern.SelectionProperty">
      <summary>Identifies the property that gets the selected items in a container.</summary>
    </member>
    <member name="T:System.Windows.Automation.SelectionPattern.SelectionPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.SelectionPattern" /> object using its <see cref="P:System.Windows.Automation.SelectionPattern.Current" /> or <see cref="P:System.Windows.Automation.SelectionPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.CanSelectMultiple">
      <summary>Gets a value that specifies whether the container allows more than one child element to be selected concurrently.</summary>
      <returns>true if the control supports multiple selection; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.GetSelection">
      <summary>Retrieves all items in the selection container that are selected. </summary>
      <returns>The collection of selected items. The default is an empty array.</returns>
    </member>
    <member name="P:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.IsSelectionRequired">
      <summary>Gets a value that specifies whether the container requires at least one child item to be selected. </summary>
      <returns>true if the control requires at least one item to be selected; otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Automation.SynchronizedInputPattern">
      <summary>Represents objects that support synchronized input events.</summary>
    </member>
    <member name="M:System.Windows.Automation.SynchronizedInputPattern.Cancel">
      <summary>Stops listening for input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPattern.InputDiscardedEvent">
      <summary>Identifies the event raised when WPF discards input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPattern.InputReachedOtherElementEvent">
      <summary>Identifies the event raised when the input was received by an element other than the one currently listening for the input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPattern.InputReachedTargetEvent">
      <summary>Identifies the event raised when the input was received by the element currently listening for the input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SynchronizedInputPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.SynchronizedInputPattern.StartListening(System.Windows.Automation.SynchronizedInputType)">
      <summary>Designates that the provider start listening for input of the specified type.</summary>
      <param name="inputType">The type of input to listen for.</param>
    </member>
    <member name="T:System.Windows.Automation.TableItemPattern">
      <summary>Represents the child controls of containers that support <see cref="T:System.Windows.Automation.TablePattern" />. </summary>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.Cached">
      <summary>Gets the cached property values for this <see cref="T:System.Windows.Automation.TableItemPattern" />.</summary>
      <returns>The cached property values.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.TableItemPattern.ColumnHeaderItemsProperty">
      <summary>Identifies the property that retrieves all the column headers associated with a table item or cell.</summary>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.Current">
      <summary>Gets the current property values for this <see cref="T:System.Windows.Automation.TableItemPattern" />.</summary>
      <returns>The current property values.</returns>
    </member>
    <member name="F:System.Windows.Automation.TableItemPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TableItemPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPattern.RowHeaderItemsProperty">
      <summary>Identifies the property that retrieves all the row headers associated with a table item or cell.</summary>
    </member>
    <member name="T:System.Windows.Automation.TableItemPattern.TableItemPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.TableItemPattern" /> object using its <see cref="P:System.Windows.Automation.TableItemPattern.Current" /> or <see cref="P:System.Windows.Automation.TableItemPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.Column">
      <summary>Gets the ordinal number of the column containing the table cell or item.</summary>
      <returns>A zero-based ordinal number representing the column containing the table cell or item.</returns>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.ColumnSpan">
      <summary>Gets the number of columns spanned by a table cell or item.</summary>
      <returns>The number of columns spanned. The default value is 1.</returns>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.ContainingGrid">
      <summary>Gets a UI Automation element that supports the GridPattern control pattern and represents the table cell or item container.</summary>
      <returns>A UI Automation element that supports the GridPattern control pattern and represents the table cell or item container.</returns>
    </member>
    <member name="M:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.GetColumnHeaderItems">
      <summary>Retrieves all the column headers associated with a table item or cell.</summary>
      <returns>A collection of column header elements. The default is an empty array.</returns>
    </member>
    <member name="M:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.GetRowHeaderItems">
      <summary>Retrieves all the row headers associated with a table item or cell.</summary>
      <returns>A collection of row header elements. The default is an empty array.</returns>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.Row">
      <summary>Gets the ordinal number of the row containing the table cell or item.</summary>
      <returns>A zero-based ordinal number representing the column containing the table cell or item.</returns>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.RowSpan">
      <summary>Gets the number of rows spanned by a table cell or item.</summary>
      <returns>The number of columns spanned. The default value is 1.</returns>
    </member>
    <member name="T:System.Windows.Automation.TablePattern">
      <summary>Represents controls that act as containers for a collection of child elements. The children of this element support <see cref="T:System.Windows.Automation.TableItemPattern" /> and are organized in a two-dimensional logical coordinate system that can be traversed by row and column. </summary>
    </member>
    <member name="P:System.Windows.Automation.TablePattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.TablePattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.TablePattern.ColumnHeadersProperty">
      <summary>Identifies the property that gets the collection of column headers for a table.</summary>
    </member>
    <member name="P:System.Windows.Automation.TablePattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.TablePattern" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TablePattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePattern.RowHeadersProperty">
      <summary>Identifies the property that gets the collection of row headers for a table.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePattern.RowOrColumnMajorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TablePattern.TablePatternInformation.RowOrColumnMajor" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.TablePattern.TablePatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.TablePattern" /> object using its <see cref="P:System.Windows.Automation.TablePattern.Current" /> or <see cref="P:System.Windows.Automation.TablePattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.TablePattern.TablePatternInformation.ColumnCount">
      <summary>Gets the total number of columns in a table.</summary>
      <returns>The total number of columns in a table. The default value is zero.</returns>
    </member>
    <member name="M:System.Windows.Automation.TablePattern.TablePatternInformation.GetColumnHeaders">
      <summary>Retrieves a collection of <see cref="T:System.Windows.Automation.AutomationElement" />s representing all the column headers in a table.</summary>
      <returns>A collection of <see cref="T:System.Windows.Automation.AutomationElement" />s. The default is an empty array.</returns>
    </member>
    <member name="M:System.Windows.Automation.TablePattern.TablePatternInformation.GetRowHeaders">
      <summary>Retrieves a collection of <see cref="T:System.Windows.Automation.AutomationElement" />s representing all the row headers in a table.</summary>
      <returns>A collection of <see cref="T:System.Windows.Automation.AutomationElement" />s. The default is an empty array.</returns>
    </member>
    <member name="P:System.Windows.Automation.TablePattern.TablePatternInformation.RowCount">
      <summary>Gets the total number of rows in a table.</summary>
      <returns>The total number of rows in a table. The default value is zero.</returns>
    </member>
    <member name="P:System.Windows.Automation.TablePattern.TablePatternInformation.RowOrColumnMajor">
      <summary>Retrieves the primary direction of traversal (<see cref="F:System.Windows.Automation.RowOrColumnMajor.ColumnMajor" />, <see cref="F:System.Windows.Automation.RowOrColumnMajor.RowMajor" />, <see cref="F:System.Windows.Automation.RowOrColumnMajor.Indeterminate" />) for the table.</summary>
      <returns>The primary direction of traversal. The default is <see cref="F:System.Windows.Automation.RowOrColumnMajor.Indeterminate" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.TextPattern">
      <summary>Represents controls that contain text.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.AnimationStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.AnimationStyle" /> attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.BackgroundColorAttribute">
      <summary>Identifies the BackgroundColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.BulletStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.BulletStyle" /> attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.CapStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.CapStyle" /> attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.CultureAttribute">
      <summary>Identifies the Culture (<see cref="T:System.Globalization.CultureInfo" />) attribute of a text range down to the sub-language level; for example, French–Switzerland (fr-CH) instead of French (fr). </summary>
    </member>
    <member name="P:System.Windows.Automation.TextPattern.DocumentRange">
      <summary>Gets a text range that encloses the main text of a document. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.FontNameAttribute">
      <summary>Identifies the FontName attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.FontSizeAttribute">
      <summary>Identifies the FontSize attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.FontWeightAttribute">
      <summary>Identifies the FontWeight attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.ForegroundColorAttribute">
      <summary>Identifies the ForegroundColor (COLORREF) attribute of a text range. </summary>
    </member>
    <member name="M:System.Windows.Automation.TextPattern.GetSelection">
      <summary>Retrieves a collection of disjoint text ranges associated with the current text selection or selections. </summary>
      <returns>A collection of disjoint text ranges.</returns>
      <exception cref="T:System.InvalidOperationException">The text container does not support text selection.</exception>
    </member>
    <member name="M:System.Windows.Automation.TextPattern.GetVisibleRanges">
      <summary>Retrieves an array of disjoint text ranges from a text container where each text range begins with the first partially visible line through to the end of the last partially visible line. </summary>
      <returns>The collection of visible text ranges within the container or an empty array. Null is never returned.</returns>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.HorizontalTextAlignmentAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.HorizontalTextAlignment" /> attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IndentationFirstLineAttribute">
      <summary>Identifies the IndentationFirstLine (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IndentationLeadingAttribute">
      <summary>Identifies the IndentationLeading(<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IndentationTrailingAttribute">
      <summary>Identifies the IndentationTrailing(<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IsHiddenAttribute">
      <summary>Identifies the IsHidden attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IsItalicAttribute">
      <summary>Identifies the IsItalic (<see cref="T:System.Windows.FontStyle" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IsReadOnlyAttribute">
      <summary>Identifies the IsReadOnly attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IsSubscriptAttribute">
      <summary>Identifies the IsSubscript (<see cref="T:System.Windows.FontVariants" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IsSuperscriptAttribute">
      <summary>Identifies the IsSuperscript (<see cref="T:System.Windows.FontVariants" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.MarginBottomAttribute">
      <summary>Identifies the MarginBottom (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.MarginLeadingAttribute">
      <summary>Identifies the MarginLeading (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.MarginTopAttribute">
      <summary>Identifies the MarginTop (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.MarginTrailingAttribute">
      <summary>Identifies the MarginTrailing (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.MixedAttributeValue">
      <summary>Identifies whether the value of a given attribute varies over a text range in a rich edit control.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.OutlineStylesAttribute">
      <summary>Identifies the OutlineStyles (<see cref="T:System.Windows.Automation.Text.OutlineStyles" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.OverlineColorAttribute">
      <summary>Identifies the OverlineColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.OverlineStyleAttribute">
      <summary>Identifies the OverlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TextPattern" /> pattern. </summary>
    </member>
    <member name="M:System.Windows.Automation.TextPattern.RangeFromChild(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves a text range enclosing a child element such as an image, hyperlink, Microsoft Excel spreadsheet, or other embedded object. </summary>
      <returns>A range that spans the child element.</returns>
      <param name="childElement">The enclosed object.</param>
      <exception cref="T:System.ArgumentNullException">The child element is null.</exception>
      <exception cref="T:System.InvalidOperationException">The element is not a child of the text container.</exception>
    </member>
    <member name="M:System.Windows.Automation.TextPattern.RangeFromPoint(System.Windows.Point)">
      <summary>Returns the degenerate (empty) text range nearest to the specified screen coordinates. </summary>
      <returns>A degenerate range nearest the specified location. Null is never returned.</returns>
      <param name="screenLocation">The location in screen coordinates.</param>
      <exception cref="T:System.ArgumentException">A given point is outside the <see cref="T:System.Windows.Automation.AutomationElement" /> associated with the text pattern.</exception>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.StrikethroughColorAttribute">
      <summary>Identifies the StrikethroughColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.StrikethroughStyleAttribute">
      <summary>Identifies the StrikethroughStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range.</summary>
    </member>
    <member name="P:System.Windows.Automation.TextPattern.SupportedTextSelection">
      <summary>Gets a value that specifies whether a text provider supports selection and, if so, the type of selection supported.</summary>
      <returns>One of None, Single, or Multiple from <see cref="T:System.Windows.Automation.SupportedTextSelection" />.</returns>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.TabsAttribute">
      <summary>Identifies the Tabs attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.TextChangedEvent">
      <summary>Identifies the event raised whenever textual content is modified.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.TextFlowDirectionsAttribute">
      <summary>Identifies the TextFlowDirections (<see cref="T:System.Windows.Automation.Text.FlowDirections" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.TextSelectionChangedEvent">
      <summary>Identifies the event raised when the text selection is modified. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.UnderlineColorAttribute">
      <summary>Identifies the UnderlineColor attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.UnderlineStyleAttribute">
      <summary>Identifies the UnderlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range. </summary>
    </member>
    <member name="T:System.Windows.Automation.TogglePattern">
      <summary>Represents a control that can cycle through a set of states and maintain a state once set. </summary>
    </member>
    <member name="P:System.Windows.Automation.TogglePattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.TogglePattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.TogglePattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.TogglePattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.TogglePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TogglePattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.TogglePattern.Toggle">
      <summary>Cycles through the toggle states of an <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TogglePattern.ToggleStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TogglePattern.TogglePatternInformation.ToggleState" />property.</summary>
    </member>
    <member name="T:System.Windows.Automation.TogglePattern.TogglePatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.TogglePattern" /> object using its <see cref="P:System.Windows.Automation.TogglePattern.Current" /> or <see cref="P:System.Windows.Automation.TogglePattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.TogglePattern.TogglePatternInformation.ToggleState">
      <summary>Retrieves the toggle state of the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.ToggleState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />. The default value is <see cref="F:System.Windows.Automation.ToggleState.Indeterminate" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.TransformPattern">
      <summary>Represents a control that can be moved, resized, or rotated within a two-dimensional space.</summary>
    </member>
    <member name="P:System.Windows.Automation.TransformPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.TransformPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.TransformPattern.CanMoveProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanMove" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPattern.CanResizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanResize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPattern.CanRotateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanRotate" /> property.</summary>
    </member>
    <member name="P:System.Windows.Automation.TransformPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.TransformPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="M:System.Windows.Automation.TransformPattern.Move(System.Double,System.Double)">
      <summary>Moves the control.</summary>
      <param name="x">Absolute screen coordinates of the left side of the control.</param>
      <param name="y">Absolute screen coordinates of the top of the control.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanMove" /> property is false.</exception>
    </member>
    <member name="F:System.Windows.Automation.TransformPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TransformPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.TransformPattern.Resize(System.Double,System.Double)">
      <summary>Resizes the control.</summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanResize" /> property is false.</exception>
    </member>
    <member name="M:System.Windows.Automation.TransformPattern.Rotate(System.Double)">
      <summary>Rotates the control.</summary>
      <param name="degrees">The number of degrees to rotate the element. A positive number rotates clockwise; a negative number rotates counterclockwise.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanRotate" /> property is false.</exception>
    </member>
    <member name="T:System.Windows.Automation.TransformPattern.TransformPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.TransformPattern" /> object using its <see cref="P:System.Windows.Automation.TransformPattern.Current" /> or <see cref="P:System.Windows.Automation.TransformPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanMove">
      <summary>Gets a value that specifies whether the UI Automation element can be moved.</summary>
      <returns>true if the element can be moved; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanResize">
      <summary>Gets a value that specifies whether the UI Automation element can be resized.</summary>
      <returns>true if the element can be resized; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanRotate">
      <summary>Gets a value that specifies whether the UI Automation element can be rotated.</summary>
      <returns>true if the element can be rotated; otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Automation.TreeWalker">
      <summary>Provides methods and properties used to navigate the UI Automation tree. </summary>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.#ctor(System.Windows.Automation.Condition)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.TreeWalker" /> class.</summary>
      <param name="condition">The view of the UI Automation element tree that <see cref="T:System.Windows.Automation.TreeWalker" /> will navigate.</param>
    </member>
    <member name="P:System.Windows.Automation.TreeWalker.Condition">
      <summary>Gets the object that defines the view for the <see cref="T:System.Windows.Automation.TreeWalker" /> object.</summary>
      <returns>The condition that defines the view. This is the value that was passed to the constructor.</returns>
    </member>
    <member name="F:System.Windows.Automation.TreeWalker.ContentViewWalker">
      <summary>Represents a predefined <see cref="T:System.Windows.Automation.TreeWalker" /> containing a view of elements in the tree that are marked as content controls.</summary>
    </member>
    <member name="F:System.Windows.Automation.TreeWalker.ControlViewWalker">
      <summary>Represents a predefined <see cref="T:System.Windows.Automation.TreeWalker" /> containing a view of elements in the tree that are marked as controls.</summary>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetFirstChild(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves the first child element of the specified <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The first child element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the first child.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetFirstChild(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the first child element of the specified <see cref="T:System.Windows.Automation.AutomationElement" /> and caches properties and patterns.</summary>
      <returns>The first child element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the first child.</param>
      <param name="request">A cache request object specifying properties and patterns on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetLastChild(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves the last child element of the specified <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.AutomationElement" /> that is the last child element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the last child.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetLastChild(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the last child element of the specified <see cref="T:System.Windows.Automation.AutomationElement" /> and caches properties and patterns.</summary>
      <returns>The last element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the last child.</param>
      <param name="request">A cache request object specifying properties and patterns on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetNextSibling(System.Windows.Automation.AutomationElement)">
      <summary> Retrieves the next sibling element of the specified <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The next sibling element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The <see cref="T:System.Windows.Automation.AutomationElement" /> from which to retrieve the next sibling.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetNextSibling(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the next sibling element of the specified <see cref="T:System.Windows.Automation.AutomationElement" /> and caches properties and patterns.</summary>
      <returns>The next sibling element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the next sibling.</param>
      <param name="request">A cache request object specifying properties and patterns on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetParent(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves the parent element of the specified <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The parent element, or a null reference (Nothing in Microsoft Visual Basic .NET) if the specified element is the root element in the tree, or if the parent element is not visible in the current view.</returns>
      <param name="element">The element whose parent is to be returned.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetParent(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the parent element of the specified <see cref="T:System.Windows.Automation.AutomationElement" /> and caches properties and patterns.</summary>
      <returns>The parent element, or a null reference (Nothing in Microsoft Visual Basic .NET) if the specified element is the root element in the tree, or the parent element is not visible in this view.</returns>
      <param name="element">The element whose parent is to be returned. </param>
      <param name="request">A cache request object specifying members on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache. </param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetPreviousSibling(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves the previous sibling of the specified <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The previous sibling element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the previous sibling.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetPreviousSibling(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the previous sibling of the specified <see cref="T:System.Windows.Automation.AutomationElement" /> and caches properties and patterns.</summary>
      <returns>The previous sibling element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the previous sibling.</param>
      <param name="request">A cache request object specifying properties and patterns on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.Normalize(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves the node itself, if it satisfies the <see cref="P:System.Windows.Automation.TreeWalker.Condition" />, or the nearest parent or ancestor node that satisfies the <see cref="P:System.Windows.Automation.TreeWalker.Condition" />.</summary>
      <returns>The nearest <see cref="T:System.Windows.Automation.AutomationElement" /> in the current view. If the navigation up the ancestor chain reaches the root element, the root element is returned.</returns>
      <param name="element">The element from which to start the normalization.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.Normalize(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the node itself, if it satisfies the <see cref="P:System.Windows.Automation.TreeWalker.Condition" />, or the nearest parent or ancestor node that satisfies the <see cref="P:System.Windows.Automation.TreeWalker.Condition" />, and caches properties and patterns.</summary>
      <returns>The nearest <see cref="T:System.Windows.Automation.AutomationElement" /> in the current view. If the navigation up the ancestor chain reaches the root element, the root element is returned.</returns>
      <param name="element">The element from which to start the normalization.</param>
      <param name="request">A cache request object specifying properties and patterns on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache.</param>
    </member>
    <member name="F:System.Windows.Automation.TreeWalker.RawViewWalker">
      <summary>Represents a predefined <see cref="T:System.Windows.Automation.TreeWalker" /> containing a view of all the elements in the tree.</summary>
    </member>
    <member name="T:System.Windows.Automation.ValuePattern">
      <summary>Represents a control that has an intrinsic value that does not span a range and can be represented as a string. This string may or may not be editable depending on the control and its settings.</summary>
    </member>
    <member name="P:System.Windows.Automation.ValuePattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.ValuePattern" />.</summary>
      <returns>The cached property values.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.ValuePattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.ValuePattern" />.</summary>
      <returns>The current property values.</returns>
    </member>
    <member name="F:System.Windows.Automation.ValuePattern.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ValuePattern.ValuePatternInformation.IsReadOnly" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ValuePattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.ValuePattern.SetValue(System.String)">
      <summary>Sets the value of the control.</summary>
      <param name="value"></param>
      <exception cref="T:System.InvalidOperationException">The control is read-only.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">The control is not enabled.</exception>
    </member>
    <member name="F:System.Windows.Automation.ValuePattern.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ValuePattern.ValuePatternInformation.Value" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.ValuePattern.ValuePatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.ValuePattern" /> object using its <see cref="P:System.Windows.Automation.ValuePattern.Current" /> or <see cref="P:System.Windows.Automation.ValuePattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.ValuePattern.ValuePatternInformation.IsReadOnly">
      <summary>Gets a value that specifies whether the value of a UI Automation element is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified.</returns>
    </member>
    <member name="P:System.Windows.Automation.ValuePattern.ValuePatternInformation.Value">
      <summary>Gets the value of the UI Automation element.</summary>
      <returns>The value of the UI Automation element as a string. The default is an empty string.</returns>
    </member>
    <member name="T:System.Windows.Automation.VirtualizedItemPattern">
      <summary>Represents items inside containers that are virtualized and need to be made fully accessible as UI Automation elements.</summary>
    </member>
    <member name="F:System.Windows.Automation.VirtualizedItemPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.VirtualizedItemPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.VirtualizedItemPattern.Realize">
      <summary>Makes the virtual item fully accessible as a UI Automation element.</summary>
    </member>
    <member name="T:System.Windows.Automation.WindowPattern">
      <summary>Represents a control that provides fundamental window-based functionality within a traditional graphical user interface (GUI).</summary>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.WindowPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.CanMaximizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.CanMinimizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize" /> property.</summary>
    </member>
    <member name="M:System.Windows.Automation.WindowPattern.Close">
      <summary>Attempts to close the current window.</summary>
      <exception cref="T:System.InvalidOperationException">The control is unable to perform the requested action.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">When the control is no longer available.</exception>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.WindowPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.IsModalProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.IsTopmostProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.WindowPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.WindowPattern.SetWindowVisualState(System.Windows.Automation.WindowVisualState)">
      <summary>Changes the <see cref="T:System.Windows.Automation.WindowVisualState" /> of the window. </summary>
      <param name="state">The requested <see cref="T:System.Windows.Automation.WindowVisualState" /> of the window.</param>
      <exception cref="T:System.InvalidOperationException">A control does not support a requested behavior.</exception>
    </member>
    <member name="M:System.Windows.Automation.WindowPattern.WaitForInputIdle(System.Int32)">
      <summary>Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first. </summary>
      <returns>true if the window has entered the idle state; false if the timeout occurred.</returns>
      <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameter passed in is not a valid number.</exception>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.WindowClosedEvent">
      <summary>Identifies the event that is raised when a window is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.WindowInteractionStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.WindowOpenedEvent">
      <summary>Identifies the event that is raised when a window is opened.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.WindowVisualStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.WindowPattern.WindowPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.WindowPattern" /> object using its <see cref="P:System.Windows.Automation.WindowPattern.Current" /> or <see cref="P:System.Windows.Automation.WindowPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize">
      <summary>Gets a value that specifies whether the <see cref="T:System.Windows.Automation.AutomationElement" /> can be maximized.</summary>
      <returns>true if the <see cref="T:System.Windows.Automation.AutomationElement" /> can be maximized; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize">
      <summary>Gets a value that specifies whether the current <see cref="T:System.Windows.Automation.AutomationElement" /> can be minimized. </summary>
      <returns>true if the <see cref="T:System.Windows.Automation.AutomationElement" /> can be minimized; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal">
      <summary>Gets a value that specifies whether the <see cref="T:System.Windows.Automation.AutomationElement" /> is modal.</summary>
      <returns>true if the <see cref="T:System.Windows.Automation.AutomationElement" /> is modal; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost">
      <summary>Gets a value that specifies whether the <see cref="T:System.Windows.Automation.AutomationElement" /> is the topmost element in the z-order.</summary>
      <returns>true if the <see cref="T:System.Windows.Automation.AutomationElement" /> is topmost; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState">
      <summary>Gets the <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />. </summary>
      <returns>The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />. The default value is <see cref="F:System.Windows.Automation.WindowInteractionState.Running" />.</returns>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState">
      <summary>Gets the <see cref="T:System.Windows.Automation.WindowVisualState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />. </summary>
      <returns>The <see cref="T:System.Windows.Automation.WindowVisualState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />. The default value is <see cref="F:System.Windows.Automation.WindowVisualState.Normal" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Text.TextPatternRange">
      <summary>Represents a span of continuous text in a <see cref="T:System.Windows.Automation.TextPattern" /> container. </summary>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection">
      <summary>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</summary>
      <exception cref="T:System.InvalidOperationException">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of Multiple).</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.Clone">
      <summary>Retrieves a new <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> identical to the original <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> and inheriting all properties of the original. </summary>
      <returns>The new text range. A null reference (Nothing in Microsoft Visual Basic .NET) is never returned.</returns>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)">
      <summary>Returns a <see cref="T:System.Boolean" /> value indicating whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range. </summary>
      <returns>true if the span of both text ranges is identical; otherwise false. </returns>
      <param name="range">A text range to compare. </param>
      <exception cref="T:System.ArgumentException">If the range being compared does not come from the same text provider.</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
      <summary>Returns an <see cref="T:System.Int32" /> indicating whether two text ranges have identical endpoints.  </summary>
      <returns>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint. Returns zero if the caller's endpoint is at the same location as the target endpoint. Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint. </returns>
      <param name="endpoint">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</param>
      <param name="targetRange">The target range for comparison.</param>
      <param name="targetEndpoint">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</param>
      <exception cref="T:System.ArgumentNullException">If range is a null reference (Nothing in Microsoft Visual Basic .NET).</exception>
      <exception cref="T:System.ArgumentException">If range is from another container.</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
      <summary>Expands the text range to the specified <see cref="T:System.Windows.Automation.Text.TextUnit" />.</summary>
      <param name="unit">The textual unit.</param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
      <summary>Returns a text range subset that has the specified attribute value. </summary>
      <returns>A text range having a matching attribute and attribute value; otherwise null (Nothing in Microsoft Visual Basic .NET). </returns>
      <param name="attribute">The attribute to search for.</param>
      <param name="value">The attribute value to search for. This value must match the type specified for the attribute. </param>
      <param name="backward">true if the last occurring text range should be returned instead of the first; otherwise false. </param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
      <summary>Returns a text range subset that contains the specified text. </summary>
      <returns>A text range matching the specified text; otherwise null (Nothing in Microsoft Visual Basic .NET). </returns>
      <param name="text">The text string to search for. </param>
      <param name="backward">true if the last occurring text range should be returned instead of the first; otherwise false. </param>
      <param name="ignoreCase">true if case should be ignored; otherwise false. </param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
      <summary>Returns the value of the specified attribute across the entire text range. </summary>
      <returns>Returns the value of the specified attribute. For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control. </returns>
      <param name="attribute">The text attribute.</param>
      <exception cref="T:System.ArgumentException">If the specified attribute is not valid.</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles">
      <summary>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</summary>
      <returns>An array of bounding rectangles for each full or partial line of text in a text range.An empty array for a degenerate text range.An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</returns>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.GetChildren">
      <summary>Retrieves a collection of all embedded objects that fall within the text range. </summary>
      <returns>A collection of all child objects that fall within the range. Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.Returns an empty collection if there are no child objects.</returns>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement">
      <summary>Returns the innermost <see cref="T:System.Windows.Automation.AutomationElement" /> that encloses the text range. </summary>
      <returns>The innermost element enclosing the caller. </returns>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
      <summary>Returns the plain text of the text range. </summary>
      <returns>The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />. </returns>
      <param name="maxLength">The maximum length of the string to return. Use -1 if no limit is required. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="maxLength" /> is less than -1.</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
      <summary>Moves the text range the specified number of text units.</summary>
      <returns>The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> endpoints. </returns>
      <param name="unit">The text unit boundary. </param>
      <param name="count">The number of text units to move. A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect. </param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
      <summary>Moves one endpoint of a text range to the specified endpoint of a second text range. </summary>
      <param name="endpoint">The endpoint to move.</param>
      <param name="targetRange">Another range from the same text provider.</param>
      <param name="targetEndpoint">An endpoint on the other range.</param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
      <summary>Moves one endpoint of the text range the specified number of <see cref="T:System.Windows.Automation.Text.TextUnit" />s within the document range. </summary>
      <returns>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</returns>
      <param name="endpoint">The endpoint to move.</param>
      <param name="unit">The textual unit for moving.</param>
      <param name="count">The number of units to move. A positive count moves the endpoint forward. A negative count moves backward. A count of 0 has no effect.</param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection">
      <summary>Removes a highlighted section of text, corresponding to the calling text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</summary>
      <exception cref="T:System.InvalidOperationException">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of Multiple).</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
      <summary>Causes the text control to scroll vertically until the text range is visible in the viewport. </summary>
      <param name="alignToTop">true if the text control should be scrolled so the text range is flush with the top of the viewport; false if it should be flush with the bottom of the viewport. </param>
      <exception cref="T:System.InvalidOperationException">If scrolling is not supported by the control.</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.Select">
      <summary>Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</summary>
      <exception cref="T:System.InvalidOperationException">Occurs when text selection is not supported by the text control.</exception>
    </member>
    <member name="P:System.Windows.Automation.Text.TextPatternRange.TextPattern">
      <summary>Gets the <see cref="T:System.Windows.Automation.TextPattern" /> associated with the text range. </summary>
      <returns>The text provider.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\UIAutomationProvider.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UIAutomationProvider</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.Provider.AutomationInteropProvider">
      <summary>Provides support for communication between UI Automation providers and UI Automation client applications.</summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId">
      <summary>Contains a value that, when returned as the first element of the array passed by the UI Automation provider to <see cref="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId" />, indicates that the ID is partial and should be appended to the ID provided by the base provider.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.AutomationInteropProvider.ClientsAreListening">
      <summary>Gets a value that specifies whether any UI Automation client application is subscribed to UI Automation events.</summary>
      <returns>true if a client is subscribed to events; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.AutomationInteropProvider.HostProviderFromHandle(System.IntPtr)">
      <summary>Returns a UI Automation provider that represents the specified window. </summary>
      <returns>The raw element provider for the specified window.</returns>
      <param name="hwnd">The handle of the window.</param>
    </member>
    <member name="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit">
      <summary>Specifies the maximum number of events to send before batching. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.AutomationInteropProvider.ItemsInvalidateLimit"></member>
    <member name="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationEvent(System.Windows.Automation.AutomationEvent,System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationEventArgs)">
      <summary>Raises a pattern event or a custom event.</summary>
      <param name="eventId">The event identifier.</param>
      <param name="provider">The element associated with the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationPropertyChangedEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationPropertyChangedEventArgs)">
      <summary>Raises an event when a UI Automation property has changed. </summary>
      <param name="element">The element associated with the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseStructureChangedEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.StructureChangedEventArgs)">
      <summary>Raises an event when the UI Automation tree has changed.</summary>
      <param name="provider">The element associated with the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.AutomationInteropProvider.ReturnRawElementProvider(System.IntPtr,System.IntPtr,System.IntPtr,System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Returns the UI automation provider for an element in response to a WM_GETOBJECT message. </summary>
      <returns>A pointer to data that should be assigned to <see cref="P:System.Windows.Forms.Message.Result" /> before passing the message to the base window procedure.</returns>
      <param name="hwnd">Handle of the element's window.</param>
      <param name="wParam">The wParam member of the WM_GETOBJECT message.</param>
      <param name="lParam">The lParam member of the WM_GETOBJECT message.</param>
      <param name="el">The UI Automation provider for the element.</param>
    </member>
    <member name="F:System.Windows.Automation.Provider.AutomationInteropProvider.RootObjectId">
      <summary>Contains a value used in the lParam member of a WM_GETOBJECT message, indicating that the server should return a reference to the root raw element provider. </summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IDockProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that expose their dock properties within a docking container. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IDockProvider.DockPosition">
      <summary>Gets the current <see cref="T:System.Windows.Automation.DockPosition" /> of the control within a docking container.</summary>
      <returns>The <see cref="T:System.Windows.Automation.DockPosition" /> of the control, relative to the boundaries of the docking container and other elements within the container.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IDockProvider.SetDockPosition(System.Windows.Automation.DockPosition)">
      <summary>Docks the control within a docking container.</summary>
      <param name="dockPosition">The dock position, relative to the boundaries of the docking container and other elements within the container.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IExpandCollapseProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that visually expand to display content and collapse to hide content.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse">
      <summary>Hides all nodes, controls, or content that are descendants of the control.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Expand">
      <summary>Displays all child nodes, controls, or content of the control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState">
      <summary>Gets the state, expanded or collapsed, of the control.</summary>
      <returns>The state, expanded or collapsed, of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IGridItemProvider">
      <summary>Exposes methods and properties to support UI Automation client access to individual child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.IGridProvider" />. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.Column">
      <summary>Gets the ordinal number of the column that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the column containing the cell or item.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan">
      <summary>Gets the number of columns spanned by a cell or item.</summary>
      <returns>The number of columns spanned. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid">
      <summary>Gets a UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and represents the container of the cell or item.</summary>
      <returns>A UI Automation provider that implements the <see cref="T:System.Windows.Automation.GridPattern" /> and represents the cell or item container. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.Row">
      <summary>Gets the ordinal number of the row that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the row containing the cell or item. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan">
      <summary>Gets the number of rows spanned by a cell or item.</summary>
      <returns>The number of rows spanned. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IGridProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that act as containers for a collection of child elements. The children of this element must implement <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" /> and be organized in a two-dimensional logical coordinate system that can be traversed (that is, a UI Automation client can move to adjacent controls) by using the keyboard.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount">
      <summary>Gets the total number of columns in a grid.</summary>
      <returns>The total number of columns in a grid.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IGridProvider.GetItem(System.Int32,System.Int32)">
      <summary>Retrieves the UI Automation provider for the specified cell.</summary>
      <returns>The UI Automation provider for the specified cell.</returns>
      <param name="row">The ordinal number of the row of interest.</param>
      <param name="column">The ordinal number of the column of interest.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridProvider.RowCount">
      <summary>Gets the total number of rows in a grid.</summary>
      <returns>The total number of rows in a grid.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IInvokeProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IItemContainerProvider">
      <summary>Exposes a method to enable applications to find an element in a container, such as a virtualized list.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IItemContainerProvider.FindItemByProperty(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Int32,System.Object)">
      <summary>Retrieves an element by the specified property value.</summary>
      <returns>The first item that matches the search criterion; otherwise, null if no items match.</returns>
      <param name="startAfter">The item in the container after which to begin the search.</param>
      <param name="propertyId">The property that contains the value to retrieve.</param>
      <param name="value">The value to retrieve.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IMultipleViewProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that provide, and are able to switch between, multiple representations of the same set of information or child controls.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView">
      <summary>Gets the current control-specific view.</summary>
      <returns>The value for the current view of the UI Automation element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.GetSupportedViews">
      <summary>Retrieves a collection of control-specific view identifiers.</summary>
      <returns>A collection of values that identifies the views available for a UI Automation element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.GetViewName(System.Int32)">
      <summary>Retrieves the name of a control-specific view.</summary>
      <returns>A localized name for the view.</returns>
      <param name="viewId">The view identifier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewId" /> is not a member of the supported views collection.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.SetCurrentView(System.Int32)">
      <summary>Sets the current control-specific view. </summary>
      <param name="viewId">A view identifier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewId" /> is not a member of the supported views collection.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRangeValueProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that can be set to a value within a range.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly">
      <summary>Gets a value that specifies whether the value of a control is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange">
      <summary>Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a large change is made, such as with the PAGE DOWN key.</summary>
      <returns>The large-change value supported by the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum">
      <summary>Gets the maximum range value supported by the control.</summary>
      <returns>The maximum value supported by the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum">
      <summary>Gets the minimum range value supported by the control.</summary>
      <returns>The minimum value supported by the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
      <summary>Sets the value of the control.</summary>
      <param name="value">The value to set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="value" /> is less than the minimum or greater than the maximum value of the control.</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange">
      <summary>Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a small change is made, such as with an arrow key.</summary>
      <returns>The small-change value or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderAdviseEvents">
      <summary>Exposes methods that are called to notify the root element of a fragment when a UI Automation client application begins or ends listening for events. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderAdviseEvents.AdviseEventAdded(System.Int32,System.Int32[])">
      <summary>Notifies the UI Automation provider when a UI Automation client begins listening for a specific event, including a property-changed event. </summary>
      <param name="eventId">The identifier of the event being added.</param>
      <param name="properties">The identifiers of the properties being added, or null if the event listener being added is not listening for property events.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderAdviseEvents.AdviseEventRemoved(System.Int32,System.Int32[])">
      <summary>Notifies the UI Automation provider when a UI Automation client stops listening for a specific event, including a property-changed event. </summary>
      <param name="eventId">The identifier of the event being removed</param>
      <param name="properties">The identifiers of the properties being removed, or null if the event listener being removed is not listening for property events.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderFragment">
      <summary>Exposes methods and properties on user interface (UI) elements that are part of a structure more than one level deep, such as a list box or a list item. Implemented by UI Automation providers.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle">
      <summary>Gets the bounding rectangle of this element.</summary>
      <returns>The bounding rectangle, in screen coordinates.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRawElementProviderFragment.FragmentRoot">
      <summary>Retrieves the root node of the fragment.</summary>
      <returns>The root node. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetEmbeddedFragmentRoots">
      <summary>Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.</summary>
      <returns>An array of root fragments, or null.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId">
      <summary>Retrieves the runtime identifier of an element. </summary>
      <returns>The unique run-time identifier of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
      <summary>Retrieves the UI Automation element in a specified direction within the tree.</summary>
      <returns>The element in the specified direction, or null if there is no element in that direction</returns>
      <param name="direction">The direction in which to navigate.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragment.SetFocus">
      <summary>Sets the focus to this element. </summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot">
      <summary>Exposes methods and properties on the root element in a fragment. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot.ElementProviderFromPoint(System.Double,System.Double)">
      <summary>Retrieves the element in this fragment that is at the specified point. </summary>
      <returns>The provider for the child element at the specified point, if one exists, or the root provider if the point is on this element but not on any child element. Otherwise returns null.</returns>
      <param name="x">The X coordinate,.</param>
      <param name="y">The Y coordinate.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot.GetFocus">
      <summary>Retrieves the element in this fragment that has the input focus.</summary>
      <returns>The provider for the element in this fragment that has the input focus, if any; otherwise, a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderHwndOverride">
      <summary>Exposes a method that enables repositioning of window-based elements within the  UI Automation tree of the fragment. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderHwndOverride.GetOverrideProviderForHwnd(System.IntPtr)">
      <summary>Retrieves a UI automation provider for the specified element. </summary>
      <returns>The provider for the specified element, or a null reference (Nothing in Microsoft Visual Basic .NET) if the element's default provider is not being overridden.</returns>
      <param name="hwnd">The window handle of the element.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderSimple">
      <summary>Provides methods and properties that expose basic information about a UI element.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderSimple.GetPatternProvider(System.Int32)">
      <summary>Retrieves an object that provides support for a control pattern on a UI Automation element.</summary>
      <returns>Object that implements the pattern interface, or null if the pattern is not supported.</returns>
      <param name="patternId">Identifier of the pattern.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderSimple.GetPropertyValue(System.Int32)">
      <summary>Retrieves the value of a property supported by the UI Automation provider.</summary>
      <returns>The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.</returns>
      <param name="propertyId">The property identifier.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRawElementProviderSimple.HostRawElementProvider">
      <summary>Gets a base provider for this element.</summary>
      <returns>The base provider, or null.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRawElementProviderSimple.ProviderOptions">
      <summary>Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. </summary>
      <returns>Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IScrollItemProvider">
      <summary>Exposes methods and properties to support UI Automation client access to individual child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.IScrollProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.</summary>
      <exception cref="T:System.InvalidOperationException">The item cannot be scrolled into view.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IScrollProvider">
      <summary>Exposes methods and properties to support UI Automation client access to a control that acts as a scrollable container for a collection of child objects. The children of this control must implement <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll horizontally.</summary>
      <returns>true if the control can scroll horizontally; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent">
      <summary>Gets the current horizontal scroll position.</summary>
      <returns>The horizontal scroll position as a percentage of the total content area within the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize">
      <summary>Gets the current horizontal view size.</summary>
      <returns>The horizontal size of the viewable region as a percentage of the total content area within the control. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollProvider.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the visible region of the content area horizontally and vertically.</summary>
      <param name="horizontalAmount">The horizontal increment specific to the control. <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <param name="verticalAmount">The vertical increment specific to the control. <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <exception cref="T:System.ArgumentException">If a control supports <see cref="F:System.Windows.Automation.ScrollAmount.SmallIncrement" /> values exclusively for horizontal or vertical scrolling but a <see cref="F:System.Windows.Automation.ScrollAmount.LargeIncrement" /> value is passed in.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollProvider.SetScrollPercent(System.Double,System.Double)">
      <summary>Sets the horizontal and vertical scroll position as a percentage of the total content area within the control.</summary>
      <param name="horizontalPercent">The horizontal position as a percentage of the content area's total range. <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <param name="verticalPercent">The vertical position as a percentage of the content area's total range. <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <exception cref="T:System.ArgumentException">A value that cannot be converted to a double is passed in.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A value greater than 100 or less than 0 is passed in (except -1, which is equivalent to <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" />). The <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" /> and <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" /> values are normalized to either 100 percent or 0 percent. </exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll vertically.</summary>
      <returns>true if the control can scroll vertically; otherwise false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent">
      <summary>Gets the current vertical scroll position.</summary>
      <returns>The vertical scroll position as a percentage of the total content area within the control. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize">
      <summary>Gets the vertical view size.</summary>
      <returns>The vertical size of the viewable region as a percentage of the total content area within the control. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISelectionItemProvider">
      <summary>Exposes methods and properties to support UI Automation client access to individual, selectable child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected">
      <summary>Gets a value that indicates whether an item is selected. </summary>
      <returns>true if the element is selected; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.Select">
      <summary>Deselects any selected items and then selects the current element.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer">
      <summary>Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.</summary>
      <returns>The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISelectionProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that act as containers for a collection of individual, selectable child items. The children of this control must implement <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple">
      <summary>Gets a value that specifies whether the UI Automation provider allows more than one child element to be selected concurrently.</summary>
      <returns>true if multiple selection is allowed; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionProvider.GetSelection">
      <summary>Retrieves a UI Automation provider for each child element that is selected.</summary>
      <returns>A collection of UI Automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired">
      <summary>Gets a value that specifies whether the UI Automation provider requires at least one child element to be selected.</summary>
      <returns>true if selection is required; otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISynchronizedInputProvider">
      <summary>Exposes methods to facilitate UI Automation client access to controls that support synchronized input.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISynchronizedInputProvider.Cancel">
      <summary>Stops listening for input.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISynchronizedInputProvider.StartListening(System.Windows.Automation.SynchronizedInputType)">
      <summary>Designates that the provider start listening for input of the specified type.</summary>
      <param name="inputType">The type of input to listen for.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITableItemProvider">
      <summary>Exposes methods and properties to support UI Automation client access to child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.ITableProvider" />. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableItemProvider.GetColumnHeaderItems">
      <summary>Retrieves a collection of UI Automation providers representing all the column headers associated with a table item or cell.</summary>
      <returns>A collection of UI Automation providers. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableItemProvider.GetRowHeaderItems">
      <summary>Retrieves a collection of UI Automation providers representing all the row headers associated with a table item or cell.</summary>
      <returns>A collection of UI Automation providers. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITableProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that act as containers for a collection of child elements. The children of this element must implement <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" /> and be organized in a two-dimensional logical coordinate system that can be traversed (that is, a UI Automation client can move to adjacent controls) by using the keyboard.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders">
      <summary>Gets a collection of UI Automation providers that represents all the column headers in a table.</summary>
      <returns>A collection of UI Automation providers. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders">
      <summary>Retrieves a collection of UI Automation providers that represents all row headers in the table.</summary>
      <returns>A collection of UI Automation providers.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor">
      <summary>Retrieves the primary direction of traversal for the table.</summary>
      <returns>The primary direction of traversal. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITextProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that contain text.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange">
      <summary>Gets a text range that encloses the main text of a document. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.GetSelection">
      <summary>Retrieves a collection of disjoint text ranges associated with the current text selection or selections. </summary>
      <returns>A collection of disjoint text ranges.</returns>
      <exception cref="T:System.InvalidOperationException">If the UI Automation provider does not support text selection.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.GetVisibleRanges">
      <summary>Retrieves an array of disjoint text ranges from a text container where each text range begins with the first partially visible line through to the end of the last partially visible line. </summary>
      <returns>The collection of visible text ranges within the container or an empty array. A null reference (Nothing in Microsoft Visual Basic .NET) is never returned.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.RangeFromChild(System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Retrieves a text range enclosing a child element such as an image, hyperlink, or other embedded object. </summary>
      <returns>A range that spans the child element.</returns>
      <param name="childElement">The enclosed object.</param>
      <exception cref="T:System.ArgumentException">If the child element is a null reference (Nothing in Microsoft Visual Basic .NET).</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.RangeFromPoint(System.Windows.Point)">
      <summary>Returns the degenerate (empty) text range nearest to the specified screen coordinates. </summary>
      <returns>A degenerate range nearest the specified location. A null reference (Nothing in Microsoft Visual Basic .NET) is never returned.</returns>
      <param name="screenLocation">The location in screen coordinates. </param>
      <exception cref="T:System.ArgumentException">If a given point is outside the UI Automation element associated with the text pattern.</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection">
      <summary>Gets a value that specifies whether a text provider supports selection and, if so, the type of selection supported.</summary>
      <returns>One of None, Single, or Multiple from <see cref="T:System.Windows.Automation.SupportedTextSelection" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITextRangeProvider">
      <summary>Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <see cref="T:System.Windows.Automation.Provider.ITextProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
      <summary>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</summary>
      <exception cref="T:System.InvalidOperationException">If text provider does not support multiple, disjoint selections (that is, <see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /> must have a value of Multiple).</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
      <summary>Returns a new <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> identical to the original <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> and inheriting all properties of the original. </summary>
      <returns>The new text range. A null reference (Nothing in Microsoft Visual Basic .NET) is never returned.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
      <summary>Returns a value that indicates whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range. </summary>
      <returns>true if the span of both text ranges is identical; otherwise false. </returns>
      <param name="range">A text range to compare</param>
      <exception cref="T:System.ArgumentException">If the range being compared does not come from the same text provider.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
      <summary>Returns a value that specifies whether two text ranges have identical endpoints.  </summary>
      <returns>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint. Returns zero if the caller's endpoint is at the same location as the target endpoint. Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint. </returns>
      <param name="endpoint">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</param>
      <param name="targetRange">The target range for comparison.</param>
      <param name="targetEndpoint">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="targetRange" /> is from a different text provider.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
      <summary>Expands the text range to the specified text unit.</summary>
      <param name="unit">The textual unit.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
      <summary>Returns a text range subset that has the specified attribute value. </summary>
      <returns>A text range having a matching attribute and attribute value; otherwise null (Nothing in Microsoft Visual Basic .NET). </returns>
      <param name="attribute">The attribute to search for.</param>
      <param name="value">The attribute value to search for. This value must match the type specified for the attribute. </param>
      <param name="backward">true if the last occurring text range should be returned instead of the first; otherwise false. </param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
      <summary>Returns a text range subset that contains the specified text.</summary>
      <returns>A text range matching the specified text; otherwise null (Nothing in Microsoft Visual Basic .NET).</returns>
      <param name="text">The text string to search for.</param>
      <param name="backward">true if the last occurring text range should be returned instead of the first; otherwise false.</param>
      <param name="ignoreCase">true if case should be ignored; otherwise false.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
      <summary>Retrieves the value of the specified attribute across the text range. </summary>
      <returns>Retrieves an object representing the value of the specified attribute. For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a value of type <see cref="T:System.Boolean" />.Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control. </returns>
      <param name="attribute">The text attribute.</param>
      <exception cref="T:System.ArgumentException">If the specified attribute is not valid.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
      <summary>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</summary>
      <returns>An array of bounding rectangles for each full or partial line of text in a text range.An empty array for a degenerate range.An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
      <summary>Retrieves a collection of all embedded objects that fall within the text range. </summary>
      <returns>A collection of child objects that fall within the range. Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.Returns an empty collection if there are no child objects.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement">
      <summary>Returns the innermost control that encloses the text range. </summary>
      <returns>The enclosing control, typically the text provider that supplies the text range. However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
      <summary>Retrieves the plain text of the range. </summary>
      <returns>The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />. </returns>
      <param name="maxLength">The maximum length of the string to return. Use -1 if no limit is required.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="maxLength" /> is less than -1.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
      <summary>Moves the text range the specified number of text units.</summary>
      <returns>The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /> endpoints. </returns>
      <param name="unit">The text unit boundary.</param>
      <param name="count">The number of text units to move.A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
      <summary>Moves one endpoint of a text range to the specified endpoint of a second text range. </summary>
      <param name="endpoint">The endpoint to move.</param>
      <param name="targetRange">Another range from the same text provider.</param>
      <param name="targetEndpoint">An endpoint on the other range.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
      <summary>Moves one endpoint of the text range the specified number of text units within the document range. </summary>
      <returns>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</returns>
      <param name="endpoint">The endpoint to move.</param>
      <param name="unit">The textual unit for moving.</param>
      <param name="count">The number of units to move. A positive value moves the endpoint forward. A negative value moves backward. A value of 0 has no effect.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
      <summary>Removes a highlighted section of text, corresponding to the caller's <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections.</summary>
      <exception cref="T:System.InvalidOperationException">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of Multiple).</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
      <summary>Causes the text control to scroll vertically until the text range is visible in the viewport. </summary>
      <param name="alignToTop">true if the text control should be scrolled so the text range is flush with the top of the viewport; false if it should be flush with the bottom of the viewport. </param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Select">
      <summary>Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints. </summary>
      <exception cref="T:System.InvalidOperationException">Occurs when text selection is not supported by the text control.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IToggleProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that can cycle through a set of states and maintain a state once set.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IToggleProvider.Toggle">
      <summary>Cycles through the toggle states of a control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IToggleProvider.ToggleState">
      <summary>Gets the toggle state of the control.</summary>
      <returns>The <see cref="T:System.Windows.Automation.ToggleState" /> of the control. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITransformProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that can be moved, resized, or rotated within a two-dimensional space.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanMove">
      <summary>Gets a value that specifies whether the control can be moved.</summary>
      <returns>true if the element can be moved; otherwise false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanResize">
      <summary>Gets a value that specifies whether the UI Automation element can be resized.</summary>
      <returns>true if the element can be resized; otherwise false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate">
      <summary>Gets a value that specifies whether the control can be rotated.</summary>
      <returns>true if the element can be rotated; otherwise false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Move(System.Double,System.Double)">
      <summary>Moves the control.</summary>
      <param name="x">Absolute screen coordinates of the left side of the control.</param>
      <param name="y">Absolute screen coordinates of the top of the control.</param>
      <exception cref="T:System.InvalidOperationException">If the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanMove" /> property is false.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Resize(System.Double,System.Double)">
      <summary>Resizes the control. </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
      <exception cref="T:System.InvalidOperationException">If the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanResize" /> property is false.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Rotate(System.Double)">
      <summary>Rotates the control.</summary>
      <param name="degrees">The number of degrees to rotate the control. A positive number rotates clockwise; a negative number rotates counterclockwise.</param>
      <exception cref="T:System.InvalidOperationException">If the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate" /> property is false.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IValueProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls having an intrinsic value that does not span a range and that can be represented as a string. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly">
      <summary>Gets a value that specifies whether the value of a control is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)">
      <summary>Sets the value of a control.</summary>
      <param name="value"></param>
      <exception cref="T:System.InvalidOperationException">If locale-specific information is passed to a control in an incorrect format such as an incorrectly formatted date. </exception>
      <exception cref="T:System.ArgumentException">If a new value cannot be converted from a string to a format the control recognizes.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">When an attempt is made to manipulate a control that is not enabled.</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IValueProvider.Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control as a string. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IVirtualizedItemProvider">
      <summary>Exposes a method to support the virtualized item control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IVirtualizedItemProvider.Realize">
      <summary>Makes the virtual item fully accessible as a UI Automation element.</summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IWindowProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI). </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.Close">
      <summary>Attempts to close the window.</summary>
      <exception cref="T:System.InvalidOperationException">When the control is unable to perform the requested action.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">When the target element is no longer available (for example, the window has closed).</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState">
      <summary>Gets the interaction state of the window. </summary>
      <returns>The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the control. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.IsModal">
      <summary>Gets a value that specifies whether the window is modal.</summary>
      <returns>true if the window is modal; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost">
      <summary>Gets a value that specifies whether the window is the topmost element in the z-order.</summary>
      <returns>true if the window is topmost; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable">
      <summary>Gets a value that specifies whether the window can be maximized.</summary>
      <returns>true if the window can be maximized; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable">
      <summary>Gets a value that specifies whether the window can be minimized. </summary>
      <returns>true if the window can be minimized; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)">
      <summary>Changes the visual state of the window. For example, minimizes or maximizes it.</summary>
      <param name="state">The requested visual state of the window.</param>
      <exception cref="T:System.InvalidOperationException">When the control does not support the requested behavior.</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.VisualState">
      <summary>Gets the visual state of the window. </summary>
      <returns>The visual state of the window. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)">
      <summary>Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first. </summary>
      <returns>true if the window has entered the idle state; false if the timeout occurred.</returns>
      <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">When the parameter passed in is not a valid number.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.NavigateDirection">
      <summary>Contains values used to specify the direction of navigation within the UI Automation tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.NavigateDirection.Parent">
      <summary>The navigation direction is toward the parent.</summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.NavigateDirection.NextSibling">
      <summary>The navigation direction is to the next sibling. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling">
      <summary>The navigation direction is to the previous sibling. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.NavigateDirection.FirstChild">
      <summary>The navigation direction is to the first child. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.NavigateDirection.LastChild">
      <summary>The navigation direction is to the last child. </summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.ProviderOptions">
      <summary>Contains values that specify the type of UI Automation provider. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider">
      <summary>The UI Automation provider is a client-side provider. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider">
      <summary>The UI Automation provider is a server-side provider. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.NonClientAreaProvider">
      <summary>The UI Automation provider is a non-client-area provider. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.OverrideProvider">
      <summary>The UI Automation provider overrides another provider.</summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.ProviderOwnsSetFocus">
      <summary>The UI Automation provider handles its own focus, and does not want UI Automation to set focus to the nearest window on its behalf when <see cref="M:System.Windows.Automation.AutomationElement.SetFocus" /> is called. This option is typically used by providers for windows that appear to take focus without actually receiving Win32 focus, such as menus and drop-down menus.</summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.UseComThreading">
      <summary />
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\UIAutomationTypes.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UIAutomationTypes</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.AsyncContentLoadedEventArgs">
      <summary>Provides data for a <see cref="F:System.Windows.Automation.AutomationElement.AsyncContentLoadedEvent" />. </summary>
    </member>
    <member name="M:System.Windows.Automation.AsyncContentLoadedEventArgs.#ctor(System.Windows.Automation.AsyncContentLoadedState,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AsyncContentLoadedEventArgs" /> class.</summary>
      <param name="asyncContentState">The state of content loading.</param>
      <param name="percentComplete">Percentage of content that has been loaded.</param>
    </member>
    <member name="P:System.Windows.Automation.AsyncContentLoadedEventArgs.AsyncContentLoadedState">
      <summary>Gets the state of the content loading. </summary>
      <returns>One of the <see cref="T:System.Windows.Automation.AsyncContentLoadedState" /> values.</returns>
    </member>
    <member name="P:System.Windows.Automation.AsyncContentLoadedEventArgs.PercentComplete">
      <summary>Gets the percentage of content that has been loaded. </summary>
      <returns>The percentage of content that has been loaded.</returns>
    </member>
    <member name="T:System.Windows.Automation.AsyncContentLoadedState">
      <summary>Contains values that specify the state of the content being loaded into a content element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AsyncContentLoadedState.Beginning">
      <summary>Specifies that asynchronous loading of the content into the UI Automation element is beginning.</summary>
    </member>
    <member name="F:System.Windows.Automation.AsyncContentLoadedState.Progress">
      <summary>Specifies that asynchronous loading of the content into the UI Automation element is in progress. UI Automation providers should specify the percent complete so that client applications will know how much more content remains.</summary>
    </member>
    <member name="F:System.Windows.Automation.AsyncContentLoadedState.Completed">
      <summary>Specifies that asynchronous loading of the content into the UI Automation element is complete.</summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationElementIdentifiers">
      <summary>Contains values used as identifiers by UI Automation providers.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AcceleratorKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AcceleratorKey" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AccessKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AccessKey" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AsyncContentLoadedEvent">
      <summary>Identifies an event raised during asynchronous content-loading.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationFocusChangedEvent">
      <summary>Identifies an event that is raised when the focus has changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationPropertyChangedEvent">
      <summary>Identifies a property-changed event.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.BoundingRectangleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.BoundingRectangle" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ClassNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ClassName" /> property. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ClickablePointProperty">
      <summary>Identifies the <see cref="F:System.Windows.Automation.AutomationElement.ClickablePointProperty" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ControlTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ControlType" /> property. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.CultureProperty">
      <summary>Identifies the culture property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.FrameworkIdProperty">
      <summary>Identifies the property that contains the underlying framework's name for the element. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.HasKeyboardFocusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HasKeyboardFocus" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.HelpTextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HelpText" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsContentElementProperty">
      <summary>Identifies the property that indicates whether the element contains content that is valuable to the end user.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsControlElementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsDockPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.DockPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> property, which specifies whether the user interface (UI) item referenced by the <see cref="T:System.Windows.Automation.AutomationElement" /> is enabled.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsExpandCollapsePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ExpandCollapsePattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsGridItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.GridItemPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsGridPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.GridPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsInvokePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.InvokePattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsItemContainerPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsKeyboardFocusableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsKeyboardFocusable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsMultipleViewPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.MultipleViewPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsOffscreenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen" /> property, which indicates whether the UI Automation element is visible. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsPasswordProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsRangeValuePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.RangeValuePattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsRequiredForFormProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsScrollItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ScrollItemPattern" /> is available for this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsScrollPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ScrollPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsSelectionItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.SelectionItemPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsSelectionPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.SelectionPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsSynchronizedInputPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsTableItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TableItemPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsTablePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TablePattern" /> is available on this UI Automation element. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsTextPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TextPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsTogglePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TogglePattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsTransformPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TransformPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsValuePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ValuePattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsVirtualizedItemPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsWindowPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.WindowPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ItemStatusProperty">
      <summary>Identifies the property that specifies the status of the visual representation of a complex item.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LabeledByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LabeledBy" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LayoutInvalidatedEvent">
      <summary>Identifies the event that is raised when the layout is invalidated.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LocalizedControlTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LocalizedControlType" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.MenuClosedEvent">
      <summary>Identifies the event that is raised when a menu is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.MenuOpenedEvent">
      <summary>Identifies the event that is raised when a menu is opened.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.NativeWindowHandleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.NativeWindowHandle" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported">
      <summary>Indicates that a property is not supported.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Orientation" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ProcessIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ProcessId" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.RuntimeIdProperty">
      <summary>Identifies the property that contains the runtime identifier of the element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.StructureChangedEvent">
      <summary>Identifies the event that is raised when the UI Automation tree structure is changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ToolTipClosedEvent">
      <summary>Identifies the event that is raised when a ToolTip is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ToolTipOpenedEvent">
      <summary>Identifies the event that is raised when a ToolTip is opened.</summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationEvent">
      <summary>Identifies a UI Automation event.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationEvent.LookupById(System.Int32)">
      <summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationEvent" /> that encapsulates the specified numerical identifier.</summary>
      <returns>A new <see cref="T:System.Windows.Automation.AutomationEvent" />.</returns>
      <param name="id">Identifier of the event.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationEventArgs">
      <summary>Provides data for UI Automation events that are passed to an <see cref="T:System.Windows.Automation.AutomationEventHandler" /> delegate.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationEventArgs.#ctor(System.Windows.Automation.AutomationEvent)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AutomationEventArgs" /> class.</summary>
      <param name="eventId">The event identifier.</param>
    </member>
    <member name="P:System.Windows.Automation.AutomationEventArgs.EventId">
      <summary>Gets the event identifier.</summary>
      <returns>The event identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationEventHandler">
      <summary>Represents the method implemented by the UI Automation client application to handle an event raised by a UI Automation provider. </summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationIdentifier">
      <summary>Base class for types that identify control types, events, patterns, properties, and text attributes in UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationIdentifier.CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.Windows.Automation.AutomationIdentifier" /> with another <see cref="T:System.Windows.Automation.AutomationIdentifier" />.</summary>
      <returns>The hash code of this object minus the hash code of <paramref name="obj" />.</returns>
      <param name="obj">The object to compare this one with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationIdentifier.Equals(System.Object)">
      <summary>Returns a value indicating whether the supplied <see cref="T:System.Windows.Automation.AutomationIdentifier" /> is equivalent to this <see cref="T:System.Windows.Automation.AutomationIdentifier" />.</summary>
      <returns>true if the objects are equivalent; otherwise false.</returns>
      <param name="obj">An <see cref="T:System.Windows.Automation.AutomationIdentifier" /> object to compare with this identifier.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationIdentifier.GetHashCode">
      <summary>Returns the hash code for this UI Automation identifier.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationIdentifier.Id">
      <summary>Gets the underlying numerical identifier.</summary>
      <returns>The underlying identifier.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationIdentifier.ProgrammaticName">
      <summary>Gets the registered programmatic name.</summary>
      <returns>The programmatic name.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationPattern">
      <summary>Identifies a control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationPattern.LookupById(System.Int32)">
      <summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationPattern" /> that encapsulates a specified numerical identifier.</summary>
      <returns>The <see cref="T:System.Windows.Automation.AutomationPattern" /> specified by <paramref name="id" />.</returns>
      <param name="id">Identifier of the pattern.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationProperty">
      <summary>Identifies a property of an <see cref="T:System.Windows.Automation.AutomationElement" />. </summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperty.LookupById(System.Int32)">
      <summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationProperty" /> that encapsulates a specified numerical identifier.</summary>
      <param name="id">The property identifier.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationPropertyChangedEventArgs">
      <summary>Provides information about a property-changed event.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationPropertyChangedEventArgs.#ctor(System.Windows.Automation.AutomationProperty,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AutomationPropertyChangedEventArgs" /> class.</summary>
      <param name="property">The identifier of the property that has changed.</param>
      <param name="oldValue">The previous value of the property.</param>
      <param name="newValue">The new value of the property.</param>
    </member>
    <member name="P:System.Windows.Automation.AutomationPropertyChangedEventArgs.NewValue">
      <summary>Gets the new value of a property that has changed.</summary>
      <returns>The new value of the property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationPropertyChangedEventArgs.OldValue">
      <summary>Gets the old value of a property that has changed.</summary>
      <returns>The previous value of the property, or null (Nothing in Microsoft Visual Basic .NET) if the previous value is not readily available.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationPropertyChangedEventArgs.Property">
      <summary>Gets an <see cref="T:System.Windows.Automation.AutomationProperty" /> identifier indicating which property changed.</summary>
      <returns>The identifier of the property that has changed.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationPropertyChangedEventHandler">
      <summary>Represents the method implemented by the UI Automation client application to handle the event raised by a UI Automation provider when a property has changed.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationTextAttribute">
      <summary>Identifies UI Automation text attributes.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationTextAttribute.LookupById(System.Int32)">
      <summary>Retrieves a <see cref="T:System.Windows.Automation.AutomationTextAttribute" /> that encapsulates a specified numerical identifier.</summary>
      <param name="id">The numerical identifier.</param>
    </member>
    <member name="T:System.Windows.Automation.ControlType">
      <summary>Identifies the type of a user interface (UI) control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Button">
      <summary>Identifies a button control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Calendar">
      <summary>Identifies a calendar control, such as a date-picker.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.CheckBox">
      <summary>Identifies a check box control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ComboBox">
      <summary>Identifies a combo box control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Custom">
      <summary>Identifies a control that is not one of the defined control types.  </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.DataGrid">
      <summary>Identifies a data grid control. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.DataItem">
      <summary>Identifies a data item control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Document">
      <summary>Identifies a document control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Edit">
      <summary>Identifies an edit control, such as a text box.</summary>
    </member>
    <member name="M:System.Windows.Automation.ControlType.GetNeverSupportedPatterns">
      <summary>Retrieves the pattern identifiers that are not supported by the control type.</summary>
      <returns>An array of UI Automation pattern identifiers.</returns>
    </member>
    <member name="M:System.Windows.Automation.ControlType.GetRequiredPatternSets">
      <summary>Retrieves an array of sets of required patterns. </summary>
      <returns>An array of sets of required patterns.</returns>
    </member>
    <member name="M:System.Windows.Automation.ControlType.GetRequiredProperties">
      <summary>Retrieves an array of the required property identifiers (IDs) for this control type.</summary>
      <returns>An array of property IDs. </returns>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Group">
      <summary>Identifies a group control, which acts as a container for other controls.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Header">
      <summary>Identifies a header control, which is a container for the labels of rows and columns of information. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.HeaderItem">
      <summary>Identifies a header item, which is the label for a row or column of information. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Hyperlink">
      <summary>Identifies a hyperlink control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Image">
      <summary>Identifies an image control. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.List">
      <summary>Identifies a list control, such as a list box.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ListItem">
      <summary>Identifies a list item control, which is a child item of a list control.  </summary>
    </member>
    <member name="P:System.Windows.Automation.ControlType.LocalizedControlType">
      <summary>Gets a description of the control type. </summary>
      <returns>A localized description of the control type, such as "button". </returns>
    </member>
    <member name="M:System.Windows.Automation.ControlType.LookupById(System.Int32)">
      <summary>Retrieves a <see cref="T:System.Windows.Automation.ControlType" /> that encapsulates a specified numerical identifier. </summary>
      <param name="id">Identifier of the control type.</param>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Menu">
      <summary>Identifies a menu control, such as a top-level menu in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.MenuBar">
      <summary>Identifies a menu bar control, which generally contains a set of top-level menus. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.MenuItem">
      <summary>Identifies a menu item control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Pane">
      <summary>Identifies a pane control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ProgressBar">
      <summary>Identifies a progress bar control, which visually indicates the progress of a lengthy operation.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.RadioButton">
      <summary>Identifies a radio button control, which is a selection mechanism allowing exactly one selected item in a group.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ScrollBar">
      <summary>Identifies a scroll bar control, such as a scroll bar in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Separator">
      <summary>Identifies a separator, which creates a visual division in controls like menus and toolbars. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Slider">
      <summary>Identifies a slider control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Spinner">
      <summary>Identifies a spinner control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.SplitButton">
      <summary>Identifies a split button, which is a button that performs a default action and can also expand to a list of other possible actions. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.StatusBar">
      <summary>Identifies a status bar control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Tab">
      <summary>Identifies a tab control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.TabItem">
      <summary>Identifies a tab item control, which represents a page of a tab control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Table">
      <summary>Identifies a table.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Text">
      <summary>Identifies an edit control, such as a text box or rich text box.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Thumb">
      <summary>Identifies the control in a scrollbar that can be dragged to a different position.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.TitleBar">
      <summary>Identifies the caption bar on a window. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ToolBar">
      <summary>Identifies a toolbar, such as the control that contains a set of command buttons in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ToolTip">
      <summary>Identifies a tooltip control, an informational window that appears as a result of moving the pointer over a control or sometimes when tabbing to a control using the keyboard.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Tree">
      <summary>Identifies a tree control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.TreeItem">
      <summary>Identifies a node in a <see cref="F:System.Windows.Automation.ControlType.TreeItem" /> control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Window">
      <summary>Identifies a window frame, which contains child objects. </summary>
    </member>
    <member name="T:System.Windows.Automation.DockPatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IDockProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPatternIdentifiers.DockPositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IDockProvider.DockPosition" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.DockPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.DockPattern" /> pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.DockPosition">
      <summary>Contains values that specify the dock position of an object, represented by a <see cref="T:System.Windows.Automation.DockPattern" />, within a docking container.</summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Top">
      <summary>Indicates that the UI Automation element is docked along the top edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Left">
      <summary>Indicates that the UI Automation element is docked along the left edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Bottom">
      <summary>Indicates that the UI Automation element is docked along the bottom edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Right">
      <summary>Indicates that the UI Automation element is docked along the right edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Fill">
      <summary>Indicates that the UI Automation element is docked along all edges of the docking container and fills all available space within the container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.None">
      <summary>Indicates that the UI Automation element is not docked to any edge of the docking container. </summary>
    </member>
    <member name="T:System.Windows.Automation.ElementNotAvailableException">
      <summary>Contains information about the exception that is raised when an attempt is made to access an UI Automation element corresponding to a part of the user interface that is no longer available.</summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class. </summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class with a reference to the inner exception that caused this exception. </summary>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class with serialization information. </summary>
      <param name="info">Data needed to serialize or deserialize the object. </param>
      <param name="context">The source and destination of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class with a specified error message. </summary>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class with a specified error message and a reference to the inner exception that caused this exception. </summary>
      <param name="message">The description of the error.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Retrieves data needed to serialize the target object. </summary>
      <param name="info">Data needed to serialize or deserialize the object.</param>
      <param name="context">The destination of the serialized stream.</param>
    </member>
    <member name="T:System.Windows.Automation.ElementNotEnabledException">
      <summary>Contains information about the exception that is raised when an attempt is made to manipulate a control that is not enabled. </summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class. </summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class with serialization information.</summary>
      <param name="info">Data needed to serialize or deserialize the object. </param>
      <param name="context">The source and destination of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class with a specified error message. </summary>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class with a specified error message and a reference to the inner exception that caused this exception. </summary>
      <param name="message">The description of the error.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Retrieves data needed to serialize the target object. </summary>
      <param name="info">Data needed to serialize or deserialize the object.</param>
      <param name="context">The destination of the serialized stream.</param>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapsePatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePatternIdentifiers.ExpandCollapseStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ExpandCollapsePattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapseState">
      <summary>Contains values that specify the <see cref="T:System.Windows.Automation.ExpandCollapseState" /> of a UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.Collapsed">
      <summary>No child nodes, controls, or content of the UI Automation element are displayed. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.Expanded">
      <summary>All child nodes, controls or content of the UI Automation element are displayed. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.PartiallyExpanded">
      <summary>Some, but not all, child nodes, controls, or content of the UI Automation element are displayed. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.LeafNode">
      <summary>The UI Automation element has no child nodes, controls, or content to display. </summary>
    </member>
    <member name="T:System.Windows.Automation.GridItemPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ColumnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Column" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ColumnSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ContainingGridProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.GridItemPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.RowProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Row" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.RowSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.GridPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IGridProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.ColumnCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.GridPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.RowCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.RowCount" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.InvokePatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IInvokeProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent">
      <summary>Identifies the event raised when a control is activated. </summary>
    </member>
    <member name="F:System.Windows.Automation.InvokePatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern. </summary>
    </member>
    <member name="T:System.Windows.Automation.ItemContainerPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IItemContainerProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.ItemContainerPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ItemContainerPattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.MultipleViewPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.CurrentViewProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.MultipleViewPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.SupportedViewsProperty">
      <summary>Identifies the property that gets the control-specific collection of views.</summary>
    </member>
    <member name="T:System.Windows.Automation.NoClickablePointException">
      <summary>Contains information about the exception that is raised when <see cref="M:System.Windows.Automation.AutomationElement.GetClickablePoint" /> is called on a UI Automation element that has no clickable point.</summary>
    </member>
    <member name="M:System.Windows.Automation.NoClickablePointException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" /> class.</summary>
    </member>
    <member name="M:System.Windows.Automation.NoClickablePointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" /> class with serialization information.</summary>
      <param name="info">Data needed to serialize or deserialize the object. </param>
      <param name="context">The source and destination of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Automation.NoClickablePointException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" /> class with a specified error message.</summary>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Windows.Automation.NoClickablePointException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" /> class with a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The description of the error.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Windows.Automation.NoClickablePointException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Retrieves data needed to serialize the target object. </summary>
      <param name="info">Data needed to serialize or deserialize the object.</param>
      <param name="context">The destination of the serialized stream.</param>
    </member>
    <member name="T:System.Windows.Automation.OrientationType">
      <summary>Contains values that specify the orientation of a control.</summary>
    </member>
    <member name="F:System.Windows.Automation.OrientationType.None">
      <summary>Specifies that the control has no orientation.</summary>
    </member>
    <member name="F:System.Windows.Automation.OrientationType.Horizontal">
      <summary>Specifies that the control has horizontal orientation.</summary>
    </member>
    <member name="F:System.Windows.Automation.OrientationType.Vertical">
      <summary>Specifies that the control has vertical orientation.</summary>
    </member>
    <member name="T:System.Windows.Automation.ProxyAssemblyNotLoadedException">
      <summary>Contains information about an exception that is raised when there is a problem loading an assembly that contains client-side providers</summary>
    </member>
    <member name="M:System.Windows.Automation.ProxyAssemblyNotLoadedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" /> class. Used internally.</summary>
    </member>
    <member name="M:System.Windows.Automation.ProxyAssemblyNotLoadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" /> class with serialization information. Used internally.</summary>
      <param name="info">Data needed to serialize or deserialize the object.</param>
      <param name="context">The source and destination of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Automation.ProxyAssemblyNotLoadedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" /> class with an error message. Used internally.</summary>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Windows.Automation.ProxyAssemblyNotLoadedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" /> class with a specified error message and a reference to the inner exception that caused this exception. Used internally.</summary>
      <param name="message">The description of the error.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Windows.Automation.ProxyAssemblyNotLoadedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Retrieves data needed to serialize the target object. Used internally.</summary>
      <param name="info">Data needed to serialize or deserialize the object.</param>
      <param name="context">The destination of the serialized stream.</param>
    </member>
    <member name="T:System.Windows.Automation.RangeValuePatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.LargeChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.MaximumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.MinimumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.Pattern">
      <summary>Identifies this pattern as a <see cref="T:System.Windows.Automation.RangeValuePattern" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.SmallChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.RowOrColumnMajor">
      <summary>Contains values that specify whether data in a table should be read primarily by row or by column.</summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.RowMajor">
      <summary>Specifies that data in the table should be read row by row. </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.ColumnMajor">
      <summary>Specifies that data in the table should be read column by column </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.Indeterminate">
      <summary>Specifies that the best way to present the data is indeterminate.</summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollAmount">
      <summary>Contains values used by <see cref="T:System.Windows.Automation.ScrollPattern" /> to indicate the direction and distance to scroll.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.LargeDecrement">
      <summary>Specifies that scrolling is done in large decrements, equivalent to PageUp or clicking on a blank part of a scrollbar. If PageUp is not a relevant amount for the control and/or no scrollbar exists, the value represents an amount equal to the current visible window. </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.SmallDecrement">
      <summary>Specifies that scrolling is done in small decrements, equivalent to pressing an arrow key or clicking the arrow button on a scrollbar. </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.NoAmount">
      <summary>Specifies that scrolling should not be performed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.LargeIncrement">
      <summary>Specifies that scrolling is done in large increments, equivalent to a PageDown or clicking on the track of a scrollbar component. If a PageDown is not a relevant amount for the control and/or no scrollbar exists, the value represents an amount equal to the current visible region. </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.SmallIncrement">
      <summary>Specifies that scrolling is done in small increments, equivalent to pressing an arrow key or clicking the arrow button on a scrollbar. </summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollItemPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollItemPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ScrollItemPattern" /> pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollPatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IScrollProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll">
      <summary>Specifies that scrolling should not be performed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ScrollPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.SelectionItemPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementAddedToSelectionEvent">
      <summary>Identifies the event raised when an item is added to a collection of selected items.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementRemovedFromSelectionEvent">
      <summary>Identifies the event raised when an item is removed from a collection of selected items.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementSelectedEvent">
      <summary>Identifies the event that is raised when a single item is selected (causing all previously selected items to become deselected).</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SelectionItemPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.SelectionContainerProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.SelectionContainer" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.SelectionPatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.CanSelectMultipleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.InvalidatedEvent">
      <summary>Identifies the event that is raised when a selection in a container has changed significantly and requires sending more addition and removal events than the <see cref="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" /> constant permits.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.IsSelectionRequiredProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SelectionPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.SelectionProperty">
      <summary>Identifies the property that gets the selected items in a container.</summary>
    </member>
    <member name="T:System.Windows.Automation.StructureChangedEventArgs">
      <summary>Contains information about the event that is raised when the UI Automation tree structure has changed.</summary>
    </member>
    <member name="M:System.Windows.Automation.StructureChangedEventArgs.#ctor(System.Windows.Automation.StructureChangeType,System.Int32[])">
      <summary>Initializes a new instance of the <see cref="P:System.Windows.Automation.StructureChangedEventArgs.StructureChangeType" /> class, specifying the type of change and the identifier (ID) of the element whose structure changed.</summary>
      <param name="structureChangeType">A single value that specifies the type of change.</param>
      <param name="runtimeId">The runtime identifier (ID) of the UI Automation element whose structure changed. See Remarks.</param>
    </member>
    <member name="M:System.Windows.Automation.StructureChangedEventArgs.GetRuntimeId">
      <summary>Retrieves the UI Automation runtime identifier (ID) of the UI Automation element whose structure changed.</summary>
      <returns>The runtime ID of the UI Automation element whose structure changed.</returns>
    </member>
    <member name="P:System.Windows.Automation.StructureChangedEventArgs.StructureChangeType">
      <summary>Gets a value indicating the type of change that occurred in the UI Automation tree structure.</summary>
      <returns>The type of changed that occurred.</returns>
    </member>
    <member name="T:System.Windows.Automation.StructureChangedEventHandler">
      <summary>Represents the method implemented by the client application to handle the event raised when the UI Automation tree structure has changed.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.Windows.Automation.StructureChangeType">
      <summary>Contains values that specify changes in the structure of the Microsoft UI Automation element tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildAdded">
      <summary>A child element was added to the UI Automation element tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildRemoved">
      <summary>A child element was removed from the UI Automation element tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildrenInvalidated">
      <summary>Child elements were invalidated in the UI Automation element tree. This might mean that one or more children were added or removed, depending on the UI Automation providers implementation.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildrenBulkAdded">
      <summary>Child elements were added to the UI Automation element tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildrenBulkRemoved">
      <summary>Child elements were removed from the UI Automation element tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildrenReordered">
      <summary>The order of the child elements in the UI Automation element tree changed.</summary>
    </member>
    <member name="T:System.Windows.Automation.SupportedTextSelection">
      <summary>Contains values that specify whether a text provider supports selection and, if so, whether it supports a single, continuous selection or multiple, disjoint selections.</summary>
    </member>
    <member name="F:System.Windows.Automation.SupportedTextSelection.None">
      <summary>Does not support text selections.</summary>
    </member>
    <member name="F:System.Windows.Automation.SupportedTextSelection.Single">
      <summary>Supports a single, continuous text selection.</summary>
    </member>
    <member name="F:System.Windows.Automation.SupportedTextSelection.Multiple">
      <summary>Supports multiple, disjoint text selections.</summary>
    </member>
    <member name="T:System.Windows.Automation.SynchronizedInputPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputDiscardedEvent">
      <summary>Identifies the event raised when the input was discarded by WPF. </summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputReachedOtherElementEvent">
      <summary>Identifies the event raised when the input was received by an element other than the one currently listening for the input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputReachedTargetEvent">
      <summary>Identifies the event raised when the input was received by the element currently listening for the input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SynchronizedInputPattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.SynchronizedInputType">
      <summary>Contains values that specify the type of synchronized input. </summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.KeyUp">
      <summary>A key has been released.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.KeyDown">
      <summary>A key has been pressed.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.MouseLeftButtonUp">
      <summary>The left mouse button has been released.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.MouseLeftButtonDown">
      <summary>The left mouse button has been pressed.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.MouseRightButtonUp">
      <summary>The right mouse button has been released.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.MouseRightButtonDown">
      <summary>The right mouse button has been pressed.</summary>
    </member>
    <member name="T:System.Windows.Automation.TableItemPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.ColumnHeaderItemsProperty">
      <summary>Identifies the property that retrieves all the column headers associated with a table item or cell.</summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TableItemPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.RowHeaderItemsProperty">
      <summary>Identifies the property that retrieves all the row headers associated with a table item or cell.</summary>
    </member>
    <member name="T:System.Windows.Automation.TablePatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.TablePattern" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.ColumnHeadersProperty">
      <summary>Identifies the property that calls the <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders" /> method.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TablePattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.RowHeadersProperty">
      <summary>Identifies the property that calls the <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders" /> method.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.RowOrColumnMajorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TablePattern.TablePatternInformation.RowOrColumnMajor" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.TextPatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ITextProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.AnimationStyle" /> attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.BackgroundColorAttribute">
      <summary>Identifies the BackgroundColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.BulletStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.BulletStyle" /> attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.CapStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.CapStyle" /> attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.CultureAttribute">
      <summary>Identifies the Culture (<see cref="T:System.Globalization.CultureInfo" />) attribute of a text range down to the sub-language level; for example, French–Switzerland (fr-CH) instead of French (fr). </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.FontNameAttribute">
      <summary>Identifies the FontName attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.FontSizeAttribute">
      <summary>Identifies the FontSize attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.FontWeightAttribute">
      <summary>Identifies the FontWeight attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.ForegroundColorAttribute">
      <summary>Identifies the ForegroundColor (COLORREF) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.HorizontalTextAlignmentAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.HorizontalTextAlignment" /> attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IndentationFirstLineAttribute">
      <summary>Identifies the IndentationFirstLine (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IndentationLeadingAttribute">
      <summary>Identifies the IndentationLeading (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IndentationTrailingAttribute">
      <summary>Identifies the IndentationTrailing (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsHiddenAttribute">
      <summary>Identifies the IsHidden attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsItalicAttribute">
      <summary>Identifies the IsItalic (<see cref="T:System.Windows.FontStyle" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsReadOnlyAttribute">
      <summary>Identifies the IsReadOnly attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsSubscriptAttribute">
      <summary>Identifies the IsSubscript (<see cref="T:System.Windows.FontVariants" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsSuperscriptAttribute">
      <summary>Identifies the IsSuperscript (<see cref="T:System.Windows.FontVariants" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginBottomAttribute">
      <summary>Identifies the MarginBottom (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginLeadingAttribute">
      <summary>Identifies the MarginLeading (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginTopAttribute">
      <summary>Identifies the MarginTop (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginTrailingAttribute">
      <summary>Identifies the MarginTrailing (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MixedAttributeValue">
      <summary>Identifies whether the value of a given attribute varies over a text range in a rich edit control.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.OutlineStylesAttribute">
      <summary>Identifies the OutlineStyles (<see cref="T:System.Windows.Automation.Text.OutlineStyles" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.OverlineColorAttribute">
      <summary>Identifies the OverlineColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.OverlineStyleAttribute">
      <summary>Identifies the OverlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TextPattern" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.StrikethroughColorAttribute">
      <summary>Identifies the StrikethroughColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.StrikethroughStyleAttribute">
      <summary>Identifies the StrikethroughStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.TabsAttribute">
      <summary>Identifies the Tabs attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.TextChangedEvent">
      <summary>Identifies the event raised whenever textual content is modified.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.TextFlowDirectionsAttribute">
      <summary>Identifies the TextFlowDirections (<see cref="T:System.Windows.Automation.Text.FlowDirections" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.TextSelectionChangedEvent">
      <summary>Identifies the event raised whenever the text selection is modified. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.UnderlineColorAttribute">
      <summary>Identifies the UnderlineColor attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.UnderlineStyleAttribute">
      <summary>Identifies the UnderlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range. </summary>
    </member>
    <member name="T:System.Windows.Automation.TogglePatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IToggleProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.TogglePatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TogglePattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TogglePatternIdentifiers.ToggleStateProperty">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ToggleState" /> of the UI Automation element.</summary>
    </member>
    <member name="T:System.Windows.Automation.ToggleState">
      <summary>Contains values that specify the <see cref="T:System.Windows.Automation.ToggleState" /> of a UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.Off">
      <summary>The UI Automation element is not selected, checked, marked or otherwise activated.</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.On">
      <summary>The UI Automation element is selected, checked, marked or otherwise activated.</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.Indeterminate">
      <summary>The UI Automation element is in an indeterminate state.</summary>
    </member>
    <member name="T:System.Windows.Automation.TransformPatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ITransformProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanMoveProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanMove" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanResizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanResize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanRotateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TransformPattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.TreeScope">
      <summary>Contains values that specify the scope of elements within the UI Automation tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Element">
      <summary>Specifies that the search include the element itself. </summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Children">
      <summary>Specifies that the search include the element's immediate children. </summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Descendants">
      <summary>Specifies that the search include the element's descendants, including children.</summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Parent">
      <summary>Specifies that the search include the element's parent. Not supported.</summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Ancestors">
      <summary>Specifies that the search include the element's ancestors, including the parent. Not supported.</summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Subtree">
      <summary>Specifies that the search include the root of the search and all descendants.</summary>
    </member>
    <member name="T:System.Windows.Automation.ValuePatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IValueProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ValuePattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.Value" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.VirtualizedItemPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IVirtualizedItemProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.VirtualizedItemPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.VirtualizedItemPattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.WindowClosedEventArgs">
      <summary>Contains information about the event that is raised when a window is closed.</summary>
    </member>
    <member name="M:System.Windows.Automation.WindowClosedEventArgs.#ctor(System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.WindowClosedEventArgs" /> class.</summary>
      <param name="runtimeId">The runtime identifier of the window that has closed.</param>
    </member>
    <member name="M:System.Windows.Automation.WindowClosedEventArgs.GetRuntimeId">
      <summary>Retrieves the UI Automation runtime identifier (ID) associated with this event.</summary>
      <returns>The UI Automation runtime ID of the window on which the event was raised.</returns>
    </member>
    <member name="T:System.Windows.Automation.WindowInteractionState">
      <summary>Contains values that specify the current state of the window for purposes of user or programmatic interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.Running">
      <summary>Indicates that the window is running. This does not guarantee that the window is responding or ready for user interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.Closing">
      <summary>Indicates that the window is closing. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.ReadyForUserInteraction">
      <summary>Indicates that the window is ready for user interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.BlockedByModalWindow">
      <summary>Indicates that the window is blocked by a modal window. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.NotResponding">
      <summary>Indicates that the window is not responding. </summary>
    </member>
    <member name="T:System.Windows.Automation.WindowPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IWindowProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.CanMaximizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.CanMinimizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.IsModalProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.IsTopmostProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.WindowPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent">
      <summary>Identifies the event that is raised when a window is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowInteractionStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent">
      <summary>Identifies the event that is raised when a window is opened.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowVisualStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.WindowVisualState">
      <summary>Contains values that specify the visual state of a window.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Normal">
      <summary>Specifies that the window is normal (restored). </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Maximized">
      <summary>Specifies that the window is maximized. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Minimized">
      <summary>Specifies that the window is minimized.</summary>
    </member>
    <member name="T:System.Windows.Automation.Text.AnimationStyle">
      <summary>Represents values for <see cref="F:System.Windows.Automation.TextPattern.AnimationStyleAttribute" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.None">
      <summary>Specifies that there is no animation style.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.LasVegasLights">
      <summary>Specifies that the bounding rectangle displays a border of alternating icons of different colors.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.BlinkingBackground">
      <summary>Specifies that the font and background alternate between assigned colors and contrasting colors.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.SparkleText">
      <summary>Specifies that the background displays flashing, multi-colored icons.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.MarchingBlackAnts">
      <summary>Specifies that the bounding rectangle displays moving black dashes.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.MarchingRedAnts">
      <summary>Specifies that the bounding rectangle displays moving red dashes.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.Shimmer">
      <summary>Specifies that the font alternates between solid and blurred.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.Other">
      <summary>Specifies that the animation style is one not explicitly itemized in the <see cref="T:System.Windows.Automation.Text.AnimationStyle" /> enumeration.</summary>
    </member>
    <member name="T:System.Windows.Automation.Text.BulletStyle">
      <summary>Values for <see cref="F:System.Windows.Automation.TextPattern.BulletStyleAttribute" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.None">
      <summary>No bullet style. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.HollowRoundBullet">
      <summary>Hollow round bullets. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.FilledRoundBullet">
      <summary>Solid round bullets.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.HollowSquareBullet">
      <summary>Hollow square bullets.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.FilledSquareBullet">
      <summary>Solid square bullets. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.DashBullet">
      <summary>Dash bullets. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.Other">
      <summary>Another bullet style not explicitly specified in the <see cref="T:System.Windows.Automation.Text.BulletStyle" /> enumeration. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.CapStyle">
      <summary>Represents values for <see cref="F:System.Windows.Automation.TextPattern.CapStyleAttribute" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.None">
      <summary>Indicates that there is no capitalization style; uppercase and lowercase letters render normally.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.SmallCap">
      <summary>Indicates that the capitalization style is small caps; lowercase letters are replaced with uppercase letters of the same approximate height as the font's x-height.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.AllCap">
      <summary>Indicates that the capitalization style is all caps; all lowercase letters are replaced with uppercase letters.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.AllPetiteCaps">
      <summary>Indicates that the capitalization style is all petite caps; uppercase and lowercase letters are replaced with uppercase letters slightly smaller than small caps.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.PetiteCaps">
      <summary>Indicates that the capitalization style is petite caps; lowercase letters are replaced with uppercase letters slightly smaller than small caps.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.Unicase">
      <summary>Indicates that the capitalization style is unicase; uppercase and lowercase letters are rendered in a way determined by the type designer. A unicase alphabet is one that does not specify case for its letters.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.Titling">
      <summary>Indicates that the capitalization style is title case; uppercase and lowercase letters are rendered with letters specifically designed for titles.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.Other">
      <summary>Indicates that the capitalization style is a style not explicitly specified in the <see cref="T:System.Windows.Automation.Text.CapStyle" /> enumeration. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.FlowDirections">
      <summary>Values for <see cref="F:System.Windows.Automation.TextPattern.TextFlowDirectionsAttribute" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.FlowDirections.Default">
      <summary>Top to bottom, left to right, horizontal.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.FlowDirections.RightToLeft">
      <summary>Right to left. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.FlowDirections.BottomToTop">
      <summary>Bottom to top. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.FlowDirections.Vertical">
      <summary>Vertical. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.HorizontalTextAlignment">
      <summary>Values for <see cref="F:System.Windows.Automation.TextPattern.HorizontalTextAlignmentAttribute" /></summary>
    </member>
    <member name="F:System.Windows.Automation.Text.HorizontalTextAlignment.Left">
      <summary>Aligned left.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.HorizontalTextAlignment.Centered">
      <summary>Centered.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.HorizontalTextAlignment.Right">
      <summary>Aligned right. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.HorizontalTextAlignment.Justified">
      <summary>Justified. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.OutlineStyles">
      <summary>Values for <see cref="F:System.Windows.Automation.TextPattern.OutlineStylesAttribute" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.OutlineStyles.None">
      <summary>No outline style. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.OutlineStyles.Outline">
      <summary>Outlined. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.OutlineStyles.Shadow">
      <summary>Shadowed.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.OutlineStyles.Engraved">
      <summary>Engraved.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.OutlineStyles.Embossed">
      <summary>Embossed.</summary>
    </member>
    <member name="T:System.Windows.Automation.Text.TextDecorationLineStyle">
      <summary>Values for <see cref="F:System.Windows.Automation.TextPattern.UnderlineStyleAttribute" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.None">
      <summary>No text decoration line style.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Single">
      <summary>Single line.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.WordsOnly">
      <summary>Words only. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Double">
      <summary>Double line.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Dot">
      <summary>Dotted line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Dash">
      <summary>Dashed line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.DashDot">
      <summary>Alternating dash-dot line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.DashDotDot">
      <summary>Alternating dash-dot-dot line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Wavy">
      <summary>Wavy line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickSingle">
      <summary>Thick single line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.DoubleWavy">
      <summary>Double wavy line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickWavy">
      <summary>Thick wavy line.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.LongDash">
      <summary>Long-dashed line.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickDash">
      <summary>Thick dashed line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickDashDot">
      <summary>Thick alternating dash-dot line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickDashDotDot">
      <summary>Thick alternating dash-dot-dot line.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickDot">
      <summary>Thick dotted line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickLongDash">
      <summary>Thick long-dash line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Other">
      <summary>Another text decoration line style not explicitly specified in the <see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" /> enumeration. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.TextPatternRangeEndpoint">
      <summary>Allows the endpoints to be identified when calling methods of <see cref="T:System.Windows.Automation.Text.TextPatternRange" />. Each <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> has two endpoints (<see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" />). </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start">
      <summary>Identifies the starting point of the range. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End">
      <summary> Identifies the ending point of the range. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.TextUnit">
      <summary>Represents pre-defined units of text for the purposes of navigation within a document. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Character">
      <summary>Specifies that the text unit is one character in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Format">
      <summary>Specifies that the text unit is the length of a single, common format specification, such as bold, italic, or similar.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Word">
      <summary>Specifies that the text unit is one word in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Line">
      <summary>Specifies that the text unit is one line in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Paragraph">
      <summary>Specifies that the text unit is one paragraph in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Page">
      <summary>Specifies that the text unit is one document-specific page in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Document">
      <summary>Specifies that the text unit is an entire document in length.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\PermissionSets\FullTrust.xml ===
﻿<PermissionSet
   version="1"
   class="System.Security.PermissionSet"
   Unrestricted="true" />
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\PermissionSets\Internet.xml ===
﻿<PermissionSet
   version="1"
   class="System.Security.NamedPermissionSet"
   Name="Internet"
   Description="Default rights given to Internet applications">
   <IPermission
      version="1"
      class="System.Security.Permissions.FileDialogPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Access="Open" />
   <IPermission
      UserQuota="1024000"
      version="1"
      class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Allowed="ApplicationIsolationByUser" />
   <IPermission
      version="1"
      class="System.Security.Permissions.SecurityPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Flags="Execution" />
   <IPermission
      version="1"
      class="System.Security.Permissions.UIPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Clipboard="OwnClipboard"
      Window="SafeTopLevelWindows" />
   <IPermission
      version="1"
      class="System.Drawing.Printing.PrintingPermission, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
      Level="SafePrinting" />
   <IPermission
      version="1"
      class="System.Security.Permissions.MediaPermission, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
      Audio="SafeAudio"
      Image="SafeImage"
      Video="SafeVideo" />
   <IPermission
      version="1"
      class="System.Security.Permissions.WebBrowserPermission, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
      Level="Safe" />
</PermissionSet>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\PermissionSets\LocalIntranet.xml ===
﻿<PermissionSet
   version="1"
   class="System.Security.NamedPermissionSet"
   Name="LocalIntranet"
   Description="Default rights given to applications on the local intranet">
   <IPermission
      Read="USERNAME"
      version="1"
      class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
   <IPermission
      version="1"
      class="System.Security.Permissions.FileDialogPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Unrestricted="true" />
   <IPermission
      version="1"
      Permanent="True"
      Expiry="9223372036854775807"
      UserQuota="9223372036854775807"
      Allowed="AssemblyIsolationByUser"
      class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
   <IPermission
      version="1"
      class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Flags="ReflectionEmit, RestrictedMemberAccess" />
   <IPermission
      version="1"
      class="System.Security.Permissions.SecurityPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Flags="Assertion, Execution, BindingRedirects" />
   <IPermission
      version="1"
      class="System.Security.Permissions.UIPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Unrestricted="true" />
   <IPermission
      version="1"
      class="System.Drawing.Printing.PrintingPermission, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
      Level="DefaultPrinting" />
   <IPermission
      version="1"
      class="System.Security.Permissions.MediaPermission, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
      Audio="SafeAudio"
      Image="SafeImage"
      Video="SafeVideo" />
   <IPermission
      version="1"
      class="System.Security.Permissions.WebBrowserPermission, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
      Level="Safe" />
   <IPermission
      version="1"
      class="System.Net.DnsPermission, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      Unrestricted="true" />
</PermissionSet>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\XamlBuildTask.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>XamlBuildTask</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Build.Tasks.Xaml.CompilationPass2Task">
      <summary>An MS Build task that verifies that all the types referenced in the original input XAML files are resolved.</summary>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Build.Tasks.Xaml.CompilationPass2Task" /> class.</summary>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.ApplicationMarkup">
      <summary>A list of XAML files to process, populated by MS Build.</summary>
      <returns>A list of the XAML files to process.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.AssemblyName">
      <summary>Gets or sets the name of the assembly to be generated.</summary>
      <returns>The name of the assembly.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.BuildTaskPath">
      <summary>Gets or sets the path to the assembly for this build task. </summary>
      <returns>The assembly path.</returns>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.Execute">
      <summary>Called by MS Build to execute the task.</summary>
      <returns>true if the task executes successfully; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.LocalAssemblyReference">
      <summary>Gets or sets the path to the generated temporary assembly.</summary>
      <returns>The path to the generated temporary assembly.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.References">
      <summary>Gets or sets a list of assemblies to reference during the compilation process. </summary>
      <returns>A list of the assemblies to reference during the compilation process.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.CompilationPass2Task.RootNamespace">
      <summary>Gets or sets the root namespace for the project.</summary>
      <returns>The root namespace.</returns>
    </member>
    <member name="T:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask">
      <summary>An MS Build task that generates a temporary assembly by compiling the source files generated by the <see cref="T:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask" />. </summary>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask" /> class.</summary>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.ApplicationMarkupTypeName">
      <summary>Gets or sets the build action for the  application markup files which are excluded from the project used to generate the temporary assembly.</summary>
      <returns>The application markup type name.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.AssemblyName">
      <summary>Gets or sets the generated assembly’s name.</summary>
      <returns>The assembly name.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.CompileTargetName">
      <summary>Gets or sets the compilation target name to build in the generated project file used to build the generated temporary assembly.</summary>
      <returns>The compilation target name.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.CurrentProject">
      <summary>Gets or sets the current project file name.</summary>
      <returns>The current project.</returns>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.Execute">
      <summary>Called by MS Build to execute the task.</summary>
      <returns>true if the code is generated successfully; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.OutputPath">
      <summary>Gets or sets the directory to place the generated files in.</summary>
      <returns>The directory that stores the generated files.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.ReferencePaths">
      <summary>Gets or sets the paths to any referenced assemblies specified in the project.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the paths to referenced assemblies.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.GenerateTemporaryAssemblyTask.SourceCodeFiles">
      <summary>Gets or sets a list of source code files to compile into a temporary assembly.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the source code files.</returns>
    </member>
    <member name="T:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask">
      <summary>This task accesses XAML files that define types (with x:Class) and generates the corresponding source code that can be compiled into an assembly. </summary>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask" /> class.</summary>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.ApplicationMarkup">
      <summary>A list of XAML files to process, populated by MS Build.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the XAML files to process.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.AssemblyName">
      <summary>Gets or sets the name of the assembly being compiled.</summary>
      <returns>The name of the assembly being compiled.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.BuildTaskPath">
      <summary>Gets or sets the path of the assembly that contains this build task. </summary>
      <returns>The build task path.</returns>
    </member>
    <member name="M:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.Execute">
      <summary>Called by MS Build to execute the code generation task.</summary>
      <returns>true if the code is generated successfully; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.GeneratedCodeFiles">
      <summary>Gets or sets a list of generated code files, one for each input file.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the source XAML files.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.GeneratedResources">
      <summary>Gets or sets a list of XAML files that contain the markup for instantiating the newly generated types, one for each input file.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the generated XAML files.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.GeneratedSourceExtension">
      <summary>Gets or sets the file extension to add to the generated source files.</summary>
      <returns>The file extension.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.KnownReferencePaths">
      <summary>Gets or sets the known reference paths.</summary>
      <returns>The known reference paths. </returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.Language">
      <summary>Gets or sets the language to generate source code in.</summary>
      <returns>The language to generate source code in.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.OutputPath">
      <summary>Gets or sets the directory to place the generated files.</summary>
      <returns>The directory that stores the generated files.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.References">
      <summary>Gets or sets a list of assemblies to reference.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents referenced assemblies.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.RequiresCompilationPass2">
      <summary>Gets or sets a value that indicates whether this project requires executing the <see cref="T:Microsoft.Build.Tasks.Xaml.CompilationPass2Task" /> task.</summary>
      <returns>true if there are unresolved types; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.RootNamespace">
      <summary>Gets or sets the root namespace for the project.</summary>
      <returns>The root namespace.</returns>
    </member>
    <member name="P:Microsoft.Build.Tasks.Xaml.PartialClassGenerationTask.SourceCodeFiles">
      <summary>Gets or sets a list of source code files in the project.</summary>
      <returns>A list of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that represents the source code files in the project.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\WindowsFormsIntegration.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsFormsIntegration</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> types to UI Automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer.#ctor(System.Windows.Forms.Integration.WindowsFormsHost)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" />.</param>
    </member>
    <member name="T:System.Windows.Forms.Integration.ChildChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Forms.Integration.WindowsFormsHost.ChildChanged" /> and <see cref="E:System.Windows.Forms.Integration.ElementHost.ChildChanged" /> events. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ChildChangedEventArgs.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.ChildChangedEventArgs" /> class. </summary>
      <param name="previousChild">The value of the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" /> property before the new value was assigned.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.ChildChangedEventArgs.PreviousChild">
      <summary>Gets the value of the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" /> property before the new value was assigned.</summary>
      <returns>The value of the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" /> property before the new value was assigned.</returns>
    </member>
    <member name="T:System.Windows.Forms.Integration.ElementHost">
      <summary>A Windows Forms control that can be used to host a Windows Presentation Foundation (WPF) element. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.AutoSize">
      <summary>Gets or sets a value indicating whether the control is automatically resized to display its entire contents.</summary>
      <returns>true if the control adjusts its size to closely fit its contents; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.BackColorTransparent">
      <summary>Gets or sets a value indicating whether the hosted element has a transparent background. </summary>
      <returns>true if the hosted element has a transparent background; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.BindingContextChanged">
      <summary>Occurs when the value of the <see cref="T:System.Windows.Forms.BindingContext" /> property changes.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.CanEnableIme">
      <summary>Gets a value that indicates whether the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property can be set to an active value to enable IME support.</summary>
      <returns>true if <see cref="T:System.Windows.Forms.Integration.ElementHost" /> has a <see cref="P:System.Windows.Forms.Integration.ElementHost.Child" /> element; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.Child">
      <summary>Gets or sets the <see cref="T:System.Windows.UIElement" /> hosted by the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> control. </summary>
      <returns>The hosted Windows Presentation Foundation (WPF) element.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.ChildChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" /> property is set.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Click">
      <summary>Occurs when the control is clicked.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.ClientSizeChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property changes.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.ControlAdded">
      <summary>Occurs when a new control is added to the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.ControlRemoved">
      <summary>Occurs when a control is removed from the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.CursorChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property changes.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.DefaultSize">
      <summary>Gets the default size of the control.</summary>
      <returns>The default <see cref="T:System.Drawing.Size" /> of the control.</returns>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.Dispose(System.Boolean)">
      <summary>Immediately frees any system resources used by the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> control. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.DoubleClick">
      <summary>Occurs when the control is double-clicked.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.DragDrop">
      <summary>Occurs when a drag-and-drop operation is completed.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.DragEnter">
      <summary>Occurs when an object is dragged into the control's bounds.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.DragLeave">
      <summary>Occurs when an object is dragged out of the control's bounds.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.DragOver">
      <summary>Occurs when an object is dragged over the control's bounds.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.EnableModelessKeyboardInterop(System.Windows.Window)">
      <summary>Enables a <see cref="T:System.Windows.Window" /> to receive keyboard messages correctly when it is opened modelessly from Windows Forms.</summary>
      <param name="window">The Windows Presentation Foundation (WPF) window to be opened modelessly.</param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Enter">
      <summary>Occurs when the control is entered.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.Focused">
      <summary>Gets a value that indicates whether the control has input focus.</summary>
      <returns>true if the control has focus; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.FontChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Control.Font" /> property value changes.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.ForeColorChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property value changes.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.GetPreferredSize(System.Drawing.Size)">
      <summary>Overrides the base class implementation <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> to provide correct layout behavior for the hosted Windows Presentation Foundation (WPF) elements.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> computed by the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> control, given the constraints specified by <paramref name="proposedSize" />.</returns>
      <param name="proposedSize">The custom-sized area for a WPF element. </param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.GiveFeedback">
      <summary>Occurs during a drag operation.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.GotFocus">
      <summary>Occurs when the control receives focus.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.HostContainer">
      <summary>Gets the parent container of the hosted Windows Presentation Foundation (WPF) element. </summary>
      <returns>The parent container.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.ImeModeBase">
      <summary>Gets or sets the IME mode of a control.</summary>
      <returns>The IME mode of the control.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Invalidated">
      <summary>Occurs when a control's display requires redrawing.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.IsInputChar(System.Char)">
      <summary>Ensures that all WM_CHAR key messages are forwarded to the hosted element.</summary>
      <returns>true in all cases.</returns>
      <param name="charCode">The character to forward.</param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.KeyDown">
      <summary>Occurs when a key is pressed while the control has focus.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.KeyPress">
      <summary>Occurs when a key is pressed while the control has focus.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.KeyUp">
      <summary>Occurs when a key is released while the control has focus.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Layout">
      <summary>Occurs when a control should reposition its child controls.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Leave">
      <summary>Occurs when the input focus leaves the control.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.LostFocus">
      <summary>Occurs when the control loses focus.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseCaptureChanged">
      <summary>Occurs when the control loses or gains mouse capture.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseClick">
      <summary>Occurs when the control is clicked by the mouse.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseDoubleClick">
      <summary>Occurs when the control is double clicked by the mouse.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseDown">
      <summary>Occurs when the mouse pointer is over the control and a mouse button is pressed.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseEnter">
      <summary>Occurs when the mouse pointer enters the control.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseHover">
      <summary>Occurs when the mouse pointer rests on the control.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the control.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseMove">
      <summary>Occurs when the mouse pointer is moved over the control.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseUp">
      <summary>Occurs when the mouse pointer is over the control and a mouse button is released.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.MouseWheel">
      <summary>Occurs when the mouse wheel moves while the control has focus.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnEnabledChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnGotFocus(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Integration.ElementHost.GotFocus" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnHandleCreated(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnLeave(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>Paints the background of the control.</summary>
      <param name="pevent">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the control to paint.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnPrint(System.Windows.Forms.PaintEventArgs)">
      <summary>Renders the control using the provided <see cref="T:System.Drawing.Graphics" /> object.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnPropertyChanged(System.String,System.Object)">
      <summary>Notifies the <see cref="P:System.Windows.Forms.Integration.ElementHost.PropertyMap" /> that a property has changed. </summary>
      <param name="propertyName">The name of the property that has changed and requires translation.</param>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.OnVisibleChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.PaddingChanged">
      <summary>Occurs when the control's padding changes.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Paint">
      <summary>Occurs when the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> control is redrawn. </summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.PreviewKeyDown">
      <summary>Occurs before the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event when a key is pressed while focus is on this control.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
      <summary>Processes a command key, ensuring that the hosted element has an opportunity to handle the command before normal Windows Forms processing.</summary>
      <returns>true if the character is a Windows Presentation Foundation (WPF) shortcut key; otherwise, false.</returns>
      <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values representing the key to process.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.ProcessMnemonic(System.Char)">
      <summary>Processes a mnemonic character, ensuring that the hosted element has an opportunity to handle the mnemonic before normal Windows Forms processing.</summary>
      <returns>true if the character is a Windows Presentation Foundation (WPF) shortcut key; otherwise, false.</returns>
      <param name="charCode">The character to process.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.ElementHost.PropertyMap">
      <summary>Gets the property map, which determines how setting properties on the <see cref="T:System.Windows.Forms.Integration.ElementHost" /> control affects the hosted Windows Presentation Foundation (WPF) element.</summary>
      <returns>A <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> that maps <see cref="T:System.Windows.Forms.Integration.ElementHost" /> to properties on the hosted WPF element.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.QueryContinueDrag">
      <summary>Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.Resize">
      <summary>Occurs when the control is resized.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.RightToLeftChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property value changes.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.ScaleCore(System.Single,System.Single)">
      <summary>Scales the parent container and the hosted Windows Forms control.</summary>
      <param name="dx">The scaling factor for the x-axis.</param>
      <param name="dy">The scaling factor for the y-axis.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.Select(System.Boolean,System.Boolean)">
      <summary>Activates the hosted element. </summary>
      <param name="directed">true to specify the direction of the control to select; otherwise, false. </param>
      <param name="forward">true to move forward in the tab order; false to move backward in the tab order.</param>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.SizeChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Control.Size" /> property value changes.</summary>
    </member>
    <member name="E:System.Windows.Forms.Integration.ElementHost.TextChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Control.Text" /> property value changes.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.ElementHost.WndProc(System.Windows.Forms.Message@)">
      <summary>Processes Windows messages.</summary>
      <param name="m">A message to process.</param>
    </member>
    <member name="T:System.Windows.Forms.Integration.IntegrationExceptionEventArgs">
      <summary>Provides a base class for <see cref="T:System.EventArgs" /> classes which support optionally raising exceptions. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.#ctor(System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.IntegrationExceptionEventArgs" /> class. </summary>
      <param name="throwException">true to raise the <see cref="T:System.Exception" /> specified by <paramref name="exception" />; otherwise, false. </param>
      <param name="exception">The <see cref="T:System.Exception" /> to raise.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.Exception">
      <summary>Gets the <see cref="T:System.Exception" /> associated with this <see cref="T:System.Windows.Forms.Integration.IntegrationExceptionEventArgs" />.</summary>
      <returns>The <see cref="T:System.Exception" /> associated with this <see cref="T:System.Windows.Forms.Integration.IntegrationExceptionEventArgs" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.ThrowException">
      <summary>Gets or sets a value indicating whether to raise the <see cref="T:System.Exception" /> specified by the <see cref="P:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.Exception" /> property. </summary>
      <returns>true if <see cref="P:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.Exception" /> will be raised; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Windows.Forms.Integration.LayoutExceptionEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Forms.Integration.WindowsFormsHost.LayoutError" /> event. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.LayoutExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.LayoutExceptionEventArgs" /> class. </summary>
      <param name="exception">The <see cref="T:System.Exception" /> to raise.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Forms.Integration.PropertyMap">
      <summary>Provides a way to translate property values between Windows Forms controls and Windows Presentation Foundation (WPF) elements. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> class with the given source object.</summary>
      <param name="source"></param>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Add(System.String,System.Windows.Forms.Integration.PropertyTranslator)">
      <summary>Adds a <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegate for the given property to the <see cref="T:System.Windows.Forms.Integration.PropertyMap" />. </summary>
      <param name="propertyName">The name of the property to map.</param>
      <param name="translator">The <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegate which is called when <paramref name="propertyName" /> changes.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="propertyName" /> has an existing mapping.</exception>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Apply(System.String)">
      <summary>Runs the property translator for the given property, based on the source object's current property value.</summary>
      <param name="propertyName">The name of the property to translate.</param>
      <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on <see cref="P:System.Windows.Forms.Integration.PropertyMap.SourceObject" />.</exception>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.ApplyAll">
      <summary>Runs the property translator for each mapped property, based on the source object's current property values.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Clear">
      <summary>Removes all property mappings. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Contains(System.String)">
      <summary>Gets a value indicating whether the given property is mapped. </summary>
      <returns>true if <paramref name="propertyName" /> exists in the property map; otherwise, false.</returns>
      <param name="propertyName">The name of the property to search for.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMap.DefaultTranslators">
      <summary>Gets a collection of property mappings which are defined by default. </summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> which maps property names to corresponding <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegates.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMap.Item(System.String)">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegate for the given property.</summary>
      <returns>The <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegate corresponding to the property specified by <paramref name="propertyName" />. </returns>
      <param name="propertyName">The name of the property to map.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null or an empty string; the specified <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegate is null.</exception>
      <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on <see cref="P:System.Windows.Forms.Integration.PropertyMap.SourceObject" />.</exception>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMap.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the property names in the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the property names of the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> collection.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.PropertyMap.PropertyMappingError">
      <summary>Occurs when an exception is raised by a property translator. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Remove(System.String)">
      <summary>Deletes the given property from the mapping.</summary>
      <param name="propertyName">The name of the property to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.Reset(System.String)">
      <summary>Restores the default property mapping for the given property.</summary>
      <param name="propertyName">The name of the property to restore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMap.ResetAll">
      <summary>Restores the default property mappings.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMap.SourceObject">
      <summary>Gets the object which has the properties to be translated.</summary>
      <returns>The object which has the properties to be translated.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMap.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the property translators in the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> containing the property translators in the <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> collection.</returns>
    </member>
    <member name="T:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Forms.Integration.PropertyMap.PropertyMappingError" /> event. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs.#ctor(System.Exception,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs" /> class. </summary>
      <param name="exception">The <see cref="T:System.Exception" /> to raise.</param>
      <param name="propertyName">The name of the property associated with the property-mapping error.</param>
      <param name="propertyValue">The value of the property associated with the property-mapping error.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is null; <paramref name="propertyName" /> is null or refers to an empty string.</exception>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs.PropertyName">
      <summary>Gets the name of the property associated with the property-mapping error.</summary>
      <returns>A string representing the name of the property associated with the property-mapping error.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs.PropertyValue">
      <summary>Gets the value of the property associated with the property-mapping error.</summary>
      <returns>An object representing the value of the property associated with the property-mapping error.</returns>
    </member>
    <member name="T:System.Windows.Forms.Integration.PropertyTranslator">
      <summary>Provides a translation function for a mapped property of the host control. </summary>
      <param name="host">The host control whose property is being mapped. The host control is either a <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> or an <see cref="T:System.Windows.Forms.Integration.ElementHost" />.</param>
      <param name="propertyName">The name of the property being translated.</param>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="T:System.Windows.Forms.Integration.WindowsFormsHost">
      <summary>An element that allows you to host a Windows Forms control on a WPF page. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> class. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.ArrangeOverride(System.Windows.Size)">
      <summary>When implemented in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" />-derived class.</summary>
      <returns>The actual size used.</returns>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.Background">
      <summary>Gets or sets the hosted control's background as an ambient property.  </summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> set to the background color.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.BackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Background" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Background" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
      <summary>Overrides the base class implementation of <see cref="M:System.Windows.Interop.HwndHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)" /> to build the hosted Windows Forms control. </summary>
      <returns>The window handle for this object.</returns>
      <param name="hwndParent">The parent window's handle (HWND).</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.Child">
      <summary>Gets or sets the child control hosted by the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> element. </summary>
      <returns>The hosted Windows Forms control.</returns>
      <exception cref="T:System.ArgumentException">An attempt was made to assign a top-level form as the hosted control. </exception>
    </member>
    <member name="E:System.Windows.Forms.Integration.WindowsFormsHost.ChildChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" /> property is set. </summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)">
      <summary>Overrides <see cref="M:System.Windows.Interop.HwndHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)" /> to delete the window containing this object.</summary>
      <param name="hwnd">A window handle. This parameter is not used.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />, and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.EnableWindowsFormsInterop">
      <summary>Enables a <see cref="T:System.Windows.Forms.Form" /> to function correctly when it is opened modelessly from WPF.</summary>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily">
      <summary>Gets or sets the hosted control's font family.  </summary>
      <returns>The font family used in the hosted control.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.FontFamilyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.FontSize">
      <summary>Gets or sets the hosted control's font size.  </summary>
      <returns>The font size used in the hosted control.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.FontSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontSize" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle">
      <summary>Gets or sets the hosted control's font style.  </summary>
      <returns>The font style used in the hosted control.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.FontStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight">
      <summary>Gets or sets the hosted control's font weight.  </summary>
      <returns>The font weight used in the hosted control.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.FontWeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.Foreground">
      <summary>Gets or sets the hosted control's foreground color.  </summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> used to set the foreground color for the hosted control.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.ForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Foreground" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Foreground" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Forms.Integration.WindowsFormsHost.LayoutError">
      <summary>Occurs when a layout error, such as a skew or rotation that <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> does not support, is encountered.</summary>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.MeasureOverride(System.Windows.Size)">
      <summary>Overrides the base class implementation of <see cref="M:System.Windows.Interop.HwndHost.MeasureOverride(System.Windows.Size)" /> to measure the size of a <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> object and return proper sizes to the layout engine. </summary>
      <returns>The desired size of the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> object.</returns>
      <param name="constraint">The available size for the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> object.</param>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.OnCreateAutomationPeer">
      <summary>Creates a <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" /> for the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> element.</summary>
      <returns>A new <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Forces the translation of a mapped property. </summary>
      <param name="e">Arguments that identify the property that changed as well as providing that property's old and new values.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.Padding">
      <summary>Specifies the size of the desired padding within the hosted Windows Forms control. </summary>
      <returns>A <see cref="T:System.Windows.Thickness" /> structure representing the padding pf the hosted Windows Forms control. </returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.PaddingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Padding" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Padding" /> dependency property. </returns>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.PropertyMap">
      <summary>Gets the property map that determines how setting properties on the <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> element affects the hosted Windows Forms control.</summary>
      <returns>A <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> that maps <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> properties to properties on the hosted Windows Forms control.</returns>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.ScaleChild(System.Windows.Vector)">
      <summary>Scales the hosted Windows Forms control, and tracks the scale factor.</summary>
      <returns>A <see cref="T:System.Windows.Vector" /> which represents the scale factor applied to the hosted Windows Forms control. </returns>
      <param name="newScale">The new scale factor.</param>
    </member>
    <member name="P:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex">
      <summary>Gets or sets the hosted control's tab index.   </summary>
      <returns>The tab index for tab navigation and focus.</returns>
    </member>
    <member name="F:System.Windows.Forms.Integration.WindowsFormsHost.TabIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>Forwards focus from WPF to the hosted Windows Forms control.</summary>
      <returns>true if a control was activated; otherwise, false. </returns>
      <param name="request">A <see cref="T:System.Windows.Input.TraversalRequest" /> that specifies the focus behavior. </param>
    </member>
    <member name="M:System.Windows.Forms.Integration.WindowsFormsHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
      <summary>When implemented in a derived class, accesses the window process of the hosted child window.</summary>
      <returns>The window handle of the child window.</returns>
      <param name="hwnd">Window handle of the hosted window.</param>
      <param name="msg">Message to act upon.</param>
      <param name="wParam">Information that may be relevant to handling the message. This is typically used to store small pieces of information, such as flags.</param>
      <param name="lParam">Information that may be relevant to handling the message. This is typically used to reference an object.</param>
      <param name="handled">Whether events resulting should be marked handled.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\RedistList\FrameworkList.xml ===
<?xml version="1.0" encoding="utf-8"?>
<FileList  Redist="Microsoft-Windows-CLRCoreComp.4.0" Name=".NET Framework 4 Client Profile" RuntimeVersion="4.0" ToolsVersion="4.0">
  <File AssemblyName="Accessibility" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="CustomMarshalers" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.CSharp" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.JScript" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.VisualBasic" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.VisualBasic.Compatibility" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="Microsoft.VisualBasic.Compatibility.Data" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="Microsoft.VisualC" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="mscorlib" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationCore" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationFramework.Aero" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationFramework.Classic" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationFramework" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationFramework.Luna" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationFramework.Royale" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="ReachFramework" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="sysglobl" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Activities" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.Activities.Core.Presentation" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Activities.DurableInstancing" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.Activities.Presentation" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.AddIn.Contract" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.AddIn" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ComponentModel.Composition" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ComponentModel.DataAnnotations" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Configuration" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Configuration.Install" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Core" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.DataSetExtensions" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.Entity" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.Linq" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.Data.Services.Client" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.SqlXml" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Deployment" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Device" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.DirectoryServices" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.DirectoryServices.Protocols" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.DirectoryServices.AccountManagement" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Drawing" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Dynamic" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.EnterpriseServices" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.IdentityModel" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.IdentityModel.Selectors" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.IO.Log" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Management" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Management.Instrumentation" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.Messaging" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Net" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Numerics" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Printing" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Runtime.DurableInstancing" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Runtime.Remoting" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Runtime.Serialization" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Runtime.Serialization.Formatters.Soap" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Security" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ServiceModel" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.ServiceModel.Activities" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.ServiceModel.Channels" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ServiceModel.Discovery" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.ServiceModel.Routing" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />  
  <File AssemblyName="System.ServiceProcess" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Speech" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.Transactions" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.ApplicationServices" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.Services" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Windows.Forms.DataVisualization" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Windows.Forms" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Windows.Input.Manipulations" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Windows.Presentation" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Xaml" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Xml" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Xml.Linq" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="UIAutomationClient" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="UIAutomationClientsideProviders" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="UIAutomationProvider" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="UIAutomationTypes" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="WindowsBase" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="WindowsFormsIntegration" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
</FileList>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\WindowsBase.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>Adds the specified listener to the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>Removes the specified listener from the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The listener to remove.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Adds the specified listener to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Removes the specified listener from the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The listener to remove.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>Provides information for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class with the specified <paramref name="isCancelable" /> value.</summary>
      <param name="isCancelable">A value that indicates whether the event is cancelable.</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>Gets or sets a value that indicates whether to cancel the event.</summary>
      <returns>true if the event is to be canceled; otherwise, false. The default value is false.</returns>
      <exception cref="T:System.InvalidOperationException">If the value of <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> is false.</exception>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>Gets a value that indicates whether the event is cancelable.</summary>
      <returns>true if the event is cancelable, otherwise, false. The default value is true.</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" /> event.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Adds the specified listener to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Removes the specified listener from the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The listener to remove.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary>Provides an extension of <see cref="T:System.ComponentModel.PropertyDescriptor" /> that accounts for the additional property characteristics of a dependency property.</summary>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>Enables other objects to be notified when this property changes. </summary>
      <param name="component">The component to add the handler for.</param>
      <param name="handler">The delegate to add as a listener.</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary>Gets the collection of attributes for this member.</summary>
      <returns>The <see cref="T:System.ComponentModel.AttributeCollection" /> collection of attributes.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary>Returns whether resetting an object changes its value.</summary>
      <returns>true if resetting the component changes its value; otherwise, false.</returns>
      <param name="component">The component to test for reset capability. </param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary>Gets the name of the category that the member belongs to, as specified in the <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns>The name of the category to which the member belongs. If there is no <see cref="T:System.ComponentModel.CategoryAttribute" />, the category name is set to the default category, Misc.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary>Gets the type of the component this property is bound to.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> are invoked, the object specified might be an instance of this type.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary>Gets the type converter for this property.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> that is used to convert the <see cref="T:System.Type" /> of this property.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary>Returns the dependency property identifier.</summary>
      <returns>The dependency property identifier.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary>Gets the description of the member, as specified in the <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns>The description of the member. If there is no <see cref="T:System.ComponentModel.DescriptionAttribute" />, the property value is set to the default, which is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary>Gets or sets a callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.</summary>
      <returns>A callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary>Gets whether this member should be set only at design time, as specified in the <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns>true if this member should be set only at design time; false if the member can be set during run time. If there is no <see cref="T:System.ComponentModel.DesignOnlyAttribute" />, the return value is the default, which is false.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary>Gets the name that can be displayed in a window, such as a Properties window.</summary>
      <returns>The name to display for the property.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> instances for equality.</summary>
      <returns>true if the values are equivalent; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />  to compare with the current instance. </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided property name.</summary>
      <returns>The requested <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
      <param name="name">The registered name of a dependency property or an attached property.</param>
      <param name="ownerType">The <see cref="T:System.Type" /> of the object that owns the property definition.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the object you want to set the property for.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided property name.</summary>
      <returns>The requested <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
      <param name="name">The registered name of a dependency property or an attached property.</param>
      <param name="ownerType">The <see cref="T:System.Type" /> of the object that owns the property definition.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the object you want to set the property for.</param>
      <param name="ignorePropertyType">Specifies to ignore the property type.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <returns>If the property described by <paramref name="property" /> is a dependency property, returns a valid <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />. Otherwise, returns a null<see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to check.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided dependency property and target type.</summary>
      <returns>A <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for the provided dependency property.</returns>
      <param name="dependencyProperty">The identifier for a dependency property.</param>
      <param name="targetType">The type of the object where the property is set.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that match the specified attributes for the specified component.</returns>
      <param name="instance">A component to get the properties for.</param>
      <param name="filter">An array of type <see cref="T:System.Attribute" /> to use as a filter. </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary>Gets an editor of the specified type.</summary>
      <returns>An instance of the requested editor type, or null if an editor cannot be found.</returns>
      <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports. </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</summary>
      <returns>A 32-bit signed integer hash code. </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary>Resturns the current value of the property on a component.</summary>
      <returns>The requested value.</returns>
      <param name="component">The component instance.</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary>Gets a value that indicates whether the property is registered as an attached property and is being used through an attached usage.</summary>
      <returns>true if the property is an attached property; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary>Gets a value that indicates the value of the <see cref="T:System.ComponentModel.BrowsableAttribute" /> on the property.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.BrowsableAttribute" /> was specified on the property; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary>Gets a value indicating whether this property should be localized, as specified in the <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns>true if the member is marked with the <see cref="T:System.ComponentModel.LocalizableAttribute" /> constructor of the value true; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary>Gets a value indicating whether this property is read-only.</summary>
      <returns>true if the property is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary>Gets the metadata associated with the dependency property.</summary>
      <returns>The dependency property metadata.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary>Gets the represented <see cref="T:System.Type" /> of the dependency property.</summary>
      <returns>The <see cref="T:System.Type" /> of the dependency property.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>Enables other objects to be notified when this property changes.</summary>
      <param name="component">The component to add the handler for. </param>
      <param name="handler">The delegate to add as a listener. </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary>Resets the value for this property of the component to the default value.</summary>
      <param name="component">The component with the property value that is to be reset to the default value. </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>Sets the value of the component to a different value.</summary>
      <param name="component">The component with the property value that is to be set. </param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Indicates whether the value of this property needs to be persisted by serialization processes.</summary>
      <returns>true if the property should be persisted; otherwise, false.</returns>
      <param name="component">The component with the property to be examined for persistence.</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary>Indicates whether value change notifications for this property may originate from outside the property descriptor, such as from the component itself, or whether notifications will only originate from direct calls made to <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />. </summary>
      <returns>true if notifications for this property may originate from outside the property descriptor, such as from the component itself. false if notifications will only originate from direct calls made to <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>Returns the <see cref="P:System.ComponentModel.MemberDescriptor.Name" /> value.</returns>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>Provides an abstract base class for types that describe how to divide the items in a collection into groups.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.GroupDescription" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>Returns the group name(s) for the given item.</summary>
      <returns>The group name(s) for the given item.</returns>
      <param name="item">The item to return group names for.</param>
      <param name="level">The level of grouping.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to supply to the converter.</param>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>Gets the collection of names that are used to initialize a group with a set of subgroups with the given names.</summary>
      <returns>The collection of names that are used to initialize a group with a set of subgroups with the given names.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>Returns a value that indicates whether the group name and the item name match such that the item belongs to the group.</summary>
      <returns>true if the names match and the item belongs to the group; otherwise, false.</returns>
      <param name="groupName">The name of the group to check.</param>
      <param name="itemName">The name of the item to check.</param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> event.</summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>Returns whether serialization processes should serialize the effective value of the <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> property on instances of this class.</summary>
      <returns>Returns true if the <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>Gets a value that indicates whether this view supports filtering via the <see cref="P:System.ComponentModel.ICollectionView.Filter" /> property.</summary>
      <returns>true if this view support filtering; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>Gets a value that indicates whether this view supports grouping via the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> property.</summary>
      <returns>true if this view supports grouping; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>Gets a value that indicates whether this view supports sorting via the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> property.</summary>
      <returns>true if this view supports sorting; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>Returns a value that indicates whether a given item belongs to this collection view.</summary>
      <returns>true if the item belongs to this collection view; otherwise, false.</returns>
      <param name="item">The object to check.</param>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>Gets or sets the cultural info for any operations of the view that may differ by culture, such as sorting.</summary>
      <returns>The culture to use during sorting.</returns>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>When implementing this interface, raise this event after the current item has been changed.</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>When implementing this interface, raise this event before changing the current item. Event handler can cancel this event.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>Gets the current item in the view.</summary>
      <returns>The current item of the view or null if there is no current item.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> within the view.</summary>
      <returns>The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> within the view.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that you can use to dispose of the calling object.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>Gets or sets a callback used to determine if an item is suitable for inclusion in the view.</summary>
      <returns>A method used to determine if an item is suitable for inclusion in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>Gets the top-level groups.</summary>
      <returns>A read-only collection of the top-level groups or null if there are no groups.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection.</summary>
      <returns>Returns true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the beginning of the collection.</summary>
      <returns>Returns true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the beginning of the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>Returns a value that indicates whether the resulting view is empty.</summary>
      <returns>true if the resulting view is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>Sets the specified item to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is within the view; otherwise, false.</returns>
      <param name="item">The item to set as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, false.</returns>
      <param name="position">The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> to.</param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>Recreates the view.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describe how the items in the collection are sorted in the view.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describe how the items in the collection are sorted in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>Returns the underlying collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> object that is the underlying collection.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary>An interface that enables implementing collections to create a view to their data. Normally, user code does not call methods on this interface.</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary>Creates a new view on the collection that implements this interface. Typically, user code does not call this method.</summary>
      <returns>The newly created view.</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary>Defines methods and properties that a <see cref="T:System.Windows.Data.CollectionView" /> implements to provide editing capabilities to a collection.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary>Adds a new item to the collection.</summary>
      <returns>The new item that is added to the collection.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary>Gets a value that indicates whether a new item can be added to the collection.</summary>
      <returns>true if a new item can be added to the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary>Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.</summary>
      <returns>true if the collection view can discard pending changes and restore the original values of an edited object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary>Ends the edit transaction and, if possible, restores the original value to the item.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary>Ends the add transaction and discards the pending new item.</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary>Gets a value that indicates whether an item can be removed from the collection.</summary>
      <returns>true if an item can be removed from the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary>Ends the edit transaction and saves the pending changes.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary>Ends the add transaction and saves the pending new item.</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary>Gets the item that is being added during the current add transaction.</summary>
      <returns>The item that is being added if <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> is true; otherwise, null.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary>Gets the item in the collection that is being edited.</summary>
      <returns>The item in the collection that is being edited if <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> is true; otherwise, null.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary>Begins an edit transaction of the specified item.</summary>
      <param name="item">The item to edit.</param>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary>Gets a value that indicates whether an add transaction is in progress.</summary>
      <returns>true if an add transaction is in progress; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary>Gets a value that indicates whether an edit transaction is in progress.</summary>
      <returns>true if an edit transaction is in progress; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary>Gets or sets the position of the new item placeholder in the collection view.</summary>
      <returns>One of the enumeration values that specifies the position of the new item placeholder in the collection view.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary>Removes the specified item from the collection.</summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified position from the collection.</summary>
      <param name="index">The position of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than the number of items in the collection view.</exception>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary>Defines methods and properties that a <see cref="T:System.Windows.Data.CollectionView" /> implements to enable specifying adding items of a specific type.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary>Adds the specified object to the collection.</summary>
      <returns>The object that is added to the collection.</returns>
      <param name="newItem">The object to add to the collection.</param>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary>Gets a value that indicates whether a specified object can be added to the collection.</summary>
      <returns>true if a specified object can be added to the collection; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary>Defines a property that provides information about an object's properties.</summary>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary>Gets a collection that contains information about the properties that are available on the items in a collection.</summary>
      <returns>A collection that contains information about the properties that are available on the items in a collection.</returns>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary>Contains information about a property.</summary>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ItemPropertyInfo" /> class. </summary>
      <param name="name">The name of the property.</param>
      <param name="type">The type of the property.</param>
      <param name="descriptor">An object that contains additional information about the property.</param>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary>Get an object that contains additional information about the property.</summary>
      <returns>An object that contains additional information about the property.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary>Gets the name of the property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary>Gets the type of the property.</summary>
      <returns>The type of the property.</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary>Specifies where the placeholder for a new item appears in the collection.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary>The collection does not use a new item placeholder. The position of items that are added depends on the underlying collection.  Usually, they are added at the end of the collection.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary>The placeholder for a new item appears at the beginning of the collection.  New items are at the beginning of the collection, after the new item placeholder. </summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary>The placeholder for a new item appears at the end of the collection. New items are added at the end of the collection, before the new item placeholder.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>Adds the specified listener to the list of listeners on the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
      <param name="propertyName">The name of the property that exists on <paramref name="source" /> upon which to listen for changes. Set to <see cref="F:System.String.Empty" /> to indicate "any property".</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>Removes listeners that are no longer active from the data for the provided source. </summary>
      <returns>true if some entries were removed; otherwise, false.</returns>
      <param name="source">Source object to remove all listeners from.</param>
      <param name="data">The data to purge. This is expected to be a <see cref="T:System.Collections.Specialized.HybridDictionary" />.</param>
      <param name="purgeAll">Set to true to stop listening and to completely remove all data.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>Removes the specified listener from the list of listeners on the provided source.</summary>
      <param name="source">The object to remove the listener from.</param>
      <param name="listener">The listener to remove.</param>
      <param name="propertyName">The name of the property that exists on <paramref name="source" /> upon which to stop listening for changes. Set to <see cref="F:System.String.Empty" /> to indicate "any property".</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event on the provided source.</summary>
      <param name="source">The object on which to start listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event on the provided source.</summary>
      <param name="source">The source object on which to stop listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary>Specifies which properties should be reported by type descriptors, specifically the <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> method.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> class.</summary>
      <param name="filter">The options that describe this property filter.</param>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary>This member supports the Microsoft .NET Framework infrastructure and is not intended to be used directly from your code. </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute is equal to a specified object.</summary>
      <returns>true if the specified <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> is equal to the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" />; otherwise, false. </returns>
      <param name="value">The object to compare to this <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary>Gets the filter options for this <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute.</summary>
      <returns>The property filter options.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute. </summary>
      <returns>A signed 32-bit integer value.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary>Returns a value that indicates whether the property filter options of the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute match the property filter options of the provided object. </summary>
      <returns>true if a match exists; otherwise, false.</returns>
      <param name="value">The object to compare. This object is expected to be a <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary>Specifies which properties should be reported by type descriptors, specifically the <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> method. This enumeration is used to specify the value of the <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" /> property.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary>Return no properties</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary>Return only those properties that are not valid given the current context of the object. See Remarks.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary>Return only those properties that have local values currently set.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary>Return only those properties whose local values are not set, or do not have properties set in an external expression store (such as binding or deferred resource).</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary>Return any property that is valid on the  object in the current scope. See Remarks.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary>Return all properties.</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>Defines the direction and the property name to be used as the criteria for sorting a collection.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescription" /> structure.</summary>
      <param name="propertyName">The name of the property to sort the list by.</param>
      <param name="direction">The sort order.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter cannot be null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="propertyName" /> parameter cannot be empty</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="direction" /> parameter does not specify a valid value.</exception>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>Gets or sets a value that indicates whether to sort in ascending or descending order.</summary>
      <returns>A <see cref="T:System.ComponentModel.ListSortDirection" /> value to indicate whether to sort in ascending or descending order.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>Compares the specified instance and the current instance of <see cref="T:System.ComponentModel.SortDescription" /> for value equality.</summary>
      <returns>true if <paramref name="obj" /> and this instance of <see cref="T:System.ComponentModel.SortDescription" /> have the same values.</returns>
      <param name="obj">The <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>Returns the hash code for this instance of <see cref="T:System.ComponentModel.SortDescription" />.</summary>
      <returns>The hash code for this instance of <see cref="T:System.ComponentModel.SortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>Gets a value that indicates whether this object is in an immutable state.</summary>
      <returns>true if this object is in use; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compares two <see cref="T:System.ComponentModel.SortDescription" /> objects for value equality.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="sd1">The first instance to compare.</param>
      <param name="sd2">The second instance to compare.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compares two <see cref="T:System.ComponentModel.SortDescription" /> objects for value inequality.</summary>
      <returns>true if the values are not equal; otherwise, false.</returns>
      <param name="sd1">The first instance to compare.</param>
      <param name="sd2">The second instance to compare.</param>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>Gets or sets the property name being used as the sorting criteria.</summary>
      <returns>The default value is null.</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>Represents a collection of <see cref="T:System.ComponentModel.SortDescription" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescriptionCollection" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>Occurs when an item is added or removed.</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>Gets an empty and non-modifiable instance of <see cref="T:System.ComponentModel.SortDescriptionCollection" />. </summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Inserts an item into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the <paramref name="item" /> is inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>Removes the item at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Occurs when an item is added or removed.</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary>Describes the level of detail to trace about a particular object.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary>Traces no available additional information.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary>Traces some additional information.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary>Traces a medium amount of additional information.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary>Traces all additional information.</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary>Provides debug tracing support that is specifically targeted for Windows Presentation Foundation (WPF) applications. This is an abstract class.</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary>Gets an animation trace source.</summary>
      <returns>An animation trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary>Gets a data-binding trace source.</summary>
      <returns>A data-binding trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary>Gets a dependency property trace source.</summary>
      <returns>A dependency property trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary>Gets a document trace source.</summary>
      <returns>A document trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary>Gets a Freezable trace source.</summary>
      <returns>A Freezable trace source.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary>Gets the value of the <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> attached property for a specified element.</summary>
      <returns>The <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> property value for the element.</returns>
      <param name="element">The element from which the property value is read.</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary>Gets an hwnd host trace source.</summary>
      <returns>An hwnd host trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary>Gets a markup trace source.</summary>
      <returns>A markup trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary>Gets a name scope trace source.</summary>
      <returns>A name scope trace source.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary>Refreshes trace sources, by forcing the app.config file to be re-read.</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary>Gets a resource dictionary trace source.</summary>
      <returns>A resource dictionary trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary>Gets a routed event trace source.</summary>
      <returns>A routed event trace source.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary>Sets the value of the <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> attached property to a specified element.</summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="traceLevel">The needed <see cref="T:System.Diagnostics.PresentationTraceLevel" /> value.</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary>Gets a shell trace source.</summary>
      <returns>A shell trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.TraceLevel">
      <summary>Gets or sets a value that specifies the level of detail to trace about a particular object.</summary>
      <returns>A <see cref="T:System.Diagnostics.PresentationTraceLevel" /> value that indicates the level of detail to trace about a particular object.</returns>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary>Identifies the <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> attached property.</summary>
    </member>
    <member name="T:System.IO.FileFormatException">
      <summary>The exception that is thrown when an input file or a data stream that is supposed to conform to a certain file format specification is malformed.</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class.</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class and initializes it with serialized data. This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a specified error message and exception type.</summary>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
      <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" /> property, which represents the cause of the current exception.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value and an exception type.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
      <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" /> property, which represents the cause of the current exception.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value and a specified error message.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value, a specified error message, and an exception type.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
      <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" /> property, which represents the cause of the current exception.</param>
    </member>
    <member name="M:System.IO.FileFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.IO.FileFormatException.SourceUri">
      <summary>Gets the name of a file that caused the <see cref="T:System.IO.FileFormatException" />.</summary>
      <returns>A <see cref="T:System.Uri" /> that represents the name the file that caused the exception.</returns>
    </member>
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary>Specifies the location where the X.509 certificate that is used in signing is stored.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary>The certificate is embedded in its own <see cref="T:System.IO.Packaging.PackagePart" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary>The certificate is embedded in the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" /> that is created for the signature being added.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary>The certificate in not embedded in the package.</summary>
    </member>
    <member name="T:System.IO.Packaging.CompressionOption">
      <summary>Specifies the compression level for content that is stored in a <see cref="T:System.IO.Packaging.PackagePart" />. </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.NotCompressed">
      <summary>Compression is turned off. </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Normal">
      <summary>Compression is optimized for a balance between size and performance. </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Maximum">
      <summary>Compression is optimized for size. </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Fast">
      <summary>Compression is optimized for performance. </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.SuperFast">
      <summary>Compression is optimized for high performance.</summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary>Represents an OLE compound file that contains an encrypted package.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary>Closes the encrypted package and the OLE compound file that holds it.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> on the specified stream.</summary>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />. </returns>
      <param name="envelopeStream">The stream on which to create the file.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> does not provide read/write access.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and gives it the specified file name.</summary>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />. </returns>
      <param name="envelopeFileName">The name of the OLE compound file.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> (on the specified stream) that uses the specified unencrypted package as its content.</summary>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />. </returns>
      <param name="envelopeStream">The stream on which to create the file.</param>
      <param name="packageStream">The stream representing the existing unencrypted package.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> or <paramref name="packageStream" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> does not provide read/write access.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that uses the specified unencrypted package as its content, and gives it the specified file name.</summary>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</returns>
      <param name="envelopeFileName">The name of the OLE compound file.</param>
      <param name="packageStream">The stream representing the existing unencrypted package.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> or <paramref name="packageStream" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />. </summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary>Gets a value that specifies whether the file was opened with access to read, write, or both.</summary>
      <returns>The <see cref="T:System.IO.FileAccess" /> value that was used to open the file. </returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary>Flush the stream for both the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and its package content.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary>Gets the encrypted package inside the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
      <returns>The <see cref="T:System.IO.Packaging.Package" /> in the envelope. </returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary>Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.</summary>
      <returns>true if the specified stream is an OLE compound file with an encrypted package stream; otherwise, false. </returns>
      <param name="stream">The stream that is tested.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary>Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.</summary>
      <returns>true if the specified file is an OLE compound file with an encrypted package stream; otherwise, false. </returns>
      <param name="fileName">The file that is tested.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary>Open the encrypted package in the specified stream.</summary>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
      <param name="envelopeStream">The stream containing the encrypted package.</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary>Open the encrypted package in the specified file as read only and unshared.</summary>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
      <param name="envelopeFileName">The file containing the encrypted package.</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary>Open the encrypted package in the specified file as unshared and with the specified access.</summary>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
      <param name="envelopeFileName">The file containing the encrypted package.</param>
      <param name="access">The type of access.</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Open the encrypted package in the specified file and gives it the specified access and sharing.</summary>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
      <param name="envelopeFileName">The file containing the encrypted package.</param>
      <param name="access">The type of access.</param>
      <param name="sharing">The type of sharing.</param>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary>Gets the core package properties (such as Title and Subject) of the rights managed document.</summary>
      <returns>The <see cref="T:System.IO.Packaging.PackageProperties" /> for the package.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary>Gets the rights management information stored in the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />; specifically, the <see cref="T:System.Security.RightsManagement.PublishLicense" /> and the <see cref="T:System.Security.RightsManagement.UseLicense" />s stored in the OLE compound file that embodies the rights-management protected package</summary>
      <returns>The <see cref="T:System.IO.Packaging.RightsManagementInformation" /> for the package.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary>Gets an object that provides access to the compound file streams outside the encrypted package.</summary>
      <returns>A <see cref="T:System.IO.Packaging.StorageInfo" /> representing streams in the OLE compound file that are outside the encrypted package.</returns>
    </member>
    <member name="T:System.IO.Packaging.EncryptionOption">
      <summary>Specifies the encryption option for parts in a <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.None">
      <summary>No encryption.</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.RightsManagement">
      <summary>Encryption supported through rights management.</summary>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" /> that is raised when <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> detects an invalid signature.</summary>
      <param name="sender">The invalid <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.IO.Packaging.Package">
      <summary>Represents a container that can store multiple data objects.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.Package" /> class that uses a given <see cref="T:System.IO.FileAccess" />.</summary>
      <param name="openFileAccess">The file IO permissions for the package.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="openFileAccess" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.Package" /> class that uses a given <see cref="T:System.IO.FileAccess" /> and streaming option.</summary>
      <param name="openFileAccess">The file IO permissions for the package.</param>
      <param name="streaming">true to open the package for streaming; otherwise, false.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="openFileAccess" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Close">
      <summary>Saves and closes the package plus all underlying part streams.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)">
      <summary>Creates a new uncompressed part with a given URI and content type.</summary>
      <returns>The new created part.</returns>
      <param name="partUri">The uniform resource identifier (URI) of the new part.</param>
      <param name="contentType">The content type of the data stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> or <paramref name="contentType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
      <exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" /> is already present in the package.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>Creates a new part with a given URI, content type, and compression option.</summary>
      <returns>The new created part.</returns>
      <param name="partUri">The URI of the new part.</param>
      <param name="contentType">The content type of the data stream.</param>
      <param name="compressionOption">The compression option for the data stream, <see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> or <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> compression.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> or <paramref name="contentType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> uniform resource identifier (URI).</exception>
      <exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" /> is already present in the package.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="compressionOption" /> value is not valid.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>When overridden in a derived class, creates a new part in the package.</summary>
      <returns>The created part.</returns>
      <param name="partUri">The uniform resource identifier (URI) for the part being created.</param>
      <param name="contentType">The content type of the data stream.</param>
      <param name="compressionOption">The compression option for the data stream.</param>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>Creates a package-level relationship to a part with a given URI, target mode, and relationship type. </summary>
      <returns>The package-level relationship to the specified part.</returns>
      <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
      <param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the package.</param>
      <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="targetUri" /> part is a <see cref="T:System.IO.Packaging.PackageRelationship" />, or <paramref name="targetMode" /> is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> and <paramref name="targetUri" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="targetMode" /> is not valid.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>Creates a package-level relationship to a part with a given URI, target mode, relationship type, and identifier (ID).</summary>
      <returns>The package-level relationship to the specified part.</returns>
      <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
      <param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the package.</param>
      <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
      <param name="id">A unique XML identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="targetUri" /> part is a <see cref="T:System.IO.Packaging.PackageRelationship" />, or <paramref name="targetMode" /> is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> and <paramref name="targetUri" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="targetMode" /> is not valid.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier; or a part with the specified <paramref name="id" /> already occurs in the package.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePart(System.Uri)">
      <summary>Deletes a part with a given URI from the package.</summary>
      <param name="partUri">The URI of the part to delete.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)">
      <summary>When overridden in a derived class, deletes a part with a given URI. </summary>
      <param name="partUri">The <see cref="P:System.IO.Packaging.PackagePart.Uri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> to delete.</param>
    </member>
    <member name="M:System.IO.Packaging.Package.DeleteRelationship(System.String)">
      <summary>Deletes a package-level relationship.</summary>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the <see cref="T:System.IO.Packaging.PackageRelationship" /> to delete.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Dispose(System.Boolean)">
      <summary>Flushes and saves the content of all parts and relationships, closes the package, and releases all resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.IO.Packaging.Package.FileOpenAccess">
      <summary>Gets the file access setting for the package.</summary>
      <returns>One of the <see cref="T:System.IO.FileAccess" /> values: <see cref="F:System.IO.FileAccess.Read" />, <see cref="F:System.IO.FileAccess.Write" />, or <see cref="F:System.IO.FileAccess.ReadWrite" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Flush">
      <summary>Saves the contents of all parts and relationships that are contained in the package.</summary>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only and cannot be modified.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.FlushCore">
      <summary>When overridden in a derived class, saves the content of all parts and relationships to the derived class store.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPart(System.Uri)">
      <summary>Returns the part with a given URI.</summary>
      <returns>The part with the specified <paramref name="partUri" />.</returns>
      <param name="partUri">The uniform resource identifier (URI) of the part to return.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> uniform resource identifier (URI).</exception>
      <exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" /> is not in the package.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartCore(System.Uri)">
      <summary>When overridden in a derived class, returns the part addressed by a given URI.</summary>
      <returns>The requested part; or null, if a part with the specified <paramref name="partUri" /> is not in the package.</returns>
      <param name="partUri">The uniform resource identifier (URI) of the part to retrieve.</param>
    </member>
    <member name="M:System.IO.Packaging.Package.GetParts">
      <summary>Returns a collection of all the parts in the package.</summary>
      <returns>A collection of all the <see cref="T:System.IO.Packaging.PackagePart" /> elements that are contained in the package.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartsCore">
      <summary>When overridden in a derived class, returns an array of all the parts in the package. </summary>
      <returns>An array of all the parts that are contained in the package.</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationship(System.String)">
      <summary>Returns the package-level relationship with a given identifier.</summary>
      <returns>The package-level relationship with the specified <paramref name="id" />.</returns>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to return.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.InvalidOperationException">A relationship with the specified <paramref name="id" /> is not in the package.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationships">
      <summary>Returns a collection of all the package-level relationships.</summary>
      <returns>A collection of all the package-level relationships that are contained in the package.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)">
      <summary>Returns a collection of all the package-level relationships that match a given <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />. </summary>
      <returns>A collection of package-level relationships that match the specified <paramref name="relationshipType" />.</returns>
      <param name="relationshipType">The <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />  to match and return in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> is an empty string.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream)">
      <summary>Opens a package on a given IO stream.</summary>
      <returns>The opened package.</returns>
      <param name="stream">The IO stream on which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" /> is write-only; or, the package to open requires write or read/write permission and the specified <paramref name="stream" /> is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)">
      <summary>Opens a package with a given IO stream and file mode.</summary>
      <returns>The opened package.</returns>
      <param name="stream">The IO stream on which to open the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> value is not valid.</exception>
      <exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" /> is write-only; or, the package to open requires write or read/write permission and the specified <paramref name="stream" /> is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a package with a given IO stream, file mode, and file access setting.</summary>
      <returns>The opened package.</returns>
      <param name="stream">The IO stream on which to open the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <param name="packageAccess">The file access in which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="packageMode" /> or <paramref name="packageAccess" /> is not valid.</exception>
      <exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" /> is write-only; or the package to open requires write or read/write permission and the specified <paramref name="stream" /> is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String)">
      <summary>Opens a package at a given path and file name.</summary>
      <returns>The opened package.</returns>
      <param name="path">The path and file name of the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)">
      <summary>Opens a package at a given path using a given file mode. </summary>
      <returns>The opened package.</returns>
      <param name="path">The path and file name of the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Value for <paramref name="packageMode" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a package at a given path using a given file mode and file access setting.</summary>
      <returns>The opened package.</returns>
      <param name="path">The path and file name of the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <param name="packageAccess">The file access in which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Value for <paramref name="packageMode" /> or <paramref name="packageAccess" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a package at a given path using a given file mode, file access, and file share setting.</summary>
      <returns>The opened package.</returns>
      <param name="path">The path and file name of the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <param name="packageAccess">The file access in which to open the package.</param>
      <param name="packageShare">The file sharing mode in which to open the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="packageMode" />, <paramref name="packageAccess" />, or <paramref name="packageShare" /> is not valid.</exception>
    </member>
    <member name="P:System.IO.Packaging.Package.PackageProperties">
      <summary>Gets the core properties of the package.</summary>
      <returns>The core properties of the package.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.PartExists(System.Uri)">
      <summary>Indicates whether a part with a given URI is in the package.</summary>
      <returns>true if a part with the specified <paramref name="partUri" /> is in the package; otherwise, false.</returns>
      <param name="partUri">The <see cref="T:System.Uri" /> of the part to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> uniform resource identifier (URI).</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.RelationshipExists(System.String)">
      <summary>Indicates whether a package-level relationship with a given ID is contained in the package.</summary>
      <returns>true if a package-level relationship with the specified <paramref name="id" /> is in the package; otherwise, false.</returns>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended for application use.  Use the type-safe <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> method instead. </summary>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary>Represents a digital signature that is applied to a set of package parts and relationships.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary>Gets the X.509 certificate embedding option. </summary>
      <returns>One of the <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> values that specifies the option for the digital signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary>Returns an ordered list of the <see cref="T:System.Security.Cryptography.Xml.Transform" /> operations applied to a given part. </summary>
      <returns>An ordered list of URI strings, such as <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> or <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />, that represents the canonical XML transformations applied to the part with the given <paramref name="partName" /> URI.</returns>
      <param name="partName">The <see cref="T:System.Uri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> to return the transform list for.</param>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary>Gets or sets the XML digital signature.</summary>
      <returns>The XML digital signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary>Gets the <see cref="T:System.IO.Packaging.PackagePart" /> that contains the signature. </summary>
      <returns>The package part that contains the signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary>Gets the URI string that identifies the signature type. </summary>
      <returns>A URI string that identifies the signature type. The default is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary>Gets the encrypted hash value of the <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />. </summary>
      <returns>A byte array that contains the encrypted hash value of the <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary>Gets a collection of all the <see cref="T:System.IO.Packaging.PackagePart" /> objects signed with the signature. </summary>
      <returns>A collection that contains all the package parts signed with the signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary>Gets the list of the <see cref="T:System.IO.Packaging.PackageRelationship" /> parts that have been signed with the signature.</summary>
      <returns>The list of the <see cref="T:System.IO.Packaging.PackageRelationship" /> parts that have been signed with the signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary>Gets the X.509 certificate of the signer. </summary>
      <returns>The digital certificate of the signer, or null if the certificate is not stored in the <see cref="T:System.IO.Packaging.Package" />.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary>Gets the date and time that the signature was created. </summary>
      <returns>The date and time that the signature was created.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary>Gets the format of the date and time returned by the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> property. </summary>
      <returns>The format of the date and time returned by the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary>Verifies the digital signature against an X.509 certificate. </summary>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> if the verification succeeded; otherwise, one of the <see cref="T:System.IO.Packaging.VerifyResult" /> values that identifies a problem. </returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Verifies the digital signature against a given X.509 certificate. </summary>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> if the verification succeeded; otherwise, one of the <see cref="T:System.IO.Packaging.VerifyResult" /> values that identifies a problem.</returns>
      <param name="signingCertificate">The signer's X.509 certificate to verify the digital signature against.</param>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary>Provides a utility class for the creation and verification of digital signatures in a <see cref="T:System.IO.Packaging.Package" />.    </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> class for use with a specified <see cref="T:System.IO.Packaging.Package" />. </summary>
      <param name="package">The package associated with this signature manager.</param>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary>Gets or sets the X.509 certificate embedding option used by the <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> method to digitally sign package parts. </summary>
      <returns>One of the <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> values. </returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary>Countersigns all the signatures in the package with a user-selected X.509 certificate.</summary>
      <returns>The signature that was added as a countersign; or null if no certificate could be located or the user canceled the certificate selection dialog.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Countersigns all the signatures in the package with a specified X.509 certificate. </summary>
      <returns>The signature that was added as a countersign.</returns>
      <param name="certificate">The X.509 certificate to add as a countersign signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is null</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Countersigns a list of signatures with a given X.509 certificate.</summary>
      <returns>The digital signature used to countersign each of the <paramref name="signatures" />.</returns>
      <param name="certificate">The X.509 certificate to countersign each of the specified <paramref name="signatures" />.</param>
      <param name="signatures">The list of signatures to countersign.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="certificate" /> or <paramref name="signatures" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The package contains no signed <see cref="T:System.IO.Packaging.PackagePart" /> objects.</exception>
      <exception cref="T:System.ArgumentException">The package contains no <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> parts.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary>Gets a URI string that identifies the default hash algorithm used to create and verify signatures. </summary>
      <returns>A URI string that identifies the default hash algorithm used to create and verify signatures.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary>Returns the digital signature for a given signature uniform resource identifier (URI). </summary>
      <returns>The digital signature for the specified <paramref name="signatureUri" />, or null if a signature for the given <paramref name="signatureUri" /> cannot be found.</returns>
      <param name="signatureUri">The URI of the digital signature to return.</param>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary>Gets or sets the URI identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> instance used to create and verify signatures. </summary>
      <returns>The <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> URI identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> instance used to create and verify signatures.</returns>
      <exception cref="T:System.ArgumentNullException">The string for the URI to set is null.</exception>
      <exception cref="T:System.ArgumentException">The string for the URI to set is empty.</exception>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary>Occurs when <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> encounters an invalid signature. </summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary>Gets a value that indicates whether the package contains any signatures. </summary>
      <returns>true if the package contains signatures; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary>Gets or sets a handle to the parent window for displaying a certificate selection dialog box. </summary>
      <returns>The handle of the parent window to use to display the certificate selection dialog box.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary>Removes all digital signatures from the package. </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary>Removes the digital signature with a given signature uniform resource identifier (URI). </summary>
      <param name="signatureUri">The URI of the <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> to remove.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Prompts the user for an X.509 certificate, which is then used to digitally sign a specified list of package parts.</summary>
      <returns>The digital signature used to sign the list of <paramref name="parts" />.</returns>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> elements to sign.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Signs a list of package parts with a given X.509 certificate. </summary>
      <returns>The digital signature used to sign the given list of <paramref name="parts" />; or null if no certificate could be found or the user clicked "Cancel" in the certificate selection dialog box.</returns>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> elements to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified <paramref name="parts" />.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary>Signs a list of package parts and package relationships with a given X.509 certificate. </summary>
      <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
      <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="parts" /> nor <paramref name="relationshipSelectors" /> specify any objects to sign.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary>Signs a list of package parts and package relationships with a given X.509 certificate and identifier (ID).</summary>
      <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
      <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
      <param name="signatureId">An identification string to associate with the signature.</param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="parts" /> nor <paramref name="relationshipSelectors" /> specify any elements to sign.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary>Signs a list of package parts, package relationships, or custom objects with a specified X.509 certificate and signature identifier (ID).</summary>
      <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
      <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
      <param name="signatureId">An identification string to associate with the signature.</param>
      <param name="signatureObjects">A list of custom data objects to sign.</param>
      <param name="objectReferences">A list of references to custom objects to sign.</param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="parts" />, <paramref name="relationshipSelectors" />, <paramref name="signatureObjects" />, nor <paramref name="objectReferences" /> specify any elements to sign.</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> of a part being signed references an empty, null, or undefined <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="signatureId" /> is not null and is not a valid XML schema ID (for example, begins with a leading numeric digit).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary>Gets the uniform resource identifier (URI) of the signature origin part.</summary>
      <returns>The URI of the signature origin part.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary>Gets the type of default signature origin relationship.</summary>
      <returns>The type of default signature origin relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary>Gets a collection of all the signatures contained in the package. </summary>
      <returns>A collection of all the <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> objects.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary>Gets or sets the date/time format used to create a signature <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />. </summary>
      <returns>The date/time format used to create a signature <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary>Gets a dictionary that contains each defined <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> and its associated XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> identifier. </summary>
      <returns>A dictionary that contains each defined <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> and its associated XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> identifier.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Verifies a given X.509 certificate. </summary>
      <returns>
        <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" /> (value 0) if the certificate verified successfully; otherwise, a bitwise enumeration of error flags.</returns>
      <param name="certificate">The X.509 certificate to verify.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary>Verifies the signatures on all signed parts within the package. </summary>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> (value 0) if all signatures are verified successfully; otherwise, an enumeration that identifies the error.</returns>
      <param name="exitOnFailure">true to exit on first failure; otherwise, false to continue and check all signatures.</param>
    </member>
    <member name="T:System.IO.Packaging.PackagePart">
      <summary>Provides a base class for parts stored in a <see cref="T:System.IO.Packaging.Package" />.  This class is abstract.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart" /> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package" /> and part URI.</summary>
      <param name="package">The parent <see cref="T:System.IO.Packaging.Package" /> of the part.</param>
      <param name="partUri">The URI of the part, relative to the parent <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> or <paramref name="partUri" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart" /> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package" />, part URI, and MIME content type.</summary>
      <param name="package">The parent <see cref="T:System.IO.Packaging.Package" /> of the part.</param>
      <param name="partUri">The URI of the part, relative to the parent <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <param name="contentType">The MIME content type of the part data stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> or <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart" /> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package" />, part URI, MIME content type, and <see cref="T:System.IO.Packaging.CompressionOption" />.</summary>
      <param name="package">The parent <see cref="T:System.IO.Packaging.Package" /> of the part.</param>
      <param name="partUri">The URI of the part, relative to the parent <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <param name="contentType">The MIME content type of the part's data stream.</param>
      <param name="compressionOption">The compression option of the part data stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> or <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="compressionOption" /> value is not valid.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.CompressionOption">
      <summary>Gets the compression option of the part content stream.</summary>
      <returns>The compression option of the part content stream.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.ContentType">
      <summary>Gets the MIME type of the content stream.</summary>
      <returns>The MIME type of the content data stream for the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).-or-The string returned by the derived class <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> method is empty.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to a specified target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</summary>
      <returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to the target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</returns>
      <param name="targetUri">The URI of the target part.</param>
      <param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal" /> if the target part is inside the <see cref="T:System.IO.Packaging.Package" />; or <see cref="F:System.IO.Packaging.TargetMode.External" /> if the target is a resource outside the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="relationshipType">The role of the relationship.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetMode" /> parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentException">The part identified by the <paramref name="targetUri" /> is a relationship (the target of a relationship cannot be another relationship).-or-<paramref name="targetMode" /> is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal" /> but <paramref name="targetUri" /> is an absolute external URI.</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to a specified target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</summary>
      <returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to the target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</returns>
      <param name="targetUri">The URI of the target part.</param>
      <param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal" /> if the target part is inside the <see cref="T:System.IO.Packaging.Package" />; or <see cref="F:System.IO.Packaging.TargetMode.External" /> if the target is a resource outside the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="relationshipType">The role of the relationship.</param>
      <param name="id">A unique ID for the relationship.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetMode" /> parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentException">The part identified by the <paramref name="targetUri" /> is a relationship (the target of a relationship cannot be another relationship).-or-<paramref name="targetMode" /> is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal" /> but <paramref name="targetUri" /> is an absolute external URI.</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.-or-A part with the specified <paramref name="id" /> already exists.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)">
      <summary>Deletes a specified part-level <see cref="T:System.IO.Packaging.PackageRelationship" />.</summary>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to delete.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (relationships cannot be deleted).</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetContentTypeCore">
      <summary>When overridden in a derived class, returns the MIME type of the part content.</summary>
      <returns>The MIME type of the part content.</returns>
      <exception cref="T:System.NotSupportedException">The derived class does not provide an override implementation required for the <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> method.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)">
      <summary>Returns the relationship that has a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id" />. </summary>
      <returns>The relationship that matches the specified <paramref name="id" />.</returns>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to return.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> is an empty string.</exception>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).-or-A relationship with the specified <paramref name="id" /> does not exist in the package.</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationships">
      <summary>Returns a collection of all the relationships that are owned by this part.</summary>
      <returns>A collection of all the relationships that are owned by the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)">
      <summary>Returns a collection of the relationships that match a specified <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />.</summary>
      <returns>A collection of the relationships that match the specified <paramref name="relationshipType" />.</returns>
      <param name="relationshipType">The <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> of the relationships to locate and return in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> is an empty string.</exception>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream">
      <summary>Returns the part content data stream.</summary>
      <returns>The content data stream for the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method of the derived subclass is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)">
      <summary>Returns the content stream opened in a specified I/O <see cref="T:System.IO.FileMode" />.</summary>
      <returns>The content stream of the part.</returns>
      <param name="mode">The I/O mode in which to open the content stream.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> parameter is not a valid <see cref="T:System.IO.FileMode" /> enumeration value.</exception>
      <exception cref="T:System.IO.IOException">The <paramref name="mode" /> parameter is not compatible with the package and part stream.-or-The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method of the derived subclass is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Returns the part content stream opened with a specified <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />.</summary>
      <returns>The content stream for the part.</returns>
      <param name="mode">The I/O mode in which to open the content stream.</param>
      <param name="access">The access permissions to use in opening the content stream.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> parameter is not a valid <see cref="T:System.IO.FileMode" /> enumeration value.-or-The <paramref name="access" /> parameter is not a valid <see cref="T:System.IO.FileAccess" /> enumeration value.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> or <paramref name="access" /> is not compatible with the package and part stream.-or-The <paramref name="access" /> parameter is specified as <see cref="F:System.IO.FileAccess.Read" /> but the <paramref name="mode" /> parameter requires write access.  (<see cref="T:System.IO.FileMode" /> values of <see cref="F:System.IO.FileMode.Create" />, <see cref="F:System.IO.FileMode.CreateNew" />, <see cref="F:System.IO.FileMode.Truncate" />, and <see cref="F:System.IO.FileMode.Append" /> require <see cref="F:System.IO.FileAccess.Write" /> or <see cref="F:System.IO.FileAccess.ReadWrite" /> access.)-or-The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method of the derived subclass is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)">
      <summary>When overridden in a derived class, returns the part content stream opened with a specified <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />.</summary>
      <returns>The content data stream of the part.</returns>
      <param name="mode">The I/O mode in which to open the content stream.</param>
      <param name="access">The access permissions to use in opening the content stream.</param>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Package">
      <summary>Gets the parent <see cref="T:System.IO.Packaging.Package" /> of the part.</summary>
      <returns>The parent package of the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)">
      <summary>Returns a value that indicates whether this part owns a relationship with a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id" />.</summary>
      <returns>true if this part owns a relationship with the specified <paramref name="id" />; otherwise, false.</returns>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Uri">
      <summary>Gets the URI of the part.</summary>
      <returns>The URI of the part relative to the package root.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="T:System.IO.Packaging.PackagePartCollection">
      <summary>Represents a collection of <see cref="T:System.IO.Packaging.PackagePart" /> objects.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.GetEnumerator">
      <summary>Returns an enumerator for iterating through the parts in the collection. </summary>
      <returns>An enumerator for iterating through the <see cref="T:System.IO.Packaging.PackagePart" /> elements in the collection.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections." /><see cref="IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageProperties">
      <summary>Represents the core properties of a <see cref="T:System.IO.Packaging.Package" />.    </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageProperties" /> class. </summary>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Category">
      <summary>When overridden in a derived class, gets or sets the category of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The category of the content that is contained in the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentStatus">
      <summary>When overridden in a derived class, gets or sets a value that represents the status of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The status of the <see cref="T:System.IO.Packaging.Package" /> content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentType">
      <summary>When overridden in a derived class, gets or sets a value that represents the type of content that is contained in the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The type of content that is contained in the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Created">
      <summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" /> was created.</summary>
      <returns>The date and time the <see cref="T:System.IO.Packaging.Package" /> was initially created.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Creator">
      <summary>When overridden in a derived class, gets or sets a value that identifies the individual or entity that created the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>The individual or entity that created the <see cref="T:System.IO.Packaging.Package" /> and its content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Description">
      <summary>When overridden in a derived class, gets or sets a description of the content contained in the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>A description of the content contained in the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.Packaging.PackageProperties" /> instance.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Packaging.PackageProperties" /> instance and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Identifier">
      <summary>When overridden in a derived class, gets or sets a value that unambiguously identifies the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>A value that unambiguously identifies the <see cref="T:System.IO.Packaging.Package" /> and its content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Keywords">
      <summary>When overridden in a derived class, gets or sets a value that define a delimited set of keywords to support searching and indexing the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>A delimited set of keywords to support searching and indexing the <see cref="T:System.IO.Packaging.Package" /> and content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Language">
      <summary>When overridden in a derived class, gets or sets a value that identifies the language of the <see cref="T:System.IO.Packaging.Package" /> content.</summary>
      <returns>A value that identifies the <see cref="T:System.IO.Packaging.Package" /> content language.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastModifiedBy">
      <summary>When overridden in a derived class, gets or sets a value that identifies the user who last modified the <see cref="T:System.IO.Packaging.Package" /> content.</summary>
      <returns>The user who last modified the <see cref="T:System.IO.Packaging.Package" /> content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastPrinted">
      <summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" /> content was last printed.</summary>
      <returns>The date and time the <see cref="T:System.IO.Packaging.Package" /> content was last printed.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Modified">
      <summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" /> was last changed.</summary>
      <returns>The date and time the <see cref="T:System.IO.Packaging.Package" /> was last changed.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Revision">
      <summary>When overridden in a derived class, gets or sets the revision number of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The revision number of the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Subject">
      <summary>When overridden in a derived class, gets or sets the topic of the <see cref="T:System.IO.Packaging.Package" /> content.</summary>
      <returns>The topic of the <see cref="T:System.IO.Packaging.Package" /> content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Title">
      <summary>When overridden in a derived class, gets or sets the name given to the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>The name given to the <see cref="T:System.IO.Packaging.Package" /> and its content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Version">
      <summary>When overridden in a derived class, gets or sets the version number of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The version number of the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationship">
      <summary>Represents an association between a source <see cref="T:System.IO.Packaging.Package" /> or <see cref="T:System.IO.Packaging.PackagePart" />, and a target object which can be a <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Id">
      <summary>Gets a string that identifies the relationship.</summary>
      <returns>A string that identifies the relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Package">
      <summary>Gets the <see cref="T:System.IO.Packaging.Package" /> that contains this relationship.</summary>
      <returns>The package that contains this relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.RelationshipType">
      <summary>Gets the qualified type name of the relationship. </summary>
      <returns>The qualified type name of the relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.SourceUri">
      <summary>Gets the URI of the package or part that owns the relationship.</summary>
      <returns>The URI of the <see cref="T:System.IO.Packaging.Package" /> or <see cref="T:System.IO.Packaging.PackagePart" /> that owns the relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetMode">
      <summary>Gets a value that indicates whether the target of the relationship is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>An enumeration value that indicates whether <see cref="P:System.IO.Packaging.PackageRelationship.TargetUri" /> references a resource <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetUri">
      <summary>Gets the URI of the target resource of the relationship.</summary>
      <returns>The URI of the target resource.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipCollection">
      <summary>Represents a collection of <see cref="T:System.IO.Packaging.PackageRelationship" /> elements that are owned by a given <see cref="T:System.IO.Packaging.PackagePart" /> or the <see cref="T:System.IO.Packaging.Package" />. </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator">
      <summary>Returns an enumerator for iterating through the relationships in the collection. </summary>
      <returns>An enumerator for iterating through the <see cref="T:System.IO.Packaging.PackageRelationship" /> elements in the collection.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Do not use—use <see cref="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelector">
      <summary>Defines <see cref="T:System.IO.Packaging.PackageRelationship" /> criteria to select part-level or package-level relationships.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageRelationshipSelector" /> class.</summary>
      <param name="sourceUri">The uniform resource identifier (URI) of the <see cref="T:System.IO.Packaging.PackagePart" /> or the <see cref="T:System.IO.Packaging.Package" /> (<paramref name="SourceUri" />="/") that owns the relationship.</param>
      <param name="selectorType">The type of the <paramref name="selectionCriteria" />, either by relationship <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> or relationship <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />.</param>
      <param name="selectionCriteria">The qualification string that is used to select the relationships based on the <paramref name="selectorType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceUri" /> or <paramref name="selectionCriteria" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="selectorType" /> parameter is not valid.</exception>
      <exception cref="T:System.Xml.XmlException">The <paramref name="selectorType" /> parameter is <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> but <paramref name="selectionCriteria" /> is not a valid XML Schema Definition (XSD) identifier (ID).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="selectionCriteria" /> is not valid for the specified <paramref name="selectorType" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="sourceUri" /> is not the <see cref="T:System.IO.Packaging.Package" /> root ("/") and is also not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.Select(System.IO.Packaging.Package)">
      <summary>Returns a list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects that match the defined <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri" />, <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" />, and <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria" />.</summary>
      <returns>A list of relationships that match the selection parameters specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</returns>
      <param name="package">The package from which to select the relationships based on the selection criteria.</param>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria">
      <summary>Gets the selection criteria specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</summary>
      <returns>The selection criteria based on the <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" /> of <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> or <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType">
      <summary>Gets the <see cref="T:System.IO.Packaging.PackageRelationshipSelectorType" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</summary>
      <returns>The selector type of <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> or <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri">
      <summary>Gets the root package URI ("/") or part <see cref="P:System.IO.Packaging.PackagePart.Uri" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor as the owner of the relationship.</summary>
      <returns>The root package URI ("/") or part <see cref="P:System.IO.Packaging.PackagePart.Uri" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor as the owner of the relationship.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelectorType">
      <summary>Specifies the type of selection criteria that is used to match and return <see cref="T:System.IO.Packaging.PackageRelationship" /> selections through a <see cref="T:System.IO.Packaging.PackageRelationshipSelector" />.     </summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Id">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationship" /> selections are by <see cref="P:System.IO.Packaging.PackageRelationship.Id" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Type">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationship" /> selections are by <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />.</summary>
    </member>
    <member name="T:System.IO.Packaging.PackUriHelper">
      <summary>Provides utility methods to compose and parse pack URI objects.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePackUri(System.Uri,System.Uri)">
      <summary>Returns a value that indicates whether two pack URIs are equivalent.</summary>
      <returns>A signed integer indicating the relationship between <paramref name="firstPackUri" /> and <paramref name="secondPackUri" />.ValueMeaningLess than 0<paramref name="firstPackUri" /> is less than <paramref name="secondPackUri" />.0<paramref name="firstPackUri" /> is equivalent to <paramref name="secondPackUri" />.Greater than 0<paramref name="firstPackUri" /> is greater than <paramref name="secondPackUri" />.</returns>
      <param name="firstPackUri">The first pack URI.</param>
      <param name="secondPackUri">The second pack URI.</param>
      <exception cref="T:System.ArgumentException">Either <paramref name="firstPackUri" /> or <paramref name="secondPackUri" /> is not an absolute URI.-or-Either <paramref name="firstPackUri" /> or <paramref name="secondPackUri" /> do not begin with a "pack://" scheme.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)">
      <summary>Returns a value that indicates whether two package part URIs are equivalent.</summary>
      <returns>A value that indicates the relationship between <paramref name="firstPartUri" /> and <paramref name="secondPartUri" />.ValueMeaningLess than 0<paramref name="firstPartUri" /> is less than <paramref name="secondPartUri" />.0<paramref name="firstPartUri" /> is equivalent to <paramref name="secondPartUri" />.Greater than 0<paramref name="firstPartUri" /> is greater than <paramref name="secondPartUri" />.</returns>
      <param name="firstPartUri">The URI of the first <see cref="T:System.IO.Packaging.PackagePart" />.</param>
      <param name="secondPartUri">The URI of the second <see cref="T:System.IO.Packaging.PackagePart" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPartUri" /> or <paramref name="secondPartUri" /> is not a valid part URI syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri)">
      <summary>Creates a new pack URI that points to a package. </summary>
      <returns>The pack URI for the <see cref="T:System.IO.Packaging.Package" /> referenced by the given <paramref name="packageUri" />.</returns>
      <param name="packageUri">The URI of the referenced <see cref="T:System.IO.Packaging.Package" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is not an absolute URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri)">
      <summary>Creates a pack URI given a <see cref="T:System.IO.Packaging.Package" /> URI and the URI of a part in the package.</summary>
      <returns>The pack URI of the given <see cref="T:System.IO.Packaging.PackagePart" />.</returns>
      <param name="packageUri">The URI of the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> in the package.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is not an absolute URI.-or-<paramref name="partUri" /> is not a valid part URI syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri,System.String)">
      <summary>Creates a pack URI given a <see cref="T:System.IO.Packaging.Package" /> URI, the URI of a part in the package, and a "#" fragment to append.</summary>
      <returns>The pack URI that identifies the specified package, package part, and fragment.</returns>
      <param name="packageUri">The URI of the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> in the package.</param>
      <param name="fragment">A "#" reference identifying an element within the package part.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is not an absolute URI.-or-<paramref name="partUri" /> is not a valid part URI syntax. -or-<paramref name="fragment" /> is empty or does begin with "#".</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)">
      <summary>Creates a formatted <see cref="T:System.IO.Packaging.PackagePart" /> URI. </summary>
      <returns>A formatted <see cref="T:System.IO.Packaging.PackagePart" /> URI.</returns>
      <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> within the package.</param>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri(System.Uri)">
      <summary>Returns the normalized form of a specified <see cref="T:System.IO.Packaging.PackagePart" /> URI. </summary>
      <returns>The normalized form of the given <paramref name="partUri" />.</returns>
      <param name="partUri">The <see cref="T:System.IO.Packaging.PackagePart" /> URI to normalize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)">
      <summary>Returns the inner URI that points to the entire package of a specified pack URI. </summary>
      <returns>The URI of the <see cref="T:System.IO.Packaging.Package" /> from the specified <paramref name="packUri" />.</returns>
      <param name="packUri">The pack URI from which to return the URI of the <see cref="T:System.IO.Packaging.Package" />.</param>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)">
      <summary>Returns the URI of a <see cref="T:System.IO.Packaging.PackagePart" /> within a specified pack URI. </summary>
      <returns>The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> in the given <paramref name="packUri" />, or null if <paramref name="packUri" /> points to a package instead of a <see cref="T:System.IO.Packaging.PackagePart" />. </returns>
      <param name="packUri">The pack URI from which to return the <see cref="T:System.IO.Packaging.PackagePart" /> URI.</param>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelationshipPartUri(System.Uri)">
      <summary>Returns the URI of the relationship part associated with a specified <see cref="T:System.IO.Packaging.PackagePart" />.</summary>
      <returns>The URI of the <see cref="T:System.IO.Packaging.PackageRelationship" /> part associated with the <see cref="T:System.IO.Packaging.PackagePart" /> identified by <paramref name="partUri" />.</returns>
      <param name="partUri">The <see cref="P:System.IO.Packaging.PackagePart.Uri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> to return the URI for the associated <see cref="T:System.IO.Packaging.PackageRelationship" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> syntax is not valid for a package part URI.-or-<paramref name="partUri" /> is an absolute URI.-or-<paramref name="partUri" /> references a relationship part.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)">
      <summary>Returns the relative URI between two specified <see cref="T:System.IO.Packaging.PackagePart" /> URIs.</summary>
      <returns>The relative URI from <paramref name="sourcePartUri" /> to <paramref name="targetPartUri" />.</returns>
      <param name="sourcePartUri">The URI of the source part.</param>
      <param name="targetPartUri">The URI of the target part.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> or <paramref name="targetPartUri" /> is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri(System.Uri)">
      <summary>Returns the <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> from the <see cref="T:System.IO.Packaging.PackageRelationship" /> with a specified URI.</summary>
      <returns>The <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> from the relationship with the specified <paramref name="relationshipPartUri" />.</returns>
      <param name="relationshipPartUri">The URI of the relationship part to return the <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipPartUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipPartUri" /> is an absolute URI.-or-<paramref name="relationshipPartUri" /> syntax is not valid for a <see cref="T:System.IO.Packaging.PackagePart" />.-or-<paramref name="relationshipPartUri" /> does not reference a relationship part.-or-The <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> of the relationship part references another relationship part (not valid, see Remarks).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.IsRelationshipPartUri(System.Uri)">
      <summary>Returns a value that indicates whether a specified URI is the URI of a <see cref="T:System.IO.Packaging.PackageRelationship" /> part.</summary>
      <returns>true if <paramref name="partUri" /> identifies a <see cref="T:System.IO.Packaging.PackageRelationship" /> part; otherwise, false.</returns>
      <param name="partUri">The URI to check for a <see cref="T:System.IO.Packaging.PackageRelationship" /> part.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is an absolute URI.-or-<paramref name="partUri" /> is an invalid <see cref="T:System.IO.Packaging.PackagePart" /> syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)">
      <summary>Returns a part URI given a source part URI and a URI with a relative path to a target part.</summary>
      <returns>The URI of the target part resolved between the specified <paramref name="SourcePartUri" /> and the <paramref name="targetUri" /> parameters.</returns>
      <param name="sourcePartUri">The URI of the source part, or "/" to designate the <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <param name="targetUri">The relative URI to the target part.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> or <paramref name="targetUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourcePartUri" /> is not a valid part URI.-or-<paramref name="targetUri" /> is not a valid relative URI.</exception>
    </member>
    <member name="F:System.IO.Packaging.PackUriHelper.UriSchemePack">
      <summary>Defines the pack URI scheme name "pack".</summary>
      <returns>The pack URI scheme name string "pack".</returns>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary>Represents Digital Rights Management (DRM) information that is stored in an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary>Gets or sets the <see cref="T:System.Security.RightsManagement.CryptoProvider" /> for accessing the package's encrypted rights management data stream.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.CryptoProvider" /> for accessing the rights management information.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>Deletes the <see cref="T:System.Security.RightsManagement.UseLicense" /> for a specified user from the encrypted rights management data stream.</summary>
      <param name="userKey">The user of the <see cref="T:System.Security.RightsManagement.UseLicense" />   to be deleted.</param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary>Returns a dictionary collection of user and <see cref="T:System.Security.RightsManagement.UseLicense" /> key/value pairs from the encrypted rights management data stream.</summary>
      <returns>A collection of user and <see cref="T:System.Security.RightsManagement.UseLicense" /> key/value pairs that are contained in the rights managed protected package.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary>Returns the embedded <see cref="T:System.Security.RightsManagement.PublishLicense" /> from the encrypted rights management data stream.</summary>
      <returns>The embedded <see cref="T:System.Security.RightsManagement.PublishLicense" />; or null, if the package does not contain a <see cref="T:System.Security.RightsManagement.PublishLicense" />.</returns>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>Returns a specified user's embedded <see cref="T:System.Security.RightsManagement.UseLicense" /> from the encrypted rights management data stream.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.UseLicense" /> for the specified user; or null, if the package does not contain a <see cref="T:System.Security.RightsManagement.UseLicense" /> that matches the given <paramref name="userKey" />.</returns>
      <param name="userKey">The user or user group to return the <see cref="T:System.Security.RightsManagement.UseLicense" /> for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="userKey" /> parameter is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary>Saves a given <see cref="T:System.Security.RightsManagement.PublishLicense" /> to the encrypted rights management data stream.</summary>
      <param name="publishLicense">The publish license to store and embed in the package.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="publishLicense" /> parameter is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary>Saves a given <see cref="T:System.Security.RightsManagement.UseLicense" /> for a specified user to the encrypted rights management data stream.</summary>
      <param name="userKey">The user of the <see cref="T:System.Security.RightsManagement.UseLicense" />.</param>
      <param name="useLicense">The use license to store and embed in the package.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="userKey" /> or <paramref name="useLicense" /> parameter is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary> Specifies the event args provided to the <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" />. </summary>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary> Gets the digital signature being verified. </summary>
      <returns>The digital signature being verified.</returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary> Gets the signature verification error. </summary>
      <returns>The signature verification error.</returns>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary>Provides access and information for manipulating data stores in a <see cref="T:System.IO.Packaging.Package" />.    </summary>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary>Creates a new stream with a given name.</summary>
      <returns>The new stream with the specified <paramref name="name" />.</returns>
      <param name="name">The name for the new stream.</param>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary>Creates a new stream with a given name, <see cref="T:System.IO.Packaging.CompressionOption" />, and <see cref="T:System.IO.Packaging.EncryptionOption" />.</summary>
      <returns>The new stream with the specified <paramref name="name" />, <paramref name="compressionOption" />, and <paramref name="encryptionOption" />.</returns>
      <param name="name">The name for the new stream.</param>
      <param name="compressionOption">The compression option for the data stream.</param>
      <param name="encryptionOption">The encryption option for the data stream.</param>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary>Creates a new child <see cref="T:System.IO.Packaging.StorageInfo" /> with this <see cref="T:System.IO.Packaging.StorageInfo" /> as the parent.</summary>
      <returns>The new child data store.</returns>
      <param name="name">The name for the new child data store.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary>Deletes the stream with a specified name. </summary>
      <param name="name">The <see cref="T:System.IO.Packaging.StreamInfo" /> name of the stream to delete.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary>Deletes a specified sub-store.</summary>
      <param name="name">The name of the sub-store to delete.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary>Returns the <see cref="T:System.IO.Packaging.StreamInfo" /> instance with the given name.</summary>
      <returns>The stream with the specified <paramref name="name" />.</returns>
      <param name="name">The name of the <see cref="T:System.IO.Packaging.StreamInfo" /> instance to return.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary>Returns an array of the <see cref="T:System.IO.Packaging.StreamInfo" /> instances that are currently contained in this store.</summary>
      <returns>An array of the <see cref="T:System.IO.Packaging.StreamInfo" /> objects, each pointing to an I/O steam defined within this store.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary>Returns the child sub-store with a given name.</summary>
      <returns>The child sub-store with the specified <paramref name="name" />.</returns>
      <param name="name">The name of the sub-store to return.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary>Returns an array of the child sub-stores that are currently contained in this store.</summary>
      <returns>An array of <see cref="T:System.IO.Packaging.StorageInfo" /> objects, each pointing to a sub-store defined within this store.</returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary>Gets the name of the store.</summary>
      <returns>The name of this store.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary>Returns a value that indicates whether a given stream exists.</summary>
      <returns>true if a stream with the specified <paramref name="name" /> exists; otherwise, false.</returns>
      <param name="name">The <see cref="T:System.IO.Packaging.StreamInfo" /> name to check for.</param>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary>Returns a value that indicates whether a given child sub-store exists.</summary>
      <returns>true if a child sub-store with the specified <paramref name="name" /> exists; otherwise, false.</returns>
      <param name="name">The child <see cref="T:System.IO.Packaging.StorageInfo" /> name to check for.</param>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary>Provides access and information for manipulating I/O streams within a <see cref="T:System.IO.Packaging.Package" />.    </summary>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary>Gets the <see cref="T:System.IO.Packaging.CompressionOption" /> setting for the stream.</summary>
      <returns>The compression option setting for the package stream.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary>Gets the <see cref="T:System.IO.Packaging.EncryptionOption" /> setting for the stream.</summary>
      <returns>The encryption option setting for the package stream.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary>Returns a stream opened in a default <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />.</summary>
      <returns>The I/O stream opened in a default <see cref="T:System.IO.Packaging.Package" /> root <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />..</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary>Returns an I/O stream opened in a specified <see cref="T:System.IO.FileMode" />.</summary>
      <returns>The stream opened in the specified file <paramref name="mode" />.</returns>
      <param name="mode">The file mode in which to open the stream.</param>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Returns an I/O stream opened in a specified <see cref="T:System.IO.FileMode" /> and with a given <see cref="T:System.IO.FileAccess" />.</summary>
      <returns>The I/O stream opened in the specified <see cref="T:System.IO.FileMode" /> and with a given <see cref="T:System.IO.FileAccess" />.</returns>
      <param name="mode">The file mode in which to open the stream.</param>
      <param name="access">The file access mode in which to read or write to the stream.</param>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary>Gets the name of the stream.</summary>
      <returns>The name of this stream.</returns>
    </member>
    <member name="T:System.IO.Packaging.TargetMode">
      <summary>Specifies whether the target of a <see cref="T:System.IO.Packaging.PackageRelationship" /> is inside or outside the <see cref="T:System.IO.Packaging.Package" />. </summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.Internal">
      <summary>The relationship references a part that is inside the package. </summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.External">
      <summary>The relationship references a resource that is external to the package. </summary>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary>Specifies the result of a certificate or signature verification.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary>The verification was successful.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary>The signature is not valid.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary>The X.509 certificate is not available to verify the signature.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary>The X.509 certificate is not valid.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary>A reference relationship to the signature was not found.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary>The specified package or part has no signature.</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackage">
      <summary>Implements a derived subclass of the abstract <see cref="T:System.IO.Packaging.Package" /> base class—the <see cref="T:System.IO.Packaging.ZipPackage" /> class uses a ZIP archive as the container store. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackagePart">
      <summary>Represents a part that is stored in a <see cref="T:System.IO.Packaging.ZipPackage" />.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermission">
      <summary>The <see cref="T:System.Security.Permissions.MediaPermission" /> describes a set of security permissions that controls the ability for audio, image, and video media to work in a partial-trust Windows Presentation Foundation (WPF) application.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the audio permission level.</summary>
      <param name="permissionAudio">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio,System.Security.Permissions.MediaPermissionVideo,System.Security.Permissions.MediaPermissionImage)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the audio, video, and image permission levels.</summary>
      <param name="permissionAudio">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</param>
      <param name="permissionVideo">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</param>
      <param name="permissionImage">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionImage)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the image permission level.</summary>
      <param name="permissionImage">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionVideo)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the video permission level.</summary>
      <param name="permissionVideo">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying a permission state.</summary>
      <param name="state">An enumerated value of <see cref="T:System.Security.Permissions.PermissionState" />.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Audio">
      <summary>Gets the current value of the audio permission level.</summary>
      <returns>The audio permission level.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Image">
      <summary>Gets the current value of the image permission level.</summary>
      <returns>The image permission level.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <returns>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will be valid for the intersected permission.</returns>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the audio, image, and video permissions are all unrestricted; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Video">
      <summary>Gets the current value of the video permission level.</summary>
      <returns>The media permission level.</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.MediaPermission" /> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Audio">
      <summary>Gets or sets the audio permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.MediaPermission" />.</summary>
      <returns>A <see cref="T:System.Security.Permissions.MediaPermission" /> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Image">
      <summary>Gets or sets the image permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Video">
      <summary>Gets or sets the video permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAudio">
      <summary>Specifies the permission level for audio.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.NoAudio">
      <summary>Permission that denies all audio playback.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SiteOfOriginAudio">
      <summary>Permission that only allows audio playback of files that are located at the application's site of origin.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SafeAudio">
      <summary>Permission that allows safe, limited audio playback, which includes denying stream access to the image file.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.AllAudio">
      <summary>Permission that allows unrestricted audio playback.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionImage">
      <summary>Specifies the permission level for images.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.NoImage">
      <summary>Permission that denies all images to be displayed.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SiteOfOriginImage">
      <summary>Permission that only allows display of images that are located at the application's site of origin.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SafeImage">
      <summary>Permission that allows safe, limited image display, which includes denying stream access to the image file.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.AllImage">
      <summary>Permission that allows unrestricted image display.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionVideo">
      <summary>Specifies the permission level for video.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.NoVideo">
      <summary>Permission that denies all video playback.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SiteOfOriginVideo">
      <summary>Permission that only allows video playback of files that are located at the application's site of origin.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SafeVideo">
      <summary>Permission that allows safe, limited video playback, which includes denying stream access to the image file.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.AllVideo">
      <summary>Permission that allows unrestricted video playback.</summary>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermission">
      <summary>The <see cref="T:System.Security.Permissions.WebBrowserPermission" /> object controls the ability to create the WebBrowser control.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class by specifying a permission state.</summary>
      <param name="state">An enumerated value of <see cref="T:System.Security.Permissions.PermissionState" />.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.WebBrowserPermissionLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class by specifying the Web browser permission level.</summary>
      <param name="webBrowserPermissionLevel">An enumerated value of <see cref="T:System.Security.Permissions.WebBrowserPermissionLevel" />.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <returns>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will be valid for the intersected permission.</returns>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>true if the <see cref="P:System.Security.Permissions.WebBrowserPermission.Level" /> property is set to <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermission.Level">
      <summary>Gets or sets the current value of the Web browser permission level.</summary>
      <returns>The current value of the Web browser permission level.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.WebBrowserPermission" /> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class.</summary>
      <returns>A <see cref="T:System.Security.Permissions.WebBrowserPermission" /> corresponding to the security declaration.</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermissionAttribute.Level">
      <summary>Gets or sets the current Web browser permission level for the <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" />.</summary>
      <returns>The state of the current Web browser permission level.</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionLevel">
      <summary>Specifies the permission level for a Web browser.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.None">
      <summary>A Web browser that cannot navigate frames to HTML.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Safe">
      <summary>A Web browser that can safely navigate frames to HTML but with several restrictions.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted">
      <summary>A Web browser that can navigate without restrictions.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary>Specifies the method of rights management authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary>
            Windows authentication in a corporate domain environment.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary>
            Windows Live ID authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary>Either Windows authentication or Windows Live ID authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary>Implicit authentication to any requesting user.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary>Represents a right granted to a user to access information in a rights managed document.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentGrant" /> class that grants a specified <see cref="T:System.Security.RightsManagement.ContentUser" /> a specified <see cref="T:System.Security.RightsManagement.ContentRight" />.</summary>
      <param name="user">The user the access right is granted to.</param>
      <param name="right">The access right that is granted.</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentGrant" /> class that grants a specified <see cref="T:System.Security.RightsManagement.ContentUser" /> a specified <see cref="T:System.Security.RightsManagement.ContentRight" /> for a specified <see cref="T:System.DateTime" /> duration.</summary>
      <param name="user">The user the access right is granted to.</param>
      <param name="right">The access right that is granted.</param>
      <param name="validFrom">The starting date and time that the right begins.</param>
      <param name="validUntil">The ending date and time that the right expires.</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary>Gets the <see cref="T:System.Security.RightsManagement.ContentRight" /> that is granted.</summary>
      <returns>The access right that is granted to the <see cref="P:System.Security.RightsManagement.ContentGrant.User" />, as specified to the <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> constructor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary>Gets the user who is granted the access <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />.</summary>
      <returns>The user that the access <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> is granted to, as specified to the <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> constructor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary>Gets the starting date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> begins.</summary>
      <returns>The start date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> begins, or <see cref="T:System.DateTime" />.<see cref="F:System.DateTime.MinValue" /> if there is there is no starting limitation.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary>Gets the ending date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> expires.</summary>
      <returns>The end date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> expires, or <see cref="T:System.DateTime" />.<see cref="F:System.DateTime.MaxValue" /> if there is no ending limitation.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary>Specifies rights that can be granted to users for accessing content in a rights managed document.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary>The user can view the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary>The user can edit and encrypt the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary>The user can print the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary>The user can extract (copy and paste) the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary>The user can control programmed access to the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary>The user is the content owner.  The owner can edit and encrypt the protected content, and decrypt the signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary>The user can decrypt and view the rights specified in the signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary>The user can forward the protected content to another user.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary>The user can reply to the sender of the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary>The user can "reply all" to recipients of the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary>The user can digitally sign the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary>The user can edit the document that contains the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary>The user can export the protected content.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary>Represents a user or user-group for granting access to rights managed content.     </summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentUser" /> class.</summary>
      <param name="name">The user or group name.</param>
      <param name="authenticationType">The method for authentication.</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary>Gets an instance of the "Anyone" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</summary>
      <returns>An instance of the "Anyone" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary>Gets the <see cref="T:System.Security.RightsManagement.AuthenticationType" /> specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.AuthenticationType" /> specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Security.RightsManagement.ContentUser" /> is equivalent to another given instance.</summary>
      <returns>true if <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> are the same for both this user and the given user; otherwise, false.</returns>
      <param name="obj">The user instance to compare for equality.</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary>Returns a computed hash code based on the user <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />.</summary>
      <returns>A hash code computed from the user <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary>Returns a value that indicates whether the user is currently authenticated.</summary>
      <returns>true if the user is currently authenticated; otherwise, false.  The default is false until authenticated.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary>Gets the user or group name specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</summary>
      <returns>The user or group name specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary>Gets an instance of the "Owner" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</summary>
      <returns>An instance of the "Owner" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary>Provides digital rights management services for encrypting and decrypting protected content.     </summary>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary>Gets the cipher block size, in bytes. </summary>
      <returns>The cipher block size, in bytes.  The default block size for Advanced Encryption Standard (AES) is 8.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary>Gets a collection listing the rights that passed verification and that are granted to the user.</summary>
      <returns>A collection enumerating the rights that passed verification and that are granted to the user.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary>Gets a value that indicates whether the user has rights to decrypt. </summary>
      <returns>true if the <see cref="T:System.Security.RightsManagement.UseLicense" /> grants the user rights to decrypt; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary>Gets a value that indicates whether the user has rights to encrypt. </summary>
      <returns>true if the <see cref="T:System.Security.RightsManagement.UseLicense" /> grants the user rights to encrypt; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary>Gets a value that indicates whether <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> and <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> can accept buffers that are different block sizes in length.</summary>
      <returns>true if the buffer passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> can be a different length from the buffer passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />; otherwise, false if the buffers passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> and <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> must be the exact same length.  For Advanced Encryption Standard (AES) the default is true.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary>Decrypts cipher text to clear text. </summary>
      <returns>The decrypted clear text of <paramref name="cryptoText" />.</returns>
      <param name="cryptoText">The cipher text to decrypt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cipherText" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">Decryption right not granted.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.RightsManagement.CryptoProvider" />. </summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.RightsManagement.CryptoProvider" /> and optionally releases the managed resources.  </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary>Encrypts clear text to cipher text. </summary>
      <returns>Encrypted cipher text of the given <paramref name="clearText" />.</returns>
      <param name="clearText">The clear text content to encrypt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clearText" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">Encryption is not permitted.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary>Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary>Represents an immutable (read-only) pair of "Name" and "Description" strings.    </summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> class.</summary>
      <param name="name">The value for the locale <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> property.</param>
      <param name="description">The value for the locale <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> property.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="name" /> parameter or <paramref name="description" /> parameter is null.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary>Gets the locale description.</summary>
      <returns>The locale description.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary>Indicates whether the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of a given object match those of this <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</summary>
      <returns>true if the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of the given object match those of this instance; otherwise, false.</returns>
      <param name="obj">The object to compare the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of.</param>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary>Gets a computed hash code based on the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties.</summary>
      <returns>A computed hash code based on the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of this <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary>Gets the locale name.</summary>
      <returns>The locale name.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary>Represents a signed rights managed publish license.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.PublishLicense" /> class from a specified serialized and signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
      <param name="signedPublishLicense">A signed and serialized publish license.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signedPublishLicense" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">The license is invalid.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Attempts to acquire a <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in a specified <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in the specified <paramref name="secureEnvironment" />.</returns>
      <param name="secureEnvironment">The secure environment for license activation and binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">The authentication failed.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Attempts to acquire a <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in a specified <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in the specified <paramref name="secureEnvironment" />.</returns>
      <param name="secureEnvironment">The secure environment for license activation and binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">The authentication failed.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary>Gets the publisher-created content identifier. </summary>
      <returns>The publisher-created content identifier.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary>Returns a decrypted <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> version of this signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
      <returns>A decrypted, unsigned version of this license.</returns>
      <param name="cryptoProvider">The rights management service to use for decrypting the license.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cryptoProvider" /> is null.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary>Gets the contact name for the author or publisher of the content.</summary>
      <returns>The contact name for the author or publisher of the content.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary>Gets the contact URI for the author or publisher of the content.</summary>
      <returns>The contact uniform resource identifier (URI) for the author or publisher of the content.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary>Returns the serialized XrML string that was used to create this license.</summary>
      <returns>The serialized Extensible Rights Markup Language (XrML) string that was used to create this license.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary>Gets the URI to use for acquiring a <see cref="T:System.Security.RightsManagement.UseLicense" />.</summary>
      <returns>The URI to use for acquiring a <see cref="T:System.Security.RightsManagement.UseLicense" />.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary>Represents an error condition when a rights management operation cannot complete successfully.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class and sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store with information about the exception.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> and <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
      <param name="innerException">The exception instance that caused the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> and <see cref="P:System.Exception.Message" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />, <see cref="P:System.Exception.Message" /> and <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception instance that caused the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="P:System.Exception.Message" /> and <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception instance that caused this exception.</param>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary>Gets the <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> for the error.</summary>
      <returns>The failure code for the error.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store with the parameter name and information about the exception.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary>Specifies error conditions that can occur when performing a rights management operation. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary>Operation has competed successfully.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary>The license structure in one of the certificates is invalid. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary>When creating a bound license, an issuance license, not an end-use license, was specified.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary>Rights management signed digital certificate cannot be validated. (The signed certificate may have been tampered.)</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary>Encryption is not permitted. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary>The rights management version is incorrect.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary>The specified encoding type is invalid. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary>The numeric value specified is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary>The algorithm type specified is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary>The <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> cannot load.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary>The <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> cannot load.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary>Too many <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> instance have been created.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary>An object type passed is incompatible with this operation.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary>A library operation failed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary>The specified principal cannot be enabled</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary>Some information is missing.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary>An invalid constant was passed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary>The key type specified in a key/value pair is not supported.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary>A cryptographic operation that was requested is not supported. For example, passing an RMS encrypting object for decrypting purposes.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary>Clock rollback has been detected.  Protected content cannot be accessed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary>No instances of the requested attribute exist. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary>An unspecified error occurred.  Also thrown when an application runs in debug mode. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary>The rights management certificate chain is broken.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary>An operation is in violation of the rights management manifest policy.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary>The specified resource is not contained in any WORK node of the license.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary>The access condition is not matched to the enabling principal that is handed into the bind.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary>The current user does not satisfy the conditions defined in the End Use License (EUL).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary>The enabling principal does not match the issued principal of the End Use License (EUL).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary>The current machine is not defined within the rights managed group identity.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary>The specified library plug-in is not supported.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary>The license requires that a new revocation list must be acquired.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary>Either the environment or the enabling principal handle is invalid. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary>The specified rights group is not contained in the End Use License (EUL).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary>The End Use License (EUL) contains no WORK node.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary>No license or certificate exists at the specified index. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary>An End Use License (EUL) could not be acquired from the rights management server.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary>The content ID from the license does not match the content ID the license storage session</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary>The number of certificates has exceeded the maximum number allowed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary>The protected content is corrupted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary>The requested operation is already in progress.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary>A user name was not specified for the client session</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary>The specified license was not found. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary>Rights management cannot connect to the URI specified for the license server.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary>A required license is not available.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary>The computer must be activated before the user can be activated. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary>The user is not activated, or no Rights Account Certificate (RAC) was submitted and none was found in the license store to match the license associated with this session.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary>License activation failed; rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary>Asynchronous operation canceled, or a non-recoverable error has occurred.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary>The license server's maximum quota of End Use Licenses (EULs) has been reached.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary>Possible authentication error (HTTP error 401) returned by an Internet request. Or, the current user does not have valid domain credentials in a silent user activation attempt. Or, the certification server in silent user activation is not in the local intranet or trusted sites zone.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary>An installation operation failed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary>The Hardware ID (HID) used in a machine activation attempt is incorrectly formatted. Rights management services are not properly configured.  </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary>If a request is made for computer activation or a rights account certificate, receiving <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" /> indicates that the application should pass null into the ActServInfo parameter</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary>RMS Server email address verification failed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary>The current user was not found in the Active Directory (AD) for certification under Windows authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary>Rights managed content is corrupted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary>The Rights Management server does not allow temporary certification of the current user.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary>The item requested to delete does not exist. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary>The specified metadata could net be set.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary>Certificate or license revocation information has not been set.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary>The time information specified is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary>The requested right was not specified when the content was published with rights management.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary>The current user credentials are not valid for acquiring a license.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary>The Rights Management Services template contains one or more errors.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary>The key length specified in a key/value pair is invalid.   </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary>The authorized time period defined in the issuance license template has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary>The Hardware ID (HID) used in a machine activation attempt is invalid. Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary>The user's email address cannot be verified.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary>Cannot open or publish content with restricted permissions because a debugger has been detected. </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary>The specified registry path is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary>The option specified has already been set.  </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary>The document does not contain an Owner License.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary>Represents a secure client session for user activation, license binding, and other rights management operations.</summary>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary>Gets the <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" /> specified when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> was created.</summary>
      <returns>The application manifest specified to the <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" /> method when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> is created.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary>Creates a secure client session given an application rights manifest, <see cref="T:System.Security.RightsManagement.AuthenticationType" />, and <see cref="T:System.Security.RightsManagement.UserActivationMode" />.</summary>
      <returns>A secure client session for activation, license binding, and other rights management operations.</returns>
      <param name="applicationManifest">The application rights manifest.</param>
      <param name="authentication">The method of authentication.</param>
      <param name="userActivationMode">The type of the user rights account certificate.</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary>Creates a secure client session for a specified user with a given rights manifest.</summary>
      <returns>A secure client session for activation, license binding, and other rights management operations.</returns>
      <param name="applicationManifest">The application rights manifest.</param>
      <param name="user">The user or user-group for granting access to rights managed content.</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary>Returns a list of the activated users.</summary>
      <returns>A list of the currently activated users.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary>Indicates whether a given user has been activated for accessing rights managed content.</summary>
      <returns>true if the given <paramref name="user" /> has been activated for accessing rights managed content; otherwise, false.</returns>
      <param name="user">The user or user-group for granting access to rights managed content.</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary>Removes the license activation for a specified user.</summary>
      <param name="user">The user to remove the license activation for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="user" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The given <paramref name="user" /> is not authenticated with either Windows authentication or Passport authentication.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary>Gets the user or user-group specified when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> was created. </summary>
      <returns>The user or user-group specified to the <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" /> method when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> was created.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary>Represents an unsigned rights managed <see cref="T:System.Security.RightsManagement.PublishLicense" /> or an unsigned <see cref="T:System.Security.RightsManagement.PublishLicense" /> template.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> class. </summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> class from a specified XrML publish-license template. </summary>
      <param name="publishLicenseTemplate">The Extensible Rights Markup Language (XrML) publish-license template to use to create this license.</param>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary>Gets or sets the publisher-created content identifier. </summary>
      <returns>The publisher-created rights-managed content identifier.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary>Gets a collection of assigned user rights.</summary>
      <returns>A collection of the assigned user rights that are provided in this license.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary>Gets a collection of name and description pairs.</summary>
      <returns>A collection of name and description pairs.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary>Gets or sets the content owner. </summary>
      <returns>The user who owns the published content.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary>Gets or sets the contact name for the author or publisher of the content.</summary>
      <returns>The contact name for the author or publisher of the content.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary>Gets or sets the contact URI for the author or publisher of the content.</summary>
      <returns>The contact uniform resource identifier (URI) for the author or publisher of the content.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary>Creates a signed <see cref="T:System.Security.RightsManagement.PublishLicense" /> and returns a <see cref="T:System.Security.RightsManagement.UseLicense" /> for the document author.</summary>
      <returns>The signed <see cref="T:System.Security.RightsManagement.PublishLicense" /> that is created by signing this <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</returns>
      <param name="secureEnvironment">The secure environment for license activation and binding.</param>
      <param name="authorUseLicense">A returned <see cref="T:System.Security.RightsManagement.UseLicense" /> for the document author.</param>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary>Returns a serialized template created from the XrML of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</summary>
      <returns>A serialized template created from the XrML of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary>Represents a license that enables access to protected rights managed content.    </summary>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UseLicense" /> class. </summary>
      <param name="useLicense">A use license in serialized Extensible Rights Markup Language (XrML) form.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="useLicense" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
        <paramref name="useLicense" /> is invalid.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary>Gets the application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.</summary>
      <returns>The application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Binds the license to a given <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <returns>A <see cref="T:System.Security.RightsManagement.CryptoProvider" /> instance if the license binding succeeded; otherwise, null.</returns>
      <param name="secureEnvironment">The environment to bind the license to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> is null.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary>Gets the content identifier created by the publisher.</summary>
      <returns>The content identifier created by the publisher.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary>Indicates if this license is equivalent to another given license.</summary>
      <returns>true if both licenses are the equivalent; otherwise, false.</returns>
      <param name="x">The license to compare.</param>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary>Returns the hash code associated with this license.</summary>
      <returns>A hash code for this license. </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary>Gets the owner of the license. </summary>
      <returns>The owner of the license. </returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary>Returns the serialized XrML string used to create this license.</summary>
      <returns>The serialized Extensible Rights Markup Language (XrML) string originally passed to the <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" /> constructor.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary>Specifies the type of user Rights Account Certificate to request for rights management activation.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary>A permanent Rights Account Certificate.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary>A temporary Rights Account Certificate.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary>Provides a base class for .NET Framework attributes that report the use scope of attached properties.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" /> class.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary>Specifies that an attached property is browsable only for elements that derive from a specified type.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> class, using the provided <paramref name="targetType" />.</summary>
      <param name="targetType">The intended type that scopes the use of the attached property.where this .NET Framework attribute applies.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework attribute is equal to a specified object.</summary>
      <returns>true if the specified <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> is equal to the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> to compare to the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework attribute.</summary>
      <returns>An unsigned 32-bit integer value.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary>Gets the base type that scopes the use of the attached property where this .NET Framework attribute applies.</summary>
      <returns>The requested <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary>Gets a unique type identifier for this <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework attribute.</summary>
      <returns>An object that is a unique identifier for the <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.</returns>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary>Specifies that an attached property is only browsable on an element that also has another specific  .NET Framework attribute applied to its class definition.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> class.</summary>
      <param name="attributeType">The <see cref="T:System.Type" /> of the  .NET Framework attribute that must also be applied on a class in order for the attached property to be browsable on the class where <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> is applied..</param>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary>Gets the type of the  .NET Framework attribute that must also be applied on a class.</summary>
      <returns>The  .NET Framework attribute type.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework attribute is equal to a specified object.</summary>
      <returns>true if the specified <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> is equal to the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> to compare to the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework attribute.</summary>
      <returns>An unsigned 32-bit integer value.</returns>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary>Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</summary>
      <returns>The coerced value (with appropriate type). </returns>
      <param name="d">The object that the property exists on. When the callback is invoked, the property system will pass this value.</param>
      <param name="baseValue">The new value of the property, prior to any coercion attempt.</param>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>Represents an object that participates in the dependency property system.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class. </summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>Clears the local value of a property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier. </summary>
      <param name="dp">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary>Clears the local value of a read-only property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />. </summary>
      <param name="key">The key for the dependency property to be cleared.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary>Coerces the value of the specified dependency property. This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="dp">The identifier for the dependency property to coerce.</param>
      <exception cref="T:System.InvalidOperationException">The specified <paramref name="dp" /> or its value were invalid or do not exist.</exception>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary>Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the CLR type of this instance. </summary>
      <returns>A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the CLR type of this instance. </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary>Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>true if the two instances are the same; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.DependencyObject" />  to compare to the current instance.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary>Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />. </summary>
      <returns>A specialized local value enumerator.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />. </summary>
      <returns>Returns the current effective value.</returns>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</param>
      <exception cref="T:System.InvalidOperationException">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary>Re-evaluates the effective value for the specified dependency property</summary>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</param>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary>Gets a value that indicates whether this instance is currently sealed (read-only).</summary>
      <returns>true if this instance is sealed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated. The specific dependency property that changed is reported in the event data. </summary>
      <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>Returns the local value of a dependency property, if it exists. </summary>
      <returns>Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</returns>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Sets the value of a dependency property without changing its value source. </summary>
      <param name="dp">The identifier of the dependency property to set.</param>
      <param name="value">The new local value.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Sets the local value of a dependency property, specified by its dependency property identifier. </summary>
      <param name="dp">The identifier of the dependency property to set.</param>
      <param name="value">The new local value.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary>Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property. </summary>
      <param name="key">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</param>
      <param name="value">The new local value.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary>Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</summary>
      <returns>true if the dependency property that is supplied should be value-serialized; otherwise, false.</returns>
      <param name="dp">The identifier for the dependency property that should be serialized.</param>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary>Implements an underlying type cache for all <see cref="T:System.Windows.DependencyObject" /> derived types.</summary>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary>Gets the <see cref="T:System.Windows.DependencyObjectType" /> of the immediate base class of the current <see cref="T:System.Windows.DependencyObjectType" />. </summary>
      <returns>The type of the base class.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary>Returns a <see cref="T:System.Windows.DependencyObjectType" /> that represents a given system (CLR) type.</summary>
      <returns>A <see cref="T:System.Windows.DependencyObjectType" /> that represents the system (CLR) type.</returns>
      <param name="systemType">The system (CLR) type to convert.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>A 32-bit signed integer hash code. </returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary>Gets a zero-based unique identifier for constant-time array lookup operations.</summary>
      <returns>An internal identifier.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary>Determines whether the specified object is an instance of the current <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>true if the class represented by the current <see cref="T:System.Windows.DependencyObjectType" /> is in the inheritance hierarchy of the <see cref="T:System.Windows.DependencyObject" /> passed as <paramref name="d" />; otherwise, false.</returns>
      <param name="dependencyObject">The object to compare with the current <see cref="T:System.Windows.DependencyObjectType" />.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary>Determines whether the current <see cref="T:System.Windows.DependencyObjectType" /> derives from the specified <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>true if the <paramref name="dependencyObjectType" /> parameter and the current <see cref="T:System.Windows.DependencyObjectType" /> represent types of classes, and the class represented by the current <see cref="T:System.Windows.DependencyObjectType" /> derives from the class represented by <paramref name="dependencyObjectType" />. Otherwise, false. This method also returns false if <paramref name="dependencyObjectType" /> and the current <see cref="T:System.Windows.DependencyObjectType" /> represent the same class.</returns>
      <param name="dependencyObjectType">The <see cref="T:System.Windows.DependencyObjectType" /> to compare.</param>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary>Gets the name of the represented common language runtime (CLR) system type. </summary>
      <returns>The name of the represented CLR system type.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary> Gets the common language runtime (CLR) system type represented by this <see cref="T:System.Windows.DependencyObjectType" />. </summary>
      <returns>The CLR system type represented by this <see cref="T:System.Windows.DependencyObjectType" />.</returns>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary>Adds another type as an owner of a dependency property that has already been registered.</summary>
      <returns>A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property. This identifier should be exposed by the adding class as a public static readonly field.</returns>
      <param name="ownerType">The type to add as an owner of this dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary>Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type. </summary>
      <returns>A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property. This identifier should be exposed by the adding class as a public static readonly field.</returns>
      <param name="ownerType">The type to add as owner of this dependency property.</param>
      <param name="typeMetadata">The metadata that qualifies the dependency property as it exists on the provided type.</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary>Gets the default metadata of the dependency property. </summary>
      <returns>The default metadata of the dependency property.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary>Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</summary>
      <returns>The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>Returns the metadata for this dependency property as it exists on a specified existing type. </summary>
      <returns>A property metadata object.</returns>
      <param name="forType">The specific type from which to retrieve the dependency property metadata.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary>Returns the metadata for this dependency property as it exists on the specified object instance. </summary>
      <returns>A property metadata object.</returns>
      <param name="dependencyObject">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary> Returns the metadata for this dependency property as it exists on a specified type. </summary>
      <returns>A property metadata object.</returns>
      <param name="dependencyObjectType">A specific object that records the dependency object type from which the dependency property metadata is desired.</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary>Gets an internally generated value that uniquely identifies the dependency property.</summary>
      <returns>A unique numeric identifier.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary>Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration. </summary>
      <returns>true if the specified value is the registered property type or an acceptable derived type; otherwise, false.</returns>
      <param name="value">The value to check.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary>Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type. </summary>
      <returns>true if the value is acceptable and is of the correct type or a derived type; otherwise, false.</returns>
      <param name="value">The value to check.</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary>Gets the name of the dependency property. </summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</summary>
      <param name="forType">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</param>
      <param name="typeMetadata">The metadata to apply to the dependency property on the overriding type.</param>
      <exception cref="T:System.InvalidOperationException">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</exception>
      <exception cref="T:System.ArgumentException">Metadata was already established for the dependency property as it exists on the provided type.</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary>Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration. You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</summary>
      <param name="forType">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</param>
      <param name="typeMetadata">The metadata to apply to the dependency property on the overriding type.</param>
      <param name="key">The access key for a read-only dependency property. </param>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary>Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property. </summary>
      <returns>The type of the object that registered the property or added itself as owner of the property.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary>Gets the type that the dependency property uses for its value. </summary>
      <returns>The <see cref="T:System.Type" /> of the property value.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary>Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</summary>
      <returns>true if the dependency property is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>Registers a dependency property with the specified property name, property type, and owner type. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register. The name must be unique within the registration namespace of the owner type.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers a dependency property with the specified property name, property type, owner type, and property metadata. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
      <param name="validateValueCallback">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>Registers an attached property with the specified property name, property type, and owner type. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers an attached property with the specified property name, property type, owner type, and property metadata. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property. This can include the default value as well as other characteristics.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property. This can include the default value as well as other characteristics.</param>
      <param name="validateValueCallback">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers a read-only attached property, with the specified property type, owner type, and property metadata. </summary>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback. </summary>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property.</param>
      <param name="validateValueCallback">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary> Registers a read-only dependency property, with the specified property type, owner type, and property metadata. </summary>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback. </summary>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
      <param name="validateValueCallback">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary> Returns the string representation of the dependency property. </summary>
      <returns>The string representation of the dependency property.</returns>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>Specifies a static value that is used by the WPF property system rather than null to indicate that the property exists, but does not have its value set by the property system.</summary>
      <returns>An unset value. This is effectively the result of a call to the <see cref="T:System.Object" /> constructor.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary>Gets the value validation callback for the dependency property. </summary>
      <returns>The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>Provides data for various property changed events. Typically these events report effective value changes in the value of a read-only dependency property. Another usage is as part of a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation.</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> class.</summary>
      <param name="property">The identifier for the dependency property that changed.</param>
      <param name="oldValue">The value of the property before the change reported by the relevant event or state change.</param>
      <param name="newValue">The value of the property after the change reported by the relevant event or state change.</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary>Determines whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <returns>true if the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, false.</returns>
      <param name="obj">The object to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determines whether the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <returns>true if the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, false.</returns>
      <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary>Gets a hash code  for this <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />. </summary>
      <returns>A signed 32-bit integer hash code. </returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>Gets the value of the property after the change.</summary>
      <returns>The property value after the change.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>Gets the value of the property before the change.</summary>
      <returns>The property value before the change.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects have the same value.</summary>
      <returns>true if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are equivalent; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects are different.</summary>
      <returns>true if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are different; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>Gets the identifier for the dependency property where the value change occurred.</summary>
      <returns>The identifier field of the dependency property where the value change occurred.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>Represents the method that will handle events raised when a <see cref="T:System.Windows.DependencyProperty" /> is changed on a particular <see cref="T:System.Windows.DependencyObject" /> implementation.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary>Provides a dependency property identifier for limited write access to a read-only dependency property.</summary>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary>Gets the dependency property identifier associated with this specialized read-only dependency property identifier. </summary>
      <returns>The relevant dependency property identifier.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</summary>
      <param name="forType">The type on which this dependency property exists and metadata should be overridden.</param>
      <param name="typeMetadata">Metadata supplied for this type.</param>
      <exception cref="T:System.InvalidOperationException">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</exception>
      <exception cref="T:System.ArgumentException">Metadata was already established for the property as it exists on the provided type.</exception>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>This type supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary>Converts instances of <see cref="T:System.Windows.Expression" />  to and from other types. </summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ExpressionConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert from a source object to an <see cref="T:System.Windows.Expression" /> object. </summary>
      <returns>Always false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you wish to convert from.</param>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an <see cref="T:System.Windows.Expression" /> object to a specific destination type. </summary>
      <returns>Always false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you wish to convert to.</param>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the provided value to the <see cref="T:System.Windows.Expression" /> type. </summary>
      <returns>Always throws an exception and returns null.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the provided <see cref="T:System.Windows.Expression" /> object to the specified type.</summary>
      <returns>Always throws an exception and returns null.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you wish to convert to.</param>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary>Defines an object that has a modifiable state and a read-only (frozen) state. Classes that derive from <see cref="T:System.Windows.Freezable" /> provide detailed change notification, can be made immutable, and can clone themselves. </summary>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Windows.Freezable" /> derived class. </summary>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary>Gets a value that indicates whether the object can be made unmodifiable. </summary>
      <returns>true if the current object can be made unmodifiable or is already unmodifiable; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary>Occurs when the <see cref="T:System.Windows.Freezable" /> or an object it contains is modified. </summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary>Creates a modifiable clone of the <see cref="T:System.Windows.Freezable" />, making deep copies of the object's values. When copying the object's dependency properties, this method copies expressions (which might no longer resolve) but not animations or their current values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary>Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values. </summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary>Creates a modifiable clone (deep copy) of the <see cref="T:System.Windows.Freezable" /> using its current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes the instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using current property values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to be cloned.</param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Freezable" /> class. </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary>When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class. </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary>Makes the current object unmodifiable and sets its <see cref="P:System.Windows.Freezable.IsFrozen" /> property to true. </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" /> cannot be made unmodifiable. </exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary>If the <paramref name="isChecking" /> parameter is true, this method indicates whether the specified <see cref="T:System.Windows.Freezable" /> can be made unmodifiable. If the <paramref name="isChecking" /> parameter is false, this method attempts to make the specified <see cref="T:System.Windows.Freezable" /> unmodifiable and indicates whether the operation succeeded.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if the specified <see cref="T:System.Windows.Freezable" /> can be made unmodifiable, or false if it cannot be made unmodifiable. If <paramref name="isChecking" /> is false, this method returns true if the specified <see cref="T:System.Windows.Freezable" /> is now unmodifiable, or false if it cannot be made unmodifiable. </returns>
      <param name="freezable">The object to check or make unmodifiable. If <paramref name="isChecking" /> is true, the object is checked to determine whether it can be made unmodifiable. If <paramref name="isChecking" /> is false, the object is made unmodifiable, if possible.</param>
      <param name="isChecking">true to return an indication of whether the object can be frozen (without actually freezing it); false to actually freeze the object.</param>
      <exception cref="T:System.InvalidOperationException">When <paramref name="isChecking" /> is false, the attempt to make <paramref name="freezable" /> unmodifiable was unsuccessful; the object is now in an unknown state (it might be partially frozen).  </exception>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary>Makes the <see cref="T:System.Windows.Freezable" /> object unmodifiable or tests whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if the <see cref="T:System.Windows.Freezable" /> can be made unmodifiable, or false if it cannot be made unmodifiable. If <paramref name="isChecking" /> is false, this method returns true if the if the specified <see cref="T:System.Windows.Freezable" /> is now unmodifiable, or false if it cannot be made unmodifiable. </returns>
      <param name="isChecking">true to return an indication of whether the object can be frozen (without actually freezing it); false to actually freeze the object.</param>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary>Creates a frozen copy of the <see cref="T:System.Windows.Freezable" />, using base (non-animated) property values. Because the copy is frozen, any frozen sub-objects are copied by reference. </summary>
      <returns>A frozen copy of the <see cref="T:System.Windows.Freezable" />. The copy's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is set to true. </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" /> cannot be frozen because it contains expressions or animated properties.</exception>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The instance to copy.</param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary>Creates a frozen copy of the <see cref="T:System.Windows.Freezable" /> using current property values. Because the copy is frozen, any frozen sub-objects are copied by reference.</summary>
      <returns>A frozen copy of the <see cref="T:System.Windows.Freezable" />. The copy's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is set to true.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If the object has animated dependency properties, their current animated values are copied.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to copy and freeze.</param>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary>Gets a value that indicates whether the object is currently modifiable. </summary>
      <returns>true if the object is frozen and cannot be modified; false if the object can be modified.</returns>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary>Called when the current <see cref="T:System.Windows.Freezable" /> object is modified. </summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Ensures that appropriate context pointers are established for a <see cref="T:System.Windows.DependencyObjectType" /> data member that has just been set.</summary>
      <param name="oldValue">The previous value of the data member.</param>
      <param name="newValue">The current value of the data member.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="oldValue">The previous value of the data member.</param>
      <param name="newValue">The current value of the data member.</param>
      <param name="property">The property that changed. </param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Overrides the <see cref="T:System.Windows.DependencyObject" /> implementation of <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> to also invoke any <see cref="E:System.Windows.Freezable.Changed" /> handlers in response to a changing dependency property of type <see cref="T:System.Windows.Freezable" />.</summary>
      <param name="e">Event data that contains information about which property changed, and its old and new values.</param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary>Ensures that the <see cref="T:System.Windows.Freezable" /> is being accessed from a valid thread. Inheritors of <see cref="T:System.Windows.Freezable" /> must call this method at the beginning of any API that reads data members that are not dependency properties.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary>Raises the <see cref="E:System.Windows.Freezable.Changed" /> event for the <see cref="T:System.Windows.Freezable" /> and invokes its <see cref="M:System.Windows.Freezable.OnChanged" /> method. Classes that derive from <see cref="T:System.Windows.Freezable" /> should call this method at the end of any API that modifies class members that are not stored as dependency properties.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary>Verifies that the <see cref="T:System.Windows.Freezable" /> is not frozen and that it is being accessed from a valid threading context. <see cref="T:System.Windows.Freezable" /> inheritors should call this method at the beginning of any API that writes to data members that are not dependency properties. </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" /> instance is frozen and cannot have its members written to.</exception>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary>Describes the width, height, and location of an integer rectangle.</summary>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of an <see cref="T:System.Windows.Int32Rect" /> with the specified <see cref="P:System.Windows.Int32Rect.X" /> and <see cref="P:System.Windows.Int32Rect.Y" /> coordinates and the specified <see cref="P:System.Windows.Int32Rect.Width" /> and <see cref="P:System.Windows.Int32Rect.Height" />. </summary>
      <param name="x">The <see cref="P:System.Windows.Int32Rect.X" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the x-coordinate of the top-left corner of the rectangle.</param>
      <param name="y">The <see cref="P:System.Windows.Int32Rect.Y" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the y-coordinate of the top-left corner of the rectangle.</param>
      <param name="width">The <see cref="P:System.Windows.Int32Rect.Width" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the width of the rectangle.</param>
      <param name="height">The <see cref="P:System.Windows.Int32Rect.Height" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the height of the rectangle.</param>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary>Gets the empty rectangle, a special value that represents a rectangle with no position or area. </summary>
      <returns>An empty rectangle with no position or area.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary>Determines whether the specified rectangle is equal to this rectangle.</summary>
      <returns>true if o is an <see cref="T:System.Windows.Int32Rect" /> and the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> as this rectangle; otherwise, false.</returns>
      <param name="o">The object to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary>Determines whether the specified rectangle is equal to this rectangle.</summary>
      <returns>true if both rectangles have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> as this rectangle; otherwise, false.</returns>
      <param name="value">The rectangle to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Determines whether the specified rectangles are equal.</summary>
      <returns>true if int32Rect1 and int32Rect2 have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" />; otherwise, false.</returns>
      <param name="int32Rect1">The first rectangle to compare.</param>
      <param name="int32Rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary>Creates a hash code from this rectangle's <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> values.</summary>
      <returns>This rectangle's hash code.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary>Gets or sets the height of the rectangle.</summary>
      <returns>The height of the rectangle. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary>Gets a value indicating whether the rectangle is empty.</summary>
      <returns>true if the rectangle is empty; otherwise, false. The default value is true.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Compares two rectangles for exact equality.</summary>
      <returns>true if int32Rect1 and int32Rect2 have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" />; otherwise, false.</returns>
      <param name="int32Rect1">The first rectangle to compare.</param>
      <param name="int32Rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Compares two rectangles for inequality.</summary>
      <returns>false if int32Rect1 and int32Rect2 have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" />; otherwise, if all of these values are the same, then true.</returns>
      <param name="int32Rect1">The first rectangle to compare.</param>
      <param name="int32Rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary>Creates an <see cref="T:System.Windows.Int32Rect" /> structure from the specified <see cref="T:System.String" /> representation.</summary>
      <returns>The equivalent <see cref="T:System.Windows.Int32Rect" /> structure.</returns>
      <param name="source">A string representation of an <see cref="T:System.Windows.Int32Rect" />.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <returns>The value of the current instance in the specified format.</returns>
      <param name="format">The format to use.</param>
      <param name="provider">The provider to use to format the value</param>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>A string containing the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> values of this <see cref="T:System.Windows.Int32Rect" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Int32Rect" /> based on the supplied <see cref="T:System.IFormatProvider" />.</summary>
      <returns>A string representation of this instance of <see cref="T:System.Windows.Int32Rect" />.</returns>
      <param name="provider">The format provider to use. If provider is null, the current culture is used.</param>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary>Gets or sets the width of the rectangle.</summary>
      <returns>The width of the rectangle. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary>Gets or sets the x-coordinate of the top-left corner of the rectangle.</summary>
      <returns>The x-coordinate of the top-left corner of the rectangle. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary>Gets or sets the y-coordinate of the top-left corner of the rectangle.</summary>
      <returns>The y-coordinate of the top-left corner of the rectangle. The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary>Converts instances of other types to and from an <see cref="T:System.Windows.Int32Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Int32RectConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of an <see cref="T:System.Windows.Int32Rect" />.  </summary>
      <returns>true if the type can be converted to an <see cref="T:System.Windows.Int32Rect" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of an <see cref="T:System.Windows.Int32Rect" /> can be converted to a different type.</summary>
      <returns>true if this <see cref="T:System.Windows.Int32Rect" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Int32Rect" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified type to an <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>The <see cref="T:System.Windows.Int32Rect" /> created from converting <paramref name="value" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to an <see cref="T:System.Windows.Int32Rect" />.</exception>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an <see cref="T:System.Windows.Int32Rect" /> to a specified type.</summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Int32Rect" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Int32Rect" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Int32Rect" /> to.</param>
      <exception cref="T:System.NotSupportedException">Thrown if <paramref name="value" /> is null or is not an <see cref="T:System.Windows.Int32Rect" />, or if the <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Receives events from the centralized event manager.</summary>
      <returns>true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.</returns>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary>Represents a property identifier and the property value for a locally set dependency property.</summary>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.Windows.LocalValueEntry" /> instances are equal.</summary>
      <returns>This <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> implementation compares the values of the <see cref="P:System.Windows.LocalValueEntry.Property" />, and potentially compares the values of <see cref="P:System.Windows.LocalValueEntry.Value" />. The <see cref="P:System.Windows.LocalValueEntry.Property" /> component of a <see cref="T:System.Windows.LocalValueEntry" /> is a value type, so will always be a bitwise comparison. For the <see cref="P:System.Windows.LocalValueEntry.Value" /> component, this implementation employs a bitwise comparison if it is a value type. For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it just uses the == operator on the two values internally. By default, this would be a reference equality of the values and thus the equality of the entire <see cref="T:System.Windows.LocalValueEntry" /> would become a reference equality. </returns>
      <param name="obj">The <see cref="T:System.Windows.LocalValueEntry" /> to compare with the current <see cref="T:System.Windows.LocalValueEntry" />.</param>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.LocalValueEntry" />.</summary>
      <returns>A signed 32-bit integer value.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>Compares the specified <see cref="T:System.Windows.LocalValueEntry" /> instances to determine whether they are the same.</summary>
      <returns>true if the <paramref name="obj1" /> <see cref="T:System.Windows.LocalValueEntry" /> is equal to the <paramref name="obj2" /> <see cref="T:System.Windows.LocalValueEntry" />; otherwise, false.</returns>
      <param name="obj1">The first instance to compare.</param>
      <param name="obj2">The second instance to compare.</param>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>Compares the specified <see cref="T:System.Windows.LocalValueEnumerator" /> instances to determine whether they are different.</summary>
      <returns>This implementation compares the values of the <see cref="P:System.Windows.LocalValueEntry.Property" /> and <see cref="P:System.Windows.LocalValueEntry.Value" /> components of a <see cref="T:System.Windows.LocalValueEntry" />. The <see cref="P:System.Windows.LocalValueEntry.Property" /> component of a <see cref="T:System.Windows.LocalValueEntry" /> is always a value type, so this comparison will always be a bitwise comparison. For the <see cref="P:System.Windows.LocalValueEntry.Value" /> component, this implementation employs a bitwise comparison if it is a value type. For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it uses the == operator on the two values internally. By default, this is a reference equality of the values. </returns>
      <param name="obj1">The first instance to compare.</param>
      <param name="obj2">The second instance to compare.</param>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary>Gets the identifier for the locally set dependency property that is represented by this entry. </summary>
      <returns>The identifier for the locally set dependency property.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary>Gets the value of the locally set dependency property. </summary>
      <returns>The value of the locally set dependency property as an object. </returns>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary>Provides enumeration support for the local values of any dependency properties that exist on a <see cref="T:System.Windows.DependencyObject" />.</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary>Gets the number of items that are represented in the collection. </summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current <see cref="T:System.Windows.LocalValueEntry" /> in the collection.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary>Determines whether the provided <see cref="T:System.Windows.LocalValueEnumerator" /> is equivalent to this <see cref="T:System.Windows.LocalValueEnumerator" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the current <see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.LocalValueEnumerator" /> to compare with the current <see cref="T:System.Windows.LocalValueEnumerator" />.</param>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Windows.LocalValueEnumerator" />.</summary>
      <returns>A 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>Compares whether two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects are the same.</summary>
      <returns>true if the <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, false.</returns>
      <param name="obj1">The first object to compare.</param>
      <param name="obj2">The second object to compare.</param>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>Compares two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects to determine whether they are not the same.</summary>
      <returns>true if the instances are not equal; otherwise, false.</returns>
      <param name="obj1">The first object to compare.</param>
      <param name="obj2">The second object to compare.</param>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this members, see <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary>Implements base WPF support for the <see cref="T:System.Windows.Markup.INameScope" /> methods that store or retrieve name-object mappings into a particular XAML namescope. Adds attached property support to make it simpler to get or set XAML namescope names dynamically at the element level..</summary>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.NameScope" /> class.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds an item to the collection.</summary>
      <param name="item">A <see cref="T:System.Collections.Generic.KeyValuePair`2" />  (key is <see cref="T:System.String" />, value is <see cref="T:System.Object" />) that represents the name mapping to add to the XAML namescope.</param>
      <exception cref="T:System.ArgumentException">Either or both components of <paramref name="item" /> are null.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary>Adds an item to the collection.</summary>
      <param name="key">The string key, which is the name of the XAML namescope mapping to add.</param>
      <param name="value">The object value, which is the object reference of the XAML namescope mapping to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether the collection contains a specified item. </summary>
      <returns>true if the specified <see cref="T:System.Collections.Generic.KeyValuePair`2" /> identifies an existing mapping in this <see cref="T:System.Windows.NameScope" /> . false if the specified <see cref="T:System.Collections.Generic.KeyValuePair`2" /> does not exist in the current <see cref="T:System.Windows.NameScope" />.</returns>
      <param name="item">The item to find in the collection, specified as a <see cref="T:System.Collections.Generic.KeyValuePair`2" />  (key is <see cref="T:System.String" />, value is <see cref="T:System.Object" />).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary>Returns whether a provided name already exists in this <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>true if the specified <paramref name="key" /> identifies a name for an existing mapping in this <see cref="T:System.Windows.NameScope" />. false if the specified <paramref name="key" /> does not exist in the current <see cref="T:System.Windows.NameScope" />.</returns>
      <param name="key">The string key to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at a particular array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary>Returns the number of items in the collection of mapped names in this <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary>Returns the corresponding object in the XAML namescope maintained by this <see cref="T:System.Windows.NameScope" />, based on a provided name string.</summary>
      <returns>The requested object that is mapped with <paramref name="name" />. Can return null if <paramref name="name" /> was provided as null or empty string, or if no matching object was found.</returns>
      <param name="name">Name portion of an existing mapping to retrieve the object portion for.</param>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary>Provides the attached property get accessor for the <see cref="P:System.Windows.NameScope.NameScope" /> attached property.</summary>
      <returns>A XAML namescope, as an <see cref="T:System.Windows.Markup.INameScope" /> instance.</returns>
      <param name="dependencyObject">The object to get the XAML namescope from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is null.</exception>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary>Gets or sets the item with the specified key. </summary>
      <returns>The value of the object mapped by the XAML name provided as <paramref name="key" />.</returns>
      <param name="key">The string name for the XAML name mapping to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is provided as null.-or-<paramref name="value" /> is provided as null for a set operation.</exception>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary>Gets a collection of the keys in the <see cref="T:System.Windows.NameScope" /> dictionary.</summary>
      <returns>A collection of the keys in the <see cref="T:System.Windows.NameScope" /> dictionary.</returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary>Gets or sets dynamically attached <see cref="T:System.Windows.NameScope" /> instances. </summary>
      <returns>The attached name scope on a particular object.</returns>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary>Identifies the <see cref="P:System.Windows.NameScope.NameScope" />  attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.NameScope.NameScope" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary>Registers a new name-object pair into the current XAML namescope.</summary>
      <param name="name">The name to use for mapping the given object.</param>
      <param name="scopedElement">The object to be mapped to the provided name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="scopedElement" /> was provided as null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> was provided as empty string- or -<paramref name="name" /> provided was rejected by the parser, because it contained characters that are invalid for a XAML name- or -<paramref name="name" /> provided would result in a duplicate name registration.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the specific object from the collection.</summary>
      <returns>true if item was successfully removed from the collection, otherwise false. Also returns false if the item was not found in the collection.</returns>
      <param name="item">The object to remove from the collection, specified as a <see cref="T:System.Collections.Generic.KeyValuePair`2" />  (key is <see cref="T:System.String" />, value is <see cref="T:System.Object" />).</param>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary>Removes a mapping for a specified name from the collection.</summary>
      <returns>true if item was successfully removed from the collection, otherwise false. Also returns false if the item was not found in the collection.</returns>
      <param name="key">The string key, which is the name of the XAML namescope mapping to remove.</param>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary>Provides the attached property set accessor for the <see cref="P:System.Windows.NameScope.NameScope" /> attached property.</summary>
      <param name="dependencyObject">Object to change XAML namescope for.</param>
      <param name="value">The new XAML namescope, using an interface cast.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is null.</exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator that iterates through a collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator that iterates through a collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the <see cref="T:System.Windows.NameScope" /> contains a mapping for the name provided as <paramref name="key" />. Otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, a null object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary>Removes a name-object mapping from the XAML namescope.</summary>
      <param name="name">The name of the mapping to remove.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> was provided as empty string.- or -<paramref name="name" /> provided had not been registered.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary>Gets a collection of the values in the <see cref="T:System.Windows.NameScope" /> dictionary.</summary>
      <returns>A collection of the values in the <see cref="T:System.Windows.NameScope" /> dictionary.</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary>Represents an x- and y-coordinate pair in two-dimensional space.</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>Creates a new <see cref="T:System.Windows.Point" /> structure that contains the specified coordinates. </summary>
      <param name="x">The x-coordinate of the new <see cref="T:System.Windows.Point" /> structure. </param>
      <param name="y">The y-coordinate of the new <see cref="T:System.Windows.Point" /> structure. </param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary>Adds a <see cref="T:System.Windows.Vector" /> to a <see cref="T:System.Windows.Point" /> and returns the result as a <see cref="T:System.Windows.Point" /> structure.</summary>
      <returns>Returns the sum of <paramref name="point" /> and <paramref name="vector" />.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> structure to add.</param>
      <param name="vector">The <see cref="T:System.Windows.Vector" /> structure to add. </param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Point" /> and whether it contains the same coordinates as this <see cref="T:System.Windows.Point" />. </summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Point" /> and contains the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values as this <see cref="T:System.Windows.Point" />; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality.</summary>
      <returns>true if both <see cref="T:System.Windows.Point" /> structures contain the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values; otherwise, false.</returns>
      <param name="value">The point to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality. </summary>
      <returns>true if <paramref name="point1" /> and <paramref name="point2" /> contain the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values; otherwise, false.</returns>
      <param name="point1">The first point to compare.</param>
      <param name="point2">The second point to compare.</param>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.Point" />.</summary>
      <returns>The hash code for this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>Transforms the specified <see cref="T:System.Windows.Point" /> structure by the specified <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The transformed point. </returns>
      <param name="point">The point to transform.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary>Offsets a point's <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> coordinates by the specified amounts.</summary>
      <param name="offsetX">The amount to offset the point's<see cref="P:System.Windows.Point.X" /> coordinate. </param>
      <param name="offsetY">The amount to offset thepoint's <see cref="P:System.Windows.Point.Y" /> coordinate.</param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary>Translates the specified <see cref="T:System.Windows.Point" /> by the specified <see cref="T:System.Windows.Vector" /> and returns the result.</summary>
      <returns>The result of translating the specified point by the specified vector.</returns>
      <param name="point">The point to translate.</param>
      <param name="vector">The amount by which to translate <paramref name="point" />.</param>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality. </summary>
      <returns>true if both the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> coordinates of <paramref name="point1" /> and <paramref name="point2" /> are equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Point" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Point" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary>Creates a <see cref="T:System.Windows.Vector" /> structure with an <see cref="P:System.Windows.Vector.X" /> value equal to the point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Vector.Y" /> value equal to the point's <see cref="P:System.Windows.Point.Y" /> value.</summary>
      <returns>A vector with an <see cref="P:System.Windows.Vector.X" /> value equal to the point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Vector.Y" /> value equal to the point's <see cref="P:System.Windows.Point.Y" /> value.</returns>
      <param name="point">The point to convert.</param>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary>Creates a <see cref="T:System.Windows.Size" /> structure with a <see cref="P:System.Windows.Size.Width" /> equal to this point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Size.Height" /> equal to this point's <see cref="P:System.Windows.Point.Y" /> value.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> structure with a <see cref="P:System.Windows.Size.Width" /> equal to this point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Size.Height" /> equal to this point's <see cref="P:System.Windows.Point.Y" /> value.</returns>
      <param name="point">The point to convert.</param>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for inequality. </summary>
      <returns>true if <paramref name="point1" /> and <paramref name="point2" /> have different <see cref="P:System.Windows.Point.X" /> or <see cref="P:System.Windows.Point.Y" /> coordinates; false if <paramref name="point1" /> and <paramref name="point2" /> have the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> coordinates.</returns>
      <param name="point1">The first point to compare.</param>
      <param name="point2">The second point to compare.</param>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>Transforms the specified <see cref="T:System.Windows.Point" /> by the specified <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>The result of transforming the specified point using the specified matrix.</returns>
      <param name="point">The point to transform. </param>
      <param name="matrix">The transformation matrix. </param>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Point" /> from another specified <see cref="T:System.Windows.Point" /> and returns the difference as a <see cref="T:System.Windows.Vector" />.</summary>
      <returns>The difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
      <param name="point1">The point from which <paramref name="point2" /> is subtracted.</param>
      <param name="point2">The point to subtract from <paramref name="point1" />.</param>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Vector" /> from the specified <see cref="T:System.Windows.Point" /> and returns the resulting <see cref="T:System.Windows.Point" />.</summary>
      <returns>The difference between <paramref name="point" /> and <paramref name="vector" />.</returns>
      <param name="point">The point from which <paramref name="vector" /> is subtracted. </param>
      <param name="vector">The vector to subtract from <paramref name="point1" /></param>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary>Constructs a <see cref="T:System.Windows.Point" /> from the specified <see cref="T:System.String" />.</summary>
      <returns>The equivalent <see cref="T:System.Windows.Point" /> structure. </returns>
      <param name="source">A string representation of a point.</param>
      <exception cref="T:System.FormatException">
        <paramref name="source" /> is not composed of two comma- or space-delimited double values.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain two numbers.-or-<paramref name="source" /> contains too many delimiters.</exception>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Point" /> from another specified <see cref="T:System.Windows.Point" /> and returns the difference as a <see cref="T:System.Windows.Vector" />.</summary>
      <returns>The difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
      <param name="point1">The point from which <paramref name="point2" /> is subtracted. </param>
      <param name="point2">The point to subtract from <paramref name="point1" />.</param>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Vector" /> from the specified <see cref="T:System.Windows.Point" /> and returns the resulting <see cref="T:System.Windows.Point" />. </summary>
      <returns>The difference between <paramref name="point" /> and <paramref name="vector" />.</returns>
      <param name="point">The point from which <paramref name="vector" /> is subtracted.</param>
      <param name="vector">The <paramref name="vector" /> to subtract from <paramref name="point" />.</param>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format. </returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure.  The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>Gets or sets the <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>The <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure.  The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary>Converts instances of other types to and from a <see cref="T:System.Windows.Point" />. </summary>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PointConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Point" />.  </summary>
      <returns>true if the type can be converted to a <see cref="T:System.Windows.Point" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of a <see cref="T:System.Windows.Point" /> can be converted to a different type. </summary>
      <returns>true if this <see cref="T:System.Windows.Point" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Point" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Point" />. </summary>
      <returns>The <see cref="T:System.Windows.Point" /> created from converting <paramref name="value" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Point" />.</exception>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Point" /> to a specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Point" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Point" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Point" /> to.</param>
      <exception cref="T:System.NotSupportedException">Thrown if <paramref name="value" /> is null or is not a <see cref="T:System.Windows.Point" />, or if the <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>Represents the callback that is invoked when the effective property value of a dependency property changes.</summary>
      <param name="d">The <see cref="T:System.Windows.DependencyObject" /> on which the property has changed value.</param>
      <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with. </summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class. </summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with a specified default value for the dependency property that this metadata will be applied to. </summary>
      <param name="defaultValue">The default value to specify for a dependency property, usually provided as a value of some specific type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; see Remarks.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified default value and <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference. </summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; see Remarks.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified default value and callbacks. </summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
      <param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; see Remarks.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference. </summary>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary>Gets or sets a reference to a <see cref="T:System.Windows.CoerceValueCallback" /> implementation specified in this metadata.</summary>
      <returns>A <see cref="T:System.Windows.CoerceValueCallback" /> implementation reference.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary> Gets or sets the default value of the dependency property. </summary>
      <returns>The default value of the property. The default value on a <see cref="T:System.Windows.PropertyMetadata" /> instance created with the parameterless constructor will be <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; see Remarks.</returns>
      <exception cref="T:System.ArgumentException">Cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> once created; see Remarks.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary>Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance. </summary>
      <returns>true if the metadata instance is immutable; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary>Merges this metadata with the base metadata. </summary>
      <param name="baseMetadata">The base metadata to merge with this instance's values.</param>
      <param name="dp">The dependency property to which this metadata is being applied.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed. </summary>
      <param name="dp">The dependency property to which the metadata has been applied.</param>
      <param name="targetType">The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary>Gets or sets a reference to a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation specified in this metadata.</summary>
      <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>Describes the width, height, and location of a rectangle. </summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified x-coordinate, y-coordinate, width, and height. </summary>
      <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> is a negative value.-or-<paramref name="height" /> is a negative value.</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the two specified points. </summary>
      <param name="point1">The first point that the new rectangle must contain.</param>
      <param name="point2">The second point that the new rectangle must contain.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified top-left corner location and the specified width and height. </summary>
      <param name="location">A point that specifies the location of the top-left corner of the rectangle.</param>
      <param name="size">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector. </summary>
      <param name="point">The first point the rectangle must contain.</param>
      <param name="vector">The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is of the specified size and is located at (0,0).  </summary>
      <param name="size">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</param>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>Gets the y-axis value of the bottom of the rectangle. </summary>
      <returns>The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <see cref="F:System.Double.NegativeInfinity" /> .</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary>Gets the position of the bottom-left corner of the rectangle </summary>
      <returns>The position of the bottom-left corner of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary>Gets the position of the bottom-right corner of the rectangle. </summary>
      <returns>The position of the bottom-right corner of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary>Indicates whether the rectangle contains the specified x-coordinate and y-coordinate. </summary>
      <returns>true if (<paramref name="x" />, <paramref name="y" />) is contained by the rectangle; otherwise, false.</returns>
      <param name="x">The x-coordinate of the point to check.</param>
      <param name="y">The y-coordinate of the point to check.</param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>Indicates whether the rectangle contains the specified point.</summary>
      <returns>true if the rectangle contains the specified point; otherwise, false.</returns>
      <param name="point">The point to check.</param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary>Indicates whether the rectangle contains the specified rectangle. </summary>
      <returns>true if <paramref name="rect" /> is entirely contained by the rectangle; otherwise, false.</returns>
      <param name="rect">The rectangle to check.</param>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>Gets a special value that represents a rectangle with no position or area. </summary>
      <returns>The empty rectangle, which has <see cref="P:System.Windows.Rect.X" /> and <see cref="P:System.Windows.Rect.Y" /> property values of <see cref="F:System.Double.PositiveInfinity" />, and has <see cref="P:System.Windows.Rect.Width" /> and <see cref="P:System.Windows.Rect.Height" /> property values of <see cref="F:System.Double.NegativeInfinity" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>Indicates whether the specified object is equal to the current rectangle.</summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Rect" /> and has the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values as the current rectangle; otherwise, false.</returns>
      <param name="o">The object to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>Indicates whether the specified rectangle is equal to the current rectangle. </summary>
      <returns>true if the specified rectangle has the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values as the current rectangle; otherwise, false.</returns>
      <param name="value">The rectangle to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary>Indicates whether the specified rectangles are equal. </summary>
      <returns>true if the rectangles have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, false.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>Creates a hash code for the rectangle. </summary>
      <returns>A hash code for the current <see cref="T:System.Windows.Rect" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>Gets or sets the height of the rectangle. </summary>
      <returns>A positive number that represents the height of the rectangle. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Height" /> is set to a negative value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Height" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary>Expands or shrinks the rectangle by using the specified width and height amounts, in all directions. </summary>
      <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
      <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary>Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions. </summary>
      <returns>The resulting rectangle. </returns>
      <param name="rect">The <see cref="T:System.Windows.Rect" /> structure to modify.</param>
      <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
      <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary>Returns the rectangle that results from expanding the specified rectangle by the specified <see cref="T:System.Windows.Size" />, in all directions. </summary>
      <returns>The resulting rectangle.</returns>
      <param name="rect">The <see cref="T:System.Windows.Rect" /> structure to modify.</param>
      <param name="size">Specifies the amount to expand the rectangle. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" /> and <see cref="P:System.Windows.Rect.Right" /> properties. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Height" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" /> and <see cref="P:System.Windows.Rect.Bottom" /> properties.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary>Expands the rectangle by using the specified <see cref="T:System.Windows.Size" />, in all directions. </summary>
      <param name="size">Specifies the amount to expand the rectangle. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" /> and <see cref="P:System.Windows.Rect.Right" /> properties. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Height" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" /> and <see cref="P:System.Windows.Rect.Bottom" /> properties. </param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle. </summary>
      <param name="rect">The rectangle to intersect with the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary>Returns the intersection of the specified rectangles. </summary>
      <returns>The intersection of the two rectangles, or <see cref="P:System.Windows.Rect.Empty" /> if no intersection exists.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary>Indicates whether the specified rectangle intersects with the current rectangle. </summary>
      <returns>true if the specified rectangle intersects with the current rectangle; otherwise, false.</returns>
      <param name="rect">The rectangle to check.</param>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>Gets a value that indicates whether the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</summary>
      <returns>true if the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>Gets the x-axis value of the left side of the rectangle. </summary>
      <returns>The x-axis value of the left side of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary>Gets or sets the position of the top-left corner of the rectangle.</summary>
      <returns>The position of the top-left corner of the rectangle. The default is (0, 0). </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Location" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary>Moves the rectangle by the specified horizontal and vertical amounts. </summary>
      <param name="offsetX">The amount to move the rectangle horizontally.</param>
      <param name="offsetY">The amount to move the rectangle vertically.</param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary>Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts. </summary>
      <returns>The resulting rectangle.</returns>
      <param name="rect">The rectangle to move.</param>
      <param name="offsetX">The horizontal offset for the new rectangle.</param>
      <param name="offsetY">The vertical offset for the new rectangle.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary>Returns a rectangle that is offset from the specified rectangle by using the specified vector. </summary>
      <returns>The resulting rectangle.</returns>
      <param name="rect">The original rectangle.</param>
      <param name="offsetVector">A vector that specifies the horizontal and vertical offsets for the new rectangle.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary>Moves the rectangle by the specified vector. </summary>
      <param name="offsetVector">A vector that specifies the horizontal and vertical amounts to move the rectangle.</param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compares two rectangles for exact equality.</summary>
      <returns>true if the rectangles have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, false.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compares two rectangles for inequality.  </summary>
      <returns>true if the rectangles do not have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, false.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary>Creates a new rectangle from the specified string representation. </summary>
      <returns>The resulting rectangle.</returns>
      <param name="source">The string representation of the rectangle, in the form "x, y, width, height".</param>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>Gets the x-axis value of the right side of the rectangle.  </summary>
      <returns>The x-axis value of the right side of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary>Multiplies the size of the current rectangle by the specified x and y values.</summary>
      <param name="scaleX">The scale factor in the x-direction.</param>
      <param name="scaleY">The scale factor in the y-direction.</param>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary>Gets or sets the width and height of the rectangle. </summary>
      <returns>A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Size" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <returns>A string representation of the rectangle.</returns>
      <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="provider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>Gets the y-axis position of the top of the rectangle. </summary>
      <returns>The y-axis position of the top of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary>Gets the position of the top-left corner of the rectangle. </summary>
      <returns>The position of the top-left corner of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary>Gets the position of the top-right corner of the rectangle. </summary>
      <returns>The position of the top-right corner of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>Returns a string representation of the rectangle. </summary>
      <returns>A string representation of the current rectangle. The string has the following form: "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />".</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>Returns a string representation of the rectangle by using the specified format provider. </summary>
      <returns>A string representation of the current rectangle that is determined by the specified format provider.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary>Transforms the rectangle by applying the specified matrix. </summary>
      <param name="matrix">A matrix that specifies the transformation to apply.</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary>Returns the rectangle that results from applying the specified matrix to the specified rectangle. </summary>
      <returns>The rectangle that results from the operation.</returns>
      <param name="rect">A rectangle that is the basis for the transformation.</param>
      <param name="matrix">A matrix that specifies the transformation to apply.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>Expands the current rectangle exactly enough to contain the specified point. </summary>
      <param name="point">The point to include.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>Expands the current rectangle exactly enough to contain the specified rectangle. </summary>
      <param name="rect">The rectangle to include.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary>Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point. </summary>
      <returns>A rectangle that is exactly large enough to contain the specified rectangle and the specified point.</returns>
      <param name="rect">The rectangle to include.</param>
      <param name="point">The point to include.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary>Creates a rectangle that is exactly large enough to contain the two specified rectangles. </summary>
      <returns>The resulting rectangle.</returns>
      <param name="rect1">The first rectangle to include.</param>
      <param name="rect2">The second rectangle to include.</param>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>Gets or sets the width of the rectangle.  </summary>
      <returns>A positive number that represents the width of the rectangle. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Width" /> is set to a negative value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Width" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>Gets or sets the x-axis value of the left side of the rectangle. </summary>
      <returns>The x-axis value of the left side of the rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.X" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>Gets or sets the y-axis value of the top side of the rectangle. </summary>
      <returns>The y-axis value of the top side of the rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Y" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary>Converts instances of other types to and from instances of <see cref="T:System.Windows.Rect" />.</summary>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RectConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of <see cref="T:System.Windows.Rect" />.</summary>
      <returns>true if the type can be converted to a <see cref="T:System.Windows.Rect" />; otherwise, false.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether a <see cref="T:System.Windows.Rect" /> can be converted to the specified type. </summary>
      <returns>true if a <see cref="T:System.Windows.Rect" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Rect" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Rect" />. </summary>
      <returns>The <see cref="T:System.Windows.Rect" /> created from converting <paramref name="value" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information which is respected when converting.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Rect" />.</exception>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> Attempts to convert a <see cref="T:System.Windows.Rect" /> to the specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Rect" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information which is respected during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Rect" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Rect" /> to.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null.- or - <paramref name="value" /> is not a <see cref="T:System.Windows.Rect" />.- or - The <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.Size">
      <summary>Implements a structure that is used to describe the <see cref="T:System.Windows.Size" /> of an object. </summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Size" /> structure and assigns it an initial <paramref name="width" /> and <paramref name="height" />.</summary>
      <param name="width">The initial width of the instance of <see cref="T:System.Windows.Size" />.</param>
      <param name="height">The initial height of the instance of <see cref="T:System.Windows.Size" />.</param>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>Gets a value that represents a static empty <see cref="T:System.Windows.Size" />. </summary>
      <returns>An empty instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>Compares an object to an instance of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the sizes are equal; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>Compares a value to an instance of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are equal; otherwise, false.</returns>
      <param name="value">The size to compare to this current instance of <see cref="T:System.Windows.Size" />.</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are equal; otherwise, false.</returns>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>Gets the hash code for this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The hash code for this instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>Gets or sets the <see cref="P:System.Windows.Size.Height" /> of this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The <see cref="P:System.Windows.Size.Height" /> of this instance of <see cref="T:System.Windows.Size" />. The default is 0. The value cannot be negative.</returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>Gets a value that indicates whether this instance of <see cref="T:System.Windows.Size" /> is <see cref="P:System.Windows.Size.Empty" />. </summary>
      <returns>true if this instance of size is <see cref="P:System.Windows.Size.Empty" />; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Size" /> are equal; otherwise false.</returns>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary>Explicitly converts an instance of <see cref="T:System.Windows.Size" /> to an instance of <see cref="T:System.Windows.Vector" />. </summary>
      <returns>A <see cref="T:System.Windows.Vector" /> equal in value to this instance of <see cref="T:System.Windows.Size" />.</returns>
      <param name="size">The <see cref="T:System.Windows.Size" /> value to be converted.</param>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary>Explicitly converts an instance of <see cref="T:System.Windows.Size" /> to an instance of <see cref="T:System.Windows.Point" />. </summary>
      <returns>A <see cref="T:System.Windows.Point" /> equal in value to this instance of <see cref="T:System.Windows.Size" />.</returns>
      <param name="size">The <see cref="T:System.Windows.Size" /> value to be converted.</param>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for inequality. </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are not equal; otherwise false.</returns>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary>Returns an instance of <see cref="T:System.Windows.Size" /> from a converted <see cref="T:System.String" />. </summary>
      <returns>An instance of <see cref="T:System.Windows.Size" />.</returns>
      <param name="source">A <see cref="T:System.String" /> value to parse to a <see cref="T:System.Windows.Size" /> value.</param>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <returns> The value of the current instance in the specified format.</returns>
      <param name="format"> The format to use.</param>
      <param name="provider"> The provider to use to format the value.</param>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this <see cref="T:System.Windows.Size" /> object. </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:System.Windows.Size" /> object.</returns>
      <param name="provider">An object that provides a way to control formatting.</param>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>Gets or sets the <see cref="P:System.Windows.Size.Width" /> of this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The <see cref="P:System.Windows.Size.Width" /> of this instance of <see cref="T:System.Windows.Size" />. The default value is 0. The value cannot be negative.</returns>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary>Converts instances of other types to and from instances of the <see cref="T:System.Windows.Size" /> class. </summary>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SizeConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether a class can be converted from a given type to an instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>true if the <paramref name="sourceType" /> can be converted to an instance of <see cref="T:System.Windows.Size" />; otherwise, false.</returns>
      <param name="context">Provides contextual information about a component.</param>
      <param name="sourceType">Identifies the data type to evaluate for conversion.</param>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Size" /> can be converted to a different type. </summary>
      <returns>true if this instance of <see cref="T:System.Windows.Size" /> can be converted to the <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Provides contextual information about a component.</param>
      <param name="destinationType">Identifies the data type to evaluate for conversion.</param>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.Size" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.Size" /> that is created from the converted <paramref name="source" />.</returns>
      <param name="context">Provides contextual information about a component.</param>
      <param name="culture">Culture-specific information that should be respected during conversion.</param>
      <param name="value">The source object that is being converted.</param>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.Size" /> to a specified type. </summary>
      <returns>The object that is created from the converted instance of <see cref="T:System.Windows.Size" />.</returns>
      <param name="context">Provides contextual information about a component.</param>
      <param name="culture">Culture-specific information that should be respected during conversion.</param>
      <param name="value">The instance of <see cref="T:System.Windows.Size" /> to convert.</param>
      <param name="destinationType">The type that this instance of <see cref="T:System.Windows.Size" /> is converted to.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null or is not an instance of <see cref="T:System.Windows.Size" />, or if the <paramref name="destinationType" /> is not one of the valid destination types.</exception>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary>Provides a startup screen for a Windows Presentation Foundation (WPF) application. </summary>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SplashScreen" /> class with the specified resource assembly. </summary>
      <param name="resourceAssembly">The assembly that contains the embedded resource.</param>
      <param name="resourceName">The name of the embedded resource.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SplashScreen" /> class with the specified resource. </summary>
      <param name="resourceName">The name of the embedded resource.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary>Closes the splash screen. </summary>
      <param name="fadeoutDuration">A <see cref="T:System.TimeSpan" /> that specifies how long it will take for the splash screen to fade after the close operation has been initiated. </param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary>Displays the splash screen. </summary>
      <param name="autoClose">true to automatically close the splash screen; false to close the splash screen manually.</param>
      <exception cref="T:System.IO.IOException">The resource specified in the constructor could not be found. </exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary>Displays the splash screen.</summary>
      <param name="autoClose">true to automatically close the splash screen; false to close the splash screen manually.</param>
      <param name="topMost">true if the splash screen window should use the WS_EX_TOPMOST style; otherwise false.</param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary>Represents a method used as a callback that validates the effective value of a  dependency property.</summary>
      <returns>true if the value was validated; false if the submitted value was invalid.</returns>
      <param name="value">The value to be validated.</param>
    </member>
    <member name="T:System.Windows.Vector">
      <summary>Represents a displacement in 2-D space. </summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure. </summary>
      <param name="x">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</param>
      <param name="y">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary>Translates the specified point by the specified vector and returns the resulting point.</summary>
      <returns>The result of translating <paramref name="point" /> by <paramref name="vector" />.</returns>
      <param name="vector">The amount to translate the specified point.</param>
      <param name="point">The point to translate.</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary>Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure. </summary>
      <returns>The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
      <param name="vector1">The first vector to add.</param>
      <param name="vector2">The second vector to add.</param>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary>Retrieves the angle, expressed in degrees, between the two specified vectors. </summary>
      <returns>The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
      <param name="vector1">The first vector to evaluate.</param>
      <param name="vector2">The second vector to evaluate.</param>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calculates the cross product of two vectors. </summary>
      <returns>The cross product of <paramref name="vector1" /> and <paramref name="vector2" />. The following formula is used to calculate the cross product: (Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</returns>
      <param name="vector1">The first vector to evaluate.</param>
      <param name="vector2">The second vector to evaluate.</param>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calculates the determinant of two vectors.</summary>
      <returns>The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
      <param name="vector1">The first vector to evaluate.</param>
      <param name="vector2">The second vector to evaluate.</param>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary>Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</summary>
      <returns>The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</returns>
      <param name="vector">The vector structure to divide.</param>
      <param name="scalar">The amount by which <paramref name="vector" /> is divided.</param>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, false.</returns>
      <param name="o">The vector to compare.</param>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary> Compares two vectors for equality.</summary>
      <returns>true if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, false.</returns>
      <param name="value">The vector to compare with this vector.</param>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compares the two specified vectors for equality.</summary>
      <returns>true if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, false.</returns>
      <param name="vector1">The first vector to compare.</param>
      <param name="vector2">The second vector to compare.</param>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary>Returns the hash code for this vector. </summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary>Gets the length of this vector. </summary>
      <returns>The length of this vector. </returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary>Gets the square of the length of this vector. </summary>
      <returns>The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary> Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />. </summary>
      <returns>The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</returns>
      <param name="scalar">The scalar to multiply.</param>
      <param name="vector">The vector to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary> Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />. </summary>
      <returns>The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</returns>
      <param name="vector">The vector to multiply.</param>
      <param name="scalar">The scalar to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</returns>
      <param name="vector">The vector structure to transform.</param>
      <param name="matrix">The transformation to apply to <paramref name="vector" />.</param>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula: (vector1.X * vector2.X) + (vector1.Y * vector2.Y) </returns>
      <param name="vector1">The first vector to multiply.</param>
      <param name="vector2">The second vector structure to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary>Negates this vector. The vector has the same magnitude as before, but its direction is now opposite. </summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary> Normalizes this vector. </summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary> Translates a point by the specified vector and returns the resulting point. </summary>
      <returns>The result of translating <paramref name="point" /> by <paramref name="vector" />.</returns>
      <param name="vector">The vector used to translate <paramref name="point" />.</param>
      <param name="point">The point to translate.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary>Adds two vectors and returns the result as a vector. </summary>
      <returns>The sum of <paramref name="vector1" /> and <paramref name="vector2" />. </returns>
      <param name="vector1">The first vector to add.</param>
      <param name="vector2">The second vector to add.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary> Divides the specified vector by the specified scalar and returns the resulting vector.</summary>
      <returns>The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</returns>
      <param name="vector">The vector to divide.</param>
      <param name="scalar">The scalar by which <paramref name="vector" /> will be divided.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary> Compares two vectors for equality.</summary>
      <returns>true if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, false.</returns>
      <param name="vector1">The first vector to compare.</param>
      <param name="vector2">The second vector to compare.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary>Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector. </summary>
      <returns>A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</returns>
      <param name="vector">The vector to convert.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary>Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</returns>
      <param name="vector">The vector to convert.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compares two vectors for inequality.</summary>
      <returns>true if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, false.</returns>
      <param name="vector1">The first vector to compare.</param>
      <param name="vector2">The second vector to compare.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary> Multiplies the specified scalar by the specified vector and returns the resulting vector. </summary>
      <returns>The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</returns>
      <param name="scalar">The scalar to multiply.</param>
      <param name="vector">The vector to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary>Multiplies the specified vector by the specified scalar and returns the resulting vector. </summary>
      <returns>The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</returns>
      <param name="vector">The vector to multiply.</param>
      <param name="scalar">The scalar to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary> Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <returns>The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</returns>
      <param name="vector">The vector to transform.</param>
      <param name="matrix">The transformation to apply to <paramref name="vector" />.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary> Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</summary>
      <returns>Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:vector1.X * vector2.X + vector1.Y * vector2.Y</returns>
      <param name="vector1">The first vector to multiply.</param>
      <param name="vector2">The second vector to multiply.</param>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary>Subtracts one specified vector from another. </summary>
      <returns>The difference between <paramref name="vector1" /> and <paramref name="vector2" />. </returns>
      <param name="vector1">The vector from which <paramref name="vector2" /> is subtracted. </param>
      <param name="vector2">The vector to subtract from <paramref name="vector1" />.</param>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary>Negates the specified vector. </summary>
      <returns>A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</returns>
      <param name="vector">The vector to negate.</param>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary>Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure. </summary>
      <returns>The equivalent <see cref="T:System.Windows.Vector" /> structure.</returns>
      <param name="source">The string representation of the vector.</param>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary>Subtracts the specified vector from another specified vector. </summary>
      <returns>The difference between <paramref name="vector1" /> and <paramref name="vector2" />. </returns>
      <param name="vector1">The vector from which <paramref name="vector2" /> is subtracted.</param>
      <param name="vector2">The vector to subtract from <paramref name="vector1" />.</param>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format. </returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</summary>
      <returns>A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary>Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information. </summary>
      <returns>A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</returns>
      <param name="provider">The culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector. </summary>
      <returns>The <see cref="P:System.Windows.Vector.X" /> component of this vector. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary>Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector. </summary>
      <returns>The <see cref="P:System.Windows.Vector.Y" /> component of this vector. The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary> Converts instances of other types to and from a <see cref="T:System.Windows.Vector" />. </summary>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure. </summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Indicates whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Vector" />.</summary>
      <returns>true if objects of the specified type can be converted to a <see cref="T:System.Windows.Vector" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The source <see cref="T:System.Type" /> that is being queried for conversion support.</param>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether instances of <see cref="T:System.Windows.Vector" /> can be converted to the specified type. </summary>
      <returns>true if instances of <see cref="T:System.Windows.Vector" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Vector" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.Windows.Vector" />. </summary>
      <returns>The <see cref="T:System.Windows.Vector" /> created from converting <paramref name="value" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> Converts the specified <see cref="T:System.Windows.Vector" /> to the specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Vector" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The <see cref="T:System.Windows.Vector" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Vector" /> to.</param>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary>Provides a base class for the event manager that is used in the WeakEvent pattern. The manager adds and removes listeners for events (or callbacks) that also use the pattern.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary>Provides initialization of the base class values when used as the initializer by the constructor of a derived class.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary>Delivers the event being managed to each listener.</summary>
      <param name="sender">The object on which the event is being handled.</param>
      <param name="args">Event data for the event to deliver.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary>Delivers the event being managed to each listener in the provided list.</summary>
      <param name="sender">The object on which the event is being handled.</param>
      <param name="args">Event data.</param>
      <param name="list">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary>Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</summary>
      <returns>The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</returns>
      <param name="managerType">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary>Gets or sets the data being stored for the provided source.</summary>
      <returns>Data being stored by the manager for this source.</returns>
      <param name="source">The zero based index of the requested source.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>Adds the provided listener to the provided source for the event being managed.</summary>
      <param name="source">The source to attach listeners to.</param>
      <param name="listener">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>Removes a previously added listener from the provided source.</summary>
      <param name="source">The source to remove listeners from.</param>
      <param name="listener">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>Removes inactive listener entries from the data list for the provided source. Returns true if some entries were actually removed from the list.</summary>
      <returns>true if some entries were actually removed; otherwise, false.</returns>
      <param name="source">Source for events being listened to.</param>
      <param name="data">The data to check. This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</param>
      <param name="purgeAll">Set to true to stop listening to <paramref name="source" />, and completely remove all entries from <paramref name="data" />.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary>Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</summary>
      <returns>An object that can be used to establish a lock on the data table members and then be appropriately disposed, via a using construct.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary>Removes all listeners for the given source.</summary>
      <param name="source">The source to remove listener information for.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary>Sets the current manager for the given manager type.</summary>
      <param name="managerType">Type to set new event manager on</param>
      <param name="manager">The new event manager.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary>When overridden in a derived class, starts listening for the event being managed. After <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />  is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</summary>
      <param name="source">The source to begin listening on.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary>When overridden in a derived class, stops listening on the provided source for the event being managed.</summary>
      <param name="source">The source to stop listening on.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary>Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</summary>
      <returns>An object that can be used to establish a lock on the data table members and then be appropriately disposed, via a using construct.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary>Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</summary>
      <param name="capacity">The number of items that should be allocated in the initial list.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary>Adds a listener item to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="listener">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary>Declares the list to be in use. This prevents direct changes to the list during iterations of the list items.</summary>
      <returns>true if the list was already declared to be in use; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />, making deep copies of the values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary>Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <returns>The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary>Gets a value that represents an empty list for purposes of comparisons.</summary>
      <returns>The empty list representation.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary>Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</summary>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary>Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" />  is empty.</summary>
      <returns>true if the list is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary>Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</summary>
      <returns>The item at that index, or a null reference if no item was at that index.</returns>
      <param name="index">The zero-based index of the listener in the list.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary>Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</summary>
      <returns>true if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy. false if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</returns>
      <param name="list">The list to check for use state and potentially copy.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary>Removes all entries from the list where the underlying reference target is a null reference.</summary>
      <returns>Returns true if any entries were purged; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary>Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />. </summary>
      <param name="listener">The item to remove.</param>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Int32Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.Int32RectValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Int32Rect" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Int32Rect" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Int32Rect" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Int32Rect" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Point" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.PointValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Point" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Point" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Point" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Point" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Point" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Point" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.RectValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Rect" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Rect" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Rect" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Rect" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Rect" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Rect" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Size" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.SizeValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Size" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Size" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Size" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Size" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Size" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Size" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Vector" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.VectorValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Vector" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Vector" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Vector" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Vector" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Vector" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Vector" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary>Common base class and contract for <see cref="T:System.Windows.Data.DataSourceProvider" /> objects, which are factories that execute some queries to produce a single object or a list of objects that you can use as binding source objects.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.DataSourceProvider" /> class. This is a protected constructor.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary>Indicates that initialization of this object is about to begin; no implicit <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> occurs until the matched <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" /> method is called.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary>When overridden in a derived class, this base class calls this method when <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> or <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> has been called. The base class delays the call if refresh is deferred or initial load is disabled.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary>Gets the underlying data object.</summary>
      <returns>A value of type <see cref="T:System.Object" /> that is the underlying data object.</returns>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property has a new value.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary>Enters a defer cycle that you can use to change properties of the provider and delay automatic refresh.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that you can use to dispose of the calling object.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary>Gets or sets the current <see cref="T:System.Windows.Threading.Dispatcher" /> object to the UI thread to use.</summary>
      <returns>The current <see cref="T:System.Windows.Threading.Dispatcher" /> object to the UI thread to use. By default, this is the <see cref="T:System.Windows.Threading.Dispatcher" /> object that is associated with the thread on which this instance was created.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary>Indicates that the initialization of this object has completed; this causes a <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> if no other <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> is outstanding.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary>Gets the error of the last query operation.</summary>
      <returns>A value of type <see cref="T:System.Exception" /> that is the error of the last query operation, or null if there was no error.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary>Starts the initial query to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary>Gets or sets a value that indicates whether to prevent or delay the automatic loading of data.</summary>
      <returns>false to prevent or delay the automatic loading of data; otherwise, true. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary>Gets a value that indicates whether there is an outstanding <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> in use.</summary>
      <returns>true if there is an outstanding <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> in use; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> event with the provided arguments.</summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary>Derived classes call this method to indicate that a query has finished.</summary>
      <param name="newData">The data that is the result of the query.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary>Derived classes call this method to indicate that a query has finished.</summary>
      <param name="newData">The data that is the result of the query.</param>
      <param name="error">The error that occurred while running the query. This value is null if there is no error.</param>
      <param name="completionWork">Optional delegate that is used to execute completion work on the UI thread, for example, to set additional properties.</param>
      <param name="callbackArguments">Optional arguments to send as a parameter with the <paramref name="completionWork" /> delegate.</param>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary>Initiates a refresh operation to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property.</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary>Specifies the direction within a user interface (UI) in which a desired focus change request is attempted. The direction is either based on tab order or by relative direction in layout.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary>Move focus to the next focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary>Move focus to the previous focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary>Move focus to the first focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary>Move focus to the last focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary>Move focus to another focusable element to the left of the currently focused element.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary>Move focus to another focusable element to the right of the currently focused element.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary>Move focus to another focusable element upwards from the currently focused element.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary>Move focus to another focusable element downwards from the currently focused element.</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>Specifies the possible key values on a keyboard. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>No key pressed. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary>The Cancel key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>The Backspace key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>The Tab key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary>The Linefeed key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary>The Clear key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary>The Return key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>The Enter key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary>The Pause key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary>The Caps Lock key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>The Caps Lock key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary>The IME Kana mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary>The IME Hangul mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary>The IME Junja mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary>The IME Final mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary>The IME Hanja mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary>The IME Kanji mode key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>The ESC key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary>The IME Convert key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary>The IME NonConvert key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary>The IME Accept key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary>The IME Mode change request. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>The Spacebar key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary>The Page Up key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>The Page Up key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary>The Page Down key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>The Page Down key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>The End key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>The Home key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>The Left Arrow key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>The Up Arrow key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>The Right Arrow key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>The Down Arrow key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary>The Select key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary>The Print key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary>The Execute key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary>The Print Screen key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary>The Print Screen key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>The Insert key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>The Delete key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary>The Help key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>The 0 (zero) key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>The 1 (one) key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>The 2 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>The 3 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>The 4 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>The 5 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>The 6 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>The 7 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>The 8 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>The 9 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>The A key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>The B key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>The C key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>The D key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>The E key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>The F key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>The G key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>The H key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>The I key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>The J key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>The K key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>The L key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>The M key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>The N key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>The O key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>The P key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>The Q key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>The R key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>The S key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>The T key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>The U key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>The V key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>The W key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>The X key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>The Y key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>The Z key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary>The left Windows logo key (Microsoft Natural Keyboard). </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary>The right Windows logo key (Microsoft Natural Keyboard). </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary>The Application key (Microsoft Natural Keyboard). </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary>The Computer Sleep key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>The 0 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>The 1 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>The 2 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>The 3 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>The 4 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>The 5 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>The 6 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>The 7 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>The 8 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>The 9 key on the numeric keypad. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>The Multiply key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>The Add key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary>The Separator key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>The Subtract key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>The Decimal key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>The Divide key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>The F1 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>The F2 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>The F3 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>The F4 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>The F5 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>The F6 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>The F7 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>The F8 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>The F9 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>The F10 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>The F11 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>The F12 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary>The F13 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary>The F14 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary>The F15 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary>The F16 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary>The F17 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary>The F18 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary>The F19 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary>The F20 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary>The F21 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary>The F22 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary>The F23 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary>The F24 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary>The Num Lock key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary>The Scroll Lock key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary>The left Shift key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary>The right Shift key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary>The left CTRL key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary>The right CTRL key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary>The left ALT key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary>The right ALT key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary>The Browser Back key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary>The Browser Forward key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary>The Browser Refresh key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary>The Browser Stop key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary>The Browser Search key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary>The Browser Favorites key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary>The Browser Home key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary>The Volume Mute key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary>The Volume Down key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary>The Volume Up key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary>The Media Next Track key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary>The Media Previous Track key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary>The Media Stop key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary>The Media Play Pause key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary>The Launch Mail key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary>The Select Media key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary>The Launch Application1 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary>The Launch Application2 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary>The OEM 1 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary>The OEM Semicolon key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary>The OEM Addition key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary>The OEM Comma key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary>The OEM Minus key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary>The OEM Period key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary>The OEM 2 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary>The OEM Question key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary>The OEM 3 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary>The OEM Tilde key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary>The ABNT_C1 (Brazilian) key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary>The ABNT_C2 (Brazilian) key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary>The OEM 4 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary>The OEM Open Brackets key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary>The OEM 5 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary>The OEM Pipe key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary>The OEM 6 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary>The OEM Close Brackets key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary>The OEM 7 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary>The OEM Quotes key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary>The OEM 8 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary>The OEM 102 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary>The OEM Backslash key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary>A special key masking the real key being processed by an IME. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary>A special key masking the real key being processed as a system key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary>The OEM ATTN key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary>The DBE_ALPHANUMERIC key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary>The OEM FINISH key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary>The DBE_KATAKANA key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary>The OEM COPY key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary>The DBE_HIRAGANA key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary>The OEM AUTO key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary>The DBE_SBCSCHAR key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary>The OEM ENLW key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary>The DBE_DBCSCHAR key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary>The OEM BACKTAB key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary>The DBE_ROMAN key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary>The ATTN key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary>The DBE_NOROMAN key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary>The CRSEL key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary>The DBE_ENTERWORDREGISTERMODE key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary>The EXSEL key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary>The DBE_ENTERIMECONFIGMODE key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary>The ERASE EOF key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary>The DBE_FLUSHSTRING key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary>The PLAY key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary>The DBE_CODEINPUT key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary>The ZOOM key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary>The DBE_NOCODEINPUT key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary>A constant reserved for future use. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary>The DBE_DETERMINESTRING key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary>The PA1 key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary>The DBE_ENTERDLGCONVERSIONMODE key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary>The OEM Clear key. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary>The key is used with another key to create a single combined character.</summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.Key" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Key" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.Key" />, using the specified context. </summary>
      <returns>true if <paramref name="sourceType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.Key" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if <paramref name="destinationType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.Key" />, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="source">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.Key" /> to the specified type, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted to <paramref name="destinationType" />.</exception>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary>Provides static methods to convert between Win32 Virtual-Keys and the WPF <see cref="T:System.Windows.Input.Key" /> enumeration. </summary>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary>Converts a Win32 Virtual-Key into WPF <see cref="T:System.Windows.Input.Key" />.</summary>
      <returns>The WPF key.</returns>
      <param name="virtualKey">The virtual key to convert.</param>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary>Converts a WPF <see cref="T:System.Windows.Input.Key" /> into a Win32 Virtual-Key.</summary>
      <returns>The Win32 Virtual-Key.</returns>
      <param name="key">The WPF to convert.</param>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Input.Key" />.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.Windows.Input.Key" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.Windows.Input.Key" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The key to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Input.Key" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Input.Key" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert into a <see cref="T:System.Windows.Input.Key" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Input.Key" /> to a <see cref="T:System.String" />.</summary>
      <returns>An invariant string representation of the specified <see cref="T:System.Windows.Input.Key" />.</returns>
      <param name="value">The key to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>Specifies the set of modifier keys. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>No modifiers are pressed. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>The ALT key. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>The CTRL key. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>The SHIFT key. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>The Windows logo key.</summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.ModifierKeys" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ModifierKeysConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.ModifierKeys" />, using the specified context.</summary>
      <returns>true if <paramref name="sourceType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.ModifierKeys" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if <paramref name="destinationType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.ModifierKeys" />, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="source">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.ModifierKeys" /> to the specified type, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> does not map to a valid <see cref="T:System.Windows.Input.ModifierKeys" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary>Determines whether the specified value is a valid <see cref="T:System.Windows.Input.ModifierKeys" /> value. </summary>
      <returns>true if input is a valid <see cref="T:System.Windows.Input.ModifierKeys" /> value; otherwise, false.</returns>
      <param name="modifierKeys">The value to check for validity.</param>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.Windows.Input.ModifierKeys" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The modifier keys to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Input.ModifierKeys" /> value.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Input.ModifierKeys" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert into a <see cref="T:System.Windows.Input.ModifierKeys" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Input.ModifierKeys" /> to a <see cref="T:System.String" />.</summary>
      <returns>An invariant string representation of the specified <see cref="T:System.Windows.Input.ModifierKeys" /> value.</returns>
      <param name="value">The key to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary>Represents a request to move focus to another control. </summary>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TraversalRequest" /> class. </summary>
      <param name="focusNavigationDirection">The intended direction of the focus traversal, as a value of the enumeration.</param>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary>Gets the traversal direction. </summary>
      <returns>One of the traversal direction enumeration values.</returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary> Gets or sets a value that indicates whether focus traversal has reached the end of child elements that can have focus. </summary>
      <returns>true if this traversal has reached the end of child elements that can have focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary>Enables shared control of the message pump between Win32 and WPF in interoperation scenarios. </summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary>Gets the last message that was raised. </summary>
      <returns>The last message.</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary>Occurs when a thread becomes modal. </summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary>Gets a value that indicates whether the thread is modal. </summary>
      <returns>true if the thread is modal; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary>Occurs when a modal thread becomes nonmodal. </summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary>Called to indicate that a modal thread is no longer modal.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary>Called to indicate that the thread is modal. </summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary>Called to indicate that a thread is idle. </summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary>Indicates that a new message is available for possible handling. </summary>
      <returns>true, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. false, if the message was not processed. In this case, the owner of the message pump should call the Win32 function TranslateMessageDispatchMessage followed by DispatchMessage. </returns>
      <param name="msg">The message and its associated data.</param>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary>Occurs when the message pump receives a keyboard message.  </summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary>Occurs when the thread is idle. </summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary>Occurs when the message pump receives a keyboard message.</summary>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary>Provides a keyboard sink for components that manages tabbing, accelerators, and mnemonics across interop boundaries and between HWNDs. This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary>Gets a value that indicates whether the sink or one of its contained components has focus. </summary>
      <returns>true if the sink or one of its contained components has focus; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary>Gets or sets a reference to the component's container's <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> interface. </summary>
      <returns>A reference to the container's <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> interface.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Called when one of the mnemonics (access keys) for this sink is invoked. </summary>
      <returns>true if the message was handled; otherwise, false.</returns>
      <param name="msg">The message for the mnemonic and associated data. Do not modify this message structure. It is passed by reference for performance reasons only.</param>
      <param name="modifiers">Modifier keys.</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>Registers the <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> interface of a contained component. </summary>
      <returns>The <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> site of the contained component.</returns>
      <param name="sink">The <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> sink of the contained component.</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>Sets focus on either the first tab stop or the last tab stop of the sink. </summary>
      <returns>true if the focus has been set as requested; false, if there are no tab stops.</returns>
      <param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Processes keyboard input at the keydown message level.</summary>
      <returns>true if the message was handled by the method implementation; otherwise, false.</returns>
      <param name="msg">The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.</param>
      <param name="modifiers">Modifier keys.</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> is called. </summary>
      <returns>true if the message was processed and <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> should not be called; otherwise, false.</returns>
      <param name="msg">The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.</param>
      <param name="modifiers">Modifier keys.</param>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary>Manages keyboard focus within the container.  This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary>Called by a contained component when it has reached its last tab stop and has no further items to tab to. </summary>
      <returns>If this method returns true, the site has shifted focus to another component. If this method returns false, focus is still within the calling component. The component should "wrap around" and set focus to its first contained tab stop.</returns>
      <param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary>Gets the keyboard sink associated with this site. </summary>
      <returns>The current site's <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> interface.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary>Unregisters a child keyboard input sink from this site. </summary>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary>Contains message information from a thread's message queue. </summary>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary>Gets or sets the window handle (HWND) to the window whose window procedure receives the message. </summary>
      <returns>The window handle (HWND).</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary>Gets or sets the <paramref name="lParam" /> value that specifies additional information about the message. The exact meaning depends on the value of the <see cref="P:System.Windows.Interop.MSG.message" /> member.</summary>
      <returns>The <paramref name="lParam" /> value for the message.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary>Gets or sets the message identifier. </summary>
      <returns>The message identifier.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary>Gets or sets the x coordinate of the cursor position on the screen, when the message was posted. </summary>
      <returns>The x coordinate of the cursor position.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary>Gets or sets the y coordinate of the cursor position on the screen, when the message was posted. </summary>
      <returns>The y coordinate of the cursor position.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary>Gets or sets the time at which the message was posted.</summary>
      <returns>The time that the message was posted.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary>Gets or sets the <paramref name="wParam" /> value for the message, which specifies additional information about the message. The exact meaning depends on the value of the message. </summary>
      <returns>The <paramref name="wParam" /> value for the message.</returns>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> and <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" /> events. </summary>
      <param name="msg">A structure with the message data.</param>
      <param name="handled">true if the message was handled; otherwise, false.</param>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary>Specifies how a property is to be serialized.</summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary>The property should be serialized as an attribute.</summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary>Specifies the serialization flags for a property.</summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" /> class.</summary>
      <param name="designerSerializationOptions">Specifies how the property is to be serialized. </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="designerSerializationOptions" /> is not a valid <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> value.</exception>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary>Gets the <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> set on the attribute.</summary>
      <returns>The serialization option, as a value of the enumeration.</returns>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary>Abstract class used internally by the WPF XAML compiler to support the use of internal types.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.InternalTypeHelper" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>When overridden in a derived (generated) class, attaches an event handler delegate to an internal event.</summary>
      <param name="eventInfo">The event information for the event (CLR reflection information). </param>
      <param name="target">The target where the handler is attached.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>When overridden in a derived (generated) class, creates an event delegate referencing a non-public handler method.</summary>
      <returns>The delegate reference.</returns>
      <param name="delegateType">The <see cref="T:System.Type" /> of the delegate. </param>
      <param name="target">The target where the handler is attached.</param>
      <param name="handler">The name of the handler implementation.</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived (generated) class, creates an instance of an internal type.</summary>
      <returns>The created instance. </returns>
      <param name="type">The <see cref="T:System.Type" /> to create.</param>
      <param name="culture">Culture specific information. </param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived (generated) class, gets the value of an internal property on the target object</summary>
      <returns>The value of the property.</returns>
      <param name="propertyInfo">Property information for the property to get. </param>
      <param name="target">The object that holds the desired property value.</param>
      <param name="culture">Culture specific information. </param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived (generated) class, sets the value on an internal property on the target object.</summary>
      <param name="propertyInfo">Property information for the property to set. </param>
      <param name="target">The object that holds the desired property value.</param>
      <param name="value">The value to set.</param>
      <param name="culture">Culture specific information. </param>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary>Provides a mechanism whereby types can declare that they can receive an expression (or another class) from a markup extension, where the output is a different property type than the target property. Do not use for .NET Framework 4 implementations; see Remarks.</summary>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>Provides the handling for markup extensions that provide property values. Do not use for .NET Framework 4 implementations; see Remarks in <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />.</summary>
      <param name="property">The name of the target property.</param>
      <param name="markupExtension">The markup extension instance of the incoming data.</param>
      <param name="serviceProvider">Can provide additional services that should be performed when processing the markup extension data for a property value.</param>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary>Provides an implementation for the <see cref="T:System.IServiceProvider" /> interface with methods that enable adding services.</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ServiceProviders" /> class. </summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary>Adds a service to the list. </summary>
      <param name="serviceType">Service type of the new service.</param>
      <param name="service">The service implementation class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> or <paramref name="service" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Attempted to add a service that already exists in the dictionary.</exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary>Gets the service object of the specified type.</summary>
      <returns>A service implementation for the type <paramref name="serviceType" />. May be null if there is no service stored for type <paramref name="serviceType" />.</returns>
      <param name="serviceType">The type of service object to get.</param>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary>Abstract class that represents an object that can be used to navigate a tree of objects.</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, assigns a root context for <see cref="T:System.Windows.Markup.ValueSerializer" /> classes.</summary>
      <param name="context">The <see cref="T:System.Windows.Markup.IValueSerializerContext" /> to assign a root context for.</param>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary>When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.  </summary>
      <returns>The collection of attributes. </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary>When overridden in a derived class, gets the instance of the object represented by this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.</summary>
      <returns>The instance of the object</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary>When overridden in a derived class, gets the type of the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> instance.</summary>
      <returns>The type of the object. </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary>When overridden in a derived class, gets the properties of this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> instance that should be written to XAML.</summary>
      <returns>The properties.  </returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary>Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values. </summary>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary>When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>The collection of attributes.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Windows.DependencyProperty" /> identifier for the markup property if the property is implemented as a dependency property</summary>
      <returns>The dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is an attached <see cref="T:System.Windows.DependencyProperty" />. </summary>
      <returns>true if the property is an attached <see cref="T:System.Windows.DependencyProperty" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is a composite property. </summary>
      <returns>true is this property is a composite property; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a constructor argument.</summary>
      <returns>true if this property represents a constructor argument; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents direct content of a collection.</summary>
      <returns>true if the property represents direct content; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents the key used by the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> to store the item in a dictionary.</summary>
      <returns>true if this property represents a key; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.</summary>
      <returns>true, if this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a string; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary>When overridden in a derived class, gets the items that make up the value of this property. </summary>
      <returns>The items that make up the value of this property.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary>When overridden in a derived class, gets a name that is used for diagnostics and error reporting. </summary>
      <returns>The identifier property name.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary>When overridden in a derived class, gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> for the markup property. </summary>
      <returns>The property descriptor. </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary>When overridden in a derived class, gets the CLR type of the property.</summary>
      <returns>The CLR type.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary>When overridden in a derived class, gets the string value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>The string value.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary>When overridden in a derived class, gets the set of types that this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> will reference when it serializes its value as a string.</summary>
      <returns>The set of types.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary>When overridden in a derived class, gets the current value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>The current value.</returns>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary>Allows WPF applications to disable dots per inch (dpi) awareness for all user interface elements.</summary>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" />.</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary> Represents a 3x3 affine transformation matrix used for transformations in 2-D space. </summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="m11">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M11" /> coefficient.</param>
      <param name="m12">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M12" /> coefficient.</param>
      <param name="m21">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M21" /> coefficient.</param>
      <param name="m22">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M22" /> coefficient.</param>
      <param name="offsetX">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetX" /> coefficient.</param>
      <param name="offsetY">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetY" /> coefficient.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary> Appends the specified <see cref="T:System.Windows.Media.Matrix" /> structure to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="matrix">The <see cref="T:System.Windows.Media.Matrix" /> structure to append to this <see cref="T:System.Windows.Media.Matrix" /> structure.</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary> Gets the determinant of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The determinant of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary> Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" /> structure; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary> Determines whether the specified <see cref="T:System.Windows.Media.Matrix" /> structure is identical to this instance. </summary>
      <returns>true if instances are equal; otherwise, false. </returns>
      <param name="value">The instance of <see cref="T:System.Windows.Media.Matrix" /> to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are identical.</summary>
      <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are identical; otherwise, false.</returns>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary> Returns the hash code for this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary> Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" /> structure is invertible. </summary>
      <returns>true if the <see cref="T:System.Windows.Media.Matrix" /> has an inverse; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary> Gets an identity <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <returns>An identity matrix.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary> Inverts this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Matrix" /> structure is not invertible.</exception>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary> Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix. </summary>
      <returns>true if the <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>Gets or sets the value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary> Gets or sets the value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary> Gets or sets the value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>Gets or sets the value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 1.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary> Multiplies a <see cref="T:System.Windows.Media.Matrix" /> structure by another <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The result of multiplying <paramref name="trans1" /> by <paramref name="trans2" />.</returns>
      <param name="trans1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
      <param name="trans2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>Gets or sets the value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.  </summary>
      <returns>The value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>Gets or sets the value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are identical.</summary>
      <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are identical; otherwise, false.</returns>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are not identical.</summary>
      <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are not identical; otherwise, false.</returns>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary> Multiplies a <see cref="T:System.Windows.Media.Matrix" /> structure by another <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The result of multiplying <paramref name="trans1" /> by <paramref name="trans2" />.</returns>
      <param name="trans1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
      <param name="trans2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary> Converts a <see cref="T:System.String" /> representation of a matrix into the equivalent <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The equivalent <see cref="T:System.Windows.Media.Matrix" /> structure.</returns>
      <param name="source">The <see cref="T:System.String" /> representation of the matrix.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary> Prepends the specified <see cref="T:System.Windows.Media.Matrix" /> structure onto this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="matrix">The <see cref="T:System.Windows.Media.Matrix" /> structure to prepend to this <see cref="T:System.Windows.Media.Matrix" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary> Applies a rotation of the specified angle about the origin of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="angle">The angle of rotation.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary>Rotates this matrix about the specified point.</summary>
      <param name="angle">The angle, in degrees, by which to rotate this matrix. </param>
      <param name="centerX">The x-coordinate of the point about which to rotate this matrix.</param>
      <param name="centerY">The y-coordinate of the point about which to rotate this matrix.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary>Prepends a rotation of the specified angle at the specified point to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="angle">The rotation angle, in degrees.</param>
      <param name="centerX">The x-coordinate of the rotation center.</param>
      <param name="centerY">The y-coordinate of the rotation center.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary> Prepends a rotation of the specified angle to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="angle">The angle of rotation to prepend.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary> Appends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
      <param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary>Scales this <see cref="T:System.Windows.Media.Matrix" /> by the specified amount about the specified point.</summary>
      <param name="scaleX">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis. </param>
      <param name="scaleY">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
      <param name="centerX">The x-coordinate of the scale operation's center point.</param>
      <param name="centerY">The y-coordinate of the scale operation's center point.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary>Prepends the specified scale about the specified point of this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="scaleX">The x-axis scale factor.</param>
      <param name="scaleY">The y-axis scale factor.</param>
      <param name="centerX">The x-coordinate of the point about which the scale operation is performed.</param>
      <param name="centerY">The y-coordinate of the point about which the scale operation is performed.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary> Prepends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> structure along the x-axis.</param>
      <param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> structure along the y-axis.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary> Changes this <see cref="T:System.Windows.Media.Matrix" /> structure into an identity matrix. </summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary> Appends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary> Prepends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary> Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" />, and <see cref="P:System.Windows.Media.Matrix.OffsetY" /> values of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary> Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Matrix" /> structure with culture-specific formatting information. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" />, and <see cref="P:System.Windows.Media.Matrix.OffsetY" /> values of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <param name="provider">The culture-specific formatting information.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>Transforms the specified point by the <see cref="T:System.Windows.Media.Matrix" /> and returns the result.</summary>
      <returns>The result of transforming <paramref name="point" /> by this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <param name="point">The point to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary>Transforms the specified points by this <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <param name="points">The points to transform. The original points in the array are replaced by their transformed values.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary>Transforms the specified vector by this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>The result of transforming <paramref name="vector" /> by this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <param name="vector">The vector to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary>Transforms the specified vectors by this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="vectors">The vectors to transform. The original vectors in the array are replaced by their transformed values.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary> Appends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
      <param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary> Prepends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
      <param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary>Converts instances of other types to and from a <see cref="T:System.Windows.Media.Matrix" />. </summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.MatrixConverter" />.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a specific type to an instance of a <see cref="T:System.Windows.Media.Matrix" />.  </summary>
      <returns>true if the type can be converted to a <see cref="T:System.Windows.Media.Matrix" />; otherwise, false.</returns>
      <param name="context">The context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of a <see cref="T:System.Windows.Media.Matrix" /> can be converted to a different type. </summary>
      <returns>true if this <see cref="T:System.Windows.Media.Matrix" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">The context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Media.Matrix" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <returns>The <see cref="T:System.Windows.Media.Matrix" /> created from converting <paramref name="value" />.</returns>
      <param name="context">The context information of a type.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">The specified object is null or is a type that cannot be converted to a <see cref="T:System.Windows.Media.Matrix" />.</exception>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Media.Matrix" /> to a specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <param name="context">The context information of a type.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Matrix" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Media.Matrix" /> to.</param>
      <exception cref="T:System.NotSupportedException">The <paramref name="value" /> is null or is not a <see cref="T:System.Windows.Media.Matrix" />, or the <paramref name="destinationType" /> is not a valid conversion type.</exception>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Matrix" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Matrix" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Matrix" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Matrix" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Int32Collection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Matrix" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Matrix" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Matrix" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Matrix" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>Provides services for managing the queue of work items for a thread.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
      <param name="method">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
      <param name="method">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">The object to pass as an argument to the specified method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">The object to pass as an argument to the specified method.</param>
      <param name="args">An array of objects to pass as arguments to the specified method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary>Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously. </summary>
      <param name="priority">The priority at which to begin shutting down the dispatcher.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
      <returns>true if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread. </summary>
      <returns>The dispatcher associated with the current thread.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary>Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</summary>
      <returns>A structure used to re-enable dispatcher processing.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary>Requests that all frames exit, including nested frames.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread. </summary>
      <returns>The dispatcher for <paramref name="thread" />.</returns>
      <param name="thread">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</param>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary>Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</summary>
      <returns>true if the dispatcher has finished shutting down; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary>Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down. </summary>
      <returns>true if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary>Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
      <returns>The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />. </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary>Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="timeout">The maximum amount of time to wait for the operation to complete.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="timeout">The maximum amount of time to wait for the operation to complete.</param>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be null.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with. </summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the given method.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the given method.</param>
      <param name="args">An array of objects to pass as arguments to the given method.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="method">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the given method. This can be null if no arguments are needed.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the specified method.</param>
      <param name="args">An array of objects to pass as arguments to the specified method. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary>Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary>Enters an execute loop.</summary>
      <param name="frame">The frame for the dispatcher to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frame" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is true-or-<paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.-or-Dispatcher processing has been disabled.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary>Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary>Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down. </summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary>Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down. </summary>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary>Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The thread.</returns>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage. </summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority. </summary>
      <param name="priority">The priority to check.</param>
      <param name="parameterName">A string that will be returned by the exception that occurs if the priority is invalid.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
      <exception cref="T:System.InvalidOperationException">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary>Provides event data for <see cref="T:System.Windows.Threading.Dispatcher" /> related events. </summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary>The <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this event. </summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary>Represents an execution loop in the <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherFrame" /> class, by using the specified exit request flag.</summary>
      <param name="exitWhenRequested">Indicates whether this frame will exit when all frames are requested to exit.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Windows.Threading.DispatcherFrame" /> should continue.</summary>
      <returns>true if the frame should continue; otherwise, false.  The default value is true.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary>Provides event data for <see cref="T:System.Windows.Threading.DispatcherHooks" /> events.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" /> class. </summary>
      <param name="operation">The operation associated with the event.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this event. </summary>
      <returns>The <see cref="T:System.Windows.Threading.Dispatcher" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary>Gets the <see cref="T:System.Windows.Threading.DispatcherOperation" /> associated with this event. </summary>
      <returns>The operation.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary>Represents the method that will handle <see cref="T:System.Windows.Threading.DispatcherHooks" /> related events. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary>Provides additional event information about <see cref="T:System.Windows.Threading.Dispatcher" /> processing.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary>Occurs when the dispatcher has no more operations to process. </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary>Occurs when an operation is aborted. </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary>Occurs when an operation completes. </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary>Occurs when an operation is posted to the dispatcher. </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary>Occurs when the priority of an operation is changed. </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary>Represents an object that is associated with a <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherObject" /> class. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <returns>true if the calling thread has access to this object; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> this <see cref="T:System.Windows.Threading.DispatcherObject" /> is associated with. </summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary>Enforces that the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <exception cref="T:System.InvalidOperationException">the calling thread does not have access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>Represents an object that is used to interact with an operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary>Aborts the operation. </summary>
      <returns>true if the operation was aborted; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary>Occurs when the operation is aborted.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary>Occurs when the operation has completed. </summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> that the operation was posted to. </summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary>Gets or sets the priority of the operation in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue. </summary>
      <returns>The priority of the delegate on the queue.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary>Gets the result of the operation after it has completed. </summary>
      <returns>The result of the operation -or- null if the operation has not completed. </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary>Gets the current status of the operation..</summary>
      <returns>The status of the operation.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary>Waits for the operation to complete</summary>
      <returns>The status of the operation. </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />.  This can occur when waiting for an operation that is already executing on the same thread.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary>Waits for the operation to complete in the specified period of time.</summary>
      <returns>The status of the operation. </returns>
      <param name="timeout">The maximum period of time to wait.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />.  This can occur when waiting for an operation that is already executing on the same thread.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary>Represents a delegate to use for dispatcher operations.</summary>
      <returns>The object returned by the callback.</returns>
      <param name="arg">An argument passed to the callback.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary>Describes the possible values for the status of a <see cref="T:System.Windows.Threading.DispatcherOperation" />. </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary>The operation is pending and is still in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary>The operation has aborted. </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary>The operation is completed. </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary>The operation started executing, but has not completed. </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary>Describes the priorities at which operations can be invoked by way of the <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary>The enumeration value is -1.  This is an invalid priority.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary>The enumeration value is 0.  Operations are not processed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary>The enumeration value is 1.  Operations are processed when the system is idle.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary>The enumeration value is 2.  Operations are processed when the application is idle. </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary>The enumeration value is 3.  Operations are processed after background operations have completed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary>The enumeration value is 4.  Operations are processed after all other non-idle operations are completed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary>The enumeration value is 5.  Operations are processed at the same priority as input.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary>The enumeration value is 6.  Operations are processed when layout and render has finished but just before items at input priority are serviced. Specifically this is used when raising the Loaded event.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary>The enumeration value is 7.  Operations processed at the same priority as rendering.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary>The enumeration value is 8.  Operations are processed at the same priority as data binding.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary>The enumeration value is 9.  Operations are processed at normal priority.  This is the typical application priority.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary>The enumeration value is 10.  Operations are processed before other asynchronous operations.  This is the highest priority. </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary>Represents the Dispatcher when it is in a disable state and provides a means to re-enable dispatcher processing. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary>Re-enables dispatcher processing.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> object is equal to this <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> object.</summary>
      <returns>true if the specified object is equal to this <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> object; otherwise, false.</returns>
      <param name="obj">The object to evaluate for equality.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary>Gets a hash code for this instance. </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>Determines whether two <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are equal.</summary>
      <returns>true if the <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are equal; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>Determines whether two <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are not equal.</summary>
      <returns>true if the <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are not equal; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>Provides a synchronization context for Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the current <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the specified <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="dispatcher">The <see cref="T:System.Windows.Threading.Dispatcher" /> to associate this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>Creates a copy of this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />. </summary>
      <returns>The copy of this synchronization context.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invokes the callback in the synchronization context asynchronously. </summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invokes the callback in the synchronization context synchronously.</summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>Waits for any or all the elements in the specified array to receive a signal.</summary>
      <returns>The array index of the object that satisfied the wait.</returns>
      <param name="waitHandles">An array that contains the native operating system handles.</param>
      <param name="waitAll">true to wait for all handles; false to wait for any handle.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>A timer that is integrated into the <see cref="T:System.Windows.Threading.Dispatcher" /> queue which is processed at a specified interval of time and at a specified priority. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which uses the specified time interval, priority, event handler, and <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="interval">The period of time between ticks.</param>
      <param name="priority">The priority at which to invoke the timer.</param>
      <param name="callback">The event handler to call when the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> event occurs.</param>
      <param name="dispatcher">The dispatcher the timer is associated with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which processes timer events at the specified priority.</summary>
      <param name="priority">The priority at which to invoke the timer.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which runs on the specified <see cref="T:System.Windows.Threading.Dispatcher" /> at the specified priority.</summary>
      <param name="priority">The priority at which to invoke the timer.</param>
      <param name="dispatcher">The dispatcher the timer is associated with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this <see cref="T:System.Windows.Threading.DispatcherTimer" />. </summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>Gets or sets the period of time between timer ticks. </summary>
      <returns>The period of time between ticks. The default is 00:00:00.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>Gets or sets a value that indicates whether the timer is running. </summary>
      <returns>true if the timer is enabled; otherwise, false.  The default is false.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>Starts the <see cref="T:System.Windows.Threading.DispatcherTimer" />. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>Stops the <see cref="T:System.Windows.Threading.DispatcherTimer" />. </summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary>Gets or sets a user-defined data object that is passed to the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> event handler. </summary>
      <returns>The user-defined data.  The default is null.</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>Occurs when the timer interval has elapsed. </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary>Provides data for the <see cref="T:System.Windows.Threading.Dispatcher" /> <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary>Gets the exception that was raised when executing code by way of the dispatcher. </summary>
      <returns>The exception. </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary>Gets or sets whether the exception event has been handled. </summary>
      <returns>true if the exception was handled; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary>Provides data for the <see cref="T:System.Windows.Threading.Dispatcher" /> <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> event.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary>Gets the exception that was raised when executing code by way of the dispatcher.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary>Gets or sets whether the exception should be caught and the event handlers called. </summary>
      <returns>true if the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> should be raised; otherwise; false.  The default value is true.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.XML.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary>Specifies the amount of input or output checking that the created <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Xml.XmlWriter" /> objects perform.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary>The <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.Xml.XmlWriter" /> object automatically detects whether document or fragment checking should be performed, and does the appropriate checking. In the case where you are wrapping another <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.Xml.XmlWriter" /> object, the outer object does not do any additional conformance checking. Conformance checking is left up to the underlying object.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary>The XML data is a well-formed XML fragment.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary>The XML data is in conformance to the rules for a well-formed XML 1.0 document.</summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary>Specifies the options for processing DTDs. The <see cref="T:System.Xml.DtdProcessing" /> enumeration is used by <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary>Specifies that when a DTD is encountered, an <see cref="T:System.Xml.XmlException" /> is thrown with a message that states that DTDs are prohibited. This is the default behavior.</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary>Causes the DOCTYPE element to be ignored. No DTD processing occurs. </summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary>Used for parsing DTDs.</summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary>Specifies how the <see cref="T:System.Xml.XmlTextReader" /> or <see cref="T:System.Xml.XmlValidatingReader" /> handle entities.</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary>Expands all entities and returns the expanded nodes.</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary>Expands character entities and returns general entities as <see cref="F:System.Xml.XmlNodeType.EntityReference" /> nodes. </summary>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary>Specifies formatting options for the <see cref="T:System.Xml.XmlTextWriter" />.</summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary>No special formatting is applied. This is the default.</summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary>Causes child elements to be indented according to the <see cref="P:System.Xml.XmlTextWriter.Indentation" /> and <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> settings. </summary>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary>Enables a class to return an <see cref="T:System.Xml.XmlNode" /> from the current context or position.</summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary>Returns the <see cref="T:System.Xml.XmlNode" /> for the current position.</summary>
      <returns>The XmlNode for the current position.</returns>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>Provides an interface to enable a class to return line and position information.</summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>Gets a value indicating whether the class can return line information.</summary>
      <returns>true if <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> can be provided; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>Gets the current line number.</summary>
      <returns>The current line number or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> returns false).</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>Gets the current line position.</summary>
      <returns>The current line position or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> returns false).</returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary>Provides read-only access to a set of prefix and namespace mappings.</summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>Gets a collection of defined prefix-namespace mappings that are currently in scope.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary>Gets the namespace URI mapped to the specified prefix.</summary>
      <returns>The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.</returns>
      <param name="prefix">The prefix whose namespace URI you wish to find.</param>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary>Gets the prefix that is mapped to the specified namespace URI.</summary>
      <returns>The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.</returns>
      <param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary>Specifies whether to remove duplicate namespace declarations in the <see cref="T:System.Xml.XmlWriter" />. </summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary>Specifies that duplicate namespace declarations will not be removed.</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary>Specifies that duplicate namespace declarations will be removed. For the duplicate namespace to be removed, the prefix and the namespace must match.</summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>Implements a single-threaded <see cref="T:System.Xml.XmlNameTable" />.</summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>Initializes a new instance of the NameTable class.</summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>Atomizes the specified string and adds it to the NameTable.</summary>
      <returns>The atomized string or the existing string if one already exists in the NameTable. If <paramref name="len" /> is zero, String.Empty is returned.</returns>
      <param name="key">The character array containing the string to add. </param>
      <param name="start">The zero-based index into the array specifying the first character of the string. </param>
      <param name="len">The number of characters in the string. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />-or- <paramref name="start" /> &gt;= <paramref name="key" />.Length -or- <paramref name="len" /> &gt;= <paramref name="key" />.Length The above conditions do not cause an exception to be thrown if <paramref name="len" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>Atomizes the specified string and adds it to the NameTable.</summary>
      <returns>The atomized string or the existing string if it already exists in the NameTable.</returns>
      <param name="key">The string to add. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>Gets the atomized string containing the same characters as the specified range of characters in the given array.</summary>
      <returns>The atomized string or null if the string has not already been atomized. If <paramref name="len" /> is zero, String.Empty is returned.</returns>
      <param name="key">The character array containing the name to find. </param>
      <param name="start">The zero-based index into the array specifying the first character of the name. </param>
      <param name="len">The number of characters in the name. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />-or- <paramref name="start" /> &gt;= <paramref name="key" />.Length -or- <paramref name="len" /> &gt;= <paramref name="key" />.Length The above conditions do not cause an exception to be thrown if <paramref name="len" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>Gets the atomized string with the specified value.</summary>
      <returns>The atomized string object or null if the string has not already been atomized.</returns>
      <param name="value">The name to find. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary>Specifies how to handle line breaks.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary>New line characters are replaced to match the character specified in the <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" />  property.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary>New line characters are entitized. This setting preserves all characters when the output is read by a normalizing <see cref="T:System.Xml.XmlReader" />.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary>The new line characters are unchanged. The output is the same as the input.</summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>Specifies the state of the reader.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>The Read method has not been called.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>The Read method has been called. Additional methods may be called on the reader.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>An error occurred that prevents the read operation from continuing.</summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>The end of the file has been reached successfully.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>The <see cref="M:System.Xml.XmlReader.Close" /> method has been called.</summary>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary>Specifies the type of validation to perform.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary>No validation is performed. This setting creates an XML 1.0 compliant non-validating parser.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary>Validates if DTD or schema information is found.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary>Validates according to the DTD.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary>Validate according to XML-Data Reduced (XDR) schemas, including inline XDR schemas. XDR schemas are recognized using the x-schema namespace prefix or the <see cref="P:System.Xml.XmlValidatingReader.Schemas" /> property.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary>Validate according to XML Schema definition language (XSD) schemas, including inline XML Schemas. XML Schemas are associated with namespace URIs either by using the schemaLocation attribute or the provided Schemas property.</summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary>Specifies how white space is handled.</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary>Return Whitespace and SignificantWhitespace nodes. This is the default.</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary>Return SignificantWhitespace nodes only.</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary>Return no Whitespace and no SignificantWhitespace nodes.</summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>Specifies the state of the <see cref="T:System.Xml.XmlWriter" />.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>Indicates that a Write method has not yet been called.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>Indicates that the prolog is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>Indicates that an element start tag is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>Indicates that an attribute value is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>Indicates that element content is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>Indicates that the <see cref="M:System.Xml.XmlWriter.Close" /> method has been called.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary>An exception has been thrown, which has left the <see cref="T:System.Xml.XmlWriter" /> in an invalid state. You can call the <see cref="M:System.Xml.XmlWriter.Close" /> method to put the <see cref="T:System.Xml.XmlWriter" /> in the <see cref="F:System.Xml.WriteState.Closed" /> state. Any other <see cref="T:System.Xml.XmlWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" />.</summary>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary>Represents an attribute. Valid and default values for the attribute are defined in a document type definition (DTD) or schema.</summary>
    </member>
    <member name="M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlAttribute" /> class.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace uniform resource identifier (URI).</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)">
      <summary>Adds the specified node to the end of the list of child nodes, of this node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> added.</returns>
      <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to add.</param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary>Gets the base Uniform Resource Identifier (URI) of the node.</summary>
      <returns>The location from which the node was loaded or String.Empty if the node has no base URI. Attribute nodes have the same base URI as their owner element. If an attribute node does not have an owner element, BaseURI returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The duplicate node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself </param>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary>Gets or sets the concatenated values of the node and all its children.</summary>
      <returns>The concatenated values of the node and all its children. For attribute nodes, this property has the same functionality as the <see cref="P:System.Xml.XmlAttribute.Value" /> property.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary>Gets or sets the value of the attribute.</summary>
      <returns>The attribute value.</returns>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Inserts the specified node immediately after the specified reference node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> inserted.</returns>
      <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to insert. </param>
      <param name="refChild">The <see cref="T:System.Xml.XmlNode" /> that is the reference node. The <paramref name="newChild" /> is placed after the <paramref name="refChild" />.</param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.The <paramref name="refChild" /> is not a child of this node.This node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Inserts the specified node immediately before the specified reference node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> inserted.</returns>
      <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to insert. </param>
      <param name="refChild">The <see cref="T:System.Xml.XmlNode" /> that is the reference node. The <paramref name="newChild" /> is placed before this node. </param>
      <exception cref="T:System.InvalidOperationException">The current node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.The <paramref name="refChild" /> is not a child of this node.This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>The name of the attribute node with the prefix removed. In the following example &lt;book bk:genre= 'novel'&gt;, the LocalName of the attribute is genre.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>The qualified name of the attribute node.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary>Gets the namespace URI of this node.</summary>
      <returns>The namespace URI of this node. If the attribute is not explicitly given a namespace, this property returns String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The node type for XmlAttribute nodes is XmlNodeType.Attribute.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</summary>
      <returns>An <see cref="T:System.Xml.XmlDocument" />.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary>Gets the <see cref="T:System.Xml.XmlElement" /> to which the attribute belongs.</summary>
      <returns>The XmlElement that the attribute belongs to or null if this attribute is not part of an XmlElement.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary>Gets the parent of this node. For XmlAttribute nodes, this property always returns null.</summary>
      <returns>For XmlAttribute nodes, this property always returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary>Gets or sets the namespace prefix of this node.</summary>
      <returns>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</returns>
      <exception cref="T:System.ArgumentException">This node is read-only. </exception>
      <exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.The specified prefix is malformed.The namespaceURI of this node is null.The specified prefix is "xml", and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".This node is an attribute, the specified prefix is "xmlns", and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/".This node is an attribute, and the qualifiedName of this node is "xmlns" [Namespaces]. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)">
      <summary>Adds the specified node to the beginning of the list of child nodes for this node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> added.</returns>
      <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to add. If it is an <see cref="T:System.Xml.XmlDocumentFragment" />, the entire contents of the document fragment are moved into the child list of this node.</param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)">
      <summary>Removes the specified child node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> removed.</returns>
      <param name="oldChild">The <see cref="T:System.Xml.XmlNode" /> to remove.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="oldChild" /> is not a child of this node. Or this node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Replaces the child node specified with the new child node specified.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> replaced.</returns>
      <param name="newChild">The new child <see cref="T:System.Xml.XmlNode" />.</param>
      <param name="oldChild">The <see cref="T:System.Xml.XmlNode" /> to replace. </param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only.The <paramref name="oldChild" /> is not a child of this node. </exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.SchemaInfo">
      <summary>Gets the post-schema-validation-infoset that has been assigned to this node as a result of schema validation.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> containing the post-schema-validation-infoset of this node.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary>Gets a value indicating whether the attribute value was explicitly set.</summary>
      <returns>true if this attribute was explicitly given a value in the original instance document; otherwise, false. A value of false indicates that the value of the attribute came from the DTD.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlNode.NodeType" /> of the node. For XmlAttribute nodes, this property is the value of attribute.</returns>
      <exception cref="T:System.ArgumentException">The node is read-only and a set operation is called. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary>Represents a collection of attributes that can be accessed by name or index.</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary>Inserts the specified attribute as the last node in the collection.</summary>
      <returns>The XmlAttribute to append to the collection.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to insert. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> was created from a document different from the one that created this collection. </exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary>Copies all the <see cref="T:System.Xml.XmlAttribute" /> objects from this collection into the given array.</summary>
      <param name="array">The array that is the destination of the objects copied from this collection. </param>
      <param name="index">The index in the array where copying begins. </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>Inserts the specified attribute immediately after the specified reference attribute.</summary>
      <returns>The XmlAttribute to insert into the collection.</returns>
      <param name="newNode">The <see cref="T:System.Xml.XmlAttribute" /> to insert. </param>
      <param name="refNode">The <see cref="T:System.Xml.XmlAttribute" /> that is the reference attribute. <paramref name="newNode" /> is placed after the <paramref name="refNode" />. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="newNode" /> was created from a document different from the one that created this collection. Or the <paramref name="refNode" /> is not a member of this collection. </exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>Inserts the specified attribute immediately before the specified reference attribute.</summary>
      <returns>The XmlAttribute to insert into the collection.</returns>
      <param name="newNode">The <see cref="T:System.Xml.XmlAttribute" /> to insert. </param>
      <param name="refNode">The <see cref="T:System.Xml.XmlAttribute" /> that is the reference attribute. <paramref name="newNode" /> is placed before the <paramref name="refNode" />. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="newNode" /> was created from a document different from the one that created this collection. Or the <paramref name="refNode" /> is not a member of this collection. </exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary>Gets the attribute with the specified index.</summary>
      <returns>The <see cref="T:System.Xml.XmlAttribute" /> at the specified index.</returns>
      <param name="i">The index of the attribute. </param>
      <exception cref="T:System.IndexOutOfRangeException">The index being passed in is out of range. </exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary>Gets the attribute with the specified name.</summary>
      <returns>The <see cref="T:System.Xml.XmlAttribute" /> with the specified name. If the attribute does not exist, this property returns null.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary>Gets the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
      <returns>The <see cref="T:System.Xml.XmlAttribute" /> with the specified local name and namespace URI. If the attribute does not exist, this property returns null.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary>Inserts the specified attribute as the first node in the collection.</summary>
      <returns>The XmlAttribute added to the collection.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to insert. </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary>Removes the specified attribute from the collection.</summary>
      <returns>The node removed or null if it is not found in the collection.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to remove. </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary>Removes all attributes from the collection.</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary>Removes the attribute corresponding to the specified index from the collection.</summary>
      <returns>Returns null if there is no attribute at the specified index.</returns>
      <param name="i">The index of the node to remove. The first node has index 0. </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary>Adds a <see cref="T:System.Xml.XmlNode" /> using its <see cref="P:System.Xml.XmlNode.Name" /> property </summary>
      <returns>If the <paramref name="node" /> replaces an existing node with the same name, the old node is returned; otherwise, the added node is returned.</returns>
      <param name="node">An attribute node to store in this collection. The node will later be accessible using the name of the node. If a node with that name is already present in the collection, it is replaced by the new one; otherwise, the node is appended to the end of the collection. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> was created from a different <see cref="T:System.Xml.XmlDocument" /> than the one that created this collection.This XmlAttributeCollection is read-only. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> is an <see cref="T:System.Xml.XmlAttribute" /> that is already an attribute of another <see cref="T:System.Xml.XmlElement" /> object. To re-use attributes in other elements, you must clone the XmlAttribute objects you want to re-use. </exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)" />.</summary>
      <param name="array">The array that is the destination of the objects copied from this collection. </param>
      <param name="index">The index in the array where copying begins. </param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count">
      <summary>For a description of this member, see <see cref="P:System.Xml.XmlAttributeCollection.System.Collections.ICollection.Count" />.</summary>
      <returns>Returns an int that contains the count of the attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Xml.XmlAttributeCollection.System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Returns true if the collection is synchronized.</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Xml.XmlAttributeCollection.System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>Returns the <see cref="T:System.Object" /> that is the root of the collection.</returns>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary>Represents a CDATA section.</summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlCDataSection" /> class.</summary>
      <param name="data">
        <see cref="T:System.String" /> that contains character data.</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. Because CDATA nodes do not have children, regardless of the parameter setting, the cloned node will always include the data content. </param>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For CDATA nodes, the local name is #cdata-section.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For CDATA nodes, the name is #cdata-section.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The node type. For CDATA nodes, the value is XmlNodeType.CDATA.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.ParentNode"></member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary>Provides text manipulation methods that are used by several classes.</summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlCharacterData" /> class.</summary>
      <param name="data">String that contains character data to be added to document.</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> to contain character data.</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary>Appends the specified string to the end of the character data of the node.</summary>
      <param name="strData">The string to insert into the existing string. </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary>Contains the data of the node.</summary>
      <returns>The data of the node.</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary>Removes a range of characters from the node.</summary>
      <param name="offset">The position within the string to start deleting. </param>
      <param name="count">The number of characters to delete. </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary>Gets or sets the concatenated values of the node and all the children of the node.</summary>
      <returns>The concatenated values of the node and all the children of the node.</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary>Inserts the specified string at the specified character offset.</summary>
      <param name="offset">The position within the string to insert the supplied string data. </param>
      <param name="strData">The string data that is to be inserted into the existing string. </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary>Gets the length of the data, in characters.</summary>
      <returns>The length, in characters, of the string in the <see cref="P:System.Xml.XmlCharacterData.Data" /> property. The length may be zero; that is, CharacterData nodes can be empty.</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary>Replaces the specified number of characters starting at the specified offset with the specified string.</summary>
      <param name="offset">The position within the string to start replacing. </param>
      <param name="count">The number of characters to replace. </param>
      <param name="strData">The new data that replaces the old string data. </param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary>Retrieves a substring of the full string from the specified range.</summary>
      <returns>The substring corresponding to the specified range.</returns>
      <param name="offset">The position within the string to start retrieving. An offset of zero indicates the starting point is at the start of the data. </param>
      <param name="count">The number of characters to retrieve. </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The value of the node.</returns>
      <exception cref="T:System.ArgumentException">Node is read-only. </exception>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary>Represents the content of an XML comment.</summary>
    </member>
    <member name="M:System.Xml.XmlComment.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlComment" /> class.</summary>
      <param name="comment">The content of the comment element.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. Because comment nodes do not have children, the cloned node always includes the text content, regardless of the parameter setting. </param>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For comment nodes, the value is #comment.</returns>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For comment nodes, the value is #comment.</returns>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For comment nodes, the value is XmlNodeType.Comment.</returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. Because comment nodes do not have children, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>Encodes and decodes XML names and provides methods for converting between common language runtime types and XML Schema definition language (XSD) types. When converting data types the values returned are locale independent.</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlConvert" /> class. </summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>Decodes a name. This method does the reverse of the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> and <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> methods.</summary>
      <returns>The decoded name.</returns>
      <param name="name">The name to be transformed. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>Converts the name to a valid XML local name.</summary>
      <returns>The encoded name.</returns>
      <param name="name">The name to be encoded. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>Converts the name to a valid XML name.</summary>
      <returns>Returns the name with any invalid characters replaced by an escape string.</returns>
      <param name="name">A name to be translated. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>Verifies the name is valid according to the XML specification.</summary>
      <returns>The encoded name.</returns>
      <param name="name">The name to be encoded. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary>Checks whether the passed-in character is a valid non-colon character type.</summary>
      <returns>Returns true if the character is a valid non-colon character type; otherwise, false.</returns>
      <param name="ch">The character to verify as a non-colon character.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary>Returns the passed-in character instance if the character in the argument is a valid public id character, otherwise null.</summary>
      <returns>Returns the passed-in character if the character is a valid public id character, otherwise null.</returns>
      <param name="ch">
        <see cref="T:System.Char" /> object to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary>Checks if the passed-in character is a valid Start Name Character type.</summary>
      <returns>true if the character is a valid Start Name Character type; otherwise, false. </returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary>Checks if the passed-in character is a valid XML whitespace character.</summary>
      <returns>true if the passed in character is a valid XML whitespace character; otherwise false.</returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary>Checks if the passed-in character is a valid XML character.</summary>
      <returns>true if the passed in character is a valid XML character; otherwise false.</returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary>Checks if the passed-in surrogate pair of characters is a valid XML character.</summary>
      <returns>true if the passed in surrogate pair of characters is a valid XML character; otherwise false.</returns>
      <param name="lowChar">The surrogate character to validate.</param>
      <param name="highChar">The surrogate character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Boolean" /> equivalent.</summary>
      <returns>A Boolean value, that is, true or false.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a Boolean value. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>A Byte equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Char" /> equivalent.</summary>
      <returns>A Char representing the single character.</returns>
      <param name="s">The string containing a single character to convert. </param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter contains more than one character. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</summary>
      <returns>A DateTime equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string or is not in the correct format. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</summary>
      <returns>A DateTime equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <param name="format">The format structure to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is String.Empty -or- <paramref name="s" /> does not contain a date and time that corresponds to <paramref name="format" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</summary>
      <returns>A DateTime equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <param name="formats">An array containing the format structures to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or an element of <paramref name="formats" /> is String.Empty -or- <paramref name="s" /> does not contain a date and time that corresponds to any of the elements of <paramref name="formats" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> specified</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent of the <see cref="T:System.String" />.</returns>
      <param name="s">The <see cref="T:System.String" /> value to convert.</param>
      <param name="dateTimeOption">One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> values that specify whether the date should be converted to local time or preserved as Coordinated Universal Time (UTC), if it is a UTC date.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dateTimeOption" /> value is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string or is not in a valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</returns>
      <param name="s">The string to convert.NoteThe string must conform to a subset of the W3C Recommendation for the XML dateTime type. For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The argument passed to this method is outside the range of allowable values. For information about allowable values, see <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.FormatException">The argument passed to this method does not conform to a subset of the W3C Recommendations for the XML dateTime type. For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</returns>
      <param name="s">The string to convert.</param>
      <param name="format">The format from which <paramref name="s" /> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <paramref name="s" /> is validated against this format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string or is not in the specified format.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</returns>
      <param name="s">The string to convert.</param>
      <param name="formats">An array of formats from which <paramref name="s" /> can be converted. Each format in <paramref name="formats" /> can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <paramref name="s" /> is validated against one of these formats.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Decimal" /> equivalent.</summary>
      <returns>A Decimal equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Double" /> equivalent.</summary>
      <returns>A Double equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Guid" /> equivalent.</summary>
      <returns>A Guid equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int16" /> equivalent.</summary>
      <returns>An Int16 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int32" /> equivalent.</summary>
      <returns>An Int32 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int64" /> equivalent.</summary>
      <returns>An Int64 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.SByte" /> equivalent.</summary>
      <returns>An SByte equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Single" /> equivalent.</summary>
      <returns>A Single equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>Converts the <see cref="T:System.Boolean" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Boolean, that is, "true" or "false".</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary>Converts the <see cref="T:System.Byte" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Byte.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>Converts the <see cref="T:System.Char" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Char.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the DateTime in the format yyyy-MM-ddTHH:mm:ss where 'T' is a constant literal.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the DateTime in the specified format.</returns>
      <param name="value">The value to convert. </param>
      <param name="format">The format structure that defines how to display the converted string. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> specified.</summary>
      <returns>A <see cref="T:System.String" /> equivalent of the <see cref="T:System.DateTime" />.</returns>
      <param name="value">The <see cref="T:System.DateTime" /> value to convert.</param>
      <param name="dateTimeOption">One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> values that specify how to treat the <see cref="T:System.DateTime" /> value.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="dateTimeOption" /> value is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> or <paramref name="dateTimeOption" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary>Converts the supplied <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.DateTimeOffset" />.</returns>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> to be converted.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary>Converts the supplied <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.String" /> in the specified format.</summary>
      <returns>A <see cref="T:System.String" /> representation in the specified format of the supplied <see cref="T:System.DateTimeOffset" />.</returns>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> to be converted.</param>
      <param name="format">The format to which <paramref name="s" /> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.)</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>Converts the <see cref="T:System.Decimal" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Decimal.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>Converts the <see cref="T:System.Double" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Double.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>Converts the <see cref="T:System.Guid" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Guid.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>Converts the <see cref="T:System.Int16" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Int16.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>Converts the <see cref="T:System.Int32" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Int32.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>Converts the <see cref="T:System.Int64" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Int64.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>Converts the <see cref="T:System.SByte" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the SByte.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>Converts the <see cref="T:System.Single" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Single.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>Converts the <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the TimeSpan.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary>Converts the <see cref="T:System.UInt16" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the UInt16.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>Converts the <see cref="T:System.UInt32" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the UInt32.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>Converts the <see cref="T:System.UInt64" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the UInt64.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" /> equivalent.</summary>
      <returns>A TimeSpan equivalent of the string.</returns>
      <param name="s">The string to convert. The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in correct format to represent a TimeSpan value. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt16" /> equivalent.</summary>
      <returns>A UInt16 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt32" /> equivalent.</summary>
      <returns>A UInt32 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt64" /> equivalent.</summary>
      <returns>A UInt64 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>Verifies that the name is a valid name according to the W3C Extended Markup Language recommendation.</summary>
      <returns>The name, if it is a valid XML name.</returns>
      <param name="name">The name to verify. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not a valid XML name. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>Verifies that the name is a valid NCName according to the W3C Extended Markup Language recommendation. An NCName is a name that cannot contain a colon.</summary>
      <returns>The name, if it is a valid NCName.</returns>
      <param name="name">The name to verify. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or String.Empty. </exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not a valid non-colon name. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary>Verifies that the string is a valid NMTOKEN according to the W3C XML Schema Part2: Datatypes recommendation</summary>
      <returns>The name token, if it is a valid NMTOKEN.</returns>
      <param name="name">The string you wish to verify.</param>
      <exception cref="T:System.Xml.XmlException">The string is not a valid name token.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary>Returns the passed in string instance if all the characters in the string argument are valid public id characters.</summary>
      <returns>Returns the passed-in string if all the characters in the argument are valid public id characters.</returns>
      <param name="publicId">
        <see cref="T:System.String" /> that contains the id to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyTOKEN(System.String)">
      <summary>Verifies that the string is a valid token according to the W3C XML Schema Part2: Datatypes recommendation.</summary>
      <returns>The token, if it is a valid token.</returns>
      <param name="token">The string value you wish to verify.</param>
      <exception cref="T:System.Xml.XmlException">The string value is not a valid token.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary>Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters. </summary>
      <returns>Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters, otherwise null.</returns>
      <param name="content">
        <see cref="T:System.String" /> to verify.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary>Returns the passed-in string if all the characters and surrogate pair characters in the string argument are valid XML characters, otherwise null. </summary>
      <returns>Returns the passed-in string if all the characters and surrogate-pair characters in the string argument are valid XML characters, otherwise null.</returns>
      <param name="content">
        <see cref="T:System.String" /> that contains characters to verify.</param>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary>Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary>Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary>Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary>Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary>Time zone information should be preserved when converting.</summary>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary>Represents the XML declaration node &lt;?xml version='1.0'...?&gt;.</summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlDeclaration" /> class.</summary>
      <param name="version">The XML version; see the <see cref="P:System.Xml.XmlDeclaration.Version" /> property.</param>
      <param name="encoding">The encoding scheme; see the <see cref="P:System.Xml.XmlDeclaration.Encoding" /> property.</param>
      <param name="standalone">Indicates whether the XML document depends on an external DTD; see the <see cref="P:System.Xml.XmlDeclaration.Standalone" /> property.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. Because XmlDeclaration nodes do not have children, the cloned node always includes the data value, regardless of the parameter setting. </param>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary>Gets or sets the encoding level of the XML document.</summary>
      <returns>The valid character encoding name. The most commonly supported character encoding names for XML are the following: Category Encoding Names Unicode UTF-8, UTF-16 ISO 10646 ISO-10646-UCS-2, ISO-10646-UCS-4 ISO 8859 ISO-8859-n (where "n" is a digit from 1 to 9) JIS X-0208-1997 ISO-2022-JP, Shift_JIS, EUC-JP This value is optional. If a value is not set, this property returns String.Empty.If an encoding attribute is not included, UTF-8 encoding is assumed when the document is written or saved out.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary>Gets or sets the concatenated values of the XmlDeclaration.</summary>
      <returns>The concatenated values of the XmlDeclaration (that is, everything between &lt;?xml and ?&gt;).</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlDeclaration nodes, the local name is xml.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For XmlDeclaration nodes, the name is xml.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For XmlDeclaration nodes, this value is XmlNodeType.XmlDeclaration.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary>Gets or sets the value of the standalone attribute.</summary>
      <returns>Valid values are yes if all entity declarations required by the XML document are contained within the document or no if an external document type definition (DTD) is required. If a standalone attribute is not present in the XML declaration, this property returns String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary>Gets or sets the value of the XmlDeclaration.</summary>
      <returns>The contents of the XmlDeclaration (that is, everything between &lt;?xml and ?&gt;).</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary>Gets the XML version of the document.</summary>
      <returns>The value is always 1.0.</returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. Because XmlDeclaration nodes do not have children, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary>Represents an XML document.</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlDocument" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary>Initializes a new instance of the XmlDocument class with the specified <see cref="T:System.Xml.XmlImplementation" />.</summary>
      <param name="imp">The XmlImplementation to use. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the XmlDocument class with the specified <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="nt">The XmlNameTable to use. </param>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The location from which the node was loaded.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned XmlDocument node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlDocument.Name" />.</summary>
      <returns>The new XmlAttribute.</returns>
      <param name="name">The qualified name of the attribute. If the name contains a colon, the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the first colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name following the first colon. The <see cref="P:System.Xml.XmlNode.NamespaceURI" /> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case NamespaceURI has a value of http://www.w3.org/2000/xmlns/. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlAttribute.</returns>
      <param name="qualifiedName">The qualified name of the attribute. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon. </param>
      <param name="namespaceURI">The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlAttribute.</returns>
      <param name="prefix">The prefix of the attribute (if any). String.Empty and null are equivalent. </param>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute (if any). String.Empty and null are equivalent. If <paramref name="prefix" /> is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlCDataSection" /> containing the specified data.</summary>
      <returns>The new XmlCDataSection.</returns>
      <param name="data">The content of the new XmlCDataSection. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlComment" /> containing the specified data.</summary>
      <returns>The new XmlComment.</returns>
      <param name="data">The content of the new XmlComment. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary>Creates a default attribute with the specified prefix, local name and namespace URI.</summary>
      <returns>The new <see cref="T:System.Xml.XmlAttribute" />.</returns>
      <param name="prefix">The prefix of the attribute (if any). </param>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute (if any). </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary>Creates an <see cref="T:System.Xml.XmlDocumentFragment" />.</summary>
      <returns>The new XmlDocumentFragment.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary>Returns a new <see cref="T:System.Xml.XmlDocumentType" /> object.</summary>
      <returns>The new XmlDocumentType.</returns>
      <param name="name">Name of the document type. </param>
      <param name="publicId">The public identifier of the document type or null. You can specify a public URI and also a system identifier to identify the location of the external DTD subset.</param>
      <param name="systemId">The system identifier of the document type or null. Specifies the URL of the file location for the external DTD subset.</param>
      <param name="internalSubset">The DTD internal subset of the document type or null. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary>Creates an element with the specified name.</summary>
      <returns>The new XmlElement.</returns>
      <param name="name">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlElement" /> with the qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlElement.</returns>
      <param name="qualifiedName">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </param>
      <param name="namespaceURI">The namespace URI of the element. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>Creates an element with the specified <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new <see cref="T:System.Xml.XmlElement" />.</returns>
      <param name="prefix">The prefix of the new element (if any). String.Empty and null are equivalent. </param>
      <param name="localName">The local name of the new element. </param>
      <param name="namespaceURI">The namespace URI of the new element (if any). String.Empty and null are equivalent. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlEntityReference" /> with the specified name.</summary>
      <returns>The new XmlEntityReference.</returns>
      <param name="name">The name of the entity reference. </param>
      <exception cref="T:System.ArgumentException">The name is invalid (for example, names starting with'#' are invalid.) </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator">
      <summary>Creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating this document.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating this document positioned on the <see cref="T:System.Xml.XmlNode" /> specified.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> you want the navigator initially positioned on. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified node type, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlNode.</returns>
      <param name="nodeTypeString">String version of the <see cref="T:System.Xml.XmlNodeType" /> of the new node. This parameter must be one of the values listed in the table below. </param>
      <param name="name">The qualified name of the new node. If the name contains a colon, it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components. </param>
      <param name="namespaceURI">The namespace URI of the new node. </param>
      <exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name; or <paramref name="nodeTypeString" /> is not one of the strings listed below. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlNode.</returns>
      <param name="type">The XmlNodeType of the new node. </param>
      <param name="name">The qualified name of the new node. If the name contains a colon then it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components. </param>
      <param name="namespaceURI">The namespace URI of the new node. </param>
      <exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary>Creates a <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlNode.</returns>
      <param name="type">The XmlNodeType of the new node. </param>
      <param name="prefix">The prefix of the new node. </param>
      <param name="name">The local name of the new node. </param>
      <param name="namespaceURI">The namespace URI of the new node. </param>
      <exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlProcessingInstruction" /> with the specified name and data.</summary>
      <returns>The new XmlProcessingInstruction.</returns>
      <param name="target">The name of the processing instruction. </param>
      <param name="data">The data for the processing instruction. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlSignificantWhitespace" /> node.</summary>
      <returns>A new XmlSignificantWhitespace node.</returns>
      <param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlText" /> with the specified text.</summary>
      <returns>The new XmlText node.</returns>
      <param name="text">The text for the Text node. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlWhitespace" /> node.</summary>
      <returns>A new XmlWhitespace node.</returns>
      <param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlDeclaration" /> node with the specified values.</summary>
      <returns>The new XmlDeclaration node.</returns>
      <param name="version">The version must be "1.0". </param>
      <param name="encoding">The value of the encoding attribute. This is the encoding that is used when you save the <see cref="T:System.Xml.XmlDocument" /> to a file or a stream; therefore, it must be set to a string supported by the <see cref="T:System.Text.Encoding" /> class, otherwise <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> fails. If this is null or String.Empty, the Save method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.Note: If the XmlDocument is saved to either a <see cref="T:System.IO.TextWriter" /> or an <see cref="T:System.Xml.XmlTextWriter" />, this encoding value is discarded. Instead, the encoding of the TextWriter or the XmlTextWriter is used. This ensures that the XML written out can be read back using the correct encoding. </param>
      <param name="standalone">The value must be either "yes" or "no". If this is null or String.Empty, the Save method does not write a standalone attribute on the XML declaration. </param>
      <exception cref="T:System.ArgumentException">The values of <paramref name="version" /> or <paramref name="standalone" /> are something other than the ones specified above. </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary>Gets the root <see cref="T:System.Xml.XmlElement" /> for the document.</summary>
      <returns>The XmlElement that represents the root of the XML document tree. If no root exists, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary>Gets the node containing the DOCTYPE declaration.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> containing the DocumentType (DOCTYPE declaration).</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary>Gets the <see cref="T:System.Xml.XmlElement" /> with the specified ID.</summary>
      <returns>The XmlElement with the matching ID or null if no matching element is found.</returns>
      <param name="elementId">The attribute ID to match. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.Name" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes. If no nodes match <paramref name="name" />, the returned collection will be empty.</returns>
      <param name="name">The qualified name to match. It is matched against the Name property of the matching node. The special value "*" matches all tags. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes. If no nodes match the specified <paramref name="localName" /> and <paramref name="namespaceURI" />, the returned collection will be empty.</returns>
      <param name="localName">The LocalName to match. The special value "*" matches all tags. </param>
      <param name="namespaceURI">NamespaceURI to match. </param>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary>Gets the <see cref="T:System.Xml.XmlImplementation" /> object for the current document.</summary>
      <returns>The XmlImplementation object for the current document.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary>Imports a node from another document to the current document.</summary>
      <returns>The imported <see cref="T:System.Xml.XmlNode" />.</returns>
      <param name="node">The node being imported. </param>
      <param name="deep">true to perform a deep clone; otherwise, false. </param>
      <exception cref="T:System.InvalidOperationException">Calling this method on a node type which cannot be imported. </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerText">
      <summary>Gets the concatenated values of the node and all its child nodes.</summary>
      <returns>The concatenated values of the node and all its child nodes.</returns>
      <exception cref="T:System.InvalidOperationException">Setting the value on the <see cref="P:System.Xml.XmlDocument.InnerText" /> property is not allowed.</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary>Gets or sets the markup representing the children of the current node.</summary>
      <returns>The markup of the children of the current node.</returns>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary>Gets a value indicating whether the current node is read-only.</summary>
      <returns>true if the current node is read-only; otherwise false. XmlDocument nodes always return false.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary>Loads the XML document from the specified stream.</summary>
      <param name="inStream">The stream containing the XML document to load. </param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, a <see cref="T:System.IO.FileNotFoundException" /> is raised. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary>Loads the XML document from the specified <see cref="T:System.IO.TextReader" />.</summary>
      <param name="txtReader">The TextReader used to feed the XML data into the document. </param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary>Loads the XML document from the specified URL.</summary>
      <param name="filename">URL for the file containing the XML document to load. The URL can be either a local file or an HTTP URL (a Web address).</param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, a <see cref="T:System.IO.FileNotFoundException" /> is raised. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filename" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filename" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="filename" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="filename" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="filename" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="filename" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary>Loads the XML document from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The XmlReader used to feed the XML data into the document. </param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary>Loads the XML document from the specified string.</summary>
      <param name="xml">String containing the XML document to load. </param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlDocument nodes, the local name is #document.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For XmlDocument nodes, the name is #document.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>An XmlNameTable enabling you to get the atomized version of a string within the document.</returns>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary>Occurs when the <see cref="P:System.Xml.XmlNode.Value" /> of a node belonging to this document has been changed.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary>Occurs when the <see cref="P:System.Xml.XmlNode.Value" /> of a node belonging to this document is about to be changed.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary>Occurs when a node belonging to this document has been inserted into another node.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary>Occurs when a node belonging to this document is about to be inserted into another node.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary>Occurs when a node belonging to this document has been removed from its parent.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary>Occurs when a node belonging to this document is about to be removed from the document.</summary>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The node type. For XmlDocument nodes, this value is XmlNodeType.Document.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which the current node belongs.</summary>
      <returns>For XmlDocument nodes (<see cref="P:System.Xml.XmlDocument.NodeType" /> equals XmlNodeType.Document), this property always returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.ParentNode">
      <summary>Gets the parent node of this node (for nodes that can have parents).</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary>Gets or sets a value indicating whether to preserve white space in element content.</summary>
      <returns>true to preserve white space; otherwise false. The default is false.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary>Creates an <see cref="T:System.Xml.XmlNode" /> object based on the information in the <see cref="T:System.Xml.XmlReader" />. The reader must be positioned on a node or attribute.</summary>
      <returns>The new XmlNode or null if no more nodes exist.</returns>
      <param name="reader">The XML source </param>
      <exception cref="T:System.NullReferenceException">The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary>Saves the XML document to the specified stream.</summary>
      <param name="outStream">The stream to which you want to save. </param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary>Saves the XML document to the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer">The TextWriter to which you want to save. </param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary>Saves the XML document to the specified file.</summary>
      <param name="filename">The location of the file where you want to save the document. </param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary>Saves the XML document to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.SchemaInfo">
      <summary>Returns the Post-Schema-Validation-Infoset (PSVI) of the node.</summary>
      <returns>The <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object representing the PSVI of the node.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Schemas">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object associated with this <see cref="T:System.Xml.XmlDocument" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object containing the XML Schema Definition Language (XSD) schemas associated with this <see cref="T:System.Xml.XmlDocument" />; otherwise, an empty <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)">
      <summary>Validates the <see cref="T:System.Xml.XmlDocument" /> against the XML Schema Definition Language (XSD) schemas contained in the <see cref="P:System.Xml.XmlDocument.Schemas" /> property.</summary>
      <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object that receives information about schema validation warnings and errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation event occurred and no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)">
      <summary>Validates the <see cref="T:System.Xml.XmlNode" /> object specified against the XML Schema Definition Language (XSD) schemas in the <see cref="P:System.Xml.XmlDocument.Schemas" /> property.</summary>
      <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object that receives information about schema validation warnings and errors.</param>
      <param name="nodeToValidate">The <see cref="T:System.Xml.XmlNode" /> object created from an <see cref="T:System.Xml.XmlDocument" /> to validate.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlNode" /> object parameter was not created from an <see cref="T:System.Xml.XmlDocument" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlNode" /> object parameter is not an element, attribute, document fragment, or the root node.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation event occurred and no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the XmlDocument node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="xw">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the XmlDocument node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> to use for resolving external resources.</summary>
      <returns>The XmlResolver to use.In version 1.1 of the.NET Framework, the caller must be fully trusted in order to specify an XmlResolver.</returns>
      <exception cref="T:System.Xml.XmlException">This property is set to null and an external DTD or entity is encountered. </exception>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary>Represents a lightweight object that is useful for tree insert operations.</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.#ctor(System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlDocumentFragment" /> class.</summary>
      <param name="ownerDocument">The XML document that is the source of the fragment.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary>Gets or sets the markup representing the children of this node.</summary>
      <returns>The markup of the children of this node.</returns>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlDocumentFragment nodes, the local name is #document-fragment.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For XmlDocumentFragment, the name is #document-fragment.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For XmlDocumentFragment nodes, this value is XmlNodeType.DocumentFragment.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</summary>
      <returns>The XmlDocument to which this node belongs.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary>Gets the parent of this node (for nodes that can have parents).</summary>
      <returns>The parent of this node.For XmlDocumentFragment nodes, this property is always null.</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary>Represents the document type declaration.</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.#ctor(System.String,System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlDocumentType" /> class.</summary>
      <param name="name">The qualified name; see the <see cref="P:System.Xml.XmlDocumentType.Name" /> property.</param>
      <param name="publicId">The public identifier; see the <see cref="P:System.Xml.XmlDocumentType.PublicId" /> property.</param>
      <param name="systemId">The system identifier; see the <see cref="P:System.Xml.XmlDocumentType.SystemId" /> property.</param>
      <param name="internalSubset">The DTD internal subset; see the <see cref="P:System.Xml.XmlDocumentType.InternalSubset" /> property.</param>
      <param name="doc">The parent document.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For document type nodes, the cloned node always includes the subtree, regardless of the parameter setting. </param>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary>Gets the collection of <see cref="T:System.Xml.XmlEntity" /> nodes declared in the document type declaration.</summary>
      <returns>An <see cref="T:System.Xml.XmlNamedNodeMap" /> containing the XmlEntity nodes. The returned XmlNamedNodeMap is read-only.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary>Gets the value of the document type definition (DTD) internal subset on the DOCTYPE declaration.</summary>
      <returns>The DTD internal subset on the DOCTYPE. If there is no DTD internal subset, String.Empty is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary>Gets a value indicating whether the node is read-only.</summary>
      <returns>true if the node is read-only; otherwise false.Because DocumentType nodes are read-only, this property always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For DocumentType nodes, this property returns the name of the document type.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For DocumentType nodes, this property returns the name of the document type.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For DocumentType nodes, this value is XmlNodeType.DocumentType.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary>Gets the collection of <see cref="T:System.Xml.XmlNotation" /> nodes present in the document type declaration.</summary>
      <returns>An <see cref="T:System.Xml.XmlNamedNodeMap" /> containing the XmlNotation nodes. The returned XmlNamedNodeMap is read-only.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary>Gets the value of the public identifier on the DOCTYPE declaration.</summary>
      <returns>The public identifier on the DOCTYPE. If there is no public identifier, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary>Gets the value of the system identifier on the DOCTYPE declaration.</summary>
      <returns>The system identifier on the DOCTYPE. If there is no system identifier, null is returned.</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. For XmlDocumentType nodes, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary>Represents an element.</summary>
    </member>
    <member name="M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlElement" /> class.</summary>
      <param name="prefix">The namespace prefix; see the <see cref="P:System.Xml.XmlElement.Prefix" /> property.</param>
      <param name="localName">The local name; see the <see cref="P:System.Xml.XmlElement.LocalName" /> property.</param>
      <param name="namespaceURI">The namespace URI; see the <see cref="P:System.Xml.XmlElement.NamespaceURI" /> property.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary>Gets an <see cref="T:System.Xml.XmlAttributeCollection" /> containing the list of attributes for this node.</summary>
      <returns>
        <see cref="T:System.Xml.XmlAttributeCollection" /> containing the list of attributes for this node.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself (and its attributes if the node is an XmlElement). </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary>Returns the value for the attribute with the specified name.</summary>
      <returns>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</returns>
      <param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the Name property of the matching node. </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary>Returns the value for the attribute with the specified local name and namespace URI.</summary>
      <returns>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</returns>
      <param name="localName">The local name of the attribute to retrieve. </param>
      <param name="namespaceURI">The namespace URI of the attribute to retrieve. </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary>Returns the XmlAttribute with the specified name.</summary>
      <returns>The specified XmlAttribute or null if a matching attribute was not found.</returns>
      <param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the Name property of the matching node. </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary>Returns the <see cref="T:System.Xml.XmlAttribute" /> with the specified local name and namespace URI.</summary>
      <returns>The specified XmlAttribute or null if a matching attribute was not found.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlElement.Name" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</returns>
      <param name="name">The name tag to match. This is a qualified name. It is matched against the Name property of the matching node. The asterisk (*) is a special value that matches all tags. </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlElement.LocalName" /> and <see cref="P:System.Xml.XmlElement.NamespaceURI" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</returns>
      <param name="localName">The local name to match. The asterisk (*) is a special value that matches all tags. </param>
      <param name="namespaceURI">The namespace URI to match. </param>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary>Determines whether the current node has an attribute with the specified name.</summary>
      <returns>true if the current node has the specified attribute; otherwise, false.</returns>
      <param name="name">The name of the attribute to find. This is a qualified name. It is matched against the Name property of the matching node. </param>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary>Determines whether the current node has an attribute with the specified local name and namespace URI.</summary>
      <returns>true if the current node has the specified attribute; otherwise, false.</returns>
      <param name="localName">The local name of the attribute to find. </param>
      <param name="namespaceURI">The namespace URI of the attribute to find. </param>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary>Gets a boolean value indicating whether the current node has any attributes.</summary>
      <returns>true if the current node has attributes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary>Gets or sets the concatenated values of the node and all its children.</summary>
      <returns>The concatenated values of the node and all its children.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary>Gets or sets the markup representing just the children of this node.</summary>
      <returns>The markup of the children of this node.</returns>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary>Gets or sets the tag format of the element.</summary>
      <returns>Returns true if the element is to be serialized in the short tag format "&lt;item/&gt;"; false for the long format "&lt;item&gt;&lt;/item&gt;".When setting this property, if set to true, the children of the element are removed and the element is serialized in the short tag format. If set to false, the value of the property is changed (regardless of whether or not the element has content); if the element is empty, it is serialized in the long format.This property is a Microsoft extension to the Document Object Model (DOM).</returns>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary>Gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>The qualified name of the node. For XmlElement nodes, this is the tag name of the element.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary>Gets the namespace URI of this node.</summary>
      <returns>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary>Gets the <see cref="T:System.Xml.XmlNode" /> immediately following this element.</summary>
      <returns>The XmlNode immediately following this element.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The node type. For XmlElement nodes, this value is XmlNodeType.Element.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</summary>
      <returns>The XmlDocument to which this element belongs.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.ParentNode"></member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary>Gets or sets the namespace prefix of this node.</summary>
      <returns>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</returns>
      <exception cref="T:System.ArgumentException">This node is read-only </exception>
      <exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.The specified prefix is malformed.The namespaceURI of this node is null.The specified prefix is "xml" and the namespaceURI of this node is different from http://www.w3.org/XML/1998/namespace. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary>Removes all specified attributes and children of the current node. Default attributes are not removed.</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary>Removes all specified attributes from the element. Default attributes are not removed.</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary>Removes an attribute by name.</summary>
      <param name="name">The name of the attribute to remove.This is a qualified name. It is matched against the Name property of the matching node. </param>
      <exception cref="T:System.ArgumentException">The node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary>Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</summary>
      <param name="localName">The local name of the attribute to remove. </param>
      <param name="namespaceURI">The namespace URI of the attribute to remove. </param>
      <exception cref="T:System.ArgumentException">The node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary>Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced).</summary>
      <returns>The attribute node removed or null if there is no node at the given index.</returns>
      <param name="i">The index of the node to remove. The first node has index 0. </param>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary>Removes the <see cref="T:System.Xml.XmlAttribute" /> specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</summary>
      <returns>The removed XmlAttribute or null if the XmlElement does not have a matching attribute node.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
      <exception cref="T:System.ArgumentException">This node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary>Removes the specified <see cref="T:System.Xml.XmlAttribute" />.</summary>
      <returns>The removed XmlAttribute or null if <paramref name="oldAttr" /> is not an attribute node of the XmlElement.</returns>
      <param name="oldAttr">The XmlAttribute node to remove. If the removed attribute has a default value, it is immediately replaced. </param>
      <exception cref="T:System.ArgumentException">This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlElement.SchemaInfo">
      <summary>Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object containing the post schema validation infoset of this node.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary>Sets the value of the attribute with the specified name.</summary>
      <param name="name">The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components. </param>
      <param name="value">The value to set for the attribute. </param>
      <exception cref="T:System.Xml.XmlException">The specified name contains an invalid character. </exception>
      <exception cref="T:System.ArgumentException">The node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary>Sets the value of the attribute with the specified local name and namespace URI.</summary>
      <returns>The attribute value.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
      <param name="value">The value to set for the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary>Adds the specified <see cref="T:System.Xml.XmlAttribute" />.</summary>
      <returns>The XmlAttribute to add.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary>Adds the specified <see cref="T:System.Xml.XmlAttribute" />.</summary>
      <returns>If the attribute replaces an existing attribute with the same name, the old XmlAttribute is returned; otherwise, null is returned.</returns>
      <param name="newAttr">The XmlAttribute node to add to the attribute collection for this element. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="newAttr" /> was created from a different document than the one that created this node. Or this node is read-only. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="newAttr" /> is already an attribute of another XmlElement object. You must explicitly clone XmlAttribute nodes to re-use them in other XmlElement objects. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the current node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary>Represents an entity declaration, such as &lt;!ENTITY... &gt;.</summary>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary>Gets the base Uniform Resource Identifier (URI) of the current node.</summary>
      <returns>The location from which the node was loaded.</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node. Entity nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlEntity" /> object throws an exception.</summary>
      <returns>Returns a copy of the <see cref="T:System.Xml.XmlNode" /> from which the method is called.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
      <exception cref="T:System.InvalidOperationException">Entity nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlEntity" /> object throws an exception.</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary>Gets the concatenated values of the entity node and all its children.</summary>
      <returns>The concatenated values of the node and all its children.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set the property. </exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary>Gets the markup representing the children of this node.</summary>
      <returns>For XmlEntity nodes, String.Empty is returned.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set the property. </exception>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary>Gets a value indicating whether the node is read-only.</summary>
      <returns>true if the node is read-only; otherwise false.Because XmlEntity nodes are read-only, this property always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary>Gets the name of the node without the namespace prefix.</summary>
      <returns>For XmlEntity nodes, this property returns the name of the entity.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary>Gets the name of the node.</summary>
      <returns>The name of the entity.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary>Gets the type of the node.</summary>
      <returns>The node type. For XmlEntity nodes, the value is XmlNodeType.Entity.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary>Gets the name of the optional NDATA attribute on the entity declaration.</summary>
      <returns>The name of the NDATA attribute. If there is no NDATA, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary>Gets the markup representing this node and all its children.</summary>
      <returns>For XmlEntity nodes, String.Empty is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary>Gets the value of the public identifier on the entity declaration.</summary>
      <returns>The public identifier on the entity. If there is no public identifier, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary>Gets the value of the system identifier on the entity declaration.</summary>
      <returns>The system identifier on the entity. If there is no system identifier, null is returned.</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. For XmlEntity nodes, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />. For XmlEntity nodes, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary>Represents an entity reference node.</summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlEntityReference" /> class.</summary>
      <param name="name">The name of the entity reference; see the <see cref="P:System.Xml.XmlEntityReference.Name" /> property.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary>Gets the base Uniform Resource Identifier (URI) of the current node.</summary>
      <returns>The location from which the node was loaded.</returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For XmlEntityReference nodes, this method always returns an entity reference node with no children. The replacement text is set when the node is inserted into a parent. </param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary>Gets a value indicating whether the node is read-only.</summary>
      <returns>true if the node is read-only; otherwise false.Because XmlEntityReference nodes are read-only, this property always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlEntityReference nodes, this property returns the name of the entity referenced.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary>Gets the name of the node.</summary>
      <returns>The name of the entity referenced.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary>Gets the type of the node.</summary>
      <returns>The node type. For XmlEntityReference nodes, the value is XmlNodeType.EntityReference.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The value of the node. For XmlEntityReference nodes, this property returns null.</returns>
      <exception cref="T:System.ArgumentException">Node is read-only. </exception>
      <exception cref="T:System.InvalidOperationException">Setting the property. </exception>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>Returns detailed information about the last exception.</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>Initializes a new instance of the XmlException class.</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the XmlException class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</summary>
      <param name="info">The SerializationInfo object containing all the properties of an XmlException. </param>
      <param name="context">The StreamingContext object containing the context information. </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>Initializes a new instance of the XmlException class with a specified error message.</summary>
      <param name="message">The error description. </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the XmlException class.</summary>
      <param name="message">The description of the error condition. </param>
      <param name="innerException">The <see cref="T:System.Exception" /> that threw the XmlException, if any. This value can be null. </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the XmlException class with the specified message, inner exception, line number, and line position.</summary>
      <param name="message">The error description. </param>
      <param name="innerException">The exception that is the cause of the current exception. This value can be null. </param>
      <param name="lineNumber">The line number indicating where the error occurred. </param>
      <param name="linePosition">The line position indicating where the error occurred. </param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the XmlException properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">The SerializationInfo object. </param>
      <param name="context">The StreamingContext object. </param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>Gets the line number indicating where the error occurred.</summary>
      <returns>The line number indicating where the error occurred.</returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>Gets the line position indicating where the error occurred.</summary>
      <returns>The line position indicating where the error occurred.</returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>Gets a message describing the current exception.</summary>
      <returns>The error message that explains the reason for the exception.</returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary>Gets the location of the XML file.</summary>
      <returns>The source URI for the XML data. If there is no source URI, this property returns null.</returns>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary>Defines the context for a set of <see cref="T:System.Xml.XmlDocument" /> objects.</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlImplementation" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlImplementation" /> class with the <see cref="T:System.Xml.XmlNameTable" /> specified.</summary>
      <param name="nt">An <see cref="T:System.Xml.XmlNameTable" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary>Creates a new <see cref="T:System.Xml.XmlDocument" />.</summary>
      <returns>The new XmlDocument object.</returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary>Tests if the Document Object Model (DOM) implementation implements a specific feature.</summary>
      <returns>true if the feature is implemented in the specified version; otherwise, false.The following table shows the combinations that cause HasFeature to return true.strFeature strVersion XML 1.0 XML 2.0 </returns>
      <param name="strFeature">The package name of the feature to test. This name is not case-sensitive. </param>
      <param name="strVersion">This is the version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true. </param>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary>Gets the node immediately preceding or following this node.</summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary>Gets the node immediately following this node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> immediately following this node or null if one does not exist.</returns>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary>Gets the node immediately preceding this node.</summary>
      <returns>The preceding <see cref="T:System.Xml.XmlNode" /> or null if one does not exist.</returns>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary>Represents a collection of nodes that can be accessed by name or index.</summary>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary>Gets the number of nodes in the XmlNamedNodeMap.</summary>
      <returns>The number of nodes.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary>Provides support for the "foreach" style iteration over the collection of nodes in the XmlNamedNodeMap.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary>Retrieves an <see cref="T:System.Xml.XmlNode" /> specified by name.</summary>
      <returns>An XmlNode with the specified name or null if a matching node is not found.</returns>
      <param name="name">The qualified name of the node to retrieve. It is matched against the <see cref="P:System.Xml.XmlNode.Name" /> property of the matching node. </param>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary>Retrieves a node with the matching <see cref="P:System.Xml.XmlNode.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNode" /> with the matching local name and namespace URI or null if a matching node was not found.</returns>
      <param name="localName">The local name of the node to retrieve. </param>
      <param name="namespaceURI">The namespace Uniform Resource Identifier (URI) of the node to retrieve. </param>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary>Retrieves the node at the specified index in the XmlNamedNodeMap.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> at the specified index. If <paramref name="index" /> is less than 0 or greater than or equal to the <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> property, null is returned.</returns>
      <param name="index">The index position of the node to retrieve from the XmlNamedNodeMap. The index is zero-based; therefore, the index of the first node is 0 and the index of the last node is <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> -1. </param>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary>Removes the node from the XmlNamedNodeMap.</summary>
      <returns>The XmlNode removed from this XmlNamedNodeMap or null if a matching node was not found.</returns>
      <param name="name">The qualified name of the node to remove. The name is matched against the <see cref="P:System.Xml.XmlNode.Name" /> property of the matching node. </param>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary>Removes a node with the matching <see cref="P:System.Xml.XmlNode.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> removed or null if a matching node was not found.</returns>
      <param name="localName">The local name of the node to remove. </param>
      <param name="namespaceURI">The namespace URI of the node to remove. </param>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary>Adds an <see cref="T:System.Xml.XmlNode" /> using its <see cref="P:System.Xml.XmlNode.Name" /> property </summary>
      <returns>If the <paramref name="node" /> replaces an existing node with the same name, the old node is returned; otherwise, null is returned.</returns>
      <param name="node">An XmlNode to store in the XmlNamedNodeMap. If a node with that name is already present in the map, it is replaced by the new one. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="node" /> was created from a different <see cref="T:System.Xml.XmlDocument" /> than the one that created the XmlNamedNodeMap; or the XmlNamedNodeMap is read-only. </exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces. </summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNamespaceManager" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="nameTable">The <see cref="T:System.Xml.XmlNameTable" /> to use. </param>
      <exception cref="T:System.NullReferenceException">null is passed to the constructor </exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>Adds the given namespace to the collection.</summary>
      <param name="prefix">The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.NoteIf the <see cref="T:System.Xml.XmlNamespaceManager" /> will be used for resolving namespaces in an XML Path Language (XPath) expression, a prefix must be specified. If an XPath expression does not include a prefix, it is assumed that the namespace Uniform Resource Identifier (URI) is the empty namespace. For more information about XPath expressions and the <see cref="T:System.Xml.XmlNamespaceManager" />, refer to the <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" /> and <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" /> methods.</param>
      <param name="uri">The namespace to add. </param>
      <exception cref="T:System.ArgumentException">The value for <paramref name="prefix" /> is "xml" or "xmlns". </exception>
      <exception cref="T:System.ArgumentNullException">The value for <paramref name="prefix" /> or <paramref name="uri" /> is null. </exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>Gets the namespace URI for the default namespace.</summary>
      <returns>Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>Returns an enumerator to use to iterate through the namespaces in the <see cref="T:System.Xml.XmlNamespaceManager" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> containing the prefixes stored by the <see cref="T:System.Xml.XmlNamespaceManager" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringDictionary" /> object containing a collection of namespace and prefix pairs currently in scope.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.</summary>
      <returns>true if there is a namespace defined; otherwise, false.</returns>
      <param name="prefix">The prefix of the namespace you want to find. </param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>Gets the namespace URI for the specified prefix.</summary>
      <returns>Returns the namespace URI for <paramref name="prefix" /> or null if there is no mapped namespace. The returned string is atomized.For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty. </param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>Finds the prefix declared for the given namespace URI.</summary>
      <returns>The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then null is returned.</returns>
      <param name="uri">The namespace to resolve for the prefix. </param>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this object.</summary>
      <returns>The <see cref="T:System.Xml.XmlNameTable" /> used by this object.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>Pops a namespace scope off the stack.</summary>
      <returns>true if there are namespace scopes left on the stack; false if there are no more namespaces to pop.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>Pushes a namespace scope onto the stack.</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>Removes the given namespace for the given prefix.</summary>
      <param name="prefix">The prefix for the namespace </param>
      <param name="uri">The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored. </param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="prefix" /> or <paramref name="uri" /> is null. </exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary>Defines the namespace scope.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary>All namespaces defined in the scope of the current node. This includes the xmlns:xml namespace which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary>All namespaces defined in the scope of the current node, excluding the xmlns:xml namespace, which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary>All namespaces that are defined locally at the current node.</summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>Table of atomized string objects.</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNameTable" /> class. </summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, atomizes the specified string and adds it to the XmlNameTable.</summary>
      <returns>The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.</returns>
      <param name="array">The character array containing the name to add. </param>
      <param name="offset">Zero-based index into the array specifying the first character of the name. </param>
      <param name="length">The number of characters in the name. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />-or- <paramref name="offset" /> &gt;= <paramref name="array" />.Length -or- <paramref name="length" /> &gt; <paramref name="array" />.Length The above conditions do not cause an exception to be thrown if <paramref name="length" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>When overridden in a derived class, atomizes the specified string and adds it to the XmlNameTable.</summary>
      <returns>The new atomized string or the existing one if it already exists.</returns>
      <param name="array">The name to add. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.</summary>
      <returns>The atomized string or null if the string has not already been atomized. If <paramref name="length" /> is zero, String.Empty is returned.</returns>
      <param name="array">The character array containing the name to look up. </param>
      <param name="offset">The zero-based index into the array specifying the first character of the name. </param>
      <param name="length">The number of characters in the name. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />-or- <paramref name="offset" /> &gt;= <paramref name="array" />.Length -or- <paramref name="length" /> &gt; <paramref name="array" />.Length The above conditions do not cause an exception to be thrown if <paramref name="length" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>When overridden in a derived class, gets the atomized string containing the same value as the specified string.</summary>
      <returns>The atomized string or null if the string has not already been atomized.</returns>
      <param name="array">The name to look up. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary>Represents a single node in the XML document. </summary>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary>Adds the specified node to the end of the list of child nodes, of this node.</summary>
      <returns>The node added.</returns>
      <param name="newChild">The node to add. All the contents of the node to be added are moved into the specified location. </param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary>Gets an <see cref="T:System.Xml.XmlAttributeCollection" /> containing the attributes of this node.</summary>
      <returns>An XmlAttributeCollection containing the attributes of the node.If the node is of type XmlNodeType.Element, the attributes of the node are returned. Otherwise, this property returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The location from which the node was loaded or String.Empty if the node has no base URI.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary>Gets all the child nodes of the node.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> that contains all the child nodes of the node.If there are no child nodes, this property returns an empty <see cref="T:System.Xml.XmlNodeList" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary>When overridden in a derived class, creates a duplicate of the node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
      <exception cref="T:System.InvalidOperationException">Calling this method on a node type that cannot be cloned. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for navigating this object.</summary>
      <returns>An XPathNavigator object. The XPathNavigator is positioned on the node from which the method was called. It is not positioned on the root of the document.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary>Gets the first child of the node.</summary>
      <returns>The first child of the node. If there is no such node, null is returned.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary>Provides support for the for each style iteration over the nodes in the XmlNode.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary>Looks up the closest xmlns declaration for the given prefix that is in scope for the current node and returns the namespace URI in the declaration.</summary>
      <returns>The namespace URI of the specified prefix.</returns>
      <param name="prefix">Prefix whose namespace URI you want to find. </param>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary>Looks up the closest xmlns declaration for the given namespace URI that is in scope for the current node and returns the prefix defined in that declaration.</summary>
      <returns>The prefix for the specified namespace URI.</returns>
      <param name="namespaceURI">Namespace URI whose prefix you want to find. </param>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary>Gets a value indicating whether this node has any child nodes.</summary>
      <returns>true if the node has child nodes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary>Gets or sets the concatenated values of the node and all its child nodes.</summary>
      <returns>The concatenated values of the node and all its child nodes.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary>Gets or sets the markup representing only the child nodes of this node.</summary>
      <returns>The markup of the child nodes of this node.NoteInnerXml does not return default attributes.</returns>
      <exception cref="T:System.InvalidOperationException">Setting this property on a node that cannot have child nodes. </exception>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Inserts the specified node immediately after the specified reference node.</summary>
      <returns>The node being inserted.</returns>
      <param name="newChild">The XmlNode to insert. </param>
      <param name="refChild">The XmlNode that is the reference node. The <paramref name="newNode" /> is placed after the <paramref name="refNode" />. </param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.The <paramref name="refChild" /> is not a child of this node.This node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Inserts the specified node immediately before the specified reference node.</summary>
      <returns>The node being inserted.</returns>
      <param name="newChild">The XmlNode to insert. </param>
      <param name="refChild">The XmlNode that is the reference node. The <paramref name="newChild" /> is placed before this node. </param>
      <exception cref="T:System.InvalidOperationException">The current node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.The <paramref name="refChild" /> is not a child of this node.This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary>Gets a value indicating whether the node is read-only.</summary>
      <returns>true if the node is read-only; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary>Gets the first child element with the specified <see cref="P:System.Xml.XmlNode.Name" />.</summary>
      <returns>The first <see cref="T:System.Xml.XmlElement" /> that matches the specified name.</returns>
      <param name="name">The qualified name of the element to retrieve. </param>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary>Gets the first child element with the specified <see cref="P:System.Xml.XmlNode.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The first <see cref="T:System.Xml.XmlElement" /> with the matching <paramref name="localname" /> and <paramref name="ns" />.</returns>
      <param name="localname">The local name of the element. </param>
      <param name="ns">The namespace URI of the element. </param>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary>Gets the last child of the node.</summary>
      <returns>The last child of the node. If there is no such node, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary>When overridden in a derived class, gets the local name of the node.</summary>
      <returns>The name of the node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlNode.NodeType" /> of the node: Type Name Attribute The local name of the attribute. CDATA #cdata-section Comment #comment Document #document DocumentFragment #document-fragment DocumentType The document type name. Element The local name of the element. Entity The name of the entity. EntityReference The name of the entity referenced. Notation The notation name. ProcessingInstruction The target of the processing instruction. Text #text Whitespace #whitespace SignificantWhitespace #significant-whitespace XmlDeclaration #xml-declaration </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary>When overridden in a derived class, gets the qualified name of the node.</summary>
      <returns>The qualified name of the node. The name returned is dependent on the <see cref="P:System.Xml.XmlNode.NodeType" /> of the node: Type Name Attribute The qualified name of the attribute. CDATA #cdata-section Comment #comment Document #document DocumentFragment #document-fragment DocumentType The document type name. Element The qualified name of the element. Entity The name of the entity. EntityReference The name of the entity referenced. Notation The notation name. ProcessingInstruction The target of the processing instruction. Text #text Whitespace #whitespace SignificantWhitespace #significant-whitespace XmlDeclaration #xml-declaration </returns>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary>Gets the namespace URI of this node.</summary>
      <returns>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary>Gets the node immediately following this node.</summary>
      <returns>The next XmlNode. If there is no next node, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary>When overridden in a derived class, gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary>Puts all XmlText nodes in the full depth of the sub-tree underneath this XmlNode into a "normal" form where only markup (that is, tags, comments, processing instructions, CDATA sections, and entity references) separates XmlText nodes, that is, there are no adjacent XmlText nodes.</summary>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary>Gets the markup representing this node and all its child nodes.</summary>
      <returns>The markup containing this node and all its child nodes.NoteOuterXml does not return default attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</summary>
      <returns>The <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.If the node is an <see cref="T:System.Xml.XmlDocument" /> (NodeType equals XmlNodeType.Document), this property returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary>Gets the parent of this node (for nodes that can have parents).</summary>
      <returns>The XmlNode that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is null. For all other nodes, the value returned depends on the <see cref="P:System.Xml.XmlNode.NodeType" /> of the node. The following table describes the possible return values for the ParentNode property.NodeType Return Value of ParentNode Attribute, Document, DocumentFragment, Entity, Notation Returns null; these nodes do not have parents. CDATA Returns the element or entity reference containing the CDATA section. Comment Returns the element, entity reference, document type, or document containing the comment. DocumentType Returns the document node. Element Returns the parent node of the element. If the element is the root node in the tree, the parent is the document node. EntityReference Returns the element, attribute, or entity reference containing the entity reference. ProcessingInstruction Returns the document, element, document type, or entity reference containing the processing instruction. Text Returns the parent element, attribute, or entity reference containing the text node. </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary>Gets or sets the namespace prefix of this node.</summary>
      <returns>The namespace prefix of this node. For example, Prefix is bk for the element &lt;bk:book&gt;. If there is no prefix, this property returns String.Empty.</returns>
      <exception cref="T:System.ArgumentException">This node is read-only. </exception>
      <exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.The specified prefix is malformed.The specified prefix is "xml" and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".This node is an attribute and the specified prefix is "xmlns" and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/ ".This node is an attribute and the qualifiedName of this node is "xmlns". </exception>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary>Adds the specified node to the beginning of the list of child nodes for this node.</summary>
      <returns>The node added.</returns>
      <param name="newChild">The node to add. All the contents of the node to be added are moved into the specified location.</param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary>Gets the node immediately preceding this node.</summary>
      <returns>The preceding XmlNode. If there is no preceding node, null is returned.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary>Removes all the child nodes and/or attributes of the current node.</summary>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary>Removes specified child node.</summary>
      <returns>The node removed.</returns>
      <param name="oldChild">The node being removed. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="oldChild" /> is not a child of this node. Or this node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Replaces the child node <paramref name="oldChild" /> with <paramref name="newChild" /> node.</summary>
      <returns>The node replaced.</returns>
      <param name="newChild">The new node to put in the child list. </param>
      <param name="oldChild">The node being replaced in the list. </param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only.The <paramref name="oldChild" /> is not a child of this node. </exception>
    </member>
    <member name="P:System.Xml.XmlNode.SchemaInfo">
      <summary>Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object containing the post schema validation infoset of this node</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary>Selects a list of nodes matching the XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes matching the XPath query. The XmlNodeList should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNodeList, and vice versa.</returns>
      <param name="xpath">The XPath expression. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary>Selects a list of nodes matching the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied <see cref="T:System.Xml.XmlNamespaceManager" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes matching the XPath query. The XmlNodeList should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNodeList, and vice versa.</returns>
      <param name="xpath">The XPath expression. </param>
      <param name="nsmgr">An <see cref="T:System.Xml.XmlNamespaceManager" /> to use for resolving namespaces for prefixes in the XPath expression. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix which is not defined in the XmlNamespaceManager. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary>Selects the first XmlNode that matches the XPath expression.</summary>
      <returns>The first XmlNode that matches the XPath query or null if no matching node is found. The XmlNode should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNode, and vice versa.</returns>
      <param name="xpath">The XPath expression. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary>Selects the first XmlNode that matches the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied <see cref="T:System.Xml.XmlNamespaceManager" />.</summary>
      <returns>The first XmlNode that matches the XPath query or null if no matching node is found. The XmlNode should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNode, and vice versa.</returns>
      <param name="xpath">The XPath expression. </param>
      <param name="nsmgr">An <see cref="T:System.Xml.XmlNamespaceManager" /> to use for resolving namespaces for prefixes in the XPath expression. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix which is not defined in the XmlNamespaceManager. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary>Test if the DOM implementation implements a specific feature.</summary>
      <returns>true if the feature is implemented in the specified version; otherwise, false. The following table describes the combinations that return true.Feature Version XML 1.0 XML 2.0 </returns>
      <param name="feature">The package name of the feature to test. This name is not case-sensitive. </param>
      <param name="version">This is the version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true. </param>
    </member>
    <member name="M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Xml.XmlNode.GetEnumerator" />.</summary>
      <returns>Returns an enumerator for the collection.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.Xml.XmlNode.Clone" />.</summary>
      <returns>Returns a copy of the node from which it is called.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlNode.NodeType" /> of the node: Type Value Attribute The value of the attribute. CDATASection The content of the CDATA Section. Comment The content of the comment. Document null. DocumentFragment null. DocumentType null. Element null. You can use the <see cref="P:System.Xml.XmlElement.InnerText" /> or <see cref="P:System.Xml.XmlElement.InnerXml" /> properties to access the value of the element node. Entity null. EntityReference null. Notation null. ProcessingInstruction The entire content excluding the target. Text The content of the text node. SignificantWhitespace The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs. Whitespace The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs. XmlDeclaration The content of the declaration (that is, everything between &lt;?xml and ?&gt;). </returns>
      <exception cref="T:System.ArgumentException">Setting the value of a node that is read-only. </exception>
      <exception cref="T:System.InvalidOperationException">Setting the value of a node that is not supposed to have a value (for example, an Element node). </exception>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary>When overridden in a derived class, saves all the child nodes of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary>When overridden in a derived class, saves the current node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary>Specifies the type of node change.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary>A node is being inserted in the tree.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary>A node is being removed from the tree.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary>A node value is being changed.</summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.XmlDocument.NodeChanged" />, <see cref="E:System.Xml.XmlDocument.NodeChanging" />, <see cref="E:System.Xml.XmlDocument.NodeInserted" />, <see cref="E:System.Xml.XmlDocument.NodeInserting" />, <see cref="E:System.Xml.XmlDocument.NodeRemoved" /> and <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> events.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> class.</summary>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> that generated the event.</param>
      <param name="oldParent">The old parent <see cref="T:System.Xml.XmlNode" /> of the <see cref="T:System.Xml.XmlNode" /> that generated the event.</param>
      <param name="newParent">The new parent <see cref="T:System.Xml.XmlNode" /> of the <see cref="T:System.Xml.XmlNode" /> that generated the event.</param>
      <param name="oldValue">The old value of the <see cref="T:System.Xml.XmlNode" /> that generated the event.</param>
      <param name="newValue">The new value of the <see cref="T:System.Xml.XmlNode" /> that generated the event.</param>
      <param name="action">The <see cref="T:System.Xml.XmlNodeChangedAction" />.</param>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary>Gets a value indicating what type of node change event is occurring.</summary>
      <returns>An XmlNodeChangedAction value describing the node change event.XmlNodeChangedAction Value Description Insert A node has been or will be inserted. Remove A node has been or will be removed. Change A node has been or will be changed. NoteThe Action value does not differentiate between when the event occurred (before or after). You can create separate event handlers to handle both instances.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary>Gets the value of the <see cref="P:System.Xml.XmlNode.ParentNode" /> after the operation completes.</summary>
      <returns>The value of the ParentNode after the operation completes. This property returns null if the node is being removed.NoteFor attribute nodes this property returns the <see cref="P:System.Xml.XmlAttribute.OwnerElement" />.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewValue">
      <summary>Gets the new value of the node.</summary>
      <returns>The new value of the node. This property returns null if the node is neither an attribute nor a text node, or if the node is being removed.If called in a <see cref="E:System.Xml.XmlDocument.NodeChanging" /> event, NewValue returns the value of the node if the change is successful. If called in a <see cref="E:System.Xml.XmlDocument.NodeChanged" /> event, NewValue returns the current value of the node.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary>Gets the <see cref="T:System.Xml.XmlNode" /> that is being added, removed or changed.</summary>
      <returns>The XmlNode that is being added, removed or changed; this property never returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary>Gets the value of the <see cref="P:System.Xml.XmlNode.ParentNode" /> before the operation began.</summary>
      <returns>The value of the ParentNode before the operation began. This property returns null if the node did not have a parent.NoteFor attribute nodes this property returns the <see cref="P:System.Xml.XmlAttribute.OwnerElement" />.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldValue">
      <summary>Gets the original value of the node.</summary>
      <returns>The original value of the node. This property returns null if the node is neither an attribute nor a text node, or if the node is being inserted.If called in a <see cref="E:System.Xml.XmlDocument.NodeChanging" /> event, OldValue returns the current value of the node that will be replaced if the change is successful. If called in a <see cref="E:System.Xml.XmlDocument.NodeChanged" /> event, OldValue returns the value of node prior to the change.</returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary>Represents the method that handles <see cref="E:System.Xml.XmlDocument.NodeChanged" />, <see cref="E:System.Xml.XmlDocument.NodeChanging" />, <see cref="E:System.Xml.XmlDocument.NodeInserted" />, <see cref="E:System.Xml.XmlDocument.NodeInserting" />, <see cref="E:System.Xml.XmlDocument.NodeRemoved" /> and <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> events.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> containing the event data. </param>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary>Represents an ordered collection of nodes.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNodeList" /> class.</summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary>Gets the number of nodes in the XmlNodeList.</summary>
      <returns>The number of nodes.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary>Provides a simple "foreach" style iteration over the collection of nodes in the XmlNodeList.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary>Retrieves a node at the given index.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> in the collection. If <paramref name="index" /> is greater than or equal to the number of nodes in the list, this returns null.</returns>
      <param name="index">Zero-based index into the list of nodes. </param>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary>Retrieves a node at the given index.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.</returns>
      <param name="i">Zero-based index into the list of nodes. </param>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary>Describes the document order of a node compared to a second node.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary>The current node of this navigator is before the current node of the supplied navigator.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary>The current node of this navigator is after the current node of the supplied navigator.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary>The two navigators are positioned on the same node.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary>The node positions cannot be determined in document order, relative to each other. This could occur if the two nodes reside in different trees.</summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary>Represents a reader that provides fast, non-cached forward only access to XML data in an <see cref="T:System.Xml.XmlNode" />.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary>Creates an instance of the XmlNodeReader class using the specified <see cref="T:System.Xml.XmlNode" />.</summary>
      <param name="node">The XmlNode you want to read. </param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary>Gets the number of attributes on the current node.</summary>
      <returns>The number of attributes on the current node. This number includes default attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The base URI of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanReadBinaryContent">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlNodeReader" /> implements the binary content read methods.</summary>
      <returns>true if the binary content read methods are implemented; otherwise false. The <see cref="T:System.Xml.XmlNodeReader" /> class always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
      <returns>true if the reader can parse and resolve entities; otherwise, false. XmlNodeReader always returns true.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary>Changes the <see cref="P:System.Xml.XmlNodeReader.ReadState" /> to Closed.</summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary>Gets the depth of the current node in the XML document.</summary>
      <returns>The depth of the current node in the XML document.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
      <returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary>Gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute.</returns>
      <param name="attributeIndex">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlNodeReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary>Gets the value of the attribute with the specified name.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary>Gets the value of the attribute with the specified local name and namespace URI.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary>Gets a value indicating whether the current node has any attributes.</summary>
      <returns>true if the current node has attributes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlNodeReader.Value" />.</summary>
      <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</summary>
      <returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; false if the attribute value was explicitly set.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary>Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
      <returns>true if the current node is an element (<see cref="P:System.Xml.XmlNodeReader.NodeType" /> equals XmlNodeType.Element) and it ends with /&gt;; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary>Gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary>Resolves a namespace prefix in the current element's scope.</summary>
      <returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary>Moves to the attribute with the specified index.</summary>
      <param name="attributeIndex">The index of the attribute. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary>Moves to the attribute with the specified name.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary>Moves to the attribute with the specified local name and namespace URI.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary>Moves to the element that contains the current attribute node.</summary>
      <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary>Moves to the first attribute.</summary>
      <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary>Moves to the next attribute.</summary>
      <returns>true if there is a next attribute; false if there are no more attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary>Gets the qualified name of the current node.</summary>
      <returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlNodeReader.NodeType" /> of the node. The following node types return the listed values. All other node types return an empty string.Node Type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</summary>
      <returns>The namespace URI of the current node; otherwise an empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>The Xm