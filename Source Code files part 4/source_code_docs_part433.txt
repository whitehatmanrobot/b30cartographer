     </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexWeb.ExpectedString">
            <summary>
            This is the expected string the system will check for validation
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Vortex.VortexWeb.Headers">
            <summary>
            Collection of Headers to add to request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.XRLLogStringVortex">
            <summary>
            Summary description for XRLLogString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Vortex.XRLLogBinaryVortex">
            <summary>
            Summary description for XRLLogString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.XSTS.XSTSIssueXRL">
            <summary>
            Summary description for XRLLogString.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XstsUtil.GetXstsSigningCertificate">
            <summary>
            Gets the XSTS signing certificate as defined by the site.xml file.
            </summary>
            <returns>An X509Certificate2 containing the certificate.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XstsUtil.GetXstsEncryptingCertificate">
            <summary>
            Gets the relyinfg party encrypting certificate as defined by the site.xml file.
            </summary>
            <returns>An X509Certificate2 containing the certificate.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XstsUtil.GetCertificateFromSecureShare(System.String)">
            <summary>
            Gets the XSTS signing certificate as defined by the site.xml file.
            </summary>
            <returns>An X509Certificate2 containing the certificate.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XstsUtil.RemoveMasterKey">
            <summary>
            Removes the master key via xkeymgr.exe
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XstsUtil.IsMasterKeyInstalled">
            <summary>
            Checks to see if the master key is already installed on the client
            </summary>
            <returns>true of installed otherwise false</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XstsUtil.InstallMasterKey">
            <summary>
            Installs the master key on the local client
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Class representing XSTS Saml2 Token.  A default token will be generated.
            </summary>
            <param name="signingKey">Saml2Token signing key</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Class representing XSTS Saml2 Token.  A default token will be generated.
            </summary>
            <param name="signingKey">Saml2Token signing key</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.GenerateClaims">
            <summary>
            Makes up some claims and values
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.GenerateXboxLiveClaims">
            <summary>
            Makes up some claims and values, specifically claims that are for the http://xboxlive.com applies to.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.SetDefaultSecurityToken">
            <summary>
            Private method to set the default security token
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.AddAttribute(Microsoft.IdentityModel.Tokens.Saml2.Saml2Attribute)">
            <summary>
            Add an existing Saml2Attribute to the token
            </summary>
            <param name="attribute">The Saml2Attribute to be added</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.AddAttribute(System.String,System.String)">
            <summary>
            Add a Saml2Attribute via a name/value pair
            </summary>
            <param name="name">name to be added</param>
            <param name="value">value to be added</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.AddAttribute(System.String)">
            <summary>
            Add a Saml2Attribute via a name
            </summary>
            <param name="name">name to be added</param>
            <param name="value">value to be added</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.AddAttribute(System.String,System.String,System.String)">
            <summary>
            Add a Saml2Attribute via a name/value pair + type
            </summary>
            <param name="name">name to be added</param>
            <param name="value">value to be added</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.AddAutoTypedAttribute(System.String,System.String)">
            <summary> Adds an attribute and automatically determines and sets the type based on the attribute name. </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.ToString">
            <summary>
            Convert the XSTSSaml2Token to a String
            </summary>
            <returns>XElement parsed String</returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.XSTS.XSTSSaml2Token.Assertion">
            <summary>
            Expose the assertion directly in case someone wants to fudge around with it manually,
            especially for negative test cases.        
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.XSTSAASG.PostRequest(System.String,System.String,System.Byte[],System.Boolean,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Posts an HTTP request to a given endpoint.
            </summary>
            <param name="url"></param>
            <param name="method"></param>
            <param name="content"></param>
            <param name="fKeepAlive"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.XSTS.XSTSAASG.AAInfoWrapper">
            <summary>
            This class exposes the protected fields of an AAInfo object for writing.
            Ripped right out of sts test and modified for my convenience.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.SimpleXSTSClient.GetTokenFromSTS(ServerTestFramework.LiveService.XSTS.RSTGenerator)">
            <summary>
            Gets a token from the STS. Grabs a string then parses it. 
            Some useful references:     
            WSTrust13Constants.RequestTypes.X    
            WSTrust13Constants.KeyTypes.X    
            Microsoft.IdentityModel.Tokens.SecurityTokenTypes.X    
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.SimpleXSTSClient.GetTokenStringFromSTS(ServerTestFramework.LiveService.XSTS.RSTGenerator,ServerTestFramework.LiveService.FakeSG.CSGInfo,System.Int32)">
            <summary>
            Generates a request to the STS, fills in some values for the SGInfo, then grabs the token as a string. 
            Not the full response, just the token. Some useful references:     
            WSTrust13Constants.RequestTypes.X    
            WSTrust13Constants.KeyTypes.X    
            Microsoft.IdentityModel.Tokens.SecurityTokenTypes.X    
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.SimpleXSTSClient.ParseToken(System.String)">
            <summary>
            Turns the token string into a proper SecurityToken object.
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.XSTS.UserCreator.GetSharedUser">
            <summary>
            Provides an easy way to create a bunch of users at the 'same' time so 
            that we don't have to wait 30 seconds each time a user is created, we 
            just wait in batches.  
            </summary>
            <param name="createGoldUser">If true, Gold users will be created</param>
            <returns>A valid IUser if the creation was successful</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNConnection.Publish(xonline.common.community.DATA_OBJECT_SPECIFIER[],System.Byte[][])">
            <summary>
            Used to publish the given data w/ corresponding DATA_OBJECT_SPECIFIER to Acceleration
            </summary>
            <param name="rgDataObjects">Array of DATA_OBJECT_SPECIFIERs directly corresponding to the same index in the rgData array</param>
            <param name="rgData">Array of byte[] holding data for each item to publish</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.XConnSrv.PNUserCreationEventArgs">
            <summary>
            A class to hold custom event info for when a user is created within the PNUsers Builder
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder">
             <summary>
             
             This class is used to create PNUsers with different options including: friend/peer status, online/offline, same/remote console, and presence privacy settings.
             
             Sample usage:
            
                 // Create a single user
                 PNUser[] users = PNUsersBuilder.GetLiveXenonUsers(1, true, true);
            
                 // Create users
                 PNUsersBuilder pnub = new PNUsersBuilder();
                 pnub.Online_Friends = 5;
                 pnub.Offline_Friends_PrivFriends = 2;
                 pnub.Online_Peers_SameConsole_PrivBlocked = 1
                 pnub.CreateUsers(users);
                 
                 // To access your newly created users
                 PNUser[] friends = pnub.Friends;
                 PNUser[] peers = pnub.Peers;
                 
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.GetLiveXenonUsers(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Creates real Live Xenon users (with presence privacy set to Everyone)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.GetLiveXenonUsers(System.UInt32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates real Live Xenon users with the given privacy
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.GetLiveXenonUsers(System.UInt32,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Creates real Live Xenon users with the given settings
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.SetPrivacy(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Int32)">
            <summary>
            Changes the privacy of the given user in the database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.SetPrivilege(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,System.Boolean)">
            <summary>
            Actually sets the privileges for the user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.OnPNUserCreationEvent(ServerTestFramework.LiveService.XConnSrv.PNUserCreationEventArgs)">
            <summary>
            Event to be triggered when a user is created
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.GetFriend(System.UInt64)">
            <summary>
            Gets a specific friend subscribee based on their User Id
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.GetPeer(System.UInt64)">
            <summary>
            Gets a specific peer subscribee based on their User Id
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.CreateUsers">
            <summary>
            Create all users who will be subscribed to, with no subscribers
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.CreateUsers(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Create all users who will be subscribed to, with a single subscriber
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.CreateUsers(ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Create all users who will be subscribed to, with multiple subscribers
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.Friends">
            <summary>
            Gets the list of friends created
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.XConnSrv.PNUsersBuilder.Peers">
            <summary>
            Get the list of peers created
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder">
            <summary>
            This class is used to create correct DATA_OBJECT_SPECIFIERS used for subscriptions with XConnSrv
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.GetDataObjectSpecifierForSingleUser(xonline.common.community.DATA_TYPES,System.UInt64)">
            <summary>
            Creates a single DATA_OBJECT_SPECIFIER for the given User ID of the given DATA_TYPE to be used for subscriptions
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.GetDataObjectSpecifierForSingleUser(xonline.common.community.DATA_TYPES,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Creates a single DATA_OBJECT_SPECIFIER for the given PNUser of the given DATA_TYPE to be used for subscriptions
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.GetDataObjectSpecifierArrayForUsers(xonline.common.community.DATA_TYPES,System.UInt64[])">
            <summary>
            Creates a DATA_OBJECT_SPECIFIER array for the given User IDs of the given DATA_TYPE to be used for subscriptions
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.GetDataObjectSpecifierArrayForUsers(xonline.common.community.DATA_TYPES,ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Creates a DATA_OBJECT_SPECIFIER array for the given PNUsers of the given DATA_TYPE to be used for subscriptions
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,xonline.common.community.DATA_TYPES,System.UInt64)">
            <summary>
            Subscribe to a user for a given type
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,System.Int32[],xonline.common.community.DATA_TYPES,System.UInt64)">
            <summary>
            Subscribe to a user for a given type on the given indicies
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,System.Int32[],System.UInt32,xonline.common.community.DATA_TYPES,System.UInt64)">
            <summary>
            Subscribe to a user for a given type on the given indicies with the given header flags
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,xonline.common.community.DATA_TYPES,System.UInt64[])">
            <summary>
            Subscribe to users for the given type
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,System.Int32[],xonline.common.community.DATA_TYPES,System.UInt64[])">
            <summary>
            Subscribe to users for the given type on the given indicies
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,System.Int32[],System.UInt32,xonline.common.community.DATA_TYPES,System.UInt64[])">
            <summary>
            Subscribe to users for the given type on the given indicies wit hthe given header flags
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,xonline.common.community.DATA_TYPES,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Subscribe to a user for a given type
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,System.Int32[],xonline.common.community.DATA_TYPES,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Subscribe to a user for a given type on the given indicies
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,System.Int32[],System.UInt32,xonline.common.community.DATA_TYPES,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Subscribe to a user for a given type on the given indicies with the given header flags
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,xonline.common.community.DATA_TYPES,ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Subscribe to users for the given type
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,System.Int32[],xonline.common.community.DATA_TYPES,ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Subscribe to users for the given type on the given indicies
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.Subscribe(ServerTestFramework.LiveService.XConnSrv.PNConnection,System.Int32[],System.UInt32,xonline.common.community.DATA_TYPES,ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Subscribe to users for the given type on the given indicies wit hthe given header flags
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.SubscriptionBuilder.ValidateSubscribeReply(ServerTestFramework.LiveService.XConnSrv.PNConnection,ServerTestFramework.LiveService.XConnSrv.SUBSCRIBE_REPLY,xonline.common.community.DATA_TYPES,ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Basic SUBSCRIBE_REPLY verification verificiation verifying number of objects returned
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.FakeMC.FakeMemCache.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.FakeMC.FakeMemCache.Get(System.String)">
            <summary>
            Used to get the data associated with a given key
            </summary>
            <param name="key">key for desired data</param>
            <returns>byte[] of data, null if invalid key</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.XConnSrv.FakeMC.FakeMemCache.Set(System.String,System.Byte[])">
            <summary>
            Sets the data for the given key. A new entry will be created if the key doesn't exist.
            </summary>
            <param name="key">key for data</param>
            <param name="data">data to be set</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.FriendsCommon">
            <summary>
            Friends Common: high-level presence operation wrapper
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.#ctor">
            <summary>
            Default constructor, friends common creates its own UACSCommon.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.#ctor(ServerTestFramework.LiveService.UserAccount.UacsCommon)">
            <summary>
            Constructor, friends common uses given UACSCommon
            </summary>
            <param name="uacs">Provides access to high level uacs support</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreateUser">
            <summary>
            Creates a new PNUser out of a newly createed UODB user
            </summary>
            <returns>New User</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreateUser(System.Boolean)">
            <summary>
            Create a new xenon user in a online/offline state.
            <param name="alive">Alive new user</param>
            <returns>New User</returns>
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreateXenonUser(System.Boolean)">
            <summary>
            Create a xenon version user using the last released version of the XDK.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreateXenonUser(System.Boolean,System.UInt32)">
            <summary>
            Create a xenon version user using the last released version of the XDK.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreateXenonUsers(System.UInt32,System.Boolean)">
            <summary>
            Create a block of users using the CreateXenonUser() method
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreatePanoramaUser(System.Boolean)">
            <summary>
            Create a panorama version user using the last released version of the XDK.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreatePanoramaUser(System.Boolean,System.UInt32)">
            <summary>
            Create a panorama version user using the last released version of the XDK.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreatePanoramaUsers(System.UInt32,System.Boolean)">
            <summary>
            Create a block of users using the CreateXenonUser() method
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreateUser(System.Boolean,System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            Legacy.  Use ClientType.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreateUser(System.Boolean,System.UInt32,System.UInt64,ServerTestFramework.LiveService.FakeSG.CSGInfo.ClientType)">
            <summary>
            Explicitly create a user in a known title, client version and using xenon/xbox authdataflags
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.ReleaseUsers(ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Release a block of users see ReleaseUser(PNUser user)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.ReleaseUser(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
             <summary>
             Release a user back the global shared user pool. Don't do this
             unless you know this user is clean for another test. This is mainly
             used a test case speed optimization or could be used during stress.
            
             In practice this is rarely neccessary.
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreateLinkedUser">
            <summary>
            Creates a new PNUser out of a newly createed Web Linked UODB user
            </summary>
            <returns>New User</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreateLinkedUser(System.Boolean)">
            <summary>
            Creates a new PNUser out of a newly createed Web Linked UODB user,
            and optionally logs that user on.
            </summary>
            <param name="logon">Log on (Alive) new user</param>
            <returns>New User</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LinkUser(ServerTestFramework.LiveService.UserAccount.Owner,System.UInt64,System.Byte[])">
            <summary>
            Link an account using the owner puid and owner object
            return the user puid (used for testing minor accounts).
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LogonUser(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Alives a user into presence seting up a new PNXbox for the user to connect to the
            FakeSG with.
            </summary>
            <param name="user">User to logon</param>
            <returns>Success Flavor of HR returned in alive reply msg</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LogonUser(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean)">
            <summary>
            Alives a user into presence seting up a new PNXbox for the user to connect to the
            FakeSG with.
            </summary>
            <param name="user">User to logon</param>
            <param name="appearOffline">Set this flag to logon cloaked</param>
            <returns>Success Flavor of HR returned in alive reply msg</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LogonUser(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32)">
            <summary>
            Alives a user into presence with a particular Tittle ID, seting up a new PNXbox for the user to
            connect to the FakeSG with.
            </summary>
            <param name="user">User to logon</param>
            <param name="titleId">Title to log into</param>
            <returns>Success Flavor of HR returned in alive reply msg</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LogonUser(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,System.Boolean)">
            <summary>
            Alives a user into presence with a particular Tittle ID, seting up a new PNXbox for the user to
            connect to the FakeSG with.
            </summary>
            <param name="user">User to logon</param>
            <param name="titleId">Title to log into</param>
            <param name="appearOffline">Set this flag to logon cloaked</param>
            <returns>Success Flavor of HR returned in alive reply msg</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LogonUser(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNXbox)">
            <summary>
            Alives a user into presence, optionally seting up a new PNXbox for the user
            to connect to the FakeSG with.
            </summary>
            <param name="user">User to logon</param>
            <param name="xbox">Xbox to connect user through, null to create one</param>
            <returns>Success Flavor of HR returned in alive reply msg</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LogonUser(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNXbox,System.Boolean)">
            <summary>
            Alives a user into presence, optionally seting up a new PNXbox for the user
            to connect to the FakeSG with.
            </summary>
            <param name="user">User to logon</param>
            <param name="xbox">Xbox to connect user through, null to create one</param>
            <param name="appearOffline">Set this flag to logon cloaked</param>
            <returns>Success Flavor of HR returned in alive reply msg</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LogoffUser(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Disconnect the user on the xbox living in the fake sg (clears their user
            slot) and clear the user's internal presence state.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.PrepUserPair(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean@,ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean@)">
            <summary>
            Used to setup operations that require users to be logged on and stores their
            initail state so it can be restored
            </summary>
            <param name="user1">First user</param>
            <param name="wasOffline1">Original logon state of first user</param>
            <param name="user2">Second user</param>
            <param name="wasOffline2">Original logon state of second user</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.RestoreUserPair(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean,ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean)">
            <summary>
            Used to cleanup after operations that required users to be logged on based on
            their initail state
            </summary>
            <param name="user1">First user</param>
            <param name="wasOffline1">Original logon state of first user</param>
            <param name="user2">Second user</param>
            <param name="wasOffline2">Original logon state of second user</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.RequestFriend(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Asks someone who isn't already a buddy to be one or just verifies that the
            request has been made
            </summary>
            <param name="requestor">User doing asking</param>
            <param name="requestee">User being asked</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.AcceptFriend(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Verifies tht a buddy request can be accepted and does it
            </summary>
            <param name="requestee">User that been asked</param>
            <param name="requestor">User that did asking</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.RejectFriend(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Verifies tht a buddy request can be rejected and does it
            </summary>
            <param name="requestee">User that been asked</param>
            <param name="requestor">User that did asking</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.RejectFriend(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean)">
            <summary>
            Verifies tht a buddy request can be rejected and does it
            </summary>
            <param name="requestee">User that been asked</param>
            <param name="requestor">User that did asking</param>
            <param name="never">Put them on never list?</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.MakeFriends(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Establish a one to many friend relationship
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.MakeFriend(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Verifies, Finishes, or completes from the start the exstablishment of buddy
            relationship for two users.
            </summary>
            <param name="requestor">User doing asking</param>
            <param name="requestee">User being asked</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.MakeFriendFast(System.UInt64,System.UInt64)">
            <summary>
            Makes 2 users friends of each other, given their puids.
            This version is much faster to execute than MakeFriend:
              It pokes directly at the uodb sproc rather than going through the normal process.
              No major verification is done.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.DeleteFriend(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Verifies or does the removal of a buddy relationship for two uesrs
            </summary>
            <param name="requestor">User doing asking</param>
            <param name="requestee">User being asked</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.AllocateUsers(System.UInt32)">
            <summary>
            Manually allocate users in the global PNUser queue using the bulk user allocator
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Presence.FriendsCommon.CreateXenonUsers(System.String,System.UInt32,System.Byte)" -->
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.UserChangeTitle(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,System.UInt64,System.Boolean)">
            <summary>
             Legacy.  Use ClientType
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.UserChangeTitle(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,System.UInt64,ServerTestFramework.LiveService.FakeSG.CSGInfo.ClientType)">
            <summary>
            High level title change function. Automatically changes title of the currently connected
            xbox on the user or intantiates a new xbox with the provided title information.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.WaitForXCache">
            <summary>
            Wait for time for xcache.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LightWeightMakeFriends(System.UInt64,System.UInt64,System.String,System.String)">
            <summary>
            Makes two users friends by hitting the databases directly 
            Cache layer is NOT updated.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LightWeightFriendAdd(System.UInt64,System.UInt64,System.String,System.String)">
            <summary>
            Adds a friend relationship by doing inserts on both UODB partitions by passing the cache layer. 
            </summary>
            <param name="userId">xuid of user requesting friendship</param>
            <param name="friendId">xuid of target user</param>
            <param name="userGamertag">gamertag of requesting user</param>
            <param name="friendGamertag">request target gamertag</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.FriendsCommon.LightWeightFriendAccept(System.UInt64,System.UInt64)">
            <summary>
            Accepts an existing friend request by passing the cache layer
            </summary>
            <param name="userId">xuid of user doing the accepting</param>
            <param name="friendId">xuid of user who sent the request</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMMsgFriendsLimitedPresence">
            <summary>
            GetFriends Limited Presence
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg">
            <summary>
            Combines Msg data with properties needed to process requests
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.GetFDHttpHdr(ServerTestFramework.LiveService.FakeSG.CSGInfo@,System.Int64)">
            <summary>
            Makes an Http Header for this request, using cached version of everything
            but content length and auth data if the auth is HttpHdr.  If there is no 
            builder cached a new one is made based on current FD Service 
            </summary>
            <param name="lContentLength">Length of post data</param>
            <returns>hhtp header for FD request</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.TransactFD">
            <summary>
            Send request to PN front door, not expecting a reply.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.TransactFD(System.UInt32@)">
            <summary>
            Send request to PN front door, not expecting a reply.
            </summary>
            <param name="xDelay">XDelay in response Hdr</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.TransactFD(ServerTestFramework.LiveService.PresNotiCommon.PNMsg@)">
            <summary>
            Send request to PN front door, with a reply expected.
            </summary>
            <param name="reply">Response contents as PNMsg</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.TransactFD(ServerTestFramework.LiveService.PresNotiCommon.PNMsg@,System.UInt32@)">
            <summary>
            Send request to PN front door, with a reply expected.
            </summary>
            <param name="reply">Response contents as PNMsg</param>
            <param name="xDelay">XDelay in response Hdr</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.TransactFD(ServerTestFramework.LiveService.FakeSG.CSGInfo@,ServerTestFramework.LiveService.PresNotiCommon.PNMsg@,System.UInt32@)">
            <summary>
            Send request to PN front door, with a reply expected.
            </summary>
            <param name="slot">Customized SGInfo</param>
            <param name="reply">Response contents as PNMsg</param>
            <param name="xDelay">XDelay in response Hdr</param>
        </member>
        <member name="P:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.ServiceUrl">
            <summary>
            Service Url used to create http header
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.ServiceUA">
            <summary>
            Service User agent used in http header
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.Requestor">
            <summary>
            Source of request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.FDPort">
            <summary>
            FD Port to use when sending to FD 
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.FDAuth">
            <summary>
            Auth Method to use when sending to FD
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNRequestMsg.FDService">
            <summary>
            FD Service to request, Loads Url, service ID, and UA (based on service ID)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMMsgFriendsLimitedPresence.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            ctor
            </summary>
            <param name="sender">sender</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PFriendsLimitedPresenceMsgData">
            <summary>
            GetFriends Limited Presence request data
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNMsgData">
            <summary>
            Base class for specific Pres and Noti message data.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PFriendsLimitedPresenceReplyMsgData">
            <summary>
            Response data for GetFriends Limited Presence request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PFriendsLimitedPresenceData">
            <summary>
            PFriendsLimitedPresenceData
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMMsgFriendsNoPresence">
            <summary>
            GetFriends Limited Presence
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMMsgFriendsNoPresence.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            ctor
            </summary>
            <param name="sender">sender</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PFriendsNoPresenceMsgData">
            <summary>
            GetFriends Limited Presence request data
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PFriendsNoPresenceReplyMsgData">
            <summary>
            Response data for GetFriends Limited Presence request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PFriendsNoPresenceData">
            <summary>
            PFriendsLimitedPresenceData
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgAcceptBuddy">
            <summary>
            Accept a request to be someone's buddy
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgAcceptBuddy.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User accepting the request</param>
            <param name="buddy">Buddy that made the request</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PAcceptBuddyMsgData">
            <summary>
            Message data specific to Accept buddy request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgAddAffiliates">
            <summary>
            Attempt to add the given person to the sender's buddy list, either by the
            person's ID or name. Either Buddy ID or Nmae size must be zero.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PAddAffiliatesMsgData">
            <summary>
            Message data specific to AddAffiliates request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgAddBuddy">
            <summary>
            Attempt to add the given person to the sender's buddy list, either by the
            person's ID or name. Either Buddy ID or Nmae size must be zero.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgAddBuddy.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor, defaults to old style add, by PUID
            </summary>
            <param name="user">User asking to be buddies</param>
            <param name="buddy">User being asked to be buddies</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgAddBuddy.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean)">
            <summary>
            Constructor, defaults to old style add 
            </summary>
            <param name="user">User asking to be buddies</param>
            <param name="buddy">User being asked to be buddies</param>
            <param name="byName">Ask using buddy name instead of PUID</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgAddBuddy.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,ServerTestFramework.LiveService.Notification.MsgDetails)">
            <summary>
            Constructor, allows flags and details for add2, defaults to add by PUID
            </summary>
            <param name="user">User asking to be buddies</param>
            <param name="buddy">User being asked to be buddies</param>
            <param name="flags">Message flags</param>
            <param name="details">Message details</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgAddBuddy.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,ServerTestFramework.LiveService.Notification.MsgDetails,System.Boolean)">
            <summary>
            Constructor, allows flags and details for add2, defaults to add by PUID
            </summary>
            <param name="user">User asking to be buddies</param>
            <param name="buddy">User being asked to be buddies</param>
            <param name="flags">Message flags</param>
            <param name="details">Message details</param>
            <param name="byName">Ask using buddy name instead of PUID</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgAddBuddy.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64,System.String)">
            <summary>
            Constructor, buddyId or buddyName can be specified. Leave
            the either of them blank to change the behavior (add by name, add by id)
            </summary>
            <param name="user">User asking to be buddies</param>
            <param name="buddyId">User being asked to be buddies</param>
            <param name="buddyName">User being asked to be buddies</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgAddBuddy.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64,System.String,System.UInt32,ServerTestFramework.LiveService.Notification.MsgDetails)">
            <summary>
            Constructor, allows flags and details for add2, buddyId or buddyName can be specified. Leave
            the either of them blank to change the behavior (add by name, add by id)
            </summary>
            <param name="user">User asking to be buddies</param>
            <param name="buddyId">User being asked to be buddies</param>
            <param name="buddyName">User being asked to be buddies</param>
            <param name="flags">Message flags</param>
            <param name="details">Message details</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PAddBuddyMsgData">
            <summary>
            Message data specific to Add buddy request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PAddBuddyMsgData2">
            <summary>
            Message data specific to Add buddy 2 request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgAlive">
            <summary>
            The pre aftershock way to establish a user's Presence in the system. 
            Translated to P_ALIVE_INTERNAL_MSG by the Front Door. Old unused fields were 
            kept for client compatability, but they've never actually been relied upon
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgAlive.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User being logged in</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PAliveMsgData">
            <summary>
            Message data specific to Alive request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PAliveReplyMsgData">
            <summary>
            Message data specific to all Alive replies
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.BuddyData">
            <summary>
            Buddy data included in Alive replies
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgAlive2">
            <summary>
            The post aftershock way to establish a user's Presence in the system. 
            Translated to P_ALIVE_INTERNAL_MSG by the Front Door. 
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgAlive2.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User being logged in</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PAlive2MsgData">
            <summary>
            Message data specific to Alive_2 request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgAliveInternal">
            <summary>
            Establishes the user's Presence in the system.  This version of alive only goes from 
            FD to INH. FD maps what it can from client alives and adds SG session data such as 
            alternate title ID's and client winsockx enpoint info.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgAliveInternal.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User being logged in</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PAliveInternalMsgData">
            <summary>
            Message data specific to AliveInternal request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgBlockVoice">
            <summary>
            Add a user to my block (mute) list
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgBlockVoice.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User making request</param>
            <param name="block">User being blocked</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PBlockVoiceMsgData">
            <summary>
            Message data specific to Block voice request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgCancelInvite">
            <summary>
            Cancel invitaion of 1 or more users to a particular session
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgCancelInvite.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Constructor
            </summary>
            <param name="user">User canceling invitation</param>
            <param name="buddies">Array of buddies getting uninvited</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PCancelInviteMsgData">
            <summary>
            Message data specific to Cancel invite request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgCheckTitleMessages">
            <summary>
            Request a dump of friend status information for a specified user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgCheckTitleMessages.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="user">User that wants friend status</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PCheckTitleMessagesMsgData">
            <summary>
            Message data specific to Web Friends request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PCheckTitleMessagesReplyMsgData">
            <summary>
            Message data specific to Web Friends reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgDeleteBuddy">
            <summary>
            Delete a buddy from my buddy list
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgDeleteBuddy.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User deleting the buddy</param>
            <param name="buddy">Buddy being deleted</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PDeleteBuddyMsgData">
            <summary>
            Message data specific to Delete buddy request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgFindUser">
            <summary>
            Allows update of title specific data stored by Presence for a particular user. 
            Title initiates immediate update all the way to server. Because of this and the 
            potential for misuse this message has been phased out for new titles.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgFindUser.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="user">User who's data is being updated</param>
            <param name="nickname">new nickname data</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgFindUsers.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64[],System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="user">User who's data is being updated</param>
            <param name="nickname">new nickname data</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PFindUserMsgData">
            <summary>
            Message data specific to FindUser request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PFindUserReplyMsgData">
            <summary>
            Message data specific to FindUser response
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PFindUsersMsgData">
            <summary>
            Message data specific to FindUsers request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PFindUsersReplyMsgData">
            <summary>
            Message data specific to FindUsers response
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgGetFriendsList">
            <summary>
            Request a dump of friend status information for a specified user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgGetFriendsList.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User that wants friend status</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PGetFriendsListMsgData">
            <summary>
            Message data specific to Web Friends request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PGetFriendsListReplyMsgData">
            <summary>
            Message data specific to Web Friends reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.GetFriendsListData">
            <summary>
            Online friend data included in Web Friends reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgGetPresenceInfo">
            <summary>
            Request a dump of friend status information for a specified user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgGetPresenceInfo.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User that wants friend status</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgGetPresenceInfo.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Constructor
            </summary>
            <param name="user">User that wants friend status</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PGetPresenceInfoMsgData">
            <summary>
            Message data specific to Web Friends request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PPresenceInfoReplyMsgData">
            <summary>
            Message data specific to Web Friends reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PresenceInfo">
            <summary>
            Online friend data included in Web Friends reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgInvalidateUser">
            <summary>
            Allows update of title specific data stored by Presence for a particular user. 
            Title initiates immediate update all the way to server. Because of this and the 
            potential for misuse this message has been phased out for new titles.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgInvalidateUser.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User who's data is being updated</param>
            <param name="nickname">new nickname data</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PInvalidateUserMsgData">
            <summary>
            Message data specific to InvalidateUser request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgInvite">
            <summary>
            Invite 1 or more users to a title session
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgInvite.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Constructor
            </summary>
            <param name="user">User sending the invitaion</param>
            <param name="buddies">Array of buddies being invited</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PInviteMsgData">
            <summary>
            Message data specific to Invite request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgInvite2">
            <summary>
            Invite 1 or more users to a session, new version that supports messaging and team
            and competition invitations
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PInvite2MsgData">
            <summary>
            Message data specific to Invite 2 request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgInviteAnswer">
            <summary>
            Single user answers an invitaion to a particular session
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgInviteAnswer.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="user">User responding to the invitation</param>
            <param name="host">Session host that made the invitaion</param>
            <param name="accept">Is invitaion accepted</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgInviteAnswer.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="user">User responding to the invitation</param>
            <param name="host">Session host that made the invitaion</param>
            <param name="reply">Reply code for yes, no, or never</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PInviteAnswerMsgData">
            <summary>
            Message data specific to Invite Answer request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgIsAffiliate">
            <summary>
            determine if a user is on the sender's buddy list
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PIsAffiliateMsgData">
            <summary>
            Message data specific to IsAffiliate request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PIsAffiliateReplyMsgData">
            <summary>
            Message data specific to IsAffiliate reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgLogonCheck">
            <summary>
            determines if a user is already logged in at another location.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgLogonCheck.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="user">user to query logon status</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PLogonCheckMsgData">
            <summary>
            Message data specific to LogonCheck request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PLogonCheckReplyMsgData">
            <summary>
            Message data specific to LogonCheck reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgNickname">
            <summary>
            Allows update of title specific data stored by Presence for a particular user. 
            Title initiates immediate update all the way to server. Because of this and the 
            potential for misuse this message has been phased out for new titles.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgNickname.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="user">User who's data is being updated</param>
            <param name="nickname">new nickname data</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PNicknameMsgData">
            <summary>
            Message data specific to Nickname request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgPeerSession">
            <summary>
            Allows Retrieval of Client Winsock Endpoint info sent up with alives starting 
            with the aftershock release.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgPeerSession.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User making the request for data</param>
            <param name="host">User who's endpoint data is requested</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PPeerSessionMsgData">
            <summary>
            Message data specific to Peer Session request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PPeerSessionReplyMsgData">
            <summary>
            Message data specific to Peer Session reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgPeerSubscribe">
            <summary>
            Allows user to subscribe to presence notifications for other users that are not 
            friends
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgPeerSubscribe.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Constructor
            </summary>
            <param name="user">User wanting presence notifications</param>
            <param name="peers">Users who's presence will be provided</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgPeerSubscribe.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64[])">
            <summary>
            Constructor
            </summary>
            <param name="user">User wanting presence notifications</param>
            <param name="peers">Users who's presence will be provided</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PPeerSubscribeMsgData">
            <summary>
            Message data specific to Peer Subscribe request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PPeerSubscribeReplyMsgData">
            <summary>
            Message data specific to Peer Subscribe reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgPeerSubscribeEx">
            <summary>
            Attempt to add the given person to the sender's buddy list, either by the
            person's ID or name. Either Buddy ID or Nmae size must be zero.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PPeerSubscribeExMsgData">
            <summary>
            Message data specific to AddAffiliates request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PPeerSubscribeExReplyMsgData">
            <summary>
            Message data specific to QueryAffiliates reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgPeerUnsubscribe">
            <summary>
            Cancels subcription to presence notifications for other users that are not 
            friends
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgPeerUnsubscribe.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User wanting to cancel presence notifications</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PPeerUnsubscribeMsgData">
            <summary>
            Message data specific to Peer Unsubscribe request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PPeerUnsubscribeReplyMsgData">
            <summary>
            Message data specific to Peer Unsubscribe reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgQueryAffiliates">
            <summary>
            determine if a user is on the sender's buddy list
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PQueryAffiliatesMsgData">
            <summary>
            Message data specific to QueryAffiliates request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PQueryAffiliatesReplyMsgData">
            <summary>
            Message data specific to QueryAffiliates reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgRejectBuddy">
            <summary>
            Reject a request to be someone's buddy. If never is indicated all future buddy 
            requests from the user being rejected will be blocked at the server.  The "never"
            list is stored on the server and there is no way to remove someone explicitly from 
            it, but sending someone on it a buddy request will remove them implicitly.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgRejectBuddy.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="user">User rejecting the buddy</param>
            <param name="buddy">Buddy being rejected</param>
            <param name="never">Block all future requests</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PRejectBuddyMsgData">
            <summary>
            Message data specific to Reject buddy request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgState">
            <summary>
            Allows update of title specific data stored by Presence for a particular user similar 
            to nickname.  However timing is not immediate or title initiated.  Instead the data 
            rides in periodic SG heatbeat messages.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgState.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User who's state data is being updated</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PStateMsgData">
            <summary>
            Message data specific to State request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgState2">
            <summary>
            Xenon version of state message. This message functions like state, but deprecates the 
            rgbTitleStuff member, and replaces it with the Rich Presence related contexts and properties. 
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgState2.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User who's state data is being updated</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PState2MsgData">
            <summary>
            Message data specific to State2 request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgGetState">
            <summary>
            Allows for the retrieval of State data about a user, including the Rich Presence contexts and properties
            this message is currently only consumed by the FD in response to a Dequeue or Alive so that 
            the Rich Presence string can be created for a user. 
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgGetState.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User who's state data is being updated</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PGetStateMsgData">
            <summary>
            Message data specific to Get State request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PGetStateReplyMsgData">
            <summary>
            Message data specific to Get State reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgUnblockVoice">
            <summary>
            Remove a particular user (or all users) from my blocklist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgUnblockVoice.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User that wants someone unblocked</param>
            <param name="block">User being unblocked</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgUnblockVoice.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User that wants blocklist emptied</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgUnblockVoice.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="user">User that wants someone unblocked</param>
            <param name="blockId">User PUID being unblocked</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PNUnblockVoiceMsgData">
            <summary>
            Message data specific to Unblock request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgWebAlive">
            <summary>
            login a user from the web
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgWebAlive.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User that wants to log in</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgWebAlive2">
            <summary>
            login a user from the web (WebAlive 2)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgWebAlive2.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User that wants to log in</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PWebAliveMsgData">
            <summary>
            Message data specific to Web Alive request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PWebAliveReplyMsgData">
            <summary>
            Message data specific to Web Alive reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PWebAlive2MsgData">
            <summary>
            Message data specific to Web Alive2 request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PMsgWebFriends">
            <summary>
            Request a dump of friend status information for a specified user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PMsgWebFriends.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User that wants friend status</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PWebFriendsMsgData">
            <summary>
            Message data specific to Web Friends request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PWebFriendReplyMsgData">
            <summary>
            Message data specific to Web Friends reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.WebFriend">
            <summary>
            Online friend data included in Web Friends reply
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.Message.Check(ServerTestFramework.LiveService.Notification.Message)">
            <summary>
            Checks current summary contents
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.Message.ToString">
            <summary>
            Displays metadata about the message as a comma separated list of values
            </summary>
            <returns>Message metadata string</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.MsgDetails">
            <summary>
            Message details data (a collection of Message Properties)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.CreateBlank">
            <summary>
            Create a blank set of message details that's ready to have properties added.
            Use of static factory, allows default constructor used by input serialization
            to not have to create the dynamic storage crap
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.WriteStream(System.IO.BinaryWriter)">
            <summary>
            Output serializion overload that first loads portocol data member variable form
            dynamic storage variable use by AddPorperty methods before calling base version
            </summary>
            <param name="binaryWriter">Output serializer</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(ServerTestFramework.LiveService.Notification.MsgPropertyWrapped)">
            <summary>
            Add a wrapped property type, the data will be extracted
            from the extra bytes and put into the details by way of
            another AddProperty call with the stored type.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(System.UInt16)">
            <summary>
            Add an empty property
            </summary>
            <param name="tag">Property tag</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(System.UInt16,System.Byte)">
            <summary>
            Add an 8-bit property
            </summary>
            <param name="tag">Property tag</param>
            <param name="u8">8-bit value</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(System.UInt16,System.UInt16)">
            <summary>
            Add a 16-bit property
            </summary>
            <param name="tag">Property tag</param>
            <param name="u16">16-bit value</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(System.UInt16,System.UInt32)">
            <summary>
            Add a 32-bit property
            (Also works for String Server ID's)
            </summary>
            <param name="tag">Property tag</param>
            <param name="u32">32-bit value</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(System.UInt16,System.UInt64)">
            <summary>
            Add a 64-bit property
            </summary>
            <param name="tag">Property tag</param>
            <param name="u64">64-bit value</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(System.UInt16,System.String)">
            <summary>
            Add a string property
            </summary>
            <param name="tag">Property tag</param>
            <param name="sz">String value</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(System.UInt16,System.DateTime)">
            <summary>
            Add a DataTime property
            </summary>
            <param name="tag">Property tag</param>
            <param name="dt">DateTime value</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(System.UInt16,System.Byte[])">
            <summary>
            Add a Binary Blob property
            </summary>
            <param name="tag">Property tag</param>
            <param name="blob">Binary array</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(System.UInt16,System.UInt32,System.UInt32,System.String)">
            <summary>
            Add an Attachment property
            </summary>
            <param name="tag">Property tag</param>
            <param name="size"></param>
            <param name="flags"></param>
            <param name="url"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.AddProperty(System.UInt16,System.Boolean)">
            <summary>
            Add a Bool property
            </summary>
            <param name="tag">Property tag</param>
            <param name="b">Bool value</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.ReadStream(System.IO.BinaryReader)">
            <summary>
            Input serialization that first loads up the protocol data members then set up
            buffer/reader wrapper for binary data blob
            </summary>
            <param name="binaryReader">Input serializer</param>
            <returns>Self</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.HasNullProperty(System.UInt16)">
            <summary>
            Checks if a Null type property is present.  Because this type of property has no data all
            we can do is see if it's there
            </summary>
            <param name="index">Property tag</param>
            <returns>true if property found and type is null</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetByteProperty(System.UInt16)">
            <summary>
            Returns the byte value of the property with the given tag
            </summary>
            <param name="index">Property tag</param>
            <returns>Value of property </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetWordProperty(System.UInt16)">
            <summary>
            Returns the word value of the property with the given tag
            </summary>
            <param name="index">Property tag</param>
            <returns>Value of property </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetDwordProperty(System.UInt16)">
            <summary>
            Returns the dword value of the property with the given tag
            </summary>
            <param name="index">Property tag</param>
            <returns>Value of property </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetQwordProperty(System.UInt16)">
            <summary>
            Returns the qword value of the property with the given tag
            </summary>
            <param name="index">Property tag</param>
            <returns>Value of property </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetStringProperty(System.UInt16)">
            <summary>
            Returns the string value of the property with the given tag
            </summary>
            <param name="index">Property tag</param>
            <returns>Value of property </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetDateTimeProperty(System.UInt16)">
            <summary>
            Returns the DateTime value of the property with the given tag
            </summary>
            <param name="index">Property tag</param>
            <returns>Value of property </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetBinaryProperty(System.UInt16)">
            <summary>
            Returns the byte array value of the property with the given tag
            </summary>
            <param name="index">Property tag</param>
            <returns>Value of property </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetAttachmentProperty(System.UInt16)">
            <summary>
            Returns the Attachment info value of the property with the given tag
            </summary>
            <param name="index">Property tag</param>
            <returns>Value of property </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetBoolProperty(System.UInt16)">
            <summary>
            Returns the boolean value of the property with the given tag
            </summary>
            <param name="index">Property tag</param>
            <returns>Value of property </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetStringIdProperty(System.UInt16)">
            <summary>
            Returns the String ID value of the property with the given tag
            </summary>
            <param name="index">Property tag</param>
            <returns>Value of property </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetPropertyIndex(System.UInt16)">
            <summary>
            Finds the index of a given property tag in the properties list
            </summary>
            <param name="tag">Property Id</param>
            <returns>Index into properties list</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgDetails.GetPropertyData(System.Byte,System.Byte)">
            <summary>
            Returns the value of the property at given index as the type indicated in the property tag
            </summary>
            <param name="index">Index into MsgProperty array</param>
            <returns>Value of property in type specified by index</returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Notification.MsgDetails.size">
            <summary>
            Better than Size with a capital S that lives in WireData
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.MsgPropertyTag">
            <summary>
            Message Property tags occupy a word where the upper byte indicates the property's 
            data type, and the lower byte indicates a unique identifier for the property.
            Property identifiers only need to be unique within a given message type.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.MsgProperty">
            <summary>
            Message Property contains the tag and a value who's meaning depends on property
            type. 
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgProperty.ReadExtraData(System.IO.BinaryReader)">
            <summary>
            Do a specific read for the type of data stored in this property. If it
            exists outside this property than it must preceed this property in the
            stream. This is the case for msg properties passed as parameters in
            wire protocol. For handling a group of properties in a details blob
            use MsgDetails.GetPropertyData() which can handle the stream seek and object
            conversion.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.MsgPropertyWrapped">
            <summary>
             Wraps a message property with some extra data to hold
             the actual property data. This can be used for passing
             around properties and using them for parameters to APIs
             such as RevokeMsgEx
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgPropertyWrapped.#ctor(System.UInt32)">
            <summary>
            Create the wrapped msg property, allocate cb extra
            bytes for the payload.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgPropertyWrapped.#ctor(ServerTestFramework.WireData)">
            <summary>
            Create the wrapped message property, the extra
            wire data will be serialized new into the payload
            of this property.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgPropertyWrapped.GetWriter">
            <summary>
            Return a writer that allows writing to the allocated
            extra block. 
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.MsgPropertyWrapped.GetReader">
            <summary>
            Return a reader that allows reading from the
            extra block.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.MsgPropertyBinary">
            <summary>
            Format of MSG_PROP_TYPE_BINARY property found in MsgDetails property data blob
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.MsgPropertyAttachment">
            <summary>
            Format of MSG_PROP_TYPE_ATTACHMENT property found in MsgDetails property data blob
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.MsgPropertyString">
            <summary>
            Format of MSG_PROP_TYPE_STRING property found in MsgDetails property data blob
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.MsgNotification">
            <summary>
            Message notification flags in lower 24 bits and message type in upperbyte
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.MsgUtility">
            <summary>
            Utility functions taken from macros found in xonlinep.h
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.InvalidMsgPropertyException">
            <summary>
            Custom Exception class to carry and identify failures due to invalid message properties 
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgAdd">
            <summary>
            Tell Notificaion to add a new item of the given item type to one or more users' 
            queues. (Only needed when isolating notification.  Presence normally does this 
            for it's QTypes.)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Notification.QMsgAdd.#ctor(System.UInt16,System.UInt64[],System.Byte[])" -->
        <member name="T:ServerTestFramework.LiveService.Notification.QAddMsgData">
            <summary>
            Message data specific to Add request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgDeleteMsg">
            <summary>
            Delete message for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgDeleteMsg.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="user">Owner of message</param>
            <param name="msgId">Id of message</param>
            <param name="flags"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QDeleteMsgMsgData">
            <summary>
            Message data specific to Delete Msg request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QDeleteMsgReplyMsgData">
            <summary>
            Message data specific to Delete Msg reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgDeleteSystemMsg">
            <summary>
            Delete specified system message
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgDeleteSystemMsg.#ctor(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="titleId">Title responsible for message</param>
            <param name="msgId">Id of message</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QDeleteSystemMsgMsgData">
            <summary>
            Message data specific to Delete System Msg request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QDeleteSystemMsgReplyMsgData">
            <summary>
            Message data specific to Delete System Msg reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgDeleteTitle">
            <summary>
            Delete title
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgDeleteTitle.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="user">User making request</param>
            <param name="titleId">Id of title</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QDeleteTitleMsgData">
            <summary>
            Message data specific to Delete Title request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QDeleteTitleReplyMsgData">
            <summary>
            Message data specific to Delete Title reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgDequeue">
            <summary>
            Retrieves and deletes notificaion messege queue items for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgDequeue.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="user">Owner of queue</param>
            <param name="qType">One of the available Message Queue types (see XonPresNoti)</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgDequeue.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt16,System.UInt32,System.UInt16,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="user">Owner of queue</param>
            <param name="qType">One of the available Message Queue types (see XonPresNoti)</param>
            <param name="startItemID">First queue item in list to dequeue</param>
            <param name="maxItems">The maximum number of items that can dequeue</param>
            <param name="maxTotalItemDataSize">The maximum number of bytes to allocate for the item buffer on the server</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QDequeueMsgData">
            <summary>
            Message data specific to Dequeue request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QDequeueReplyMsgData">
            <summary>
            Top level of message data specific to Dequeue reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.ListReplyHdr">
            <summary>
            Header portion of message data specific to Dequeue reply.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.ListItem">
            <summary>
            Top level of List Item. One or more of these follow ListReplyHdr in message data 
            specific to Dequeue reply.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.ListItemHdr">
            <summary>
            Common header for all QType specific list items
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.ListItemData">
            <summary>
            Base class for QType specific list items
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.PresenceItem">
            <summary>
            Presence list item specific data
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.Presence2Item">
            <summary>
            Presence2 list item specific data
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.PeerPresenceItem">
            <summary>
            Peer Presence list item specific data
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.ListChangeItem">
            <summary>
            List Change list item specific data. (Also used for buddy requests.)
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.InvitationItem">
            <summary>
            Inivitation list item specific data
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.InvitationAnswerItem">
            <summary>
            Inivitation Answer list item specific data
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgDetails">
            <summary>
            Get details of specified message for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgDetails.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="user">Owner of message</param>
            <param name="msgId">Id of message</param>
            <param name="setFlags"></param>
            <param name="unsetFlags"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QDetailsMsgData">
            <summary>
            Message data specific to Details request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QDetailsReplyMsgData">
            <summary>
            Message data specific to Details reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgEnumMsgs">
            <summary>
            Enumerates messages for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgEnumMsgs.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User messages are to</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QEnumMsgsMsgData">
            <summary>
            Message data specific to Enumerate Msgs request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QEnumMsgsReplyMsgData">
            <summary>
            Message data specific to Enumerate Msgs reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgEnumMsgs2">
            <summary>
            Enumerates messages for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgEnumMsgs2.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User messages are to</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QEnumMsgs2MsgData">
            <summary>
            Message data specific to Enumerate Msgs request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QEnumMsgs2ReplyMsgData">
            <summary>
            Message data specific to Enumerate Msgs reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgEnumSystemMsgs">
            <summary>
            Enumerate non user specific messages for a particular title. 
            System will be 0 or Dash title ID - TBD.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgEnumSystemMsgs.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="titleId">Title responsible for message</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QEnumSystemMsgsMsgData">
            <summary>
            Message data specific to Enumerate System Msgs request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QEnumSystemMsgsReplyMsgData">
            <summary>
            Message data specific to Enumerate System Msgs reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgEnumTitles">
            <summary>
            Enumerate titles
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgEnumTitles.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User making request</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QEnumTitlesMsgData">
            <summary>
            Message data specific to Enumerate Titles request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QEnumTitlesReplyMsgData">
            <summary>
            Message data specific to Enumerate Titles reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.UserTitle">
            <summary>
            Per title info retruned when a user enumerates titlte.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgFlags">
            <summary>
            Set flags of specified message for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgFlags.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="user">Owner of message</param>
            <param name="msgId">Id of message</param>
            <param name="setFlags"></param>
            <param name="unsetFlags"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QFlagsMsgData">
            <summary>
            Message data specific to Flags request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QFlagsReplyMsgData">
            <summary>
            Message data specific to Flags reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgRevokeMsgEx">
            <summary>
            Revoke a message for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgRevokeMsgEx.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64,System.UInt32,System.Byte,ServerTestFramework.LiveService.Notification.MsgPropertyWrapped,ServerTestFramework.LiveService.Notification.RecipientResult[])">
            <summary>
            Constructor
            </summary>
            <param name="sender">Sender of message</param>
            <param name="context">Message context</param>
            <param name="type">Message type</param>
            <param name="recipients">If recipients.dwMessageID is zero, all messages of this type with a matching sender and context are deleted</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QRevokeExMsgMsgData">
            <summary>
            Message data specific to Revoke Msg request
            If recipients.dwMessageID is zero, all messages of this type with a matching sender 
            and context are deleted
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QRevokeExMsgReplyMsgData">
            <summary>
            Message data specific to Revoke Msg By Prop reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgRevokeMsg">
            <summary>
            Revoke a message for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgRevokeMsg.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64,System.Byte,ServerTestFramework.LiveService.Notification.RecipientResult[])">
            <summary>
            Constructor
            </summary>
            <param name="sender">Sender of message</param>
            <param name="context">Message context</param>
            <param name="type">Message type</param>
            <param name="recipients">If recipients.dwMessageID is zero, all messages of this type with a matching sender and context are deleted</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QRevokeMsgMsgData">
            <summary>
            Message data specific to Revoke Msg request
            If recipients.dwMessageID is zero, all messages of this type with a matching sender 
            and context are deleted
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QRevokeMsgReplyMsgData">
            <summary>
            Message data specific to Revoke Msg reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgRevokeMsgByProp">
            <summary>
            Revoke a message for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgRevokeMsgByProp.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64,System.Byte,ServerTestFramework.LiveService.Notification.RecipientResult[])">
            <summary>
            Constructor
            </summary>
            <param name="sender">Sender of message</param>
            <param name="context">Message context</param>
            <param name="type">Message type</param>
            <param name="recipients">If recipients.dwMessageID is zero, all messages of this type with a matching sender and context are deleted</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QRevokeMsgByPropMsgData">
            <summary>
            Message data specific to Revoke Msg request
            If recipients.dwMessageID is zero, all messages of this type with a matching sender 
            and context are deleted
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QRevokeMsgByPropReplyMsgData">
            <summary>
            Message data specific to Revoke Msg By Prop reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgSendMsg">
            <summary>
            Send a message for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgSendMsg.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.Notification.UserMessage,System.UInt64[])">
            <summary>
            Constructor
            </summary>
            <param name="sender">User sending message</param>
            <param name="msg">Message being sent</param>
            <param name="recipients">UserIds message is too</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgSendMsg.#ctor(ServerTestFramework.LiveService.Notification.UserMessage,System.UInt64[])">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message being sent</param>
            <param name="recipients">UserIds message is too</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QSendMsgMsgData">
            <summary>
            Message data specific to Send Msg request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QSendMsgReplyMsgData">
            <summary>
            Message data specific to Send Msg reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.RecipientResult">
            <summary>
            Recipient result is message Id on success and HR on failure
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgSendSystemMsg">
            <summary>
            Send a system message
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgSendSystemMsg.#ctor(ServerTestFramework.LiveService.Notification.SystemMessage)">
            <summary>
            Constructor
            </summary>
            <param name="msg">System Message Object</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QSendSystemMsgMsgData">
            <summary>
            Message data specific to Send System Msg request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QSendSystemMsgReplyMsgData">
            <summary>
            Message data specific to Send System Msg reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgSummary">
            <summary>
            Get summary of specified message for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgSummary.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="user">Owner of message</param>
            <param name="messageId">Id of message</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QSummaryMsgData">
            <summary>
            Message data specific to Summary request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QSummaryReplyMsgData">
            <summary>
            Message data specific to Summary reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgSummary2">
            <summary>
            Get summary of specified message for a user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgSummary2.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="user">Owner of message</param>
            <param name="messageId">Id of message</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QSummary2MsgData">
            <summary>
            Message data specific to Summary request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QSummary2ReplyMsgData">
            <summary>
            Message data specific to Summary reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QMsgSystemDetails">
            <summary>
            Get details of specified system message
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.QMsgSystemDetails.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="titleId">Title responsible for message</param>
            <param name="msgId">Id of message</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QSystemDetailsMsgData">
            <summary>
            Message data specific to System Msg Details request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.QSystemDetailsReplyMsgData">
            <summary>
            Message data specific to System Msg Details reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.SystemMessage">
            <summary>
            System Message Wrapper
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.ToString">
            <summary>
            Displays metadata about the message as a comma separated list of values
            </summary>
            <returns>Message metadata string</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.CreateBlank">
            <summary>
            Creates a blank System message
            </summary>
            <returns>Blank system message ready to be loaded for sending</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.Create(System.String,System.UInt32,System.UInt32,System.UInt64,System.DateTime,System.UInt32,System.UInt16,System.Byte,System.String,ServerTestFramework.LiveService.Notification.MsgDetails)">
            <summary>
            Fully parametarized creation of sytem message
            </summary>
            <param name="senderName">Name of sender</param>
            <param name="titleID">Title message is for</param>
            <param name="region">Region message is for</param>
            <param name="context">Message specific context</param>
            <param name="sentTime">Message activation time</param>
            <param name="flags">Message flags</param>
            <param name="expireMinutes">Minutes until message expires after it is activated</param>
            <param name="type">Message Type</param>
            <param name="description">Message Descripion</param>
            <param name="details">Collection of message properties</param>
            <returns>A system message loaded and ready for sending</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.CreateLiveMsg(ServerTestFramework.LiveService.Notification.Message.Priority,System.String,System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Fully parametarized creaton of Live type system message
            </summary>
            <param name="priority">Message priority, used to set flags</param>
            <param name="senderName">Name of Sender</param>
            <param name="titleId">Title message is for</param>
            <param name="region">Region message is for</param>
            <param name="description">Message Descripion</param>
            <param name="stringId">ID for string server lookup</param>
            <param name="delayedSendMinutes">Minutes from now message will activate</param>
            <param name="expireMinutes">Minutes until message expires after it is activated</param>
            <returns>A complete Live type system message loaded and ready for sending</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.#ctor(ServerTestFramework.LiveService.Notification.SystemMsgSummary)">
            <summary>
            Constuct with received message summary
            </summary>
            <param name="summary">Message summary wire data</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constuct with system details message
            </summary>
            <param name="titleId">Title message was for</param>
            <param name="msgId">ID of message</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.Send">
            <summary>
            Send message based on current contents. Changes Message ID if send succedes
            </summary>
            <returns>Message ID if succesfull</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.Delete(System.UInt32,System.UInt32,ServerTestFramework.LiveService.Notification.SystemMessage.RevokeAlso,System.Boolean)">
            <summary>
            Static fully parametarized deletion
            </summary>
            <param name="titleId">Title message was sent to</param>
            <param name="msgId">ID of message</param>
            <param name="revoke">option to also delete message already delivered to users</param>
            <param name="useDatacenterPort">Whether to use the datacenter port on the FD</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.Delete(ServerTestFramework.LiveService.Notification.SystemMessage.RevokeAlso)">
            <summary>
            Delete this message (based on current contents)
            </summary>
            <param name="revoke">Option to also delete message already delivered to users</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.GetDetails">
            <summary>
            Gets details and stores them, validates Summary recieved with current contents
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.CheckSummary(ServerTestFramework.LiveService.Notification.SystemMsgSummary)">
            <summary>
            Checks current contents against Wire Data summary
            </summary>
            <param name="summary">System message summary wire data</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMessage.CheckSystemMessage(ServerTestFramework.LiveService.Notification.SystemMessage)">
            <summary>
            Checks current summary contents against that of another system message
            </summary>
            <param name="sysMsg">Other system message that should be identical (at least summary part)</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.SystemMsgFolder">
            <summary>
            Collection of a particular title's system messages
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMsgFolder.#ctor(System.UInt32)">
            <summary>
            Cretae empty folder for given title ID
            </summary>
            <param name="titleId">Title ID messages are for</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMsgFolder.Load(System.Boolean)">
            <summary>
            Enumerate messages from server
            </summary>
            <returns>Number of messages retrieved</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMsgFolder.DeleteAll(ServerTestFramework.LiveService.Notification.SystemMessage.RevokeAlso)">
            <summary>
            Delete all loaded messages from server
            </summary>
            <param name="revoke">Option to also delete message already delivered to users</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.SystemMsgFolder.DeleteAll(System.UInt32,ServerTestFramework.LiveService.Notification.SystemMessage.RevokeAlso)">
            <summary>
            Delete all messages for specified title from server
            </summary>
            <param name="titleId">Title messages are for</param>
            <param name="revoke">Option to also delete message already delivered to users</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.SystemMsgSummary">
            <summary>
            System message summary data
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.ToString">
            <summary>
            Displays metadata about the message as a comma separated list of values
            </summary>
            <returns>Message metadata string</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Notification.UserMessage.CreateAndLoad(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32)" -->
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Notification.UserMessage.CreateAndLoad(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt32,System.UInt32,System.UInt32)" -->
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.CreateBlank">
            <summary>
            Creates a blank User message
            </summary>
            <returns>Blank user message ready to be loaded for sending</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.Create(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Byte,System.UInt64,System.UInt32,System.UInt16,ServerTestFramework.LiveService.Notification.MsgDetails)">
            <summary>
            Fully parametarized creation of xbox 1 user message with details
            </summary>
            <param name="sender">User sending the message</param>
            <param name="type">Message Type</param>
            <param name="context">Message specific context</param>
            <param name="flags">Message flags</param>
            <param name="expireMinutes">Minutes until message expires</param>
            <param name="details">Collection of message properties</param>
            <returns>A user message loaded and ready for sending</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.Create(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Byte,System.UInt64,System.UInt32,System.UInt16)">
            <summary>
            Fully parametarized creation of xbox 1 user message without details
            </summary>
            <param name="sender">User sending the message</param>
            <param name="type">Message Type</param>
            <param name="context">Message specific context</param>
            <param name="flags">Message flags</param>
            <param name="expireMinutes">Minutes until message expires</param>
            <returns>A user message loaded and ready for sending</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.Create(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.String,System.Byte,System.UInt64,System.UInt32,System.UInt16,ServerTestFramework.LiveService.Notification.MsgDetails)">
            <summary>
            Fully parametarized creation of xenon user message with details
            </summary>
            <param name="sender">User sending the message</param>
            <param name="subject">Subject from message summary</param>
            <param name="type">Message type</param>
            <param name="context">Message specific context</param>
            <param name="flags">Message flags</param>
            <param name="expireMinutes">Minutes until message expires</param>
            <param name="details">Collection of message properties</param>
            <returns>A user message loaded and ready for sending</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.Create(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.String,System.Byte,System.UInt64,System.UInt32,System.UInt16)">
            <summary>
            Fully parametarized creation of xenon user message without details
            </summary>
            <param name="sender">User sending the message</param>
            <param name="subject">Subject from message summary</param>
            <param name="type">Message type</param>
            <param name="context">Message specific context</param>
            <param name="flags">Message flags</param>
            <param name="expireMinutes">Minutes until message expires</param>
            <returns>A user message loaded and ready for sending</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.CreateTitleCustomMsg(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Creation of basic custom message type
            </summary>
            <param name="sender">User sending the message</param>
            <returns>Most basic custom message</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.CreateFriendsRequestMsg(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Creation of basic friends request message
            </summary>
            <param name="sender">User sending the message</param>
            <returns>Most basic friend request message</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.CreateTeamRecruitMsg(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64)">
            <summary>
            Creation of basic team recruit message
            </summary>
            <param name="sender">User sending the message</param>
            <param name="teamId">Id of team being recruited into</param>
            <returns>Most basic team recruit message</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.CreateCompReminderMsg(System.UInt64,System.String,System.UInt16,System.DateTime,System.UInt32,System.UInt16)">
            <summary>
            Creation of a service originated comp reminder, see comps\query\elimination.cs
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.CreateCompRequestMsg(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64,System.String,System.DateTime,System.DateTime,System.UInt32,System.UInt16)">
            <summary>
            Creation of a user originated competition join request to another user he would
            like to join the competition.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.CreateGameInviteMsg(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.UInt64)">
            <summary>
            Creation of basic game invite message
            </summary>
            <param name="sender">User sending the message</param>
            <param name="sessionId">Id of session being invited to</param>
            <returns>Most basic game invite message</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.CreatePersonalMessage(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.String)">
            <summary>
            Creation of basic game invite message
            </summary>
            <param name="sender">User sending the message</param>
            <param name="sessionId">Id of session being invited to</param>
            <returns>Most basic game invite message</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.AttachText(ServerTestFramework.LiveService.Notification.UserMessage,System.String)">
            <summary>
            Attach a basic string text summary to a message
            </summary>
            <param name="msg">Message to attach details</param>
            <param name="strData">String to attach as a text property</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.AttachVoice(ServerTestFramework.LiveService.Notification.UserMessage)">
            <summary>
            Deprecated, call specific voice attachment function per platform
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.AttachXboxVoice(ServerTestFramework.LiveService.Notification.UserMessage)">
            <summary>
            Attach a generic xbox 1 fake voice attachment to a message
            </summary>
            <param name="msg">Message to attach details</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.AttachXenonVoice(ServerTestFramework.LiveService.Notification.UserMessage)">
            <summary>
            Attach a generic fake voice attachment to a message
            </summary>
            <param name="msg">Message to attach details</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.#ctor(ServerTestFramework.LiveService.Notification.UserMsgSummary)">
            <summary>
            Constuct with received xbox 1 message summary
            </summary>
            <param name="summary">Message summary wire data</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMessage.#ctor(ServerTestFramework.LiveService.Notification.UserMsgSummary2)">
            <summary>
            Constuct with received xenon message summary
            </summary>
            <param name="summary">Message summary wire data</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.UserMsgFolder">
            <summary>
            Collection of a particular user's messages
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.#ctor(System.UInt64)">
            <summary>
            Construct an empty folder for a user, by PUID.
            </summary>
            <param name="ownerId">PUID of owning user</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Construct an empty folder for a user
            </summary>
            <param name="owner">Owner user</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.DeleteInbox">
            <summary>
            Deletes all messages from the server
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.DeleteInbox(System.Boolean)">
            <summary>
            Deletes all messages from the server
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.ClearOutbox">
            <summary>
            Clear all of the sent messages stored
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.AddSentMessage(ServerTestFramework.LiveService.Notification.UserMessage)">
            <summary>
            Manually add a message to the collection.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.Load">
            <summary>
            Enumerate messages from server
            </summary>
            <returns>Number of messages present </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.Load2">
            <summary>
            Enumerate messages from server using new enum2 message type
            </summary>
            <returns>Number of messages present </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.LoadEx">
            <summary>
            Enumerate messages from server using new enum2 message type if the user is
            a xenon user or enumerate using old API for xbox 1 user.
            </summary>
            <returns>Number of messages present </returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.FindBySender(System.Byte,System.UInt64)">
            <summary>
            Finds messages in folder that match given criteria
            </summary>
            <param name="type">Messsage type</param>
            <param name="senderId">User ID of sender</param>
            <returns>Array of messages that match</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.FindByContext(System.Byte,System.UInt64)">
            <summary>
            Finds messages in folder that match given criteria
            </summary>
            <param name="type">Messsage type</param>
            <param name="context">Message type specific context (ie. comp ID)</param>
            <returns>Array of messages that match</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.Find(System.Byte,System.UInt64,System.UInt64)">
            <summary>
            Finds messages in folder that match given criteria
            </summary>
            <param name="type">Messsage type</param>
            <param name="senderId">User ID of sender</param>
            <param name="context">Message type specific context (ie. comp ID)</param>
            <returns>Array of messages that match</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.WaitForMsgBySender(System.Byte,System.UInt64,System.UInt16)">
            <summary>
            Waits for a message that matches given criteria
            </summary>
            <param name="type">Message type</param>
            <param name="senderId">User ID of sender</param>
            <param name="waitSec">Seconds to wait</param>
            <returns>The first message found that matches</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.WaitForMsgByContext(System.Byte,System.UInt64,System.UInt16)">
            <summary>
            Waits for a message that matches given criteria
            </summary>
            <param name="type">Message type</param>
            <param name="context">Message type specific context (ie. comp ID)</param>
            <param name="waitSec">Seconds to wait</param>
            <returns>The first message found that matches</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.WaitForMsg(System.Byte,System.UInt64,System.UInt64,System.UInt16)">
            <summary>
            Waits for a message that matches given criteria
            </summary>
            <param name="type">Message type</param>
            <param name="senderId">User ID of sender</param>
            <param name="context">Message type specific context (ie. comp ID)</param>
            <param name="waitSec">Seconds to wait</param>
            <returns>The first message found that matches</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Notification.UserMsgFolder.ValidateContainsMessage(System.UInt32,ServerTestFramework.LiveService.Notification.UserMessage)">
             <summary>
             Look for a message matching the ID with parameters matching the input
             template.
            
             This method does not do any waiting so it is best to pair with something like
             WaitForNewMessage() on the PNUser to get the message ID.
             </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.Notification.UserMsgFolder.Item(System.UInt32)">
            <summary>
            Indexer to sent message table
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.MsgTime">
            <summary>
            Messaging protocol time is a shortened offset from 1/1/2003
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.UserMsgSummary">
            <summary>
            Message summary data
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Notification.UserMsgSummary2">
            <summary>
            Message summary data
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PNConditionalWaitState">
            <summary>
            Create a multi-value wait state where all conditions must be
            met for the wait to complete.
            </summary>
            <summary>
            Create a multi-value wait state where all conditions must be
            met for the wait to complete.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.#ctor">
            <summary>
            Create a new conditional wait state for a target user. A default of 5 seconds
            will be used for the wait timeout.
            </summary>
            <param name="user">User to act as the target</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.#ctor(System.UInt32)">
            <summary>
            Create a new conditional wait state for a target user.
            </summary>
            <param name="user">User to act as the target</param>
            <param name="maxTimeoutSeconds">Timeout in seconds for the wait state</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.AddRequiredNotification(xonline.common.community.DATA_TYPES,ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Add a new required qflag that should arive based on the action of 
            a certain sender.
            </summary>
            <param name="qFlagMask">Bits to wait on, usually this will be a single bit. See XonPresNoti for bit definitions.</param>
            <param name="sender">Initiator of the action.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.ToString">
            <summary>
            Build a condition string.
            </summary>
            <returns>A string representing all conditions currently unsatisfied</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.WaitOnConditions(System.Boolean)">
            <summary>
            Wait on all conditions.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.AddRequiredQFlag(System.UInt32,ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Add a new required qflag that should arive based on the action of 
            a certain sender.
            </summary>
            <param name="qFlagMask">Bits to wait on, usually this will be a single bit. See XonPresNoti for bit definitions.</param>
            <param name="sender">Initiator of the action.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.AddRequiredMessageType(System.UInt32,ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Add a new required messaging qval that should arive based on the action
            of the sender. Match the type of the message.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.AddRequiredMessageData(System.UInt32,ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Add a new required messaging qval that should arive based on the action
            of the sender. Match the data flags in the message
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.AddRequiredDeletedMessageId(System.UInt32,ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Add a new required deleted messaging qval that should arive based on the action
            of the sender.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.QFlagCondition">
            <summary>
            Condition class that wraps a qflag change on a user. This condition
            will be satisified when that qflag is delivered to the user.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.MessagingCondition">
            <summary>
            Condition class that wraps a messaging qval change.
            will be satisified when that qval data is delivered to the user.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Presence.PNConditionalWaitState.DeletedMessagingCondition">
            <summary>
            Condition class that wraps a deleted message qval change.
            will be satisified when that qval data is delivered to the user.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.SGADDR">
            <summary>
            Unique SG session Identifier
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.XNADDR">
            <summary>
            Part of Online Socket Library client endpoint desciptors (from winsockx.h)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.XNADDR.Check(ServerTestFramework.LiveService.PresNotiCommon.XNADDR)">
            <summary>
            Validates given value agaist current state
            </summary>
            <param name="xnAddr">Test value</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.XNKID">
            <summary>
            Part of Online Socket Library client endpoint desciptors (from winsockx.h)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.XNKID.Check(ServerTestFramework.LiveService.PresNotiCommon.XNKID)">
            <summary>
            Validates given value agaist current state
            </summary>
            <param name="xnKID">Test value</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.XNKEY">
            <summary>
            Part of Online Socket Library client endpoint desciptors (from winsockx.h)
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNMsgHdr">
            <summary>
            Common header for Pres and Noti messages (BASE_MSG_HEADER)
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNMsg">
            <summary>
            Common wrapper for commom Presence and notication message header and custom data.
            (Duplicates Read and Write stream semantics without derivation or specific
            overloading becuse the Wiredata constructor did not like some of the stuff
            that needed to be ddone here. The PresNoti protocol is not very stream friendly.)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNMsg.ReadStream(System.IO.Stream)">
            <summary>
            Loads known Pres and Noit reply messaages from a data stream.
            </summary>
            <param name="stream">Reply message data stream</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNMsg.WriteStream(System.IO.Stream)">
            <summary>
            Serializes Pres and Noti request messages to a data stream.
            </summary>
            <param name="stream">Request message data stream</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNBaseAckReplyMsgData">
            <summary>
            Message data specific to the common Base Ack Reply
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNMsgDeadSG">
            <summary>
            Inform the servers that the given SG just went offline, so any users who were on 
            this SG should be considered offline also.  
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNMsgDeadSG.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNDeadSGMsgData">
            <summary>
            Message data specific to Dead SG request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNMsgDeadUser">
             <summary>
             Inform the presence or notification server that the given user just went offline.
             Format is the same for both Presence and Notification
            
             DeadUser is a forged user message, it requires a valid auth data response from the
             SG but the user ID cannot be in the ticket.
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNMsgDeadUser.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Constructor
            </summary>
            <param name="user">User that is offline</param>
            <param name="service">Presence or Notificaion</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNDeadUserMsgData">
            <summary>
            Message data specific to Dead User request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNMsgDeadXbox">
            <summary>
            Inform the servers that the given XBox just went offline. Any users who were on this 
            XBox should be considered offline also. Notification will consider items pertaining 
            to this address no longer relevant and delete them.
            Format is the same for both Presence and Notification
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNMsgDeadXbox.#ctor(ServerTestFramework.LiveService.PresNotiCommon.PNXbox)">
            <summary>
            Constructor
            </summary>
            <param name="xbox">Xbox going offiline</param>
            <param name="service">Presence or Notificaion</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNDeadXboxMsgData">
            <summary>
            Message data specific to Dead Xbox request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNMsgHello">
            <summary>
            Must be the first message sent between servers after establishing a TCP connection.
            Format is the same for both Presence and Notification
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNMsgHello.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNHelloMsgData">
            <summary>
            Message data specific to Hello request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNUser">
            <summary>
            Simulation state for a user in the the presence and notificatiion system.
            This is state storage, the methods here to not attempt to maintain consistency
            or correctness of User state data.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.PresNotiCommon.PNUser.HQV_ReadMessages">
            <summary>
            Enumerated flags passed or'd together can be passed
            to HandleQValPacket to control how qval data is processed
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.#ctor">
            <summary>
            Creates an user with default data.
            Intended for PN testing only. (Real users get there Ids from UACS.)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.#ctor(System.String,System.UInt64)">
            <summary>
            Create with name raw values provided
            </summary>
            <param name="name">User's gamertag</param>
            <param name="userId">User's PUID</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.#ctor(System.String,System.UInt64,ServerTestFramework.LiveService.PresNotiCommon.PNXbox)">
            <summary>
            Create with name raw values provided, link user to provided console
            </summary>
            <param name="name">User's gamertag</param>
            <param name="userId">User's PUID</param>
            <param name="xbox">Linked console</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.#ctor(ServerTestFramework.Database.PuidName)">
            <summary>
            Create with users made using framework's UODB stuff
            </summary>
            <param name="puidName"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.Connect(ServerTestFramework.LiveService.PresNotiCommon.PNXbox)">
            <summary>
            Establish connection with FakeSG so it will start collecting QVals
            for this user
            </summary>
            <param name="xbox">Xbox that user will connect to FakeSG through</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.Reconnect">
            <summary>
            Manually reconnect a user to an xbox
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.Disconnect">
            <summary>
            Remove association with fake SG, QVal reply will start reporting this
            user as not found
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.Invalidate">
            <summary>
            Reload the online presence record.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.ClearState">
            <summary>
            Cleans out user login state
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.Alive">
            <summary>
            Build and send alive msg, then update state with default presecne flags and buddy
            and block list info returned
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.Dead">
            <summary>
            Send dead user message to presence and notification clusters
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetAuthData">
            <summary>
            Generate HTTP auth data block for this user
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.AddBuddy(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Send a request to add a buddy.
            Buddy list update happens if/when notificaiton is handled
            </summary>
            <param name="buddy">User being asked to be a buddy</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.AcceptBuddy(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Send accept of a buddy request.
            Buddy list update happens if/when notificaiton is handled
            </summary>
            <param name="buddy">User that asked to be buddies</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.RejectBuddy(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Send reject of a buddy request.
            Buddy list update happens if/when notificaiton is handled
            </summary>
            <param name="buddy">User that asked to be buddies</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.RejectBuddy(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean)">
            <summary>
            Send reject of a buddy request.
            Buddy list update happens if/when notificaiton is handled
            </summary>
            <param name="buddy">User that asked to be buddies</param>
            <param name="never">Never see buddy request from that user again</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.DeleteBuddy(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Send delete of requested buddy (accepted or not).
            Buddy list update happens if/when notificaiton is handled
            </summary>
            <param name="buddy">Buddy being deleted</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.DeleteAllBuddies">
            <summary>
            Send delete to all buddies and make sure all buddy lists (theirs and
            ours) get updated by waiting for and handling notifications.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetBuddyInfo(System.UInt64)">
            <summary>
            Lookup buddy information for any buddy state by the associated
            buddies user ID.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.AddPeerSubscription(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Add a user to the list of peer subscribed users.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.AddPeerSubscription(ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Add an array of users to the list of peer subscribed users.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.RemovePeerSubscription(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Remove one of the users that is subscribed and update subscriptions
            on server.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.RemovePeerSubscription(ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Remove an array of users that are subscribed and update subscriptions
            on server.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.PeerSubscribe(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Peer subscribe to a single user. Replaces any subscriptions.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.PeerSubscribe(ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Peer subscribe to a list of users. Replaces any subscriptions.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.PeerSubscribeEx(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Peer subscribe to a single user. Replaces any subscriptions.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.PeerSubscribeEx(ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Peer subscribe to a list of users. Replaces any subscriptions.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.PeerSubscribeEx(ServerTestFramework.LiveService.PresNotiCommon.PNUser[],ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Add Peer subscription to an add list of users. Remove any subscriptions from the delete list.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.PeerUnsubscribe">
            <summary>
            Tear down any existing peer subscriptions on server.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.IsPeerSubscribed(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Test peer subscription state.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.IsPeerSubscribed(System.UInt64)">
            <summary>
            Test peer subscription state.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetPeerInfo(System.UInt64)">
            <summary>
            Lookup a peer info tracking struct.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.ExpectInviteBlip">
            <summary>
            Tell WaitForInviteBlip that you are waiting for an additional
            invite. (Stores current invite sequence number)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForInviteBlip">
            <summary>
            Wait for the invite count to go above the last stored invite 
            blip count (see ExpectInviteBlip()).
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.Invite(ServerTestFramework.LiveService.PresNotiCommon.PNUser[],System.UInt64)">
            <summary>
            Send game session invitation to one or more users
            </summary>
            <param name="invited">Users to invite</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.Invite2(ServerTestFramework.LiveService.PresNotiCommon.PNUser[],System.UInt64,System.UInt64,System.UInt32,ServerTestFramework.LiveService.Notification.MsgDetails)">
            <summary>
            Send game session invitation to one or more users with extra
            messaging parameters and/or competition/team data.
            </summary>
            <param name="invited">Users to invite</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.AcceptInvite(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Send acceptance of invitation to game session
            </summary>
            <param name="host">User that sent the invitations</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetInvitationInfo(System.UInt64)">
            <summary>
            Lookup an invite tracking struct by host user ID
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetPendingOwnedInvite">
            <summary>
            Lookup an invite tracking struct by that is being hosted
            by this user. There can be only one.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.IsInvitedFromBuddy(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Check to see if an invite is pending from a buddy.
            </summary>
            <param name="host">User that might have sent the invitation</param>/
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.IsInvitedFromPeer(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Check to see if an invite is pending from a peer.
            </summary>
            <param name="host">User that might have sent the invitation</param>/
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.IsInvited(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Check to see if an invite is pending from anyone at all.
            </summary>
            <param name="host">User that might have sent the invitation</param>/
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.HasUnAnsweredInvite">
            <summary>
            Look for unanswereqd pending invite
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.RejectInvite(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Send rejection of invitation to game session
            </summary>
            <param name="host">User that sent the invitations</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.RejectInvite(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Boolean)">
            <summary>
            Reject a pending invite.
            </summary>
            <param name="host">User that sent the invitations</param>
            <param name="never">Add host to user's never list</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.CancelInvite(ServerTestFramework.LiveService.PresNotiCommon.PNUser[])">
            <summary>
            Send revocation of game session invitation to one or more users
            </summary>
            <param name="invited">Users no longer invited</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.EnterSession(System.UInt64,System.Boolean)">
            <summary>
            If we are not already in a session this will cause this user
            to appear to enter a session.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.EnterSessionWithObserver(System.UInt64,System.Boolean,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Enter session and wait for the observer to receive a notification
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.LeaveSession">
            <summary>
            Make it appear to presence and reporting that we have left any session
            that we might have been a part of
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetMessageInfo(System.UInt32)">
            <summary>
            Lookup a stored message tracking struct by the message ID.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetMessageInfoFrom(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Lookup all stored message tracking structs by the sending user ID.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetMessageInfoTypeFrom(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Byte)">
            <summary>
            Lookup all stored message tracking structs by the sending user ID and message type.
            If the message type is 0 all messages from this user will be returned.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.DeleteMessage(System.UInt32)">
            <summary>
            Delete a message by it's ID. Also removes any tracking structs.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.RemoveDeletedMessages">
            <summary>
            Remove messages that have been revoked or deleted on the server (we have received
            a deleted message qval for this message ID)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.DeleteAllMessages">
            <summary>
            For all tracking message structs delete the message on the server. Also
            removes tracking struct and returns the array of hresults returned from
            DeleteMessage().
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.RemoveMessageInfo(System.UInt32)">
            <summary>
            Remove a message tracking struct.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.Mute(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Send addition to list of voice blocked users
            </summary>
            <param name="block">User to shut up</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.UnMute(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Send deletion from list of voice blocked users
            </summary>
            <param name="unblock">User to listen to again</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.UnMuteAll">
            <summary>
            Send deletion from all voice blocked users
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.AddConsoleStateInfo(System.UInt32@)">
            <summary>
            Sets the Console Type Bits in the Local State
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.SetTitleData">
            <summary>
            Send current state flags, match session and Title data to server
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.SetTitleData(System.UInt32)">
            <summary>
            Store new value(s). Then send current state flags, match session and Title
            data to server
            </summary>
            <param name="state">New state flags</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.SetTitleData(System.UInt64)">
            <summary>
            Store new value(s). Then send current state flags, match session and Title
            data to server
            </summary>
            <param name="matchId">New match session ID</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.SetTitleData(System.Byte[])">
            <summary>
            Store new value(s). Then send current state flags, match session and Title
            data to server
            </summary>
            <param name="titleStuff">New title data</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.SetTitleData(System.UInt32,System.UInt64,System.Byte[])">
            <summary>
            Store new value(s). Then send current state flags, match session and Title
            data to server
            </summary>
            <param name="state">New state flags</param>
            <param name="matchId">New match session ID</param>
            <param name="titleStuff">New title data</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.SetTitleDataWait(System.UInt32,System.UInt64,ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Store new value(s). Then send current state flags, match session and Title
            data to server. The observer subscribes to the user and waits to receive a notification
            that state has changed.
            </summary>
            <param name="state">New state flags</param>
            <param name="matchId">New match session ID</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetWebFriends">
            <summary>
            Get web friends direct from FD (not webcache)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetFriendsLimitedPresence">
            <summary>
            Get web friends direct from FD (not webcache)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetFriendsNoPresence">
            <summary>
            Get web friends direct from FD (not webcache)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetFriendsList(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Get web friends direct from FD (not webcache)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetFriendsList(System.UInt64,System.UInt64,xonline.common.protocol.socialquery.GetFriendSortType,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Get a user's friends list directly from social query FD and matches the passed in HR.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetFriendsList(xonline.common.protocol.socialquery.GetFriendSortType,System.Int32,System.Int32)">
            <summary>
            Get a user's friends list directly from social query FD
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetFriendsList(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Request another user's friends list directly from social query FD
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetFriendsList(System.UInt64,xonline.common.protocol.socialquery.GetFriendSortType,System.Int32,System.Int32)">
            <summary>
            Request another user's friends list sorted by parameter directly from social query FD
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetPresenceInfo(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Use datacenter port to query presence info for a target.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetPeerSession(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.XSessionInfo@)" -->
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.BuddyStatusPending(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Checks for outgoing buddy request
            </summary>
            <param name="buddy">User being checked</param>
            <returns>A request has been sent to buddy</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.BuddyStatusRequested(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Checks for incoming buddy request
            </summary>
            <param name="buddy">User being checked</param>
            <returns>A request has come from buddy</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.BuddyStatusOK(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Checks for established buddy relationship
            </summary>
            <param name="buddy">User being checked</param>
            <returns>User is a fully accepted buddy</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.BuddyStatus(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Byte)">
            <summary>
            Checks for specified buddy stats
            </summary>
            <param name="buddy">User being checked</param>
            <param name="status">Status being checked for</param>
            <returns>Is a user a buddy with the given status</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.IsBuddy(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Checks for existence of buddy list entry (regardless of Status)
            </summary>
            <param name="buddy">User being checked</param>
            <returns>User is in buddy list</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForBuddyStatusPending(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Wait for a buddy request to a user to be confirmed
            </summary>
            <param name="buddy">User request was sent to</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForBuddyStatusRequested(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Wait for a buddy request from a user to come in
            </summary>
            <param name="buddy">User that made request</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForBuddyStatusOK(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Wait for an accepted buddy request to be confirmed
            </summary>
            <param name="buddy">User that either made or accepted the request</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForBuddyStatusDeleted(ServerTestFramework.LiveService.PresNotiCommon.PNUser)">
            <summary>
            Wait for a buddy deletion to be confirmed.
            </summary>
            <param name="buddy">User that is to be removed</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.MutualWaitForStatus(ServerTestFramework.LiveService.PresNotiCommon.PNUser,ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Byte)">
            <summary>
            Waits and watches Qflags and gets list change and buddy request notifications
            (if flags indicate the need to) in order to try for specified buddy stats.
            </summary>
            <param name="buddy">User waiting on</param>
            <param name="status">Satus being watied for</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForBuddyStatus(ServerTestFramework.LiveService.PresNotiCommon.PNUser,System.Byte)">
            <summary>
            Waits and watches Qflags and gets list change and buddy request notifications
            (if flags indicate the need to) in order to try for specified buddy stats.
            </summary>
            <param name="buddy">User waiting on</param>
            <param name="status">Satus being watied for</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetListChangeNotifications">
            <summary>
            Gets and processes List Change notification queue items
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetBuddyRequestNotifications">
            <summary>
            Gets and processes Buddy Request notification queue items
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetInviteNotifications">
            <summary>
            Gets and processes Invite notification queue items
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetInviteAnswerNotifications">
            <summary>
            Gets and processes Invite Answer notification queue items
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.DequeueNotifications(System.UInt16)">
            <summary>
            Provide granular control over the dequeue message
            </summary>
            <param name="qType">Queue to dequeue from</param>
            <returns>Dequeue reply data</returns>/
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.DequeueNotifications(System.UInt16,System.UInt32,System.UInt16,System.UInt32)">
            <summary>
            Provide granular control over the dequeue message
            </summary>
            <param name="qType">Queue to dequeue from</param>
            <param name="startItemID">Item in queue to start with</param>
            <param name="maxItems">Max items to return</param>
            <param name="maxTotalItemsDataSize">Max total payload data size to return in bytes</param>
            <returns>Dequeue reply data</returns>/
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.GetNotifications(System.UInt16)">
            <summary>
            Gets and processes notification queue items
            </summary>
            <param name="qType">ID of Queue to get items from</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForNewMessage">
            <summary>
            Wait for next message (any).
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForNewMessageType(System.Byte)">
            <summary>
            Wait for a specific type of message to be delivered to the user.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForNewMessage(System.UInt32,System.UInt32)">
            <summary>
            Wait for a message matching data flags to appear in the 0th slot of the
            messaging qvals. Passing zero will return the first non-zero qval.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForDeletedMessage">
            <summary>
            Wait for a non-zero message ID on the deleted message qval payload
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForDeletedMessage(System.UInt32)">
            <summary>
            Wait for a specific message ID on the deleted message qval payload
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.WaitForQFlags(System.UInt32)">
            <summary>
            Wait for a single qval flag, note that this method can be bad for internal state since
            it doesn't ensure that the items are dequeued or that the qvals are updated correctly.
            Also any flags that come in before the one specified will not be correctly handled.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.ProcessQVals">
            <summary>
            Process qvals with default settings.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNUser.ProcessQVals(System.UInt32)">
            <summary>
            Process qvals on the wire, dequeue and updating internal state with dequeues.
            Flags may be 0 or a combination of the HQV flags to control how the processed
            qvals should be processed.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.PresNotiCommon.PNUser.LoggedOn">
            <summary>
            Checks users state bits to see in online flag is set
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.PresNotiCommon.PNUser.Connected">
            <summary>
            Checks if an xbox is set for this user
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNUser.BuddyInfo">
            <summary>
            Used to store information about users buddies
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNUser.InvitationInfo">
            <summary>
            Represents an invitation from a user to a game session. If the Host == this then this is
            an out going InvitationItem
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNUser.PeerInfo">
            <summary>
            Represents a peer subscription to another user
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNUser.MessageInfo">
            <summary>
            Represents message data that was received in a messaging QVAL
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.XSessionInfo">
            <summary>
            Consolodates session info (title and client endpoint)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.XSessionInfo.Check(ServerTestFramework.LiveService.PresNotiCommon.XSessionInfo)">
            <summary>
            Compares current with given state and throws exception when differences found
            </summary>
            <param name="sessInfo">Data to compare against</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.PresNotiCommon.PNXbox">
            <summary>
            Simulation state for an Xbox in the the presence and notificatiion system
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.#cctor">
            <summary>
            Static initializer for clearing any Xbox that the FakeSG is tracking
            this should cleanup the corresponding data in presence the first time
            any PNXbox is used.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.#ctor">
            <summary>
            Creates an xbox with default data in connected state
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.#ctor(System.UInt32)">
            <summary>
            Creates an xbox with default data in connected state with specified titleID
            </summary>
            <param name="titleId">Title ID to be initially connected with</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.#ctor(System.UInt64,System.UInt32,ServerTestFramework.LiveService.FakeSG.CSGInfo.ClientType)">
            <summary>
            Creates an existing xbox with default data in a connect state.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.#ctor(System.UInt32,System.UInt64)">
            <summary>
            Creates an xbox with default data in connected state with titleId and clientVersion
            </summary>
            <param name="titleId">Title ID to be initially connected with</param>
            <param name="clientVersion">Version of client, default is 5936</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.#ctor(System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            Creates an xbox with default data in connected state with titleId and clientVersion and Xenon client
            </summary>
            <param name="titleId">Title ID to be initially connected with</param>
            <param name="clientVersion">Version of client, default is 5936</param>
            <param name="isXenonTitle">Is this a Xenon title (client) or Xbox</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.#ctor(System.UInt32,System.UInt32,System.UInt64)">
            <summary>
            Create with raw values provided, intended for invalid test cases.
            Not initially connected
            </summary>
            <param name="ipsg">SgAddr IP</param>
            <param name="spisg">SgAddr SPI</param>
            <param name="xboxId">SgAddr Xbox ID</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.ConnectToFakeSG">
            <summary>
            Establish this xbox in the fake SG. This method can be called more than once
            to update the associated information about this Xbox in the SG.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.UpdateFakeSG">
            <summary>
            Refresh data in Fake SG will throw if a SPI has not been generated
            indicating a 'disconnected' state.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.DisconnectFromFakeSG">
            <summary>
            Clear SPI, remove this Xbox instance from the FakeSG
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.DeadXbox">
            <summary>
            Send dead xbox message via the CSgMsgNotifyCliDelete
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.ChangeTitle(System.UInt32)">
            <summary>
            Change the Title ID, using the default title version and region
            </summary>
            <param name="titleId">New Title ID</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.ChangeTitle(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Change title information on the local xbox object and in the fake sg
            </summary>
            <param name="titleId">New title Id</param>
            <param name="titleVer">New title version</param>
            <param name="titleRegion">New Title Region</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.CanConsumeRichPresence">
            <summary>
            Returns True if this XBox is expecting to dequeue Presenece 2 items
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.GetUserByIndex(System.Int32)">
            <summary>
            Return user on certain index on this controller.
            </summary>
            <param name="userIndex"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.PresNotiCommon.PNXbox.ConnectedToFakeSG">
            <summary>
            Is xbox connected to SG (fakeSG)
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.XonPresNoti.GetDefaultExpirationForMsgType(System.Byte)">
            <summary>
            Gets the default expiration time, in minutes, for the given message type
            </summary>
            <param name="bMsgType">Message type</param>
            <returns>Default expiration time, in minutes</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.XonPresNoti.BuddyStatusToString(System.Byte)">
            <summary>
            Get the friendly name for a buddy status byte
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.XonPresNoti.QTypeToString(System.UInt32)">
            <summary>
            Get the friendly name for a presence QType ID
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.XonPresNoti.BuildQFlagsString(System.UInt32)">
            <summary>
            Build a string representation of a qflags bit set
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.XonPresNoti.ListChangeOpToString(System.UInt16)">
            <summary>
            Get the friendly name for a list change operation
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.PresNotiCommon.XonPresNoti.BuildMsgNotificationFlagsString(System.UInt32)">
            <summary>
            Build a string representation of the messaging qval notification flags.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.QueryAndLsp.XRLLSPProxyGetSiteInfoRequest">
            <summary>
            This class represents a GetSiteInfo request that originates in an SG 
            LSP server and makes its way to a LSP front-door server by way of the
            LSP proxy, Web SG, and the Live proxy.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.QueryAndLsp.XRLLSPProxyGetSiteInfoRequest.siteID">
            <summary>
            The Site ID for the GetSiteInfo request.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.QueryAndLsp.XRLLSPProxyGetSiteInfoRequest.Execute(System.Net.IPEndPoint)">
            <summary>
            Executes the request.
            </summary>
            <param name="proxyEndPoint">The IPEndPoint of the LSP proxy that 
            this request will be sent through.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.QueryAndLsp.XRLLSPProxyGetSiteInfoRequest.ReadResponse(System.IO.MemoryStream)">
            <summary>
            Reads in the response from the LSP Front Door server. The read
            response is then stored in the 32-bit integer this.response.
            </summary>
            <param name="responseStream"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.QueryAndLsp.XRLSiteInfo">
            <summary>
            This class represents the LSP Front Door server's response to a 
            GetSiteInfo request.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.#ctor">
            <summary>
            DBHelper without stats server simulation.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.#ctor(ServerTestFramework.LiveService.Stats.StatsDBSim.StatsIMDB,System.Boolean)">
            <summary>
            DBHelper with stats server simulation.
            </summary>
            <param name="StatsImdb">IMDB to use for simulation</param>
            <param name="UpdateStatsSim">Keep simulation up to date?</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.LBSname(System.Int32)">
            <summary>
            Used to get a Leaderboard Server's descriptive name.
            </summary>
            <param name="index">Leaderboard Server Index: 0 to n where n = TotalLBServers - 1</param>
            <returns>Name of the Leaderboard Server for the given index</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.LBSinfo(System.Int32)">
            <summary>
            Used to get Information on a Leaderboard Server given its index.
            </summary>
            <param name="index">Leaderboard Server Index: 0 to n where n = TotalLBServers - 1</param>
            <returns>IPEndPoint Structure describing the Leaderboard for the given index</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.SetTitleReadWrite(System.Int32,System.Int32)">
            <summary>
            Used to set a Title as Read/Write
            </summary>
            <param name="TitleID">TitleId to set as Read/Write</param>
            <param name="maxReadwrites">Max Number of Reads/Writes.  Recommended Value: 5</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.HalfConfigureTitle(System.Int32,ServerTestFramework.LiveService.Stats.StatsDBSim.LeaderboardInfo[])">
            <summary>
            Sets up half of the needed information for a title.  Here to reproduce a bug.
            </summary>
            <param name="Title_id">Title Id to "half" configure</param>
            <param name="lbtypes">Array of leaderboards to create for the title</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.ConfigureTitle(System.Int32,ServerTestFramework.LiveService.Stats.StatsDBSim.LeaderboardInfo[])">
            <summary>
            Completely (re)configure a Title.  Any leaderboards already existing are laid waste.
            </summary>
            <param name="Title_id">Title Id to configure</param>
            <param name="lbtypes">Array of leaderboards to create for the title</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.deleteLeaderBoard(System.Int32,System.Int32,System.Int32)">
            <summary>
            Delete a Leaderboard, removing it from NPDB.
            </summary>
            <param name="Title_id">Title Id for leaderboard</param>
            <param name="LB_Type">Leaderboard Id to delete</param>
            <param name="ServerIndex">LBS Index where the leaderboard resides</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.CreateV2LB(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32)">
            <summary>
            Create a non-arbitrated gamertag leaderboard with no ELo Params on LBS Index 0.
            </summary>
            <param name="Title_id">Title Id to create leaderboard for</param>
            <param name="LB_Type">Leaderboard Id to create</param>
            <param name="Reset_Type">Reset Type: 0=Never, 1=Weekly, 2=Monthly, 3=Yearly</param>
            <param name="AttCount">Attachment Count: 0 to n</param>
            <param name="Max_AttSize">Max Attachment Size: 0 to 11264 (11MB)</param>
            <param name="IsTop100">Is this a Top 100 Leaderboard?</param>
            <param name="Decayindays">Time until a user's leaderboard entry becomes invalid and subject to removal, 0=Never</param>
            <returns>0, no matter what</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.HalfCreateNewLeaderBoards(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.String,System.Byte,System.Byte,System.Int32)">
            <summary>
            Half-Creates a leaderboard for a title.
            
            Leaderbord is cleaned up by manually removing the row from NPDB.
            </summary>
            <param name="Title_id">Title Id to create leaderboard for</param>
            <param name="LB_Type">Leaderboard Id to create</param>
            <param name="Reset_Type">Reset Type: 0=Never, 1=Weekly, 2=Monthly, 3=Yearly</param>
            <param name="AttCount">Attachment Count: 0 to n</param>
            <param name="Max_AttSize">Max Attachment Size: 0 to 11264 (11MB)</param>
            <param name="IsTop100">Is this a a Top 100 Leaderboard?</param>
            <param name="Decayindays">Time until a user's leaderboard entry becomes invalid and subject to removal: 0=Never</param>
            <param name="param">ELo Parameters, used to define the curve for ranking</param>
            <param name="IsTeamLB">Is this a Team Leaderboard?</param>
            <param name="IsArbitrated">Should this leaderboard be arbitrated?</param>
            <param name="ServerIndex">Index of the Leaderboard Server to create the leadboard on</param>
            <returns>1, no matter what</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.UpdateLeaderBoards(System.Int32,System.Int32,System.Int32,System.Byte,System.Int32)">
            <summary>
            Used to modify a leaderboard's attributes after it has already been created.
            </summary>
            <param name="Title_id">Title Id for the leaderboard to modify</param>
            <param name="LB_Type">Id of the Leaderboard to modify</param>
            <param name="Reset_Type">New Reset Type: 0=Never, 1=Weekly, 2=Monthly, 3=Yearly</param>
            <param name="IsTop100">Enable/Disable Top 100 functionality</param>
            <param name="Decayindays">New Decay Time: 0=Never</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.CreateNewLeaderBoards(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.String,System.Byte,System.Byte,System.Int32)">
            <summary>
            Used to create a new Leaderboard for a given title.
            </summary>
            <param name="Title_id">Title Id to create leaderboard for</param>
            <param name="LB_Type">Leaderboard Id to create</param>
            <param name="Reset_Type">Reset Type: 0=Never, 1=Weekly, 2=Monthly, 3=Yearly</param>
            <param name="AttCount">Attachment Count: 0 to n</param>
            <param name="Max_AttSize">Max Attachment Size: 0 to 11264 (11MB)</param>
            <param name="IsTop100">Is this a a Top 100 Leaderboard?</param>
            <param name="Decayindays">Time until a user's leaderboard entry becomes invalid and subject to removal: 0=Never</param>
            <param name="param">ELo Parameters, used to define the curve for ranking</param>
            <param name="IsTeamLB">Is this a Team Leaderboard?</param>
            <param name="IsArbitrated">Should this leaderboard be arbitrated?</param>
            <param name="ServerIndex">Index of the Leaderboard Server to create the leadboard on</param>
            <returns>0, no matter what</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.reloadStatFDs">
            <summary>
            Reload the Stats Front Doors, updating leaderboard information for all titles.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.DeleteTitle(System.Int32)">
            <summary>
            Clear all Leaderboards.  Remove all Leaderboards from NPDB.  Remove Title.
            </summary>
            <param name="titleid"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Stats.DBHelper.CreateCompetitionPartition(System.Int32,System.Byte,System.Int32)" -->
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.CreateCompetitionTemplate(System.Int32,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.String,System.Byte,System.Byte,System.Int32)">
            <summary>
            Creates a Competition Template for a given title (must be done prior to creating a Competition Partition).
            </summary>
            <param name="i_title_id">Title Id to create the template for</param>
            <param name="i_templateId">Template Id to create: 0 to 255</param>
            <param name="ti_reset_type">Reset Type: 0=Never, 1=Weekly, 2=Monthly, 3=Yearly</param>
            <param name="i_att_count">Attachment Count: 0 to n</param>
            <param name="i_max_att_size">Max Attachment Size: 0 to 11264 (11MB)</param>
            <param name="i_decay_days">Time until a user's leaderboard entry becomes invalid and subject to removal: 0=Never</param>
            <param name="vc_params">ELo Parameters, used to define the curve for ranking</param>
            <param name="ti_isTeam">Is this a Team Leaderboard?</param>
            <param name="ti_reqArbitration">Should this leaderboard be arbitrated?</param>
            <param name="ServerIndex">Index of the Leaderboard Server to create the template on</param>
            <returns>0 on success, -1 on failure</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.ResetTile(System.UInt32)">
            <summary>
            Resets a title, clearing all leaderboards but not removing them from NPDB.
            </summary>
            <param name="Title_id">Title Id to reset</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.InternalExecuteLeaderboardRequest(ServerTestFramework.LiveService.LBServer.StatsMessage,System.Int32)">
            <summary>
            Private function to submit LBS Requests and return results.
            </summary>
            <param name="Proc">Fully-Formed StatsMessage to submit in the request</param>
            <param name="ServerIndex">Index of the Leaderboard Server to execute request on: -1 = All</param>
            <returns>An ArrayList of results of type: ProcCallResp or null in the error case</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.ResetLeaderboards(System.DateTime)">
            <summary>
            Resets all leaderboards on the Leaderboard Serever with index 0 that would be elegible for reset on the provided date.
            </summary>
            <param name="dt_today">A future date, used to trigger weekly/monthly/yearly resets; will become the "Last Reset Date" for any reset leaderboards.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.ChangeLastWriteTime(System.Int32,System.UInt32,System.Int32)">
            <summary>
            Change the last write time of all entries on a given leaderboard.
            </summary>
            <param name="iLbType">Leaderboard Id to change last write times for</param>
            <param name="title">Title Id for leaderboard</param>
            <param name="iDayDiff">Number of days to adjust the last write time by</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.Decay">
            <summary>
            Auto-Decay all elegible leaderboards on the Leaderboard server with index 0.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.DBHelper.TrimLB">
            <summary>
            Auto-Trim all Top 100 Leaderboards on the Leaderboard Server with index 0.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.StatsFD">
            <summary>
             This class encapsulate the communication between the  test client and the stats FD
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.StatsFD.#ctor">
            object to post data to Stats FD.
        </member>
        <member name="M:ServerTestFramework.LiveService.Stats.StatsFD.PopulateSlot(ServerTestFramework.LiveService.Stats.StatReqBase,ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            this function executes the test case and verifyes.
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.TestManager">
            <summary>
            Summary description for TestManager.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.StatsProc">
            <summary>
            Summary description for XRLUnitReplace.
            </summary>
            
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.StatsSpec">
            <summary>
            Summary description for StatsRead.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.StatsEnumByUserRequest">
            <summary>
            StatsEnumByUserRequest
            </summary>
            <param name="TitleId">Title ID</param>
            <param name="UserId">User id for beginning of page</param>
            <param name="PageSize">Count of max rows to retrieve for enum</param>
            <param name="Spec">Query spec</param>
            <returns>StatsReadResponse</returns>
            <remarks>
            Enumerate list of users starting with specified user id and
            including up to the number of rows specified by page size
            </remarks>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.StatsEnumByRankRequest">
            <summary>
            StatsEnumByRankRequest
            </summary>
            <param name="TitleId">Title ID</param>
            <param name="Rank">Rank value for beginning of page</param>
            <param name="PageSize">Count of max rows to retrieve for enum</param>
            <param name="Spec">Query spec</param>
            <returns>StatsReadResponse</returns>
            <remarks>
            Enumerate list of users starting with specified rank and
            including up to the number of rows specified by page size
            </remarks>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.StatsEnumByRatingRequest">
            <summary>
            StatsEnumByRatingRequest
            </summary>
            <param name="TitleId">Title ID</param>
            <param name="Rating">Rating for beginning of page</param>
            <param name="PageSize">Count of max rows to retrieve for enum</param>
            <param name="Spec">Query spec</param>
            <returns>StatsReadResponse</returns>
            <remarks>
            Enumerate list of users starting with specified rating and
            including up to the number of rows specified by page size
            </remarks>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.XRLCommitAttachment">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.ReqCompCreateLb">
            <summary>
            Summary description for XRLComp.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.XRLEnumLBRequest">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.StatsEstimateRankRequestStruct">
            <summary>
            Summary description for XRLEstimateRankForRatings.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.XRLGetRequest">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.XRLRemoveAtt">
            <summary>
            Summary description for XRLRemoveAtt.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.XRLResetUser">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.XRLSetRequest">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.XRLUsageStore">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.XRLWebEnumLB">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.StatsDBSim.StatsIMDB">
            <summary>
            Summary description for IMDB.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Stats.StatsDBSim.PlayerTeamIMDB">
            <summary>
            Summary description for PlayerTeam.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STS.STSUtil.GetStsSigningCertificate">
            <summary>
            Gets the STS signing certificate as defined by the site.xml file.
            </summary>
            <returns>An X509Certificate2 containing the certificate.</returns>
        </member>
        <member name="M:ServerTestFramework.STS.STSUtil.GetSecurityTicket(ServerTestFramework.STS.STSUtil.GetSecurityTicketParameters)">
            <summary>
            Creates a security ticket in the same way that a call to GetSecurityTicket would.
            </summary>
            <param name="param">The values to use when creating the security ticket.</param>
            <returns>A string representation of the security ticket.</returns>
        </member>
        <member name="M:ServerTestFramework.STS.STSUtil.GetPartnerSecurityTicket(ServerTestFramework.STS.STSUtil.GetPartnerSecurityTicketParameters)">
            <summary>
            Creates a security ticket in the same way that a call to GetPartnerSecurityTicket would.
            </summary>
            <param name="param">The values to use when creating the security ticket.</param>
            <returns>A string representation of the security ticket.</returns>
        </member>
        <member name="M:ServerTestFramework.STS.STSUtil.GetSecurityTicketParameters.#ctor(ServerTestFramework.STS.STSUtil.GetSecurityTicketParameters)">
            <summary>
            Creates a set of GetSecurityTicketParameters based of the 
            values of an existing set of parameters.
            </summary>
            <param name="otherParams">The set of parameters to copy</param>
        </member>
        <member name="T:ServerTestFramework.STS.STSUtil.GetPartnerSecurityTicketParameters">
            <summary>
            Derive from GetSecurityTicketParameters for ease of compatibility with other functions.
            Most of the fields aren't used.
            </summary>
        </member>
        <member name="T:ServerTestFramework.STS.SamlTokenUtil">
            <summary>
            Utility for cerating SAML Tokens of all types
            </summary>
        </member>
        <member name="M:ServerTestFramework.STS.SamlTokenUtil.GetSecurityToken(ServerTestFramework.STS.GetSecurityTokenParameters)">
            <summary>
            Generate a SAML Token the same as the ones returned by GetSecurityToken
            </summary>
            <param name="param">The parameters for the SAML Token</param>
            <returns>A string containing the XML representation of the SAML Token</returns>
            <remarks>This just delegates directly to GenerateSamlTokenString</remarks>
        </member>
        <member name="M:ServerTestFramework.STS.SamlTokenUtil.GenerateSamlTokenString(ServerTestFramework.STS.SamlTokenParameters)">
            <summary>
            Generate a SAML Token based on the values in the SamlTokenParameters
            </summary>
            <param name="param">The parameters for the SAML Token</param>
            <returns>A string containing the XML representation of the SAML Token</returns>
        </member>
        <member name="M:ServerTestFramework.STS.SamlTokenUtil.GenerateSamlToken(System.IdentityModel.Tokens.SamlAttributeStatement,System.IdentityModel.Tokens.SamlConditions,ServerTestFramework.STS.SamlTokenParameters)">
            <summary>
            Create a SamlSecurityToken with the attributes and conditions provided
            </summary>
            <param name="samlAttributeStatement">The SamlAttributes for the SAML Token</param>
            <param name="samlConditions">The SamlConditions for the SAML Token</param>
            <param name="param">Any additional parameters for the SAML Token</param>
            <returns>A new SamlSecurityToken</returns>
        </member>
        <member name="M:ServerTestFramework.STS.SamlTokenUtil.CreateSigningCredentials(ServerTestFramework.STS.SamlTokenParameters)">
            <summary>
            Create a set of SigningCredentials used to sign an SAML token
            </summary>
            <param name="param">The parameters for the credentials</param>
            <returns>A SigningCredentials object that can be used to sign a SAML token</returns>
        </member>
        <member name="M:ServerTestFramework.STS.SamlTokenUtil.GenerateSamlSubject(System.IdentityModel.Tokens.SamlAttributeStatement,ServerTestFramework.STS.SamlTokenParameters)">
            <summary>
            Add the subject information to the samlAttributeStatement
            </summary>
            <param name="samlAttributeStatement">The attribute statement to add the subject to</param>
            <param name="param">The parameters for the subject</param>
        </member>
        <member name="M:ServerTestFramework.STS.SamlTokenUtil.GenerateMachineClaims(System.IdentityModel.Tokens.SamlAttributeStatement,ServerTestFramework.STS.SamlTokenParameters)">
            <summary>
            Add a set of of machine claims to the SMAL Attribute Statement
            </summary>
            <param name="samlAttributeStatement">The statement to add the claims to</param>
            <param name="param">The parameters for the claim</param>
        </member>
        <member name="M:ServerTestFramework.STS.SamlTokenUtil.GenerateUserClaims(System.IdentityModel.Tokens.SamlAttributeStatement,ServerTestFramework.STS.SamlTokenParameters,System.Int32)">
            <summary>
            Add a set of user clams for a specific user to the SAML Attribute Statement
            </summary>
            <param name="samlAttributeStatement">The statement to add the claims to</param>
            <param name="param">The parameters for the claim</param>
            <param name="userIndex">The index of the user to add</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_UnsignedInt(System.UInt32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginCountryParameter_UnsignedInt(System.UInt32,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndCountryParameter_UnsignedInt(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_UnsignedIntAsync(System.UInt32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_UnsignedIntAsync(System.UInt32,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_NullableSignedInt(System.Nullable{System.Int32},System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginCountryParameter_NullableSignedInt(System.Nullable{System.Int32},System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndCountryParameter_NullableSignedInt(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_NullableSignedIntAsync(System.Nullable{System.Int32},System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_NullableSignedIntAsync(System.Nullable{System.Int32},System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_SignedShort(System.Int16,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginCountryParameter_SignedShort(System.Int16,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndCountryParameter_SignedShort(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_SignedShortAsync(System.Int16,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_SignedShortAsync(System.Int16,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_UnsignedByte(System.Byte,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginCountryParameter_UnsignedByte(System.Byte,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndCountryParameter_UnsignedByte(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_UnsignedByteAsync(System.Byte,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_UnsignedByteAsync(System.Byte,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_String(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginCountryParameter_String(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndCountryParameter_String(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_StringAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_StringAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_Binary(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginCountryParameter_Binary(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndCountryParameter_Binary(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_BinaryAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_BinaryAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_DateTime(System.DateTime,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginCountryParameter_DateTime(System.DateTime,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndCountryParameter_DateTime(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_DateTimeAsync(System.DateTime,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_DateTimeAsync(System.DateTime,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MassiveCombo(System.UInt64,System.Boolean,System.UInt64,System.Boolean,System.UInt32,System.Boolean,System.UInt32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginMassiveCombo(System.UInt64,System.Boolean,System.UInt64,System.Boolean,System.UInt32,System.Boolean,System.UInt32,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndMassiveCombo(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MassiveComboAsync(System.UInt64,System.Boolean,System.UInt64,System.Boolean,System.UInt32,System.Boolean,System.UInt32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MassiveComboAsync(System.UInt64,System.Boolean,System.UInt64,System.Boolean,System.UInt32,System.Boolean,System.UInt32,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_None">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginPlatforms_None(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndPlatforms_None(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_NoneAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_NoneAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_Xbox360">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginPlatforms_Xbox360(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndPlatforms_Xbox360(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_Xbox360Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_Xbox360Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_Xbox360_Pc">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginPlatforms_Xbox360_Pc(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndPlatforms_Xbox360_Pc(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_Xbox360_PcAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_Xbox360_PcAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Titles_FFFE07D1">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginTitles_FFFE07D1(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndTitles_FFFE07D1(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Titles_FFFE07D1Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Titles_FFFE07D1Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Titles_FFFE07D1_00112233_FFAA7700">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginTitles_FFFE07D1_00112233_FFAA7700(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndTitles_FFFE07D1_00112233_FFAA7700(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Titles_FFFE07D1_00112233_FFAA7700Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Titles_FFFE07D1_00112233_FFAA7700Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_None">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginPrivileges_None(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndPrivileges_None(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_NoneAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_NoneAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_254">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginPrivileges_254(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndPrivileges_254(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_254Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_254Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_128_160_255">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginPrivileges_128_160_255(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndPrivileges_128_160_255(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_128_160_255Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_128_160_255Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_192_193">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginPrivileges_192_193(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndPrivileges_192_193(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_192_193Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_192_193Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.RequiresClaim_Tiger">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginRequiresClaim_Tiger(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndRequiresClaim_Tiger(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.RequiresClaim_TigerAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.RequiresClaim_TigerAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.RequiresClaim_Lion_Tiger_Ocelot">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginRequiresClaim_Lion_Tiger_Ocelot(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndRequiresClaim_Lion_Tiger_Ocelot(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.RequiresClaim_Lion_Tiger_OcelotAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.RequiresClaim_Lion_Tiger_OcelotAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AllowedValues_Strings">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAllowedValues_Strings(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAllowedValues_Strings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AllowedValues_StringsAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AllowedValues_StringsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_StringAgeGroupElder">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthEquals_StringAgeGroupElder(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthEquals_StringAgeGroupElder(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_StringAgeGroupElderAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_StringAgeGroupElderAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_StringAgeGroupElder_IntegerLanguage1337">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthEquals_StringAgeGroupElder_IntegerLanguage1337(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthEquals_StringAgeGroupElder_IntegerLanguage1337(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_StringAgeGroupElder_IntegerLanguage1337Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_StringAgeGroupElder_IntegerLanguage1337Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_Xuid">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthEquals_Xuid(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthEquals_Xuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_XuidAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_XuidAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_PositiveInteger">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthGreaterThan_PositiveInteger(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthGreaterThan_PositiveInteger(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_PositiveIntegerAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_PositiveIntegerAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_ZeroInteger">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthGreaterThan_ZeroInteger(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthGreaterThan_ZeroInteger(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_ZeroIntegerAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_ZeroIntegerAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_NegativeInteger">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthGreaterThan_NegativeInteger(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthGreaterThan_NegativeInteger(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_NegativeIntegerAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_NegativeIntegerAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_String">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthGreaterThan_String(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthGreaterThan_String(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_StringAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_StringAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_PositiveInteger">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthLessThan_PositiveInteger(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthLessThan_PositiveInteger(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_PositiveIntegerAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_PositiveIntegerAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_ZeroInteger">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthLessThan_ZeroInteger(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthLessThan_ZeroInteger(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_ZeroIntegerAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_ZeroIntegerAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_NegativeInteger">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthLessThan_NegativeInteger(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthLessThan_NegativeInteger(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_NegativeIntegerAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_NegativeIntegerAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_String">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginAuthLessThan_String(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndAuthLessThan_String(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_StringAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_StringAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_UnsignedLong(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginUserParameter_UnsignedLong(System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndUserParameter_UnsignedLong(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_UnsignedLongAsync(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_UnsignedLongAsync(System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_NullableUnsignedLong(System.Nullable{System.UInt64},System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginUserParameter_NullableUnsignedLong(System.Nullable{System.UInt64},System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndUserParameter_NullableUnsignedLong(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_NullableUnsignedLongAsync(System.Nullable{System.UInt64},System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_NullableUnsignedLongAsync(System.Nullable{System.UInt64},System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_SignedLong(System.Int64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginUserParameter_SignedLong(System.Int64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndUserParameter_SignedLong(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_SignedLongAsync(System.Int64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_SignedLongAsync(System.Int64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_String(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginUserParameter_String(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndUserParameter_String(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_StringAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_StringAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_Binary(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginUserParameter_Binary(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndUserParameter_Binary(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_BinaryAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_BinaryAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MachineParameter_UnsignedLong(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginMachineParameter_UnsignedLong(System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndMachineParameter_UnsignedLong(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MachineParameter_UnsignedLongAsync(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MachineParameter_UnsignedLongAsync(System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MachineParameter_String(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginMachineParameter_String(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndMachineParameter_String(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MachineParameter_StringAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MachineParameter_StringAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_UnsignedInt(System.UInt32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginTitleParameter_UnsignedInt(System.UInt32,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndTitleParameter_UnsignedInt(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_UnsignedIntAsync(System.UInt32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_UnsignedIntAsync(System.UInt32,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_SignedInt(System.Int32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginTitleParameter_SignedInt(System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndTitleParameter_SignedInt(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_SignedIntAsync(System.Int32,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_SignedIntAsync(System.Int32,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_UnsignedLong(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginTitleParameter_UnsignedLong(System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndTitleParameter_UnsignedLong(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_UnsignedLongAsync(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_UnsignedLongAsync(System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_String(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginTitleParameter_String(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndTitleParameter_String(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_StringAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_StringAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_Binary(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginTitleParameter_Binary(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndTitleParameter_Binary(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_BinaryAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_BinaryAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_DateTime(System.DateTime,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.BeginTitleParameter_DateTime(System.DateTime,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.EndTitleParameter_DateTime(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_DateTimeAsync(System.DateTime,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_DateTimeAsync(System.DateTime,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_UnsignedIntCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_NullableSignedIntCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_SignedShortCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_UnsignedByteCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_StringCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_BinaryCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.CountryParameter_DateTimeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MassiveComboCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_NoneCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_Xbox360Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Platforms_Xbox360_PcCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Titles_FFFE07D1Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Titles_FFFE07D1_00112233_FFAA7700Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_NoneCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_254Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_128_160_255Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.Privileges_192_193Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.RequiresClaim_TigerCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.RequiresClaim_Lion_Tiger_OcelotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AllowedValues_StringsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_StringAgeGroupElderCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_StringAgeGroupElder_IntegerLanguage1337Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthEquals_XuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_PositiveIntegerCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_ZeroIntegerCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_NegativeIntegerCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthGreaterThan_StringCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_PositiveIntegerCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_ZeroIntegerCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_NegativeIntegerCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.AuthLessThan_StringCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_UnsignedLongCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_NullableUnsignedLongCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_SignedLongCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_StringCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.UserParameter_BinaryCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MachineParameter_UnsignedLongCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.MachineParameter_StringCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_UnsignedIntCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_SignedIntCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_UnsignedLongCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_StringCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_BinaryCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute.TitleParameter_DateTimeCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.CountryParameter_UnsignedIntCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.CountryParameter_NullableSignedIntCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.CountryParameter_SignedShortCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.CountryParameter_UnsignedByteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.CountryParameter_StringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.CountryParameter_BinaryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.CountryParameter_DateTimeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.MassiveComboCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Platforms_NoneCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Platforms_Xbox360CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Platforms_Xbox360_PcCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Titles_FFFE07D1CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Titles_FFFE07D1_00112233_FFAA7700CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Privileges_NoneCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Privileges_254CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Privileges_128_160_255CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Privileges_192_193CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.RequiresClaim_TigerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.RequiresClaim_Lion_Tiger_OcelotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AllowedValues_StringsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthEquals_StringAgeGroupElderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthEquals_StringAgeGroupElder_IntegerLanguage1337CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthEquals_XuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthGreaterThan_PositiveIntegerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthGreaterThan_ZeroIntegerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthGreaterThan_NegativeIntegerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthGreaterThan_StringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthLessThan_PositiveIntegerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthLessThan_ZeroIntegerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthLessThan_NegativeIntegerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.AuthLessThan_StringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.UserParameter_UnsignedLongCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.UserParameter_NullableUnsignedLongCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.UserParameter_SignedLongCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.UserParameter_StringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.UserParameter_BinaryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.MachineParameter_UnsignedLongCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.MachineParameter_StringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.TitleParameter_UnsignedIntCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.TitleParameter_SignedIntCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.TitleParameter_UnsignedLongCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.TitleParameter_StringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.TitleParameter_BinaryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.TitleParameter_DateTimeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.CallVerifyOperator(System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.BeginCallVerifyOperator(System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.EndCallVerifyOperator(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.CallVerifyOperatorAsync(System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.CallVerifyOperatorAsync(System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.CallFindClaim(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.BeginCallFindClaim(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.EndCallFindClaim(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.CallFindClaimAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.CallFindClaimAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.CallVerifyOperatorCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code.CallFindClaimCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.CallVerifyOperatorCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.CallVerifyOperatorCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.CallVerifyOperatorCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.CallFindClaimCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.CallFindClaimCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.CallFindClaimCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.PlatformsPC">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.BeginPlatformsPC(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.EndPlatformsPC(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.PlatformsPCAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.PlatformsPCAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.PlatformsPC_WebConfigXbox360">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.BeginPlatformsPC_WebConfigXbox360(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.EndPlatformsPC_WebConfigXbox360(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.PlatformsPC_WebConfigXbox360Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.PlatformsPC_WebConfigXbox360Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.TitlesFFFE07D2">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.BeginTitlesFFFE07D2(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.EndTitlesFFFE07D2(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.TitlesFFFE07D2Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.TitlesFFFE07D2Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.TitlesFFFE07D2_WebConfigFFFE07D1">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.BeginTitlesFFFE07D2_WebConfigFFFE07D1(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.EndTitlesFFFE07D2_WebConfigFFFE07D1(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.TitlesFFFE07D2_WebConfigFFFE07D1Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.TitlesFFFE07D2_WebConfigFFFE07D1Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges253">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.BeginPrivileges253(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.EndPrivileges253(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges253Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges253Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges254">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.BeginPrivileges254(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.EndPrivileges254(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges254Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges254Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges254_WebConfig255">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.BeginPrivileges254_WebConfig255(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.EndPrivileges254_WebConfig255(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges254_WebConfig255Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges254_WebConfig255Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.RequiresClaimLion">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.BeginRequiresClaimLion(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.EndRequiresClaimLion(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.RequiresClaimLionAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.RequiresClaimLionAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.RequiresClaimLion_WebConfigTiger">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.BeginRequiresClaimLion_WebConfigTiger(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.EndRequiresClaimLion_WebConfigTiger(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.RequiresClaimLion_WebConfigTigerAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.RequiresClaimLion_WebConfigTigerAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.PlatformsPCCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.PlatformsPC_WebConfigXbox360Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.TitlesFFFE07D2Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.TitlesFFFE07D2_WebConfigFFFE07D1Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges253Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges254Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.Privileges254_WebConfig255Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.RequiresClaimLionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed.RequiresClaimLion_WebConfigTigerCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.PlatformsPCCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.PlatformsPC_WebConfigXbox360CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.TitlesFFFE07D2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.TitlesFFFE07D2_WebConfigFFFE07D1CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Privileges253CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Privileges254CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Privileges254_WebConfig255CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.RequiresClaimLionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.RequiresClaimLion_WebConfigTigerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.PlatformsPC">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.BeginPlatformsPC(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.EndPlatformsPC(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.PlatformsPCAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.PlatformsPCAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.PlatformsPC_WebConfigXbox360">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.BeginPlatformsPC_WebConfigXbox360(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.EndPlatformsPC_WebConfigXbox360(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.PlatformsPC_WebConfigXbox360Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.PlatformsPC_WebConfigXbox360Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.TitlesFFFE07D2">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.BeginTitlesFFFE07D2(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.EndTitlesFFFE07D2(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.TitlesFFFE07D2Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.TitlesFFFE07D2Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.TitlesFFFE07D2_WebConfigFFFE07D1">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.BeginTitlesFFFE07D2_WebConfigFFFE07D1(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.EndTitlesFFFE07D2_WebConfigFFFE07D1(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.TitlesFFFE07D2_WebConfigFFFE07D1Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.TitlesFFFE07D2_WebConfigFFFE07D1Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges252">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.BeginPrivileges252(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.EndPrivileges252(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges252Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges252Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges254">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.BeginPrivileges254(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.EndPrivileges254(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges254Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges254Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges254_WebConfig255">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.BeginPrivileges254_WebConfig255(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.EndPrivileges254_WebConfig255(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges254_WebConfig255Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges254_WebConfig255Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.RequiresClaimLion">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.BeginRequiresClaimLion(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.EndRequiresClaimLion(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.RequiresClaimLionAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.RequiresClaimLionAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.RequiresClaimLion_WebConfigTiger">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.BeginRequiresClaimLion_WebConfigTiger(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.EndRequiresClaimLion_WebConfigTiger(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.RequiresClaimLion_WebConfigTigerAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.RequiresClaimLion_WebConfigTigerAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.PlatformsPCCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.PlatformsPC_WebConfigXbox360Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.TitlesFFFE07D2Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.TitlesFFFE07D2_WebConfigFFFE07D1Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges252Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges254Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.Privileges254_WebConfig255Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.RequiresClaimLionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride.RequiresClaimLion_WebConfigTigerCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.PlatformsPCCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.PlatformsPC_WebConfigXbox360CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.TitlesFFFE07D2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.TitlesFFFE07D2_WebConfigFFFE07D1CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.Privileges252CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.Privileges254CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.Privileges254_WebConfig255CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.RequiresClaimLionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.RequiresClaimLion_WebConfigTigerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.Echo(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.BeginEcho(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.EndEcho(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.EchoAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.EchoAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.GetTokenClaimsString">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.BeginGetTokenClaimsString(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.EndGetTokenClaimsString(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.GetTokenClaimsStringAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.GetTokenClaimsStringAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.EchoCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple.GetTokenClaimsStringCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.EchoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.EchoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.EchoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.GetTokenClaimsStringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.GetTokenClaimsStringCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.GetTokenClaimsStringCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Platforms_Xbox360">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginPlatforms_Xbox360(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndPlatforms_Xbox360(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Platforms_Xbox360Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Platforms_Xbox360Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Titles_FFFE07D1">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginTitles_FFFE07D1(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndTitles_FFFE07D1(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Titles_FFFE07D1Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Titles_FFFE07D1Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Privileges_254">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginPrivileges_254(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndPrivileges_254(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Privileges_254Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Privileges_254Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.RequiresClaim_Tiger">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginRequiresClaim_Tiger(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndRequiresClaim_Tiger(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.RequiresClaim_TigerAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.RequiresClaim_TigerAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EqualsAgeGroup_OldEnough">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginEqualsAgeGroup_OldEnough(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndEqualsAgeGroup_OldEnough(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EqualsAgeGroup_OldEnoughAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EqualsAgeGroup_OldEnoughAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.GreaterThanInteger_13">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginGreaterThanInteger_13(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndGreaterThanInteger_13(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.GreaterThanInteger_13Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.GreaterThanInteger_13Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.LessThanInteger_13">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginLessThanInteger_13(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndLessThanInteger_13(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.LessThanInteger_13Async">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.LessThanInteger_13Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleAnd">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginSimpleAnd(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndSimpleAnd(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleAndAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleAndAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleOr">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginSimpleOr(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndSimpleOr(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleOrAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleOrAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleNot">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginSimpleNot(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndSimpleNot(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleNotAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleNotAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.ComplexAndOrNot">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.BeginComplexAndOrNot(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EndComplexAndOrNot(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.ComplexAndOrNotAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.ComplexAndOrNotAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Platforms_Xbox360Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Titles_FFFE07D1Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.Privileges_254Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.RequiresClaim_TigerCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.EqualsAgeGroup_OldEnoughCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.GreaterThanInteger_13Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.LessThanInteger_13Completed">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleAndCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleOrCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.SimpleNotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig.ComplexAndOrNotCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.Platforms_Xbox360CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.Titles_FFFE07D1CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.Privileges_254CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.RequiresClaim_TigerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.EqualsAgeGroup_OldEnoughCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.GreaterThanInteger_13CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.LessThanInteger_13CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.SimpleAndCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.SimpleOrCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.SimpleNotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.ComplexAndOrNotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.LBServer.LBSClient">
            <summary>
            Summary description for LBSClient.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.LBServer.LBSRequest">
            <summary>
            Summary description for LBSRequest.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.LiveInfo.XRLGetLiveConfig">
            <summary>
            This class is for getting live config data from the live registry.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.LiveInfo.XRLGetLiveConfig.#ctor(System.String)">
            <summary>
            default constructor for XRLGetLiveConfig
            normally will be used for negative test cases
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.LiveInfo.XRLGetNetworkAuthorizationList">
            <summary>
            Wraps the GetNetworkAuthorizationList which provides a set of endpoints that 
            a title is able to connect to and some additional metadata about them.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.LiveInfo.XRLGetNetworkAuthorizationList.#ctor">
            <summary>
            Create an empty GetNetworkAuthorizationList request
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.LiveInfo.XRLGetNetworkAuthorizationList.#ctor(System.UInt32)">
            <summary>
            Create a GetNetworkAuthorizationList request for the given title id
            </summary>
            <param name="titleId">The title to request an authorization list for</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.LiveInfo.XRLGetNetworkAuthorizationList.Execute">
            <summary>
            Execute a GetNetworkAuthorizationList request against the default LiveInfo interface
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.LiveInfo.XRLGetNetworkAuthorizationList.TitleId">
            <summary>
            Represents the title that the request is being made from
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Cron.XrlAddJobRequest">
            <summary>
            Summary description for XrlAddJob.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Cron.XrlFindJobsRequest">
            <summary>
            Summary description for XrlFindJobs.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Cron.XrlGetJobRequest">
            <summary>
            Summary description for XrlGetJob.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Cron.XrlRemoveJobRequest">
            <summary>
            Summary description for XrlRemoveJob.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Cron.XrlTimeWarp">
            <summary>
            Summary description for XrlTimeWarp.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.UacsCommon">
            <summary>
            This class will be aggregated into TestBase to provide common UACS functionality
            </summary>
            <summary>
            This class provides common UACS functionality related to XeUser creation;
            </summary>
            <summary>
            This class provides common UACS functionality related to locale
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UacsCommon.CreateUser(ServerTestFramework.LiveService.UserAccount.Owner@)">
            <summary>
            Generates and creates a user.
            </summary>
            <param name="ownr"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.BillingInfo">
            <summary>
            Billing coder, please add proper definition for billing information
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.BillingInfo.ToString">
            <summary>
            return billing information in a string format.  Billing coder please decide what information is necessary to return.
            </summary>
            <returns>string that contains billing information</returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.PassportInfo.MemberName">
            <summary>
            I don't see after passport has been created, there is any reason to change memberName, SQ and SA.  And thus I have made those field public readonly.
            sessionToken is in the same category, however, I don't see anybody other than passport functions to use it, and thus the internal designator.
            Password can be changed, and thus, I will provide an accessor.
            </summary>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.PassportInfo.EncryptedPassword">
            <summary>
            encrypted password is generated by using password, secret question and secret answer
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.UacsCommon2">
            <summary>
            This class will be aggregated into TestBase to provide common UACS functionality
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.UpsProfile">
            <summary>
            Summary description for Ups.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.UserTestBase.TestNegative(ServerTestFramework.LiveService.XRLPayload,System.UInt32)">
            <summary>
            Verifies that the specified call failed, and that the returned error matches the expected code. 
            This behavior can be overriden to not check for an explicit error code
            
            This function will also set ResultCode as needed
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLChangeGamerTag">
             <summary>
            
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.Owner.GetCCNumber">
            <summary>
            Generates a random Visa number
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.Owner.GetCCNumber(System.String,System.Int32)">
            <summary>
            Generates a credit card number that conforms to the LUHN formula
            </summary>
            <param name="prefix">The prefix for the credit card number.</param>
            <param name="size">The length of the credit card number.</param>
            <returns>A string containing the generated credit card number.</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLEnumerateEligible">
            <summary>
            Summary description for XRLEnumerateEligible.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLGetPaymentInfo">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLGetPostalCode">
            <summary>
            Handles the UACS GetPostalCode API
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLGetSubscriptionStatus">
            <summary>
            Summary description for XRLGetSubscriptionStatus.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLLinkWebAccount">
            <summary>
            Summary description for LinkWebAccount.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLRenewSubscription">
            <summary>
            Summary description for XRLRenewSubscription.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLSetPaymentInfo">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.SetUserPIN">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLSetUserSettings">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLSetUserSettings2">
            <summary>
            Executes the SetUserSettings2 API
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLVerifyBillingPIN">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLVerifyVoucher">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLVerifyVoucherGetOffer">
             <summary>
            
             </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.XRLWebGetUserSettings">
             <summary>
            
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.Offers.GetMigraionOffer(System.UInt64)">
            
             Here, we should be in sync with what's in RawCatalogDB
             
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.Offers.MusicNetOffers">
            <summary>
            MusicNet subscriptions
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLCreateUserAndBillableAccount.Execute">
            <summary> Perform the create request, creating a machine if required </summary>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLGenerateGamertag.Execute">
            <summary> Perform the create request, creating a machine if required </summary>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofData.proofType">
            <summary>
            Enumeration detailing the type of the strong proof
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofData.proofDataLength">
            <summary>
            Protocol element to hold the length of the string
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofData.proofData">
            <summary>
            The actual data of the strong proof.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofStatus.proofType">
            <summary>
            Enumeration detailing the type of the strong proof
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofStatus.proofDataLength">
            <summary>
            Protocol element to hold the length of the string
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofStatus.proofData">
            <summary>
            The actual data of the strong proof.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.ProofStatus.isConfirmed">
            <summary>
            Flag to state if the strong proof has already been confirmed
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportAddProof.userPuid">
            <summary>
            The Xuid of the account that is attempting to perform the operation.
            Since the console can have multiple users attached, need to distinguish
            which user is making the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportAddProof.machinePuid">
            <summary>
            The console where the user make the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportAddProof.sessionToken">
            <summary>
            Standard Xbox protocol element to state that this operation should be
            password verified.  It represents the signed passport puid of the account
            being accessed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportAddProof.proofData">
            <summary>
            The strong proof data
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportAddProofResponse.isConfirmed">
            <summary>
            Flag to state if the strong proof has already been confirmed
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLPassportCreateGenerated.Execute">
            <summary> Perform the create request, creating a machine if required </summary>
            <returns>True if the request is successful, False otherwise.</returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofs.userPuid">
            <summary>
            The Xuid of the account that is attempting to perform the operation.
            Since the console can have multiple users attached, need to distinguish
            which user is making the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofs.machinePuid">
            <summary>
            The console where the user make the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofs.sessionToken">
            <summary>
            Standard Xbox protocol element to state that this operation should be
            password verified.  It represents the signed passport puid of the account
            being accessed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofsResponse.proofsLength">
            <summary>
            Protocol element to hold the array length.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofsResponse.proofs">
            <summary>
            The list of strong proofs returned from passport
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofTypes.userPuid">
            <summary>
            The Xuid of the account that is attempting to perform the operation.
            Since the console can have multiple users attached, need to distinguish
            which user is making the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofTypes.machinePuid">
            <summary>
            The console where the user make the request.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofTypesResponse.proofTypesLength">
            <summary>
            Protocol element to hold the array length
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.XRLPassportGetProofTypesResponse.proofTypes">
            <summary>
            Array of proof types that are tied to the account that can be
            queried without knowledge of the password.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.PreviewMergeSubscriptionRequest">
            <summary>
            Request class for Preview Merge subscription. Takes primary and secondary puid
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.PreviewMergeSubscriptionResponse">
            <summary>
            Response for PreviewMergeSubscription Request
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLXeRecoverAccount.Execute">
            <summary>
            Execute this XeRecoverAccount request against the xuacs virtual interface
            </summary>
            <returns>True if the request was successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLXeRecoverAccount.Execute(System.Net.IPEndPoint)">
            <summary>
            Execute this request using the appropriate request type and reads
            the response as appropriate
            </summary>
            <param name="endPoint">The endpoint against which to execute the request</param>
            <returns>True if the request was successfull, false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XRLXeRecoverAccount.PopulateSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            <summary>
            Populates the appropritate variables in the SG Slot with values from the request
            </summary>
            <param name="slot">The SGSlot to populate</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeRecoverAccountRequest60.Execute">
            <summary>
            Execute this XeRecoverAccount request against the xuacs virtual interface
            </summary>
            <returns>True if the request was successful, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeRecoverAccountRequest60.Execute(System.Net.IPEndPoint)">
            <summary>
            Execute this request using the appropriate request type and reads
            the response as appropriate
            </summary>
            <param name="endPoint">The endpoint against which to execute the request</param>
            <returns>True if the request was successfull, false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.XeRecoverAccountRequest60.PopulateSlot(ServerTestFramework.LiveService.FakeSG.CSGInfo@)">
            <summary>
            Populates the appropritate variables in the SG Slot with values from the request
            </summary>
            <param name="slot">The SGSlot to populate</param>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.XeRecoverAccountRequest60.Response">
            <summary>
            The response object that the response data will be read into after execution
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.GetPointsBalance(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.BeginGetPointsBalance(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.EndGetPointsBalance(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.GetPointsBalanceAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.GetPointsBalanceAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.SignIn">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.BeginSignIn(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.EndSignIn(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.SignInAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.SignInAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.GetPointsBalanceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.SignInCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.ZuneSignIn.UserAccountService.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceResults.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceResults.AboveLowBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceResults.DmpAccountStatus">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.SessionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SessionInfo.SessionKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SessionInfo.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SessionInfo.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.XboxOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.MusicNetSku">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SubscriptionInfo.EndDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.AccountInfo.PointsBalance">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.SubscriptionLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.ErrorInfo.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.SignInResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SignInResults.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SignInResults.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SignInResults.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SignInResults.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.GetPointsBalanceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.SignInCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.SignInCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.SignInCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.ZuneSignIn.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.ZuneSignIn.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Constants">
            <summary>
            All constants that will be used by storage service
            part of it are copied from StorageConstants.cs
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Constants.StorageDomain">
            <summary>
             Storage Domain Ids: this part got from npdb t_storage_domains table
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.AccessToken">
            <summary>
            basic fields of accessToken that will be shared by all sorts of requests
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.ReadFileToken">
            <summary>
            additional fields for readFile request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.WriteFileToken">
            <summary>
            additional fields for writeFile request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.RemoveFileToken">
            <summary>
            addtional fields for removeFile requests
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.EnumFilesToken">
            <summary>
            additional fields for EnumFiles request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.MyWriteFileToken">
            <summary>
            AccessToken that is used for WriteFile request
            the fields of this class should be in sync with accessToken.cs in
            \\depot\xonline\private\common\mc\storage\accessToken.cs
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.MyReadFileToken">
            <summary>
            AccessToken that is used for ReadFile request
            the fields of this class should be in sync with accessToken.cs in
            \\depot\xonline\private\common\mc\storage\accessToken.cs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.LiveService.Storage.MyRemoveFileToken" -->
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.LiveService.Storage.MyEnumFilesToken" -->
        <member name="T:ServerTestFramework.LiveService.Storage.XRLEnumFiles">
            <summary>
            This class is for emerate files
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLEnumFiles.#ctor(System.String,System.UInt32,System.UInt32,System.UInt32,System.Int64)">
            <summary>
            XRLEnumFiles constructor that takes five parameters
            </summary>
            <param name="pathName">pathName of the files that will be enumerated</param>
            <param name="titleID">titleID of the files that will be enumerated; it should be the same as the one in the pathname</param>
            <param name="rangeStart">zero-based index of the starting file</param>
            <param name="rangeEnd">zero-based index of the ending file</param>
            <param name="lModifiedSince">return files that modified after this time</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLEnumFiles.GenerateHttpHeader(System.Net.IPEndPoint,System.IO.MemoryStream)">
            <summary>
            If this is a dataCenter EnumFile request,then we need append HTTPAuthData header
            </summary>
            <param name="endPoint"></param>
            <param name="reqStream"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLEnumFiles.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Storage.XRLEnumFilesResponse@)">
            <summary>
            send XRLEnumFiles http request to storage front door and get the response back
            </summary>
            <param name="sServer">Storage front door</param>
            <param name="Response">XRLEnumFiles response</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLSingleEnumFileResult">
            <summary>
            This class is for each file returned in the enumFile response
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLSingleEnumFileResult.Compare(ServerTestFramework.LiveService.Storage.XRLWriteFile)">
            <summary>
            Compare each single enumFile response with the writeFile request;
            </summary>
            <param name="other">requests that upload the file</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLEnumFilesResponse">
            <summary>
            enumFiles response
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLGetQuota">
            <summary>
            This class is for get quota data from storage database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLGetQuota.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
            default constructor for XRLGetQuota
            normally will be used for negative test cases
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLGetQuota.Execute(ServerTestFramework.LiveService.Storage.XRLGetQuotaResponse@)">
            <summary>
            send GetQuota request to stfd:11140 since it's a datacenter request
            </summary>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLGetQuotaResponse">
            <summary>
            This class is for XRLGetQuotaResponse
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLNameResolver">
            <summary>
            Summary description for XRLNameResolver.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLReadAchievements">
            <summary>
            This class is for download a file from storage database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadAchievements.Execute(ServerTestFramework.LiveService.Storage.XRLReadAchievementsResponse@)">
            <summary>
            Send XRLReadAchievements requests to the xstorage front door
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadAchievements.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Storage.XRLReadAchievementsResponse@)">
            <summary>
            send XRLReadAchievements http request to storage front door and get the response back
            </summary>
            <param name="sServer">Storage front door</param>
            <param name="Response">XRLReadAchievements response</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLReadAchievementsResponse">
            <summary>
            This class is for XRLReadAchievementsResponse
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLReadFile">
            <summary>
            This class is for download a file from storage database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFile.#ctor">
            <summary>
            default constructor for XRLReadFile
            normally will be used for negative test cases
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFile.#ctor(System.String)">
            <summary>
            XRLReadFile constructor that takes one parameter
            </summary>
            <param name="pathName">pathName of the file that will be downloaded</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFile.Execute(ServerTestFramework.LiveService.Storage.XRLReadFileResponse@)">
            <summary>
            Send XRLReadFile requests to the xstorage front door
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFile.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Storage.XRLReadFileResponse@)">
            <summary>
            send XRLReadFile http request to storage front door and get the response back
            </summary>
            <param name="sServer">Storage front door</param>
            <param name="Response">XRLReadFile response</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFile.Execute(System.Boolean,System.Net.IPEndPoint,ServerTestFramework.LiveService.Storage.XRLReadFileResponse@)">
            <summary>
            During stress, I found out it spend lots of time in deserializing when reading response
            since stress doesn't care the response, we will just ignore it for stress tests.
            </summary>
            <param name="sServer"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLReadFileResponse">
            <summary>
            This class is for XRLReadFileResponse
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLReadFileResponse.Compare(ServerTestFramework.LiveService.Storage.XRLWriteFile)">
            <summary>
            Compare the readFile response with the writeFile request;
            This method can be used to check if all columns are set up correctly
            in the database for upload file request
            </summary>
            <param name="other">requests that upload the file</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLRemoveFile">
            <summary>
            This class is for delete a file from storage database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLRemoveFile.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            XRLRemoveFile constructor that takes two parameters
            </summary>
            <param name="pathName">pathName of the file that need to be removed</param>
            <param name="TitleID">titleID of the file that need to be removed</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLRemoveFile.GenerateHttpHeader(System.Net.IPEndPoint,System.IO.MemoryStream)">
            <summary>
            If this is a dataCenter RemoveFile request,then we need append HTTPAuthData header
            </summary>
            <param name="endPoint"></param>
            <param name="reqStream"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLRemoveFile.Execute">
            <summary>
            Send XRLRemoveFile http request to stfd
            </summary>
            <param name="sServer">storage front door</param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Storage.XRLRemoveFile.Server">
            <summary>
            Set or get Storage Front door
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLReportBrokenLink">
            <summary>
            Summary description for XRLReportBrokenLink.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.XRLWriteFile">
            <summary>
            This class is used to upload a file to storage database
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.#ctor">
            <summary>
            default constructor for XRLWriteFile
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.#ctor(System.UInt32,System.UInt32,System.String,System.UInt64)">
            <summary>
            XRLWriteFile constructor that takes four parameters
            Can be used together with stats API to upload a file
            </summary>
            <param name="titleID">titleID of the upload file</param>
            <param name="uiFileSize">filesize of the upload file in byte</param>
            <param name="pathName">stats generated pathName of the upload file</param>
            <param name="UserPuid">userPUID that upload the file</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.#ctor(System.String,System.String)">
            <summary>
            Tsunami testing: different domain has different permission type
            </summary>
            <param name="permissionType">None/All/Owner/Team/UserToken/ServiceToken/ServiceAddr</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.Verify">
            <summary>
            connect to STDB to check columns that cannot be checked by ReadFileResponse
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.GenerateHttpHeader(System.Net.IPEndPoint,System.IO.MemoryStream)">
            <summary>
            If this is a dataCenter WriteFile request,then we need append HTTPAuthData header
            </summary>
            <param name="endPoint"></param>
            <param name="reqStream"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.XRLWriteFile.Execute">
            <summary>
            send XRLWriteFile requests to the xstorage front door
            </summary>
            <param name="sServer"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Storage.XRLWriteFile.Server">
            <summary>
            Set or get Storage Front door
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.BlobClient">
            <summary>
            This class is used to retrieve or upload a file to Azure Storage
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.BlobTableClient">
            <summary>
            This class is used to retrieve or upload table data to Azure Storage
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.TableClient">
            <summary>
            This class is used to retrieve or upload table data to Azure Storage
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.BlobTableClient.GetStoragePath(System.UInt64,System.String,System.Guid)">
            <summary>
            Single location to use for calculating the Blob Path. If the Blob path changes in design
            it only needs to be changed here to avoid massive test updates. All tests should use these
            functions rather than calculating the path themselves
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="transactionGuid"></param>
            <returns>String BlobPath for BlobStorage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.BlobTableClient.GetSASUrl(System.String,System.String,System.UInt64,System.String,System.String,System.String)">
            <summary>
            Generates an SAS query URL that is equivalent to what the Client FrontDoor would return. 
            This URL can be used to directly download a file without needing any managed code
            </summary>
            <param name="storageUri"></param>
            <param name="container"></param>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="transactionId"></param>
            <param name="signature"></param>
            <returns>URL for direct file access using the provided SAS signature</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.BlobTableClient.GetListFromIEnumerable(System.Collections.Generic.IEnumerable{xonline.server.xlfs.common.BlobTableEntry})">
            <summary>
            Wrapper function to protect agains server exceptions. If the table has only been created with no entries
            the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
            </summary>
            <param name="blobEnum">IEnumerable parameter result from query</param>
            <returns>IEnumerable.ToList()</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.FileTableClient">
            <summary>
            This class is used to retrieve or upload table data to Azure Storage
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.FileTableClient.GetListFromIEnumerable(System.Collections.Generic.IEnumerable{xonline.server.xlfs.common.FileTableEntry})">
            <summary>
            Wrapper function to protect agains server exceptions. If the table has only been created with no entries
            the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
            </summary>
            <param name="fileEnum">IEnumerable parameter result from query</param>
            <returns>IEnumerable.ToList()</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.FileTableLastUpdateClient">
            <summary>
            This class is used to retrieve or upload table data to Azure Storage
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.FileTableLastUpdateClient.GetListFromIEnumerable(System.Collections.Generic.IEnumerable{xonline.server.xlfs.common.FileTableLastUpdateEntry})">
            <summary>
            Wrapper function to protect agains server exceptions. If the table has only been created with no entries
            the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
            </summary>
            <param name="fileEnum">IEnumerable parameter result from query</param>
            <returns>IEnumerable.ToList()</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.FileTableLastUpdateClient.SelectCount(System.DateTime@,System.DateTime@)">
            <summary>
            Not recommended for large tables. Use the more efficient SelectCount providing a startDate to avoid using lots of memory
            The resultsSegment itself will "cache" older entries rather than freeing the memory after use.
            </summary>
            <param name="oldest">out param returning the Oldest record found (if records found). DateTime.UtcNow if no records found.</param>
            <param name="newest">out param returning the Newest record found. DateTime.UtcNow if no records found.</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.FileTableLastUpdateClient.SelectCount(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            More efficient search (but slower) to find the total count and start and end DateTime for Performance test
            resuming. Avoids caching used by most of the managed code to avoid large memory use when the table size
            is large
            </summary>
            <param name="startSearch">DateTime to start searching forward from. Suggested is 1/1/2010</param>
            <param name="oldest">out param returning the Oldest record found (if records found).</param>
            <param name="newest">out param returning the Newest record found prior to startSearch. Max newest is DateTime.Maxvalue.</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.QueueClient">
            <summary>
            This class is used to retrieve or upload queue data to Azure Storage
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.StorageAccountTableClient">
            <summary>
            This class is used to retrieve or upload table data to Azure Storage
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.StorageAccountTableClient.GetListFromIEnumerable(System.Collections.Generic.IEnumerable{xonline.server.xlfs.common.StorageAccountTableEntry})">
            <summary>
            Wrapper function to protect agains server exceptions. If the table has only been created with no entries
            the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
            </summary>
            <param name="fileEnum">IEnumerable parameter result from query</param>
            <returns>IEnumerable.ToList()</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XlfsWebRequest.GetCertificateBySubjectName(System.String,System.Boolean)">
            <summary>
            Retrieve a certificate from based on it's subject name
            </summary>
            <param name="certSubject">The subject name of the certificate to find</param>
            <param name="privateKeyRequired">If true, the certificate must have a private key</param>
            <returns>An instance of the certificate with the requested subject</returns>
            <remarks>
            This method checks in the CurrentUser store for the certificate.  If
            it's not found, it will check the LocalMachine store.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XlfsWebRequest.GetCertificateBySubjectName(System.String,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Retrieve a certificate from the specified certificate store based on
            it's subject name
            </summary>
            <param name="certSubject">The subject name of the certificate to find</param>
            <param name="privateKeyRequired">If true, the certificate must have a private key</param>
            <returns>An instance of the certificate with the requested subject</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Storage.Azure.XLFSClient">
            <summary>
            This class is used to retrieve or upload a file to XLFS Azure Storage
            
            See http://xblwiki/default.aspx/XboxLive/XboxLiveFileSystem.html for design
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ReadFile(System.UInt64,System.String,System.UInt32)">
            <summary>
            ReadFile to access the Cloud directly to read the file rather than the Admin FD
            Searches for the file accross all partitions (slow)
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns>Stream to access the file in blob storage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ReadFile(System.UInt64,System.String,System.UInt32,System.DateTime)">
            <summary>
            ReadFile to access the Cloud directly to read the file rather than the Admin FD
            This version will only search in a single partition for the file rather than accross all partitions
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <param name="lastUpdate">UTC DateTime partition to search for the file</param>
            <returns>Stream to access the file in blob storage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ReadFileProperties(System.UInt64,System.String,System.UInt32)">
            <summary>
            Read Properties to access the Cloud directly to read the file rather than the Admin FD
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns>Stream to access the file in blob storage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ReadFileMD5(System.UInt64,System.String,System.UInt32)">
            <summary>
            Read Properties to access the Cloud directly to read the file rather than the Admin FD
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns>Stream to access the file in blob storage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ReadFileTransactionId(System.UInt64,System.String,System.UInt32)">
            <summary>
            Read the transactionId specific to a FileEntry
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns>Stream to access the file in blob storage</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.WriteFile(System.UInt64,System.String,System.UInt32,System.IO.Stream)">
            <summary>
            WriteFile to simulate the Write done by the front door
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <param name="fileStream"></param>
            <returns>bool indicating success if true</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.WriteFile(System.UInt64,System.String,System.UInt32,System.String,System.DateTime,System.IO.Stream)">
            <summary>
            WriteFile to simulate the Write done by the front door
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <param name="lastUpdate"></param>
            <param name="fileStream"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.WriteFile(System.UInt64,System.String,System.String,System.UInt32,System.String,System.Int64,System.DateTime,System.IO.Stream)">
            <summary>
            Full Parameter suite to allow "incorrect" parameters (ex. rowKey filename not the same as the FileName column in the XUID table)
            </summary>
            <returns>bool indicating success if true</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.RemoveFile(System.UInt64,System.String,System.UInt32)">
            <summary>
            Removes a file from storage.
            Searches accross all partitions and may be slow.
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.RemoveFile(System.UInt64,System.String,System.UInt32,System.DateTime)">
            <summary>
            Removes a file from XLFS Storage from a specific partition
            Faster search that only removes from a specific UTC DateTime partition
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <param name="lastUpdate">UTC DateTime specifying the file partition to search</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.SafeRemoveFile(System.UInt64,System.String,System.UInt32)">
            <summary>
            "Safe" version of the function above that catches errors. Useful for test clean up when a failure to remove
            doesn't mean a test case failure.
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.SafeRemoveFile(System.UInt64,System.String,System.UInt32,System.DateTime)">
            <summary>
            "Safe" version of the function above that catches errors. Useful for test clean up when a failure to remove
            doesn't mean a test case failure.
            </summary>
            <param name="xuid"></param>
            <param name="fileName"></param>
            <param name="titleID"></param>
            <param name="lastUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ClearFileList">
            <summary>
            Iterates through all files in the file table removing the blob and table entry.
            Will be slow for large tables
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ClearFileList(System.DateTime,System.DateTime)">
            <summary>
            Iterates through all files in the file table removing the blob and table entry.
            Will be slow for large tables
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.ClearStorage">
            <summary>
            Fast clearing of storage rather than walking the File and Blob Tables
            Clears all blob storage that has containers that are valid titleIds
            and drops and recreates the Blob and File Tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XLFSClient.WriteBlobFile(System.UInt64,System.String,System.String,System.UInt32,System.String,System.IO.Stream)">
            <summary>
            BlobTable is the "temporary" table for uploads to be stored during upload. UploadEnd() will move the entries to the FileTable
            The rowKey in this table is a Guid transaction ID
            </summary>
            <returns>bool indicating success if true</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XlfsUploadBegin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Storage.Azure.XlfsUploadBegin.#ctor(ServerTestFramework.LiveService.Storage.Azure.XlfsUploadBegin)">
            <summary>
            Copy constructor.
            </summary>
            <param name="beginReq"></param>
        </member>
        <member name="M:xonline.server.xlfs.common.FileTableLastUpdateDataSource.Enum(System.DateTime,System.DateTime,System.Int32,System.Int32,Microsoft.WindowsAzure.StorageClient.ResultContinuation@)">
            <summary>
            Returns all of the files in the specified partition that match the given titleid
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="titleId"></param>
            <param name="maxResults"></param>
            <param name="continuationToken"></param>
            <returns></returns>
        </member>
        <member name="M:xonline.server.xlfs.common.FileTableLastUpdateDataSource.DeleteFileTableEntries(System.Collections.Generic.IEnumerable{xonline.server.xlfs.common.FileTableLastUpdateEntry})">
            <summary>
            Bulk-delete a bunch of rows from the FileTableLastUpdateEntry table.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr">
            <summary>
            MatchSessionMgr keeps track of all sessions created by Create and Split.
            It can then check the expected delay in time for a session ID to be deleted and
            verify the session no longer exists after that inverval has elapsed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr.sessionIdsByTitleId">
            <summary>
            Stores all registered sessions' IDs bucketed by Title ID
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr.RegisterSession(System.UInt32,System.Int64)">
            <summary>
            RegisterSession stores the title and session IDs of a newly created/split session in order to 
            confirm the session's subsequent deferred deletion
            </summary>
            <param name="titleId">The title ID; used to get the expected delete delay seconds for this session ID</param>
            <param name="sessionId">The newly created or split session ID</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr.VerifyAllSessionsDeleted">
            <summary>
            Verifies all sessions registered via RegisterSession() get cleaned up.
            </summary>
            <returns>true: all sessions were cleaned up; false: a session existed after it should have been deleted</returns>
        </member>
        <member name="P:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr.RegisteredSessionsCount">
            <summary>
            Returns the total number of sessions registered with the session manager
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.MatchSessionMgr.SessionIdList">
            <summary>
            Makes the code in this class a little more legible, otherwise adds nothing new to the conversation
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLxnaddr">
            <summary>
            Summary description for XRLxnaddr.
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.Constants.X_ATTRIBUTE_SESSION_ID">
            <summary>
            The following const are system defined context/properties
            </summary>		
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.Constants.CONTEXT_MYCONTEXT1">
            <summary>
            The following const are copied from xenonmatchTest.spa.h file
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.Constants.getNumDBForTitle(System.UInt32)">
            <summary>
            return the number of database that a particular title resides
            </summary>
            <param name="titleID"></param>
            <returns></returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.MatchUtil.verifySessionExistsCmd">
            <summary>
            SQL statement template for determining if a session exists in a particular table
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.MatchUtil.CalculateOffsets(System.UInt32,ServerTestFramework.LiveService.Matchmaking.XrlAttributeBase[],System.UInt32[]@,System.UInt32@)">
            <summary>
            Calculate a set of offsets given a base message size and collection of attributes.
            The total message size is and offset collection are returned as out parameters.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.TitleCrossPlatformRevoker.Restore">
            <summary>
            Unlocked should restore a Title ID to it's original cross-platform revocation setting.
            Currently it sets the cross-platform revocation setting to NULL (x-plat allowed).
            If Lock() was not called first, calling Unlock() is a no-op.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.MatchTitleMgr.GetMatchTitle(System.UInt32)">
            <summary>
            Retrieves a single match title's info from NPDB
            </summary>
            <param name="titleId">A valid Match title ID (i.e. defined in the npdb.dbo.t_match_titles table)</param>
            <returns>An instance of MatchTitle initialized with the values retrieve from the NPDB server</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Matchmaking.MatchTitleMgr.GetMatchTitles" -->
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.LiveService.Matchmaking.MatchTitleMgr.GetMatchTitlesByIds(System.Collections.IEnumerable)" -->
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam">
            <summary>
            This class is used to represent both attributes in schema AND
            search parameters in the search requests.
            In Xenon: 
            Search Parameters:	int32/int64/float32/float64/dateTime are allowed, while string and blobs are not.
            Session Attributes: string/int32/int64/float32/float64/dateTime/null are allowed, blobs are not.
            Search Results: same as Session Attributes.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLXeIntValue">
            <summary>
            can be used represent both int32 and int64 values
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLXeIntValue.#ctor(System.Int64)">
            <summary>
            create an intParam with specified value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLXeFloatValue.#ctor(System.Single)">
            <summary>
            create an intParam with specified value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLXeDoubleValue.#ctor(System.Double)">
            <summary>
            create an intParam with specified value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLXeStringValue.#ctor(System.String)">
            <summary>
            create a stringParam with specified string value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLXeDateTimeValue.#ctor(System.Int64)">
            <summary>
            create an intParam with specified value
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParamWeighted">
            <summary>
            This class is basically a copy of XRL2AttribParam.  It could inherit, except that all the
            logic is really in constructors, and the write/readstream can't be reused either.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession">
            <summary>
            Since WireData doesn't support inheritance (it doesn't serialize parent class's fields),
            Instead of inheriting from XRLCreateUpdateSession, we create a wrapper of that
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.#ctor">
            <summary>
            create session with 9 mandatory session attributes.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.#ctor(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam[])">
            <summary>
            create session with provided attributes: this might or might not have the above 8 default attribs
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.#ctor(System.Byte[])">
            <summary>
            update session constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.RetrieveCurrentValue(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam)">
            <summary>
            Fills in the given XRLXeAttribParam with the value of the current one, if it exists.
            Leaves it unchanged otherwise.
            </summary>
            <param name="attribToFind">An XRLXeAttribParam to look for, and fill with the value.</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.FindAttrib(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam)">
            <summary>
            Find a single attribute with the given parameter.  Does not use the passed-in value of
            that attribute.
            </summary>
            <param name="attribToFind">An XRLXeAttribParam to look for</param>
            <returns>A handle to the XRLXeAttribParam that currently exists and matches the name of the
            passed-in attribute.  Think before assigning to this!  Returns null if none is found.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.UpdateAttrib(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam)">
            <summary>
            Updates a single attribute.  Unlike UpdateAttribs(), the attribute must be found in the
            base attribs array
            </summary>
            <param name="updateAttrib"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRLSessionInfo@)">
            <summary>
            send createSession requests
            </summary>
            <param name="sServer"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            Send CreateSession requests asynchronously.
            </summary>
            <param name="sServer"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession.Execute(System.Net.IPEndPoint)">
            <summary>
            send updateSession requests
            </summary>
            <param name="sServer"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRL2DeleteSession">
            <summary>
            counterPart for XMATCH_DELETE_SESSION
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2DeleteSession.#ctor(System.Byte[],System.UInt32)">
            <summary>
            delete session with specified sessionID
            </summary>
            <param name="sessID"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2DeleteSession.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            send deleteSession request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.AlternatePresenceUrl">
            <summary>
            This is being used for stress test: redirect queryAffiliate call to presence emulator
            </summary>
        </member>
        <member name="F:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.spoofSchemaVersionNumber">
            <summary>
            This allows you to specify a version to write into the custom header.  This is separate from the
            version that it actually is, allowing you to advertise as this version, but send
            data as a different one.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.AddParams(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam[])">
            <summary>
            append search parameters at the end of search requests
            </summary>
            <param name="Params"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.FindAttrib(ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam)">
            <summary>
            Find a single attribute with the given parameter.  Does not use the passed-in value of
            that attribute.
            </summary>
            <param name="attribToFind">An XRLXeAttribParam to look for</param>
            <returns>A handle to the XRLXeAttribParam that currently exists and matches the name of the
            passed-in attribute.  Think before assigning to this!  Returns null if none is found.</returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.Execute(System.Boolean,System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRL2SearchResults@)">
            <summary>
            For stress testing, we don't care what's being returned in the results
            </summary>
            <param name="stress"></param>
            <param name="sServer"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            For stress testing, we don't care what's being returned in the results.  This version is
            async, so we can send requests even more aggressively.
            </summary>
            <param name="stress"></param>
            <param name="sServer"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.EndExecute(System.IAsyncResult,ServerTestFramework.LiveService.Matchmaking.XRL2SearchResults@)">
            <summary>
            Tha matching EndExecute for the BeginExecute.  Call this to complete a request started
            via BeginExecute.
            </summary>
            <param name="ar"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRL2SearchSession.Execute(System.Net.IPEndPoint,System.UInt32,ServerTestFramework.LiveService.Matchmaking.XRLXeAttribParam[],ServerTestFramework.LiveService.Matchmaking.XRL2SearchResults@)">
            <summary>
            send searchSession http request to matchmaking front door and get results back
            This one is used by functional test to check search results' details.
            </summary>
            <param name="sServer">matchmaking front door</param>
            <param name="dwExpectedNumResults">expected number of sessions in the searchResults</param>
            <param name="ExpectedAttribs">expected number of attributes in the returned session</param>
            <param name="Response">actual response got back from match servers</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLIntAttribute">
            <summary>
            int attribute when creating or updating a session
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLIntAttribute.#ctor(System.UInt32,System.Int64)">
            <summary>
            XRLIntAttribute constructor
            </summary>
            <param name="attribID"></param>
            <param name="attribValue"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLStringAttribute">
            <summary>
            string attribute when creating or updateing a session
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLStringAttribute.#ctor(System.UInt32,System.String)">
            <summary>
            XRLStringAttribute constructor
            </summary>
            <param name="attribID"></param>
            <param name="attribValue"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLBlobAttribute">
            <summary>
            blob attribute when creating or updating a session
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLBlobAttribute.#ctor(System.UInt32,System.Byte[])">
            <summary>
            XRLBlobAttribute constructor
            </summary>
            <param name="attribID"></param>
            <param name="attribValue"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLBaseSession">
            <summary>
            basic fields of createSession request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession">
            <summary>
            counterPart of XMATCH_SESSION
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRLSessionInfo@)">
            <summary>
            send CreateSession requests to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <param name="Response">createSession response</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.Execute(System.Net.IPEndPoint)">
            <summary>
            send updateSession request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.AddAttribs(ServerTestFramework.WireData[])">
            <summary>
            append title attributes at the end of create/updateSession requests
            </summary>
            <param name="attribs"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.SetAttribs(ServerTestFramework.WireData[])">
            <summary>
            Change the attributes of a session object
            </summary>
            <param name="attribs"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.AppendAttribs(ServerTestFramework.LiveService.Matchmaking.XrlAttributeBase[])">
            <summary>
            append title attributes at the end of create/updateSession requests
            </summary>
            <param name="attribs"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLCreateUpdateSession.GetAttribute(System.UInt32)">
            <summary> 
            Retrieve an attribute wiredata based on the ID
            </summary>
            <param name='attributeId'>Match AttributeID to retrieve</param>
            <returns>Attribute wiredata object or null if none exists</returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLSessionInfo">
            <summary>
            counterPart for XMATCH_SESSIONINFO
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLDeadXBox">
            <summary>
            counterPart for XMATCH_DEAD_XBOX
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLDeadXBox.#ctor">
            <summary>
            create a deadxbox request with random values
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLDeadXBox.Execute(System.Net.IPEndPoint)">
            <summary>
            send individual deadxbox request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLDeadXBox.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            send individual deadxbox request to matchmaking front door asynchronously
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLDeleteSession">
            <summary>
            counterPart for XMATCH_DELETE_SESSION
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLDeleteSession.#ctor(System.Byte[])">
            <summary>
            delete session with specified sessionID
            </summary>
            <param name="sessID"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLDeleteSession.Execute(System.Net.IPEndPoint)">
            <summary>
            send deleteSession request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLAttribParam">
            <summary>
            This class is used to represent BOTH session attributes returned in search Results
            AND search parameters in the search requests
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLIntParam.#ctor(System.Int64)">
            <summary>
            create an intParam with specified value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLStringParam.#ctor(System.String)">
            <summary>
            create a stringParam with specified string value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLBlobParam.#ctor(System.Byte[])">
            <summary>
            create a blob parameter with specified blob value
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLBaseSearchSession">
            <summary>
            basic fields of search session request
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession">
            <summary>
            counter part of XMATCH_SEARCH_SESSION
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession.#ctor(System.UInt32)">
            <summary>
            create a search session request with specified spIndex
            </summary>
            <param name="spIndex">stored procedure index that used for search request</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession.AddParams(ServerTestFramework.LiveService.Matchmaking.XRLAttribParam[])">
            <summary>
            append search parameters at the end of search requests
            </summary>
            <param name="Params"></param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRLSearchResults@)">
            <summary>
            send searchSession http request to match front door and get response
            This one assumes nothing about search results. i.e. it works for both
            returned session with and without attributes.
            So it can be used by both functional and stress tests
            </summary>
            <param name="sServer">matchmaking front door</param>
            <param name="Response">search result</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession.Execute(System.Boolean,System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRLSearchResults@)">
            <summary>
            For stress test, we don't care what's being returned in the search results
            </summary>
            <param name="sServer"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSearchSession.Execute(System.Net.IPEndPoint,System.UInt32,ServerTestFramework.WireData[],ServerTestFramework.LiveService.Matchmaking.XRLSearchResults@)">
            <summary>
            send searchSession http request to matchmaking front door and get results back
            This one is used by functional test to check search results' details.
            </summary>
            <param name="sServer">matchmaking front door</param>
            <param name="dwExpectedNumResults">expected number of sessions in the searchResults</param>
            <param name="ExpectedAttribs">expected number of attributes in the returned session</param>
            <param name="Response">actual response got back from match servers</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLSingleSearchResult">
            <summary>
            counterPart of XMATCH_SEARCH_RESULT
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLSearchResults">
            <summary>
            XMATCH_SEARCHRESULT_HEADER + sessions returned
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLSplitSession">
            <summary>
            XRL for splitting a session during host migration
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSplitSession.#ctor(System.Byte[],System.UInt32,ServerTestFramework.LiveService.Matchmaking.XRLxnaddr,ServerTestFramework.WireData[])">
            <summary>
            create session with 9 mandatory session attributes.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSplitSession.#ctor(ServerTestFramework.LiveService.Matchmaking.XRL2CreateUpdateSession)">
            <summary>
            create session with 9 mandatory session attributes.
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSplitSession.Execute(System.Net.IPEndPoint,ServerTestFramework.LiveService.Matchmaking.XRL2SingleSearchResult@)">
            <summary>
            Send SplitSession request
            </summary>
            <param name="sServer"></param>
            <param name="Response"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLSplitSession.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            Send SplitSession request asynchronously
            </summary>
            <param name="sServer"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Matchmaking.XRLTitleChange">
            <summary>
            Xenon: 1st new API for Xenon
            </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLTitleChange.Execute(System.Net.IPEndPoint)">
            <summary>
            send individual deadxbox request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.LiveService.Matchmaking.XRLTitleChange.BeginExecute(System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            send individual deadxbox request to matchmaking front door
            </summary>
            <param name="sServer">matchmaking front door</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLAddString">
            <summary>
            Summary description for XRLAddString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLGetString">
            <summary>
            Summary description for XRLGetString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLTitleIDRequest">
            <summary>
            Summary description for XRLTitleIDRequest.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLLogString">
            <summary>
            Summary description for XRLLogString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLLogBinary">
            <summary>
            Summary description for XRLLogString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.StringServer.XRLVetString">
            <summary>
            Summary description for XRLVetString.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.GI.Pong">
            Context and properties that are exposed for the pong
            test title ID.
        </member>
        <member name="T:ServerTestFramework.LiveService.GI.Pong.Context">
            Context IDs used for creating contexts
            see named enums below for context values.
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.SendablePacket.GenerateRandomString(System.Int32)">
            <summary>
            Generate a random string of characters
            </summary>
            <param name="size">Lenght of string</param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.LiveService.Diagnostics.CReflectionRequest">
             <summary>
             Summary description for CReflectionRequest.
            
            
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CReflectionRequest.#ctor(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Reflection Request, use this constructor for making bad packets
            </summary>
            <param name="pv">Protocol version</param>
            <param name="rt">Request type</param>
            <param name="rps">Return packet size</param>
            <param name="pl">Payload</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CReflectionRequest.#ctor(System.UInt16,System.String)">
            <summary>
            Reflection Request, simple constructor
            </summary>
            <param name="rt">Request type</param>
            <param name="pl">Payload</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CReflectionRequest.#ctor(System.UInt16,System.Int32)">
            <summary>
            Reflection Request, simple constructor
            </summary>
            <param name="rt">Request type</param>
            <param name="payloadsize">Payload size, automatically generates a random string</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CReflectionRequest.#ctor(System.Int32)">
            <summary>
            Reflection Request, even simpler constructor
            </summary>
            <param name="payloadsize">Payload size, automatically generates a random string</param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Diagnostics.CICMPRequest">
             <summary>
             Summary description for CICMPRequest.
            
            
             </summary>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CICMPRequest.#ctor(System.UInt16,System.UInt16,System.Byte[],System.UInt64,System.UInt32)">
            <summary>
            ICMP Request constructor, use this for making bad packets
            </summary>
            <param name="pv">Protocol version</param>
            <param name="rt">Request type</param>
            <param name="signature">Signature</param>
            <param name="ts">Timestamp</param>
            <param name="packetsize">Packet size</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CICMPRequest.#ctor(ServerTestFramework.LiveService.Diagnostics.CReflectionReply)">
            <summary>
            ICMP Request, simple constructor
            </summary>
            <param name="reply">Reply packet from a Reflection Request call</param>
        </member>
        <member name="M:ServerTestFramework.LiveService.Diagnostics.CICMPRequest.SetTimestamp(System.Byte[],System.UInt64)">
            <summary>
            Both parameters must come from a CReflectionReply message
            </summary>
            <param name="signature"></param>
            <param name="timestamp"></param>
        </member>
        <member name="T:ServerTestFramework.LiveService.Diagnostics.CReflectionReply">
             <summary>
             Reply packet for Reflection request
            
            
             </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Cleanser.InjectEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API to inject an event
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Cleanser.InjectNextEvent(ServerTestFramework.STFLive.Reporting.ReportingEventType,ServerTestFramework.STFLive.Reporting.ReportingReferenceObject@)">
            <summary>
            API that injects the next event in a series of events
            </summary>
            <param name="type"></param>
            <param name="reportingRefObject"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Cleanser.GetIntPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is an integer
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Cleanser.GetFloatPerformanceCounter(System.String)">
            <summary>
            Gets a performance counter that is a floating point number
            </summary>
            <param name="Counter"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Cleanser.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Cleanser.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CleanserConnection">
            <summary>
            Encapsulates a connection to the cleanser using the cleanser protocol. Simulates the ReportConnection
            object used by the XomLog system during regular logging from service components. The exception is that
            this class does not simulate the async IO ReportConnection uses. This class is also not threadsafe.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserConnection.GetFirstCleanser">
            <summary>
            Helper function to get the remote endpoint of the first available cleanser
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserConnection.GetVirutalInterface">
            <summary>
            Helper function to find the cleanserinh vip endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.MessageType">
            <summary>
            All currently known messages types fro npdb t_messages table as of 2/25/08
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.MessageGenerator">
            <summary>
            Creates messages for all supported types in the current cleanser.
            These messages are generated from a combination of looking at service source code, 
            the old verification tests, and logs from various production servers.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.MessageGenerator.LoadComponentToServiceMap">
            <summary>
            Connects to NPDB and loads the componentID for each messageid. This is needed so that when 
            messages are sent to the cleanser we are sending them from the right component (spoofed). If this
            is not done, the cleanser is designed to reject the message.
            Note that this function is only ever called once per instance of the singleton (aka once per process)
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.MessageGenerator.MessageToServiceComponentType(ServerTestFramework.STFLive.Reporting.MessageType)">
            <summary>
            Allows a client to resolve the correct component that a message should come from
            </summary>
            <param name="mt"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.STFLive.Reporting.MessageGenerator.BuildContentRefMessage(System.UInt64)" -->
        <member name="M:ServerTestFramework.STFLive.Reporting.MessageGenerator.BuildSNDMessage(System.UInt64)">
            <summary>
            Build an SND message from a prototype found in production logs
            </summary>
            <param name="puid"></param>
            <returns></returns>
            //Tested
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.MessageGenerator.BuildArgoLicenseMsg(System.UInt64)">
            <summary>
            Builds an ARGOLICENSE MESSAGE
            Results in a call to p_add_video_license on FilterDB that inserts into t_video_license_fact
            </summary>
            <param name="puid"></param>
            <returns></returns>
            //Tested
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.MessageGenerator.BuildSGADDMMsg(System.UInt64)">
            <summary>
            Builds an SGADDM Message
            </summary>
            <param name="puid"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingMachines">
            <summary>
            The current machines that are in some way involved in reporting
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Uninitialized">
            <summary>
            Uninitialized value
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Client">
            <summary>
            Client - Source for most server side events
            Hey, I can dream, can't I?
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Xbos">
            <summary>
            XBOS -
            Content Referral, Argo Licensing, etc.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Xuacs">
            <summary>
            XUACS -
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Xcbk">
            <summary>
            XCBK -
            Account Provisioning/Deprovisioning
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.PresenceINH">
            <summary>
            Presence -
            TitleStart/TitleEnd, SessionStart/SessionEnd, GuestChanges, Messaging
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.StringSvr">
            <summary>
            StringServer -
            Fusion, Banner Click/View/Purchase
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.WMIS">
            <summary>
            WMIS -
            All argo related metadata
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.UODB">
            <summary>
            UODB -
            All user related data, achievements, etc.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.ProductDB">
            <summary>
            ProductDB -
            All product data, offers, etc.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Cleanser">
            <summary>
            Cleanser -
            Server where all of the INH/Frontdoor data is collected
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.SSIS">
            <summary>
            SSIS -
            Server where all of the UODB and WMIS data is collected
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Filter">
            <summary>
            FilterDB, distribution location for data passing through the cleansers
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Reporting">
            <summary>
            Main reporting database
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.OLAP">
            <summary>
            Main aggregation database
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Rosetta">
            <summary>
            IIS Server that serves out reports
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Archive">
            <summary>
            Archive database for the reporting database
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingMachines.Realtime">
            <summary>
            Realtime reports database
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.XBLReports">
            <summary>
            Xbox Live Reports
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingCommon">
            <summary>
            Main class for reporting test code
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingCommon.ClearInstance(System.Boolean)">
            <summary>
            Clears the current singleton
            Should ONLY be done at the beginning of a test group
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingCommon.FindObjectByInterface(System.String)">
            <summary>
            Find the component object (Ex. ReportingDatabase) given an interface name.
            </summary>
            <param name="iFace">Interface name (Ex. reportingdb)</param>
            <returns>A list of all components related to that interface or an empty list if no components were found</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.Instance">
            <summary>
            Returns the singleton for this class
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.ReportingDB">
            <summary>
            A reference to the reportingDB
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.ReportingSSISDB">
            <summary>
            A reference to the SSISDB
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.ReportingArchiveDB">
            <summary>
            A reference to the Archive DB
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.ReportingOLAPDB">
            <summary>
            A reference to the OLAPDB
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.ReportingIIS">
            <summary>
            A reference to the ReportIIS - Report Service
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.RealtimeDB">
            <summary>
            A reference to the ReportingRealtime database
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.FilterDBs">
            <summary>
            A reference to ALL of the filterdbs
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingCommon.Cleansers">
            <summary>
            A reference to ALL of the cleansers
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingData">
            <summary>
            A reference object class representing a data set
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.Queries">
            <summary>
            List of queries
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.RawData">
            <summary>
            Raw object data (Caller must know how to cast the data)
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingData.TableCounts">
            <summary>
            ReportingData is a series of tables and respective row counts
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingData.InternalDataType">
            <summary>
            This classifies the data that a ReportingData object contains
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingData.InternalDataType.Query">
            <summary>
             ReportingData object is a query or set of queries
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingData.InternalDataType.RawData">
            <summary>
            ReportingData object contains raw data
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingData.InternalDataType.TableCounts">
            <summary>
            ReportingData object contains a set of tables and respective rowcounts
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDataLoader">
            <summary>
            A class containing the logic necessary to load data for a particular type of data
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDataLoader.InjectSingleData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingEvent">
            <summary>
            A reference object representing an individual event
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.fn_get_i_time(System.DateTime)">
            <summary>
            fn_get_i_time 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.fn_get_dt_datetime(System.Int32,System.Int32)">
            <summary>
            fn_get_dt_time 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.fn_get_i_date(System.DateTime)">
            <summary>
            fn_get_i_date 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.fn_get_dt_date(System.Int32)">
            <summary>
            fn_get_dt_date 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetTopContent(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            API to get single row from a table
            </summary>
            <param name="sProvider"> SQLDataProvider </param>
            <param name="szTable"></param>
            <returns> SqlDataReader </returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetTopContent(ServerTestFramework.STFLive.Reporting.ReportingDatabase,System.String)">
            <summary>
            API to get single row from a table
            </summary>
            <param name="sProvider"> SQLDataProvider </param>
            <param name="szTable"></param>
            <returns> SqlDataReader </returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetContent(System.Data.SqlClient.SqlConnection,System.String,System.Collections.ArrayList)">
            <summary>
            API to get single row from a table with conditions
            </summary>
            <param name="sProvider"> SQLDataProvider </param>
            <param name="szTable"></param>
            <param name="aList"> ArrayList of ColumnInfo </param>
            <returns> SqlDataReader </returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.CompareSingleRow(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            CompareSingleRow 
            Compare a row in two tables column by column
            Currently it only cares about Byte, Int16, Int32, Int64, Boolean and String type
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.FillColumnInfo(System.Data.SqlClient.SqlDataReader)">
            <summary>
            FillColumnInfo 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetArgumentString(System.Xml.XmlDocument,System.String)">
            <summary>
            GetArgumentString 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetArgumentInt(System.Xml.XmlDocument,System.String)">
            <summary>
            GetArgumentInt 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.GetArgumentBool(System.Xml.XmlDocument,System.String)">
            <summary>
            GetArgumentBool 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.CollectionCompare_Equal(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Compare if two collections are equal. They are considered equal if they have the same number
            of objects and all objects from Data1 are present in Data2
            </summary>
            <param name="Data1">First Name/Value Collection</param>
            <param name="Data2">Second Name/Value Collection</param>
            <returns>True if the 2 sets of data are equal. False for everything else</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.CollectionCompare_Different(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Compare if two collections are different. They are considered different if they have the different number
            of objects or objects from Data1 are not present in Data2
            </summary>
            <param name="Data1">First Name/Value Collection</param>
            <param name="Data2">Second Name/Value Collection</param>
            <returns>True if the 2 sets of data are different. False for everything else</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.CollectionNoRepeatedValues(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Compare the values of a collection against each other to find if any are repeated
            </summary>
            <param name="Data1">Name/Value Collection</param>
            <returns>True if the set of data has repeated values. False for everything else</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingHelper.CollectionCompare_DataPresent(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Compare if all the elements from Data1 are present in Data2. Note that this DOES NOT mean they are equal
            </summary>
            <param name="Data1">First Name/Value Collection</param>
            <param name="Data2">Second Name/Value Collection</param>
            <returns>True if ALL elements from Data1 are present in Data2 (This does not mean that Data1 = Data2)</returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingHelper.ColumnInfo">
            <summary>
            ColumnInfo 
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DateRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for DateRange. Set dateMin and dateMax values.
            </summary>        
            <param name="minus">Delta to subtract from current time in seconds</param>
            <param name="plus">Delta to add to current time in seconds</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DateRange.#ctor(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Constructor for DateRange. Set dateMin and dateMax values.
            </summary>
            <param name="Seed">Initial Time</param>
            <param name="minus">Delta to subtract from current time in seconds</param>
            <param name="plus">Delta to add to current time in seconds</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DateRange.Reset">
            <summary>
            Recenters the date range around the current time.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DateRange.Reset(System.DateTime)">
            <summary>
            Recenters the date range around the time in 'Seed'
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.TestRefObject">
            <summary>
            Basic Reporting Ref object test class
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.TestRefObject.RunDebugQuery">
            <summary>
            Return RefObject Debug Query
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingJobStatus">
            <summary>
            Job Status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingJob">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJob.m_SQLJob">
            <summary>
            Using .NET built-in Job class internally
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJob.m_Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJob.m_HResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJob.m_JobType">
            <summary>
            Job Type
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJob.m_Parameters">
            <summary>
            Job parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJob.RunJob">
            <summary>
            Execute the job
            </summary>
            <returns>The constructed SQL script to execute the job</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJob.StopJob">
            <summary>
            Stop the job if it's currently executing
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJob.UpdateStatus">
            <summary>
            Update job status
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJob.InvokeJob">
            <summary>
            Execute the job
            </summary>
            <returns>JobExecutionStatus</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.HResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.Results">
            <summary>
            The results of this job
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.StartTime">
            <summary>
            When the job was started
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.RunningTime">
            <summary>
            How long it took this job to run
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.ServerName">
            <summary>
            Name of Server the job runs in
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.JobName">
            <summary>
            Name of the job
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.JobSteps">
            <summary>
            Job Steps
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJob.Parameters">
            <summary>
            Job Parameters
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingJobParameters">
            <summary>
            Placeholder class, you cast from this class to your expected job parameters.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.m_Instance">
            <summary>
            Create a singleton class
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.m_ReportingJobs">
            <summary>
            Contains all reporting jobs in this test run
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.#ctor">
            <summary>
            Constructor
            The class is a singleton because it serves as a central datastore for all jobs in a test run
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.ClearInstance">
            <summary>
            Clears the current singleton        
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.CreateReportingJob(ServerTestFramework.STFLive.Reporting.ReportingJobType,ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Factory method
            </summary>
            <param name="reportingJobType"></param>
            <param name="reportingJobParams"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingJobFactory.Instance">
            <summary>
            Returns the singleton for this class
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ReportingService">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.#ctor(System.String)">
            Reporting Service constructor
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSecureMethods">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSecureMethods(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSecureMethods(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSecureMethodsAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSecureMethodsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateBatch">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateBatch(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateBatch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateBatchAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateBatchAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelBatch">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCancelBatch(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCancelBatch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelBatchAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelBatchAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ExecuteBatch">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginExecuteBatch(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndExecuteBatch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ExecuteBatchAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ExecuteBatchAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemProperties(ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetSystemProperties(ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetSystemProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPropertiesAsync(ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPropertiesAsync(ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemProperties(ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetSystemProperties(ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetSystemProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPropertiesAsync(ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPropertiesAsync(ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteItem(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDeleteItem(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDeleteItem(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteItemAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteItemAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.MoveItem(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginMoveItem(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndMoveItem(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.MoveItemAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.MoveItemAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListChildren(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListChildren(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListChildren(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListChildrenAsync(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListChildrenAsync(System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetItemType(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetItemType(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetItemType(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetItemTypeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetItemTypeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateFolder(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateFolder(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateFolder(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateFolderAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateFolderAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReport(System.String,System.String,System.Boolean,System.Byte[],ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateReport(System.String,System.String,System.Boolean,System.Byte[],ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateReport(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportAsync(System.String,System.String,System.Boolean,System.Byte[],ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportAsync(System.String,System.String,System.Boolean,System.Byte[],ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDefinition(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportDefinition(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportDefinition(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDefinitionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDefinitionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDefinition(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportDefinition(System.String,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportDefinition(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDefinitionAsync(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDefinitionAsync(System.String,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateResource(System.String,System.String,System.Boolean,System.Byte[],System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateResource(System.String,System.String,System.Boolean,System.Byte[],System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateResource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateResourceAsync(System.String,System.String,System.Boolean,System.Byte[],System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateResourceAsync(System.String,System.String,System.Boolean,System.Byte[],System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetResourceContents(System.String,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetResourceContents(System.String,System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetResourceContents(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetResourceContentsAsync(System.String,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetResourceContentsAsync(System.String,System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetResourceContents(System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetResourceContents(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetResourceContents(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetResourceContentsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetResourceContentsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportParameters(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportParameters(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportParameters(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportParametersAsync(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportParametersAsync(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportParameters(System.String,ServerTestFramework.STFLive.Reporting.Service.ReportParameter[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportParameters(System.String,ServerTestFramework.STFLive.Reporting.Service.ReportParameter[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportParameters(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportParametersAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ReportParameter[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportParametersAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ReportParameter[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateLinkedReport(System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateLinkedReport(System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateLinkedReport(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateLinkedReportAsync(System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateLinkedReportAsync(System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportLink(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportLink(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportLink(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportLinkAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportLinkAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportLink(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportLink(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportLink(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportLinkAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportLinkAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListLinkedReports(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListLinkedReports(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListLinkedReports(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListLinkedReportsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListLinkedReportsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.Render(System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.String,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[]@,ServerTestFramework.STFLive.Reporting.Service.Warning[]@,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginRender(System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndRender(System.IAsyncResult,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[]@,ServerTestFramework.STFLive.Reporting.Service.Warning[]@,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderAsync(System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderAsync(System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderStream(System.String,System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginRenderStream(System.String,System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndRenderStream(System.IAsyncResult,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderStreamAsync(System.String,System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderStreamAsync(System.String,System.String,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRenderResource(System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetRenderResource(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetRenderResource(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRenderResourceAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRenderResourceAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetExecutionOptions(System.String,ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetExecutionOptions(System.String,ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetExecutionOptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetExecutionOptionsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetExecutionOptionsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExecutionOptions(System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetExecutionOptions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetExecutionOptions(System.IAsyncResult,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExecutionOptionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExecutionOptionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetCacheOptions(System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetCacheOptions(System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetCacheOptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetCacheOptionsAsync(System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetCacheOptionsAsync(System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetCacheOptions(System.String,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetCacheOptions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetCacheOptions(System.IAsyncResult,ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetCacheOptionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetCacheOptionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.UpdateReportExecutionSnapshot(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginUpdateReportExecutionSnapshot(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndUpdateReportExecutionSnapshot(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.UpdateReportExecutionSnapshotAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.UpdateReportExecutionSnapshotAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FlushCache(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginFlushCache(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndFlushCache(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FlushCacheAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FlushCacheAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListJobs">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListJobs(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListJobs(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListJobsAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListJobsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelJob(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCancelJob(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCancelJob(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelJobAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelJobAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataSource(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateDataSource(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,ServerTestFramework.STFLive.Reporting.Service.Property[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateDataSource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataSourceAsync(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,ServerTestFramework.STFLive.Reporting.Service.Property[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataSourceAsync(System.String,System.String,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,ServerTestFramework.STFLive.Reporting.Service.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataSourceContents(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetDataSourceContents(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetDataSourceContents(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataSourceContentsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataSourceContentsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataSourceContents(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetDataSourceContents(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetDataSourceContents(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataSourceContentsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataSourceContentsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EnableDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginEnableDataSource(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndEnableDataSource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EnableDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EnableDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DisableDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDisableDataSource(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDisableDataSource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DisableDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DisableDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportsUsingDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListReportsUsingDataSource(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListReportsUsingDataSource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportsUsingDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportsUsingDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDataSources(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSource[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportDataSources(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSource[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportDataSources(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDataSourcesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSource[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDataSourcesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.DataSource[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSources(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportDataSources(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportDataSources(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcePrompts(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportDataSourcePrompts(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportDataSourcePrompts(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcePromptsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcePromptsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportHistorySnapshot(System.String,ServerTestFramework.STFLive.Reporting.Service.Warning[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateReportHistorySnapshot(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateReportHistorySnapshot(System.IAsyncResult,ServerTestFramework.STFLive.Reporting.Service.Warning[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportHistorySnapshotAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportHistorySnapshotAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryOptions(System.String,System.Boolean,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportHistoryOptions(System.String,System.Boolean,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportHistoryOptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryOptionsAsync(System.String,System.Boolean,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryOptionsAsync(System.String,System.Boolean,System.Boolean,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryOptions(System.String,System.Boolean@,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportHistoryOptions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportHistoryOptions(System.IAsyncResult,System.Boolean@,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryOptionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryOptionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryLimit(System.String,System.Boolean,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetReportHistoryLimit(System.String,System.Boolean,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetReportHistoryLimit(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryLimitAsync(System.String,System.Boolean,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryLimitAsync(System.String,System.Boolean,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryLimit(System.String,System.Boolean@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetReportHistoryLimit(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetReportHistoryLimit(System.IAsyncResult,System.Boolean@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryLimitAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryLimitAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportHistory(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListReportHistory(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListReportHistory(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportHistoryAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportHistoryAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteReportHistorySnapshot(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDeleteReportHistorySnapshot(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDeleteReportHistorySnapshot(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteReportHistorySnapshotAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteReportHistorySnapshotAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FindItems(System.String,ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum,ServerTestFramework.STFLive.Reporting.Service.SearchCondition[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginFindItems(System.String,ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum,ServerTestFramework.STFLive.Reporting.Service.SearchCondition[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndFindItems(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FindItemsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum,ServerTestFramework.STFLive.Reporting.Service.SearchCondition[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FindItemsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum,ServerTestFramework.STFLive.Reporting.Service.SearchCondition[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSchedule(System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateSchedule(System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateSchedule(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateScheduleAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateScheduleAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSchedule(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDeleteSchedule(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDeleteSchedule(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteScheduleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteScheduleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetScheduleProperties(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetScheduleProperties(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetScheduleProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSchedulePropertiesAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSchedulePropertiesAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetScheduleProperties(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetScheduleProperties(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetScheduleProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSchedulePropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSchedulePropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListScheduledReports(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListScheduledReports(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListScheduledReports(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListScheduledReportsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListScheduledReportsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSchedules">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSchedules(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSchedules(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSchedulesAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSchedulesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PauseSchedule(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginPauseSchedule(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndPauseSchedule(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PauseScheduleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PauseScheduleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ResumeSchedule(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginResumeSchedule(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndResumeSchedule(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ResumeScheduleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ResumeScheduleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSubscription(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateSubscription(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSubscriptionAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSubscriptionAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataDrivenSubscription(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateDataDrivenSubscription(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateDataDrivenSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataDrivenSubscriptionAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataDrivenSubscriptionAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetSubscriptionProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSubscriptionPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSubscriptionPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataDrivenSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetDataDrivenSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetDataDrivenSubscriptionProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataDrivenSubscriptionPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataDrivenSubscriptionPropertiesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan,System.String,System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ActiveState@,System.String@,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetSubscriptionProperties(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetSubscriptionProperties(System.IAsyncResult,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ActiveState@,System.String@,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValue[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSubscriptionPropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSubscriptionPropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataDrivenSubscriptionProperties(System.String,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings@,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ActiveState@,System.String@,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetDataDrivenSubscriptionProperties(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetDataDrivenSubscriptionProperties(System.IAsyncResult,ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings@,ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ActiveState@,System.String@,System.String@,System.String@,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataDrivenSubscriptionPropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataDrivenSubscriptionPropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSubscription(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDeleteSubscription(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDeleteSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSubscriptionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSubscriptionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PrepareQuery(ServerTestFramework.STFLive.Reporting.Service.DataSource,ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition,System.Boolean@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginPrepareQuery(ServerTestFramework.STFLive.Reporting.Service.DataSource,ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndPrepareQuery(System.IAsyncResult,System.Boolean@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PrepareQueryAsync(ServerTestFramework.STFLive.Reporting.Service.DataSource,ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PrepareQueryAsync(ServerTestFramework.STFLive.Reporting.Service.DataSource,ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExtensionSettings(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetExtensionSettings(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetExtensionSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExtensionSettingsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExtensionSettingsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ValidateExtensionSettings(System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginValidateExtensionSettings(System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndValidateExtensionSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ValidateExtensionSettingsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ValidateExtensionSettingsAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptions(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSubscriptions(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSubscriptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsUsingDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSubscriptionsUsingDataSource(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSubscriptionsUsingDataSource(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsUsingDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsUsingDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListExtensions(ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListExtensions(ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListExtensions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListExtensionsAsync(ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListExtensionsAsync(ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListEvents">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListEvents(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListEvents(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListEventsAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListEventsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FireEvent(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginFireEvent(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndFireEvent(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FireEventAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FireEventAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemTasks">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSystemTasks(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSystemTasks(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemTasksAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemTasksAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListTasks">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListTasks(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListTasks(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListTasksAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListTasksAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemRoles">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListSystemRoles(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListSystemRoles(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemRolesAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemRolesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListRoles">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginListRoles(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndListRoles(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListRolesAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListRolesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateRole(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginCreateRole(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndCreateRole(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateRoleAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateRoleAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteRole(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginDeleteRole(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndDeleteRole(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteRoleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteRoleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRoleProperties(System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetRoleProperties(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetRoleProperties(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRolePropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRolePropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetRoleProperties(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetRoleProperties(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetRoleProperties(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetRolePropertiesAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetRolePropertiesAsync(System.String,System.String,ServerTestFramework.STFLive.Reporting.Service.Task[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPolicies">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetSystemPolicies(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetSystemPolicies(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPoliciesAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPoliciesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPolicies(ServerTestFramework.STFLive.Reporting.Service.Policy[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetSystemPolicies(ServerTestFramework.STFLive.Reporting.Service.Policy[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetSystemPolicies(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPoliciesAsync(ServerTestFramework.STFLive.Reporting.Service.Policy[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPoliciesAsync(ServerTestFramework.STFLive.Reporting.Service.Policy[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPolicies(System.String,System.Boolean@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetPolicies(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetPolicies(System.IAsyncResult,System.Boolean@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPoliciesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPoliciesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPolicies(System.String,ServerTestFramework.STFLive.Reporting.Service.Policy[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginSetPolicies(System.String,ServerTestFramework.STFLive.Reporting.Service.Policy[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndSetPolicies(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPoliciesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Policy[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPoliciesAsync(System.String,ServerTestFramework.STFLive.Reporting.Service.Policy[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.InheritParentSecurity(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginInheritParentSecurity(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndInheritParentSecurity(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.InheritParentSecurityAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.InheritParentSecurityAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPermissions">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetSystemPermissions(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetSystemPermissions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPermissionsAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPermissionsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPermissions(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginGetPermissions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndGetPermissions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPermissionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPermissionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogonUser(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginLogonUser(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndLogonUser(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogonUserAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogonUserAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.Logoff">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.BeginLogoff(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EndLogoff(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogoffAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogoffAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSecureMethodsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateBatchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelBatchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ExecuteBatchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteItemCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.MoveItemCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListChildrenCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetItemTypeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateFolderCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDefinitionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDefinitionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateResourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetResourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetResourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportParametersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportParametersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateLinkedReportCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportLinkCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportLinkCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListLinkedReportsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.RenderStreamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRenderResourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetExecutionOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExecutionOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetCacheOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetCacheOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.UpdateReportExecutionSnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FlushCacheCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListJobsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CancelJobCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataSourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataSourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.EnableDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DisableDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportsUsingDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportDataSourcesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportDataSourcePromptsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateReportHistorySnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetReportHistoryLimitCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetReportHistoryLimitCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListReportHistoryCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteReportHistorySnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FindItemsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSchedulePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSchedulePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListScheduledReportsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSchedulesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PauseScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ResumeScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateDataDrivenSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetDataDrivenSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetDataDrivenSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.PrepareQueryCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetExtensionSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ValidateExtensionSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSubscriptionsUsingDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListExtensionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListEventsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.FireEventCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemTasksCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListTasksCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListSystemRolesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.ListRolesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.CreateRoleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.DeleteRoleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetRolePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetRolePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetSystemPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.SetPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.InheritParentSecurityCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetSystemPermissionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.GetPermissionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogonUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.STFLive.Reporting.Service.ReportingService.LogoffCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ServerInfoHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ServerInfoHeader.ReportServerVersionNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ServerInfoHeader.ReportServerEdition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Policy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Policy.GroupUserName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Policy.Roles">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Role">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Role.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Role.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Task">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Task.TaskID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Task.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Task.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Event">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Event.Type">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Extension">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.ExtensionType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.LocalizedName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Extension.Visible">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.Delivery">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.Render">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.Data">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExtensionTypeEnum.All">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Subscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.SubscriptionID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Owner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Path">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.VirtualPath">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Report">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.DeliverySettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.Active">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.LastExecuted">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.LastExecutedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.ModifiedBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.EventType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Subscription.IsDataDriven">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings.Extension">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionSettings.ParameterValues">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterFieldReference">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterValueOrFieldReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterFieldReference.ParameterName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterFieldReference.FieldAlias">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterValue.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterValue.Value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ParameterValue.Label">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ActiveState">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.DeliveryExtensionRemoved">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.DeliveryExtensionRemovedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.SharedDataSourceRemoved">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.SharedDataSourceRemovedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.MissingParameterValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.MissingParameterValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.InvalidParameterValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.InvalidParameterValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.UnknownReportParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ActiveState.UnknownReportParameterSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.DisplayName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.ReadOnly">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.Encrypted">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.IsPassword">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ExtensionParameter.ValidValues">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ValidValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ValidValue.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ValidValue.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.CommandType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.CommandText">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.Timeout">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.QueryDefinition.TimeoutSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Field">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Field.Alias">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Field.Name">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Fields">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Query">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.CaseSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.CaseSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Collation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.AccentSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.AccentSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.KanatypeSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.KanatypeSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.WidthSensitivity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.WidthSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSetDefinition.Name">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum.True">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum.False">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.SensitivityEnum.Auto">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataRetrievalPlan.DataSet">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinitionOrReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Extension">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.ConnectString">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.CredentialRetrieval">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.WindowsCredentials">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.ImpersonateUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.ImpersonateUserSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Prompt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.UserName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Password">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.Enabled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceDefinition.EnabledSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.Prompt">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.Store">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.Integrated">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.CredentialRetrievalEnum.None">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceReference.Reference">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.InvalidDataSourceReference">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Schedule">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.ScheduleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Definition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.Creator">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.NextRunTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.NextRunTimeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.LastRunTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.LastRunTimeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.ReferencesPresent">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Schedule.State">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinitionOrReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.StartDateTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.EndDateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleDefinition.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DailyRecurrence">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RecurrencePattern">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DailyRecurrence.DaysInterval">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence.WeeksInterval">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence.WeeksIntervalSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.WeeklyRecurrence.DaysOfWeek">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Sunday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Monday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Tuesday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Wednesday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Thursday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Friday">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DaysOfWeekSelector.Saturday">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MinuteRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MinuteRecurrence.MinutesInterval">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MonthlyRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyRecurrence.Days">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyRecurrence.MonthsOfYear">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.January">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.February">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.March">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.April">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.May">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.June">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.July">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.August">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.September">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.October">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.November">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthsOfYearSelector.December">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.WhichWeek">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.WhichWeekSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.DaysOfWeek">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.MonthlyDOWRecurrence.MonthsOfYear">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.FirstWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.SecondWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.ThirdWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.FourthWeek">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.WeekNumberEnum.LastWeek">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleReference">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleReference.ScheduleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleReference.Definition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.NoSchedule">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Ready">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Running">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Paused">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Expired">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ScheduleStateEnum.Failing">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot.HistoryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportHistorySnapshot.Size">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt.DataSourceID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourcePrompt.Prompt">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSource">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSource.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSource.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Job">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.JobID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Path">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Machine">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.StartDateTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Action">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Job.Status">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum.Render">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum.SnapshotCreation">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobActionEnum.ReportHistoryCreation">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.JobTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobTypeEnum.User">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobTypeEnum.System">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum.New">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum.Running">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.JobStatusEnum.CancelRequested">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExpirationDefinition">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.TimeExpiration">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.TimeExpiration.Minutes">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ScheduleExpiration">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ScheduleExpiration.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ReportParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.TypeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Nullable">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.NullableSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.AllowBlank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.AllowBlankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.MultiValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.MultiValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.QueryParameter">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.QueryParameterSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Prompt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.PromptUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.PromptUserSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.Dependencies">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ValidValuesQueryBased">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ValidValuesQueryBasedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ValidValues">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.DefaultValuesQueryBased">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.DefaultValuesQueryBasedSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.DefaultValues">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.State">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.StateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ReportParameter.ErrorMessage">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.Boolean">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.DateTime">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.Integer">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.Float">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterTypeEnum.String">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.HasValidValue">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.MissingValidValue">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.HasOutstandingDependencies">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ParameterStateEnum.DynamicValuesUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials.DataSourceName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials.UserName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.DataSourceCredentials.Password">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Warning">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.Code">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.Severity">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.ObjectName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.ObjectType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Warning.Message">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CatalogItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Path">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.VirtualPath">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Size">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.SizeSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.Hidden">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.HiddenSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.CreationDateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ModifiedDateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.CreatedBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ModifiedBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.MimeType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ExecutionDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CatalogItem.ExecutionDateSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Unknown">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Folder">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Report">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.Resource">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.LinkedReport">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemTypeEnum.DataSource">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.Property">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Property.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.Property.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SearchCondition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SearchCondition.Condition">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SearchCondition.ConditionSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ConditionEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ConditionEnum.Contains">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ConditionEnum.Equals">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SessionHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.SessionId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.IsNewExecution">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.ExecutionDateTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SessionHeader.ExpirationDateTime">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceHeader.ItemNamespace">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceEnum.PathBased">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ItemNamespaceEnum.GUIDBased">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.BatchHeader">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.BatchHeader.BatchID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum.Live">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.ExecutionSettingEnum.Snapshot">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum.And">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Service.BooleanOperatorEnum.Or">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSecureMethodsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSecureMethodsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSecureMethodsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateBatchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateBatchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CancelBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ExecuteBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSystemPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSystemPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.MoveItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListChildrenCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListChildrenCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListChildrenCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetItemTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetItemTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetItemTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateReportCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDefinitionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDefinitionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportDefinitionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportDefinitionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportDefinitionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.SetReportDefinitionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateResourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetResourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetResourceContentsCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportParametersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportParametersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportParametersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportParametersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateLinkedReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportLinkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportLinkCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportLinkCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportLinkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListLinkedReportsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListLinkedReportsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListLinkedReportsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.Encoding">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.ParametersUsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.Warnings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderCompletedEventArgs.StreamIds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs.Encoding">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.RenderStreamCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRenderResourceCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetExecutionOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetExecutionOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetCacheOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetCacheOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.UpdateReportExecutionSnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FlushCacheCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListJobsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListJobsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListJobsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CancelJobCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CancelJobCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CancelJobCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataSourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataSourceContentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataSourceContentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetDataSourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.EnableDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DisableDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportsUsingDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportsUsingDataSourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListReportsUsingDataSourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportDataSourcesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcePromptsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcePromptsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportDataSourcePromptsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateReportHistorySnapshotCompletedEventArgs.Warnings">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportHistoryOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs.KeepExecutionSnapshots">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetReportHistoryLimitCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs.IsSystem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetReportHistoryLimitCompletedEventArgs.SystemLimit">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportHistoryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListReportHistoryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListReportHistoryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteReportHistorySnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FindItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FindItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.FindItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateScheduleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateScheduleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSchedulePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSchedulePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSchedulePropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSchedulePropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListScheduledReportsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListScheduledReportsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListScheduledReportsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSchedulesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSchedulesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSchedulesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.PauseScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ResumeScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateSubscriptionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateSubscriptionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateDataDrivenSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateDataDrivenSubscriptionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.CreateDataDrivenSubscriptionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetDataDrivenSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Active">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.EventType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.MatchData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSubscriptionPropertiesCompletedEventArgs.Parameters">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.DataRetrievalPlan">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Active">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.EventType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.MatchData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Parameters">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.PrepareQueryCompletedEventArgs.Changed">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExtensionSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetExtensionSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetExtensionSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ValidateExtensionSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ValidateExtensionSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ValidateExtensionSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsUsingDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsUsingDataSourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSubscriptionsUsingDataSourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListExtensionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListExtensionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListExtensionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListEventsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListEventsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListEventsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.FireEventCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemTasksCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemTasksCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSystemTasksCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListTasksCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListTasksCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListTasksCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListSystemRolesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListSystemRolesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.ListRolesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.ListRolesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.CreateRoleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.DeleteRoleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetRolePropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetRolePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPoliciesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSystemPoliciesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetSystemPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPoliciesCompletedEventArgs.InheritParent">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.SetPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.InheritParentSecurityCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPermissionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetSystemPermissionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetSystemPermissionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPermissionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.GetPermissionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Service.GetPermissionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.LogonUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Service.LogoffCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingQueryType">
            <summary>
            Type of query to do against a particular table
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingPair">
            <summary>
            Helper class
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryRunner">
            <summary>
            Runs a query against a Reporting server
            
            First deconstructs the query, running a count query first
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryRunner.RunQuery(System.Collections.Generic.List{System.String},System.String,System.String,System.Int32@,System.Collections.ArrayList@)">
            <summary>
            Order expected (count query then select query
            </summary>
            <param name="queries">Queries to run against the server</param>
            <param name="ReportingServer">Server to hit</param>
            <param name="ReportingDB">Database to hit</param>
            <param name="count"></param>
            <param name="Results">Results and counts from queries</param>
            <returns>If there were any errors</returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryBuilder">
            <summary>
            Contains helpful utility functions for building SQL queries
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingSQLQueryBuilder.BuildQuery(System.Type,System.Collections.Generic.Queue{ServerTestFramework.STFLive.Reporting.ReportingPair},ServerTestFramework.STFLive.Reporting.ReportingQueryType)">
            <summary>
            
            </summary>
            <param name="ReportingTableType"></param>
            <param name="KnownValues"></param>
            <param name="TypeOfQuery"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingTable">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMaxUserPUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMaxUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMaxUserPUID(ServerTestFramework.STFLive.Reporting.ReportingDatabase)">
            <summary>
            GetMaxUserID - Using Reporting Database
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMinUserPUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMinUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetMinUserPUID(ServerTestFramework.STFLive.Reporting.ReportingDatabase)">
            <summary>
            GetMinUserID - Using Reporting Database
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.FindNextUserID(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.FindNextUserID(ServerTestFramework.STFLive.Reporting.ReportingDatabase,System.Int64)">
            <summary>
            Find Next User ID - Using Reporting Database
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.FindNextUserID(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingTable.GetRecordCount(ServerTestFramework.STFLive.Reporting.ReportingDatabase)">
            <summary>
            Get Table Record Count
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingVerification">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingVerification.m_Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingVerification.m_HResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.ReportingVerification.m_Parameters">
            <summary>
            Job parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingVerification.RunJob">
            <summary>
            Execute the job
            </summary>
            <returns>The constructed SQL script to execute the job</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.HResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.Results">
            <summary>
            The results of this job
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.StartTime">
            <summary>
            When the job was started
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.RunningTime">
            <summary>
            How long it took this job to run
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.JobName">
            <summary>
            Name of the job
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.JobSteps">
            <summary>
            Job Steps
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.ReportingVerification.Parameters">
            <summary>
            Job Parameters
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.XBLReport">
            <summary>
            Abstract class for Xbox Live Report objects. Each object will map to a specific report
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.XBLReport.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.XBLReport.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.XBLReport.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.XBLReport.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.XBLReport.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.XBLReport.ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS">
            <summary>
            This is the SSIS Cdb Video Processing job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SSISJob">
            <summary>
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CdbVideoProcessing_SSIS.CdbVideoProcessing_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CIQDatafeed">
            <summary>
            This is the CIQ Datafeed export job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CIQDatafeed.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CIQDatafeed.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CIQDatafeed.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CIQDatafeed.CIQDatafeed_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux">
            <summary>
            This is the ReportingDB Daily Processing Crux job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.RunJob">
            <summary>
            Execute the job. If the job contains a valid parameter object then it will create
            the SQL to run the stored procedure for Daily Processing Crux.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.UpdateStatus">
            <summary>
            Update Job status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_Crux.DailyProcessing_Crux_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage">
            <summary>
            This is the Game Usage Daily Processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.RunJob">
            <summary>
            Execute the job. If the job contains a valid parameter object then it will create
            the SQL to run the stored procedure for Game Usage Daily Processing
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.UpdateStatus">
            <summary>
            Update Job status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage.DailyProcessing_GameUsage_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing">
            <summary>
            This is the OLAP ACHIEVEMENT CUBE daily processing job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapJob">
            <summary>
            OlapJob. From here the SSAS processing jobs will be derived.
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapJob.RunJob">
            <summary>
            Run job. If no parameters are set then default job will be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapJob.UpdateStatus">
            <summary>
            Update Olap Job Status
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapJob.OlapJobParameters">
            <summary>
            Parameters for Olap Cube processing jobs
            Default settings are for regular job to run
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_AchievementsProcessing.DailySSAS_AchievementProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing">
            <summary>
            This is the OLAP CDB CRUXUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CDBCruxUsageProcessing.DailySSAS_CDBCruxUsageProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing">
            <summary>
            This is the OLAP CRUXUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_CruxUsageProcessing.DailySSAS_CruxUsageProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing">
            <summary>
            This is the OLAP GAMEUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_GameUsageProcessing.DailySSAS_GameUsageProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing">
            <summary>
            This is the OLAP CDB CRUXUSAGE CUBE daily processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailySSAS_VideoCubeProcessing.DailySSAS_VideoCubeProcessing_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables">
            <summary>
            This is the FilterDB:Purge Fact Tables job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FilterDB_PurgeFactTables.FilterDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration">
            <summary>
            This is the Olap Partition tool creation job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapCubeGeneration.OlapCubeGeneration_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapFullProcessGameUsageJob">
            <summary>
            OlapFullProcessGameUsageJob
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables">
            <summary>
            This is the ReportRealtimeDB: Purge Fact Tables job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_PurgeFactTables.RealtimeDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing">
            <summary>
            This is the ReportRealtimeDB: Realtime Processing job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDB_RealtimeProcessing.RealtimeDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData">
            <summary>
            This is the ReportingDB: Drop Archived Facts job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_TransferFactData.ReportArchiveDB_TransferFactData_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups">
            <summary>
            This is the ReportingDB: Drop Archived Facts job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportArchiveDB_UpdateFilegroups.ReportArchiveDB_UpdateFilegroups_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts">
            <summary>
            This is the ReportingDB: Drop Archived Facts job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_DropArchivedFacts.ReportingDB_DropArchivedFacts_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables">
            <summary>
            This is the ReportingDB:Purge Fact Tables job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ReportingDB_PurgeFactTables.ReportingDB_PurgeFactTables_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS">
            <summary>
            This is the SCGExport SSIS package job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGExport_SSIS.SCGExport_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS">
            <summary>
            This is the SCGImport SSIS package job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SCGImportFeed_SSIS.SCGImportFeed_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS">
            <summary>
            This is the UODB Accounts SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Accounts_SSIS.UODB_Accounts_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS">
            <summary>
            This is the UODB Music SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Music_SSIS.UODB_Music_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS">
            <summary>
            This is the UODB Offers SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Offers_SSIS.UODB_Offers_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS">
            <summary>
            This is the Daily UODB SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Primary_SSIS.UODB_Primary_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS">
            <summary>
            This is the UODB Purchase SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Purchase_SSIS.UODB_Purchase_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS">
            <summary>
            This is the UODB Realtime SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Realtime_SSIS.UODB_Realtime_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS">
            <summary>
            This is the Weekly UODB SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Secondary_SSIS.UODB_Secondary_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS">
            <summary>
            This is the UODB Video SSIS job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.UODB_Video_SSIS.UODB_Video_SSIS_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.WMIS_Download">
            <summary>
            This is the WMIS Download job
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.WMIS_Download.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.WMIS_Download.#ctor(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Reporting Constructor with Job Parameters
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.WMIS_Download.Initialize(ServerTestFramework.STFLive.Reporting.ReportingJobParameters)">
            <summary>
            Initialize Job with parameters if provided
            </summary>
            <param name="reportingJobParams">Job Parameters</param>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.WMIS_Download.WMIS_Download_Params">
            <summary>
            Job parameters specific to this job
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.AchievementSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.ContractualPartners.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.FirstTitlePlayed.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.LastWebActivity.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceDownloadSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketplaceScorecard.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTitleOffer.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MarketRedeemedContentTypeTier.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.MusicRoyalty.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageDaily.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.PublisherTitleUsageMonthly.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeAccounts.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.RealTimeTitleUsage.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.SubscriberLife.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageDetails.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.TitleUsageSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoRoyalty.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VideoStudio.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.VisitorFrequency.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.Xbox1DownloadDetails.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.m_ReportPath">
            <summary>
            Path to report in ReportingService
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.GetReportParameters">
            <summary>
            Queries the ReportingService to get the parameters for this Report.
            </summary>
            <returns>A list of Report Parameter Names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObject)">
            <summary>
            Verifies that data represented within the reference object is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObject">Object whose data needs verifying</param>
            <returns>Description of what was verified</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.Verify(ServerTestFramework.STFLive.Reporting.ReportingReferenceObjectContainer)">
            <summary>
            Verifies that ALL data represented within the reference object container is present in this Report
            Throws an exception if verification fails
            </summary>
            <param name="refObjectContainer">Object whose data needs verifying</param>
            <returns>Description fo what was verified</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.ComponentType">
            <summary>
            What server you are dealing with
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.Reports.XboxAccountSummary.ComponentName">
            <summary>
            The name of the server you are dealing with
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.StagingTable">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_achievements">
            <summary>
            A class representing T_achievements table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int32,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int32,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_achievements.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_base_offers">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_content_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_content_package">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions">
            <summary>
            A class representing T_dmp_purchase_transactions table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Guid,System.Int32)">
            <summary>
            AddOneRow
            if i_purchase_type_id=1 then Xbox Live Offers, if 2 then MusicNet, if 3 then SyncCast
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions.GetContent(System.Data.SqlClient.SqlConnection,System.Guid)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions.GetContent(System.Data.SqlClient.SqlConnection,System.Guid,System.String)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_music">
            <summary>
            A class representing T_dmp_purchase_transactions_music table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_music.GetContent(System.Data.SqlClient.SqlConnection,System.Guid)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_video">
            <summary>
            A class representing T_dmp_purchase_transactions_video table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_dmp_purchase_transactions_video.GetContent(System.Data.SqlClient.SqlConnection,System.Guid)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_elite_migration_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_fdb_time">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_guest_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_machines">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.AddOneRow(System.Data.SqlClient.SqlConnection)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetMaxMachinePUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMaxUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetMinMachinePUID(System.Data.SqlClient.SqlConnection)">
            <summary>
            GetMaxUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.FindNextMachineID(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.FindNextMachineID(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            FindNextUserID
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_machines.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.String)">
            <summary>
            GetContent
            szTable should be "t_machines" or "t_machines_rt"
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_migrate_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_msg_snd_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_new_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_offers">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_presence_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_provision_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_publisher_titles">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_purchase_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_content_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_content_xbox360_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_guest_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_migrate_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_msg_snd_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_new_account_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_presence_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_provision_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_purchase_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_rdb_session_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_session_fact">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount.#ctor">
            <summary>
            Constructors
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount.AddOneRow(System.Data.SqlClient.SqlConnection)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_spscustomeraccount.AddOneRow(System.Data.SqlClient.SqlCommand)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions">
            <summary>
            A class representing T_subscriptions table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_subscriptions.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_title_culture_details">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_title_feature_data">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_title_offers">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_titles">
            <summary>
            A class representing T_titles
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.FindNextTitleId(System.Data.SqlClient.SqlCommand,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.FindNextTitleId(System.Data.SqlClient.SqlConnection,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Byte,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.AddOneRow(System.Data.SqlClient.SqlCommand,System.Byte,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_titles.GetOneTitle(System.Data.SqlClient.SqlConnection,System.Byte)">
            <summary>
            GetOneTitle
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts">
            <summary>
            A class representing T_user_musicnet_accounts table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_musicnet_accounts.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data">
            <summary>
            A class representing T_user_per_client_type_data table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data_weekly">
            <summary>
            A class representing T_user_per_client_type_data_weekly table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data_weekly.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_per_client_type_data_weekly.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Byte,System.Byte,System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_user_settings">
            <summary>
            A class representing T_user_settings table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_settings.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_user_settings.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_users">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.#ctor">
            <summary>
            Constructors
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Byte)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.AddMultipleRowsInTrans(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            AddMultipleRowsInTrans
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.UpdateMultipleRowsInTrans(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            AddMultipleRowsInTrans
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.String)">
            <summary>
            GetContent
            szTable should be "t_users" or "t_users_rt"
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_users_rt">
            <summary>
            A class representing individual database tables
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users_rt.GetContent(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_users_rt.#ctor">
            <summary>
            Constructors
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles">
            <summary>
            A class representing T_xmsg_user_titles table
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int32,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlCommand,System.Int64,System.Int32)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.AddOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            AddOneRow
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.UpdateOneRow(System.Data.SqlClient.SqlConnection,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.UpdateOneRow(System.Data.SqlClient.SqlCommand,System.Int64)">
            <summary>
            UpdateOneRow
            This is a kind of meaningless update only to trigger update flag for replication
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.Tables.T_xmsg_user_titles.GetContent(System.Data.SqlClient.SqlConnection,System.Int64,System.Int32)">
            <summary>
            GetContent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification">
            <summary>
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification.#ctor(ServerTestFramework.STFLive.Database.ReportingDB,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification.VerifyFactTableSingle(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DailyProcessing_GameUsage_Verification_BVT">
            <summary>
            
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapReportData">
            <summary>
            ReportingData object to submit queries to OlapDB for reports
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>        
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_Queries">
            <summary>
            List of queries
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_RawData">
            <summary>
            Raw object data (Caller must know how to cast the data)
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.OlapReportData.m_ReportType">
            <summary>
            Report that this data object maps to
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapReportData.RunDebugQuery">
            <summary>
            Run a query in OLAPDB to obtain the raw data
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapReportData.InitializeDataObject(ServerTestFramework.STFLive.Reporting.XBLReports)">
            <summary>
            Initialize ReportingData object.
            ** In the future this should be modified to generate dynamic data **
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapReportData.GetReportDataQueries(System.String)">
            <summary>
            Parse the Report Test Script and extract all OLAP queries with their respective
            report section and test case.
            </summary>
            <param name="TestScriptFileName">Report Test script file</param>
            <returns>Hashtable in the form of (Key)ReportQueryNumber (Value)|ReportSectionNumber|TestCaseNumber|Query|</returns>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapReportData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>        
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent">
            <summary>
            CleanserTCPEvent
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.#ctor">
            <summary>
            CleanserTCPEvent constructor
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.ConnectToCleanser(System.Int32,System.Int32)">
            <summary>
            ConnectToCleanser
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.DisconnectFromCleanser(System.Int32)">
            <summary>
            DisconnectFromCleanser
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.SocketSend(System.Int32,System.Byte[])">
            <summary>
            SocketSend
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.CleanserTCPEvent.SendMessage(System.Int32,System.Int32,System.String)">
            <summary>
            SendMessage
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.MigrateAccountTCPEvent">
            <summary>
            MigrateAccountTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ProvisionTCPEvent">
            <summary>
            ProvisionTCPEvent 
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.DeprovisionTCPEvent">
            <summary>
            DeprovisionTCPEvent 
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ContentTCPEvent">
            <summary>
            ContentTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ContentXeTCPEvent">
            <summary>
            ContentXeTCPEvent - Not Done
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PresenceTitleStartTCPEvent">
            <summary>
            PresenceTitleStartTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PresenceTitleEndTCPEvent">
            <summary>
            PresenceTitleEndTCPEvent 
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SessionStartTCPEvent">
            <summary>
            SessionStartTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.SessionEndTCPEvent">
            <summary>
            SessionEndTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PresenceGuestTCPEvent">
            <summary>
            PresenceGuestTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.XePurchaseTCPEvent">
            <summary>
            XePurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.EliteMigrationTCPEvent">
            <summary>
            EliteMigrationTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GenericTCPEvent">
            <summary>
            ContentTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.ArgonTCPEvent">
            <summary>
            ArgonTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceOfferPurchaseTCPEvent">
            <summary>
            GeoFenceOfferPurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceContentReferralTCPEvent">
            <summary>
            GeoFenceContentReferralTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceVideoPurchaseTCPEvent">
            <summary>
            GeoFenceVideoPurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceVideoAcquireURLTCPEvent">
            <summary>
            GeoFenceVideoAcquireURLTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.GeoFenceVideoAcquireLicenseTCPEvent">
            <summary>
            GeoFenceVideoAcquireLicenseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerViewAggTCPEvent">
            <summary>
            BannerViewAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerViewTCPEvent">
            <summary>
            BannerViewTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerClickAggTCPEvent">
            <summary>
            BannerClickAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerClickTCPEvent">
            <summary>
            BannerClickTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerPurchaseTCPEvent">
            <summary>
            BannerPurchaseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.BannerPurchaseAggTCPEvent">
            <summary>
            BannerPurchaseAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FusionTCPEvent">
            <summary>
            FusionTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.FusionAggTCPEvent">
            <summary>
            FusionAggTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.LicenseTCPEvent">
            <summary>
            LicenseTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.PurchaseOfferTCPEvent">
            <summary>
            PurchaseOfferTCPEvent
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData">
            <summary>
            GameUsageFactData
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingData.DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapDailyProcessingBVTData">
            <summary>
            GameUsageFactData
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.OlapGenericData">
            <summary>
            Generic Olap Data class
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.OlapGenericData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.TableCounts">
            <summary>
            ReportingData is a series of tables and respective row counts
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.OlapGenericData.RawData">
            <summary>
            Raw object data (Caller must know how to cast the data)
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_Source">
            <summary>
            Data source: UODB, SSIS, ReportingDB, etc
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_ObjectType">
            <summary>
             Get ReportingData object type
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_DataType">
            <summary>
            Get internal data type (Queries, Raw, Counts)
            </summary>
        </member>
        <member name="F:RealtimeDBStressData.m_Queries">
            <summary>
            List of queries
            </summary>
        </member>
        <member name="M:RealtimeDBStressData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader">
            <summary>
            This class contains the logic necessary to load Data objects into the Reporting Realtime Database
            or FilterDB databases that feed the Realtime system.
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_MinUserIndex">
            <summary>
            UserPuid index - Puid to use in the next data generation
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_Titles">
            <summary>
            Array of titles to use
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_Offers">
            <summary>
            Array of offers to use
            </summary>
        </member>
        <member name="F:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.m_TargetTable">
            <summary>
            Target table to insert data into
            </summary>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.GetSupportedDatabases">
            <summary>
            Get the database names supported by this loader object
            </summary>
            <returns>List of database names</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.InjectSingleData">
            <summary>
            This method creates a SQL query to add a single row of data into specific tables of a database.
            </summary>        
            <returns>SQL string to add data</returns>
        </member>
        <member name="M:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.IncreaseUserDataIndex">
            <summary>
            Internal function to increase data index
            </summary>
        </member>
        <member name="P:ServerTestFramework.STFLive.Reporting.RealtimeDBStressDataLoader.MinUserIndex">
            <summary>
            Initialize the data index
            </summary>
            <param name="SeedIndex">Seed value to use</param>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDB.OpenSQLConnection">
            <summary>
            Asynchronously attempts to connect to all RegDB server IPs and returns as soon as a successful connection is made.
            Once one is found, the server name is cached so subsequent attempts return much quicker.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBInfo">
            <summary>
            Get information from RegDB.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.Close">
            <summary>
            close the sql connection
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetAllSuites">
            <summary>
            Retrieves a list of all suites in RegDB
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetAllEnvironments">
            <summary>
            Retrieves a list of all environments in RegDB, with an array that can be indexed by environmentID
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetAllBuilds">
            <summary>
            Retrieves a list of all build runs in RegDB
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetSuitePassCountForBuild(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the pass and total count for a build for a suite
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetSuiteTree(System.String)">
            <summary>
            Gets RegDB's view of a suite's tree
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetLeafPassFail(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets whether a test leaf node passed or ran
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInfo.GetNodeOutputToReportDestination(System.String,System.Int32,ServerTestFramework.Report.Destination)">
            <summary>
            Retrieves output from RegDB and throws it at a report destination
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBTreeReader">
            <summary>
            Retrieves a node tree containing every test group and case that RegDB contains for a specific suite.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBInquirer">
            <summary>
            Represents a specific component (suite, group or case) on which queries can be performed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.#ctor(System.String)">
            <summary>
            This query is about a specific test suite.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.#ctor(System.String,System.String)">
            <summary>
            This query is about a specific test group.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.#ctor(System.String,System.String,System.String)">
            <summary>
            This query is about a specific test case.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetHistory">
            <summary>
            Retrieves the history of the component that this object represents.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(ServerTestFramework.Reporting.RegDBInquirer.RegDBHistory)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(ServerTestFramework.Reporting.RegDBInquirer.RegDBHistory,ServerTestFramework.Report.Destination)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            /// if outDst is non-null, then the log is pushed into a specific reporting destination rather than returned as a string
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(System.String,System.String,System.UInt32)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(System.UInt32)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.GetLog(System.UInt32,ServerTestFramework.Report.Destination)">
            <summary>
            Retrieves the output from a specific build of the component represented by this object.
            if outDst is non-null, then the log is pushed into a specific reporting destination rather than returned as a string
            </summary>
        </member>
        <member name="M:ServerTestFramework.Reporting.RegDBInquirer.CancelGetLog">
            <summary>
            Cancels a currently running GetLog() request.
            This blocks until log retrieval is actually halted.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Reporting.RegDBInquirer.RegDBHistory">
            <summary>
            represents a pass/fail entry for as specific build of a component.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestDB.TestDB">
            <summary> Used to open a connection with TestDB. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDB.OpenConnection">
            <summary> Opens a connection to the default TestDB.  You are responsible for closing the returned connection. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDB.OpenConnection(System.String)">
            <summary> Opens a connection to a TestDB.  You are responsible for closing the returned connection. </summary>
        </member>
        <member name="T:ServerTestFramework.TestDB.TestDBConnector">
            <summary> Used as a base class for classes that reuse a connection to TestDB. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBConnector.#ctor">
            <summary> Connects to TestDB to prepare to read. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBConnector.Dispose">
            <summary> Closes the connection to TestDB. </summary>
        </member>
        <member name="T:ServerTestFramework.TestDB.TestDBReader">
            <summary> Used to read data from TestDB. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.ClearCache">
            <summary> Clears all cached TestDB data. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetRootNodeNames">
            <summary> Gets a list of the names of all root nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetVersionList">
            <summary> Gets a list of all versions. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetEnvironmentList">
            <summary> Gets a list of all environments. </summary>
        </member>
        <member name="M:ServerTestFramework.TestDB.TestDBReader.GetEnvironment(System.Int32)">
            <summary> Given a specific environment ID, returns information about that enviornment. </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetDeltaRatingAverages(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetDeltaRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAverages(System.Guid,System.DateTime,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetUnauthRatingAverages(System.Guid,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetUnauthRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAverages(System.Guid,System.DateTime,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetDeltaUnauthRatingAverages(System.Guid,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetDeltaUnauthRatingAverages(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAveragesAsync(System.Guid,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetRatingAveragesWithReviewCount(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.BeginGetDeltaRatingAveragesWithReviewCount(System.Guid,System.DateTime,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.EndGetDeltaRatingAveragesWithReviewCount(System.IAsyncResult,System.String@,System.DateTime@,System.Xml.XmlNode@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCountAsync(System.Guid,System.DateTime,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetUnauthRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaUnauthRatingAveragesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetRatingAveragesWithReviewCountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.aggregator.Aggregator.GetDeltaRatingAveragesWithReviewCountCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetUnauthRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaUnauthRatingAveragesCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetRatingAveragesWithReviewCountCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.transactionToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.transactionStartTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.aggregator.GetDeltaRatingAveragesWithReviewCountCompletedEventArgs.results">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.MultiRating">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginAdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndAdvanceState(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNickname(System.Int64,System.Guid,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetNickname(System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetNickname(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameAsync(System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameAsync(System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestions(System.String,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetNicknameSuggestions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetNicknameSuggestions(System.IAsyncResult,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverage(System.Guid,System.Object,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingAverage(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingAverage(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollup(System.Guid,System.Object,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingAverageRollup(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingAverageRollup(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollupAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollupAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingByUserWithAverage(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetMultipleRatingsByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Rating[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUser(System.Guid,System.Int64,System.Guid@,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetRatingsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetRatingsByUser(System.IAsyncResult,System.Guid@,ServerTestFramework.LiveService.msnrr.multi.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviewByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviews(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviews(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviews(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviewsByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollup(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetReviewsRollup(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetReviewsRollup(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.multi.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginGetUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndGetUnauthRatings(System.IAsyncResult,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNickname(System.Int64,System.Guid,System.String,System.String[]@,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveNickname(System.Int64,System.Guid,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveNickname(System.IAsyncResult,System.String[]@,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNicknameAsync(System.Int64,System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNicknameAsync(System.Int64,System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveRating(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginBulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndBulkSaveRating(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Guid[],System.Int32[],System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveReportViolation(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginBulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndBulkSaveReview(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveReviewHelpfulness(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginSaveUnauthRatings(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndSaveUnauthRatings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Guid,System.Int32[],System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BeginValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.EndValidateReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.multi.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Guid[],System.Int32[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.multi.MultiRating.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.AdvanceStateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetNicknameSuggestionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingAverageRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingByUserWithAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetMultipleRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetReviewsRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.GetUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReportViolationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.BulkSaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveReviewHelpfulnessCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.SaveUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.multi.MultiRating.ValidateReviewCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ValidationError">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.DataField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.Code">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidationError.MaxLength">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Field">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.empty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.nickname">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.ratingItemID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.reviewFieldID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.title">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.customProperty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.name">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.email">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.comments">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Field.score">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Type">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.RequiredFieldMissing">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TextTooLong">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TextInvalidChars">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TextProfanity">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.InvalidFormat">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.TooManyChanges">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.AlreadyTaken">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.ReviewsRequireRatings">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.ReviewsRequireOneField">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.multi.Type.UserCannotRateOwnReview">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.Sum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.CurrentUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Helpfulness.CurrentUserSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ReviewField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.MaxLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.MaxLengthSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Cols">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.ColsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Rows">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.RowsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ReviewField.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.Nickname">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.User.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Review">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.CustomProperty">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Title">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Field">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Review.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ItemID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.StringID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.LongID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.GuidID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ItemID.GuidIDSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.TotalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.Rating.TotalCountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingItem.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.UserValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.RatingAttribute.CountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.OverallRating.UserValueSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.AdvanceStateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.AdvanceStateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.AdvanceStateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetNicknameSuggestionsCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingAverageRollupCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingByUserWithAverageCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetMultipleRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.userID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetRatingsByUserCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewByUserCompletedEventArgs.review">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsByUserCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetReviewsRollupCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs.ratingScores">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.GetUnauthRatingsCompletedEventArgs.ratingCounts">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveNicknameCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveRatingCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.BulkSaveRatingCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReportViolationCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.BulkSaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.BulkSaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveReviewHelpfulnessCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.SaveUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.SaveUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.multi.ValidateReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SingleRating">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginAdvanceState(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndAdvanceState(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceStateAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String[],System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNickname(System.Int64,System.Guid,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetNickname(System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetNickname(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameAsync(System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameAsync(System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestions(System.String,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetNicknameSuggestions(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetNicknameSuggestions(System.IAsyncResult,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverage(System.Guid,System.Object,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingAverage(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingAverage(System.IAsyncResult,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollup(System.Guid,System.Object,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingAverageRollup(System.Guid,System.Object,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingAverageRollup(System.IAsyncResult,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollupAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollupAsync(System.Guid,System.Object,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingByUser(System.IAsyncResult,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,System.Int32@,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingByUserWithAverage(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingByUserWithAverage(System.IAsyncResult,System.Int32@,System.Single@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverageAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,System.Int32[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetMultipleRatingsByUser(System.Guid,System.Object[],System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetMultipleRatingsByUser(System.IAsyncResult,System.Int32[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUserAsync(System.Guid,System.Object[],System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUser(System.Guid,System.Int64,System.Guid@,System.Guid,ServerTestFramework.LiveService.msnrr.single.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetRatingsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetRatingsByUser(System.IAsyncResult,System.Guid@,ServerTestFramework.LiveService.msnrr.single.Rating[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,ServerTestFramework.LiveService.msnrr.single.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviewByUser(System.Guid,System.Object,System.Int64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviewByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.Review@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUserAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviews(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviews(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviews(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviewsByUser(System.Guid,System.Int64,System.Guid,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviewsByUser(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUserAsync(System.Guid,System.Int64,System.Guid,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollup(System.Guid,System.Object,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetReviewsRollup(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetReviewsRollup(System.IAsyncResult,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,ServerTestFramework.LiveService.msnrr.single.Review[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollupAsync(System.Guid,System.Object,System.Int32,System.Int32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatings(System.Guid,System.Object,System.Int32,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginGetUnauthRatings(System.Guid,System.Object,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndGetUnauthRatings(System.IAsyncResult,System.Int32[]@,System.Int64[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatingsAsync(System.Guid,System.Object,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNickname(System.Int64,System.Guid,System.String,System.String[]@,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveNickname(System.Int64,System.Guid,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveNickname(System.IAsyncResult,System.String[]@,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNicknameAsync(System.Int64,System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNicknameAsync(System.Int64,System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveRating(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginBulkSaveRating(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndBulkSaveRating(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRatingAsync(System.Guid,System.Object,System.Int64,System.Guid,System.Int32,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveReportViolation(System.Object,System.Guid,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveReportViolation(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolationAsync(System.Object,System.Guid,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginBulkSaveReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndBulkSaveReview(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveReviewHelpfulness(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveReviewHelpfulness(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulnessAsync(System.Object,System.Int64,System.Guid,System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatings(System.Guid,System.Object,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginSaveUnauthRatings(System.Guid,System.Object,System.Int32[],System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndSaveUnauthRatings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Int32[],System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatingsAsync(System.Guid,System.Object,System.Int32[],System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.BeginValidateReview(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.EndValidateReview(System.IAsyncResult,ServerTestFramework.LiveService.msnrr.single.ValidationError[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReviewAsync(System.Guid,System.Object,System.Int64,System.Guid,System.String,System.Guid[],System.String[],System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.msnrr.single.SingleRating.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.AdvanceStateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetNicknameSuggestionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingAverageRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingByUserWithAverageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetMultipleRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetRatingsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetReviewsRollupCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.GetUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveNicknameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveRatingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReportViolationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.BulkSaveReviewCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveReviewHelpfulnessCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.SaveUnauthRatingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.msnrr.single.SingleRating.ValidateReviewCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ValidationError">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.DataField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.Code">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidationError.MaxLength">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Field">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.empty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.nickname">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.ratingItemID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.reviewFieldID">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.title">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.customProperty">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.name">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.email">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.comments">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Field.score">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Type">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.RequiredFieldMissing">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TextTooLong">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TextInvalidChars">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TextProfanity">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.InvalidFormat">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.TooManyChanges">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.AlreadyTaken">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.ReviewsRequireRatings">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.ReviewsRequireOneField">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.msnrr.single.Type.UserCannotRateOwnReview">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.Sum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.CurrentUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Helpfulness.CurrentUserSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ReviewField">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.MaxLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.MaxLengthSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Cols">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.ColsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Rows">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.RowsSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ReviewField.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.Nickname">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.User.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Review">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.CustomProperty">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Title">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Field">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Helpfulness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Review.ErrorSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ItemID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.StringID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.LongID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.GuidID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ItemID.GuidIDSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.Item">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.Date">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.DateSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.TotalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.Rating.TotalCountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.RatingAttribute">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.RatingItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.IDSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Label">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Error">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.ErrorSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Rank">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.RankSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.Required">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingItem.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.UserValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.Count">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.RatingAttribute.CountSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.OverallRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.AverageValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.AverageValueSpecified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.UserValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.OverallRating.UserValueSpecified">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.AdvanceStateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.AdvanceStateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.AdvanceStateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetNicknameSuggestionsCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageCompletedEventArgs.count">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingAverageRollupCompletedEventArgs.count">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserCompletedEventArgs.rating">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.userRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.averageRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingByUserWithAverageCompletedEventArgs.count">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetMultipleRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.userID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.ratings">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetRatingsByUserCompletedEventArgs.nickname">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewByUserCompletedEventArgs.review">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsByUserCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.pageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.pageNum">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.sortBy">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.sortOrder">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.totalCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetReviewsRollupCompletedEventArgs.Reviews">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs.ratingScores">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.GetUnauthRatingsCompletedEventArgs.ratingCounts">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs.suggestionList">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveNicknameCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveRatingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveRatingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.BulkSaveRatingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReportViolationCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.BulkSaveReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.BulkSaveReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveReviewHelpfulnessCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveUnauthRatingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.SaveUnauthRatingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.SaveUnauthRatingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.msnrr.single.ValidateReviewCompletedEventArgs.errors">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.Alerts">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscriberExists(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginSubscriberExists(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndSubscriberExists(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscriberExistsAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscriberExistsAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.Subscribe(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginSubscribe(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndSubscribe(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscribeAsync(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.SubscribeAsync(System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.AddSubscriptions,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.Unsubscribe(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginUnsubscribe(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndUnsubscribe(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.UnsubscribeAsync(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.UnsubscribeAsync(System.Boolean,System.Boolean,System.Byte[],System.String,ServerTestFramework.Web.Alert.ExistingSubscriptions,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptions(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginEnumerateSubscriptions(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndEnumerateSubscriptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptionsAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptionsAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlert(System.Byte[],System.UInt32,System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.BeginScheduleContentAlert(System.Byte[],System.UInt32,System.String,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.EndScheduleContentAlert(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlertAsync(System.Byte[],System.UInt32,System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlertAsync(System.Byte[],System.UInt32,System.String,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Alert.Alerts.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.SubscriberExistsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.SubscribeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.UnsubscribeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.EnumerateSubscriptionsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Alert.Alerts.ScheduleContentAlertCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.GeneralInfo">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleList(System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.BeginGetTitleList(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.EndGetTitleList(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleListAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleListAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTags(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.BeginLinkedGamerTags(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.EndLinkedGamerTags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTagsAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTagsAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.GeneralInfo.GeneralInfo.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.GeneralInfo.GeneralInfo.GetTitleListCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.GeneralInfo.GeneralInfo.LinkedGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.MessagingImpl">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageString(System.UInt32,System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginGetMessageString(System.UInt32,System.UInt32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndGetMessageString(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageStringAsync(System.UInt32,System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageStringAsync(System.UInt32,System.UInt32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessage(ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginRevokeTitleUserMessage(ServerTestFramework.Web.Messaging.WCRecipientResult[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndRevokeTitleUserMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessageAsync(ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessageAsync(ServerTestFramework.Web.Messaging.WCRecipientResult[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessage(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSendTitleUserMessage(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSendTitleUserMessage(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessageAsync(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessageAsync(System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessage(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.UInt16@,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSendTitleWideMessage(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSendTitleWideMessage(System.IAsyncResult,System.UInt16@,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessageAsync(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessageAsync(System.String,System.UInt64,System.DateTime,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String,ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCLocalizedString[],ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessage(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginDeleteTitleWideMessage(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndDeleteTitleWideMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessageAsync(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessageAsync(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetails(System.UInt32,System.UInt32,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginGetTitleWideMessageDetails(System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndGetTitleWideMessageDetails(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetailsAsync(System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetailsAsync(System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessages(System.UInt32,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginEnumTitleWideMessages(System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndEnumTitleWideMessages(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessagesAsync(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessagesAsync(System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlags(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSetMessageFlags(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSetMessageFlags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlagsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlagsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitles(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCUserTitle[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginEnumUserTitles(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndEnumUserTitles(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCUserTitle[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitlesAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitlesAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitle(System.Byte[],System.String,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginDeleteUserTitle(System.Byte[],System.String,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndDeleteUserTitle(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitleAsync(System.Byte[],System.String,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitleAsync(System.Byte[],System.String,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessage(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginRevokeMessage(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndRevokeMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessageAsync(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessageAsync(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCRecipientResult[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessage(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginSendMessage(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndSendMessage(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCRecipientResult[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessageAsync(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessageAsync(System.Byte[],System.String,System.UInt64,ServerTestFramework.Web.Messaging.WCMessageFlags,System.UInt32,System.UInt16,ServerTestFramework.Web.Messaging.WCMessageType,System.String[],ServerTestFramework.Web.Messaging.WCMessageDetails,ServerTestFramework.Web.Messaging.WCMessageAttachment[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessage(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginDeleteMessage(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndDeleteMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessageAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessageAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCDeleteMsgFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetails(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginGetMessageDetails(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndGetMessageDetails(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCMessageSummary@,ServerTestFramework.Web.Messaging.WCMessageDetails@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetailsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetailsAsync(System.Byte[],System.String,System.UInt32,ServerTestFramework.Web.Messaging.WCMessageFlags,ServerTestFramework.Web.Messaging.WCMessageFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessages(System.Byte[],System.String,ServerTestFramework.Web.Messaging.WCMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.BeginEnumMessages(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EndEnumMessages(System.IAsyncResult,ServerTestFramework.Web.Messaging.WCMessageSummary[]@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessagesAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessagesAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Messaging.MessagingImpl.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageStringCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeTitleUserMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleUserMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SendTitleWideMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteTitleWideMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.GetTitleWideMessageDetailsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.EnumTitleWideMessagesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SetMessageFlagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.EnumUserTitlesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteUserTitleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.RevokeMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.SendMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.DeleteMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.GetMessageDetailsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Messaging.MessagingImpl.EnumMessagesCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.Presence">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDS(System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetGamertagsFromXUIDS(System.UInt64[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetGamertagsFromXUIDS(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDSAsync(System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDSAsync(System.UInt64[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertags(System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetXUIDSFromGamertags(System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetXUIDSFromGamertags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertagsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertagsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetPresenceInfo(System.UInt64,System.UInt64,System.UInt16,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetPresenceInfo(System.UInt64,System.UInt64,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetPresenceInfo(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetPresenceInfoAsync(System.UInt64,System.UInt64,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetPresenceInfoAsync(System.UInt64,System.UInt64,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsEx(System.UInt64,System.UInt16,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetFriendsEx(System.UInt64,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetFriendsEx(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsExAsync(System.UInt64,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsExAsync(System.UInt64,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetRecentPlayers(System.UInt64,System.UInt16,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetRecentPlayers(System.UInt64,System.UInt16,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetRecentPlayers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetRecentPlayersAsync(System.UInt64,System.UInt16,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetRecentPlayersAsync(System.UInt64,System.UInt16,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriends(System.Byte[],System.String,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.BeginGetFriends(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.EndGetFriends(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.GetFriendsAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Presence.Presence.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetGamertagsFromXUIDSCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetXUIDSFromGamertagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetPresenceInfoCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetFriendsExCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetRecentPlayersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Presence.Presence.GetFriendsCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.Profile">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadAchievements(System.UInt64,System.UInt32,System.UInt16,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.BeginReadAchievements(System.UInt64,System.UInt32,System.UInt16,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.EndReadAchievements(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadAchievementsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadAchievementsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadSettings(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.BeginReadSettings(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.EndReadSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadSettingsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.ReadSettingsAsync(System.UInt64,System.UInt32,System.UInt16,System.UInt64[],System.UInt32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Profile.Profile.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Profile.Profile.ReadAchievementsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Profile.Profile.ReadSettingsCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.Query">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Add(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginAdd(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndAdd(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.AddAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.AddAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Update(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginUpdate(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndUpdate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginUpdateId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndUpdateId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.UpdateIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Search(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginSearch(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndSearch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.FindFromIds(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginFindFromIds(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndFindFromIds(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.FindFromIdsAsync(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.FindFromIdsAsync(System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.UInt64[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Remove(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginRemove(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndRemove(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginRemoveId(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndRemoveId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.RemoveIdAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.Select(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginSelect(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndSelect(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SelectAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.SelectAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.GetXQSConfig(System.UInt32,System.Byte[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginGetXQSConfig(System.UInt32,System.Byte[],System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndGetXQSConfig(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.GetXQSConfigAsync(System.UInt32,System.Byte[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.GetXQSConfigAsync(System.UInt32,System.Byte[],System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreate(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionCreate(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionCreate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleElimination(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionCreateSingleElimination(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionCreateSingleElimination(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleEliminationAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleEliminationAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.UInt32,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionSearch(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionSearch(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionSearch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionSearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionSearchAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionManageEntrant(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionManageEntrant(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionManageEntrant(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionManageEntrantAsync(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionManageEntrantAsync(System.UInt32,System.Byte[],System.String,System.UInt32,System.String,System.UInt32,System.UInt64,ServerTestFramework.Web.Query.QueryAttribute[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCancel(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionCancel(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionCancel(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCancelAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionCancelAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopology(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionTopology(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionTopology(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologyAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologyAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int64,System.Int64,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleElimination(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.BeginCompetitionTopologySingleElimination(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.EndCompetitionTopologySingleElimination(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleEliminationAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleEliminationAsync(System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,ServerTestFramework.Web.Query.QueryAttributeSpec[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Query.Query.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.AddCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.UpdateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.UpdateIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.SearchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.FindFromIdsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.RemoveCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.RemoveIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.SelectCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.GetXQSConfigCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionCreateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionCreateSingleEliminationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionSearchCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionManageEntrantCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionCancelCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionTopologyCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Query.Query.CompetitionTopologySingleEliminationCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.Signature">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignature(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginVerifySignature(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndVerifySignature(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignatureAsync(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignatureAsync(ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignature(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginCreateSignature(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndCreateSignature(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignatureAsync(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignatureAsync(System.UInt32,System.String,ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicenses(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginTransferUserLicenses(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndTransferUserLicenses(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicensesAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicensesAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigest(System.Byte[],System.Byte,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginBlacklistDigest(System.Byte[],System.Byte,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndBlacklistDigest(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigestAsync(System.Byte[],System.Byte,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigestAsync(System.Byte[],System.Byte,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigest(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.BeginUnBlacklistDigest(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.EndUnBlacklistDigest(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigestAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigestAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.SignatureWidget.Signature.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.VerifySignatureCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.CreateSignatureCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.TransferUserLicensesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.BlacklistDigestCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.SignatureWidget.Signature.UnBlacklistDigestCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.Stats">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLB(System.UInt32,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginDeleteXUIDFromLB(System.UInt32,System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndDeleteXUIDFromLB(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLBAsync(System.UInt32,System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLBAsync(System.UInt32,System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBs(System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginDeleteXUIDFromAllLBs(System.UInt32,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndDeleteXUIDFromAllLBs(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBsAsync(System.UInt32,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBsAsync(System.UInt32,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBList(System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBList(System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBList(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListAsync(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListAsync(System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListByType(System.UInt32,ServerTestFramework.Web.Stats.LBType,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBListByType(System.UInt32,ServerTestFramework.Web.Stats.LBType,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBListByType(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListByTypeAsync(System.UInt32,ServerTestFramework.Web.Stats.LBType)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBListByTypeAsync(System.UInt32,ServerTestFramework.Web.Stats.LBType,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginEnumerateLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndEnumerateLB(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTag(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBNearGamerTag(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBNearGamerTag(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTagAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTagAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTags(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBForGamerTags(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBForGamerTags(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTagsAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTagsAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTags(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetLBDetailsForGamerTags(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetLBDetailsForGamerTags(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTagsAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTagsAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetMLBByXUID(System.UInt32,System.UInt64,System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetMLBByXUID(System.UInt32,System.UInt64,System.UInt32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetMLBByXUID(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetMLBByXUIDAsync(System.UInt32,System.UInt64,System.UInt32[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetMLBByXUIDAsync(System.UInt32,System.UInt64,System.UInt32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginEnumerateTeamLB(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndEnumerateTeamLB(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLBAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamName(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetTeamLBNearTeamName(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetTeamLBNearTeamName(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamNameAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamNameAsync(System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNames(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetTeamLBForTeamNames(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetTeamLBForTeamNames(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNamesAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNamesAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNames(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginGetTeamLBDetailsForTeamNames(System.UInt32,System.UInt32,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndGetTeamLBDetailsForTeamNames(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNamesAsync(System.UInt32,System.UInt32,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNamesAsync(System.UInt32,System.UInt32,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBRaw(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.BeginEnumerateLBRaw(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EndEnumerateLBRaw(System.IAsyncResult,System.UInt32@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBRawAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.EnumerateLBRawAsync(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Stats.Stats.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromLBCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.DeleteXUIDFromAllLBsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBListCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBListByTypeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.EnumerateLBCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBNearGamerTagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBForGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetLBDetailsForGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetMLBByXUIDCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.EnumerateTeamLBCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetTeamLBNearTeamNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetTeamLBForTeamNamesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.GetTeamLBDetailsForTeamNamesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Stats.Stats.EnumerateLBRawCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.Storage">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.GetTitleQuota(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginGetTitleQuota(System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndGetTitleQuota(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.GetTitleQuotaAsync(System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.GetTitleQuotaAsync(System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadUserFile(System.UInt32,System.Byte[],System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginReadUserFile(System.UInt32,System.Byte[],System.String,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndReadUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadTitleFile(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginReadTitleFile(System.UInt32,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndReadTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadTitleFileAsync(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.ReadTitleFileAsync(System.UInt32,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteUserFile(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginWriteUserFile(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndWriteUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteTitleFile(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginWriteTitleFile(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndWriteTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteTitleFileAsync(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.WriteTitleFileAsync(System.UInt32,System.String,ServerTestFramework.Web.Storage.FileContentTypeEnum,System.Byte[],System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteUserFile(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginDeleteUserFile(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndDeleteUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteTitleFile(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginDeleteTitleFile(System.UInt32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndDeleteTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteTitleFileAsync(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.DeleteTitleFileAsync(System.UInt32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeTitleFile(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginRevokeTitleFile(System.UInt32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndRevokeTitleFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeTitleFileAsync(System.UInt32,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeTitleFileAsync(System.UInt32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeUserFile(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginRevokeUserFile(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndRevokeUserFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeUserFileAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.RevokeUserFileAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFiles(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.BeginEnumerateTitleFiles(System.UInt32,System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EndEnumerateTitleFiles(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFilesAsync(System.UInt32,System.String,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFilesAsync(System.UInt32,System.String,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Storage.Storage.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.GetTitleQuotaCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.ReadUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.ReadTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.WriteUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.WriteTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.DeleteUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.DeleteTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.RevokeTitleFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.RevokeUserFileCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Storage.Storage.EnumerateTitleFilesCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.Teams">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CreateTeam(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginCreateTeam(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndCreateTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CreateTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CreateTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.UInt32,System.String,System.String,System.String,System.Byte[],System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.DeleteTeam(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginDeleteTeam(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndDeleteTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.DeleteTeamAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.DeleteTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RemoveTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginRemoveTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndRemoveTeamMember(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RemoveTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RemoveTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeam(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginManageTeam(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndManageTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginManageTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndManageTeamMember(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.ManageTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RecruitTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginRecruitTeamMember(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndRecruitTeamMember(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RecruitTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.RecruitTeamMemberAsync(System.UInt32,System.Byte[],System.String,System.String,System.String,System.UInt32,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.JoinTeam(System.UInt32,System.Byte[],System.String,System.String,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginJoinTeam(System.UInt32,System.Byte[],System.String,System.String,System.Byte,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndJoinTeam(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.JoinTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.JoinTeamAsync(System.UInt32,System.Byte[],System.String,System.String,System.Byte,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamInfo(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginGetTeamInfo(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndGetTeamInfo(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamInfoAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamInfoAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamMembers(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.BeginGetTeamMembers(System.UInt32,System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.EndGetTeamMembers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamMembersAsync(System.UInt32,System.Byte[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.GetTeamMembersAsync(System.UInt32,System.Byte[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.Teams.Teams.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.CreateTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.DeleteTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.RemoveTeamMemberCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.ManageTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.ManageTeamMemberCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.RecruitTeamMemberCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.JoinTeamCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.GetTeamInfoCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.Teams.Teams.GetTeamMembersCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.UserAccount">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkUser(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginLinkUser(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndLinkUser(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkUserAsync(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkUserAsync(System.Byte[],System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTags(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginLinkedGamerTags(System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndLinkedGamerTags(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTagsAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTagsAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettings(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginGetUserSettings(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndGetUserSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettingsAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettingsAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharing(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginSetInfoSharing(System.Byte[],System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndSetInfoSharing(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharingAsync(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharingAsync(System.Byte[],System.String,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatus(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginGetAccountStatus(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndGetAccountStatus(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatusAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatusAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorization(System.UInt32,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginGetUserAuthorization(System.UInt32,System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndGetUserAuthorization(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorizationAsync(System.UInt32,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorizationAsync(System.UInt32,System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccount(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.BeginCreateWholesaleAccount(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.EndCreateWholesaleAccount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccountAsync(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccountAsync(ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.Web.UserAccount.UserAccount.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.LinkUserCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.LinkedGamerTagsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.GetUserSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.SetInfoSharingCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.GetAccountStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.GetUserAuthorizationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.Web.UserAccount.UserAccount.CreateWholesaleAccountCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.TeamInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.description">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.motto">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.URL">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.created">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.numMembers">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamInfo.data">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.TeamMember">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.gamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.member">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.data">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.TeamMember.joined">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.CreateTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.DeleteTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.RemoveTeamMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.ManageTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.ManageTeamMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.RecruitTeamMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.JoinTeamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.GetTeamInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamMembersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Teams.GetTeamMembersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Teams.GetTeamMembersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.AddSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AddSubscriptions.liveSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AddSubscriptions.contentSubscriptions">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.AlertSubscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AlertSubscription.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.AlertSubscription.locale">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ContentSubscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ContentSubscription.subscriptionID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ContentSubscription.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ContentSubscription.locale">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.LiveSubscription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.subscriptionID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.LiveSubscription.locale">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ExistingSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ExistingSubscriptions.liveSubscriptions">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ExistingSubscriptions.contentSubscriptions">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscriberExistsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscriberExistsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.SubscriberExistsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscribeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.SubscribeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.SubscribeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.UnsubscribeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.UnsubscribeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.UnsubscribeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.EnumerateSubscriptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.EnumerateSubscriptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.EnumerateSubscriptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ScheduleContentAlertCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Alert.ScheduleContentAlertCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Alert.ScheduleContentAlertCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.Rating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.DefaultLocale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.TitlePrivilegeInfo.LocalizedName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.TitlePrivilege">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.None">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.ReadOnly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.ReadWrite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.TitlePrivilege.FullControl">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.ESRBRating">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.ALL">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.ADULT">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.MATURE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.TEEN">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.EVERYONE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.KIDS_TO_ADULTS">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.EARLY_CHILDHOOD">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.GeneralInfo.ESRBRating.UNSPECIFIED">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LocalizedDisplayName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LocalizedDisplayName.Locale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LocalizedDisplayName.DisplayName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LinkInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LinkInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LinkInfo.Owner">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.GetTitleListCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LinkedGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.GeneralInfo.LinkedGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.GeneralInfo.LinkedGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkInfo.Owner">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.userPuidHigh">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.userPuidLow">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.gamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountResponse.password">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.PhoneInfo.phonePrefix">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.PhoneInfo.phoneNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.PhoneInfo.phoneExtension">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.street1">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.street2">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.city">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.district">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.state">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.AddressInfo.postalCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.firstName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.lastName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.addressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.phoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.email">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.countryId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.languageId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.birthdate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.memberName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.externalReferenceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountRequest.reservedBytes">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.UserAuthorization">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.acceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.isVoiceBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.isSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAuthorization.services">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.UserAccountStatus">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.acceptMSInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.acceptPartnerInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.forceNameChange">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.voiceBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.voiceBannedUntil">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.nicknameBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.accountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.UserAccountStatus.accountSuspendedUntil">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkedGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.LinkedGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.LinkedGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.GetUserSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.SetInfoSharingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.SetInfoSharingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.SetInfoSharingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetAccountStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetAccountStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.GetAccountStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserAuthorizationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.GetUserAuthorizationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.GetUserAuthorizationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.UserAccount.CreateWholesaleAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCRecipientResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCRecipientResult.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCRecipientResult.MessageID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageSummary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.Sender">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.SenderContext">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.SentTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.MessageID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.MessageFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.SenderTitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.ExpireMinutes">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.DetailsSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageSummary.MessageType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Required">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Recommended">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.HasVoice">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.HasText">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Read">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.NonExportable">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TeamContext">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.CompContext">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.AlternateTitle">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.Marketing">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved0">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved1">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved2">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved3">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved4">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved5">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved6">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved7">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved8">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved9">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved10">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved11">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved12">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.MSReserved13">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved0">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved1">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved2">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved3">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved4">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved5">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageFlags.TitleReserved6">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.Invalid">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.TitleCustom">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.FriendRequest">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.GameInvite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.TeamRecruit">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.CompReminder">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.CompRequest">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.LiveMessage">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.PersonalMessage">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.VideoMessage">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.QuickChatInvite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.VideoChatInvite">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCMessageType.PartyChatInvite">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCUserTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCUserTitle.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCUserTitle.LastLogonTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCUserTitle.Flags">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCUserTitleFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCUserTitleFlags.AcceptMarketing">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.SenderContext">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.SentTime">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.Region">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.MessageID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.MessageFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.ExpireMinutes">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.DetailsSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.MessageType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.SenderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTitleWideMessageSummary.Description">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCLanguageString">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLanguageString.Locale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLanguageString.String">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCLocalizedString">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLocalizedString.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLocalizedString.DefaultLocale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCLocalizedString.LangString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageAttachment">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageAttachment.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageAttachment.Flags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageAttachment.Data">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCAttachFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCAttachFlags.NonExportable">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCAttachFlags.Directory">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCStringIdProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringIdProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringIdProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCBoolProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBoolProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBoolProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCAttachmentProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.AttachSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.AttachFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCAttachmentProp.AttachUrl">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCBinaryProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBinaryProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCBinaryProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCTimeProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTimeProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCTimeProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCStringProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCStringProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCQwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCQwordProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCQwordProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCDwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCDwordProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCDwordProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCWordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCWordProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCWordProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCByteProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCByteProp.PropID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCByteProp.Value">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCNullProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCNullProp.PropID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCMessageDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.NullProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.ByteProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.WordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.DwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.QwordProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.StringProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.TimeProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.BinaryProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.AttachmentProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.BoolProp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.WCMessageDetails.StringIdProp">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCDeleteSysMsgFlags.RevokeAll">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.WCDeleteMsgFlags">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Messaging.WCDeleteMsgFlags.BlockSender">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageStringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageStringCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageStringCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeTitleUserMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeTitleUserMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.RevokeTitleUserMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleUserMessageCompletedEventArgs.RecipResult">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs.Delay">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendTitleWideMessageCompletedEventArgs.MessageID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteTitleWideMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteTitleWideMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.DeleteTitleWideMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetTitleWideMessageDetailsCompletedEventArgs.Details">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumTitleWideMessagesCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SetMessageFlagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SetMessageFlagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SetMessageFlagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumUserTitlesCompletedEventArgs.Title">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteUserTitleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteUserTitleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.DeleteUserTitleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.RevokeMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.RevokeMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.SendMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.SendMessageCompletedEventArgs.RecipResult">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.DeleteMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.DeleteMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.GetMessageDetailsCompletedEventArgs.Details">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Messaging.EnumMessagesCompletedEventArgs.Summary">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.PresenceInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.XUID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.OnlineState">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.LastSeenTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.MinutesSinceStateChange">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.PresenceInfo.RichPresenceString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.OfflineFriend">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OfflineFriend.G">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.OnlineFriend">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OnlineFriend.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OnlineFriend.T">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.OnlineFriend.S">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.FriendsInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendsInfo.OnlineFriends">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendsInfo.OfflineFriends">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.RecentPlayer">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.UserLivepuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.Gamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GamerTileUrl">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.ReputationBucket">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GamerScore">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GamerZone">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GameTitleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.LastMetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.RecentPlayer.GameTitleTileUrl">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GamercardZones">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Unknown">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.None">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Xbox_1">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.RR">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Pro">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Family">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.GamercardZones.Underground">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.RecentPlayerStatus">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.RecentPlayerStatus.Neutral">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.RecentPlayerStatus.Preferred">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Presence.RecentPlayerStatus.Avoided">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.FriendEx">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.XUID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.FriendStatus">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.OnlineState">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.LastSeenTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.MinutesSinceStateChange">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.FriendEx.RichPresenceString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetGamertagsFromXUIDSCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetGamertagsFromXUIDSCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetGamertagsFromXUIDSCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetXUIDSFromGamertagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetXUIDSFromGamertagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetXUIDSFromGamertagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetPresenceInfoCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsExCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetRecentPlayersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetRecentPlayersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetRecentPlayersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Presence.GetFriendsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Presence.GetFriendsCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.wcAchievement">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.uiAchievementId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.dtAchieved">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.nFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.byType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.nCred">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.nImageId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.szTitle">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.szDescription">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.wcAchievement.szHowTo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.UserSetting">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.ulUserId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.uiSettingId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.UserSetting.status">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadProfileStatus">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.SUCCESS_TITLE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.SUCCESS_DEFAULT">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.WARNING_NO_VALUE">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.ERROR_NO_PERMISSION">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Profile.ReadProfileStatus.ERROR_PUID_INVALID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadAchievementsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadAchievementsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.ReadAchievementsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Profile.ReadSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Profile.ReadSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.QueryAttribute">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.WireData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttribute.Value">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttribute.Id">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.XRLObject2">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.FindFromIdsResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsResponse.returnedResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsResponse.attribCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsResponse.attribs">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SearchResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.totalResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.returnedResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.attribCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchResponse.attribs">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.QueryAttributeSpec">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttributeSpec.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.QueryAttributeSpec.len">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.AddCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.AddCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.AddCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.UpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.UpdateIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SearchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SearchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.SearchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.FindFromIdsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.FindFromIdsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.FindFromIdsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.RemoveCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.RemoveIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.SelectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.GetXQSConfigCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.GetXQSConfigCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.GetXQSConfigCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionCreateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateSingleEliminationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCreateSingleEliminationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionCreateSingleEliminationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionSearchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionSearchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionSearchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionManageEntrantCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionCancelCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologyCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologyCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionTopologyCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologySingleEliminationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Query.CompetitionTopologySingleEliminationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Query.CompetitionTopologySingleEliminationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest._digest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigVerifySignatureRequest._signature">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureResponse">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureResponse._hresult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureResponse._signature">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.XSigCreateSignatureRequest._digest">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.VerifySignatureCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.VerifySignatureCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.VerifySignatureCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.CreateSignatureCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.CreateSignatureCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.SignatureWidget.CreateSignatureCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.TransferUserLicensesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.BlacklistDigestCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.SignatureWidget.UnBlacklistDigestCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDStatus">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Success">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Warning_No_OP">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Error_Invalid_Xuid">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Error_Invalid_Title">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.DeleteXUIDStatus.Error_Invalid_Lb_ID">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.LBID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.ResetType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.LocalizedLBName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBInfo.AttributeInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBResetType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Never">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Weekly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Monthly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Bimonthly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Quarterly">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Semiannually">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBResetType.Annually">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.StatsLocalizedName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.StatsLocalizedName.Locale">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.StatsLocalizedName.DisplayName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.RawLBAttribute">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBAttribute.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBAttribute.V">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.RawLBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBEntry.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBEntry.R">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBEntry.A">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.RawLBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBResults.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.RawLBResults.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedMLBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.LBID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.R">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.F">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBEntry.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBEntryAttribute">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntryAttribute.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntryAttribute.V">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedMLBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedMLBResults.G">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntry.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBEntry.R">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBResults.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBResults.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedLBEntry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBEntry.G">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBEntry.R">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBEntry.F">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DetailedLBResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBResults.Entries">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBResults.LBLastResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DetailedLBResults.TotalLBEntries">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBAttributeInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBAttributeInfo.ID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBAttributeInfo.Unit">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.LBAttributeInfo.LocalizedAttrName">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.AttributeUnit">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Integer">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Float">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Percent">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.GamerTag">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.TimeStamp">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.MilliSeconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.TenMilliSeconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.HundredMilliSeconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Seconds">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Minutes">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Hours">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Days">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.String">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.Team">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.AttributeUnit.MaxAttributeUnit">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.LBType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.Regular">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.RegularTeam">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.CompetitionTemplate">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Stats.LBType.CompetitionTemplateTeam">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromLBCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromLBCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DeleteXUIDFromLBCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromAllLBsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.DeleteXUIDFromAllLBsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.DeleteXUIDFromAllLBsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBListByTypeCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBNearGamerTagCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBForGamerTagsCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetLBDetailsForGamerTagsCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetMLBByXUIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetMLBByXUIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetMLBByXUIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateTeamLBCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBNearTeamNameCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBForTeamNamesCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.GetTeamLBDetailsForTeamNamesCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Stats.EnumerateLBRawCompletedEventArgs.ValidSeconds">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.QuotaInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.MaxFileSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalBytesMax">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalBytesUsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalFilesMax">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.QuotaInfo.TotalFilesUsed">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.FileEnumerationInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.TitleVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.UserCountryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.FileSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.FileName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.FileEnumerationInfo.FileContentType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.FileContentTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Storage.FileContentTypeEnum.Package">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.Web.Storage.FileContentTypeEnum.Blob">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadFileInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileNotModified">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.TitleID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.TitleVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.GamerTag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.UserCountryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.CreationDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileData">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadFileInfo.FileContentType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.GetTitleQuotaCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.GetTitleQuotaCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.GetTitleQuotaCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadUserFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadUserFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.ReadTitleFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.ReadTitleFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.WriteUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.WriteTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.DeleteUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.DeleteTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.RevokeTitleFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.RevokeUserFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.EnumerateTitleFilesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.Web.Storage.EnumerateTitleFilesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.Web.Storage.EnumerateTitleFilesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.CXSuppApi">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTag(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByGamerTag(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByGamerTag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTagAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTagAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuid(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByUserPuid(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByUserPuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuidAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuidAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleId(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByConsoleId(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByConsoleId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleIdAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleIdAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuid(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginConsoleApplicationsGetByMachinePuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndConsoleApplicationsGetByMachinePuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPuidFromXName(System.String,System.UInt64@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetPuidFromXName(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetPuidFromXName(System.IAsyncResult,System.UInt64@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPuidFromXNameAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPuidFromXNameAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccount(System.UInt64,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetAccount(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetAccount(System.IAsyncResult,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.modifyAccount(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginmodifyAccount(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndmodifyAccount(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.modifyAccountAsync(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.modifyAccountAsync(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.banAccount(System.UInt64,System.Boolean,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginbanAccount(System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndbanAccount(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.banAccountAsync(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.banAccountAsync(System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getRelatedAccounts(System.UInt64,System.UInt64[]@,System.String[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetRelatedAccounts(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetRelatedAccounts(System.IAsyncResult,System.UInt64[]@,System.String[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getRelatedAccountsAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getRelatedAccountsAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatus(System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.UInt64@,System.String@,System.DateTime@,System.UInt64@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetSubscriptionCodeStatus(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetSubscriptionCodeStatus(System.IAsyncResult,System.Boolean@,System.Boolean@,System.Boolean@,System.UInt64@,System.String@,System.DateTime@,System.UInt64@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatusAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatusAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountEx(System.UInt64,System.UInt64@,System.DateTime@,System.Int32@,System.DateTime@,System.Int32@,System.Boolean@,System.DateTime@,System.Byte@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetAccountEx(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetAccountEx(System.IAsyncResult,System.UInt64@,System.DateTime@,System.Int32@,System.DateTime@,System.Int32@,System.Boolean@,System.DateTime@,System.Byte@,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountExAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getAccountExAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPassportMemberName(System.UInt64,System.String@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetPassportMemberName(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetPassportMemberName(System.IAsyncResult,System.String@,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPassportMemberNameAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getPassportMemberNameAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPicture(System.UInt64,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginRemoveGamerPicture(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndRemoveGamerPicture(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPictureAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPictureAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserMotto(System.UInt64,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetUserMotto(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetUserMotto(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserMottoAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserMottoAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItems(System.UInt64,ServerTestFramework.CUST.ProfileItem[],System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetUserProfileItems(System.UInt64,ServerTestFramework.CUST.ProfileItem[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetUserProfileItems(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItemsAsync(System.UInt64,ServerTestFramework.CUST.ProfileItem[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItemsAsync(System.UInt64,ServerTestFramework.CUST.ProfileItem[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCount(System.UInt64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginIncrementMaximumLicenseCount(System.UInt64,System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndIncrementMaximumLicenseCount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCountAsync(System.UInt64,System.Guid)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCountAsync(System.UInt64,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXName(System.String,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGetXMLFromXName(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGetXMLFromXName(System.IAsyncResult,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXNameAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXNameAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserWLID(System.UInt64,System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSwapUserWLID(System.UInt64,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSwapUserWLID(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserWLIDAsync(System.UInt64,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserWLIDAsync(System.UInt64,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLID(System.UInt64,System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSwapOwnerWLID(System.UInt64,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSwapOwnerWLID(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLIDAsync(System.UInt64,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLIDAsync(System.UInt64,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirth(System.UInt64,System.DateTime,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSwapUserDateOfBirth(System.UInt64,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSwapUserDateOfBirth(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirthAsync(System.UInt64,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirthAsync(System.UInt64,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuid(System.UInt64,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginFamilyHistoryGetByPuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndFamilyHistoryGetByPuid(System.IAsyncResult,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertag(System.String,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginFamilyHistoryGetByGamertag(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndFamilyHistoryGetByGamertag(System.IAsyncResult,ServerTestFramework.CUST.FamilyHistoryDetail[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertagAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertagAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuid(System.UInt64,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGetFamilyMembersByPuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGetFamilyMembersByPuid(System.IAsyncResult,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertag(System.String,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGetFamilyMembersByGamertag(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGetFamilyMembersByGamertag(System.IAsyncResult,ServerTestFramework.CUST.FamilyMember[]@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertagAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertagAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleId(System.UInt64,System.String,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BegingetMachineAccountByConsoleId(System.UInt64,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndgetMachineAccountByConsoleId(System.IAsyncResult,System.Boolean@,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleIdAsync(System.UInt64,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleIdAsync(System.UInt64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBanned(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginIsMachinePuidBanned(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndIsMachinePuidBanned(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBannedAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBannedAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCode(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginLookupMachineAccountByConsoleIdAndSCode(System.String,System.Byte[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndLookupMachineAccountByConsoleIdAndSCode(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCodeAsync(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCodeAsync(System.String,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuid(System.String,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginLookupMachineAccountByConsoleIdAndXuid(System.String,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndLookupMachineAccountByConsoleIdAndXuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuidAsync(System.String,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuidAsync(System.String,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleId(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginMachineHistoryGetByConsoleId(System.String,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndMachineHistoryGetByConsoleId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleIdAsync(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleIdAsync(System.String,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginMachineHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndMachineHistoryGetByPuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuid(System.UInt64,System.UInt64,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetFamilyGoldSeatExemptionByPuid(System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetFamilyGoldSeatExemptionByPuid(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuidAsync(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuidAsync(System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertag(System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetFamilyGoldSeatExemptionByGamertag(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetFamilyGoldSeatExemptionByGamertag(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertagAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertagAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligible(System.UInt64,System.Boolean,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginSetFreeGamertagEligible(System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndSetFreeGamertagEligible(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligibleAsync(System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligibleAsync(System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGet(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginGamertagHistoryGet(System.String,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndGamertagHistoryGet(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGetAsync(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGetAsync(System.String,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertag(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginUserHistoryGetByGamertag(System.String,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndUserHistoryGetByGamertag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertagAsync(System.String,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertagAsync(System.String,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.BeginUserHistoryGetByPuid(System.UInt64,System.Nullable{System.DateTime},System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.EndUserHistoryGetByPuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime})">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuidAsync(System.UInt64,System.Nullable{System.DateTime},System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.CUST.CXSuppApi.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByGamerTagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByUserPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByConsoleIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.ConsoleApplicationsGetByMachinePuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getPuidFromXNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.modifyAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.banAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getRelatedAccountsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getSubscriptionCodeStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getAccountExCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getPassportMemberNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.RemoveGamerPictureCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetUserMottoCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetUserProfileItemsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.IncrementMaximumLicenseCountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GetXMLFromXNameCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SwapUserWLIDCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SwapOwnerWLIDCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SwapUserDateOfBirthCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.FamilyHistoryGetByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GetFamilyMembersByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.getMachineAccountByConsoleIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.IsMachinePuidBannedCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndSCodeCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.LookupMachineAccountByConsoleIdAndXuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByConsoleIdCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.MachineHistoryGetByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByPuidCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetFamilyGoldSeatExemptionByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.SetFreeGamertagEligibleCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.GamertagHistoryGetCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.CUST.CXSuppApi.UserHistoryGetByPuidCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplications">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplications.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplications.ConsoleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplications.ApplicationGroups">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationGroup">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.SystemOnlineManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.SystemManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.FlashVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.GroupId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationGroup.Applications">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.FileName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.FriendlyName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.AppVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationDetail.Online">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistory">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistory.UserPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistory.UserHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistory.MachineHistoryDetail">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.Timestamp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.UserPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.IpAddress">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.Reason">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryDetail.Detail">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.UserPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.FirstSeen">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.LastSeen">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.DaysSeen">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryDetail.IpAddress">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.ConsoleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.SecondaryIdentifier">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.ResetDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.CreateDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.FlashVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.FlashDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.ConsoleRegion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.UpdateVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineInfo.UpdateDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistory">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.MachinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.UserHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.MachineHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistory.MachineConsoleInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyMember">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyMember.userPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyMember.userFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyMember.gamertag">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.ownerPassportPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.ownerGamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.dependentPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.dependentGamertag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.machinePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.ipAddress">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.timestamp">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.hr">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryDetail.reason">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ProfileItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ProfileItem.profileItem">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ProfileItem.profileItemValue">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ProfileItem.titleId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByGamerTagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByGamerTagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByGamerTagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByUserPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByUserPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByUserPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByConsoleIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByConsoleIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByConsoleIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByMachinePuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.ConsoleApplicationsGetByMachinePuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.ConsoleApplicationsGetByMachinePuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPuidFromXNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs.puid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPuidFromXNameCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isAccountOwner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isActive">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isLockedOut">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isVoiceBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isNicknameBanned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.mustChangeXName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.isGeofenceExempt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.modifyAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.modifyAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.modifyAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.modifyAccountCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.banAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.banAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.banAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.banAccountCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getRelatedAccountsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.relatedAccounts">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.relatedAccountNames">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getRelatedAccountsCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.bValidSubscriptionCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.bUsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.bUsedMaxTimes">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.ulLastUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.szLastUser">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.ftLastUsage">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.ulOfferID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.szOffer">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getSubscriptionCodeStatusCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountExCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getAccountExCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.biOwnerPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.dtAccountResumeDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.iSuspensionLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.dtVoiceResumeDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.iVoiceBanLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.bMustChangeXName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.dtAcceptedTOS">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.tiCountryID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.isGeoFenceExempt">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getAccountExCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPassportMemberNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.userPmn">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.parentPmn">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getPassportMemberNameCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.RemoveGamerPictureCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserMottoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserMottoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserMottoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserMottoCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetUserProfileItemsCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IncrementMaximumLicenseCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IncrementMaximumLicenseCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.IncrementMaximumLicenseCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs.userXML">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetXMLFromXNameCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserWLIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserWLIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserWLIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserWLIDCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapOwnerWLIDCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SwapUserDateOfBirthCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs.details">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByPuidCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs.details">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.FamilyHistoryGetByGamertagCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs.familyMembers">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByPuidCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs.familyMembers">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GetFamilyMembersByGamertagCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs.isLockedOut">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.getMachineAccountByConsoleIdCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IsMachinePuidBannedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.IsMachinePuidBannedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.IsMachinePuidBannedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndSCodeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndSCodeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndSCodeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndXuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndXuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.LookupMachineAccountByConsoleIdAndXuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByConsoleIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByConsoleIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryGetByConsoleIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineHistoryGetByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.MachineHistoryGetByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByPuidCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFamilyGoldSeatExemptionByGamertagCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.SetFreeGamertagEligibleCompletedEventArgs.errorString">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GamertagHistoryGetCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.GamertagHistoryGetCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.GamertagHistoryGetCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryGetByGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByPuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.UserHistoryGetByPuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.CUST.UserHistoryGetByPuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.CUST.AccountInfo">
            <summary>
            Summary description for SvcProviderWrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.CUST.AccountInfoEx">
            <summary>
            Summary description for SvcProviderWrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.CUST.MachineAccountInfo">
            <summary>
            Summary description for SvcProviderWrapper.
            </summary>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginAddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndAddCreditCard(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalance(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginGetPointsBalance(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndGetPointsBalance(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalanceAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalanceAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignIn">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginSignIn(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndSignIn(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignInAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignInAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstruments(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginGetPaymentInstruments(System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndGetPaymentInstruments(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorization(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginGetUserAuthorization(System.Int32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndGetUserAuthorization(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorizationAsync(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorizationAsync(System.Int32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.AddCreditCardCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPointsBalanceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.SignInCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetPaymentInstrumentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.GetUserAuthorizationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService.SvcProvider.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardResults.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SessionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionInfo.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionInfo.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.OfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.HasLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionInfo.RenewalOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.Services">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountInfo.IsLightweight">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorInfo.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationInfo.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.PayerEmail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.BillingAgreementId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.FirstName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.LastName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.MiddleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.PayerBusiness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.PayerCountry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.BillingAgreementDetails.BillingAgreementDescription">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PayPalPayinInfo.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.ExternalReferenceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.WholesalePartner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.WholesaleInfo.EncryptedPassword">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.BankCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.BranchCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.DirectDebitInfo.CheckDigits">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.CardType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.CcvNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.CreditCardInfo.ExpirationDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo.PhonePrefix">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PhoneInfo.PhoneExtension">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.Street1">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.Street2">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.City">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.District">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.State">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddressInfo.PostalCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PaymentInstrumentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.PaymentInstrumentInfo.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentResults.PaymentInstrumentInfos">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails.SessionKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SessionDetails.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.XboxOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.MusicNetSku">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SubscriptionDetails.RenewalXboxOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AccountDetails.IsLightweight">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.SubscriptionLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.ErrorDetails.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInResults.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults.AboveLowBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceResults.DmpAccountStatus">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.AddCreditCardCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPointsBalanceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SignInCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.SignInCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.SignInCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetPaymentInstrumentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.GetUserAuthorizationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfService(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginAcceptTermsOfService(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndAcceptTermsOfService(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfServiceAsync(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfServiceAsync(System.UInt64,System.Byte[],ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginAddCreditCard(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndAddCreditCard(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCardAsync(System.UInt64,System.UInt64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalance(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetPointsBalance(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetPointsBalance(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalanceAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalanceAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignIn">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginSignIn(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndSignIn(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignInAsync">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignInAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccount(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginCreateMobileAccount(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndCreateMobileAccount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccountAsync(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccountAsync(System.UInt64,System.Byte[],System.UInt64,System.String,System.Byte,System.UInt16,System.DateTime,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertag(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGenerateGamertag(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGenerateGamertag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertagAsync(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertagAsync(System.String,System.UInt64,ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstruments(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetPaymentInstruments(System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetPaymentInstruments(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstrumentsAsync(System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountries(System.Byte,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetSupportedCountries(System.Byte,System.Byte,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetSupportedCountries(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountriesAsync(System.Byte,System.Byte)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountriesAsync(System.Byte,System.Byte,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorization(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginGetUserAuthorization(System.Int32,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndGetUserAuthorization(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorizationAsync(System.Int32,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorizationAsync(System.Int32,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuid(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.BeginConsoleApplicationsGetByMachinePuid(System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.EndConsoleApplicationsGetByMachinePuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuidAsync(System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AcceptTermsOfServiceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.AddCreditCardCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPointsBalanceCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.SignInCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.CreateMobileAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GenerateGamertagCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetPaymentInstrumentsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetSupportedCountriesCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.GetUserAuthorizationCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.UserAccount.WebService2.UserAccount.ConsoleApplicationsGetByMachinePuidCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum.Unknown">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum.XboxLive">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.ServiceTypeEnum.Zune">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardResults.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.FileName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.FriendlyName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.AppVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationDetail.Online">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.Name">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.SystemOnlineManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.SystemManifestRevision">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.FlashVersion">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.GroupId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationGroup.Applications">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplications">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplications.ConsoleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplications.ApplicationGroups">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SessionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionInfo.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionInfo.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.OfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.HasLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionInfo.RenewalOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.Services">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.IsLightweight">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.CultureId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountInfo.ParentalControlGroupId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorInfo.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationInfo.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.CountryId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.User">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.Billing">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.AllowDirectDebit">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.AllowPayPal">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CountryInfo.RequireCCAgeVerification">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.PayerEmail">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.BillingAgreementId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.FirstName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.LastName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.MiddleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.PayerBusiness">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.PayerCountry">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.BillingAgreementDetails.BillingAgreementDescription">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PayPalPayinInfo.BillingAgreementDetails">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.ExternalReferenceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.WholesalePartner">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.WholesaleInfo.EncryptedPassword">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.BankCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.BranchCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.DirectDebitInfo.CheckDigits">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.CardType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.AccountHolderName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.AccountNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.CcvNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.CreditCardInfo.ExpirationDate">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo.PhonePrefix">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PhoneInfo.PhoneExtension">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.Street1">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.Street2">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.City">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.District">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.State">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddressInfo.PostalCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PaymentInstrumentId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PaymentInstrumentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.AddressInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PhoneInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.CreditCardInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.DirectDebitInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.WholesaleInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.PaymentInstrumentInfo.PayPalPayinInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentResults.PaymentInstrumentInfos">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails.SessionKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails.MusicNetAuthToken">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SessionDetails.GeoCountryCode">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.XboxOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.BillingInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.Status">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.HasBillingViolation">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.HasPendingCancel">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.MusicNetSku">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.StartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.EndDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SubscriptionDetails.RenewalXboxOfferId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.XboxPuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.LivePuid">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.Tag">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.PostalCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.CountryCode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.ParentallyControlled">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.Privileges">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AccountDetails.IsLightweight">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.HResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.Message">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.TagChangeRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.AcceptedTermsOfService">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.AccountSuspended">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.SubscriptionLapsed">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ErrorDetails.BillingUnavailable">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.ErrorInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.AccountInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInResults.SessionInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults.PointsBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults.AboveLowBalance">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceResults.DmpAccountStatus">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType.NounAdjectiveSuggestion">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.UserAccount.WebService2.GamertagSuggestionType.SeedSuggestion">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AcceptTermsOfServiceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.AddCreditCardCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPointsBalanceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SignInCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.SignInCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.SignInCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.CreateMobileAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GenerateGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GenerateGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GenerateGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetPaymentInstrumentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetSupportedCountriesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetSupportedCountriesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetSupportedCountriesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.GetUserAuthorizationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationsGetByMachinePuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationsGetByMachinePuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.UserAccount.WebService2.ConsoleApplicationsGetByMachinePuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.Billing">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffers(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginPurchaseMediaOffers(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndPurchaseMediaOffers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffersAsync(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffersAsync(System.UInt64,System.UInt64,System.String[],System.Int32[],System.UInt32[],ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatus(System.UInt64,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginGetPurchaseStatus(System.UInt64,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndGetPurchaseStatus(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatusAsync(System.UInt64,System.String[])">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatusAsync(System.UInt64,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrls(System.String[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginFindMediaInstanceUrls(System.String[],System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndFindMediaInstanceUrls(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrlsAsync(System.String[],System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrlsAsync(System.String[],System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyToken(System.UInt64,System.UInt64,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginVerifyToken(System.UInt64,System.UInt64,System.String,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndVerifyToken(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyTokenAsync(System.UInt64,System.UInt64,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyTokenAsync(System.UInt64,System.UInt64,System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscription(System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginCancelSubscription(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndCancelSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscriptionAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscriptionAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerate(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginGamertagEnumerate(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndGamertagEnumerate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerateAsync(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerateAsync(System.UInt64,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.UInt32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerate(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginSubscriptionEnumerate(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndSubscriptionEnumerate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerateAsync(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerateAsync(System.UInt64,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOffer(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginPurchaseBillingOffer(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndPurchaseBillingOffer(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOfferAsync(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOfferAsync(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertag(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.BeginPurchaseGamertag(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.EndPurchaseGamertag(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertagAsync(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertagAsync(System.UInt64,System.UInt64,System.Guid,ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseMediaOffersCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.GetPurchaseStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.FindMediaInstanceUrlsCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.VerifyTokenCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.CancelSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.GamertagEnumerateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.SubscriptionEnumerateCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseBillingOfferCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.WebService2.Billing.PurchaseGamertagCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.CreditCard">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Token">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Points">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Wholesale">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.Untrusted">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.All">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PaymentTypeEnum.NoTokens">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatus">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatus.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatus.status">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.OfferIdNotFound">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.TransactionPending">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.TransactionSuccessful">
            <remarks/>
        </member>
        <member name="F:ServerTestFramework.LiveService.Billing.WebService2.PurchaseStatusEnum.TransactionFailed">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.PaymentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.TaxType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.WholePrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.FractionalPrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PriceInfo.PriceText">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.OfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.OfferName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.OfferType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.RelationType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.ConvertMode">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.InstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TitleId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TitleCategory">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TitleName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.GameRating">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.Duration">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.Frequency">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TierProvided">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.TierRequired">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.SellText">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.RelatedOfferId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.ResponseFlags">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.SubscriptionStatusId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionInfo.Price">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateResults.SubscriptionInfos">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateResults.OffersTotal">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.XboxOfferInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.XboxOfferInfo.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.XboxOfferInfo.offerTypeId">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo.offerId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo.mediaId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.EmsOfferInfo.mediaType">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenResults">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenResults.emsOfferInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenResults.xboxOfferInfo">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.WireData">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.paymentType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.taxType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.wholePrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.fractionalPrice">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.priceTextLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.OfferPrice.priceText">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.XRLObject2">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerID">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerNameLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerName">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.offerType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.sellTextLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.sellText">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.maxStartDate">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.pricesLength">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagContentInfo.prices">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult.offersReturned">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult.infos">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateResult.offersTotal">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl.type">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl.length">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TypedMediaUrl.url">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.mediaId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.mediaInstanceId">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.packageSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.installSize">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.symKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.pubKey">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.packageType">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.fileCount">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.MediaInstanceUrl.urls">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseMediaOffersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GetPurchaseStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GetPurchaseStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GetPurchaseStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.FindMediaInstanceUrlsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.FindMediaInstanceUrlsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.FindMediaInstanceUrlsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.VerifyTokenCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.CancelSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.GamertagEnumerateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.SubscriptionEnumerateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseBillingOfferCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseGamertagCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.WebService2.PurchaseGamertagCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.WebService2.PurchaseGamertagCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.History">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnection(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.BeginTestConnection(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.EndTestConnection(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnectionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnectionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.Execute(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.BeginExecute(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.EndExecute(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.ExecuteAsync(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.ExecuteAsync(System.String,System.String[],System.String[],System.Int32,System.Int32,System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.Query(System.String,System.String[],System.String[],System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.BeginQuery(System.String,System.String[],System.String[],System.UInt64,System.UInt64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.EndQuery(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.QueryAsync(System.String,System.String[],System.String[],System.UInt64,System.UInt64)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.QueryAsync(System.String,System.String[],System.String[],System.UInt64,System.UInt64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.Billing.History.WebService.History.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.History.WebService.History.TestConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.History.WebService.History.ExecuteCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.Billing.History.WebService.History.QueryCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.TestConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.TestConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.History.WebService.TestConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.ExecuteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.ExecuteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.History.WebService.ExecuteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.QueryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.Billing.History.WebService.QueryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.Billing.History.WebService.QueryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.SecurityTicket">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.#ctor">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicket(System.UInt64,System.UInt32,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.BeginGetPartnerSecurityTicket(System.UInt64,System.UInt32,System.UInt16,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.EndGetPartnerSecurityTicket(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicketAsync(System.UInt64,System.UInt32,System.UInt16)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicketAsync(System.UInt64,System.UInt32,System.UInt16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicket(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.BeginGetSecurityTicket(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.EndGetSecurityTicket(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicketAsync(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicketAsync(System.Byte,System.UInt32,System.UInt16,System.UInt16,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetPartnerSecurityTicketCompleted">
            <remarks/>
        </member>
        <member name="E:ServerTestFramework.LiveService.sts.WebService.SecurityTicket.GetSecurityTicketCompleted">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetPartnerSecurityTicketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetPartnerSecurityTicketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.sts.WebService.GetPartnerSecurityTicketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetSecurityTicketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ServerTestFramework.LiveService.sts.WebService.GetSecurityTicketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ServerTestFramework.LiveService.sts.WebService.GetSecurityTicketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSRC.Ranking.Game">
            <summary>
            A class to represent a single game between some teams each of which comprised of several players. Each game also has
            to have the date at which it ended. This time is assumed to be the time when the game finsihed as each team will
            know about its scores (which is only possible AFTER the game).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Game.m_aDate">
            <summary>
            The date at which the game ended.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Game.m_aTeams">
            <summary>
            A variable sized list of teams.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Game.#ctor(System.DateTime,System.Int32)">
            <summary>
            Constructs a game that ended at a specified date between at a maximal number of teams. 
            </summary>
            <param name="aDate">Date at which the game ended.</param>
            <param name="iMaxNumberOfTeams">Maximum number of teams.</param>
            <remarks>An exception will be thrown if more than the specified number of teams are added.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.#ctor(System.DateTime)">
            <summary>
            Constructs a game that ended at a specified date between an arbitrary number of teams.
            </summary>
            <param name="aDate">Date at which the game ended.</param>
        </member>
        <member name="M:MSRC.Ranking.Game.AddTeam(MSRC.Ranking.Team)">
            <summary>
            Adds a team to the game.
            </summary>
            <param name="aTeam">The team to be added.</param>
            <returns>The team index of the team added.</returns>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.GetTeam(System.Int32)">
            <summary>
            Gets the team at a specified index.
            </summary>
            <param name="iTeamIndex">The index of the team.</param>
            <returns>The team at the given index or null, if the index is wrong.</returns>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.GetWinner(System.Int32,System.Int32)">
            <summary>
            Gets the winner between two teams.
            </summary>
            <param name="iTeamIndex1">Team index of team 1.</param>
            <param name="iTeamIndex2">Team index of team 2.</param>
            <returns>Returns +1 if team 1 won against team 2, -1 if team 2 won against team 1, and 0 it both teams
            draw.</returns>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Game.RemoveEmptyTeams">
            <summary>
            Removes all empty teams.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.Date">
            <summary>
            The date at which the game ended.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.NumberOfTeams">
            <summary>
            The number of participating teams.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.NumberOfPlayers">
            <summary>
            The total number of players participating in the game.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.PlayerIDs">
            <summary>
            All player IDs of all players in the game.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Game.TeamIDs">
            <summary>
            All team indicies of all players in the game.
            </summary>
            <remarks>The team index is a zero-based internal index used by this class.</remarks>
        </member>
        <member name="P:MSRC.Ranking.Game.Ranking">
            <summary>
            The full ranking of all teams based on the team scores.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Numerics.GaussianApproximations">
            <summary>
            A static class that provides some functions for Gaussian integrals. In particular, this class provides
            correction functions for the mean and variance of the truncated Gaussian.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.erfc(System.Double)">
            <summary>
            Computes the complementary error function. This function is defined by 2/sqrt(pi) * integral from x to infinity of exp (-t^2) dt.
            </summary>
            <param name="x">The lower boundary of integration.</param>
            <returns>The complementary error function.</returns>
            <remarks>This method uses a Chebyshev series approximation which is exact in the whole range up to 1 * 10^{-7}.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.erfcinv(System.Double)">
            <summary>
            Computes the inverse of the complementary error function. 
            </summary>
            <param name="y">The point of interest.</param>
            <returns>The inverse of the complementary error function.</returns>
            <remarks>This function uses a polynomial approximation together with one step of Halley's rational method.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the input <c>y</c> is outside [0,2].</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.Phi(System.Double)">
            <summary>
            Computes the cummulative Gaussian distribution at a specified point of interest.
            </summary>
            <param name="t">The point of interest.</param>
            <returns>The cummulative Gaussian distribution at the point of interest.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.PhiInverse(System.Double)">
            <summary>
            Computes the inverse of the cummulative Gaussian distribution (qunatile function) at a specified point of interest.
            </summary>
            <param name="p">The cummulative probability or point of interest in [0,1].</param>
            <returns>The quantile at the specified point.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.N(System.Double)">
            <summary>
            Computes the normal density at a specified point of interest.
            </summary>
            <param name="t">The point of interest.</param>
            <returns>The normal density at the point of interest.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.v(System.Double,System.Double)">
            <summary>
            Computes the additive correction of a single-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The additive correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.w(System.Double,System.Double)">
            <summary>
            Computes the multiplicative correction of a single-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The multiplicative correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.v0(System.Double,System.Double)">
            <summary>
            Computes the additive correction of a symmetrical double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The additive correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.w0(System.Double,System.Double)">
            <summary>
            Computes the multiplicative correction of a symmetrical double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="epsilon">The truncation point.</param>
            <returns>The multiplicative correction.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.v(System.Double,System.Double,System.Double)">
            <summary>
            Computes the additive correction of a general double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="l">The lower truncation point.</param>
            <param name="u">The upper truncation point.</param>
            <returns>The additive correction.</returns>
            <remarks>This routine has not been tested in all regimes of t for a given l and u.</remarks>
            <exception cref="T:System.ArithmeticException">Thrown if the computation is not numerically stable.</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.w(System.Double,System.Double,System.Double)">
            <summary>
            Computes the multiplicative correction of a general double-sided truncated Gaussian with unit variance.
            </summary>
            <param name="t">The mean of the non-truncated Gaussian.</param>
            <param name="l">The lower truncation point.</param>
            <param name="u">The upper truncation point.</param>
            <returns>The multiplicative correction.</returns>
            <remarks>This routine has not been tested in all regimes of t for a given l and u.</remarks>
            <exception cref="T:System.ArithmeticException">Thrown if the computation is not numerically stable.</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.ComputeNiederreiterSeries(System.Int32)">
            <summary>
            Computes a Niederreither series of coefficients.
            </summary>
            <param name="iNumberOfDimensions">Number of dimensions.</param>
            <returns>A Niederreiter series with as many elements as dimensions.</returns>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.TransformSample(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Double[],MSRC.Ranking.LinearAlgebra.Matrix@,System.Double@,MSRC.Ranking.LinearAlgebra.Matrix@,MSRC.Ranking.LinearAlgebra.Matrix@)">
            <summary>
            Computes the transformed integrand of a multi-variate Gaussian.
            </summary>
            <param name="mu">Mean of the Gaussian.</param>
            <param name="C">Cholesky factor of the covariance of the Gaussian.</param>
            <param name="a">Lower integration boundary.</param>
            <param name="b">Upper integration boundary.</param>
            <param name="dSample">The uniform random sample.</param>
            <param name="tmp">A temporary matrix of the size of <c>M1</c>.</param>
            <param name="M0">The volume sample (zeroth moment).</param>
            <param name="M1">The mean sample (first moment).</param>
            <param name="M2">The second moment sample.</param>
            <remarks>This function is implemented to minimise the number of allocations of memory and may thus be hard to 
            read.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.CalculateTGMoments(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Computes a multivariate partial Gaussian integral.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="a">Lower integration limits.</param>
            <param name="b">Upper integration limits.</param>
            <param name="iMaxNumberOfPoints">Number of quasi-random points.</param>
            <returns>The normalisation constant, mean and second moment matrix of a multivariate Gaussian density between <c>a</c> and <b>b</b>.</returns>
            <remarks>This function implements a variant of the algorithm as described in <i>A. Genz. Numerical Computation of Multivariate 
            Normal Probabilities.</i> 1992 using a quais-random lattice generator based on Niederreiter point sets. However, for one-dimensional
            integrals of a certain sort if resorts to use the fast <c>v</c>, <c>w</c>, <c>v0</c> and <c>w0</c> function.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not the same number of rows as <c>Sigma</c>.</exception>
            <exception cref="T:System.ArithmeticException">Thrown if the normalisation constant comes out too small.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of dimensions is too large (which would lead to unrealiable results).</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.Phi(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Computes a multivariate partial Gaussian integral.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="a">Lower integration limits.</param>
            <param name="b">Upper integration limits.</param>
            <param name="iMaxNumberOfPoints">Number of quasi-random points.</param>
            <returns>The integal of the multivariate Gaussian density between <c>a</c> and <b>b</b>.</returns>
            <remarks>This function implements a variant of the algorithm as described in <i>A. Genz. Numerical Computation of 
            Multivariate Normal Probabilities.</i> 1992. However, fast functions based on <c>erfc</c> are used for one-dimensional
            integrals.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>a</c> or <c>b</c> are not the same number of rows as <c>Sigma</c>.</exception>
            <exception cref="T:System.ArithmeticException">Thrown if the normalisation constant comes out too small.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of dimensions is too large (which would lead to unrealiable results).</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.CalculateTGAParameters(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Computes the parameter of the best Gaussian approximation of a multivariate truncated Gaussian.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="l">Lower integration limits.</param>
            <param name="u">Upper integration limits.</param>
            <param name="iNumberOfIterations">Number of iterations over the list of integration limits. Usually, a value of 5 - 10 will work fine.</param>
            <returns>The normalisation constant, mean and covariance matrix of the best Gaussian approxiamtion to the truncated multivariate Gaussian density 
            between <c>l</c> and <b>u</b>.</returns>
            <remarks>This function implements the EP algorithm of Thomas P. Minka described in <i>T. P. Minka. A family of algorithms for approximate Bayesian 
            inference.</i> PhD thesis. MIT. 2001. Note that in the case of scalars, the number of iterations is automatically reduced to 1.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not the same number of rows as <c>Sigma</c>.</exception>
        </member>
        <member name="M:MSRC.Ranking.Numerics.GaussianApproximations.PhiEP(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Approximates a multivariate partial Gaussian integral.
            </summary>
            <param name="mu">Mean of the Gaussian distribution.</param>
            <param name="Sigma">Covariance of the Gaussian distribution.</param>
            <param name="l">Lower integration limits.</param>
            <param name="u">Upper integration limits.</param>
            <param name="iNumberOfIterations">Number of iterations over the list of integration limits. Usually, a value of 5 - 10 will work fine.</param>
            <returns>The integal of the multivariate Gaussian density between <c>l</c> and <b>u</b>.</returns>
            <remarks>This function implements the EP algorithm of Thomas P. Minka described in <i>T. P. Minka. A family of algorithms for approximate Bayesian 
            inference.</i> PhD thesis. MIT. 2001. Note that in the case of scalars, the number of iterations is automatically reduced to 1.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not vectors
            or if <c>Sigma</c> is not a square matrix.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if <c>mu</c>, <c>l</c> or <c>u</c> are not the same number of rows as <c>Sigma</c>.</exception>
        </member>
        <member name="T:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments">
            <summary>
            A structure holding moments of truncated multi-variate Gaussian. This structure is only used by
            <c>CalculateTGMoments</c>.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments.M0">
            <summary>
            Normalisation constant of the truncated Gaussian.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments.M1">
            <summary>
            Vector of first moments.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGMoments.M2">
            <summary>
            Square matrix of second moments.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters">
            <summary>
            A structure holding the parameters of truncated multi-variate Gaussian approximation. This structure is only used by
            <c>CalculateTGAParameters</c>. 
            </summary>
            <remarks>Note that the parameters of a truncated Gaussian approximation are closely related to the moments of a truncated Gaussian. 
            In particular, we have that TGParameters.Z \approx TGMoments.M0, TGParameters.mu \approx TGMoments.M1 and 
            TGParameters.Sigma \approx TGMoments.M2 - TGMoments.M1 * TGMoments.M1.Transpose ().</remarks>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters.Z">
            <summary>
            Approximative normalisation constant of the truncated Gaussian.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters.mu">
            <summary>
            Mean vector of the Gaussian approximation.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Numerics.GaussianApproximations.TGAParameters.Sigma">
            <summary>
            Covariance matrix of the Gaussian approximation.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixType">
            <summary>
            This enumeration represents the different type of matrices.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.RectangularMatrix">
            <summary>
            A rectangular matrix (different number of rows and columns and at least two rows and two columns).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.SquareMatrix">
            <summary>
            A square matrix (same number of rows and columns and at least two rows).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.RowVector">
            <summary>
            A row vector (One row and at least two columns).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.ColumnVector">
            <summary>
            A column vector (One column and at least two rows).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixType.Scalar">
            <summary>
            A scalar (One row and one column).
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">
            <summary>
            This is an exception which is thrown whenever the matrix type does not agree.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixTypeException.m_aActualMatrixType">
            <summary>
            Actual type of matrix.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixTypeException.m_aExpectedMatrixType">
            <summary>
            Expected type of matrix.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.MatrixTypeException.#ctor(MSRC.Ranking.LinearAlgebra.MatrixType,MSRC.Ranking.LinearAlgebra.MatrixType)">
            <summary>
            Constructs a new exception for matrix type problems.
            </summary>
            <param name="aActualMatrixType">Actual type of the matrix.</param>
            <param name="aExpectedMatrixType">Expected type of the matrix.</param>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixTypeException.ActualMatrixType">
            <summary>
            Actual type of the matrix.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixTypeException.ExpectedMatrixType">
            <summary>
            Expected type of the matrix.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">
            <summary>
            This is an exception which is thrown whenever the matrix size does not agree.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iActualNoRows">
            <summary>
            Actual number of rows.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iActualNoColumns">
            <summary>
            Actual number of columns.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iExpectedNoRows">
            <summary>
            Expected number of rows.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.MatrixSizeException.m_iExpectedNoColumns">
            <summary>
            Expected number of columns.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.MatrixSizeException.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new exception for matrix size problems.
            </summary>
            <param name="iActualNoRows">Actual number of rows.</param>
            <param name="iActualNoColumns">Actual number of columns.</param>
            <param name="iExpectedNoRows">Expected number of rows.</param>
            <param name="iExpectedNoColumns">Expected number of columns.</param>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ActualNoRows">
            <summary>
            Actual number of rows.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ActualNoColumns">
            <summary>
            Actual number of columns.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ExpectedNoRows">
            <summary>
            Expected number of rows.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.MatrixSizeException.ExpectedNoColumns">
            <summary>
            Expected number of columns.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">
            <summary>
            This is an exception which is thrown whenever the matrix is not positive definite.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException.#ctor">
            <summary>
            Constructs a new exception for a non-positive definite matrix problem.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.LinearAlgebra.Matrix">
            <summary>
            A light-weight matrix class for  arbitrary sized matrices. Most of these functions are implemented in a 
            straighforward way and are not optimised for any particular target CPU architecture.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.Matrix.m_dData">
            <summary>
            The raw values of the matrix.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.LinearAlgebra.Matrix.m_aType">
            <summary>
            The type of the matrix.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a matrix with zeros entries.
            </summary>
            <param name="iNoRows">Number of rows.</param>
            <param name="iNoColumns">Number of columns.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Int32)">
            <summary>
            Constructs a square matrix.
            </summary>
            <param name="iNoRows">Number of rows and columns.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs a square diagonal matrix.
            </summary>
            <param name="iNoRows">Number of rows and columns.</param>
            <param name="dDiagonal">The diagonal entry.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Double[])">
            <summary>
            Constructs a square diagonal matrix.
            </summary>
            <param name="dDiagonal">The diagonal of the matrix.</param>
            <remarks>This constructor allows different entries on the diagonal of the matrix.</remarks>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Constructs a deep copy of a matrix.
            </summary>
            <param name="aMatrix">Matrix to be copied.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Constructs a shallow copy of a matrix.
            </summary>
            <param name="dData">Matrix data to be used.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.GetMatrixType">
            <summary>
            Determines the type of the matrix by looking at the number of rows and columns.
            </summary>
            <returns>The type of the matrix.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Equals(System.Object)">
            <summary>
            Compares with another matrix.
            </summary>
            <param name="aMatrix">Matrix A.</param>
            <returns>Returns true if A is equal to the matrix in every element.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.GetHashCode">
            <summary>
            Computes a new hash code for the matrix.
            </summary>
            <returns>The hash code as an integer.</returns>
            <remarks>This function simply computes the products of the number of rows and colums and adds the 
            first element (0,0) of the matrix in order to compute a hash code.</remarks>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string showing the matrix elements.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Implicit(MSRC.Ranking.LinearAlgebra.Matrix)~System.Double[0:,0:]">
            <summary>
            The implicit cast of a matrix into a double array.
            </summary>
            <param name="A">Matrix A.</param>
            <returns>The elements of the matrix A as a double array.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Explicit(MSRC.Ranking.LinearAlgebra.Matrix)~System.Double">
            <summary>
            An explicit cast of a matrix into a double. 
            </summary>
            <param name="A">Matrix A.</param>
            <returns>The only element of the matrix A as a double.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not a scalar (one row and one column).</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Implicit(System.Double[0:,0:])~MSRC.Ranking.LinearAlgebra.Matrix">
            <summary>
            The implicit case of a double array into a matrix.
            </summary>
            <param name="dData">The double array to be casted.</param>
            <returns>A new matrix object whose <c>Data</c> property points to the double array.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Implicit(System.Double)~MSRC.Ranking.LinearAlgebra.Matrix">
            <summary>
            The implicit cast of a double into a matrix.
            </summary>
            <param name="x">The double to be casted.</param>
            <returns>A 1 x 1 matrix with the only element equal to <c>x</c>.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Negate">
            <summary>
            Negates the matrix.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_UnaryNegation(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="A">Matrix A.</param>
            <returns>Matrix A negated, that is -A.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Equality(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Compares two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Returns true if A is equal to B in every element.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Inequality(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Compares two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Returns true if A is not equal to B in every element.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Add(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Adds a matrix.
            </summary>
            <param name="A">Matrix to be added.</param>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the matrix to be added is of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Addition(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>The matrix sum of A and B, that is A + B.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the two matrices are of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Subtract(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Subtracts a matrix.
            </summary>
            <param name="A">Matrix to be subtracted.</param>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the matrix to be subtracted is of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Subtraction(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Matrix B subtracted from matrix B, that is A - B.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the two matrices are of different size.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Multiply(MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Multiplies with a matrix from the right. 
            </summary>
            <param name="A">Matrix to be multiplied from the right.</param>
            <remarks>This will most likely change the size of the matrix.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the number of rows of <c>A</c> does not match the number of columns.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Multiply(MSRC.Ranking.LinearAlgebra.Matrix,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="B">Matrix B.</param>
            <returns>Matrix A times matrix B, that is A * B.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixSizeException">Thrown if the number of rows of <c>B</c> does not match the number of columns of <c>A</c>.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Mulitply(System.Double)">
            <summary>
            Multiplies with a scalar, that is, each element of the matrix is multiplied by the scalar.
            </summary>
            <param name="x">The scaling factor.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Multiply(MSRC.Ranking.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Multiplies a matrix with a scalar.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="x">Scalar x.</param>
            <returns>Matrix A times scalar x, that is every element of A is multiplied by x.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Multiply(System.Double,MSRC.Ranking.LinearAlgebra.Matrix)">
            <summary>
            Multiplies a scalar with a matrix.
            </summary>
            <param name="x">Scalar x.</param>
            <param name="A">Matrix A.</param>
            <returns>Matrix A times scalar x, that is every element of A is multiplied by x.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Divide(System.Double)">
            <summary>
            Didives by a scalar, that is, every element is divided by the scalar.
            </summary>
            <param name="x">The scalar to be dividing by.</param>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.op_Division(MSRC.Ranking.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="A">Matrix A.</param>
            <param name="x">Scalar x.</param>
            <returns>Matrix A divided by scalar x, that is every element of A is divided by x.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Cholesky">
            <summary>
            Computes the Cholesky decomposition. 
            </summary>
            <returns>A lower triangular matrix containing the Cholesky decomposition.</returns>
            <remarks>This method does not check for the symmetry.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Inverse">
            <summary>
            Computes the inverse of a square positive definite matrix. 
            </summary>
            <returns>The inverse of the matrix.</returns>
            <remarks>Note that the method does not check for the symmetry.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.InverseCholeskyFactor">
            <summary>
            Computes the inverse of the Cholesky factor of the matrix.  
            </summary>
            <returns>The inverse of the Cholesky factor of the matrix.</returns>
            <remarks>Note that the method does not check for the symmetry.</remarks>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.Determinant">
            <summary>
            Computes the determinant of a positive semidefinite matrix.  
            </summary>
            <returns>The determinant of the matrix.</returns>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not square.</exception>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixNonPositiveDefiniteException">Thrown if the matrix is not-positive definite.</exception>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.IsNaN">
            <summary>
            Checks if any element of the matrix is not-a-number.
            </summary>
            <returns>Returns true the matrix contains at least one element that is not-a-number.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.IsInfinity">
            <summary>
            Checks if any element of the matrix is infinity.
            </summary>
            <returns>Returns true the matrix contains at least one element that is infinity.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.ValidVariableName(System.String)">
            <summary>
            Converts a variable name to a valid variable name by changing all invalid characters with an underscore.
            </summary>
            <param name="szName">Variable name</param>
            <returns>A valid MATLAB variable name.</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.MatlabDataElement(System.String)">
            <summary>
            Generates a Matlab V5 compatiable data element.
            </summary>
            <param name="szName">Name of the matrix.</param>
            <returns>The byte array that can be used as a Matlab V5 data element (in a stream).</returns>
        </member>
        <member name="M:MSRC.Ranking.LinearAlgebra.Matrix.MatlabHeader(System.String)">
            <summary>
            Generates a Matlab V5 comptabible header byte array.
            </summary>
            <param name="szCreatorComments">The comments that will go into the header of the Matlab file.</param>
            <returns>The header as a byte array.</returns>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.Type">
            <summary>
            The type of the matrix (based on number of rows and columns).
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.IsRowVector">
            <summary>
            Indicator if the matrix is a row vector.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.IsColumnVector">
            <summary>
            Indicator if the matrix is a column vector.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.IsVector">
            <summary>
            Indicator whether or not the matrix is a vector.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.NoRows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.NoColumns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.NoElements">
            <summary>
            Number of total elements of the matrix.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Element in the zero-based row <c>iRowIndex</c> and zero-based column <c>iColumnIndex</c>.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.LinearAlgebra.Matrix.Item(System.Int32)">
            <summary>
            Element at position <c>iIndex</c> if the matrix is vector. 
            </summary>
            <exception cref="T:MSRC.Ranking.LinearAlgebra.MatrixTypeException">Thrown if the matrix is not a vector.</exception>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.Algorithm">
            <summary>
            Different types of approximation algorithm for the multi-team case.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.Algorithm.GenzAlgorithm">
            <summary>
            Genz' algorithm as described in <i>A. Genz. Numerical Computation of Multivariate 
            Normal Probabilities.</i> 1992.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.Algorithm.EPAlgorithm">
            <summary>
            Gaussian EP algorithm as described in <i>T. P. Minka. A family of algorithms for approximate Bayesian 
            inference.</i> PhD thesis. MIT. 2001.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.Algorithm.EPMessagePassing">
            <summary>
            EP message passing algorithm. This algorithm is two orders of magnitudes faster than <c>EPAlgorithm</c>. 
            </summary>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem">
            <summary>
            A class that represents the MuSigma ranking system. This class manages a list of player skill lists. 
            Game outcomes will be incorporated by the MuSigma update equation. 
            </summary>
        </member>
        <member name="T:MSRC.Ranking.ProbabilisticRankingSystem">
            <summary>
            The abstract base class that manages a list of player skill lists. A probabilistic ranking system is a ranking system which is
            based on a probabilistic model of the game outcome. Hence, in such a ranking system it is possible to compute the probability of a
            particualr game outcome.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.RankingSystem">
            <summary>
            The abstract base class that manages a list of player skill lists. A ranking system will allow to incorporate a game outcomes 
            an update the inidividual player skills accordingly. Moreover, a ranking system will offer a predicition of the outcome of the 
            game to support matchmaking mechanisms. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystem.m_aPlayerSkillsList">
            <summary>
            The list of player skill list.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.#ctor(MSRC.Ranking.PlayerSkillsList)">
            <summary>
            Constructs a ranking system for a given list of player skill lists.
            </summary>
            <param name="aPlayerSkillsList">A list of player skill lists. If the list is <c>null</c>, a new list of player
            skill lists will be created.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.#ctor">
            <summary>
            Constructs a ranking system with a new list of player skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.ClearPlayerSkills">
            <summary>
            Clears all the chronologically sorted skills of all the players maintained by this ranking system.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.Update(MSRC.Ranking.Game)">
            <summary>
            Updates the player skills with a particular game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <returns>True, if the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.PredictedOutcome(MSRC.Ranking.Game)">
            <summary>
            Computes the most likely outcome of a game.
            </summary>
            <param name="aGame">The game for which the outcome should be predicted.</param>
            <returns>The most likely ranking.</returns>
            <remarks>Note that this function ignores the actual game outcome which is contained in the game passed to the method.
            The method is supposed to throw an exception if the outcome cannot be predicted.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.MatchQuality(MSRC.Ranking.Game)">
            <summary>
            Computes the quality of a match.
            </summary>
            <param name="aGame">The game to check.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
            <remarks>This function computes the maximum discrepancy between any pair of players using the skills valid 
            at the time of the game. It is conceivable that a derived implementation of this method does a more careful 
            analysis.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystem.MatchQuality(MSRC.Ranking.Skill,MSRC.Ranking.Skill)">
            <summary>
            Computes the match quality between two players.
            </summary>
            <param name="aPlayer1Skill">Skill of player 1.</param>
            <param name="aPlayer2Skill">Skill of player 2.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
        </member>
        <member name="P:MSRC.Ranking.RankingSystem.PlayerSkillsList">
            <summary>
            The list of player skill lists maintained by the ranking system.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.#ctor(MSRC.Ranking.PlayerSkillsList)">
            <summary>
            Constructs a probabilistic ranking system for a given list of player skill lists.
            </summary>
            <param name="aPlayerSkillsList">A list of player skill lists. If this list is <c>null</c>, a new list of player
            skill lists will be created.</param>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.#ctor">
            <summary>
            Constructs a probabilistic ranking system with a new list of player skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.RankingProbability(MSRC.Ranking.Game,MSRC.Ranking.Ranking[])">
            <summary>
            Computes the probability for some rankings for a given game.
            </summary>
            <param name="aGame">The game for which the ranking probabilities should be computed.</param>
            <param name="aRankings">A list of rankings for which the probability should be computed.</param>
            <returns>The probabilities of the specified rankings for the given game. This method throws an exception if 
            the probabilities cannot be computed.</returns>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.Update(MSRC.Ranking.Game)">
            <summary>
            Updates the player skills with a particular game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <returns>True, if the update was performed.</returns>
            <remarks>This method uses the evidence based <c>Update</c> method and should not be overriden!</remarks>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.Update(MSRC.Ranking.Game,System.Double@)">
            <summary>
            Updates the player skills with a particular game and computes the evidence of the game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <param name="dEvidence">The evidence of the game (as an output parameter).</param>
            <returns>True, if the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.ProbabilisticRankingSystem.PredictedOutcome(MSRC.Ranking.Game)">
            <summary>
            Computes the most likely game outcome based on the probability for each ranking.
            </summary>
            <param name="aGame">The game for which the outcome should be predicted.</param>
            <returns>The most likely outcome.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the the game has more than two team.</exception>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dBeta">
            <summary>
            The standard deviation of the performance distribution.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dDrawProbability">
            <summary>
            The draw probability between any two teams.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dTau">
            <summary>
            The increase in standard deviation responsible for modelling the dynamics of the skill belief.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_iNumberOfIterations">
            <summary>
            The number of iterations of the numerical approximation code.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_aApproximationAlgorithm">
            <summary>
            The particular algorithm used.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dPriorMu">
            <summary>
            The mean of the prior skill belief.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.m_dPriorSigma">
            <summary>
            The standard deviation of the prior skill belief.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor(MSRC.Ranking.PlayerSkillsList,System.Double,System.Double,System.Double,System.Double,System.Double,MSRC.Ranking.RankingSystems.Algorithm,System.Int32)">
            <summary>
            Constructs a new instance of the MuSigma ranking system.
            </summary>
            <param name="aPlayerSkillsList">A list of player skill lists.</param>
            <param name="dPerformanceFactor">The performance in a single game relative to the prior standard deviation.</param>
            <param name="dDrawProbability">The probability that two equally skilled players will draw.</param>
            <param name="dLearningFactor">The change of skill in a single game relative to the prior standard deviation.</param>
            <param name="dNegativeSkillProbability">The prior belief that a player has a negative skill (important for team games).</param>
            <param name="dPriorSigma">The standard deviation of the prior skill belief.</param>
            <param name="aApproximationAlgorithm">The approximation algorithm used.</param>
            <param name="iNumberOfIterations">The number of iterations whenever numerical integration is used.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of the MuSigma ranking system with an empty player skill list using the EP message 
            passing algorithm.
            </summary>
            <param name="dPerformanceFactor">The performance in a single game relative to the prior standard deviation.</param>
            <param name="dDrawProbability">The probability that two equally skilled players will draw.</param>
            <param name="dLearningFactor">The change of skill in a single game relative to the prior standard deviation.</param>
            <param name="dNegativeSkillProbability">The prior belief that a player has a negative skill (important for team games).</param>
            <param name="dPriorSigma">The standard deviation of the prior skill belief.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of the MuSigma ranking system with an empty player skill list using the 
            EP message passing algorithm and a unit variance prior skill belief with ~0.1% chance of negative skills.
            </summary>
            <param name="dPerformanceFactor">The performance in a single game relative to the prior standard deviation.</param>
            <param name="dDrawProbability">The probability that two equally skilled players will draw.</param>
            <param name="dLearningFactor">The change of skill in a single game relative to the prior standard deviation.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.#ctor">
            <summary>
            Constructs a new instance of the MuSigma ranking system with an empty player skill list using the EP 
            message passing algorithm and a unit variance prior skill belief with ~0.1% chance of negative skills. 
            The performance factor is set to 50%, the draw probability to 10% and the learning factor is at 1%.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ComputeInternalGameRepresentation(MSRC.Ranking.Game,MSRC.Ranking.Ranking)">
            <summary>
            Computes the internal game representation for a particular ranking.
            </summary>
            <param name="aGame">The game to be represented.</param>
            <param name="aRanking">The ranking of the game.</param>
            <returns>The internal game representation.</returns>
            <exception cref="T:System.Exception">Thrown if the game ends in a draw but the draw probability was set to zero.</exception>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.GetSkillBelief(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation,System.DateTime)">
            <summary>
            Gets the skill beliefs of all players participating in a game.
            </summary>
            <param name="aInternalGame">Internal representation of the game.</param>
            <param name="aDate">Date at which we would like to know the skill beliefs. If the time is at zero ticks, the latest 
            skill belief will be used.</param>
            <returns>An internal representation of the skill belief.</returns>
            <remarks>Note that this function already adds the amount of \tau^2 if it is queried for the latest skill beliefs.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PartialUpdate(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,System.Double)">
            <summary>
            Computes the new skill with partial updates.
            </summary>
            <param name="aBeforeUpdate">Gaussian skill belief before update.</param>
            <param name="aAfterUpdate">Gaussian skill belief after update.</param>
            <param name="dWeight">Partial weighting factor.</param>
            <returns>The interpolated skill.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Update(MSRC.Ranking.Game,System.Double@)">
            <summary>
            Updates the player skills given a particular game. This the general update equation for an arbitrary number
            of teams and players per team. This function also computes the evidence of this particular game.
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <param name="dEvidence">The evidence of the game (as an output parameter).</param>
            <exception cref="T:System.ArithmeticException">Thrown if some of the resulting MuSigma values would be NaN or if
            any other non-stable condition occurs.</exception>
            <returns>True is the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.EPMessagePassingUpdate(MSRC.Ranking.Game)">
            <summary>
            Updates the player skills given a particular game. This implementation uses message passing and is two
            orders of magnitudes faster than the general the general update equation for an arbitrary number
            of teams and players per team. 
            </summary>
            <param name="aGame">The game to be incorporated.</param>
            <exception cref="T:System.ArithmeticException">Thrown if some of the resulting MuSigma values would be NaN or if
            any other non-stable condition occurs.</exception>
            <returns>True is the update was performed.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.UpdateTeamPerformance(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian[],MSRC.Ranking.Ranking,System.Int32[],System.Double[],System.Double)">
            <summary>
            Implements the chain schedule EP updates.
            </summary>
            <param name="aTeamPerformances">The prior team performances.</param>
            <param name="aRanking">The ranking outcome of the game.</param>
            <param name="iIndex">The pre-computed re-ordering of the teams.</param>
            <param name="dEpsilon">The draw margins between any pair of teams.</param>
            <param name="dConvergenceTolerance">The precision at which to stop the update.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.RankingProbability(MSRC.Ranking.Game,MSRC.Ranking.Ranking[])">
            <summary>
            Computes the marginalised probability for some rankings for a given game.
            </summary>
            <param name="aGame">The game for which the ranking probabilities should be computed.</param>
            <param name="aRankings">A list of rankings for which the probability should be computed.</param>
            <returns>The probabilities of the specified rankings for the given game.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the probabilities cannot be computed.</exception>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.MatchQuality(MSRC.Ranking.Game)">
            <summary>
            Computes the quality of a match.
            </summary>
            <param name="aGame">The game to check.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
            <remarks>This functions computes the (normalised) probability of a joint draw of all teams.</remarks>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.MatchQuality(MSRC.Ranking.Skill,MSRC.Ranking.Skill)">
            <summary>
            Computes the match quality between two players in the MuSigma system.
            </summary>
            <param name="aPlayer1Skill">MuSigma skill of player 1.</param>
            <param name="aPlayer2Skill">MuSigma skill of player 2.</param>
            <returns>A number between 0 and 1 which indicates the quality of the match (1 is the best possible 
            match and 0 is the worst possible match).</returns>
            <remarks>This function computes the (normalised) probability of drawing.</remarks>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Beta">
            <summary>
            The standard deviation of the performance distribution.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the standard deviation is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.DrawProbability">
            <summary>
            The draw probability between two equally skilled teams. 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the draw probability is outside of [0,1).</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Tau">
            <summary>
            The increase in standard deviation of the skill belief (dynamics prior).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the standard deviation in the skill belief is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.NumberOfIterations">
            <summary>
            Number of iterations of the numerical approximation code.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of iterations is smaller than 20.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ApproximationAlgorithm">
            <summary>
            Approximation algorithm for the multi-team and multi-player case.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorMu">
            <summary>
            The mean of the prior skill belief.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma">
            <summary>
            The standard deviation of the prior skill belief.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the standard deviation is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PerformanceFactor">
            <summary>
            The factor of performance variation relative to the prior standard deviation. A value close to zero
            inidicates that the performance in a single game is varying little around the actual skill of the players.
            This value should usually be between 0 and 1. Setting this property changes <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Beta"/> for the current value
            of <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the performance factor is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.LearningFactor">
            <summary>
            The factor of skill point variation relative to the prior standard deviation. A value close to zero
            inidicates that the true skill in a single game is varying little. This value should be very small; a value
            of more than 0.5 means that the true skill can change up/down by an entire prior standard deviation in a single 
            game. Setting this property changes <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Tau"/> for the current value of <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the learning factor is set to a negative value.</exception>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.NegativeSkillProbability">
            <summary>
            The probability that a player has negative skill points. This value should be extremely close to zero. Setting 
            this property changes <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorMu"/> for the current value of <seealso cref="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.PriorSigma"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the negative skill probability is set to a value outside (0,1].</exception>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation">
            <summary>
            This struct holds the internal representation of a game in terms of matrices.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.A">
            <summary>
            A matrix with as many rows as players and as many column are there are teams (minus one).
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.a">
            <summary>
            The lower integration limits.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.b">
            <summary>
            The upper integration limits.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.updateFactors">
            <summary>
            The update factors.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalGameRepresentation.iIndexToPlayerID">
            <summary>
            A mapping from the index to the global player ID.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalSkillBelief.mu">
            <summary>
            Means of skill beliefs.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.InternalSkillBelief.Sigma">
            <summary>
            Covariance matrix  of skill beliefs.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.m_dPrecisionMean">
            <summary>
            The precision times the mean of the Gaussian.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.m_dPrecision">
            <summary>
            The precision of the Gaussian.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Gaussian.
            </summary>
            <param name="dPrecisionMean">Precision times the mean of the Gaussian</param>
            <param name="dPrecison">Precision of the Gaussian.</param>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.op_Multiply(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian)">
            <summary>
            Multiplies two Gaussians.
            </summary>
            <param name="D1">First Factor.</param>
            <param name="D2">Second Factor.</param>
            <returns>The product of the two Gaussians.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.op_Division(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian)">
            <summary>
            Divides two Gaussians.
            </summary>
            <param name="D1">Numerator Gaussian.</param>
            <param name="D2">Denominator Gaussian.</param>
            <returns>The division of the two Gaussians.</returns>
        </member>
        <member name="M:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.op_Subtraction(MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian,MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian)">
            <summary>
            Computes the absolute difference between two Gaussians.
            </summary>
            <param name="D1">First Gaussian.</param>
            <param name="D2">Second Gaussian.</param>
            <returns>The absolute deviation of the two Gaussians in terms of their parameters.</returns>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.Mean">
            <summary>
            The mean of a Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.PrecisionMean">
            <summary>
            The precision times the mean of the Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.Variance">
            <summary>
            The variance of a Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.StdDev">
            <summary>
            The standard deviation of a Gaussian.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.Gaussian.Precision">
            <summary>
            The precision of a Gaussian.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry">
            <summary>
            This type is used to denote which factors/messages to update in a chain schedule
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry.DifferenceFactor">
            <summary>
            If true, the difference factor is updated; otherwise the ranking factor.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry.Factor">
            <summary>
            The factor index.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.RankingSystems.MuSigmaRankingSystem.ChainScheduleEntry.Message">
            <summary>
            The message index.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Skills.MuSigmaSkill">
            <summary>
            A class to represent the skill belief in the MuSigma system, that is, the parameters \mu (mean) and \sigma (standard deviation) of 
            the Gaussian skill belief.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Skill">
            <summary>
            Abstract base class of all skills. Since we are interested in rankings, each skill must be convertible into a (skill) level 
            and a more fine-grained skill point measure. For example, the number of kills, the total ammount of experience points, etc. are valid 
            skill measures. Since we have both levels and skill points, a fractional level will tell us the fractional amount of difference 
            between the level and the skill points.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Skill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Skill.GetLevel(System.Double)">
            <summary>
            A skill level of the player between 0 and 50.
            </summary>
            <param name="dScaling">Scaling factor of the points to map it to levels.</param>
            <returns>A level between 0 and 50.</returns>
            <remarks>Levels are the broad version of the skill points.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Skill.GetFractionalLevel(System.Double)">
            <summary>
            The fractional difference between the level and the points. This value should always be between 0 and 1.
            </summary>
            <returns>The fractional part of the skill points into the current level.</returns>
        </member>
        <member name="P:MSRC.Ranking.Skill.Points">
            <summary>
            The skill points of the player. 
            </summary>
            <remarks>Skill points are the exact, fine-grained summary of skill.</remarks>
        </member>
        <member name="F:MSRC.Ranking.Skills.MuSigmaSkill.m_dMu">
            <summary>
            The mean of the skill belief.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Skills.MuSigmaSkill.m_dSigma">
            <summary>
            The standard deviation of the skill belief.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Skills.MuSigmaSkill.#ctor(System.Double,System.Double)">
            <summary>
            Constructor which initialises mean and standard deviation of the skill belief.
            </summary>
            <param name="dMu">Mean of the skill belief.</param>
            <param name="dSigma">Standard deviation of the skill belief.</param>
        </member>
        <member name="M:MSRC.Ranking.Skills.MuSigmaSkill.GetLevel(System.Double)">
            <summary>
            Skill level of the player. The skill level is obtained by mutliplying the skill points by dScaling and making 
            sure it never gets negative or above 50.
            </summary>
            <param name="dScaling">A scaling factor that is applied to the MuSigma skill points.</param>
            <returns>The level between 0 and 50.</returns>
        </member>
        <member name="M:MSRC.Ranking.Skills.MuSigmaSkill.GetFractionalLevel(System.Double)">
            <summary>
            Fractional skill level of the player.
            </summary>
            <param name="dScaling">A scaling factor that is applied to the MuSigma skill points.</param>
            <returns>The fractional part of the skill points into the level.</returns>
        </member>
        <member name="P:MSRC.Ranking.Skills.MuSigmaSkill.Mu">
            <summary>
            The mean of the skill belief.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Skills.MuSigmaSkill.Sigma">
            <summary>
            The standard deviation of the skill belief.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Skills.MuSigmaSkill.Points">
            <summary>
            Skill points of the player. 
            </summary>
            <remarks>The skill points of the player is the lower 99% quantile of the skill belief. This is a very conservative 
            estimate of the true skill of a player and should always lower bound the true skill.</remarks>
        </member>
        <member name="T:MSRC.Ranking.PlayerSkills">
            <summary>
            A class which manages a chronological series of skills for a player. The date of a skill 
            will mean that the skill is valid until this date (including it) but nothing will be known 
            afterwards. Note that this class will only allow inserting new skills <c>after</c> the last 
            inserted skill. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_aPlayerSkillList">
            <summary>
            A variable sized list of skills.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_aDatesList">
            <summary>
            A variable sized list of dates at which the skills are valid.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_iMaxLength">
            <summary>
            The maximal length of the array lists. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkills.m_iCurrentElementIndex">
            <summary>
            The index of the current element.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.#ctor">
            <summary>
            Construcuts a variable sized list of skills of given maximal length.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.#ctor(System.Int32)">
            <summary>
            Construcuts a variable sized list of skills of given maximal length.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the skill list is shorter than two elements.</exception>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.AddSkill(MSRC.Ranking.Skill,System.DateTime)">
            <summary>
            Adds a new skill valid at a specified date.
            </summary>
            <param name="aSkill">The new skill.</param>
            <param name="aDate">Time at which the skill is valid.</param>
            <remarks>The date of a skill will mean that the skill is valid until this date (including it) but 
            nothing will be known afterwards.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <c>aDate</c>is before or at the latest inserted skill time.</exception>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.Clear">
            <summary>
            Clears (empties) the list of player skill.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkills.GetLatestSkill(System.DateTime)">
            <summary>
            Gets the latest skill until (and including) a specific date.
            </summary>
            <param name="aDate">The target date.</param>
            <returns>The skill that is nearest in the past to the target data or null if there is no skill.</returns>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.LatestSkill">
            <summary>
            The latest skill (or null if the list of skills is empty).
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.LatestDate">
            <summary>
            The latest date (or 0 ticks if the list of skills is empty).
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.NumberOfSkills">
            <summary>
            Total number of skills.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.Skills">
            <summary>
            The list of skills sorted by chronologically.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.PlayerSkills.Dates">
            <summary>
            The sorted list of dates.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.PlayerSkillsList">
            <summary>
            A class that manages list of skills indexed by players. Each player will be identified by a unqiue player ID. This
            list is managing a chronologically sorted list of skills for each player. The PlayerSkills class and this class should not be confused: 
            Whereas the PlayerSkills class manages all skills of a single player in time, this class manages a list of PlayerSkills for all players.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.PlayerSkillsList.m_aSkillsList">
            <summary>
            A variable sized mapping between player IDs and player skills.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.#ctor">
            <summary>
            Constructs a variable sized list of skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.Clear">
            <summary>
            Clears (empties) the list of skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.ClearPlayerSkills">
            <summary>
            Clears (empties) the chronologically sorted list of skills for each player but retains
            its own internal list of skill lists.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.AddPlayerSkills(MSRC.Ranking.PlayerSkills,System.Int32)">
            <summary>
            Adds a the chronologically sorted list of skills for a new player with a specified unique player index.
            </summary>
            <param name="aPlayerSkills">A chronologically sorted list of skills for the player.</param>
            <param name="iPlayerID">The unique player ID.</param>
        </member>
        <member name="M:MSRC.Ranking.PlayerSkillsList.GetPlayerSkills(System.Int32)">
            <summary>
            Gets the list of skills for a given player ID.
            </summary>
            <param name="iPlayerID">The unique player ID.</param>
            <returns>The chronologically sorted list of skills for the player with the specified ID or null if 
            the player does not exists.</returns>
        </member>
        <member name="T:MSRC.Ranking.Ranking">
            <summary>
            A class that represents a ranking between n elements. In this class, rank 1 is assumed to be the highest rank. Moreover, it is possible
            that two elements are on the same rank. In this case, no rank gap is introduced; a valid ranking is thus 1,1,2,3 instead of 1,1,3,4.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Ranking.m_iRanks">
            <summary>
            The ranks of each element. Note that the ranks will always be between 1 and m_iRanks.Length.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Ranking.#ctor(System.Int32)">
            <summary>
            Constructs an identity ranking between a specified number of elements. The first element will be of highest rank and
            the last element will be of lowest rank.
            </summary>
            <param name="iNumberOfElements">Number of elements.</param>
        </member>
        <member name="M:MSRC.Ranking.Ranking.#ctor(System.Int32[])">
            <summary>
            Constructs a ranking based on the values given in an vector of nunbers.
            </summary>
            <param name="iElements">A list of integers.</param>
            <remarks>This method will have to call sorting routines so it may become slow when passed a long list of integers!</remarks>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Factorial(System.Int32)">
            <summary>
            Computes the factorial of n.
            </summary>
            <param name="n">The parameter <c>n</c>.</param>
            <returns>The factorial of <c>n</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <c>n</c> is too large to represent n! as a long.</exception>
        </member>
        <member name="M:MSRC.Ranking.Ranking.GetWinner(System.Int32,System.Int32)">
            <summary>
            Compares the rank of two elements.
            </summary>
            <param name="i">Index of the first element.</param>
            <param name="j">Index of the second element.</param>
            <returns>Returns +1 is the first element is of higher rank than the second element, -1 if the 
            second element is of higher rank than the first element, or 0 if both elements are of same rank.</returns>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Difference(MSRC.Ranking.Ranking)">
            <summary>
            Computes the difference to another ranking.
            </summary>
            <param name="aRanking">Ranking to be compared with.</param>
            <returns>A value between 0 and 1 indicating the difference between the two rankings.</returns>
            <remarks>The ranking difference will be computed as the fraction of pairs of elements where the two rankings disagree. This
            can be seen as the fractional difference between the number of swapping operations that bubble sort would take to sort each
            of the two rankings.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the rankings differ in the number of elements.</exception>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Sort(System.Int32[],System.Int32[])">
            <summary>
            Bubble sort of a list of items relative to a list of keys. 
            </summary>
            <param name="iKeys">List of keys (this will be sorted in ascending order).</param>
            <param name="iItems">List of items (this will be sorted in ascending order relative to the list of keys).</param>
            <remarks>This sort is slow but stable (as opposed to <seealso cref="M:System.Array.Sort(System.Array,System.Array)"/>.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Ranking.Sort(System.Int32[])">
            <summary>
            Bubble sort of a list of keys. 
            </summary>
            <param name="iKeys">List of keys (this will be sorted in ascending order).</param>
            <remarks>This sort is slow but stable (as opposed to <seealso cref="M:System.Array.Sort(System.Array,System.Array)"/>.</remarks>
        </member>
        <member name="P:MSRC.Ranking.Ranking.Indicies">
            <summary>
            Zero-based indicies which reflect the rankings.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Ranking.NumberOfElements">
            <summary>
            Number of elements in the ranking.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Ranking.NumberOfEquivalenceClasses">
            <summary>
            Number of equivalent rankings.
            </summary>
        </member>
        <member name="T:MSRC.Ranking.Team">
            <summary>
            A class to represent a team of players together with their scores, the fraction of total game length that the player 
            participated and the amount by which the players's skill should be updated. Each player will be represented by a 
            unique integer ID. The score will be an integer value. The fraction of game time will be a double value between
            0 and 1. The amount by which the players's skill should be updated will be a double value between 0 and 1.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aPlayerID">
            <summary>
            The variable size list of player ID's that form the team.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aScore">
            <summary>
            The variable size list of player scores for each player on the team. 
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aGameTimeFraction">
            <summary>
            The variable size list of player's fraction of the total game time that they participated.
            </summary>
        </member>
        <member name="F:MSRC.Ranking.Team.m_aUpdateFactors">
            <summary>
            The variable size list of player's update factors.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Team.#ctor(System.Int32)">
            <summary>
            Construcuts a new team with a given maximal number of players.
            </summary>
            <param name="iMaxNumberOfPlayers">Maximal number of players.</param>
            <remarks>If more than the specified number of players are added an exception will be thrown.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.#ctor">
            <summary>
            Construcuts a new team with a variable number of players.
            </summary>
        </member>
        <member name="M:MSRC.Ranking.Team.AddPlayer(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Adds a new player to the team.
            </summary>
            <param name="iPlayerID">Player ID of the new player.</param>
            <param name="iScore">Score of the new player.</param>
            <param name="dGameTimeFraction">Fraction of total game length that the player participated.</param>
            <param name="dUpdateFactor">Update factor for this player.</param>
            <returns>The player index of the added player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.AddPlayer(System.Int32,System.Int32,System.Double)">
            <summary>
            Adds a new player to the team.
            </summary>
            <param name="iPlayerID">Player ID of the new player.</param>
            <param name="iScore">Score of the new player.</param>
            <param name="dGameTimeFraction">Fraction of total game length that the player participated.</param>
            <returns>The player index of the added player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class. The update factor is set to 100%.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.AddPlayer(System.Int32,System.Int32)">
            <summary>
            Adds a new player to the team.
            </summary>
            <param name="iPlayerID">Player ID of the new player.</param>
            <param name="iScore">Score of the new player.</param>
            <returns>The player index of the added player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class. The fraction of total game length of participation and the update
            factor are set to 100%.
            </remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.GetPlayerID(System.Int32)">
            <summary>
            Get the player ID for a player at specified index.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The global player ID or -1 if the index is out of range.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
        </member>
        <member name="M:MSRC.Ranking.Team.GetPlayerScore(System.Int32)">
            <summary>
            Gets the score for the player at a specified index.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The score of the player.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the player index is out of range.</exception>
        </member>
        <member name="M:MSRC.Ranking.Team.GetPlayerGameTimeFraction(System.Int32)">
            <summary>
            Gets the fraction of game length that the player at a specified index participated.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The fraction of total game time of participation.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the player index is out of range.</exception>
        </member>
        <member name="M:MSRC.Ranking.Team.GetUpdateFactor(System.Int32)">
            <summary>
            Gets the update factor of a player.
            </summary>
            <param name="iPlayer">The player index.</param>
            <returns>The update factor.</returns>
            <remarks>The player index must not be confused with the player ID. The player index is a zero-based
            internal index used by this class and increases everytime a player is added.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the player index is out of range.</exception>
        </member>
        <member name="P:MSRC.Ranking.Team.NumberOfPlayers">
            <summary>
            Total number of players in the team.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.TeamScore">
            <summary>
            Score of the team.
            </summary>
            <remarks>The score of a team is always the the sum of the scores of all players in the team.</remarks>
        </member>
        <member name="P:MSRC.Ranking.Team.PlayerIDs">
            <summary>
            All player IDs for the entire team.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.PlayerScores">
            <summary>
            Scores for every player on the team.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.GameTimeFractions">
            <summary>
            Fraction of game length that each player has participated.
            </summary>
        </member>
        <member name="P:MSRC.Ranking.Team.UpdateFactors">
            <summary>
            Update factors for each player.
            </summary>
        </member>
        <member name="T:xonline.common.stfutil.AccountsUtil.CCNumber">
             <summary>
             *** FOR INTERNAL MICROSOFT TEST ONLY ***
             This file will generate and validate credit card numbers based on the checksum.
             The credit card numbers created by this class are for internal test only. They
             will pass the checksum requirement but they are NOT real credit cards and they
             are useless in production or outside of Microsoft.
             NEVER attempt to use these cards in production or outside of Microsoft. You will
             not be able to purchase anything and you will be committing FRAUD.
             Immediately upon completion of testing, you must discard the credit card number.
            
             Vendors under NDA can also use these cards for test purposes only. This generator
             should not used outside of the MS network.
             </summary>
        </member>
        <member name="T:xonline.common.stfutil.DirectDebitRandomizer">
            <summary>
            This class provides properties to generate random credit card numbers
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.#ctor">
            <summary>
            Default constructor - assumes France for the direct debit country
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.#ctor(System.String)">
            <summary>
            Uses the country provided to randomize on
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.#ctor(System.String,System.String)">
            <summary>
            Uses the country provided to randomize on
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.Randomize">
            <summary>
            Generates a random direct debit account number, bank code, branch code, etc.
            These values are in the various properties of this class and are synched with each other to provide a valid direct debit account.
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.RandomizeDirectDebitValues">
            <summary>
            Generates a random direct debit account number, bank code, branch code, etc.
            These values are in the various properties of this class and are synched with each other to provide a valid direct debit account.
            </summary>
        </member>
        <member name="M:xonline.common.stfutil.DirectDebitRandomizer.GetCheckDigitsForFranceAccount">
            <summary>
            Returns the Check Digits value based on the algorithm for a French direct debit account.
            </summary>
            <returns></returns>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.AccountNumber">
            <summary>
            The account number of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.AccountNumberLastFour">
            <summary>
            The last four digits of the account number
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.BankCode">
            <summary>
            The bank code of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.BranchCode">
            <summary>
            The branch code of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.CheckDigits">
            <summary>
            The checksum of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.Country">
            <summary>
            The country of the direct debit account
            </summary>
        </member>
        <member name="P:xonline.common.stfutil.DirectDebitRandomizer.Algorithm">
            <summary>
            Alogrithm used to generate acct number
            </summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.Reflect">
            <summary>Standard reflection response.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ResponseWait">
            <summary>Sleeps for param ms.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ThrowUnhandledException">
            <summary>Throws an unhandled exception for IIS to catch.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.Exit">
            <summary>Call the Exit function, killing the IIS process (maybe).</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ReturnStatus">
            <summary>Responds with the status code param.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.NoResponse">
            <summary>Does not send a response.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ReflectHeaders">
            <summary>Reflects the headers from the request into the response headers.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.OutputBody">
            <summary>The response body will be param bytes.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.Stress">
            <summary>A quick response that only contains the URL and query string.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ResponseXMLContentType">
            <summary>Changes the response to text/xml content type.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.AuthSGNoAAInfo">
            <summary>Does not do the AAInfo lookups for the AuthSG specifics.</summary>
        </member>
        <member name="F:xonline.common.protocol.TestFdReflectorRequest.Action.ReturnStatusAndResponseBody">
            <summary>Responds with the status code param.  Also place specific content in the response body.</summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveContentTest\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="livecontenttest" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveContentTest\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="livecontenttest" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveOfferTest\LiveOfferTest.xml ===
<?xml version="1.0" encoding="utf-8" ?> 
<stf>
    <LiveOfferTest>
        <DefaultToolsPath>d:\webroot\xbltools</DefaultToolsPath>
        <InputFilePath>.\InputFiles\LiveOffer</InputFilePath>
	<LiveOfferExe>LiveOffer.exe</LiveOfferExe>
	<LiveOfferXbox1Map>Suites\LiveOfferTest_Xbox1OfferMapping.txt</LiveOfferXbox1Map>
	<LiveOfferXbox360Map>Suites\LiveOfferTest_Xbox360OfferMapping.txt</LiveOfferXbox360Map>
	<LiveOfferXbox360DMPMap>Suites\LiveOfferTest_Xbox360DMPOfferMapping.txt</LiveOfferXbox360DMPMap>
    </LiveOfferTest>
</stf>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveMatchTest\objd\i386\LiveMatchTest.csproj.FileListAbsolute.txt ===
j:\xonline_main\target\debug\i386\LiveMatchTest\LiveMatchTest.dll
j:\xonline_main\target\debug\i386\LiveMatchTest\LiveMatchTest.pdb
j:\xonline_main\private\test\stftests\livematchtest\objd\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\test\stftests\livematchtest\objd\i386\LiveMatchTest.dll
j:\xonline_main\private\test\stftests\livematchtest\objd\i386\LiveMatchTest.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveMatchTest\obj\i386\LiveMatchTest.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\test\stftests\livematchtest\obj\i386\ResolveAssemblyReference.cache
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveOfferTest\LiveOfferTest_Xbox360DMPOfferMapping.txt ===
##This is only used for the 360 version if /overwriteDMPSettings is passed
# in.  These tables should be unaffected by LiveOffer otherwise.

MAPDEFINITION xbo:contentOffer/xbo:offerDMPInfo/xbo:sku/xbo:skuType
Revenue	      1
Promo	      2
END

# sku table.  This should only be checked if the overwritedmpsettings is set.
TABLE t_offer_skus ONEROW
xbo:contentOffer/xbo:offerDMPInfo/xbo:sku/xbo:skuID	int	i_sku_id
MAP xbo:contentOffer/xbo:offerDMPInfo/xbo:sku/xbo:skuType	int	i_sku_type_id
xbo:contentOffer/xbo:offerDMPInfo/xbo:sku/xbo:sku	nvarchar	vc_sku
xbo:contentOffer/xbo:offerDMPInfo/xbo:sku/xbo:friendlyName	nvarchar	vc_friendly_name
END

# campaign table.  Also, only if overwritedmpsettings is set
TABLE t_offer_campaigns ONEROW
xbo:contentOffer/xbo:offerDMPInfo/xbo:campaign/xbo:campaignID	int	i_campaign_id
xbo:contentOffer/xbo:offerDMPInfo/xbo:campaign/xbo:friendlyName	nvarchar	vc_friendly_name
END
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveOfferTest\LiveOfferTest_Xbox1OfferMapping.txt ===
#Xbox1 Offer Mapping
#Items that are commented out are not input by the sproc, and are not checked(i.e. their values could be anything)

TABLE t_offers ONEROW
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@offerID	bigint	bi_offer_id
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@consoleTypeID	tinyint	ti_console_type_id
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@startDate	datetime	dt_start_date   
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@endDate	datetime	dt_end_date
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@offerTypeID	int	i_offer_type_id
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@	int	i_offer_frequency_id  ?????
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@	tinyint	b_cancelable  ?????  Where does this come from
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@ESRB	int	i_ESRB_id
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@bitFilter	int	i_bitfilter
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@installSize	int	i_install_size
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@packageSize	int	i_package_size
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@symKey	varbinary(16)	vb_sym_key
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@policyFlags	int	i_policy_flags
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@billingSvcComponentID	nvarchar	vc_billing_svc_component_id
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@friendlyName	nvarchar(256)	vc_friendly_name
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@	smallint	si_global_offer_details  ??????
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@publicKey	varbinary(284)	vb_public_key
#change date time not checked.
END

TABLE t_title_offers ONEROW
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@titleID	int	i_title_id
xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@offerID	int	bi_offer_id
END

###if b_content_id is NOT NULL:
### insert into t_content
### insert into t_offer_content_details.

#for multiple identical tags, grab one that selects all of them
#the code will then verify each tag against the database, referring to
#the attributes through a relative path.

TABLE t_offer_descriptions MANYROWS
LIST xbo:XboxContentOffer/xbo:xboxOfferDescription
@liveOfferID	bigint	bi_offer_id
@descriptionIndex	int	i_description_index
@detailsBlob	varbinary(8000)	vb_enum_blob
END

TABLE t_offer_description_details MANYROWS
LIST xbo:XboxContentOffer/xbo:xboxOfferDescriptionDetails
@liveOfferID	bigint	bi_offer_id
@descriptionIndex	int	i_description_index
@order	int	i_order
@detailsBlob	varbinary(8000)	vb_details_blob
END

TABLE t_offer_locations MANYROWS
LIST xbo:XboxContentOffer/xbo:xboxOfferLocations
@offerID	bigint	bi_offer_id
@locationRank	int	i_location_rank
@XRL	nvarchar(4000)	vc_XRL
END

TABLE t_offer_regions MANYROWS
LIST xbo:XboxContentOffer/xbo:xboxOfferRegions
@liveOfferID	bigint	bi_offer_id
@countryID	tinyint	ti_country_id
@billingOfferID	nvarchar(36)	vc_billing_offer_id
@priceWhole	int	i_price_whole
@priceFractional	int	i_price_fractional
@specificOfferDetails	smallint	si_specific_offer_details
END
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveOfferTest\Xbox360OfferMapping.txt ===
##The parsing language is a bit...undocumented.  But the general format is that there will be
# a number of TABLE elements.  Each table can be checked for ONEROW or MANYROWS.  If there are
# MANYROWS, the next element is a LIST, which asks in the offer file which nodes are to be selected.
# For every node selected, an additional row is checked in the table.
#
# Afterwards a number of entries follow, containing the XPATH in the offer file, the data type in the table,
# and the column name the data should map to.  There are a few keywords that may preceed the mappings--these
# are special cases.
#
# MAP means the XPATH will look through a hashtable in code that maps strings to integers, and check for the integer in the table
# CONSTANT means it will check for just a value, and not look through the offer file.
#
# Error checking is virtually nonexistent.  i.e. if it doesn't parse, it may or may not tell you, and you may or may not get an error.
# This is a special purpose language, and is not meant for any purpose but offer verification.


TABLE t_content ONEROW
xbo:content/xbo:contentID	binary(20)	b_content_id
xbo:content/xbo:installSize	int	i_install_size
xbo:content/xbo:packageSize	int	i_package_size
xbo:content/xbo:friendlyName	nvarchar(256)	vc_friendly_name
xbo:content/xbo:symKey	varbinary(16)	vb_sym_key
xbo:content/xbo:publicKey	varbinary(284)	vb_public_key
END

#the STATIC keyword indicates that this data entry is not relative to the 
#rows that appear in the LIST.  That is, it is the same data value for every row.
TABLE t_content_locations MANYROWS
LIST xbo:content/xbo:contentLocation
ancestor::*/child::node()[name()=\"content\"]/child::node()[name()=\"contentID\"]	binary	b_content_id
rank	int	i_location_rank
xrl	nvarchar(4000)	vc_XRL
END

#the MAP keyword indicates that for items of this XPATH, the data must be mapped to a certain value
#before it is entered into the database.
TABLE t_offers ONEROW
MAP xbo:content/xbo:offerBasicInfo/xbo:consoleType	tinyint	ti_console_type_id
##Start date and end date within t_offers are hardcoded.  They are set to garbage dates.
#CONSTANT	2001:11:15	datetime	dt_start_date
#CONSTANT	3001:11:15	datetime	dt_end_date
MAP xbo:content/xbo:contentOffer/xbo:contentOfferType	int	i_offer_type_id
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@	int	i_offer_frequency_id  ?????
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@	tinyint	b_cancelable  ?????  Where does this come from
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@ESRB	int	i_ESRB_id
#CONSTANT	0	int	i_bitfilter
xbo:content/xbo:installSize	int	i_install_size
xbo:content/xbo:packageSize	int	i_package_size
###Symkey and publickey appear to be zeroed?
#xbo:content/xbo:symKey	varbinary(16)	vb_sym_key
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@policyFlags	int	i_policy_flags
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@billingSvcComponentID	nvarchar	vc_billing_svc_component_id
xbo:content/xbo:friendlyName	nvarchar(256)	vc_friendly_name
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@	smallint	si_global_offer_details  ??????
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@publicKey	varbinary(284)
#vb_public_key
#change date time not checked.
END

## Can there be more than one content per offer?
TABLE t_offer_content_details ONEROW
xbo:contentOffer/xbo:offerBasicInfo/xbo:offerID	bigint	bi_offer_id
xbo:contentOffer/xbo:offerContentInfo/xbo:contentID	binary	b_content_id
MAP xbo:contentOffer/xbo:offerContentInfo/xbo:licenseLevel	int	i_license_bits
END

TABLE t_offer_culture_details MANYROWS
LIST xbo:contentOffer/xbo:offerBasicInfo/xbo:offerCultureDetails
../child::node()[name()=\"offerID\"]	bigint	bi_offer_id
culture	int	i_culture_id
name	nvarchar(100)	vc_name
sellText	nvarchar(1000)	vc_sell_text
END

## We'll divide t_offer_regions by the four kinds of payments...  paymentTypePoints
TABLE t_offer_regions MANYROWS
LIST	xbo:contentOffer/xbo:offerBasicInfo/xbo:offerRegionInfo/xbo:paymentTypePoints
ancestor::*/child::node()[name()="offerID"]	bigint	bi_offer_id
../child::node()[name()="countryID"]	tinyint	ti_country_id
# tier:  GOLD=6, SILVER=3
MAP ../child::node()[name()="liveTier"]	int	i_tier_required
CONSTANT 4	i_payment_type_id	
../child::node()[name()="startDate"]	datetime	dt_start_date
../child::node()[name()="endDate"]	datetime	dt_end_date
#CONSTANT ''	nvarchar	vc_billing_offer_id
CONSTANT 0	int	i_price_whole
CONSTANT 0	int	i_price_fractional
CONSTANT 0	smallint si_specific_offer_details
END

## paymentTypeXboxToken...
TABLE t_offer_regions MANYROWS
LIST	xbo:contentOffer/xbo:offerBasicInfo/xbo:offerRegionInfo/xbo:paymentTypeXboxToken
ancestor::*/child::node()[name()="offerID"]	bigint	bi_offer_id
../child::node()[name()="countryID"]	tinyint	ti_country_id
# tier:  GOLD=6, SILVER=3
MAP ../child::node()[name()="liveTier"]	int	i_tier_required
CONSTANT 2	i_payment_type_id
../child::node()[name()="startDate"]	datetime	dt_start_date
../child::node()[name()="endDate"]	datetime	dt_end_date
CONSTANT ''	nvarchar	vc_billing_offer_id
CONSTANT 0	int	i_price_whole
CONSTANT 0	int	i_price_fractional
CONSTANT 0	smallint si_specific_offer_details
END

# sku table.  This should only be checked if the overwritedmpsettings is set.
TABLE t_offer_skus ONEROW
xbo:offerContent/xbo:offerDMPInfo/xbo:sku/xbo:skuID	int	i_sku_id
MAP xbo:offerContent/xbo:offerDMPInfo/xbo:sku/xbo:skuType	int	i_sku_type_id
xbo:offerContent/xbo:offerDMPInfo/xbo:sku/xbo:sku	nvarchar	vc_sku
xbo:offerContent/xbo:offerDMPInfo/xbo:sku/xbo:friendlyName	nvarchar	vc_friendly_name
END

# campaign table.  Also, only if overwritedmpsettings is set
TABLE t_offer_campaigns ONEROW
xbo:offerContent/xbo:offerDMPInfo/xbo:campaign/xbo:campaignID	int	i_campaign_id
xbo:offerContent/xbo:offerDMPInfo/xbo:campaign/xbo:friendlyName	nvarchar	vc_friendly_name
END
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveOfferTest\LiveOfferTest_Xbox360OfferMapping.txt ===
##The parsing language is a bit...undocumented.  But the general format is that there will be
# a number of TABLE elements.  Each table can be checked for ONEROW or MANYROWS or OPTIONAL.  If there are
# MANYROWS, the next element is a LIST, which asks in the offer file which nodes are to be selected.
# For every node selected, an additional row is checked in the table.  OPTIONAL was added to test so that 
# row may or may not exist.
#
# Afterwards a number of entries follow, containing the XPATH in the offer file, the data type in the table,
# and the column name the data should map to.  There are a few keywords that may preceed the mappings--these
# are special cases.
#
# CONSTANT means it will check for just a value, and not look through the offer file.
# MAP means the XPATH will look through a hashtable in code that maps
# strings to *integers*, and check for the integer in the table.  This table
# is created by a MAPDEFINITION element in the file.  The format for this
# is 
# MAPDEFINITION [xpathname]
# [string] [value]
# ...
# END
#
#
# Error checking is virtually nonexistent.  i.e. if it doesn't parse, it may or may not tell you, and you may or may not get an error.
# This is a special purpose language, and is not meant for any purpose but offer verification.

# LiveContent should check t_content table, not the LiveOffer test.
#TABLE t_content ONEROW
#xbo:content/xbo:contentID	binary(20)	b_content_id
#xbo:content/xbo:installSize	int	i_install_size
#xbo:content/xbo:packageSize	int	i_package_size
#xbo:content/xbo:friendlyName	nvarchar(256)	vc_friendly_name
#xbo:content/xbo:symKey	varbinary(16)	vb_sym_key
#xbo:content/xbo:publicKey	varbinary(284)	vb_public_key
#END

#the STATIC keyword indicates that this data entry is not relative to the 
#rows that appear in the LIST.  That is, it is the same data value for every row.
#TABLE t_content_locations MANYROWS
#LIST xbo:content/xbo:contentLocation
#ancestor::*/child::node()[name()="content"]/child::node()[name()="contentID"]	binary	b_content_id
#xbo:rank	int	i_location_rank
#xbo:xrl	nvarchar(4000)	vc_XRL
#END

MAPDEFINITION xbo:offerBasicInfo/xbo:consoleType
Xbox360	      2
END

##from offerutil.MapContentOfferType
MAPDEFINITION xbo:contentOfferType
GameContent	0x00000002
GameDemo	0x00000020
GameTrailer	0x00000040
Theme		0x00000080
FullGame	0x00000200
Tile		0x00000800
Arcade		0x00002000
Video		0x00004000
END

MAPDEFINITION xbo:contentOffer/xbo:offerContentInfo/xbo:licenseLevel
Unrestricted			0x004
RestrictedToUserAndMachine	0x003
RestrictedToMachine		0x002
END

#This table has many rows that are either not filled or are unclear.
#These have been commented out and placed after the table definition.
TABLE t_offers MANYROWS 
LIST  xbo:contentOffer
xbo:offerBasicInfo/xbo:offerID	int	bi_offer_id
MAP xbo:offerBasicInfo/xbo:consoleType	tinyint	ti_console_type_id
#MAP xbo:contentOfferType	int	i_offer_type_id
xbo:offerBasicInfo/xbo:friendlyName	nvarchar(256)	vc_friendly_name
END

##Policy flags requires an OR of both the offerEnumerationType and the
# license level.  This requires more parsing logic than is currently implemented.
#MAP xbo:contentOffer/xbo:offerContentInfo/xbo:licenseLevel	int	i_policy_flags

##Start date and end date within t_offers are hardcoded.  They are set to garbage dates.
#CONSTANT	2001:11:15	datetime	dt_start_date
#CONSTANT	3001:11:15	datetime	dt_end_date
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@billingSvcComponentID	nvarchar	vc_billing_svc_component_id
#CONSTANT	0	int	i_bitfilter
##install and package size has been zeroed as well.
#xbo:content/xbo:installSize	int	i_install_size
#xbo:content/xbo:packageSize	int	i_package_size
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@	int	i_offer_frequency_id  ?????
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@	tinyint	b_cancelable  ?????  Where does this come from
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@ESRB	int	i_ESRB_id
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@	smallint	si_global_offer_details  ??????
###Symkey and publickey appear to be zeroed?
#xbo:content/xbo:symKey	varbinary(16)	vb_sym_key
#xbo:XboxContentOffer/xbo:xboxOfferBasicInfo/@publicKey	varbinary(284)	vb_public_key
#change date time not checked.



## Can there be more than one content per offer?
TABLE t_offer_content_details ONEROW
xbo:contentOffer/xbo:offerBasicInfo/xbo:offerID	bigint	bi_offer_id
xbo:contentOffer/xbo:offerContentInfo/xbo:contentID	binary	b_content_id
xbo:contentOffer/xbo:offerContentInfo/xbo:licenseExtensionBits	int	i_license_bits
END

TABLE t_offer_culture_details MANYROWS
LIST xbo:contentOffer/xbo:offerBasicInfo/xbo:offerCultureDetails
../child::node()[name()="offerID"]	bigint	bi_offer_id
xbo:culture	int	i_culture_id
xbo:name	nvarchar(100)	vc_name
xbo:sellText	nvarchar(1000)	vc_sell_text
END

MAPDEFINITION ../child::node()[name()="liveTier"]
Silver	      3
Gold	      6
END

## We'll divide t_offer_regions by the four kinds of payments...  paymentTypePoints
TABLE t_offer_regions MANYROWS
LIST	xbo:contentOffer/xbo:offerBasicInfo/xbo:offerRegionInfo/xbo:paymentTypePoints
ancestor::*/child::node()[name()="offerID"]	bigint	bi_offer_id
../child::node()[name()="countryID"]	tinyint	ti_country_id
MAP ../child::node()[name()="liveTier"]	int	i_tier_required
CONSTANT 4	int	i_payment_type_id	
../child::node()[name()="startDate"]	datetime	dt_start_date
../child::node()[name()="endDate"]	datetime	dt_end_date
CONSTANT ''	NOADDQUOTES	vc_billing_offer_id
CONSTANT 0	int	i_price_whole
CONSTANT 0	int	i_price_fractional
CONSTANT 0	smallint si_specific_offer_details
END

## paymentTypeXboxToken...
TABLE t_offer_regions MANYROWS
LIST	xbo:contentOffer/xbo:offerBasicInfo/xbo:offerRegionInfo/xbo:paymentTypeXboxToken
ancestor::*/child::node()[name()="offerID"]	bigint	bi_offer_id
../child::node()[name()="countryID"]	tinyint	ti_country_id
MAP ../child::node()[name()="liveTier"]	int	i_tier_required
CONSTANT 2	int	i_payment_type_id
../child::node()[name()="startDate"]	datetime	dt_start_date
../child::node()[name()="endDate"]	datetime	dt_end_date
CONSTANT ''	NOADDQUOTES	vc_billing_offer_id
CONSTANT 0	int	i_price_whole
CONSTANT 0	int	i_price_fractional
CONSTANT 0	smallint si_specific_offer_details
END

## Consumables...
TABLE t_offer_consumables OPTIONAL
TEST    xbo:contentOffer/xbo:offerConsumableInfo
xbo:contentOffer/xbo:offerBasicInfo/xbo:offerID	bigint	bi_offer_id
xbo:contentOffer/xbo:offerConsumableInfo/xbo:assetID int i_asset_id
xbo:contentOffer/xbo:offerConsumableInfo/xbo:quantity int i_quantity
END
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveOfferTest\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="liveoffertest" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveStats\LiveStats.xml ===
<?xml version="1.0" encoding="utf-8" ?> 
<stf>
    <LiveStatsTest>
        <DefaultToolPath>d:\webroot\xbltools</DefaultToolPath>
        <InputFilePath>.\InputFiles\LiveStats</InputFilePath>
        <TempDirectoryPath>.\LiveStatsTempFiles</TempDirectoryPath>
    </LiveStatsTest>
</stf>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveOfferTest\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="liveoffertest" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveStats\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="livestats" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveStats\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="livestats" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveTitle\LiveTitle.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?> 
<stf>
    <LiveTitleTest>
        <DefaultToolPath>d:\webroot\xbltools</DefaultToolPath>
        <InputFilePath>.\InputFiles\LiveTitle</InputFilePath>
        <TempDirectoryPath>.\LiveTitleTempFiles</TempDirectoryPath>
    </LiveTitleTest>
</stf>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveTitle\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="livetitle" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\LiveTitle\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="livetitle" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="migrateusertest" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\migrateusertest\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="migrateusertest" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\MsgToolTest.xml ===
<?xml version="1.0" encoding="utf-8" ?>
<stf>
    <MsgToolTest>
        <DefaultToolPath>D:\Webroot\xbltools</DefaultToolPath>
        <InputFilePath>..\InputFiles\MsgTool</InputFilePath>
        <TempDirectoryPath>\MsgToolTemp</TempDirectoryPath>
    <TitleID>0xFFFE07E3</TitleID>
    <StringID>1</StringID>
    <TestStrings>
        <TestString lang="EN">This is a test</TestString>
        <TestString lang="JP">わかりません</TestString>
    </TestStrings>
    </MsgToolTest>
</stf>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\obj\i386\MsgTool.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\test\stftests\msgtool\obj\i386\ResolveAssemblyReference.cache
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\MsgTool\objd\i386\MsgTool.csproj.FileListAbsolute.txt ===
j:\xonline_main\target\debug\i386\MsgTool\MsgToolTest.dll
j:\xonline_main\target\debug\i386\MsgTool\MsgToolTest.pdb
j:\xonline_main\private\test\stftests\msgtool\objd\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\test\stftests\msgtool\objd\i386\MsgToolTest.dll
j:\xonline_main\private\test\stftests\msgtool\objd\i386\MsgToolTest.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\readme.txt ===
This is the PC side of the LivePC component of H2.  It can run either as a console or service (separate apps) and is built out to xboxtest\h2pcext with the correct directory structure.

A sample test extension is included that is used to verify functionality and act as a demonstration of the system working.

The interface is also checked in as a library directly into the xbox live tree and the two should be kept in sync.  This is to support building extensions that rely on live specific functionality (namely stf).

The premise is relatively straightforward:
The client side in LivePC has a function called CallCommand that takes the name of the library, the method, parameter types, and the parameter values.  It has an internal lookup table to identify which ip address to talk to for a given library (so functionality can be distributed).  It sends the package to the service or console application.

The app then looks up the library name in the list of test extensions that it possesses.  If it is found it then looks up a public function that has the corresponding parameter list types as defined by the client in the call.  If it is found it makes the function call and packages up the return result to return to the client.

Note that at present not all types are supported.  There will also be an initial exchange that isn't implemented yet on the connect call that will be the transfer of identity information to the service regarding the characteristics of the client (such as software and hardware version (latter only if possible), other details, etc).  This can then be used for logging connection information about a particular client.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="h2pcapp" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Console\_THIS_FOLDER_OBSOLETE.txt ===
The pcext Console application has been merged into a combined Console / Service application in:

	private\test\stftests\pcext\app

12/10/2005 a-jolyn
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\AppNew\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="h2pcapp" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\TestExtension\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="testextension" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Extensions\TestExtension\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="testextension" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\pcext\Service\_THIS_FOLDER_OBSOLETE.txt ===
The pcext Service application has been merged into a combined Console / Service application in:

	private\test\stftests\pcext\app

12/10/2005 a-jolyn
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ProfileReg\ProfReg.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?>
<Tests>
	<ProfReg>
		<Manlogpath>
			<LogPath LP="C:\LogPath"/> 
		</Manlogpath>
		<ManFirstName>
			
			<FirstName FN1="唱歌"/>
			<FirstName FN1="ジョージ"/>
			<FirstName FN1="馬鹿"/>
			<FirstName FN1="ブッシュ"/>
			<FirstName FN1="Michael"/>
			<FirstName FN1="Ringo"/>
			<FirstName FN1="Gerbal"/>
			<FirstName FN1="Hamster"/>
			<FirstName FN1="Max"/>
			<FirstName FN1="HaloGuy"/>
			<FirstName FN1="Davis"/>
			<FirstName FN1="Dave"/>
			<FirstName FN1="Eadoin"/>
			<FirstName FN1="Finola"/>
			<FirstName FN1="Galvin"/>
			<FirstName FN1="Connor"/>
			<FirstName FN1="Connar"/>
			<FirstName FN1="Conner"/>
			<FirstName FN1="Firstn18"/>
			<FirstName FN1="ウィリアム"/>
			<FirstName FN1="First20"/>
			<FirstName FN1="First21"/>
			<FirstName FN1="First22"/>
			<FirstName FN1="First23"/>
			<FirstName FN1="アンドリュー"/>
			<FirstName FN1="ジョン"/>
			
		</ManFirstName>
		<ManMiddleName>
			<MiddleName MN="Midname1"/>
			<MiddleName MN="Midname2"/>
			<MiddleName MN="Midname3"/>
			<MiddleName MN="abcdefghttp://www.msnbc.compqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"/>
			<MiddleName MN="Midname5"/>
			<MiddleName MN="Midname6"/>
			<MiddleName MN="Midname7"/>
			<MiddleName MN="Midname8"/>
			<MiddleName MN="Midname9"/>
			<MiddleName MN="Midname10"/>
			<MiddleName MN="Midname11"/>
			<MiddleName MN="Midname12"/>
			<MiddleName MN="Midname13"/>
			<MiddleName MN="Midname14"/>
			<MiddleName MN="Midname15"/>
			<MiddleName MN="Midname16"/>
			<MiddleName MN="Midname17"/>
			<MiddleName MN="Midname18"/>
			<MiddleName MN="Midname19"/>
			<MiddleName MN="Midname20"/>
			<MiddleName MN="Midname21"/>
			<MiddleName MN="Midname22"/>
			<MiddleName MN="Midname23"/>
			<MiddleName MN="Midname24"/>
		</ManMiddleName>
		<ManLastName>
			<LastName LN="Wilbur"/>
			<LastName LN="Olsons1"/>
			<LastName LN="LastName3"/>
			<LastName LN="LastName4"/>
			<LastName LN=""/>
			<LastName LN="李"/>
			<LastName LN="金"/>
			<LastName LN="LastName5"/>
			<LastName LN="LastName6"/>
			<LastName LN="LastName7"/>
			<LastName LN="LastName8"/>
			<LastName LN="LastName9"/>
			<LastName LN="LastName10"/>
			<LastName LN="LastName11"/>
			<LastName LN="LastName12"/>
			<LastName LN="LastName13"/>
			<LastName LN="LastName14"/>
			<LastName LN="LastName15"/>
			<LastName LN="LastName16"/>
			<LastName LN="LastName17"/>
			<LastName LN="LastName18"/>
			<LastName LN="LastName19"/>
			<LastName LN="LastName20"/>
			<LastName LN="LastName21"/>
			<LastName LN="LastName22"/>
			<LastName LN="LastName23"/>
		</ManLastName>
		<ManPostalCode>
			<PostalCode PCode="98007"/>
			<PostalCode PCode="99999-9999"/>
			<PostalCode PCode="abc"/>
			<PostalCode PCode="9800888123"/>
			<PostalCode PCode=""/>
			<PostalCode PCode="na"/>
			<PostalCode PCode="na"/>
			<PostalCode PCode="n/a"/>
			<PostalCode PCode="http://www.cnn.com"/>
			<PostalCode PCode="http://prep.xbox.com"/>
			<PostalCode PCode="c:\windows\notepad.exe"/>
			<PostalCode PCode="5"/>
			<PostalCode PCode="5"/>
			<PostalCode PCode="99"/>
			<PostalCode PCode="5"/>
			<PostalCode PCode="5"/>
			<PostalCode PCode="5"/>			
			<PostalCode PCode="5"/>
			<PostalCode PCode="5"/>
			<PostalCode PCode="98008"/>
			<PostalCode PCode="99999-9999"/>
			<PostalCode PCode="abc"/>
			<PostalCode PCode="9800888123"/>
			<PostalCode PCode="1"/>
		</ManPostalCode>
		<ManFavoriteGenre>
			<FavoriteGenre FavGenre="Action"/>
			<FavoriteGenre FavGenre="Adventure"/>
			<FavoriteGenre FavGenre="Compilations"/>
			<FavoriteGenre FavGenre="Family"/>
			<FavoriteGenre FavGenre="Fighting"/>
			<FavoriteGenre FavGenre="-Select-"/>			
			<FavoriteGenre FavGenre="Platform"/>
			<FavoriteGenre FavGenre="Racing"/>
			<FavoriteGenre FavGenre="Role Playing"/>
			<FavoriteGenre FavGenre="Shooter"/>
			<FavoriteGenre FavGenre="Simulation"/>
			<FavoriteGenre FavGenre="Sports"/>
			<FavoriteGenre FavGenre="Strategy"/>
			<FavoriteGenre FavGenre="Action"/>
			<FavoriteGenre FavGenre="Adventure"/>
			<FavoriteGenre FavGenre="Compilations"/>
			<FavoriteGenre FavGenre="Family"/>
			<FavoriteGenre FavGenre="Fighting"/>
			<FavoriteGenre FavGenre="Platform"/>
			<FavoriteGenre FavGenre="Racing"/>
			<FavoriteGenre FavGenre="Role Playing"/>
			<FavoriteGenre FavGenre="Shooter"/>
			<FavoriteGenre FavGenre="Simulation"/>
			<FavoriteGenre FavGenre="Sports"/>
			<FavoriteGenre FavGenre="Strategy"/>
		</ManFavoriteGenre>
		<ManFavoriteGame>
			<FavoriteGame FavGame="007: Agent Under Fire"/>
			<FavoriteGame FavGame="707: Everything or Nothing"/>
			<FavoriteGame FavGame="007: NightFire"/>
			<FavoriteGame FavGame="4x4 EVO 2"/>
			<FavoriteGame FavGame="Aggressive Inline"/>
			<FavoriteGame FavGame="AirForce Delta Storm"/>
			<FavoriteGame FavGame="Alias"/>
			<FavoriteGame FavGame="Aliens Vs. Predator: Extinction"/>
			<FavoriteGame FavGame="All-Star Baseball 2003"/>
			<FavoriteGame FavGame="All-Star Baseball 2004"/>
			<FavoriteGame FavGame="All-Star Baseball 2005"/>
			<FavoriteGame FavGame="Alter Echo"/>
			<FavoriteGame FavGame="Amped 2"/>
			<FavoriteGame FavGame="Amped: Freestyle Snowboarding"/>
			<FavoriteGame FavGame="Antz Extreme Racing"/>
			<FavoriteGame FavGame="APEX"/>
			<FavoriteGame FavGame="Arctic Thunder"/>
			<FavoriteGame FavGame="Armada 2: Star Command"/>
			<FavoriteGame FavGame="Armed &amp; Dangerous"/>
			<FavoriteGame FavGame="Arx Fatalis"/>
			<FavoriteGame FavGame="ATV: Quad Power Racing 2"/>
			<FavoriteGame FavGame="Azurik: Rise of Perathia"/>
			<FavoriteGame FavGame="Baldurs Gate : Dark Alliance"/>
			<FavoriteGame FavGame="Baldurs Gate Dark Alliance II"/>
			<FavoriteGame FavGame="Barbarian"/>
			<FavoriteGame FavGame="Barbie Horse Adventures: Wild Horse Rescue"/>
			<FavoriteGame FavGame="Batman Vengeance"/>
			<FavoriteGame FavGame="Batman: Dark Tomorrow"/>
			<FavoriteGame FavGame="Batman: Rise of Sin Tzu"/>
			<FavoriteGame FavGame="Battle Engine Aquila"/>
			<FavoriteGame FavGame="Battlestar Galactica"/>
			<FavoriteGame FavGame="BC"/>
		</ManFavoriteGame>
		<ManConsoleSerialNbr>
			<ConsoleSerialNbr CSN="695595333906"/>
			<ConsoleSerialNbr CSN="695591733906"/>
			<ConsoleSerialNbr CSN="695590133906"/>
			<ConsoleSerialNbr CSN="695589733906"/>
			<ConsoleSerialNbr CSN="695588133906"/>
			<ConsoleSerialNbr CSN="695587233906"/>
			<ConsoleSerialNbr CSN="695586333906"/>
			<ConsoleSerialNbr CSN="695585433906"/>
			<ConsoleSerialNbr CSN="695584533906"/>
			<ConsoleSerialNbr CSN="695581133906"/>
			<ConsoleSerialNbr CSN="695580233906"/>
			<ConsoleSerialNbr CSN="695579133906"/>
			<ConsoleSerialNbr CSN="695578233906"/>
			<ConsoleSerialNbr CSN="695577333906"/>
			<ConsoleSerialNbr CSN="695576433906"/>
			<ConsoleSerialNbr CSN="695575533906"/>
			<ConsoleSerialNbr CSN="695574633906"/>
			<ConsoleSerialNbr CSN="695573733906"/>
			<ConsoleSerialNbr CSN="695571233906"/>
			<ConsoleSerialNbr CSN="695570333906"/>
			<ConsoleSerialNbr CSN="695569233906"/>		
			<ConsoleSerialNbr CSN="695594433906"/>
			<ConsoleSerialNbr CSN="695593533906"/>
			<ConsoleSerialNbr CSN="695592633906"/>
			<ConsoleSerialNbr CSN="695684433906"/>
			<ConsoleSerialNbr CSN="695608133906"/>
			<ConsoleSerialNbr CSN="695609733906"/>
			<ConsoleSerialNbr CSN="695611733906"/>
			<ConsoleSerialNbr CSN=""/>
			<ConsoleSerialNbr CSN="695612633906"/>
			<ConsoleSerialNbr CSN="695614433906"/>
			<ConsoleSerialNbr CSN="695677233906"/>
			<ConsoleSerialNbr CSN="695678133906"/>
			<ConsoleSerialNbr CSN="695690733906"/>
			<ConsoleSerialNbr CSN="695606333906"/>
			<ConsoleSerialNbr CSN="101732740102"/>
			<ConsoleSerialNbr CSN="695689633906"/>			
			<ConsoleSerialNbr CSN="695681733906"/>
			<ConsoleSerialNbr CSN="101734540102"/>
			<ConsoleSerialNbr CSN="101735440102"/>
			<ConsoleSerialNbr CSN="695691633906"/>
			<ConsoleSerialNbr CSN="695604533906"/>   
			<ConsoleSerialNbr CSN="695607233906"/>
			<ConsoleSerialNbr CSN="695682633906"/>
			<ConsoleSerialNbr CSN="695685333906"/>
			<ConsoleSerialNbr CSN="101729140102"/>
			<ConsoleSerialNbr CSN="101730240102"/>
			<ConsoleSerialNbr CSN="101731140102"/>
			<ConsoleSerialNbr CSN="101733640102"/>
		</ManConsoleSerialNbr>
		<ManRegistrationSourceID>
			<RegistrationSourceID RSI="0"/>
			<RegistrationSourceID RSI="1"/>
			<RegistrationSourceID RSI="2"/>
			<RegistrationSourceID RSI="3"/>
			<RegistrationSourceID RSI="4"/>
			<RegistrationSourceID RSI="5"/>
			<RegistrationSourceID RSI="6"/>
			<RegistrationSourceID RSI="7"/>
			<RegistrationSourceID RSI="8"/>
			<RegistrationSourceID RSI=""/>
			<RegistrationSourceID RSI="0"/>
			<RegistrationSourceID RSI="1"/>
			<RegistrationSourceID RSI="2"/>
			<RegistrationSourceID RSI="3"/>
			<RegistrationSourceID RSI="4"/>
			<RegistrationSourceID RSI="5"/>
			<RegistrationSourceID RSI="6"/>
			<RegistrationSourceID RSI="7"/>
			<RegistrationSourceID RSI="8"/>
			<RegistrationSourceID RSI="9"/>
			<RegistrationSourceID RSI="0"/>
			<RegistrationSourceID RSI="1"/>
			<RegistrationSourceID RSI="2"/>
			<RegistrationSourceID RSI="3"/>
			<RegistrationSourceID RSI="4"/>
			<RegistrationSourceID RSI="5"/>
			<RegistrationSourceID RSI="6"/>
			<RegistrationSourceID RSI="7"/>
			<RegistrationSourceID RSI="8"/>
			<RegistrationSourceID RSI="9"/>
		</ManRegistrationSourceID>
		<ManEmailAddress>
			<EmailAddress EMAIL="dcu0120@hotmail.com"/>
			<EmailAddress EMAIL="a@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="a@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu.hotmail.com"/>
			<EmailAddress EMAIL="@prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="a@b.net"/>
			<EmailAddress EMAIL="b@a.net"/>
			<EmailAddress EMAIL="a@cnn.com"/>
			<EmailAddress EMAIL="abcdefghttp://www.msnbc.compqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>			
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@netscape.net"/>
			<EmailAddress EMAIL="prepdbu@aol.com"/>
			<EmailAddress EMAIL="prepdbu@verizon.net"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="a@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu.hotmail.com"/>
			<EmailAddress EMAIL="1@prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>			
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@hotmail.com"/>
			<EmailAddress EMAIL="prepdbu@yahoo.com"/>
			<EmailAddress EMAIL="prepdbu@netscape.net"/>
			<EmailAddress EMAIL="prepdbu@aol.com"/>
			<EmailAddress EMAIL="prepdbu@verizon.net"/>
		</ManEmailAddress>
		<ManAddress1>
			<Address1 Address1="111 first Street"/>
			<Address1 Address1="222 Second Street"/>
			<Address1 Address1="333 third street"/>
			<Address1 Address1="444 fourth street"/>
			<Address1 Address1="555 fifth street"/>
			<Address1 Address1="666 sixth street"/>
			<Address1 Address1="777 seventh street"/>
			<Address1 Address1="888 eighth Street"/>
			<Address1 Address1="999 nineth Street"/>
			<Address1 Address1="1010 tenth Street"/>
			<Address1 Address1="abcdefghttp://www.msnbc.compqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@hotmail.comabcdefghttp://www.msnbc.compqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@hotmail.com"/>
			<Address1 Address1="1212 twelve Street"/>
			<Address1 Address1="1313 thirteen Street"/>
			<Address1 Address1="1414 fourteen Street"/>
			<Address1 Address1="1515 fifteen Street"/>
			<Address1 Address1="1616 sixteen Street"/>
			<Address1 Address1="1717 seventeen Street"/>
			<Address1 Address1="1818 eighteen Street"/>
			<Address1 Address1="1919 nineteen Street"/>			
			<Address1 Address1="2020 twenty Street"/>
			<Address1 Address1="2121 twentyfirst Street"/>
			<Address1 Address1="2222 twentytwo Street"/>
			<Address1 Address1="2323 twentythree Street"/>
			<Address1 Address1="2424 twentyfour Street"/>
			<Address1 Address1="2525 twentyfive Street"/>
			<Address1 Address1="2626 twnetysix Street"/>
			<Address1 Address1="2727 twentyseven Street"/>
		</ManAddress1>	
		<ManCity>
			<City city="CityName1"/>
			<City city="CityName2"/>
			<City city="CityName3"/>
			<City city="CityName4"/>
			<City city="CityName5"/>
			<City city="CityName6"/>
			<City city="CityName7"/>
			<City city="CityName8"/>
			<City city="CityName9"/>
			<City city="CityName10"/>
			<City city="CityName11"/>
			<City city="abcdefghttp://www.msnbc.comc:\windows\notepad.exepqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@hotmail.comabcdefghttp://www.msnbc.compqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@hotmail.com"/>
			<City city="CityName13"/>
			<City city="CityName14"/>
			<City city="CityName15"/>
			<City city="CityName16"/>
			<City city="CityName17"/>
			<City city="CityName18"/>
			<City city="CityName19"/>
			<City city="CityName20"/>
			<City city="CityName21"/>
			<City city="CityName22"/>
			<City city="CityName23"/>
			<City city="CityName24"/>
			<City city="CityName25"/>
			<City city="CityName26"/>
			<City city="CityName27"/>
			<City city="CityName28"/>
			<City city="CityName29"/>
			<City city="CityName30"/>
		</ManCity>
		<ManPhone>
			<Phone Ph="111-111-1111"/>
			<Phone Ph="222-222-2222"/>
			<Phone Ph="333-333-3333"/>
			<Phone Ph="444-444-4444"/>
			<Phone Ph="555-555-5555"/>
			<Phone Ph="666-666-6666"/>
			<Phone Ph="777-777-7777"/>
			<Phone Ph="888-888-8888"/>
			<Phone Ph="999-999-9999y"/>
			<Phone Ph="1010-1010-1010"/>
			<Phone Ph="1111-1111-1111"/>
			<Phone Ph="77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777"/>
			<Phone Ph="1212-121-1212"/>
			<Phone Ph="131-313-1313"/>
			<Phone Ph="141-414-1414"/>
			<Phone Ph="151-515-1515"/>
			<Phone Ph="161-616-1616"/>
			<Phone Ph="171-717-1717"/>
			<Phone Ph="181-818-1818"/>
			<Phone Ph="191-919-1919"/>
			<Phone Ph="202-020-2020"/>
			<Phone Ph="212-212-1212"/>
			<Phone Ph="1-222-222-2222"/>
			<Phone Ph="232-323-2323"/>
			<Phone Ph="242-424-2424"/>
			<Phone Ph="252-525-2525"/>
		</ManPhone>
		<ManMobPhone>
			<MobPhone MPh="111-111-1111"/>
			<MobPhone MPh="222-222-2222"/>
			<MobPhone MPh="333-333-3333"/>
			<MobPhone MPh="444-444-4444"/>
			<MobPhone MPh="555-555-5555"/>
			<MobPhone MPh="666-666-6666"/>
			<MobPhone MPh="777-777-7777"/>
			<MobPhone MPh="888-888-8888"/>
			<MobPhone MPh="999-999-9999y"/>
			<MobPhone MPh="1010-1010-1010"/>
			<MobPhone MPh="1111-1111-1111"/>
			<MobPhone MPh="1212-121-1212"/>
<MobPhone MPh="77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777"/>
						
			<MobPhone MPh="141-414-1414"/>
			<MobPhone MPh="151-515-1515"/>
			<MobPhone MPh="161-616-1616"/>
			<MobPhone MPh="171-717-1717"/>
			<MobPhone MPh="181-818-1818"/>
			<MobPhone MPh="191-919-1919"/>
			<MobPhone MPh="202-020-2020"/>
			<MobPhone MPh="212-212-1212"/>
			<MobPhone MPh="1-222-222-2222"/>
			<MobPhone MPh="232-323-2323"/>
			<MobPhone MPh="242-424-2424"/>
			<MobPhone MPh="252-525-2525"/>
		</ManMobPhone>
		<ManGameCatSportsInd>		
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI=""/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
			<GameCatSportsInd GCSI="false"/>
			<GameCatSportsInd GCSI="true"/>
		</ManGameCatSportsInd>	
		<ManGameCatRolePlayInd>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI=""/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
			<GameCatRolePlayInd GCRI="true"/>
			<GameCatRolePlayInd GCRI="false"/>
		</ManGameCatRolePlayInd>
		<ManGameCatActionInd>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>			
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI=""/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>			
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>			
			<GameCatActionInd GCAI="false"/>
			<GameCatActionInd GCAI="true"/>
		</ManGameCatActionInd>
		<ManGameCatAdventureInd>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="http://www.cnn.com"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
			<GameCatAdventureInd GCAdI="false"/>
			<GameCatAdventureInd GCAdI="true"/>
		</ManGameCatAdventureInd>
		<ManGameCatStrategyInd>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="AAAAAAAAAAAAAAAAAAAAAAAAAAA"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
			<GameCatStrategyInd GCStrI="false"/>
			<GameCatStrategyInd GCStrI="true"/>
		</ManGameCatStrategyInd>
		<ManGameCatRacingInd>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="0x08001440"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
			<GameCatRacingInd GCRacI="false"/>
			<GameCatRacingInd GCRacI="true"/>
		</ManGameCatRacingInd>
		<ManGameCatOtherInd>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="XBOX LIVE RULES"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
			<GameCatOtherInd GCOI="true"/>
			<GameCatOtherInd GCOI="false"/>
		</ManGameCatOtherInd>	
		<ManGameLocPCInd>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC=""/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
			<GameLocPCInd GLPC="false"/>
			<GameLocPCInd GLPC="true"/>
		</ManGameLocPCInd>
		<ManGameLocWebInd>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>			
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>			
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC=""/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>			
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>			
			<GameLocWebInd GLWC="true"/>
			<GameLocWebInd GLWC="false"/>
			<GameLocWebInd GLWC="true"/>
		</ManGameLocWebInd>
		<ManGameLocConsoleInd>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>			
			<GameLocConsoleInd GLCI=""/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>
			<GameLocConsoleInd GLCI="true"/>
			<GameLocConsoleInd GLCI="false"/>			
		</ManGameLocConsoleInd>
		<ManGameLocPhoneInd>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI=""/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
			<GameLocPhoneInd GLPI="1"/>
			<GameLocPhoneInd GLPI="0"/>
		</ManGameLocPhoneInd>
		<ManConsolePlaceholderInd>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI=""/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
			<ConsolePlaceholderInd GPHI="1"/>
			<ConsolePlaceholderInd GPHI="0"/>
		</ManConsolePlaceholderInd>
		<ManValidRegistrationInd>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI=""/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
			<ValidRegistrationInd VRI="1"/>
			<ValidRegistrationInd VRI="0"/>
		</ManValidRegistrationInd>
		<ManInternetCon>
			<InternetCon ICon="Cable"/>
			<InternetCon ICon="DSL"/>
			<InternetCon ICon="T1/Lan"/>
			<InternetCon ICon="Dial-up modem"/>
			<InternetCon ICon="DSL"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="Cable"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="T1/Lan"/>
			<InternetCon ICon="Dial-up modem"/>
			<InternetCon ICon="DSL"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="Cable"/>
			<InternetCon ICon="T1/Lan"/>
			<InternetCon ICon="Dial-up modem"/>
			<InternetCon ICon="DSL"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="Cable"/>
			<InternetCon ICon="T1/Lan"/>
			<InternetCon ICon="Dial-up modem"/>
			<InternetCon ICon="DSL"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="Cable"/>
			<InternetCon ICon="T1/Lan"/>
			<InternetCon ICon="Dial-up modem"/>
			<InternetCon ICon="DSL"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="Cable"/>
			<InternetCon ICon="T1/Lan"/>
			<InternetCon ICon="Dial-up modem"/>
			<InternetCon ICon="DSL"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="Cable"/>
			<InternetCon ICon="T1/Lan"/>
			<InternetCon ICon="Dial-up modem"/>
			<InternetCon ICon="Dial-up modem"/>
			<InternetCon ICon="DSL"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="Cable"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="T1/Lan"/>
			<InternetCon ICon="Dial-up modem"/>
			<InternetCon ICon="DSL"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="Cable"/>
			<InternetCon ICon="T1/Lan"/>
			<InternetCon ICon="Dial-up modem"/>
			<InternetCon ICon="DSL"/>
			<InternetCon ICon="-Select-"/>
			<InternetCon ICon="Cable"/>
			<InternetCon ICon="T1/Lan"/>
		</ManInternetCon>
		<ManLastUpdateBy>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
			<LastUpdateBy LUB="012345678910111213141516171819"/>
			<LastUpdateBy LUB="191817161514131211109876543210"/>
		</ManLastUpdateBy>
		<ManRegions>
			<Regions IntChk="en-IE"/>
			<Regions IntChk="it-IT"/>
			<Regions IntChk="ja-JP"/>
			<Regions IntChk="ko-KR"/>
			<Regions IntChk="es-MX"/>
			<Regions IntChk="nl-NL"/>
			<Regions IntChk="en-NZ"/>
			<Regions IntChk="nb-NO"/>
			<Regions IntChk="de-AT"/>
			<Regions IntChk="pt-PT"/>
			<Regions IntChk="de-CH"/>
			<Regions IntChk="zh-SG"/>
			<Regions IntChk="fi-FI"/>
			<Regions IntChk="sv-SE"/>
			<Regions IntChk="zh-TW"/>
			<Regions IntChk="en-GB"/>
			<Regions IntChk="en-US"/>
		</ManRegions>
	</ProfReg>
</Tests>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\PropXQSTest\PropXQSTest.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?> 
<stf>
    <PropXQSTest>
        <DefaultToolPath>D:\webroot\xbltools</DefaultToolPath>
        <InputFilePath>InputFiles\PropXQS</InputFilePath>
        <TempDirectoryPath>\PropXQSTemp</TempDirectoryPath>
        <TestTitleID>0000b2d2</TestTitleID>
    </PropXQSTest>
</stf>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\QuickEnforcementTest.xml ===
<?xml version="1.0" encoding="utf-8" ?> 
<stf>
    <QuickEnforcementTest>
        <SQLE> inspectorgadget </SQLE>
        <DBEN> CommunityMgr </DBEN>
        <MAIL> xlcm@microsoft.com </MAIL>
        <SMTP> smtphost </SMTP>
        <WAIT> 1000 </WAIT>
        <CURL> http://inspectorgadget:13010/xsuppapi/cxsuppapi.asmx </CURL>
        <CERT> c:\xblob\webroot\xbltools\testnetclientcert.cer </CERT>
        <EXE> c:\xblob\webroot\xbltools\ </EXE>
    </QuickEnforcementTest>
</stf>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\QuickEnforcementTest_testnet.xml ===
<?xml version="1.0" encoding="utf-8" ?> 
<stf>
    <QuickEnforcementTest>
        <SQLE> XETESTSQL002</SQLE>
        <DBEN> CommunityMgr </DBEN>
        <MAIL> jeffng@xeclisxxx037.microsoft.com </MAIL>
        <SMTP> localhost </SMTP>
        <WAIT> 1000 </WAIT>
        <CURL> http://10.20.1.1:13010/xsuppapi/cxsuppapi.asmx </CURL>
        <CERT> E:\xonline\main\drop\debug\tools\QuickEnforcement\testnetclientcert.cer </CERT>
        <EXE> E:\xonline\main\drop\debug\tools\QuickEnforcement\ </EXE>
    </QuickEnforcementTest>
</stf>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\LiveLib.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?>
<livelib>
    <config>
        <currentEnvironment name="upgradenet-tg" />
        <countriesFile name="Countries.xml" />
        <passport site="kdc.test.xboxlive.com"  url="https://login.passport-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi" environment="INT"/>
    </config>

    <clients>
        <client type="Xenon">
            <!-- In a Direct Access environment, calls are made directly to servers.
                 This is used for Xblobs and when running inside TestNet. -->
            <transactions environmentType="DirectAccess" defaultTransactionType="FD">
                <transaction svcId="175" transactionType="Http" />
            </transactions>
            <!-- In a Test Gateway environment, calls are proxied through a Test Gateway.
                 This is used when running on CorpNet. -->
            <transactions environmentType="TestGateway" defaultTransactionType="TG">
                <transaction svcId="175" transactionType="Http" />
            </transactions>
        </client>
        <client type="Zune">
            <transactions environmentType="DirectAccess" defaultTransactionType="AA">
                <transaction svcId="175" transactionType="Http" />
            </transactions>
            <transactions environmentType="TestGateway" defaultTransactionType="TG">
                <transaction svcId="175" transactionType="Http" />
                <transaction svcId="177" transactionType="AA" />
            </transactions>
        </client>
    </clients>

    <environments>
        <environment name="testnet-tg" type="TestGateway">
            <defaultSchemaVersion major="6" minor="0" />
            <ipaddresses>
                <ipaddress svcId="25" host="10.198.102.154" portNum="80" vifc="authsg" />
                <ipaddress svcId="175" host="10.198.102.156" transactionType="Http" />
                <ipaddress svcId="*" host="10.198.102.212" transactionType="TG" />
            </ipaddresses>
        </environment>

        <environment name="stressnet-tg" type="TestGateway">
            <defaultSchemaVersion major="6" minor="0" />
            <ipaddresses>
                <ipaddress svcId="*" host="10.198.102.205" transactionType="TG" />
            </ipaddresses>
        </environment>

        <environment name="upgradenet-tg" type="TestGateway">
            <defaultSchemaVersion major="3" minor="0" />
            <ipaddresses>
                <ipaddress svcId="*" host="10.198.102.216" transactionType="TG" />
            </ipaddresses>
        </environment>

        <environment name="testnet-int" type="DirectAccess">
            <defaultSchemaVersion major="6" minor="0" />
            <ipaddresses>
                <ipaddress svcId="1" host="10.40.1.10" transactionType="FD" />
                <ipaddress svcId="4" host="10.40.1.7" transactionType="FD" />
                <ipaddress svcId="5" host="10.40.1.15" transactionType="FD" />
                <ipaddress svcId="9" host="10.40.1.7" transactionType="FD" />
                <ipaddress svcId="21" host="10.40.1.19" transactionType="FD" />
                <ipaddress svcId="25" host="10.198.102.154" portNum="80" vifc="authsg" />
                <ipaddress svcId="175" host="10.198.102.156" portNum="80" transactionType="Http" />
                <ipaddress svcId="177" host="10.40.1.7"  transactionType="AA"/>
            </ipaddresses>
            <passport site="kdc.test.xboxlive.com"  url="https://login.passport-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi" />
        </environment>

        <environment name="stressnet-int" type="DirectAccess">
            <defaultSchemaVersion major="6" minor="0" />
            <ipaddresses>
                <ipaddress svcId="1" host="10.20.1.10" transactionType="FD" vifc="xpnfd_presence" />
                <ipaddress svcId="2" host="10.20.1.5" transactionType="FD" vifc="stringsvr" />
                <ipaddress svcId="4" host="10.20.1.7" transactionType="FD" vifc="xbos_base_subscription" />
                <ipaddress svcId="5" host="10.20.1.15" transactionType="FD" vifc="xuacs" />
                <ipaddress svcId="6" host="10.20.1.9" transactionType="FD" vifc="xmatchfd" />
                <ipaddress svcId="7" host="10.20.1.13" transactionType="FD" vifc="xstatsfd" />
                <ipaddress svcId="9" host="10.20.1.7" transactionType="FD" vifc="xbos_billing_offering" />
                <ipaddress svcId="21" host="10.20.1.19" transactionType="FD" vifc="xbos_drm"/>
                <ipaddress svcId="25" host="10.20.204.31" transactionType="FD" vifc="authsg"/>
                <ipaddress svcId="175" host="10.20.1.20" transactionType="Http" vifc="catalog" />
            </ipaddresses>
        </environment>

        <environment name="upgradenet-int" type="DirectAccess">
            <defaultSchemaVersion major="3" minor="0" />
            <ipaddresses>
                <ipaddress svcId="1" host="10.50.1.10" transactionType="FD" vifc="xpnfd_presence" />
                <ipaddress svcId="2" host="10.50.1.5" transactionType="FD" vifc="stringsvr" />
                <ipaddress svcId="3" host="10.50.1.7" transactionType="FD" vifc="xbos_autoupdate" />
                <ipaddress svcId="4" host="10.50.1.7" transactionType="FD" vifc="xbos_base_subscription" />
                <ipaddress svcId="5" host="10.50.1.15" transactionType="FD" vifc="xuacs" />
                <ipaddress svcId="6" host="10.50.1.9" transactionType="FD" vifc="xmatchfd" />
                <ipaddress svcId="7" host="10.50.1.13" transactionType="FD" vifc="xstatsfd" />
                <ipaddress svcId="8" host="10.50.1.3" transactionType="FD" vifc="fbserver" />
                <ipaddress svcId="9" host="10.50.1.7" transactionType="FD" vifc="xbos_billing_offering" />
                <ipaddress svcId="11" host="10.50.1.14" transactionType="FD" vifc="xtou" />
                <ipaddress svcId="12" host="10.50.1.12" transactionType="FD" vifc="xsig" />
                <ipaddress svcId="13" host="10.50.1.11" transactionType="FD" vifc="xqry" />
                <ipaddress svcId="14" host="10.50.1.4" transactionType="FD" vifc="stfd_name_resolution" />
                <ipaddress svcId="15" host="10.50.1.4" transactionType="FD" vifc="stfd_storage" />
                <ipaddress svcId="16" host="10.50.1.6" transactionType="FD" vifc="xarb" />
                <ipaddress svcId="18" host="10.50.1.10" transactionType="FD" vifc="xpnfd_messaging" />
                <ipaddress svcId="19" host="10.50.1.10" transactionType="FD" vifc="xpnfd_teams" />
                <ipaddress svcId="21" host="10.50.1.19" transactionType="FD" vifc="xbos_drm" />
            </ipaddresses>
        </environment>

        <environment name="minalm-xblob2" type="DirectAccess">
            <defaultSchemaVersion major="6" minor="0" />
            <ipaddresses>
                <ipaddress svcId="175" host="65.52.235.11" transactionType="Http" />
                <ipaddress svcId="176" host="65.52.235.11" transactionType="Http" />
                <ipaddress svcId="177" host="65.52.235.11" transactionType="AA" />
                <ipaddress svcId="*" host="65.52.235.11" transactionType="FD" />
            </ipaddresses>
            <passport site="xuacs.test.xboxlive.com" />
            <passportloginurl>https://login.live-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi</passportloginurl>
        </environment>

        <defaultPorts>
            <!-- xpnfd_presence -->
            <port svcId="1" portNum="10010" />
            <!-- stringsvr -->
            <port svcId="2" portNum="10020" />
            <!-- xbos_autoupdate -->
            <port svcId="3" portNum="10030" />
            <!-- xbos_base_subscription -->
            <port svcId="4" portNum="10040" />
            <!-- xuacs -->
            <port svcId="5" portNum="10050" />
            <!-- xmatchfd -->
            <port svcId="6" portNum="10060" />
            <!-- xstatsfd -->
            <port svcId="7" portNum="10070" />
            <!-- fbserver -->
            <port svcId="8" portNum="10080" />
            <!-- xbos_billing_offering -->
            <port svcId="9" portNum="10090" />
            <!-- xtou -->
            <port svcId="11" portNum="10110" />
            <!-- xsig -->
            <port svcId="12" portNum="10120" />
            <!-- xqry -->
            <port svcId="13" portNum="10130" />
            <!-- stfd_name_resolution -->
            <port svcId="14" portNum="10140" />
            <!-- stfd_storage -->
            <port svcId="15" portNum="10150" />
            <!-- xarb -->
            <port svcId="16" portNum="10160" />
            <!-- xpnfd_messaging -->
            <port svcId="18" portNum="10180" />
            <!-- xpnfd_teams -->
            <port svcId="19" portNum="10190" />
            <!-- xbos_drm -->
            <port svcId="21" portNum="10200" />
            <!-- active auth gateway -->
            <port svcId="25" portNum="11250" />
            <!-- catalog -->
            <port svcId="175" portNum="12020" />
            <!-- web billing -->
            <port svcId="176" portNum="10090" />
            <!-- web accounts -->
            <port svcId="177" portNum="10050" />
        </defaultPorts>

        <environment name="example">
            <ipaddresses>
                <!-- Send requests for service ID 20 to host 1.1.1.20 on the default port
                    using a FDTransaction object -->
                <ipaddress svcId="20" host="1.1.1.20" transactionType="FD" />

                <!-- Send requests for service ID 21 to host SomeServer on port 11111
                    using a FDTransaction object -->
                <ipaddress svcId="21" host="SomeServer" portNum="11111" transactionType="FD" />

                <!-- Send requests for service ID 22 to host 1.1.1.22 on port 11111
                    using a WebSGTransaction object -->
                <ipaddress svcId="22" host="1.1.1.22" portNum="11111" transactionType="WebSG" />

                <!-- Otherwise default to sending requests for any other service ID not explicitly
                    listed in this block to 1.1.1.1 using a FDTransaction object -->
                <ipaddress svcId="*" host="1.1.1.1" transactionType="FD" />
                -->
            </ipaddresses>
        </environment>
    </environments>
</livelib>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="quickenforcementtest" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\QuickEnforcementTest\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="quickenforcementtest" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RefurbToolTest\RefurbToolTest.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?> 
<stf>
    <RefurbToolTest>
        <GenealogoyDB>XeGeneSQL001</GenealogoyDB>
        <RefurbFeedFilesPath>.\RefurbFeedFiles</RefurbFeedFilesPath>
    </RefurbToolTest>
</stf>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\FCIB\HCIFileBEW0.xml ===
﻿<BEW0>
<RecordIdentifier position="0" length="4"/>
<CustomerID position="4" length="16"/>
<DocumentType position="20" length="3"/>
<SequenceNumber position="23" length="12"/>
<BlockNumber position="35" length="5"/>
<TransactionDate position="40" length="10"/>
<Text position="50" length="64"/>
<AmountWOVAT position="114" length="12"/>
<VATRate position="126" length="6"/>
<VATAmount position="132" length="12"/>
<AmountWVAT position="144" length="12"/>
</BEW0>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\FCIB\HCIFileBEW1.xml ===
﻿<BEW1>
<RecordIdentifier position="0" length="4"/>
<CustomerID position="4" length="16"/>
<DocumentType position="20" length="3"/>
<SequenceNumber position="23" length="12"/>
<BlockNumber position="35" length="5"/>
<Amount position="40" length="12"/>
</BEW1>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\FCIB\HCIFileKND0.xml ===
﻿<KND0>
<RecordIdentifier position="0" length="4"/>
<CustomerID position="4" length="16"/>
<DocumentType position="20" length="3"/>
<SequenceNumber position="23" length="12"/>
<BlockNumber position="35" length="5"/>
<InvoiceDate position="40" length="10"/>
<InvoiceNumber position="50" length="30"/>
<OrgName position="80" length="64"/>
<FirstName position="144" length="64"/>
<LastName position="208" length="64"/>
<AddressLine1 position="272" length="128"/>
<AddressLine2 position="400" length="128"/>
<AddressLine3 position="528" length="128"/>
<City position="656" length="64"/>
<District position="720" length="64"/>
<Country position="784" length="2"/>
<PostalCode position="786" length="16"/>
<Locale position="802" length="4"/>
<MicrosoftLegalName position="806" length="128"/>
<MicrosoftAddress position="934" length="200"/>
<MicrosoftVATID position="1134" length="20"/>
<CustomerVADID position="1154" length="64"/>
</KND0>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\FCIB\HCIFileKND1.xml ===
<KND1>
<RecordIdentifier position="0" length="4"/>
<CustomerID position="4" length="16"/>
<DocumentType position="20" length="3"/>
<SequenceNumber position="23" length="12"/>
<BlockNumber position="35" length="5"/>
<TotalPriceWOVAT position="40" length="12"/>
<TotalVATAmount position="52" length="12"/>
<TotalPriceWVAT position="64" length="12"/>
</KND1>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\FCIB\ReturnValueSchema.xml ===
<Tasks Status="0"> -- If status attribute is non-zero, throw exception.
	<Command>
		<Name>Run SCEP</Name>
		<ReturnCode>0</ReturnCode>
		<Stdout>Std out messge</Stdout> -- If empty string, the node will be eliminated.
		<Stderr>Std error message</Stderr> -- If empty string, the node will be eliminated.
		<Message>Any other message</Message> -- If empty string, the node will be eliminated.
	</Command>
</Tasks>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\RenewalMatrixAuto\FCIB\ServerConfig.xml ===
<BillingTestServerConfig>
	<BToolServer>
        <Server><![CDATA[XBL1BX05]]></Server>
        <PortId><![CDATA[8989]]></PortId>
    </BToolServer>
</BillingTestServerConfig>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTargetTest\Reporting Testing Guide.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation Titlekatiah Normal.dot Pedro Figueroa Microsoft Office Wordurn:schemas-microsoft-com:office:smarttags Minutebjbj\.\. Reporting Testing Guide 2/14/2006 Reporting Infrastructure The reporting infrastructure consists of the reporting components that are responsible for the log data to get sent, received and parsed, stored into filterdb, replicated to reportingdb, and processed on reportingdb via SQL aggregations and OLAP. Below is a diagram that shows the different pieces of the infrastructure and how it fits into the Xbox Live Service. Reporting Infrastructure Diagram  SHAPE  \* MERGEFORMAT  Description of Logs Log Description and Corresponding FilterDB Tables Component Log Prefix Action FilterDB Table XPSERVER (Presence) TITLESTART TITLEEND Logging on to a title or switching to title2 after having logged on to title1. Titleend will update the row already inserted with titlestart. T_presence_fact XPSERVER (Presence) SESSTART SESEND When  a game session is started, a row is added to t_session_fact with a default duration until midnight and f_playing_now=1. When the session ends, the same row is updated with the duration and f_playing_now=0.  T_session_fact XPSERVER (Presence) GUESTCHG A guest is the person who adds their controller to the console and play with the main player who is logged on. This log tells us if the number of guests changed. T_guest_fact XPSERVER (Presence) Sending a message to another online player triggers this log. This happens for example when a user sends a friend invitation message to another user. T_msg_snd_fact XUACS CREATEACCOUNT CREATELIVEACCOUNT CREATEXBOXCOMACCOUNT Createaccount is when an xbox1 user is created.  CreateLiveAccount is when an xbox360 user is created. CreateXboxComAccount is when an xbox.com user is created. T_new_account_fact XUACS MIGRATEXBOX1ACCOUNT MigrateXboxComUser When an xbox1 user is migrated to become an xbox360 user, this log is sent. Same for xbox.com user. T_migrate_account_fact XeOfferPurchase A user purchasing an offering. T_purchase_fact XeContentReferral CONTENTREF When a user initiates the download of a game content, the xbox console sends a content referral request to find out where the location of the content is before it can point to it. XeContentReferral is when such a request is done for a Xenon content referral, ContentRef is for an xbox1 content referral. T_content_fact PROVISIONSERVICE DEPROVISIONSERVICE When a user is promoted from silver to gold, this triggers a provision log. When a user is demoted from gold to silver, or when the user s account is cancelled, this triggers a deprovision. T_provision_fact Log Formats The format of each log is determined by what is sent to cleanser from the Xbox Live services. The formats are documented in the form of comments in the reporting bvt source code. If one wants to double-check the formats, then the server source code needs to be inspected. Usually the source code will use the XomLog command and send the log data to the Reporting area: XomLog(Reporting,  Prefix|field1|field2| The location of the server source code depends on the component in question. Here is a list of source depot locations of the server code by component: Component Source Depot Location of Server Product Code XPSERVER (Presence) \private\server\presence\inh\presence.cpp \private\server\billing\offering\fd\XeContentReferral.cs and XeOfferPurchase.cs and ContentRef.cs XUACS \private\server\billing\useraccount\fd\ CreateLiveAccount.cs, CreateOwnerAccount.cs, CreateXboxComAccount.cs, MigrateXbox1User.cs, MigrateXboxComUser.cs \private\server\billing\callback\fd\ISvcProvider.cs Cleanser .NET Service The cleanser .NET service is hosted on xerprtcle001 and xerprtcle002 in Testnet. It knows the format of the logs it receives by storing this information in the filterdb tables t_transform and t_messages. Functional test case xmgmt_AddNewTransform() tests the process of adding a new test log and having cleanser dynamically pick up the new format and parse the new log. Source code of cleanser service is located in \private\server\cleanser\svr\. Xmgmt Reporting Target The xmgmt reporting target is what the service components use to send logs to cleanser via the XomLog(Reporting,  ) command. Reporting is replaced by an object when building the code. Xmgmt is built into the apps that use it. Check the sources file for the XLUSE_XMGMT statement. This build statement tells the build system to copy the source files for xmgmt and include them when building the app. An explanation of these commands can be found in \xenon\build\sources.xluse. The location of the xmgmt code is: \private\common\mgmt\ (C# version used by .NET services) \private\common\xmgmtlib\ (C++ version used by the C++ services - presence) Replication to ReportingDB Replication is set up from FilterDB on cleanser servers to reportingDB staging tables. The data is then transferred to the partitioned tables through p_transfer_fact which is called during Daily Processing (p_daily_processing). The following table gives some examples of the corresponding tables between filterdb and reportingdb. ReportingDB Staging Tables and Partitioned Tables Mapping FilterDB Table ReportingDB Staging Table ReportingDB Partitioned Table T_presence_fact T_presence_fact_<xerprtcle001> and T_presence_fact_<xerprtcle002> T_presence_fact_<yyyy>_mm T_presence_fact_2006_02 T_session_fact T_session_fact_<xerprtcle001> and T_session_fact_<xerprtcle002> T_session_fact_<yyyy>_mm T_session_fact_2006_02 T_guest_fact T_guest_fact_<xerprtcle001> and T_guest_fact_<xerprtcle002> T_guest_fact_<yyyy>_Qx T_guest_fact_2006_Q1 T_msg_snd_fact T_msg_snd_fact_<xerprtcle001> and T_msg_snd_fact_<xerprtcle002> T_msg_snd_fact_<yyyy>_Qx T_msg_snd_fact_2006_Q1 T_new_account_fact T_new_account_fact_<xerprtcle001>  T_new_account_fact_<yyyy>_Qx T_new_account_fact_2006_Q1 T_migrate_account_fact T_migrate_account_fact_<xerprtcle001>  T_migrate_account_fact_<yyyy>_Qx T_migrate_account_fact_2006_Q1 T_purchase_fact T_purchase_fact_<xerprtcle001>  T_purchase_fact_<yyyy>_Qx T_purchase_fact_2006_Q1 T_content_fact T_content_fact_<xerprtcle001>  T_content_fact_<yyyy>_Qx T_content_fact_2006_Q1 T_provision_fact T_provision_fact_<xerprtcle001> T_provision_fact_<yyyy>_Qx t_provision_fact_2006_Q1 ReportingDB Testing To test the aggregations on reportingdb on Testnet, we decided that it is better to create a dedicated db for testing in which we can enter our own test data and aggregate this data. This way we don t have to deal with data integrity problems resulting from Testnet data. Reportingdbtest therefore is the db used for testing and is not linked to replication. Test Data Generation Test data is generated through the random data generation script located at: \private\test\stftests\ReportingTargetTest\sql\p_populate_testnet_stage.sql This file is taken from Jeremy from \private\sql\npdb\reporting\reportingdb\dvt\ and was modified to add a parameter for the number of users. Steps: 1. Copy \private\sql\npdb\reporting\reportingdb\dvt\*.bcp into a directory on xerprtsql001 (e.g. c:\dvt) 2. Open this file in Query Analyzer against reportingdbtest and execute file to create the stored procedure p_populate_testnet_stage 3.  To add 16,000 users for 2006-02-17, execute the following: Declare @hr int exec p_populate_testnet_stage  2006/02/17 c:\dvt\ , 16000 exec @hr = p_daily_processing  2006/02/17 2006/02/18 if @hr != 0 print  Error occurred for 2006/02/17 exec p_populate_testnet_stage  2006/02/18 c:\dvt\ , 13000 exec @hr = p_daily_processing  2006/02/18 2006/02/19 if @hr != 0 print  Error occurred for 2006/02/18 exec p_populate_testnet_stage  2006/02/19 c:\dvt\ , 10000 exec @hr = p_daily_processing  2006/02/19 2006/02/20 if @hr != 0 print  Error occurred for 2006/02/19 Note:  To add multiple days, copy and paste the above into the same QA window and change the dates.  Make sure the first call to p_populate_testnet_stage has the highest number of users, if you want to change the number of users for subsequent calls, always decrease the number of users. The sproc checks if t_users has the first puid and last puid, if not the users will be deleted and recreated. By using a smaller user range, the users used for the previous day processing will be kept. If not, then the user (for example country) information for the previous day will not be accurate. Financial reports require that last day of the month be populated and processed so that the monthly aggregations, without the last day these monthly aggregations don t get done. Location of ReportingDB SQL Code The location of all sprocs and tables for reportingdb is in: \private\sql\npdb\reporting\reportingdb\ Daily Processing Daily processing starts by calling some prerequisite sprocs for preparation work, and then proceeds in calling a collection of sprocs that are responsible to aggregate the raw data for the reports.  Sprocs called for preparation work: Sproc Name Purpose p_transfer_fact Transfers data from staging tables to partitioned tables p_daily_processing_prescan Checks for data integrity. Every new title or offer found in the log data should be in the base tables (e.g. t_titles, t_offers, etc.) If a problem is found, an error is raised and daily processing stops. p_daily_user_status Gets the new users from the log data and classifies them into paid or free subscribers. This data is stored into t_user_status_fact_<yyyy>_Qx. Sprocs called for individual reports and corresponding test scripts (under \private\test\stftests\ReportingTargetTest\sql\): Sproc Name Report Name Test Script p_daily_concurrent_users Used in daily and monthly publisher reports (under Publisher Reports) TestConcurrentUsers.sql p_daily_offer_migration Migration To and From Silver Account (under Financial Reports) migrateSilver_queries.sql SilverAcctMigration-Testing.sql p_daily_title_played_first First Title Played (under Title Usage Reports) Test_FirstTitlePlayed.sql p_daily_account_migration Migration to xbox360 (under Financial Reports) Test_AccountMigration.sql p_daily_last_logged_on Visitor Frequency (Last Logged On to Service) (under Xbox Live Usage Reports) TestLastLoggedOnReport.sql p_daily_last_web_activity Last Web Activity by Region and Country (under Xbox Live Usage Reports) Test_LastWebActivity.sql p_daily_accounts_info Xbox Accounts Summary Report (under Xbox Live Usage Reports) Test_AccountInfo.sql Realtime Reporting Realtime reporting aggregates data taken from the logs every 15 minutes, hence the name realtime. The sprocs join with t_users_rt table (as opposed to the t_users table) because t_users_rt has more recent users as it is updated every 1 hour by a DTS job that copies this table from UODB to reportingDB. Realtime reporting is run by a SQL job on reportingDB. In reportingdbtest for testing purposes, we execute this stored procedure (p_realtime_commit) with our own test date ranges whenever testing occurs. This is done with the following script: \private\test\stftests\ReportingTargetTest\sql\realtime_processing.sql p_realtime_commit in turn calls other stored procedures that correspond to different reports. Sproc Name Report Name Test Script p_realtime_commit_accounts Real-time Accounts (under Real-time Reports) realtime-testing.sql realtime_Accounts_queries.sql p_realtime_commit_presence p_realtime_commit_content Real-time Title Usage (under Real-time Reports) realtime-testing.sql Cleanser Servers Xerprtcle001 Xerprtcle002 ReportingDB Xerprtsql001 Xepooliis001 Xepooliis002 Xepooliis020 IIS Front Doors xuacs, presence (xpnf), xbos, xcbk, etc . . . Presence INH Servers xpserver XepoolInh001 XepoolInh002 XepoolInh008 . . . 2. Xbox Console sends a request to a certain service Security Gateway Security  Gateway When frontdoors are servicing the requests, they send logs to Cleanser as appropriate over TCP/IP. The xmgmt reporting target component is used for sending logs. 1. Auth Presence request is forwarded from frontdoor to INH The Cleanser .NET service writes the log info into the FilterDB tables, which are replicated to ReportingDB. FilterDB FilterDB OLAP cube Xeolapsql001 Xerprtiis001 Rosetta gd g  gd(|J
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTargetTest\BVT\readme.txt ===
Reporting BVT Tests Instructions
________________________________

The purpose of the reporting BVT tests is to make sure that the different Xbox Live services are set up to send logs to cleanser as expected and that cleanser can receive and parse these logs correctly.

Ops run the reporting BVTs after each Testnet rebuild.

The BVT tests send requests to the different services to perform certain actions that in turn will cause logs to be written to cleanser. For example, creating an xbox360 account will cause xuacs to write a CREATELIVEACCOUNT log to cleanser. 

* How To Run:
Files needed:
SFTRunner.*
ServerTestFramework.*
ReportingTargetTestBVT.*
stf_tn.xml

1. Copy the files to a client
2. Type
C:\> STFRunner.exe ReportingTargetTestBVT.dll stf_tn.xml
3. Check all tests and start
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTargetTest\BVT\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="reportingtargettestbvt" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTargetTest\BVT\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="reportingtargettestbvt" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTargetTest\replication\readme.txt ===
Reporting BVT Tests Instructions
________________________________

The purpose of the reporting BVT tests is to make sure that the different Xbox Live services are set up to send logs to cleanser as expected and that cleanser can receive and parse these logs correctly.

Ops run the reporting BVTs after each Testnet rebuild.

The BVT tests send requests to the different services to perform certain actions that in turn will cause logs to be written to cleanser. For example, creating an xbox360 account will cause xuacs to write a CREATELIVEACCOUNT log to cleanser. 

* How To Run:
Files needed:
SFTRunner.*
ServerTestFramework.*
ReportingTargetTestBVT.*
stf_tn.xml

1. Copy the files to a client
2. Type
C:\> STFRunner.exe ReportingTargetTestBVT.dll stf_tn.xml
3. Check all tests and start
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTargetTest\common\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="reporting_common" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTargetTest\common\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="reporting_common" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTargetTest\replication\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="replicationfvt" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTargetTest\replication\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="replicationfvt" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTest\CleanserFVT\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="cleanserfvt" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTest\CleanserFVT\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="cleanserfvt" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTest\ModifySSISDB\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="modifyssisdb" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTest\ModifySSISDB\ModifySSISDB.xml ===
<?xml version="1.0" encoding="utf-8" ?>
<ModifySSISDB>
  <!--TEST NET-->
  <ReportSSISDB>reportssisdbprod</ReportSSISDB>
  <ReportingDB>reportingdbprod</ReportingDB>

  <NumOfLoop>12</NumOfLoop>
  <NumOfUODB>24</NumOfUODB>
  <InsertRatio_t_users>3000</InsertRatio_t_users>
  <UpdateRatio_t_users>397000</UpdateRatio_t_users>
  <InsertRatio_t_machines>500</InsertRatio_t_machines>
  <UpdateRatio_t_machines>500</UpdateRatio_t_machines>
  <InsertRatio_t_subscriptions>3000</InsertRatio_t_subscriptions>
  <UpdateRatio_t_subscriptions>3000</UpdateRatio_t_subscriptions>
  <InsertRatio_t_xmsg_user_titles>3000</InsertRatio_t_xmsg_user_titles>
  <UpdateRatio_t_xmsg_user_titles>397000</UpdateRatio_t_xmsg_user_titles>
  <InsertRatio_t_achievements>3000</InsertRatio_t_achievements>
  <UpdateRatio_t_achievements>47000</UpdateRatio_t_achievements>
  <InsertRatio_t_user_musicnet_accounts>300</InsertRatio_t_user_musicnet_accounts>
  <UpdateRatio_t_user_musicnet_accounts>300</UpdateRatio_t_user_musicnet_accounts>
  <UpdateTimeSpanMin>0</UpdateTimeSpanMin>
  <UpdateTimeSpanSec>1</UpdateTimeSpanSec>

</ModifySSISDB>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTest\ModifySSISDB\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="modifyssisdb" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTest\Stress\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="reportingstresstests" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\buildd.err ===
1>z:\xonline_main\private\test\stftests\servertestframework\msbuild : error MSB1028: The logger failed unexpectedly.
1>errors in directory z:\xonline_main\private\test\stftests\servertestframework
1>z:\xonline_main\private\test\stftests\servertestframework\msbuild : error MSB1028: The logger failed unexpectedly.
100>z:\xonline_main\private\test\stftests\servertestframework\msbuild : error MSB1028: The logger failed unexpectedly.
1>z:\xonline_main\private\test\stftests\servertestframework\msbuild : error MSB1028: The logger failed unexpectedly.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\buildd.log ===
Generating Assembly Identities for MSBuild Projects1>'MSBuild.cmd "dirs.proj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:WriteToAssemblyIdentityLog'
1>Running MsBuild v3.5
1>MSBUILD : error MSB1028: The logger failed unexpectedly.
1>z:\xonline_main\private\test\stftests\servertestframework\msbuild : error MSB1028: The logger failed unexpectedly.
1>System.Security.SecurityException: That assembly does not allow partially trusted callers.
1> at Microsoft.Build.CoreXT.CoreXTLogger..ctor()
1>The action that failed was:
1>LinkDemand
1>The assembly or AppDomain that failed was:
1>CoreXTLogger, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
1>The Zone of the assembly that failed was:
1>Internet
1>The Url of the assembly that failed was:
1>file:///z:/xonline_main/public/ext/tools/CoreXTLogger.dll
1>Switch: CoreXTLogger,z:\xonline_main\public\ext\tools\CoreXTLogger.dll
BUILD: Examining z:\xonline_main\private\test\stftests\servertestframework directory for files to compile.
Executing prebuild scripts  *************
1>Performing prebuild steps..  *************
1>'Z:\XONLINE_MAIN\public\ext\tools\build_pre_process.cmd '
1>build_pre_process.cmd: nmake /nologo /f z:\xonline_main\makefil0 versions
1>Executing Pass0 MSBuild Tasks z:\xonline_main\private\test\stftests\servertestframework *************
1>'MSBuild.cmd "dirs.proj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildGenerated /p:Pass=Generate'
1>Running MsBuild v3.5
1>MSBUILD : error MSB1028: The logger failed unexpectedly.
1>errors in directory z:\xonline_main\private\test\stftests\servertestframework
1>z:\xonline_main\private\test\stftests\servertestframework\msbuild : error MSB1028: The logger failed unexpectedly.
1>System.Security.SecurityException: That assembly does not allow partially trusted callers.
1> at Microsoft.Build.CoreXT.CoreXTLogger..ctor()
1>The action that failed was:
1>LinkDemand
1>The assembly or AppDomain that failed was:
1>CoreXTLogger, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
1>The Zone of the assembly that failed was:
1>Internet
1>The Url of the assembly that failed was:
1>file:///z:/xonline_main/public/ext/tools/CoreXTLogger.dll
1>Switch: CoreXTLogger,z:\xonline_main\public\ext\tools\CoreXTLogger.dll
100>Executing Pass1 MSBuild Tasks z:\xonline_main\private\test\stftests\servertestframework *************
100>'MSBuild.cmd "dirs.proj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildCompiled /p:Pass=Compile'
100>Running MsBuild v3.5
100>MSBUILD : error MSB1028: The logger failed unexpectedly.
100>z:\xonline_main\private\test\stftests\servertestframework\msbuild : error MSB1028: The logger failed unexpectedly.
100>System.Security.SecurityException: That assembly does not allow partially trusted callers.
100> at Microsoft.Build.CoreXT.CoreXTLogger..ctor()
100>The action that failed was:
100>LinkDemand
100>The assembly or AppDomain that failed was:
100>CoreXTLogger, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
100>The Zone of the assembly that failed was:
100>Internet
100>The Url of the assembly that failed was:
100>file:///z:/xonline_main/public/ext/tools/CoreXTLogger.dll
100>Switch: CoreXTLogger,z:\xonline_main\public\ext\tools\CoreXTLogger.dll
1>Executing Pass2 MSBuild Tasks z:\xonline_main\private\test\stftests\servertestframework *************
1>'MSBuild.cmd "dirs.proj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildLinked /p:Pass=Link'
1>Running MsBuild v3.5
1>MSBUILD : error MSB1028: The logger failed unexpectedly.
1>z:\xonline_main\private\test\stftests\servertestframework\msbuild : error MSB1028: The logger failed unexpectedly.
1>System.Security.SecurityException: That assembly does not allow partially trusted callers.
1> at Microsoft.Build.CoreXT.CoreXTLogger..ctor()
1>The action that failed was:
1>LinkDemand
1>The assembly or AppDomain that failed was:
1>CoreXTLogger, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
1>The Zone of the assembly that failed was:
1>Internet
1>The Url of the assembly that failed was:
1>file:///z:/xonline_main/public/ext/tools/CoreXTLogger.dll
1>Switch: CoreXTLogger,z:\xonline_main\public\ext\tools\CoreXTLogger.dll
Executing post build scripts  *************
Fix Public Change
1>'Z:\XONLINE_MAIN\public\ext\tools\buildpost.cmd '
1>Running scripts in Z:\XONLINE_MAIN\target\debug\AMD64\PostBuildScripts
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTest\Stress\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="reportingstresstests" processorArchitecture="msil" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\ServerTestFramework.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corporation StressTestFramework features: TitleStressTestFramework features: Relja Markovic Normal.dot Aaron Lieberman Microsoft Word 11.0Quick Start Here are things you need to do in order to use STF. This is not an extensive step-by-step list  s more of a general check list of things that need to be done. Setup You need to reference (ie. link with) ServerTestFramework.dll. This will implicitly add two other DLLs: Interop.Reportlib.dll and XTest.Utilities.dll. Make sure that you register your project for COM Interop in the project settings window (Configuration Properties / Build / Outputs / Register for COM interop). Main class You need to derive one class from CTestHarnessInterface and make that class be a COM object. You will need to override two member functions: the first one is GetTestProjectName   it is supposed to return your test suite s name. This name will be used in logging, report generation, and other places. You will also need to override GetTestRequiredResources, and specify which features you need. Here is some sample code: [ClassInterface(ClassInterfaceType.AutoDual)] [ProgId("TestName")] public class MainClass : CTestHarnessInterface protected override InitializerInfo GetTestRequiredResources() return new InitializerInfo(true, true, true); protected override string GetTestProjectName() return "CUSTV2"; protected override void InitializeTestList() // Initialize test groups TestGroups.Add(new GetPuidFromXName("GetPuidFromXName")); TestGroups.Add(new GetAccount("GetAccount")); TestGroups.Add(new CCUSTStressMix("StressMix")); TestGroups.Add(new GetRelatedAccounts("GetRelatedAccounts")); TestGroups.Add(new GetTransactions("GetTransactions")); TestGroups.Add(new EmailsSent("EmailsSent")); TestGroups.Add(new ModifyAccount("ModifyAccount")); TestGroups.Add(new ResetPassword("ResetPassword")); TestGroups.Add(new Integration("Integration")); // Initialize your classes here SvcProviderWrapper.Initialize(); // Initialize perf counters string []perfServers=new String[2]; perfServers[0]=Global.Settings.GetServer("CUST_PERF1"); perfServers[1]=Global.Settings.GetServer("CUST_PERF2"); Global.PerfMonPump=new CPerformanceMonitorPump(perfServers); Global.PerfMonPump.Go("c:\\perflog_cust_"); Stress tests Your tests should be divided into test groups (derived from TestGroupBase) and individual cases should be derived from TestBase. Every test group should contain a collection of test cases, and all your test groups should be contained in the TestGroups collection (see source). Stress cases should be derived from StressMix. You will need to initialize two variables, ResultsFileName and ResultsPath. public class CCUSTStressMix : StressMix public CCUSTStressMix(string Name) ResultsFileName="CUST"; ResultsPath="C:\\Results"; GroupName=Name; Tests.Add(new Stress.StressGetPuidFromXName()); Tests.Add(new Stress.StressGetAccount()); Tests.Add(new Stress.StressModifyAccount()); Tests.Add(new Stress.StressResetPassword()); Tests.Add(new Stress.StressGetTransactions()); Tests.Add(new Stress.StressGetTransactions1000()); Tests.Add(new Stress.StressEmailsSent()); Tests.Add(new Stress.StressGetSubscriptionCodeStatus()); Tests.Add(new Stress.StressGetRelated()); override public void Initialize() base.Initialize(); Functional tests Before you can do functional tests, you need to create a test group. A test group must derive from TestGroupBase like so: public class ProvisionServiceGroup: TestBaseGroup public ProvisionServiceGroup(string Name) GroupName=Name; override public void Initialize() Tests.Add(new PMainline()); Tests.Add(new PZeroTFlags()); You need to supply a constructor that will take in the group name and set GroupName to that value, and you need to override the Initialize method. Use the initialize method to list all test cases that belong to this group. <fill in   single test case> <fill in   relationship between testgroup and test> The final result for this class should then be: public class ProvisionService: TestBaseGroup class PMainline : XCBKTestBase public PMainline() Name="PMainline"; Desc="Provision a service"; override protected void Execute() ResultCode=TEST_RESULTS.PASSED; class PZeroTFlags : XCBKTestBase public PZeroTFlags() Name="PZeroTFlags"; Desc="Provision a service; set the transaction flag to 0 before starting"; override protected void Execute() ResultCode=TEST_RESULTS.PASSED; public ProvisionService(string Name) GroupName=Name; override public void Initialize() Tests.Add(new PMainline()); Tests.Add(new PZeroTFlags()); Stress The stress test group needs to derive from XTest.ServerTestFramework.Stress.StressMix. You need to provide a constructor that adds all the tests that make up your stress test.  Here is some sample code: public class XCBKStressMix : StressMix public XCBKStressMix() Tests.Add(new Stress.ProvisionService()); Tests.Add(new Stress.DeprovisionService()); Tests.Add(new Stress.EnableService()); Tests.Add(new Stress.DisableService()); Troubleshooting COM interop failed, can t load DLL  Add STF to your solution You need to build ServerTestFramework and XTestUtilities from the IDE in order for them to be registered properly for IDE integration. Building from the command line will work fine for your code, but these assemblies will not be integrated into the IDE registration process. Here s how you do it: Add test\ServerTestFramework and test\CommonMC\XTestUtilities to your solution. Select your project in the solution explorer, right click, go to add references \ project references, and add both STF and XTestUtilities. Rebuild. If that does not help, try this: Re-register .NET TLBs You need to reregister TLBs. Do the following: regtlib c:\windows\Microsoft.NET\Framework\v1.0.3705\*.tlb (or wherever you current .NET Framework might live) restart Visual Studio Key StressTestFramework features: XRL support: allows users to easily build and execute XRL queries. The framework will take care of everything, including parsing results, handling exceptions and HTTP timeouts. UODB interface: allows easy manipulation of UODB data without SQL use. Functions include calls like IsUserInBillingQueue, GetMinors (returns an array of puids that belong to minors), GetTransactionStatus (returns information about transactions), etc. FakeSG: All calls will be automatically processed by the unified FakeSG client. This happens transparently and the user does not have to do a single line of code for this functionality. All errors are handled by the framework. Stress driver: fully multithreaded, per-test-priority stress driver, comes complete with a watchdog timer that terminates blocked stress tests and a real time stress progress monitor. Stress report generator: generates HTML (table) reports of all functions called, including passes, failures, timeouts, etc. Also generates stress test summary information. Since it s all HTML, you can just copy & paste it into your report. Perf counter: collects multiple perf counters on multiple servers and logs to a file. It s fault tolerant, and it will try to reestablish connection with the server after a failure. Voucher manipulator: lets users add vouchers, query voucher status, etc. XOHealth integration: STF fully integrates with XOHealth, and it abstracts all XOHealth functionality away from the user. The user only has to override one function that initializes his tests; everything else is taken care of. Exception based error handling: all errors are represented by exceptions, and the entire framework handles and logs these. Exceptions thrown during stress will terminate just one instance of a test, increment the failure counter, but will not terminate the stress driver. The SD will in turn create another instance of the test to replace the failed instance. Report object: enhanced report object timestamps events, logs test group and individual test for each call and can be adapted to any external report object XOHealth or otherwise. Extreme ease-of-use: Most XRL calls can be done in just two lines of code. Example: Owner MyOwner = GenerateOwner( Invictus MyOwner.Execute(); A fully XOHealth compliant test DLL that tests one UACS API can be done in less than 10 lines of code. Tested: A variant of the ServerStressFramework has been used in 72 hour stress runs of UACS, XCBK, and CUST with good results and no leaks or failures. gdko| gdko| gdnT: gdko| gdko| gdnT:
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\obj\i386\STFCore.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\test\StfTests\lib\STFCore.dll
j:\xonline_main\private\test\StfTests\lib\stfcorehelp.xml
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\obj\i386\ResolveAssemblyReference.cache
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\obj\i386\ServerTestFramework.Runner.StressSchedulerPriControl.resources
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\obj\i386\ServerTestFramework.Runner.StressSchedulerTPSControl.resources
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\obj\i386\STFCore.csproj.GenerateResource.Cache
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\obj\i386\STFCore.dll
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\obj\i386\stfcorehelp.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\STFCore.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll
j:\xonline_main\private\test\StfTests\libd\i386\STFCore.pdb
j:\xonline_main\private\test\StfTests\libd\i386\stfcorehelp.xml
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\ResolveAssemblyReference.cache
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\ServerTestFramework.Runner.StressSchedulerPriControl.resources
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\ServerTestFramework.Runner.StressSchedulerTPSControl.resources
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\STFCore.csproj.GenerateResource.Cache
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\STFCore.dll
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\stfcorehelp.xml
J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\STFCore.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\obj\i386\stfcorehelp.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>STFCore</name>
    </assembly>
    <members>
        <member name="T:ServerTestFramework.TestAttribute">
            <summary>
            allow an alias for Attribute "[TestCase]" to be "[Test]", like NUnit
            Deprecated.
            </summary> 
        </member>
        <member name="T:ServerTestFramework.TestFixtureAttribute">
            <summary>
            allow an alias for Attribute "[TestGroup]" to be "[TestFixture]", like NUnit
            Deprecated.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestGroupAttribute">
            <summary>
            Indicates that the node contains a group of other nodes, and is not a test by itself.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestGroupSetupAttribute">
            <summary>
            marks a function as a setup method.  These methods are executed
            just before a set of tests are run.
            </summary> 
        </member>
        <member name="T:ServerTestFramework.TestGroupTearDownAttribute">
            <summary>
            marks a function as an tear-down method.  These methods are executed
            just after a set of tests are run.
            </summary> 
        </member>
        <member name="T:ServerTestFramework.StressTestAttribute">
            <summary>
            Indicates that a test is to be used for stress.
            </summary>
        </member>
        <member name="T:ServerTestFramework.StressInstantiateAttribute">
            <summary>
            Indicates that when running a stress test, that each run should occur on a unique instance of the node.
            </summary>
        </member>
        <member name="T:ServerTestFramework.IgnoreAttribute">
            <summary>
            This feature should be used to temporarily not run a TestCase or TestGroup. 
            This is a better mechanism than commenting out the testCase/testGroup,
            since the tests will be compiled with the rest of the code and there is an 
            indication at run time that a test is not being run. This insures that tests will not be forgotten.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestTagAttribute">
            <summary>
            A generic marker than can be placed on a test or group.  This can be used for filtering or reporting.
            A tag string may be of the following forms:
               NameOfTag
               NameOfTag=value
               NameOfTag=value0, value1, etc
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncGroupAttribute">
            <summary>
            On a test case, tests with the same AsyncGroup value can run at the same time.  On a group this sets the default AsyncGroup value for all tests in that group.
            Test groups with the same AsyncSet value can be run at the same time. (AsyncSet has no meaning for a test case)
            A value of 0 means don't run async.
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncThreadCountAttribute">
            <summary>
            Attribute for a test group for how many threads within the group are allowed to run at the same time.
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncThreadDelayAttribute">
            <summary>
            Attribute for a test group.  Controls the delay (in ms) between thread creations for tests within the group.
            This can be useful for preventing a ton of tests from slamming the network system at the exact same moment.
            </summary>
        </member>
        <member name="T:ServerTestFramework.DoNotRetryAttribute">
            <summary>
            Attribute for groups and cases.  This specifies that the test case should never be automatically retried if it fails.
            </summary>
        </member>
        <member name="T:ServerTestFramework.CompoundCaseAttribute">
            <summary>
            Attribute for groups and cases.  Each instance of CompoundTestBase class that use this will cause multiple instances of TestBase's to be created.
            </summary>
        </member>
        <member name="T:ServerTestFramework.RunDependencyAttribute">
            <summary>
            Marks a functional test as not being able to run until a specific other test has run.
            The string may be either of:
            - The fully-qualified name of a leaf node or the name of a sibling.
            - The non-qualified name of a sibling node (does not have to be a leaf).
            </summary>
        </member>
        <member name="T:ServerTestFramework.AtomicBranchAttribute">
            <summary>
            Indicates that the node is a test group, and that all direct sub-nodes must all be either enabled or disabled.
            </summary>
        </member>
        <member name="T:ServerTestFramework.RootNodeAttribute">
            <summary>
            This attribute can be placed on the assembly to declare a single group node that is to become the root of the assembly's tree.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestSuiteException">
            <summary>
            Custom Excption class to convey excpetions at the test suite load and run states.
            Deprecated.
            </summary>
        </member>
        <member name="T:ServerTestFramework.HttpStatusCodeException">
            <summary>
            Custom Exception class to carry and identify failures with an Http Status code
            </summary>
        </member>
        <member name="T:ServerTestFramework.TimeOutException">
            <summary>
            Custom Exception class to identify time out failures
            </summary>
        </member>
        <member name="T:ServerTestFramework.ExpectedValueCheckException">
            <summary>
            Custom Excption class to carry and identify failures matching a named value.
            </summary>
        </member>
        <member name="T:ServerTestFramework.ExpectedNotValueCheckException">
            <summary>
            Custom Excption class to carry and identify failures matching a named value.
            </summary>
        </member>
        <member name="T:ServerTestFramework.StfException">
            <summary>
            Generic exception wrapper, allows parameters in the message string. Think of it as
            an Exception++.
            Deprecated.
            </summary>
        </member>
        <member name="T:ServerTestFramework.DidNotExecuteException">
            <summary> If this exception is thrown by a test then the test will be counted as having not been run at all, rather than failed. </summary>
        </member>
        <member name="T:ServerTestFramework.KnownBugException">
            <summary>
            This exception should be thrown when a test encounters conditions that indicate a known bug.
            </summary>
        </member>
        <member name="F:ServerTestFramework.KnownBugException.DefaultMessageFormat">
            <summary>The default message format string.</summary>
        </member>
        <member name="F:ServerTestFramework.KnownBugException.EmptyBugDatabase">
            <summary>The string to use if the bug database is null.</summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.GetDefaultMessage(System.Int32,System.String)">
            <summary>
            Gets the default message for a KnownBugException.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String)">
            <summary>
            Creates a KnownBugException from a bug id and database.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a KnownBugException from a bug id and database, with a custom message.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Creates a KnownBugException from a bug id and database, with an inner exception.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String,System.String,System.Exception)">
            <summary>
            Creates a KnownBugException from a bug id and database, with a custom message and inner exception.
            </summary>
        </member>
        <member name="P:ServerTestFramework.KnownBugException.BugID">
            <summary>The bug identifier; ex the PS bug number.</summary>
        </member>
        <member name="P:ServerTestFramework.KnownBugException.BugDatabase">
            <summary>The bug database name; ex the PS database.</summary>
        </member>
        <member name="F:ServerTestFramework.CoreGlobal.DefaultConfigFile">
            <summary>
            The default config file to load.
            </summary>
        </member>
        <member name="F:ServerTestFramework.CoreGlobal.Config">
            <summary>
            The current config set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CallReloadAllTestTrees">
            <summary> Calls ReloadAllTestTrees. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CallTestNodeTreeLoaded(ServerTestFramework.TestNode)">
            <summary> Calls TestNodeTreeLoaded. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CallTestNodeTreeUnload(ServerTestFramework.TestNode)">
            <summary> Calls TestNodeTreeUnloaded to indicate that everything should remove all references to the test node tree. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.GetCoreAssembly">
            <summary>
            Returns the assembly of STFCore.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CheckAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            Check the versions of other assemblies linked against us, to make sure there's not a mismatch between the version they linked with and our version.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize(System.String)">
            <summary>
            Load xml config from a file.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize(System.Xml.XmlDocument)">
            <summary>
            Initialize the framework using a pre-created XML config document.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize(ServerTestFramework.Runner.StfXmlDoc)">
            <summary>
            Initialize the framework using a pre-created XML config document.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize">
            <summary>
            Initialize the framework using the default config file.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Uninitialize">
            <summary> Called to uninitialize the framework. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.RegisterInitializationCallback(ServerTestFramework.CoreGlobal.VoidFunctionType)">
            <summary> Other libraries that depend on STF being initialized can call this to be notified when initialization occurs </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.RegisterUninitializationCallback(ServerTestFramework.CoreGlobal.VoidFunctionType)">
            <summary> Other libraries that depend on STF being initialized can call this to be notified when initialization occurs </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.ReloadAllTestTrees">
            <summary> Provides a way to request that the current application to discard all TestNode trees and recreate them.  Not all applications support this (in which case they will ignore it). </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.TestNodeTreePreload">
            <summary>
            Called before a TestNode tree is loaded with information about the source of the tree.
            </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.TestNodeTreeLoaded">
            <summary> This is called whenever a test tree is created.  Note that if nodes are reloaded, a new tree from the same assembly will likely be passed to this. </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.TestNodeTreeUnloaded">
            <summary> This is called when all references to a test tree should be removed. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData">
            <summary> Manages changing and searching for tags on a node or node tree. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.#ctor(ServerTestFramework.TestNode)">
            <summary> Constructs the list of tags and their values for a node. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.Clone(ServerTestFramework.TestNode)">
            <summary> Duplicates the tagging data and assigns a new owner to the duplicate. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.AddTag(System.String)">
            <summary> Adds a new valueless tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.AddTagValue(System.String,System.String)">
            <summary> Adds a new value tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.AddTagValue(System.String,ServerTestFramework.NodeTaggingData.Value)">
            <summary> Adds a new value tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNodeTags">
            <summary> Returns a list of all tags and their values that are assigned directly to this node. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTrunkTags">
            <summary> Returns a list of tags and their values in this node and all parent nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllBranchTags">
            <summary> Returns a list of tags and their values in this node and all child nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTreeTags">
            <summary> Returns a list of tags and their values in this node, all parents, and all child nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNearestTrunkTags">
            <summary> Walks up the tree (including the current node) and returns the the nearest values for each type of tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNodeValues(System.String)">
            <summary> Returns the values for a tag on a specific node. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTrunkValues(System.String)">
            <summary> Returns a list of values in this node and all parent nodes for a specific tag name. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNearestTrunkValues(System.String)">
            <summary> Walks up the tree (including the current node) and returns the values for the first occurance of a tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllBranchValues(System.String)">
            <summary> Returns a list of values in this node and all child nodes for a specific tag name. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTreeValues(System.String)">
            <summary> Returns a list of values in this node, all parent nodes, and all child nodes for a specific tag name. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.Value">
            <summary> Represents a value of a tag. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.ValueSet">
            <summary> A collection of values. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.InvalidExpressionException">
            <summary> Thrown when an expression is parsed that is not valid. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.ExpressionEvaluationException">
            <summary> Thrown when an expression cannot be evaluated. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.Expression">
            <summary> An expression that can be evaluated. </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.InfiniteLifetimeMarshalByRefObject">
            <summary>
            This overrides the lease provided on a MarshalByRef object so that it doesn't
            timeout during debugging or otherwise.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Report.DEBUG">
            <summary>
            Bit flags used for specifying the logging level of a report.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.GetRoot">
            <summary>
            Get the global root reporting destination.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.#ctor(ServerTestFramework.Report,System.String)">
            <summary>
            Create a new report that inherits it's properties (minus filter) from
            a parent report. Name must be specified for every report seperately.
            </summary>
            <param name="parent">Report to inherit properties from</param>
        </member>
        <member name="M:ServerTestFramework.Report.#ctor(System.String)">
            <summary>
            Create a new default style report with a given name and unspecified
            category. This report will automatically be attached to the root 
            reporting object.
            </summary>
            <param name="Name">Name of this report.</param>
        </member>
        <member name="M:ServerTestFramework.Report.AddReportDestination(ServerTestFramework.Report.Destination)">
            <summary>
            Add a new reporting destination to the internal list of reporters.
            </summary>
            <param name="dest">Class conforming to abstract protocol Destination</param>
        </member>
        <member name="M:ServerTestFramework.Report.RemoveReportDestination(ServerTestFramework.Report.Destination)">
            <summary>
            Removeo a new reporting destination by reference.
            </summary>
            <param name="dest">Class conforming to abstract protocol Destination</param>
        </member>
        <member name="M:ServerTestFramework.Report.ContainsReportDestination(ServerTestFramework.Report.Destination)">
            <summary>
            Returns true if this object contains a reference to a specific reporting destination 
            </summary>
            <param name="dest">Class conforming to abstract protocol Destination</param>
        </member>
        <member name="M:ServerTestFramework.Report.ResetDestinations">
            <summary>
            Remove all reporting destinations.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.SetLevelFilter(System.UInt32)">
            <summary>
            Change the level of reporting that will be written.
            </summary>
            <param name="filter">Log level bitflags</param>
        </member>
        <member name="M:ServerTestFramework.Report.EnableFilter(System.UInt32)">
            <summary>
            Shortcut to enable only a specific set of filters
            </summary>
            <param name="filter">Log level bitflags</param>
        </member>
        <member name="M:ServerTestFramework.Report.DisableFilter(System.UInt32)">
            <summary>
            Shortcut to disable only a specific set of filters
            </summary>
            <param name="filter">Log level bitflags</param>
        </member>
        <member name="M:ServerTestFramework.Report.Debug(System.String)">
            <summary>
            Log a message at debug priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Debug(System.String,System.Object[])">
            <summary>
            Log a message at debug priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Info(System.String)">
            <summary>
            Log a message at info priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Info(System.String,System.Object[])">
            <summary>
            Log a message at info priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Warn(System.String)">
            <summary>
            Log a message at warning priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Warn(System.String,System.Object[])">
            <summary>
            Log a message at warning priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Error(System.String)">
            <summary>
            Log a message at error priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Error(System.String,System.Object[])">
            <summary>
            Log a message at error priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Fatal(System.String)">
            <summary>
            Log a message at fatal priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Fatal(System.String,System.Object[])">
            <summary>
            Log a message at fatal priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.Report.Success(System.String)" -->
        <member name="M:ServerTestFramework.Report.Success(System.String,System.Object[])">
            <summary>
            Log a message at success priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.FormatLogLine(System.UInt32,System.String,System.String)">
            <summary>
            Formats and timestamps a log line nicely.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.BlockUntilQueuedLinesAreProcessed">
            <summary> Blocks until all loglines currently queued up have been processed. </summary>
        </member>
        <member name="P:ServerTestFramework.Report.GlobalCustomPrefixFormat">
            <summary>
            This controls the prefix format of log lines.
            Example: "[%level%] [%date%] [%path%] "
            </summary>
        </member>
        <member name="P:ServerTestFramework.Report.GlobalCustomPrefixDateFormat">
            <summary>
            This controls the format of the date used in loglines, using the standard .NET date format specifiers.  Specifying null will use the system default.
            Example: "yyyy'-'M'-'d' 'H':'mm':'ss"
            </summary>
        </member>
        <member name="T:ServerTestFramework.Report.Destination">
            <summary>
            Interfaced needed to a log message sink.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Report.BulkDestination">
            <summary>
            Interfaced to log many lines at once.  This interface is optional.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Report.ReportLine">
            <summary>
            A single line stored from the report output
            </summary>
        </member>
        <member name="T:ServerTestFramework.RUN_TYPE">
            <summary>
            Type of execution being run.
            These should be changed to proper case at some point.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestNode">
            <summary>
            The fundamental unit that makes up test groups and test cases.
            A node can be either be executed or can contain any number of other nodes as children.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.HasAttribute(System.Type)">
            <summary>
            Returns whether an attribute is present on this node.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetAttributes(System.Type)">
            <summary>
            Returns a list of all attributes on this node.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a list of all attributes on this node.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetAttribute``1">
            <summary>
            Returns a single attribute of the requested type
            </summary>
            <typeparam name="TAttributeType">The type of attribute to get</typeparam>
            <returns>An attribute of the given type if it exists, or null otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetActualType">
            <summary>
            Returns the type of the class represented by the TestNode (which may be a wrapper around the real class)
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetActualInstance">
            <summary>
            /// Returns the class represented by the TestNode (which may be a wrapper around the real class)
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.CreateContextData">
            <summary>
            Creates context data on a node.  This is useful for overiding values for a specific branch of the tree.
            If it already exists it is cleared.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.DestroyContextData">
            <summary>
            Destroys context data on a node.  The context on the root node may not be destroyed
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetContextData(System.String)">
            <summary>
            Searches ourself and then up the tree looking for a specifically named piece of data.
            Returns null if not found.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.SetContextData(System.String,System.Object)">
            <summary>
            Sets data into the first context that is found from searching ourself and then up the tree.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetFlattenedSubtree(System.Collections.Generic.List{ServerTestFramework.TestNode}@)">
            <summary>
            Retrieves a flattened list of all nodes under this one, including itself.
            </summary>
            <param name="allNodes"></param>
        </member>
        <member name="M:ServerTestFramework.TestNode.#ctor(System.String,System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode},System.Boolean,System.Boolean)">
            <summary>
            Creates a test node with the given children.
            </summary>
            <param name="name">The name of the test node.</param>
            <param name="children">The children to give the test node.</param>
            <param name="addFunctionalData">If true, adds functional data to the nodes.</param>
            <param name="addStressData">If true, adds stress data to the nodes.</param>
            <remarks>
            Attempting to pass the Children from another TestNode may not work, as the enumeration object
            may not function properly when its container is modified by the AddChild function.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.TestNode.GenerateNodeTree(System.String)">
            <summary>
            Returns a list of all top level nodes, which have had all child nodes fully populated.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PostProcessBranchConstruction">
            <summary>
            This will be called once on all node instances after the full tree has been constructed and linked together.
            A node may use this to make changes to itself or its children.  This includes adding/removing children and changing data members.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.CompoundCaseComparison(ServerTestFramework.CompoundCaseAttribute,ServerTestFramework.CompoundCaseAttribute)">
            <summary>
            Used to sort the compound cases.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Clone">
            <summary>
            Generates a copy of the node without sharing references.
            This new node is not immediately linked into any tree.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.CloneBranch">
            <summary>
            Constructs a Clone() of this node, and also of all child nodes, which are linked back together as a branch of a new tree.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Dispose">
            <summary>
            Obliterates the node and all of its children
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.ConstructFromType(System.Type)">
            <summary>
            Constructs a basic node with no linkage and no use-specific data from a type.
            If the type isn't derived from TestNode, it will be wrapped as a fake group.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.AddChild(ServerTestFramework.TestNode,System.Boolean,System.Boolean)">
            <summary>
            Adds a child node to this node's children.
            It optionally adds stress/functional-specific data to the node as well (if it does not already exist).
            Only valid during construction of a node or before that node's children have started populating.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.AddChild(ServerTestFramework.TestNode)">
            <summary>
            Adds a child node to this node's children.
            It optionally adds functional-specific data to the node as well (if it does not already exist).
            Only valid during construction of a node or before that node's children have started populating.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.RemoveChild(ServerTestFramework.TestNode)">
            <summary>
            Removes a child from this node.
            Only valid during construction of a node or before that node's children have started populating.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.FindNode(ServerTestFramework.TestNode,System.String)">
            <summary>
            Searches a tree for a node based on it's name.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.EditInstances(System.Collections.Generic.List{ServerTestFramework.CompoundCaseAttribute}@)">
            <summary>
            This can optionally be implemented to manually tweak how instances are generated.
            It is passed the list of instances that were specified from attributes.  You can then add or remove from this list.
            TODO: This list was meant to be a "linked" list, not a vector.  It would be a breaking change now though...
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PreRun">
            <summary>
            Called before Run is called and before child nodes are run.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PreRun(ServerTestFramework.RUN_TYPE)">
            <summary>
            Called before Run is called and before child nodes are run.
            You may optionally implement this INSTEAD of the parameterless PreRun.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PostRun">
            <summary>
            Called after Run has been called and after child nodes have run.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PostRun(ServerTestFramework.RUN_TYPE)">
            <summary>
            Called after Run has been called and after child nodes have run.
            You may optionally implement this INSTEAD of the parameterless PostRun.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeSetup">
            <summary>
            Similar to and called before Setup, except it is normally only ever called once.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeSetup(ServerTestFramework.RUN_TYPE)">
            <summary>
            Similar to and called before Setup, except it is normally only ever called once.
            You may optionally implement this INSTEAD of the parameterless OneTimeSetup.  It may be called once for each type.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeCleanup">
            <summary>
            Similar to and called after Cleanup, except it is normally only ever called once.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeCleanup(ServerTestFramework.RUN_TYPE)">
            <summary>
            Similar to and called after Cleanup, except it is normally only ever called once.
            You may optionally implement this INSTEAD of the parameterless OneTimeCleanup.  It may be called once for each type.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Run">
            <summary>
            Called to execute the test.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Run(ServerTestFramework.RUN_TYPE)">
            <summary>
            Called to execute the test.
            You may optionally implement this INSTEAD of the parameterless Run.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Prerequisites(System.Collections.Generic.Dictionary{System.String,System.Boolean}@)">
            <summary>
            Functional:
            This is called when a functional run for a suite is started and before Initialize.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.Parent">
            <summary>
            The parent node of this node in the tree.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.Children">
            <summary>
            The children nodes of this node in the tree.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.Desc">
            <summary>
            Description of the test case
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.FullName">
            <summary>
            The fully qualified name of the node, which uniquely identifies it in the tree.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.ContainingDll">
            <summary>
            Stores the dll that this node belongs to.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestNodeFunction">
            <summary>
            Wrap a method that represents a test case and present it as a TestNode
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncStressTestNode">
            <summary>
            A stress base for doing asynchronous tests.  Derived classes must implement their Begin function
            in a thread safe manner, as only one actual object will ever be created.
            The Run function allows the async tests to run synchronously if the scheduler does not
            have support for async tests.
            </summary>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.MaximumWaitTimeMilliseconds">
            <summary>
            The maximum time to wait when running synchronously.
            </summary>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.Run">
            <summary>
            The Run function allows the async tests to run synchronously if the scheduler does not
            have support for async tests.
            </summary>
            <returns>The result of running the test.</returns>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.WaitEventQ">
            <summary>
            The queue of ManualResetEvents to be used when running synchronously.
            </summary>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.GetWaitEvent">
            <summary>
            Gets a ManualResetEvent from the queue, or creates one if it is empty.
            </summary>
            <returns>A ManualResetEvent.</returns>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.ReleaseWaitEvent(System.Threading.ManualResetEvent)">
            <summary>
            Returns a ManualResetEvent to the queue.
            </summary>
            <param name="mre">The ManualResetEvent to return.</param>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.Begin(System.Object)">
            <summary>
            The main entry point for external callers that are aware of AsyncStressTestBase.
            </summary>
            <param name="state">A state object that will be passed back to the external caller.</param>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.Begin(ServerTestFramework.AsyncStressTestNode.AsyncStressTracking)">
            <summary>
            This is the entry point for the test case.  Remember that it must be thread safe.
            All tests should call End to report the result of running the test.
            </summary>
            <param name="tracker">The state object used to track this test run.</param>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.AsyncFinish">
            <summary>
            The function that will be called by the test to report its result.
            The scheduler should set this value on startup to receive callbacks.
            </summary>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.End(ServerTestFramework.AsyncStressTestNode.AsyncStressTracking)">
            <summary>
            Reports the test result given to it.
            </summary>
            <param name="result">The result of running the test.</param>
            <param name="tracker">The state object used to track this test run.</param>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.End(System.Exception,ServerTestFramework.AsyncStressTestNode.AsyncStressTracking)">
            <summary>
            Reports the test result and updates the tracker.
            </summary>
            <param name="result">The result of running the test.</param>
            <param name="exc">The exception that occured.</param>
            <param name="tracker">The state object used to track this test run.</param>
        </member>
        <member name="T:ServerTestFramework.AsyncStressTestNode.AsyncStressTracking">
            <summary>
            An object that may be useful for debugging and will be used for running synchronously.
            </summary>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.AsyncStressTracking.IDVal">
            <summary>
            The ID value position, each tracker gets its own number until we wrap.
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncStressTestNode.AsyncCompletion">
            <summary>
            The delegate type that is used to notify the scheduler of the async test completing.
            </summary>
            <param name="state">A state object that will be passed back to the external caller.</param>
            <param name="result">The result of running the test.</param>
            <param name="exc">The exception, if any, that occured.</param>
            <param name="startTime">The time the test was started (from QueryPerformanceCounter).</param>
        </member>
        <member name="T:ServerTestFramework.FunctionalNodeData">
            <summary>
            Data about a node that is specific to functional tests.
            Note that if A node has functional data, its parent is guarenteed to also.
            </summary>
        </member>
        <member name="T:ServerTestFramework.StressNodeData">
            <summary>
            Data about a node that is specific to stress tests.
            </summary>
        </member>
        <member name="T:ServerTestFramework.ThreadMaker">
            <summary>
            Utility function to just create a System.Thread (this internally updates the thread tracker automatically).
            (You must still call .Start() on it like normal)
            </summary>
        </member>
        <member name="T:ServerTestFramework.ThreadBase">
            <summary>
            Represents a class with a worker thread (this internally updates the thread tracker automatically).
            </summary>
        </member>
        <member name="T:ServerTestFramework.ThreadTracker">
            <summary>
            Thread static storage for data that should be used across an individual test case run.
            For use and managed by the framework.
            </summary>
        </member>
        <member name="F:ServerTestFramework.ThreadTracker.TestCaseNameKey">
            <summary>The dictionary key for the current test case full name.</summary>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.Set(System.String,System.Object)">
            <summary>
            Sets a value within the thread tracking data container.
            </summary>
            <param name="key">The key to use for the value.</param>
            <param name="value">The value to associate with the key.</param>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.TryGet``1(System.String,``0@)">
            <summary>
            Attempts to get a value out of the thread tracking data container.
            </summary>
            <typeparam name="T">The type of value that is expected.</typeparam>
            <param name="key">The key to use when looking in the container.</param>
            <param name="value">The value will be set to this out parameter.</param>
            <returns>True if the container has the key; false if it does not.</returns>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.TryGetSetDefault``1(System.String,``0@,``0)">
            <summary>
            Attempts to get a value out of the thread tracking data container; if it does not contain the key, 
            add it (atomically) using the default value provided.
            </summary>
            <typeparam name="T">The type of value that is expected.</typeparam>
            <param name="key">The key to use when looking in the container.</param>
            <param name="value">The value will be set to this out parameter.</param>
            <param name="defaultValue">The default value to use if the key is not present in the container.</param>
            <returns>True if the container already had the key; false if it did not.</returns>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.Reset">
            <summary>
            Resets the thread tracking data.
            </summary>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.GetThreadTrackerData">
            <summary>
            Gets the thread tracking data container, for use in passing data to another thread.
            </summary>
            <returns>The thread tracking data object.</returns>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.SetThreadTrackerData(System.Object)">
            <summary>
            Sets the thread tracking data, for use in passing data to another thread.
            </summary>
            <param name="data">The thread tracking data object.</param>
        </member>
        <member name="F:ServerTestFramework.ThreadTracker._threadDataCreationLock">
            <summary>Keeps dictionary creation thread safe.</summary>
        </member>
        <member name="F:ServerTestFramework.ThreadTracker._threadTrackData">
            <summary>Backing for ThreadTrackData.</summary>
        </member>
        <member name="P:ServerTestFramework.ThreadTracker.ThreadTrackData">
            <summary>
            The thread tracking data dictionary.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TEST_RESULTS">
            <summary>
            The result of a single execution of a run.
            These should be changed to proper case at some point.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FunctionalSchedulerNodeData">
            <summary>
            Information that each node needs to be used by the functional scheduler.
            This is reset everytime a new run is started.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FuncSchedulerEvents">
            <summary>
            Sends events for the functional scehduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FuncSchedulerHelpers">
            <summary>
            Misc helpers for the functional scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FunctionalSchedulerSettings">
            <summary>
            Overall parameters to the functional scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FuncScheduler">
            <summary>
            The functional scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestScheduler">
            <summary>
            Functional test schedular interface.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.Initialize(ServerTestFramework.Runner.FunctionalSchedulerSettings,ServerTestFramework.Runner.TestEventListener,System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode})">
            <summary>
            Called to set up the scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.Run">
            <summary>
            This call will block and run tests and block until either someone calls Stop or the tests finish.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.Stop">
            <summary>
            Stop running tests.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.ValidateParameters">
            <summary>
            Validates that the current scheduler settings are valid.
            </summary>
            <returns>true if they are valid</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.GetSerializableFunctionalData(ServerTestFramework.TestNode)">
            <summary>
            Returns a serializable dictionary which contains the contents of the functional
            scheduler node data of a subtree which is passed in.
            </summary>
            <param name="rootNode"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.SerializeRun">
            <summary>
            Takes the first node's name (for convenience and assuming that most runs are a single-dll)
            and serializes the current run's results to a file in the format 
            SuiteNameSerializedRunResultsTimestamp.xml. Saves into the FuncOutput\SerializedRunResults path.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.SerializeRun(System.String)">
            <summary>
            Takes the root loglines and the test case functional scheduler node data and serializes them into a file.        
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.CollectNodePrerequisitesData(ServerTestFramework.TestNode)">
            <summary>
            Collect Prerequisites Data.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.CollectNodePrerequisitesDataRecurse(System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode})">
            <summary>
            Traverse the nodes tree to populate NodePrerequisitesData.
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="T:ServerTestFramework.Runner.SerializedRunResults">
            <summary>
            Used to serialize a single run's worth of data to a file.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJob.#ctor(ServerTestFramework.TestNode,System.Single,System.String,ServerTestFramework.Runner.TestResultCollection)">
            <summary>
            Constructor for dynamic test cases
            </summary>
            <param name="suiteName"></param>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="testname"></param>
            <param name="allResults"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJob.#ctor(ServerTestFramework.TestNode,System.Single,ServerTestFramework.Runner.TestResultCollection)">
            <summary>
            Regular constructor
            </summary>
            <param name="suiteName"></param>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="allResults"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJob.#ctor(System.Type,ServerTestFramework.Runner.TestResultCollection)">
            <summary>
            Regular constructor
            </summary>
            <param name="suiteName"></param>
            <param name="type"></param>
            <param name="allResults"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.#ctor">
            <summary>
            Creates an empty job list.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.AddNode(ServerTestFramework.TestNode)">
            <summary>
            Adds a node to this job list.
            </summary>
            <param name="node">The node to add.</param>
            <returns>A List of the StressJobs added.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.AddNodes(System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode})">
            <summary>
            Adds nodes to this job list.
            </summary>
            <param name="rootNodes">The nodes to add.</param>
            <returns>A List of the StressJobs added.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.RemoveNode(ServerTestFramework.TestNode)">
            <summary> Removes a specific root node and all children from the list. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.FindStressCases(ServerTestFramework.TestNode,System.Collections.Generic.List{ServerTestFramework.TestNode})">
            <summary>
            Recursively finds the stress tests for the given node, adding them to the list.
            </summary>
            <param name="node">The node to search.</param>
            <param name="list">The place to add stress nodes to.</param>
        </member>
        <member name="P:ServerTestFramework.Runner.StressJobList.TestResults">
            <summary>
            The test results used by this job list.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerStage">
            <summary> Current state of the scheduler. </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressTestScheduler">
            <summary>
            Interface for stress test schedulers.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Initialize(ServerTestFramework.Runner.StfXmlDoc,ServerTestFramework.Runner.StressJobList,ServerTestFramework.Runner.StressSettingsCommon)">
            <summary>
            Called to set up the scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Shutdown">
            <summary>
            Shuts down the scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Run">
            <summary>
            This call will block and run tests and block until someone calls Stop.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Stop">
            <summary>
            Stop running tests.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Tick">
            <summary>
            May be called regularly by anything using the scheduler.  For instance can be used to update the
            control with status information.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.GetScaleValue(ServerTestFramework.Runner.StressJob)">
            <summary>
            Gets a scale value from a stress job.
            </summary>
            <param name="job">The job to get from.</param>
            <returns>The scale value from the stress job.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.SetScaleValue(ServerTestFramework.Runner.StressJob,System.Single)">
            <summary>
            Sets a scale value on a stress job.
            </summary>
            <param name="job">The job to set on.</param>
            <param name="val">The scale value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.LoadSettings(System.Xml.XmlNode)">
            <summary>
            Load settings from an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.SaveSettings(System.Xml.XmlNode)">
            <summary>
            Save settings to an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.GetSettings">
            <summary> Returns the settings used by the current scheduler. </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressTestScheduler.SchedulerControl">
            <summary>
            Gets the control associated with the scheduler.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressTestScheduler.ScaleName">
            <summary>
            The name of the scale value used by this scheduler.  Displayed on GUI elements.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressTestScheduler.ActiveThreads">
            <summary>
            Number of threads in use by this scheduler that are currently active (not stopped)
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsCommon">
            <summary> Settings shared by all stress schedulers. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSettingsCommon.CopyFrom(ServerTestFramework.Runner.StressSettingsCommon)">
            <summary> Copies all our members in from another settings object. </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerHelpers">
            <summary> Helpers for doing things with the stress schedulers. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.RunScheduler(ServerTestFramework.Runner.StressTestScheduler,ServerTestFramework.Runner.StressJobList)">
            <summary> Starts a stress scheduler and blocks until it stops running. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.StopScheduler(ServerTestFramework.Runner.StressTestScheduler)">
            <summary> Stop a scheduler that is running.  This blocks until the scheduler is finished stopping. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.VerifyOrPerformPreRun(ServerTestFramework.TestNode,ServerTestFramework.Runner.StressSettingsCommon)">
            <summary> Verifies and performs if needed the PreRun steps for a node and any of its parents. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.PerformPostRun(ServerTestFramework.Runner.StressJobList,ServerTestFramework.Runner.StressSettingsCommon)">
            <summary> Performs PostRun steps for all jobs. </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsDestroyer">
            <summary>
            Settings for the Destroyer Scheduler
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsTPS">
            <summary>
            Settings and Status for the TPS based scheduler.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StressSettingsTPS.SinWavePeriod">
            <summary>
            Period of the sine wave, in seconds.
            </summary>
            <remarks>
            Should be a factor of 60*60*24; in other words an integral number of periods should pass in a 
            single day.  Thus, 24 hours, 12 hours, 8 hours, 6 hours, etc.  If this assumption is not held,
            the wave will not stay consistent when the day resets (midnight).
            </remarks>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerDestroyer">
            <summary>
            The destroyer scheduler is based on the TPS scheduler.
            It is designed to increase load until a set amount of failures occur.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerTPS">
            <summary>
            The TPS based stress scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.Tick">
            <summary>
            Timer services provided by our owner.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.GetScaleValue(ServerTestFramework.Runner.StressJob)">
            <summary>
            Gets a scale value from a stress job.
            </summary>
            <param name="job">The job to get from.</param>
            <returns>The scale value from the stress job.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.SetScaleValue(ServerTestFramework.Runner.StressJob,System.Single)">
            <summary>
            Sets a scale value on a stress job.
            </summary>
            <param name="job">The job to set on.</param>
            <param name="val">The scale value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.LoadSettings(System.Xml.XmlNode)">
            <summary>
            Load settings from an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.SaveSettings(System.Xml.XmlNode)">
            <summary>
            Save settings to an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.TestCallback(System.Object,System.Exception,System.Int64)">
            <summary>
            The callback used by async tests to report success or failure.
            </summary>
            <param name="state">The state object that was passed to Begin.</param>
            <param name="result">The result of running the test.</param>
            <param name="exc">The exception, if any, that occured during the asynchronous portions of the test.</param>
            <param name="startTime">Time the test started (from QueryPerformanceCounter).</param>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPS.IsInProgress">
            <summary>
            Checks the job list for in progress tests, if there are any, return true.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPS.SchedulerControl">
            <summary>
            Gets the StressSchedulerTPSControl.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPS.ScaleName">
            <summary>
            The name of the scale value used by this scheduler.  Displayed on GUI elements.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsPriority">
            <summary>
            Settings for the ancient scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressThread">
            <summary>
            Ye Aulde stress schedular apparently uses this.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressThread.SoftTerminate">
            <summary>
            Sets the terminate flag, the thread will stop after the current job is complete.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressThread.Terminate">
            <summary>
            Kills the thread.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerPriority">
            <summary>
            The ancient priority-based stress scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.GetScaleValue(ServerTestFramework.Runner.StressJob)">
            <summary>
            Gets a scale value from a stress job.
            </summary>
            <param name="job">The job to get from.</param>
            <returns>The scale value from the stress job.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.SetScaleValue(ServerTestFramework.Runner.StressJob,System.Single)">
            <summary>
            Sets a scale value on a stress job.
            </summary>
            <param name="job">The job to set on.</param>
            <param name="val">The scale value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.LoadSettings(System.Xml.XmlNode)">
            <summary>
            Load settings from an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.SaveSettings(System.Xml.XmlNode)">
            <summary>
            Save settings to an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.BeginStress">
            <summary>
            Called by AsyncButtonClickAction when Start button is clicked. This is when we
            actually start doing the stress test work.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.TerminateThreads(System.Int32)">
            <summary>
            Terminate some number of threads gently. 
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.TerminateAllThreads">
            <summary>
            Terminate all threads, used when stopping stress run.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerPriority.ScaleName">
            <summary>
            The name of the scale value used by this scheduler.  Displayed on GUI elements.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StressSchedulerPriControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.SyncWithSettings">
            <summary>
            Syncs the various child controls with the settings object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.SyncWithSettingsStatus">
            <summary>
            Syncs the status labels with the settings values.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StressSchedulerTPSControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPSControl.Settings">
            <summary>
            The settings object used by the scheduler that owns this control.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestAction">
            <summary>
            Specific types of events that occur inside of the test scheduler.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Start">
            Test case started pre-run.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.PostStart">
            Test case started running the actual test.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Pause">
            Test case started post-run.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Resume">
            Test run paused on a node.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Pass">
            Test run resumed on a node.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Fail">
            Test returned a passed result.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Timeout">
            Test case returned a failed result.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.PreFail">
            Test case timed out.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.PostFail">
            Prerun setup steps for the test failed.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Retry">
            Postrun cleanup steps for the test failed.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Ignore">
            A test case that previously failed is now being re-run.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Finish">
            Test case was not completely executed (or returned not executed).
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.StartAll">
            Test case completely finished.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.StopAll">
            Tests begin running. Details will contain a count of running tests.  Node will be null for this.
        </member>
        <member name="T:ServerTestFramework.Runner.TestEventArgs">
            <summary>
            Event arguments notifying listeners of a test result.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestEventListener">
            <summary>
            This interface should be implemented by any class that would be notified by a functional test scheduler of events
            as it is running tests.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.MultiTestEventListener">
            <summary>
            Allows test events to be distributed to multiple destinations.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestResult">
            <summary>
            All stats-related variables and calculations for stress testing should go in this class.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResult.Start">
            <summary>
            Start counting elapsed time.  The counter is stopped when End is called.  The Elapsed time is cumulative through Start/End pairs.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResult.BeginInProgress">
            <summary>
            Increases the count of in progress test runs.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResult.EndInProgress">
            <summary>
            Decreases the count of in progress test runs.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestResultCollection">
            <summary>
            Represents a collection of TestResult objects and provides methods for calculating summary values
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResultCollection.CreateTestResult(System.String)">
            <summary>
            Creates a new TestResult and adds it to the collection
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResultCollection.AddTestResult(ServerTestFramework.Runner.TestResult)">
            <summary>
            Add existing TestResult to collection
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.Equals``1(``0[],``0[])">
            <summary>
            Check i two arrays of the same type are equal.  Much faster than the non-generic version
            </summary>
            <typeparam name="T">The type of array to compare</typeparam>
            <param name="a">The first array to compare</param>
            <param name="b">The second array to compare</param>
            <returns>True if the arrays are equal, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.Reverse``1(``0[])">
            <summary>
            Reverses the bytes in the array
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.ByteComparison(System.Byte,System.Byte)">
            <summary>
            Implementation of the System.Comparison delegate for byte values
            </summary>
            <param name="left">First byte to compare</param>
            <param name="right">Second byte to compare</param>
            <returns>
            Less than 0: x is less than y.
            0: x equals y.
            Greater than 0: x is greater than y.
            </returns>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.SearchByteArray(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            searches an array for another array and returns the index of the start of the found block, or -1 if not found
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.ArrayComparer`1" -->
        <member name="M:ServerTestFramework.ArrayComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Constructor
            </summary>
            <param name="elementComparer">A System.Comparison delegate capable of comparing
            two values/objects of type T</param>
        </member>
        <member name="M:ServerTestFramework.ArrayComparer`1.Compare(System.Array,System.Array)">
            <summary>
            Compares two arrays
            </summary>
            <param name="left">First array to compare</param>
            <param name="right">Second array to compare</param>
            <returns>
            Less than 0: x is less than y.
            0: x equals y.
            Greater than 0: x is greater than y.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ServerTestFramework.ArrayComparer`1.ElementComparer" -->
        <member name="M:ServerTestFramework.Utilities.AssemblyUtils.LoadAssemblyUsingDefaultMethod(System.String)">
            <summary> Uses DefaultToLoadingAssemblyDirectly to decide whether to load an assembly directly from a file like normal, or whether to load it into memory first to avoid a file lock. </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.AssemblyUtils.LoadAssemblyBytesAndReferences(System.String)">
            <summary> Loads the bytes for an assembly file then creates the assembly from that, so windows doesn't hold a lock on the file.  The referenced assemblies are then resolved like normal (which WILL lock those files).  The downside is this sometimes confuses debuggers. </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.AsyncUtils.ParallelRunner.Run(ServerTestFramework.Utilities.AsyncUtils.PRFuncToCall,System.UInt32,System.UInt32,System.Object,System.UInt32)">
            <summary>
            Starts a set of parallel function calls and waits for them to finish.
            Exceptions are rethrown on to caller if thrown on a thread.
            </summary>
            <param name="fToCall">the function to call</param>
            <param name="count">total number of calls to make (the value passed to your function is incremented each time starting from 0)</param>
            <param name="maxAtOnce">max number of threads to run at once</param>
            <param name="userData">any user-defined information to pass on (note that it is passed by referance, so all threads share the same copy)</param>
            <param name="threadDelay">Delay in ms between thread creations (default 0).  This is useful to prevent a ton of operations that start all at once from trying to hammer a network interface silmutaneously, which can cause packets to be dropped.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.AsyncUtils.ParallelRunner.RunAsync(ServerTestFramework.Utilities.AsyncUtils.PRFuncToCall,System.UInt32,System.UInt32,System.Object,System.UInt32)">
            <summary>
            Same as Run(), only returns immediately.  The returned Status object can be used to monitor the progress.
            If an exception occurs, it is stored in the status object.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.AsyncUtils.ParallelRunner.Status">
            <summary>
            represents the status of an asynchronous run
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ByteEncoding">
            <summary>
            Encoding to just get the gosh dern bytes out of the string, and visa versa
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ConsoleX">
            <summary>
            <p>class ConsoleX: Extends standard Console  with kbhit() and getch() methods and colored output.</p>
            
            <p>uses MSVCR70.DLL Runtime library for kbhit() and getch()</p>
            <p>uses kernel32.dll and Win32 Console API for colored output</p>
             
            contacts: VladiP
            </summary>
            <example>
            <code>
            // write colored output for arg list without brackets {},  see comments in CC class  for color output details
            ConsoleX.WriteLine(CC.BLUE, " Simple colored output: ", CC.GREEN, " int: ",i, "  float: ", f);
            ConsoleX.Write(CC.WHITE, "\n Formatted output: ", CC.GREEN, "f= ", f.ToString("000.0")); 
            
            // kbhit example
            while (27 != c)
            {
            	if (ConsoleX.kbhit())
            	{
            		c = ConsoleX.getch();
            		ConsoleX.WriteLine(CC.GREEN,"Key: ", c, "  code: ", CC.WHITE, ((int)c).ToString("d") );
            	}
            }
            </code>
            </example>
            
        </member>
        <member name="M:ServerTestFramework.Utilities.ConsoleX.Write(System.Object[])">
            <summary>
            writes arg list to console, parameters with byte type will set color options for the next output items
            see comments in CC class  for color output details
            </summary>
            <param name="olist"> parameter list with optional byte type color modifiers </param>
            <returns> byte value - old default console color </returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.ConsoleX.WriteLine(System.Object[])">
            <summary>
            WriteLine: works as Write with new line at the end of parameter list
            </summary>
            <param name="olist"></param>
            <returns> byte value - old default console color </returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.CC">
            <summary>
            class CC - contains color constants to be used with ConsoleX output methods.
            Thanks to Keith Stutler (KeithSt) -- he suggested to put all constants into public class
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.COORD">
            <summary>
            Win32 API struct
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.SMALL_RECT">
            <summary>
            Win32 API struct
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.CONSOLE_SCREEN_BUFFER_INFO">
            <summary>
            Win32 API struct
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.Events">
            <summary>
            Works with event logs on multiple servers.  Primary use is searching for specific
            events withing logs since the last checkpoint.
            </summary>
            <example>
            // Set up checking event log for the kdc xmacs...
            string[] servers = Global.XEnv.GetServerListByInterface(xonline.common.config.Interface.kdcsvc);
            Events logs = new Events(servers);
            logs.Source = "XMACS"; //optional
            logs.Init();
            // Run tests...
            ...
            // Check for events by search string in new events.
            if (change.TestForChange("execution failed"))
            ...
            </example>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.Init">
            <summary>
            Run before your operation to get a base for the log.
            </summary>
            <returns>True if all servers listed responded; false if any did not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.String)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="search">String to look for in the log.</param>
            <returns>True if Search string is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.String,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="search">String to look for in the log.</param>
            <param name="advance">If true, advances the search index; if false, does not.</param>
            <returns>True if Search string is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="id">The event id to search for.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64,System.Byte[])">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="id">The event id to search for.</param>
            <param name="eventData">The event data to check events for.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="id">The event id to search for.</param>
            <param name="advance">If true, advances the search index; if false, does not.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64,System.Byte[],System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="id">The event id to search for.</param>
            <param name="eventData">The event data to check events for.</param>
            <param name="advance">If true, advances the search index; if false, does not.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChangeAll(System.String,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="expect">True if the string is expected; false if it is not.</param>
            <returns>
            If expect is true: Returns true if the string is found on all servers; false if it is missing from one or more.
            If expect is false: Returns true if the string is not found on all servers; false if it is found on one or more.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChangeAll(System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="expect">True if the string is expected; false if it is not.</param>
            <param name="advance">If true, advances the last time; if false, does not.</param>
            <returns>
            If expect is true: Returns true if the string is found on all servers; false if it is missing from one or more.
            If expect is false: Returns true if the string is not found on all servers; false if it is found on one or more.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.String,System.DateTime,System.DateTime@)">
            <summary>
            Searches the server log for the search string that occured in an event after begin.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="search">The string to search for.</param>
            <param name="begin">The earliest the event could occur to be relevant.</param>
            <param name="outLastTime">Output param: The last time value that was checked for events in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.String,System.Int32,System.Int32@)">
            <summary>
            Searches the server log for the search string that occured in an event after the given index.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="search">The string to search for.</param>
            <param name="index">The search will begin after the event with this index.</param>
            <param name="outLastIndex">Output param: The index of the last event that was checked in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Searches the server log for the event id after begin.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="begin">The earliest the event could occur to be relevant.</param>
            <param name="end">The latest the event could occur to be relevant.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.Int32,System.Int32@)">
            <summary>
            Searches the server log for the event id that occured after the given index.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="index">The search will begin after the event with this index.</param>
            <param name="outLastIndex">Output param: The index of the last event that was checked in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Searches the server log for the event id that occured after the given index.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="eventData">The binary data that should be included in the event.</param>
            <param name="index">The search will begin after the event with this index.</param>
            <param name="outLastIndex">Output param: The index of the last event that was checked in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.String,System.DateTime,System.DateTime)">
            <summary>
            Searches the server log for the event id after begin.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="search">The string to search for.</param>
            <param name="begin">The earliest the event could occur to be relevant.</param>
            <param name="end">The latest the event could occur to be relevant.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.GetEventsAfter(System.Diagnostics.EventLog,System.DateTime)">
            <summary>
            Gets all of the events after a certain time.  Attempts to compensate for a moving log target.
            </summary>
            <param name="eventLog">The log to get from.</param>
            <param name="begin">The time to start getting events.</param>
            <returns>An array of events from the log after the time.</returns>
            <remarks>
            The change to make this copy out the timed list of entries was due to the fact that when the event log
            becomes too large, it will automatically truncate.  This would cause the end of the list to drop out
            from under the index, throwing an exception.
            
            We now do a binary search to find the oldest entry we care about, then copy out the entries from that
            one to the end.  If the oldest entry in the log hasn't changed, then we continue on.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.FindFirstGTE(System.Diagnostics.EventLog,System.DateTime)">
            <summary>
            Does a binary search to find the first entry whose time is >= the time passed in.
            </summary>
            <param name="log">The log to search.</param>
            <param name="time">The time to search for.</param>
            <returns>The index of the entry, or -1 if it all entries are earlier than time.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.GetEventsAfter(System.Diagnostics.EventLog,System.Int32)">
            <summary>
            Gets all of the events after a certain index.  Attempts to compensate for a moving log target.
            </summary>
            <param name="eventLog">The log to get from.</param>
            <param name="index">The index after which to start getting events.</param>
            <returns>An array of events from the log after the index..</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.FindFirstGT(System.Diagnostics.EventLog,System.Int32)">
            <summary>
            Does a binary search to find the first entry whose index is > the index passed in.
            </summary>
            <param name="log">The log to search.</param>
            <param name="index">The index to search for.</param>
            <returns>The index of the entry, or -1 if it all entries are earlier than index.</returns>
        </member>
        <member name="P:ServerTestFramework.Utilities.Events.Servers">
            <summary>
            List of servers to check for events.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.Events.Source">
            <summary>
            Source of the events.  ie. 'xmatchfd'
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.Events.Log">
            <summary>
            Name of the Log to access.  Default 'Application'
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.EventMonitor">
            <summary>
            Monitors an eventlog for a list of events.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.EventMonitor.Poll">
            <summary>
            Checks eventChecker for an occurance of any event in eventStringList.
            If a logfile was provided, the event will be saved to that file.
            If another Poll on the object is already in progress, it returns immediately with null.
            </summary>
            <returns>A list of events that occured, or null if none (or failure trying to check).</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.SleepInfo">
            <summary>
            Create new SleepInfo objects to key off some user feedback
            sleep in the GUI/Console/Etc.
            
            E.G: 
            	new SleepInfo("Waiting for server", 15 * 1000);
            	
            	This will sleep for 15 seconds while providing some progress
            	feedback to the user.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.SleepInfo.#ctor(System.String,System.UInt32)">
            <summary>
            Create new sleep info object, this will auto-induce sleep.
            </summary>
            <param name="title">Title of the feedback widget</param>
            <param name="millis">Milliseconds to sleep</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProgressInfo">
            <summary>
            ProgressInfo object provide fine grained control over
            the display of an elapsed task. 
            
            E.G.: 
            
            	ProgressInfo progress = new ProgressInfo("Creating objects", 100, 1);
            	
            	for(int i = 0; i &lt; 100; ++i)
            	{
            		progress.Step();
            	}
            	
            	If you are unsure of if your progress is finished you should call Finish()
            	to ensure that the progress handle is cleaned up internally.
            	
            	If you step up to or over the maximum value the progress info handle will 
            	be automatically cleaned up.
            	
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Create a new progress info feedback object.
            </summary>
            <param name="title">Title as it should appear to the user</param>
            <param name="total">Total number of items before completion</param>
            <param name="step">Ammount to step per call to Step()</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.SetMessage(System.String)">
            <summary>
            Change the user visible message.
            </summary>
            <param name="message">Message as it should appear to the user</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.Step">
            <summary>
            Step one 'Step' unit. See the constructor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.UnStep">
            <summary>
            Step back one 'Step' unit. See the constructor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.SetValue(System.UInt32)">
            <summary>
            Explicitly change the internal value.
            </summary>
            <param name="newValue">New value of progress</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.Finish">
            <summary>
            Move Value to Maximum and cleanup the progress indicator.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProgressFeedbackHandle">
            <summary>
            Feedback Handles are used by the concrete class to implement 
            user visible feedback however the user interface sees fit.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.FeedbackHandleFactory">
            <summary>
            The abstract factory is set on the manager (also a factory) to hand
            out new progress feedback handles. These will be handed out to new instances
            of the feedback info classes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.Utilities.FeedbackManager" -->
        <member name="M:ServerTestFramework.Utilities.FeedbackManager.SetFactory(ServerTestFramework.Utilities.FeedbackHandleFactory)">
            <summary>
            Set the internal factory. This class acts as a proxy container
            for that factory.
            </summary>
            <param name="factory">Factory to hand out feedback handles</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FeedbackManager.CreateProgressFeedback(System.String)">
            <summary>
            Create a new progress feedback handles for talking to the user interface.
            </summary>
            <param name="title">User-visible title of the feedback</param>
            <returns>New feedback handle</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.FeedbackManager.ReleaseProgressFeedback(ServerTestFramework.Utilities.ProgressFeedbackHandle)">
            <summary>
            Release a progress feedback handle to the user interface.
            </summary>
            <param name="handle">Handle that was created with CreateProgressFeedback() on the manager</param>
        </member>
        <member name="P:ServerTestFramework.Utilities.FeedbackManager.Instance">
            <summary>
            Access the global instance of the feedback manager.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.NullProgressFeedbackHandle">
            <summary>
            The default class in case you try to use the ProgressInfo without 
            setting a factory, which seems to happen for certain calls within STF 
            when running outside STFRunner.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.NullFeedbackHandleFactory">
            <summary>
            The null factory for handing out null feedback handles. Does nothing.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FileReportDestination.OutputLimitInBytes">
            <summary> After this many bytes have been written to the file, an error will be written to the file and logging will be stopped.  -1 means no limit. </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClientException">
            <summary>
            An exception thrown by the HttpClient class.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClientException.#ctor">
            <summary>
            An exception thrown by the HttpClient class.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClientException.#ctor(System.String)">
            <summary>
            An exception thrown by the HttpClient class, with the given message.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient">
            <summary>
            A simple generic http client.
            Unlike .NET's wrapper, this does not guarentee that a built request is actually valid, making it useful for negative cases.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor">
            <summary>
            Creates the socket, used by other constructors.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.String,System.UInt16)">
            <summary>
            From a hostname/ip and port.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.String)">
            <summary>
            From a url (only the hostname and port are used).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Creates a client that points at the given IP endpoint.
            </summary>
            <param name="endpoint">The location to talk to.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            Creates a client using the given socket and IP endpoint.
            </summary>
            <param name="socket">The socket to use for the connection.</param>
            <param name="endpoint">The location to talk to.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendRequest(ServerTestFramework.Utilities.HttpClient.Request)">
            <summary>
            Sends a request to the server.
            If we aren't connected, it will attempt to connect.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.GetResponse">
            <summary>
            Receives and parses a single response from the server.  This call will block if required.
            If the request times out or not enough data to form a response comes back, returns null.
            </summary>
            <param name="parseBody">Whether a body should be parsed from the response.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.CheckForResponse(System.Boolean)">
            <summary>
            Checks a data blob to see if it contains a valid response.
            </summary>
            <param name="readBody">
            If true, read the body as specified by the Content-Length header; if false, do not.
            </param>
            <returns>The response if a valid one is found, or null if one is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.Connect">
            <summary>
            Connect the socket to the remote server if it is not.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendRequestAsync(ServerTestFramework.Utilities.HttpClient.Request)">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="request">The request to send.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendRequestAsync(System.Byte[])">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="request">The request to send.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.GetResponseAsync(System.Boolean,ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback)">
            <summary>
            Gets a response asynchrounously.
            </summary>
            <param name="readBody">If true, read the body of the response; if false, do not.</param>
            <param name="callback">Called when a response is received.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendReceiveAsync(ServerTestFramework.Utilities.HttpClient.Request,System.Boolean,ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback)">
            <summary>
            Sends and receives asynchrounously.
            </summary>
            <param name="request">The request to send.</param>
            <param name="readBody">If true, read the body of the response; if false, do not.</param>
            <param name="callback">Called when a response is received.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendReceiveAsync(System.Byte[],System.Boolean,ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback)">
            <summary>
            Sends and receives asynchrounously.
            </summary>
            <param name="request">The request to send.</param>
            <param name="readBody">If true, read the body of the response; if false, do not.</param>
            <param name="callback">Called when a response is received.</param>
        </member>
        <member name="F:ServerTestFramework.Utilities.HttpClient._connect_sync">
            <summary>
            Used to keep any other threads from calling BeginConnect while we are waiting to connect.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ConnectAsync(ServerTestFramework.Utilities.HttpClient.AsyncState)">
            <summary>
            Begins the connect.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ConnectAsyncComplete(System.IAsyncResult)">
            <summary>
            Ends the connect.
            </summary>
            <param name="result">The result passed in.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendAsync(ServerTestFramework.Utilities.HttpClient.AsyncState)">
            <summary>
            Begins the send.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendAsyncComplete(System.IAsyncResult)">
            <summary>
            Ends the send.
            </summary>
            <param name="result">The result passed in.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ReceiveAsync(ServerTestFramework.Utilities.HttpClient.AsyncState)">
            <summary>
            Begins the receive.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ReceiveAsyncComplete(System.IAsyncResult)">
            <summary>
            Ends the receive.
            </summary>
            <param name="result">The result passed in.</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.Request">
            <summary>
            Used to build a request to the server.
            Any field set to null will not be included in the request.
            Each field is seperated by \r\n.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.Request.GetHeaderString">
            <summary>
            Constructs the header string.
            </summary>
            <returns>The header string.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.Response">
            <summary>
            Used to return the response from a server.
            If a field is null, it means there was no response for it.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.HttpClient.Response.Exception">
            <summary>An exception thrown when attempting to retrieve this response.</summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback">
            <summary>
            Called when a response is received asynchronously.
            </summary>
            <param name="response">The response that was received, or null if timed out.</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.AsyncState">
            <summary>
            The state object passed between the async calls.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.IOCPSocket">
            <summary>
            Summary description for IOCP.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.IpHelper.GetBestInterface(System.Net.IPAddress)">
            <summary>
            Determines the interface out which packets will be routed, given a destination address.
            </summary>
            <param name="destAddr">The destination address to route.</param>
            <returns>The IPAddress of the interface chosen as the routing target.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.IpHelperException">
            <summary>
            An exception that is thrown by the IpHelper class.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.LocalInterface">
            <summary>
            Helper methods for LocalInterface.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.LocalInterface.GetBestMatch(System.Net.IPEndPoint,System.Net.IPAddress@)">
            <summary>
            This is where we attempt to divine which of our IPs (many clients are multihomed) the server will attempt to communicate with us on.
            </summary>
            <param name="localIp"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.LocalInterface.GetBestMatchByConnecting(System.Net.IPEndPoint,System.Net.IPAddress@)">
            <summary>
            This is where we attempt to divine which of our IPs (many clients are multihomed) the server will attempt to communicate with us on.
            </summary>
            <param name="localIp"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.MemoryReportDestination">
            <summary>
            Used to just keep track of loglines in memory, on a List of ReportLine objects.
            </summary>
        </member>
        <member name="T:MemoryMappedFile.MMF">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.MultiEnumerator`1">
            <summary>
            An enumerator for enumerating over multiple enumerators simultaneously.
            </summary>
            <typeparam name="T">The type of values over which the base enumerators enumerate.</typeparam>
        </member>
        <member name="F:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerables">
            <summary>Our Enumerables.</summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Creates a MultiEnumerator from the given IEnumerables.
            </summary>
            <param name="enumerables">The IEnumerables to enumerate.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Creates a MultiEnumerator from the given IEnumerables.
            </summary>
            <param name="enumerables">The IEnumerables to enumerate.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.GetEnumerator">
            <summary>
            Creates an enumerator for this MultiEnumerator.
            </summary>
            <returns>An enumerator for this MultiEnumerator.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an enumerator for this MultiEnumerator.
            </summary>
            <returns>An enumerator for this MultiEnumerator.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.MultiEnumerator`1.Entry">
            <summary>
            A single value from an enumerable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Entry.Value">
            <summary>The value from the enumerable.</summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Entry.Valid">
            <summary>If true, the Value is valid. If false, it is not.</summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator">
            <summary>
            The Enumerator for a MultiEnumerator.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Enumerators">
            <summary>The enumerators to enumerate over.</summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.CurrentValue">
            <summary>The current value of the enumerator.</summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Creates an Enumerator for the given enumerables.
            </summary>
            <param name="enumerables">The enumerables to enumerate over.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Dispose">
            <summary>
            Disposes the enumerator.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next value.
            </summary>
            <returns>True if there is a value; false if the end of the list has been reached.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Current">
            <summary>
            The current value of the enumerator.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current value of the enumerator.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProcessWrapper">
            <summary>
            Provides a way to run a process and capture it's output.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProcessWrapper.Run(System.String)">
            <summary>
            Method to run the process with the specified arguments.
            </summary>
            <param name="arguments">The command line arguments to send to the process.</param>
            <returns>The return code from the process.</returns>
            <remarks>
            The following exceptions can be thrown by this method:
                   ArgumentNullException        If the arguments string is null.
                   ProcessException            If the timeout expired waiting for the process to finish.
                   
            These exceptions can be thrown from the Process.Start method:
                   InvalidOperationException
                   Win32Exception
                   ObjectDisposedException
            </remarks>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.ProcessName">
            <summary>
            Gets or sets the friendly name of the process.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.ExecutablePath">
            <summary>
            Gets or sets the fully-qualified path to the process executable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.WorkingDirectory">
            <summary>
            Gets or sets the name of the working directory.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.ExecutionTimeout">
            <summary>
            Gets or sets the number of seconds to allow the process to run before abandoning it. Default is 120.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.Output">
            <summary>
            Gets the text written by the running process to the Standard Output stream.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.Error">
            <summary>
            Gets the text written by the running process to the Standard Error stream.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProcessOutputReader">
            <summary>
            Thread procedure wrapper that allows data to be passed in and out of the procedure.
            Used to read process output.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.PuidPool">
            <summary>
            A static accessor class for the service defined pre-allocated puid pools.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.PuidPool.Type">
            <summary>
            Define your own puid pool enum here if you want to allocate a specific
            type of puid.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Core.Utilities.RandomEx">
            <summary>
            Summary description for Random.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomString(System.Int32)">
            <summary>
            Generates a random ASCII string
            </summary>
            <param name="MaxLength">Length of string to generate</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomString(System.String,System.Int32)">
            <summary>
            Like GenerateRandomString, but with specified prefix.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomNameString(System.Int32)">
            <summary>
            Unlike GenerateRandomString, there is no prefix with this version.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomUTFString(System.Int32)">
            <summary>
            Generates a random UTF string
            </summary>
            <param name="MaxLength">Length of string to generate</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomUpperAlphaNumericString(System.Int32)">
            <summary>
            Generates a random string comprised of upper case characters and numbers.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomUpperAlphaNumericString(System.Int32,System.Int32)">
            <summary>
            Generates a random string comprised of upper case characters and numbers.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomAlphaNumericString(System.Int32,System.Int32)">
            <summary>
            Generates a random string comprised of lower and upper case characters and numbers.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateTotallyRandomString(System.Int32)">
            <summary>
            This will generate, like, a totally, like, random string, dude.
            
            The entire string is composed of chars in the 32..255 range
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateNumberString(System.Int32)">
            <summary>
            This will generate number strings (0,1,2,....9).
            The entire string is composed of chars in the 48 - 57 range
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateHexString(System.Int32)">
            <summary>
            This will generate hex strings (0,1,2,....e,f) with a prepended 0x
            </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateIPString">
            <summary>
            Generates a random IP address in human readable dotted form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomBlob(System.Int32)">
            <summary>
            This will generate a random blob of bytes ranging from 0x0-0xff
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.NextLog">
            <summary>
            Returns an Int32 that logarithmically tends towards 0
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Collections.Generic.List{System.Type},System.Reflection.Assembly,System.Type)">
            <summary>
            Uses the information passed in to build a list of all the types derived 
            from the baseType within a specific assembly
            </summary>
            <param name="list">The list to add the Types to.</param>
            <param name="asm">The assembly to search through.</param>
            <param name="baseType">The base type you want derived types from.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            Finds all types derived from baseType within the specified assembly.
            </summary>
            <param name="asm">The assembly to search through.</param>
            <param name="baseType">The base type you want derived types from.</param>
            <returns>A list of the types.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Type)">
            <summary>
            Finds all typed derived from baseType in *ALL* assemblies
            </summary>
            <param name="baseType">The base type you want derived types from.</param>
            <returns>A list of the types.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Collections.Generic.List{System.Type},System.Type)">
            <summary>
            Finds all types derived from baseType and adds them to the specified List.
            </summary>
            <param name="list">The list to add the found types to.</param>
            <param name="baseType">The base type you want derived types for.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetNestedTypesInInheritanceTree(System.Type,System.Reflection.BindingFlags)">
            <summary> This calls System.Type.GetNestedTypes() on the origType and all base classes and returns the combined result. </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.RemoteReportDestination">
            <summary>
            This is a simple pass-through destination so that the destination and/or the report 
            object don't have to marshal their own parameters.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StfXmlDoc.FileIdentifierXPath">
            <summary>Path of the file identifier element.</summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StfXmlDoc.GetFileIdentifier(System.Xml.XmlDocument,System.String)">
            <summary>Gets the named file identifier XmlNode from a document.</summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StfXmlDoc.TestForFileIdentifier(System.String)">
            <summary>
            Tests for the existence of a named file identifier element.
            </summary>
            <returns>True if the element exists; false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StfXmlDoc.ConditionalMerge(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Conditionally merges the given document, based on whether it has been merged before or not.
            A known element is used to tag the merge.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.StringUtils.MakeDeliminatorSeparatedList(System.Collections.IEnumerable,System.String,ServerTestFramework.Utilities.StringUtils.MakeDeliminatorSeparatedListStringer)">
            <summary> Builds a string separated by a deliminator for a list of items.  Uses the specified delegate to convert each object to a string </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.StringUtils.MakeDeliminatorSeparatedList(System.Collections.IEnumerable,System.String)">
            <summary>
            Builds a string separated by a deliminator for a list of items.  Each element in the list must be usefully convertable to a string.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.StringUtils.MakeCommaSeparatedList(System.Collections.IEnumerable)">
            <summary>
            Builds a string separated by commas for a list of items.  Each element in the list must be usefully convertable to a string.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.SubStatics">
            <summary>
            Used to make class variables class-static, as in each inherited subclass has it's own static instance of the class 
            variable.  Normally, when a field is static in a base class, all subclasses share one instance of this field.  
            Sometimes it is important that each subclass of a particular base class each have its own instance.
            
            To use:
               - Pick a field in a base class for which you want a static instance per sub class.
               - Add a [SubStatic] attribute to that field.
               - Call SubStatics.Initialize(this) in the constructor for the base class.
               
               If the constructor for this field type requires parameters, adjust them on the SubStaticAttribute.
               Example:
                 [SubStatic(ParameterTypes=new Type[] {typeof(int)}, Parameters=new object[] {2})]
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.SubStatics.Initialize(System.Object)">
            <summary>
            Initialize should be called in the constructor of any class that has SubStaticAttributes so that they are 
            actually initialized or set into the appropriate fields.
            </summary>
            <param name="target">A reference to the class containing fields with SubStaticAttributes.  Usually the "this" 
            keyword.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.SubStatics.GetStatic(System.Type,System.String)">
            <summary>
            Use this function to get a SubStatic from a class without having to create an instance of the class.
            </summary>
            <param name="owner">The type of the class that contains the SubStatic.</param>
            <param name="fieldName">The field name of the SubStatic item you are interested in.</param>
            <returns>The SubStatic instance for the supplied field</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.SubStaticAttribute">
            <summary>
            Add this attribute to a field to make it SubStatic.
            ParameterTypes and Parameters are nescessary to use when constructor for the SubStatic field has parameters
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.SubStaticAttribute.ParameterTypes">
            <summary>
            Array of the parameter types for the constructor of the SubStatic type.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.SubStaticAttribute.Parameters">
            <summary>
            Array of the parameters for the constructor of the SubStatic type.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TcpRelay">
            <summary>
            Listens for tcp connections on a port, and relays all that traffic to/from the destination.
            You must Dispose() this object when you are done with it, in order to kill the listener thread.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TcpRelay.AllowOnlyLocalHost">
            <summary>
            Prevent connections from anyone but ourself.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TcpRelay.Dispose">
            <summary>
            Shuts down the listener thread and connections.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TcpRelay.ProcessData(ServerTestFramework.Utilities.TcpRelay.Connection,System.Boolean,System.Byte[],System.Byte[]@)">
            <summary>
            Override this in order to alter the data before it is relayed from one side to the other.
            </summary>
            <param name="isRemoteTarget">If true, then the data being processed here is passing from the local side to the remote side.</param>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.Destination">
            <summary>
            The remote host to which traffic is relayed.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.RemotePort">
            <summary>
            The port on the remote host.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.LocalListenPort">
            <summary>
            The local port on which we listen for new connections.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.Verbose">
            <summary>
            Spew connections and relayed data.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TcpRelay.Connection">
            <summary>
            Represents a connection on which we are relaying data
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TextWriterReportBridge">
            <summary>
            Bridge between text writers and reporting system, used for rerouting console
            output into the report system
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TimedQueue`1">
            <summary>
            A queue that will only return items placed in it after a certain amount of time has elapsed for that item.
            This queue is thread-safe.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.MinimumReuseTime">
            <summary>
            A object placed in the queue will never be returned until at least this amount of time has passed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.MinimumQueueSize">
            <summary>
            Minumum number of objects to keep in the cache at any given time before any can be returned.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.MaximumQueueSize">
            <summary>
            Maximum number of entries to allow into the queue, after which more more are ignored.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.UseCachedReadyList">
            <summary>
            Pre-caches a list of ready objects so they can be popped without a lock.
            The downside is if settings are changed, any objects in the cache that do not comply with the new settings will be returned.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TimedQueue`1.PopFront">
            <summary>
            Returns an object from the queue that is older than MinimumReuseTime.
            If no object is old enough, then null or 0 is returned.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TimedQueue`1.PushBack(`0)">
            <summary>
            Adds an object to the queue.  Returns false if the queue was full.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TimedQueue`1.Count">
            <summary>
            Returns the number of objects in the queue.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.Timing.QueryPerformanceCounter">
            <summary>
            Gets the current value of the hardware performance counter.
            </summary>
            <returns>The current value of the counter.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceCounter returns false.</exception>
        </member>
        <member name="M:ServerTestFramework.Utilities.Timing.QueryPerformanceFrequency">
            <summary>
            Gets the frequency at which the hardware performance counter ticks.
            </summary>
            <returns>The frequency at which the counter ticks.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceFrequency returns false.</exception>
        </member>
        <member name="M:ServerTestFramework.Utilities.Timing.CalculatePerformanceDelta(System.Int64,System.Int64)">
            <summary>
            Calculates the time between two values of the performance counter, in seconds.
            </summary>
            <param name="start">The sample of the performance counter taken first.</param>
            <param name="end">The sample of the performance counter taken second.</param>
            <returns>The time between the two samples of the counter, in seconds.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceFrequency returns false.</exception>
        </member>
        <member name="P:ServerTestFramework.Utilities.Timing.PerformanceFrequency">
            <summary>
            The frequency at which the hardware performance counter ticks.
            </summary>
            <remarks>
            Returns the cached value.  Call QueryPerformanceFrequency() to requery the value from the system.
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceFrequency returns false.</exception>
        </member>
        <member name="T:ServerTestFramework.Utilities.StopWatch">
            <summary>
            Summary description for Timers.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Core.Utilities.ValueCheck">
            <summary>
            Contains a large number of helper function for validating a variety of condtions
            such as whether two objects are equivalent, greater than, or less than, or if a 
            result is one of any possible valid results.  
            
            All the methods throw ExpectedValueCheckExceptions when the checks fail.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsTrue(System.Boolean,System.String)">
            <summary>
            Tests whether the given condition is true
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive message of the check being performed</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the given condition is true
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive format string of the check being performed</param>
            <param name="args">Parameters to be passed to the format</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsFalse(System.Boolean,System.String)">
            <summary>
            Tests whether the given condition is false
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive message of the check being performed</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the given condition is false
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive format string of the check being performed</param>
            <param name="args">Parameters to be passed to the format</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test``2(System.String,``0,``1)">
            <summary>
            Tests whether two objects of the same type are equivalent.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="exp">The expected value</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test(System.String,System.Byte[],System.Byte[])">
            <summary>
            Tests whether every byte in the two arrays is equivalent.
            </summary>
            <param name="msg">A dsecriptive message fo the check being performed</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.TimeSpan)">
            <summary>
            Verifies that the actual time is approximately equal to the expected 
            time within a given tolerance.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected time</param>
            <param name="got">The actual time</param>
            <param name="tolerance">The tolerance for a match</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.TimeSpan)">
            <summary>
            Verifies that the actual timespan is approximately equal to the expected 
            time within a given tolerance.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected time</param>
            <param name="got">The actual time</param>
            <param name="tolerance">The tolerance for a match</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestDifferent``2(System.String,``0,``1)">
            <summary>
            Verifies that two objects of the same type are different.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="exp">The value that should not be</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestDifferent(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.TimeSpan)">
            <summary> Verifies that the actual time is approximately not equal to the expected time within a given tolerance. </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected time</param>
            <param name="got">The actual time</param>
            <param name="tolerance">The tolerance for a match</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAll(System.String,System.Array,System.Array)">
            <summary>
            Checks that the arrays each array is the same length and that each 
            item in the arrays is the same.
            </summary>
            <param name="name">The name of the item that's being tested</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNotAll(System.String,System.Array,System.Array)">
            <summary> Checks that each array does not contain exactly the same set of elements (that they are different lengths or that at least one element is different). </summary>
            <param name="name">The name of the item that's being tested</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestSubset(System.String,System.Array,System.UInt32,System.Array,System.UInt32,System.UInt32)">
            <summary>
            Checks that the arrays each array is the same length and that each 
            item in the arrays is the same.
            </summary>
            <param name="name">The name of the item that's being tested</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAny``1(System.String,``0[],``0)">
            <summary>
            Tests whether or not the actual value matches any of the expected values
            </summary>
            <typeparam name="T">The type of value to check</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="exp">The array of possible expected values</param>
            <param name="got">The actual result value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnordered``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnorderedComparison{``0},ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnorderedStringer{``0})">
            <summary> Validates that two unordered sets contain the same set of elements using a specific comparison function and a specific function to convert the object to a string. </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnordered``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnorderedComparison{``0})">
            <summary> Validates that two unordered sets contain the same set of elements using a specific comparison function. </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnordered``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary> Validates that two unordered sets contain the same set of elements. </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestZero``1(System.String,``0)">
            <summary>
            Tests if the value is equal to it's default value.  For most numeric types, this
            is 0.  For reference types this is null.  For other value types it is default(Type)
            </summary>
            <typeparam name="T">The type of the value to check.  default(T) is used to compare</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="value">The value to check</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNonZero``1(System.String,``0)">
            <summary>
            Tests if the value is not equal to it's default value.  For most numeric types, this
            is 0.  For reference types this is null.  For other value types it is default(Type)
            </summary>
            <typeparam name="T">The type of the value to check.  default(T) is used to compare</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="value">The value to check</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.ContainsKey``2(System.String,System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Tests if a given dictionary contains a key within it. Useful for cases where an 
            item missing from a dictionary means we need to halt the test case.
            </summary>
            <typeparam name="T1">First type of the dictionary.</typeparam>
            <typeparam name="T2">Second type of the dictionary</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="dict">The dictionary object.</param>
            <param name="key">Key to validate.</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestGreaterThan(System.String,System.IComparable,System.Object)">
            <summary>
            Tests whether the actual value is greater than the expected value
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected value to check against</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestLessThan(System.String,System.IComparable,System.Object)">
            <summary>
            Tests whether the actual value is less than the expected value
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected value to check against</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNotNull(System.String,System.Object)">
            <summary>
            Tests whether the provided object is non-null
            </summary>
            <param name="name">The name of the object to test</param>
            <param name="o">The object to test</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNull(System.String,System.Object)">
            <summary>
            Tests whether the provided object is null
            </summary>
            <param name="name">The name of the object to test</param>
            <param name="o">The object to test</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestBits(System.String,System.UInt32,System.UInt32)">
            <summary>
            Validates that all of the expected bits are set in the actual value
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The set of expected bits</param>
            <param name="got">The actual result bits</param>
            <remarks>
            It would be nice if this could be expanded to other numeric types, 
            but there's no easy way to provide a comprehensive suite of methods
            for all the different numeric types.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlConfigFile.#ctor(System.String)">
            <summary>
            Constructor reads in the config file and determines the environment
            to run on based on the "environ" tag
            </summary>
            <param name="Filename">name of the config file</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlConfigFile.ReadNode(System.String)">
            <summary>
            Method used to read the needed data
            </summary>
            <param name="NodeName">name of the config file</param>
            <returns>The node's inner text</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlConfigFile._Parse(System.String)">
            <summary>
            Searches the given string for following keywords and substitutes them:
             o %MACHINE% -- the user's machine
             o %USERNAME% -- the user's name
             o %USERDOMAIN% -- the user's domain
            </summary>
            <param name="InnerText"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.Utilities.XmlConfigFile.Item(System.String)">
            <summary>
            Accessor method used to read the needed data, it automatically takes care of
            reading from the right environment.  It's used like this:
            
            XmlConfigFile Config = new Config ("MyConfigFile.xml");
            string SomeSetting = Config["/Auth/Username"];
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Int64)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Boolean@)">
            <summary>
            Gets the value of a child node of a node.
            Returns true if the value was found, false if it was not.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetGroupNode(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the child node of a unique group node, or creates it if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetGroupNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Retrieves the child node of a unique group node, or creates it if it does not exist.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.loadedItems">
            <summary>
            These are the items that have been loaded and setup already
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.deferredItems">
            <summary>
            These are the items that were found but haven't been loaded yet
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.pluginParams">
            <summary>
            Command line parameters that are targetted at any plugins;
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.loadedModuleNames">
            <summary>
            Names of all modules that have already been loaded
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.loadedSuites">
            <summary>The TestNode roots that we have been notified of.</summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NotifyModuleLoading(System.String)">
            <summary>
            Called before a new module is loaded that might contain plugins or suites.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NotifySuiteLoaded(ServerTestFramework.TestNode)">
            <summary>
            Called after a suite is loaded.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NotifySuiteUnloading(ServerTestFramework.TestNode)">
            <summary>
            Called when a suite is being unloaded to tell the plugin to remove all references to it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.UnloadAllPlugins">
            <summary>
            Called whenever the gui is wanting to close.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.LoadPluginFiles">
            <summary>
            Loads all configured plugins.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.LoadAllPluginsInAssembly(System.Reflection.Assembly)">
            <summary>
            Loads all plugins and other pluggable item types in an assembly
            </summary>
            <param name="asm">The assembly to load the types from</param>
            <returns>True if any plugin types were loaded, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.QueuePlugin(System.Type,System.Reflection.Assembly)">
            <summary>
            Creates a PluggableItem from a type (if not already loaded) and adds
            it to the list of items to process.
            </summary>
            <param name="pluginType">The type of item to try to create with</param>
            <param name="asm">The assembly that contains the type</param>
            <returns>The instance of the pluggable item </returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.DebugMessage(System.String)">
            <summary>
            Outputs debug spec during plugin loading.  Only occurs if 
            DEBUG_PLUGIN_LOADING is enabled.
            </summary>
            <param name="s">The debug string to output</param>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.GetDefaultPluginsList">
            <summary>
            Override to generate a list of default plugins that should be loaded.
            Only called when no list is supplied by the settings document.
            </summary>
            <returns>A list of plugin file names.</returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NewPluggableItem">
            <summary>
            Override to make your own PluggableItem.
            </summary>
            <returns>A new PluggableItem.</returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PreProcessPluggable(ServerTestFramework.Plugins.PluginHandler.PluggableItem)">
            <summary>
            Override to do some work on the PluggableItem before the base handler.
            </summary>
            <param name="item">The PluggableItem to process.</param>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PostSetupProcessPluggable(ServerTestFramework.Plugins.PluginHandler.PluggableItem)">
            <summary>
            Override to do some work on the PluggableItem after the IPluginSetup function is handled.
            </summary>
            <param name="item">The PluggableItem to process.</param>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PostProcessPluggable(ServerTestFramework.Plugins.PluginHandler.PluggableItem)">
            <summary>
            Override to do some work on the PluggableItem after the base handler.
            </summary>
            <param name="item">The PluggableItem to process.</param>
        </member>
        <member name="T:ServerTestFramework.Plugins.PluginHandler.PluggableItem">
            <summary>
            A wrapper around a pluggable item that allows you to find out 
            information about what type of item it is
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginSetup">
            <summary>
            The item respreseted by this pluggable object as an IPluginSetup
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginExtension">
            <summary>
            The item represented by this pluggable object as an IPluginExtension
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginExt``1">
            <summary>
            Returns the pluggable item as a PluginExtension of the requested
            type.  This is required to be a method because the the parameter
            is generic and there is no way to make a generic property
            </summary>
            <typeparam name="PluginType">The type of plugin that this extension extends</typeparam>
            <returns>The item respreseted by this pluggable object as an IPluginExtension</returns>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginModuleLoadNotification">
            <summary>
            The item respreseted by this pluggable object as an IPluginModuleLoadNotification
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.DidInit">
            <summary>
            Indicates if IPluginSetup.Initialize has been called yet
            </summary>
        </member>
        <member name="P:ServerTestFramework.Plugins.PluginHandler.PluggableItem.Item">
            <summary>
            Represents the instance of the actual item.  An instance of a 
            class that derives from something we're interested in like 
            Plugin, IPluginPreferences, etc. (defined in Plugins.cs)
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPlugin">
            <summary>
            Implement this to add new components or functionality.
            Only one instance of the class will ever be instantiated.  Ever.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginExtension">
            <summary>
            Do not implement this, this is used to easily determine if a class 
            extends from the generic IPluginExtension interface.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginExtension`1">
            <summary>
            Implement this to extend an existing plugin.  The derived class will 
            only be instantiated if one of the the plugins it extends is loaded.
            Only one instance of a derived class will ever be instantiated (even if
            a class extends multiple plugins).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginExtension`1.PluginLoaded(`0)">
            <summary>
            This will be called to inform the extension of the existance of a
            plugin that it extends.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginSetup">
            <summary>
            Implement this if you require setup and cleanup steps for your plugin or
            extension, including the ability to save/restore global settings.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginSetup.Initialize(System.Xml.XmlNode,System.String[])">
            <summary>
            This will be called after the gui loads, as soon as the class is 
            instantiated. Settings can be loaded from the provided xml object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginSetup.Shutdown(System.Xml.XmlNode)">
            <summary>
            This will be called when the gui is about to close down.
            Settings can be stored in the provided xml object.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginModuleLoadNotification">
            <summary>
            Implement this if you require notifications when a module is about to be
            loaded or after a new suite is loaded from a module.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginModuleLoadNotification.ModuleLoading(System.String)">
            <summary>
            This is called when a module(which may contain suites or plugins) is
            about to be loaded.  When a plugin is initially created, and already
            loaded modules will also be passed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginModuleLoadNotification.SuiteLoaded(ServerTestFramework.TestNode)">
            <summary>
            This is called after a new suite is loaded from a module.  You will
            be passed the already-constructed tree.  When a plugin is initially
            created, and already-loaded suites will also be passed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginModuleLoadNotification.SuiteUnloading(ServerTestFramework.TestNode)">
            <summary> This is called when a suite is being unloaded. </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\stfcorehelp.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>STFCore</name>
    </assembly>
    <members>
        <member name="T:ServerTestFramework.TestAttribute">
            <summary>
            allow an alias for Attribute "[TestCase]" to be "[Test]", like NUnit
            Deprecated.
            </summary> 
        </member>
        <member name="T:ServerTestFramework.TestFixtureAttribute">
            <summary>
            allow an alias for Attribute "[TestGroup]" to be "[TestFixture]", like NUnit
            Deprecated.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestGroupAttribute">
            <summary>
            Indicates that the node contains a group of other nodes, and is not a test by itself.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestGroupSetupAttribute">
            <summary>
            marks a function as a setup method.  These methods are executed
            just before a set of tests are run.
            </summary> 
        </member>
        <member name="T:ServerTestFramework.TestGroupTearDownAttribute">
            <summary>
            marks a function as an tear-down method.  These methods are executed
            just after a set of tests are run.
            </summary> 
        </member>
        <member name="T:ServerTestFramework.StressTestAttribute">
            <summary>
            Indicates that a test is to be used for stress.
            </summary>
        </member>
        <member name="T:ServerTestFramework.StressInstantiateAttribute">
            <summary>
            Indicates that when running a stress test, that each run should occur on a unique instance of the node.
            </summary>
        </member>
        <member name="T:ServerTestFramework.IgnoreAttribute">
            <summary>
            This feature should be used to temporarily not run a TestCase or TestGroup. 
            This is a better mechanism than commenting out the testCase/testGroup,
            since the tests will be compiled with the rest of the code and there is an 
            indication at run time that a test is not being run. This insures that tests will not be forgotten.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestTagAttribute">
            <summary>
            A generic marker than can be placed on a test or group.  This can be used for filtering or reporting.
            A tag string may be of the following forms:
               NameOfTag
               NameOfTag=value
               NameOfTag=value0, value1, etc
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncGroupAttribute">
            <summary>
            On a test case, tests with the same AsyncGroup value can run at the same time.  On a group this sets the default AsyncGroup value for all tests in that group.
            Test groups with the same AsyncSet value can be run at the same time. (AsyncSet has no meaning for a test case)
            A value of 0 means don't run async.
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncThreadCountAttribute">
            <summary>
            Attribute for a test group for how many threads within the group are allowed to run at the same time.
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncThreadDelayAttribute">
            <summary>
            Attribute for a test group.  Controls the delay (in ms) between thread creations for tests within the group.
            This can be useful for preventing a ton of tests from slamming the network system at the exact same moment.
            </summary>
        </member>
        <member name="T:ServerTestFramework.DoNotRetryAttribute">
            <summary>
            Attribute for groups and cases.  This specifies that the test case should never be automatically retried if it fails.
            </summary>
        </member>
        <member name="T:ServerTestFramework.CompoundCaseAttribute">
            <summary>
            Attribute for groups and cases.  Each instance of CompoundTestBase class that use this will cause multiple instances of TestBase's to be created.
            </summary>
        </member>
        <member name="T:ServerTestFramework.RunDependencyAttribute">
            <summary>
            Marks a functional test as not being able to run until a specific other test has run.
            The string may be either of:
            - The fully-qualified name of a leaf node or the name of a sibling.
            - The non-qualified name of a sibling node (does not have to be a leaf).
            </summary>
        </member>
        <member name="T:ServerTestFramework.AtomicBranchAttribute">
            <summary>
            Indicates that the node is a test group, and that all direct sub-nodes must all be either enabled or disabled.
            </summary>
        </member>
        <member name="T:ServerTestFramework.RootNodeAttribute">
            <summary>
            This attribute can be placed on the assembly to declare a single group node that is to become the root of the assembly's tree.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestSuiteException">
            <summary>
            Custom Excption class to convey excpetions at the test suite load and run states.
            Deprecated.
            </summary>
        </member>
        <member name="T:ServerTestFramework.HttpStatusCodeException">
            <summary>
            Custom Exception class to carry and identify failures with an Http Status code
            </summary>
        </member>
        <member name="T:ServerTestFramework.TimeOutException">
            <summary>
            Custom Exception class to identify time out failures
            </summary>
        </member>
        <member name="T:ServerTestFramework.ExpectedValueCheckException">
            <summary>
            Custom Excption class to carry and identify failures matching a named value.
            </summary>
        </member>
        <member name="T:ServerTestFramework.ExpectedNotValueCheckException">
            <summary>
            Custom Excption class to carry and identify failures matching a named value.
            </summary>
        </member>
        <member name="T:ServerTestFramework.StfException">
            <summary>
            Generic exception wrapper, allows parameters in the message string. Think of it as
            an Exception++.
            Deprecated.
            </summary>
        </member>
        <member name="T:ServerTestFramework.DidNotExecuteException">
            <summary> If this exception is thrown by a test then the test will be counted as having not been run at all, rather than failed. </summary>
        </member>
        <member name="T:ServerTestFramework.KnownBugException">
            <summary>
            This exception should be thrown when a test encounters conditions that indicate a known bug.
            </summary>
        </member>
        <member name="F:ServerTestFramework.KnownBugException.DefaultMessageFormat">
            <summary>The default message format string.</summary>
        </member>
        <member name="F:ServerTestFramework.KnownBugException.EmptyBugDatabase">
            <summary>The string to use if the bug database is null.</summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.GetDefaultMessage(System.Int32,System.String)">
            <summary>
            Gets the default message for a KnownBugException.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String)">
            <summary>
            Creates a KnownBugException from a bug id and database.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a KnownBugException from a bug id and database, with a custom message.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Creates a KnownBugException from a bug id and database, with an inner exception.
            </summary>
        </member>
        <member name="M:ServerTestFramework.KnownBugException.#ctor(System.Int32,System.String,System.String,System.Exception)">
            <summary>
            Creates a KnownBugException from a bug id and database, with a custom message and inner exception.
            </summary>
        </member>
        <member name="P:ServerTestFramework.KnownBugException.BugID">
            <summary>The bug identifier; ex the PS bug number.</summary>
        </member>
        <member name="P:ServerTestFramework.KnownBugException.BugDatabase">
            <summary>The bug database name; ex the PS database.</summary>
        </member>
        <member name="F:ServerTestFramework.CoreGlobal.DefaultConfigFile">
            <summary>
            The default config file to load.
            </summary>
        </member>
        <member name="F:ServerTestFramework.CoreGlobal.Config">
            <summary>
            The current config set.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CallReloadAllTestTrees">
            <summary> Calls ReloadAllTestTrees. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CallTestNodeTreeLoaded(ServerTestFramework.TestNode)">
            <summary> Calls TestNodeTreeLoaded. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CallTestNodeTreeUnload(ServerTestFramework.TestNode)">
            <summary> Calls TestNodeTreeUnloaded to indicate that everything should remove all references to the test node tree. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.GetCoreAssembly">
            <summary>
            Returns the assembly of STFCore.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.CheckAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            Check the versions of other assemblies linked against us, to make sure there's not a mismatch between the version they linked with and our version.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize(System.String)">
            <summary>
            Load xml config from a file.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize(System.Xml.XmlDocument)">
            <summary>
            Initialize the framework using a pre-created XML config document.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize(ServerTestFramework.Runner.StfXmlDoc)">
            <summary>
            Initialize the framework using a pre-created XML config document.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Initialize">
            <summary>
            Initialize the framework using the default config file.
            </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.Uninitialize">
            <summary> Called to uninitialize the framework. </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.RegisterInitializationCallback(ServerTestFramework.CoreGlobal.VoidFunctionType)">
            <summary> Other libraries that depend on STF being initialized can call this to be notified when initialization occurs </summary>
        </member>
        <member name="M:ServerTestFramework.CoreGlobal.RegisterUninitializationCallback(ServerTestFramework.CoreGlobal.VoidFunctionType)">
            <summary> Other libraries that depend on STF being initialized can call this to be notified when initialization occurs </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.ReloadAllTestTrees">
            <summary> Provides a way to request that the current application to discard all TestNode trees and recreate them.  Not all applications support this (in which case they will ignore it). </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.TestNodeTreePreload">
            <summary>
            Called before a TestNode tree is loaded with information about the source of the tree.
            </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.TestNodeTreeLoaded">
            <summary> This is called whenever a test tree is created.  Note that if nodes are reloaded, a new tree from the same assembly will likely be passed to this. </summary>
        </member>
        <member name="E:ServerTestFramework.CoreGlobal.TestNodeTreeUnloaded">
            <summary> This is called when all references to a test tree should be removed. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData">
            <summary> Manages changing and searching for tags on a node or node tree. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.#ctor(ServerTestFramework.TestNode)">
            <summary> Constructs the list of tags and their values for a node. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.Clone(ServerTestFramework.TestNode)">
            <summary> Duplicates the tagging data and assigns a new owner to the duplicate. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.AddTag(System.String)">
            <summary> Adds a new valueless tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.AddTagValue(System.String,System.String)">
            <summary> Adds a new value tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.AddTagValue(System.String,ServerTestFramework.NodeTaggingData.Value)">
            <summary> Adds a new value tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNodeTags">
            <summary> Returns a list of all tags and their values that are assigned directly to this node. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTrunkTags">
            <summary> Returns a list of tags and their values in this node and all parent nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllBranchTags">
            <summary> Returns a list of tags and their values in this node and all child nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTreeTags">
            <summary> Returns a list of tags and their values in this node, all parents, and all child nodes. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNearestTrunkTags">
            <summary> Walks up the tree (including the current node) and returns the the nearest values for each type of tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNodeValues(System.String)">
            <summary> Returns the values for a tag on a specific node. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTrunkValues(System.String)">
            <summary> Returns a list of values in this node and all parent nodes for a specific tag name. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetNearestTrunkValues(System.String)">
            <summary> Walks up the tree (including the current node) and returns the values for the first occurance of a tag. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllBranchValues(System.String)">
            <summary> Returns a list of values in this node and all child nodes for a specific tag name. </summary>
        </member>
        <member name="M:ServerTestFramework.NodeTaggingData.GetAllTreeValues(System.String)">
            <summary> Returns a list of values in this node, all parent nodes, and all child nodes for a specific tag name. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.Value">
            <summary> Represents a value of a tag. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.ValueSet">
            <summary> A collection of values. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.InvalidExpressionException">
            <summary> Thrown when an expression is parsed that is not valid. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.ExpressionEvaluationException">
            <summary> Thrown when an expression cannot be evaluated. </summary>
        </member>
        <member name="T:ServerTestFramework.NodeTaggingData.Expression">
            <summary> An expression that can be evaluated. </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.InfiniteLifetimeMarshalByRefObject">
            <summary>
            This overrides the lease provided on a MarshalByRef object so that it doesn't
            timeout during debugging or otherwise.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Report.DEBUG">
            <summary>
            Bit flags used for specifying the logging level of a report.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.GetRoot">
            <summary>
            Get the global root reporting destination.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.#ctor(ServerTestFramework.Report,System.String)">
            <summary>
            Create a new report that inherits it's properties (minus filter) from
            a parent report. Name must be specified for every report seperately.
            </summary>
            <param name="parent">Report to inherit properties from</param>
        </member>
        <member name="M:ServerTestFramework.Report.#ctor(System.String)">
            <summary>
            Create a new default style report with a given name and unspecified
            category. This report will automatically be attached to the root 
            reporting object.
            </summary>
            <param name="Name">Name of this report.</param>
        </member>
        <member name="M:ServerTestFramework.Report.AddReportDestination(ServerTestFramework.Report.Destination)">
            <summary>
            Add a new reporting destination to the internal list of reporters.
            </summary>
            <param name="dest">Class conforming to abstract protocol Destination</param>
        </member>
        <member name="M:ServerTestFramework.Report.RemoveReportDestination(ServerTestFramework.Report.Destination)">
            <summary>
            Removeo a new reporting destination by reference.
            </summary>
            <param name="dest">Class conforming to abstract protocol Destination</param>
        </member>
        <member name="M:ServerTestFramework.Report.ContainsReportDestination(ServerTestFramework.Report.Destination)">
            <summary>
            Returns true if this object contains a reference to a specific reporting destination 
            </summary>
            <param name="dest">Class conforming to abstract protocol Destination</param>
        </member>
        <member name="M:ServerTestFramework.Report.ResetDestinations">
            <summary>
            Remove all reporting destinations.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.SetLevelFilter(System.UInt32)">
            <summary>
            Change the level of reporting that will be written.
            </summary>
            <param name="filter">Log level bitflags</param>
        </member>
        <member name="M:ServerTestFramework.Report.EnableFilter(System.UInt32)">
            <summary>
            Shortcut to enable only a specific set of filters
            </summary>
            <param name="filter">Log level bitflags</param>
        </member>
        <member name="M:ServerTestFramework.Report.DisableFilter(System.UInt32)">
            <summary>
            Shortcut to disable only a specific set of filters
            </summary>
            <param name="filter">Log level bitflags</param>
        </member>
        <member name="M:ServerTestFramework.Report.Debug(System.String)">
            <summary>
            Log a message at debug priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Debug(System.String,System.Object[])">
            <summary>
            Log a message at debug priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Info(System.String)">
            <summary>
            Log a message at info priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Info(System.String,System.Object[])">
            <summary>
            Log a message at info priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Warn(System.String)">
            <summary>
            Log a message at warning priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Warn(System.String,System.Object[])">
            <summary>
            Log a message at warning priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Error(System.String)">
            <summary>
            Log a message at error priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Error(System.String,System.Object[])">
            <summary>
            Log a message at error priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Fatal(System.String)">
            <summary>
            Log a message at fatal priority.
            </summary>
            <param name="message">String to send to logs.</param>
        </member>
        <member name="M:ServerTestFramework.Report.Fatal(System.String,System.Object[])">
            <summary>
            Log a message at fatal priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServerTestFramework.Report.Success(System.String)" -->
        <member name="M:ServerTestFramework.Report.Success(System.String,System.Object[])">
            <summary>
            Log a message at success priority.
            </summary>
            <param name="format">Format string applied to objets.</param>
            <param name="arguments">Object paramaters to use in format string.</param>
        </member>
        <member name="M:ServerTestFramework.Report.FormatLogLine(System.UInt32,System.String,System.String)">
            <summary>
            Formats and timestamps a log line nicely.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Report.BlockUntilQueuedLinesAreProcessed">
            <summary> Blocks until all loglines currently queued up have been processed. </summary>
        </member>
        <member name="P:ServerTestFramework.Report.GlobalCustomPrefixFormat">
            <summary>
            This controls the prefix format of log lines.
            Example: "[%level%] [%date%] [%path%] "
            </summary>
        </member>
        <member name="P:ServerTestFramework.Report.GlobalCustomPrefixDateFormat">
            <summary>
            This controls the format of the date used in loglines, using the standard .NET date format specifiers.  Specifying null will use the system default.
            Example: "yyyy'-'M'-'d' 'H':'mm':'ss"
            </summary>
        </member>
        <member name="T:ServerTestFramework.Report.Destination">
            <summary>
            Interfaced needed to a log message sink.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Report.BulkDestination">
            <summary>
            Interfaced to log many lines at once.  This interface is optional.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Report.ReportLine">
            <summary>
            A single line stored from the report output
            </summary>
        </member>
        <member name="T:ServerTestFramework.RUN_TYPE">
            <summary>
            Type of execution being run.
            These should be changed to proper case at some point.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestNode">
            <summary>
            The fundamental unit that makes up test groups and test cases.
            A node can be either be executed or can contain any number of other nodes as children.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.HasAttribute(System.Type)">
            <summary>
            Returns whether an attribute is present on this node.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetAttributes(System.Type)">
            <summary>
            Returns a list of all attributes on this node.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a list of all attributes on this node.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetAttribute``1">
            <summary>
            Returns a single attribute of the requested type
            </summary>
            <typeparam name="TAttributeType">The type of attribute to get</typeparam>
            <returns>An attribute of the given type if it exists, or null otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetActualType">
            <summary>
            Returns the type of the class represented by the TestNode (which may be a wrapper around the real class)
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetActualInstance">
            <summary>
            /// Returns the class represented by the TestNode (which may be a wrapper around the real class)
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.CreateContextData">
            <summary>
            Creates context data on a node.  This is useful for overiding values for a specific branch of the tree.
            If it already exists it is cleared.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.DestroyContextData">
            <summary>
            Destroys context data on a node.  The context on the root node may not be destroyed
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetContextData(System.String)">
            <summary>
            Searches ourself and then up the tree looking for a specifically named piece of data.
            Returns null if not found.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.SetContextData(System.String,System.Object)">
            <summary>
            Sets data into the first context that is found from searching ourself and then up the tree.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.GetFlattenedSubtree(System.Collections.Generic.List{ServerTestFramework.TestNode}@)">
            <summary>
            Retrieves a flattened list of all nodes under this one, including itself.
            </summary>
            <param name="allNodes"></param>
        </member>
        <member name="M:ServerTestFramework.TestNode.#ctor(System.String,System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode},System.Boolean,System.Boolean)">
            <summary>
            Creates a test node with the given children.
            </summary>
            <param name="name">The name of the test node.</param>
            <param name="children">The children to give the test node.</param>
            <param name="addFunctionalData">If true, adds functional data to the nodes.</param>
            <param name="addStressData">If true, adds stress data to the nodes.</param>
            <remarks>
            Attempting to pass the Children from another TestNode may not work, as the enumeration object
            may not function properly when its container is modified by the AddChild function.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.TestNode.GenerateNodeTree(System.String)">
            <summary>
            Returns a list of all top level nodes, which have had all child nodes fully populated.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PostProcessBranchConstruction">
            <summary>
            This will be called once on all node instances after the full tree has been constructed and linked together.
            A node may use this to make changes to itself or its children.  This includes adding/removing children and changing data members.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.CompoundCaseComparison(ServerTestFramework.CompoundCaseAttribute,ServerTestFramework.CompoundCaseAttribute)">
            <summary>
            Used to sort the compound cases.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Clone">
            <summary>
            Generates a copy of the node without sharing references.
            This new node is not immediately linked into any tree.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.CloneBranch">
            <summary>
            Constructs a Clone() of this node, and also of all child nodes, which are linked back together as a branch of a new tree.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Dispose">
            <summary>
            Obliterates the node and all of its children
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.ConstructFromType(System.Type)">
            <summary>
            Constructs a basic node with no linkage and no use-specific data from a type.
            If the type isn't derived from TestNode, it will be wrapped as a fake group.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.AddChild(ServerTestFramework.TestNode,System.Boolean,System.Boolean)">
            <summary>
            Adds a child node to this node's children.
            It optionally adds stress/functional-specific data to the node as well (if it does not already exist).
            Only valid during construction of a node or before that node's children have started populating.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.AddChild(ServerTestFramework.TestNode)">
            <summary>
            Adds a child node to this node's children.
            It optionally adds functional-specific data to the node as well (if it does not already exist).
            Only valid during construction of a node or before that node's children have started populating.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.RemoveChild(ServerTestFramework.TestNode)">
            <summary>
            Removes a child from this node.
            Only valid during construction of a node or before that node's children have started populating.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.FindNode(ServerTestFramework.TestNode,System.String)">
            <summary>
            Searches a tree for a node based on it's name.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.EditInstances(System.Collections.Generic.List{ServerTestFramework.CompoundCaseAttribute}@)">
            <summary>
            This can optionally be implemented to manually tweak how instances are generated.
            It is passed the list of instances that were specified from attributes.  You can then add or remove from this list.
            TODO: This list was meant to be a "linked" list, not a vector.  It would be a breaking change now though...
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PreRun">
            <summary>
            Called before Run is called and before child nodes are run.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PreRun(ServerTestFramework.RUN_TYPE)">
            <summary>
            Called before Run is called and before child nodes are run.
            You may optionally implement this INSTEAD of the parameterless PreRun.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PostRun">
            <summary>
            Called after Run has been called and after child nodes have run.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.PostRun(ServerTestFramework.RUN_TYPE)">
            <summary>
            Called after Run has been called and after child nodes have run.
            You may optionally implement this INSTEAD of the parameterless PostRun.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeSetup">
            <summary>
            Similar to and called before Setup, except it is normally only ever called once.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeSetup(ServerTestFramework.RUN_TYPE)">
            <summary>
            Similar to and called before Setup, except it is normally only ever called once.
            You may optionally implement this INSTEAD of the parameterless OneTimeSetup.  It may be called once for each type.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeCleanup">
            <summary>
            Similar to and called after Cleanup, except it is normally only ever called once.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.OneTimeCleanup(ServerTestFramework.RUN_TYPE)">
            <summary>
            Similar to and called after Cleanup, except it is normally only ever called once.
            You may optionally implement this INSTEAD of the parameterless OneTimeCleanup.  It may be called once for each type.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Run">
            <summary>
            Called to execute the test.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Run(ServerTestFramework.RUN_TYPE)">
            <summary>
            Called to execute the test.
            You may optionally implement this INSTEAD of the parameterless Run.
            </summary>
        </member>
        <member name="M:ServerTestFramework.TestNode.Prerequisites(System.Collections.Generic.Dictionary{System.String,System.Boolean}@)">
            <summary>
            Functional:
            This is called when a functional run for a suite is started and before Initialize.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.Parent">
            <summary>
            The parent node of this node in the tree.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.Children">
            <summary>
            The children nodes of this node in the tree.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.Desc">
            <summary>
            Description of the test case
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.FullName">
            <summary>
            The fully qualified name of the node, which uniquely identifies it in the tree.
            </summary>
        </member>
        <member name="P:ServerTestFramework.TestNode.ContainingDll">
            <summary>
            Stores the dll that this node belongs to.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TestNodeFunction">
            <summary>
            Wrap a method that represents a test case and present it as a TestNode
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncStressTestNode">
            <summary>
            A stress base for doing asynchronous tests.  Derived classes must implement their Begin function
            in a thread safe manner, as only one actual object will ever be created.
            The Run function allows the async tests to run synchronously if the scheduler does not
            have support for async tests.
            </summary>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.MaximumWaitTimeMilliseconds">
            <summary>
            The maximum time to wait when running synchronously.
            </summary>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.Run">
            <summary>
            The Run function allows the async tests to run synchronously if the scheduler does not
            have support for async tests.
            </summary>
            <returns>The result of running the test.</returns>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.WaitEventQ">
            <summary>
            The queue of ManualResetEvents to be used when running synchronously.
            </summary>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.GetWaitEvent">
            <summary>
            Gets a ManualResetEvent from the queue, or creates one if it is empty.
            </summary>
            <returns>A ManualResetEvent.</returns>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.ReleaseWaitEvent(System.Threading.ManualResetEvent)">
            <summary>
            Returns a ManualResetEvent to the queue.
            </summary>
            <param name="mre">The ManualResetEvent to return.</param>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.Begin(System.Object)">
            <summary>
            The main entry point for external callers that are aware of AsyncStressTestBase.
            </summary>
            <param name="state">A state object that will be passed back to the external caller.</param>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.Begin(ServerTestFramework.AsyncStressTestNode.AsyncStressTracking)">
            <summary>
            This is the entry point for the test case.  Remember that it must be thread safe.
            All tests should call End to report the result of running the test.
            </summary>
            <param name="tracker">The state object used to track this test run.</param>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.AsyncFinish">
            <summary>
            The function that will be called by the test to report its result.
            The scheduler should set this value on startup to receive callbacks.
            </summary>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.End(ServerTestFramework.AsyncStressTestNode.AsyncStressTracking)">
            <summary>
            Reports the test result given to it.
            </summary>
            <param name="result">The result of running the test.</param>
            <param name="tracker">The state object used to track this test run.</param>
        </member>
        <member name="M:ServerTestFramework.AsyncStressTestNode.End(System.Exception,ServerTestFramework.AsyncStressTestNode.AsyncStressTracking)">
            <summary>
            Reports the test result and updates the tracker.
            </summary>
            <param name="result">The result of running the test.</param>
            <param name="exc">The exception that occured.</param>
            <param name="tracker">The state object used to track this test run.</param>
        </member>
        <member name="T:ServerTestFramework.AsyncStressTestNode.AsyncStressTracking">
            <summary>
            An object that may be useful for debugging and will be used for running synchronously.
            </summary>
        </member>
        <member name="F:ServerTestFramework.AsyncStressTestNode.AsyncStressTracking.IDVal">
            <summary>
            The ID value position, each tracker gets its own number until we wrap.
            </summary>
        </member>
        <member name="T:ServerTestFramework.AsyncStressTestNode.AsyncCompletion">
            <summary>
            The delegate type that is used to notify the scheduler of the async test completing.
            </summary>
            <param name="state">A state object that will be passed back to the external caller.</param>
            <param name="result">The result of running the test.</param>
            <param name="exc">The exception, if any, that occured.</param>
            <param name="startTime">The time the test was started (from QueryPerformanceCounter).</param>
        </member>
        <member name="T:ServerTestFramework.FunctionalNodeData">
            <summary>
            Data about a node that is specific to functional tests.
            Note that if A node has functional data, its parent is guarenteed to also.
            </summary>
        </member>
        <member name="T:ServerTestFramework.StressNodeData">
            <summary>
            Data about a node that is specific to stress tests.
            </summary>
        </member>
        <member name="T:ServerTestFramework.ThreadMaker">
            <summary>
            Utility function to just create a System.Thread (this internally updates the thread tracker automatically).
            (You must still call .Start() on it like normal)
            </summary>
        </member>
        <member name="T:ServerTestFramework.ThreadBase">
            <summary>
            Represents a class with a worker thread (this internally updates the thread tracker automatically).
            </summary>
        </member>
        <member name="T:ServerTestFramework.ThreadTracker">
            <summary>
            Thread static storage for data that should be used across an individual test case run.
            For use and managed by the framework.
            </summary>
        </member>
        <member name="F:ServerTestFramework.ThreadTracker.TestCaseNameKey">
            <summary>The dictionary key for the current test case full name.</summary>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.Set(System.String,System.Object)">
            <summary>
            Sets a value within the thread tracking data container.
            </summary>
            <param name="key">The key to use for the value.</param>
            <param name="value">The value to associate with the key.</param>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.TryGet``1(System.String,``0@)">
            <summary>
            Attempts to get a value out of the thread tracking data container.
            </summary>
            <typeparam name="T">The type of value that is expected.</typeparam>
            <param name="key">The key to use when looking in the container.</param>
            <param name="value">The value will be set to this out parameter.</param>
            <returns>True if the container has the key; false if it does not.</returns>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.TryGetSetDefault``1(System.String,``0@,``0)">
            <summary>
            Attempts to get a value out of the thread tracking data container; if it does not contain the key, 
            add it (atomically) using the default value provided.
            </summary>
            <typeparam name="T">The type of value that is expected.</typeparam>
            <param name="key">The key to use when looking in the container.</param>
            <param name="value">The value will be set to this out parameter.</param>
            <param name="defaultValue">The default value to use if the key is not present in the container.</param>
            <returns>True if the container already had the key; false if it did not.</returns>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.Reset">
            <summary>
            Resets the thread tracking data.
            </summary>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.GetThreadTrackerData">
            <summary>
            Gets the thread tracking data container, for use in passing data to another thread.
            </summary>
            <returns>The thread tracking data object.</returns>
        </member>
        <member name="M:ServerTestFramework.ThreadTracker.SetThreadTrackerData(System.Object)">
            <summary>
            Sets the thread tracking data, for use in passing data to another thread.
            </summary>
            <param name="data">The thread tracking data object.</param>
        </member>
        <member name="F:ServerTestFramework.ThreadTracker._threadDataCreationLock">
            <summary>Keeps dictionary creation thread safe.</summary>
        </member>
        <member name="F:ServerTestFramework.ThreadTracker._threadTrackData">
            <summary>Backing for ThreadTrackData.</summary>
        </member>
        <member name="P:ServerTestFramework.ThreadTracker.ThreadTrackData">
            <summary>
            The thread tracking data dictionary.
            </summary>
        </member>
        <member name="T:ServerTestFramework.TEST_RESULTS">
            <summary>
            The result of a single execution of a run.
            These should be changed to proper case at some point.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FunctionalSchedulerNodeData">
            <summary>
            Information that each node needs to be used by the functional scheduler.
            This is reset everytime a new run is started.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FuncSchedulerEvents">
            <summary>
            Sends events for the functional scehduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FuncSchedulerHelpers">
            <summary>
            Misc helpers for the functional scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FunctionalSchedulerSettings">
            <summary>
            Overall parameters to the functional scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.FuncScheduler">
            <summary>
            The functional scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestScheduler">
            <summary>
            Functional test schedular interface.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.Initialize(ServerTestFramework.Runner.FunctionalSchedulerSettings,ServerTestFramework.Runner.TestEventListener,System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode})">
            <summary>
            Called to set up the scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.Run">
            <summary>
            This call will block and run tests and block until either someone calls Stop or the tests finish.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.Stop">
            <summary>
            Stop running tests.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestScheduler.ValidateParameters">
            <summary>
            Validates that the current scheduler settings are valid.
            </summary>
            <returns>true if they are valid</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.GetSerializableFunctionalData(ServerTestFramework.TestNode)">
            <summary>
            Returns a serializable dictionary which contains the contents of the functional
            scheduler node data of a subtree which is passed in.
            </summary>
            <param name="rootNode"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.SerializeRun">
            <summary>
            Takes the first node's name (for convenience and assuming that most runs are a single-dll)
            and serializes the current run's results to a file in the format 
            SuiteNameSerializedRunResultsTimestamp.xml. Saves into the FuncOutput\SerializedRunResults path.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.SerializeRun(System.String)">
            <summary>
            Takes the root loglines and the test case functional scheduler node data and serializes them into a file.        
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.CollectNodePrerequisitesData(ServerTestFramework.TestNode)">
            <summary>
            Collect Prerequisites Data.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.FuncScheduler.CollectNodePrerequisitesDataRecurse(System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode})">
            <summary>
            Traverse the nodes tree to populate NodePrerequisitesData.
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="T:ServerTestFramework.Runner.SerializedRunResults">
            <summary>
            Used to serialize a single run's worth of data to a file.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJob.#ctor(ServerTestFramework.TestNode,System.Single,System.String,ServerTestFramework.Runner.TestResultCollection)">
            <summary>
            Constructor for dynamic test cases
            </summary>
            <param name="suiteName"></param>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="testname"></param>
            <param name="allResults"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJob.#ctor(ServerTestFramework.TestNode,System.Single,ServerTestFramework.Runner.TestResultCollection)">
            <summary>
            Regular constructor
            </summary>
            <param name="suiteName"></param>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="allResults"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJob.#ctor(System.Type,ServerTestFramework.Runner.TestResultCollection)">
            <summary>
            Regular constructor
            </summary>
            <param name="suiteName"></param>
            <param name="type"></param>
            <param name="allResults"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.#ctor">
            <summary>
            Creates an empty job list.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.AddNode(ServerTestFramework.TestNode)">
            <summary>
            Adds a node to this job list.
            </summary>
            <param name="node">The node to add.</param>
            <returns>A List of the StressJobs added.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.AddNodes(System.Collections.Generic.IEnumerable{ServerTestFramework.TestNode})">
            <summary>
            Adds nodes to this job list.
            </summary>
            <param name="rootNodes">The nodes to add.</param>
            <returns>A List of the StressJobs added.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.RemoveNode(ServerTestFramework.TestNode)">
            <summary> Removes a specific root node and all children from the list. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressJobList.FindStressCases(ServerTestFramework.TestNode,System.Collections.Generic.List{ServerTestFramework.TestNode})">
            <summary>
            Recursively finds the stress tests for the given node, adding them to the list.
            </summary>
            <param name="node">The node to search.</param>
            <param name="list">The place to add stress nodes to.</param>
        </member>
        <member name="P:ServerTestFramework.Runner.StressJobList.TestResults">
            <summary>
            The test results used by this job list.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerStage">
            <summary> Current state of the scheduler. </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressTestScheduler">
            <summary>
            Interface for stress test schedulers.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Initialize(ServerTestFramework.Runner.StfXmlDoc,ServerTestFramework.Runner.StressJobList,ServerTestFramework.Runner.StressSettingsCommon)">
            <summary>
            Called to set up the scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Shutdown">
            <summary>
            Shuts down the scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Run">
            <summary>
            This call will block and run tests and block until someone calls Stop.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Stop">
            <summary>
            Stop running tests.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.Tick">
            <summary>
            May be called regularly by anything using the scheduler.  For instance can be used to update the
            control with status information.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.GetScaleValue(ServerTestFramework.Runner.StressJob)">
            <summary>
            Gets a scale value from a stress job.
            </summary>
            <param name="job">The job to get from.</param>
            <returns>The scale value from the stress job.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.SetScaleValue(ServerTestFramework.Runner.StressJob,System.Single)">
            <summary>
            Sets a scale value on a stress job.
            </summary>
            <param name="job">The job to set on.</param>
            <param name="val">The scale value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.LoadSettings(System.Xml.XmlNode)">
            <summary>
            Load settings from an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.SaveSettings(System.Xml.XmlNode)">
            <summary>
            Save settings to an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressTestScheduler.GetSettings">
            <summary> Returns the settings used by the current scheduler. </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressTestScheduler.SchedulerControl">
            <summary>
            Gets the control associated with the scheduler.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressTestScheduler.ScaleName">
            <summary>
            The name of the scale value used by this scheduler.  Displayed on GUI elements.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressTestScheduler.ActiveThreads">
            <summary>
            Number of threads in use by this scheduler that are currently active (not stopped)
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsCommon">
            <summary> Settings shared by all stress schedulers. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSettingsCommon.CopyFrom(ServerTestFramework.Runner.StressSettingsCommon)">
            <summary> Copies all our members in from another settings object. </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerHelpers">
            <summary> Helpers for doing things with the stress schedulers. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.RunScheduler(ServerTestFramework.Runner.StressTestScheduler,ServerTestFramework.Runner.StressJobList)">
            <summary> Starts a stress scheduler and blocks until it stops running. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.StopScheduler(ServerTestFramework.Runner.StressTestScheduler)">
            <summary> Stop a scheduler that is running.  This blocks until the scheduler is finished stopping. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.VerifyOrPerformPreRun(ServerTestFramework.TestNode,ServerTestFramework.Runner.StressSettingsCommon)">
            <summary> Verifies and performs if needed the PreRun steps for a node and any of its parents. </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerHelpers.PerformPostRun(ServerTestFramework.Runner.StressJobList,ServerTestFramework.Runner.StressSettingsCommon)">
            <summary> Performs PostRun steps for all jobs. </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsDestroyer">
            <summary>
            Settings for the Destroyer Scheduler
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsTPS">
            <summary>
            Settings and Status for the TPS based scheduler.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StressSettingsTPS.SinWavePeriod">
            <summary>
            Period of the sine wave, in seconds.
            </summary>
            <remarks>
            Should be a factor of 60*60*24; in other words an integral number of periods should pass in a 
            single day.  Thus, 24 hours, 12 hours, 8 hours, 6 hours, etc.  If this assumption is not held,
            the wave will not stay consistent when the day resets (midnight).
            </remarks>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerDestroyer">
            <summary>
            The destroyer scheduler is based on the TPS scheduler.
            It is designed to increase load until a set amount of failures occur.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerTPS">
            <summary>
            The TPS based stress scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.Tick">
            <summary>
            Timer services provided by our owner.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.GetScaleValue(ServerTestFramework.Runner.StressJob)">
            <summary>
            Gets a scale value from a stress job.
            </summary>
            <param name="job">The job to get from.</param>
            <returns>The scale value from the stress job.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.SetScaleValue(ServerTestFramework.Runner.StressJob,System.Single)">
            <summary>
            Sets a scale value on a stress job.
            </summary>
            <param name="job">The job to set on.</param>
            <param name="val">The scale value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.LoadSettings(System.Xml.XmlNode)">
            <summary>
            Load settings from an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.SaveSettings(System.Xml.XmlNode)">
            <summary>
            Save settings to an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPS.TestCallback(System.Object,System.Exception,System.Int64)">
            <summary>
            The callback used by async tests to report success or failure.
            </summary>
            <param name="state">The state object that was passed to Begin.</param>
            <param name="result">The result of running the test.</param>
            <param name="exc">The exception, if any, that occured during the asynchronous portions of the test.</param>
            <param name="startTime">Time the test started (from QueryPerformanceCounter).</param>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPS.IsInProgress">
            <summary>
            Checks the job list for in progress tests, if there are any, return true.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPS.SchedulerControl">
            <summary>
            Gets the StressSchedulerTPSControl.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPS.ScaleName">
            <summary>
            The name of the scale value used by this scheduler.  Displayed on GUI elements.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSettingsPriority">
            <summary>
            Settings for the ancient scheduler.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressThread">
            <summary>
            Ye Aulde stress schedular apparently uses this.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressThread.SoftTerminate">
            <summary>
            Sets the terminate flag, the thread will stop after the current job is complete.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressThread.Terminate">
            <summary>
            Kills the thread.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.StressSchedulerPriority">
            <summary>
            The ancient priority-based stress scheduler.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.GetScaleValue(ServerTestFramework.Runner.StressJob)">
            <summary>
            Gets a scale value from a stress job.
            </summary>
            <param name="job">The job to get from.</param>
            <returns>The scale value from the stress job.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.SetScaleValue(ServerTestFramework.Runner.StressJob,System.Single)">
            <summary>
            Sets a scale value on a stress job.
            </summary>
            <param name="job">The job to set on.</param>
            <param name="val">The scale value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.LoadSettings(System.Xml.XmlNode)">
            <summary>
            Load settings from an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.SaveSettings(System.Xml.XmlNode)">
            <summary>
            Save settings to an xml fragment.
            </summary>
            <param name="node">The root of the settings.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.BeginStress">
            <summary>
            Called by AsyncButtonClickAction when Start button is clicked. This is when we
            actually start doing the stress test work.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.TerminateThreads(System.Int32)">
            <summary>
            Terminate some number of threads gently. 
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriority.TerminateAllThreads">
            <summary>
            Terminate all threads, used when stopping stress run.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerPriority.ScaleName">
            <summary>
            The name of the scale value used by this scheduler.  Displayed on GUI elements.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StressSchedulerPriControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerPriControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.SyncWithSettings">
            <summary>
            Syncs the various child controls with the settings object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.SyncWithSettingsStatus">
            <summary>
            Syncs the status labels with the settings values.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StressSchedulerTPSControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ServerTestFramework.Runner.StressSchedulerTPSControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Runner.StressSchedulerTPSControl.Settings">
            <summary>
            The settings object used by the scheduler that owns this control.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestAction">
            <summary>
            Specific types of events that occur inside of the test scheduler.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Start">
            Test case started pre-run.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.PostStart">
            Test case started running the actual test.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Pause">
            Test case started post-run.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Resume">
            Test run paused on a node.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Pass">
            Test run resumed on a node.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Fail">
            Test returned a passed result.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Timeout">
            Test case returned a failed result.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.PreFail">
            Test case timed out.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.PostFail">
            Prerun setup steps for the test failed.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Retry">
            Postrun cleanup steps for the test failed.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Ignore">
            A test case that previously failed is now being re-run.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.Finish">
            Test case was not completely executed (or returned not executed).
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.StartAll">
            Test case completely finished.
        </member>
        <member name="F:ServerTestFramework.Runner.TestAction.StopAll">
            Tests begin running. Details will contain a count of running tests.  Node will be null for this.
        </member>
        <member name="T:ServerTestFramework.Runner.TestEventArgs">
            <summary>
            Event arguments notifying listeners of a test result.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestEventListener">
            <summary>
            This interface should be implemented by any class that would be notified by a functional test scheduler of events
            as it is running tests.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.MultiTestEventListener">
            <summary>
            Allows test events to be distributed to multiple destinations.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestResult">
            <summary>
            All stats-related variables and calculations for stress testing should go in this class.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResult.Start">
            <summary>
            Start counting elapsed time.  The counter is stopped when End is called.  The Elapsed time is cumulative through Start/End pairs.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResult.BeginInProgress">
            <summary>
            Increases the count of in progress test runs.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResult.EndInProgress">
            <summary>
            Decreases the count of in progress test runs.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Runner.TestResultCollection">
            <summary>
            Represents a collection of TestResult objects and provides methods for calculating summary values
            </summary>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResultCollection.CreateTestResult(System.String)">
            <summary>
            Creates a new TestResult and adds it to the collection
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Runner.TestResultCollection.AddTestResult(ServerTestFramework.Runner.TestResult)">
            <summary>
            Add existing TestResult to collection
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.Equals``1(``0[],``0[])">
            <summary>
            Check i two arrays of the same type are equal.  Much faster than the non-generic version
            </summary>
            <typeparam name="T">The type of array to compare</typeparam>
            <param name="a">The first array to compare</param>
            <param name="b">The second array to compare</param>
            <returns>True if the arrays are equal, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.Reverse``1(``0[])">
            <summary>
            Reverses the bytes in the array
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.ByteComparison(System.Byte,System.Byte)">
            <summary>
            Implementation of the System.Comparison delegate for byte values
            </summary>
            <param name="left">First byte to compare</param>
            <param name="right">Second byte to compare</param>
            <returns>
            Less than 0: x is less than y.
            0: x equals y.
            Greater than 0: x is greater than y.
            </returns>
        </member>
        <member name="M:ServerTestFramework.ArrayEx.SearchByteArray(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            searches an array for another array and returns the index of the start of the found block, or -1 if not found
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.ArrayComparer`1" -->
        <member name="M:ServerTestFramework.ArrayComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Constructor
            </summary>
            <param name="elementComparer">A System.Comparison delegate capable of comparing
            two values/objects of type T</param>
        </member>
        <member name="M:ServerTestFramework.ArrayComparer`1.Compare(System.Array,System.Array)">
            <summary>
            Compares two arrays
            </summary>
            <param name="left">First array to compare</param>
            <param name="right">Second array to compare</param>
            <returns>
            Less than 0: x is less than y.
            0: x equals y.
            Greater than 0: x is greater than y.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ServerTestFramework.ArrayComparer`1.ElementComparer" -->
        <member name="M:ServerTestFramework.Utilities.AssemblyUtils.LoadAssemblyUsingDefaultMethod(System.String)">
            <summary> Uses DefaultToLoadingAssemblyDirectly to decide whether to load an assembly directly from a file like normal, or whether to load it into memory first to avoid a file lock. </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.AssemblyUtils.LoadAssemblyBytesAndReferences(System.String)">
            <summary> Loads the bytes for an assembly file then creates the assembly from that, so windows doesn't hold a lock on the file.  The referenced assemblies are then resolved like normal (which WILL lock those files).  The downside is this sometimes confuses debuggers. </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.AsyncUtils.ParallelRunner.Run(ServerTestFramework.Utilities.AsyncUtils.PRFuncToCall,System.UInt32,System.UInt32,System.Object,System.UInt32)">
            <summary>
            Starts a set of parallel function calls and waits for them to finish.
            Exceptions are rethrown on to caller if thrown on a thread.
            </summary>
            <param name="fToCall">the function to call</param>
            <param name="count">total number of calls to make (the value passed to your function is incremented each time starting from 0)</param>
            <param name="maxAtOnce">max number of threads to run at once</param>
            <param name="userData">any user-defined information to pass on (note that it is passed by referance, so all threads share the same copy)</param>
            <param name="threadDelay">Delay in ms between thread creations (default 0).  This is useful to prevent a ton of operations that start all at once from trying to hammer a network interface silmutaneously, which can cause packets to be dropped.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.AsyncUtils.ParallelRunner.RunAsync(ServerTestFramework.Utilities.AsyncUtils.PRFuncToCall,System.UInt32,System.UInt32,System.Object,System.UInt32)">
            <summary>
            Same as Run(), only returns immediately.  The returned Status object can be used to monitor the progress.
            If an exception occurs, it is stored in the status object.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.AsyncUtils.ParallelRunner.Status">
            <summary>
            represents the status of an asynchronous run
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ByteEncoding">
            <summary>
            Encoding to just get the gosh dern bytes out of the string, and visa versa
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ConsoleX">
            <summary>
            <p>class ConsoleX: Extends standard Console  with kbhit() and getch() methods and colored output.</p>
            
            <p>uses MSVCR70.DLL Runtime library for kbhit() and getch()</p>
            <p>uses kernel32.dll and Win32 Console API for colored output</p>
             
            contacts: VladiP
            </summary>
            <example>
            <code>
            // write colored output for arg list without brackets {},  see comments in CC class  for color output details
            ConsoleX.WriteLine(CC.BLUE, " Simple colored output: ", CC.GREEN, " int: ",i, "  float: ", f);
            ConsoleX.Write(CC.WHITE, "\n Formatted output: ", CC.GREEN, "f= ", f.ToString("000.0")); 
            
            // kbhit example
            while (27 != c)
            {
            	if (ConsoleX.kbhit())
            	{
            		c = ConsoleX.getch();
            		ConsoleX.WriteLine(CC.GREEN,"Key: ", c, "  code: ", CC.WHITE, ((int)c).ToString("d") );
            	}
            }
            </code>
            </example>
            
        </member>
        <member name="M:ServerTestFramework.Utilities.ConsoleX.Write(System.Object[])">
            <summary>
            writes arg list to console, parameters with byte type will set color options for the next output items
            see comments in CC class  for color output details
            </summary>
            <param name="olist"> parameter list with optional byte type color modifiers </param>
            <returns> byte value - old default console color </returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.ConsoleX.WriteLine(System.Object[])">
            <summary>
            WriteLine: works as Write with new line at the end of parameter list
            </summary>
            <param name="olist"></param>
            <returns> byte value - old default console color </returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.CC">
            <summary>
            class CC - contains color constants to be used with ConsoleX output methods.
            Thanks to Keith Stutler (KeithSt) -- he suggested to put all constants into public class
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.COORD">
            <summary>
            Win32 API struct
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.SMALL_RECT">
            <summary>
            Win32 API struct
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.CONSOLE_SCREEN_BUFFER_INFO">
            <summary>
            Win32 API struct
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.Events">
            <summary>
            Works with event logs on multiple servers.  Primary use is searching for specific
            events withing logs since the last checkpoint.
            </summary>
            <example>
            // Set up checking event log for the kdc xmacs...
            string[] servers = Global.XEnv.GetServerListByInterface(xonline.common.config.Interface.kdcsvc);
            Events logs = new Events(servers);
            logs.Source = "XMACS"; //optional
            logs.Init();
            // Run tests...
            ...
            // Check for events by search string in new events.
            if (change.TestForChange("execution failed"))
            ...
            </example>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.Init">
            <summary>
            Run before your operation to get a base for the log.
            </summary>
            <returns>True if all servers listed responded; false if any did not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.String)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="search">String to look for in the log.</param>
            <returns>True if Search string is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.String,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="search">String to look for in the log.</param>
            <param name="advance">If true, advances the search index; if false, does not.</param>
            <returns>True if Search string is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="id">The event id to search for.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64,System.Byte[])">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="id">The event id to search for.</param>
            <param name="eventData">The event data to check events for.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="id">The event id to search for.</param>
            <param name="advance">If true, advances the search index; if false, does not.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChange(System.Int64,System.Byte[],System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="id">The event id to search for.</param>
            <param name="eventData">The event data to check events for.</param>
            <param name="advance">If true, advances the search index; if false, does not.</param>
            <returns>True if event id is found in any log since the last advancement.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChangeAll(System.String,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="expect">True if the string is expected; false if it is not.</param>
            <returns>
            If expect is true: Returns true if the string is found on all servers; false if it is missing from one or more.
            If expect is false: Returns true if the string is not found on all servers; false if it is found on one or more.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestForChangeAll(System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches new entries since Init() or the last TestForChange* was called with advance == true.
            </summary>
            <param name="search">The string to search for.</param>
            <param name="expect">True if the string is expected; false if it is not.</param>
            <param name="advance">If true, advances the last time; if false, does not.</param>
            <returns>
            If expect is true: Returns true if the string is found on all servers; false if it is missing from one or more.
            If expect is false: Returns true if the string is not found on all servers; false if it is found on one or more.
            </returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.String,System.DateTime,System.DateTime@)">
            <summary>
            Searches the server log for the search string that occured in an event after begin.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="search">The string to search for.</param>
            <param name="begin">The earliest the event could occur to be relevant.</param>
            <param name="outLastTime">Output param: The last time value that was checked for events in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.String,System.Int32,System.Int32@)">
            <summary>
            Searches the server log for the search string that occured in an event after the given index.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="search">The string to search for.</param>
            <param name="index">The search will begin after the event with this index.</param>
            <param name="outLastIndex">Output param: The index of the last event that was checked in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Searches the server log for the event id after begin.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="begin">The earliest the event could occur to be relevant.</param>
            <param name="end">The latest the event could occur to be relevant.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.Int32,System.Int32@)">
            <summary>
            Searches the server log for the event id that occured after the given index.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="index">The search will begin after the event with this index.</param>
            <param name="outLastIndex">Output param: The index of the last event that was checked in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Searches the server log for the event id that occured after the given index.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="eventData">The binary data that should be included in the event.</param>
            <param name="index">The search will begin after the event with this index.</param>
            <param name="outLastIndex">Output param: The index of the last event that was checked in the log.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.TestServerForEvents(System.String,System.String,System.String,System.Int64,System.String,System.DateTime,System.DateTime)">
            <summary>
            Searches the server log for the event id after begin.
            </summary>
            <param name="server">The server to search.</param>
            <param name="log">The log to search.</param>
            <param name="source">The source of events.</param>
            <param name="id">The event id to search for.</param>
            <param name="search">The string to search for.</param>
            <param name="begin">The earliest the event could occur to be relevant.</param>
            <param name="end">The latest the event could occur to be relevant.</param>
            <returns>True if a matching event is found; false if it is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.GetEventsAfter(System.Diagnostics.EventLog,System.DateTime)">
            <summary>
            Gets all of the events after a certain time.  Attempts to compensate for a moving log target.
            </summary>
            <param name="eventLog">The log to get from.</param>
            <param name="begin">The time to start getting events.</param>
            <returns>An array of events from the log after the time.</returns>
            <remarks>
            The change to make this copy out the timed list of entries was due to the fact that when the event log
            becomes too large, it will automatically truncate.  This would cause the end of the list to drop out
            from under the index, throwing an exception.
            
            We now do a binary search to find the oldest entry we care about, then copy out the entries from that
            one to the end.  If the oldest entry in the log hasn't changed, then we continue on.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.FindFirstGTE(System.Diagnostics.EventLog,System.DateTime)">
            <summary>
            Does a binary search to find the first entry whose time is >= the time passed in.
            </summary>
            <param name="log">The log to search.</param>
            <param name="time">The time to search for.</param>
            <returns>The index of the entry, or -1 if it all entries are earlier than time.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.GetEventsAfter(System.Diagnostics.EventLog,System.Int32)">
            <summary>
            Gets all of the events after a certain index.  Attempts to compensate for a moving log target.
            </summary>
            <param name="eventLog">The log to get from.</param>
            <param name="index">The index after which to start getting events.</param>
            <returns>An array of events from the log after the index..</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.Events.FindFirstGT(System.Diagnostics.EventLog,System.Int32)">
            <summary>
            Does a binary search to find the first entry whose index is > the index passed in.
            </summary>
            <param name="log">The log to search.</param>
            <param name="index">The index to search for.</param>
            <returns>The index of the entry, or -1 if it all entries are earlier than index.</returns>
        </member>
        <member name="P:ServerTestFramework.Utilities.Events.Servers">
            <summary>
            List of servers to check for events.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.Events.Source">
            <summary>
            Source of the events.  ie. 'xmatchfd'
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.Events.Log">
            <summary>
            Name of the Log to access.  Default 'Application'
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.EventMonitor">
            <summary>
            Monitors an eventlog for a list of events.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.EventMonitor.Poll">
            <summary>
            Checks eventChecker for an occurance of any event in eventStringList.
            If a logfile was provided, the event will be saved to that file.
            If another Poll on the object is already in progress, it returns immediately with null.
            </summary>
            <returns>A list of events that occured, or null if none (or failure trying to check).</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.SleepInfo">
            <summary>
            Create new SleepInfo objects to key off some user feedback
            sleep in the GUI/Console/Etc.
            
            E.G: 
            	new SleepInfo("Waiting for server", 15 * 1000);
            	
            	This will sleep for 15 seconds while providing some progress
            	feedback to the user.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.SleepInfo.#ctor(System.String,System.UInt32)">
            <summary>
            Create new sleep info object, this will auto-induce sleep.
            </summary>
            <param name="title">Title of the feedback widget</param>
            <param name="millis">Milliseconds to sleep</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProgressInfo">
            <summary>
            ProgressInfo object provide fine grained control over
            the display of an elapsed task. 
            
            E.G.: 
            
            	ProgressInfo progress = new ProgressInfo("Creating objects", 100, 1);
            	
            	for(int i = 0; i &lt; 100; ++i)
            	{
            		progress.Step();
            	}
            	
            	If you are unsure of if your progress is finished you should call Finish()
            	to ensure that the progress handle is cleaned up internally.
            	
            	If you step up to or over the maximum value the progress info handle will 
            	be automatically cleaned up.
            	
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Create a new progress info feedback object.
            </summary>
            <param name="title">Title as it should appear to the user</param>
            <param name="total">Total number of items before completion</param>
            <param name="step">Ammount to step per call to Step()</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.SetMessage(System.String)">
            <summary>
            Change the user visible message.
            </summary>
            <param name="message">Message as it should appear to the user</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.Step">
            <summary>
            Step one 'Step' unit. See the constructor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.UnStep">
            <summary>
            Step back one 'Step' unit. See the constructor.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.SetValue(System.UInt32)">
            <summary>
            Explicitly change the internal value.
            </summary>
            <param name="newValue">New value of progress</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProgressInfo.Finish">
            <summary>
            Move Value to Maximum and cleanup the progress indicator.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProgressFeedbackHandle">
            <summary>
            Feedback Handles are used by the concrete class to implement 
            user visible feedback however the user interface sees fit.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.FeedbackHandleFactory">
            <summary>
            The abstract factory is set on the manager (also a factory) to hand
            out new progress feedback handles. These will be handed out to new instances
            of the feedback info classes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServerTestFramework.Utilities.FeedbackManager" -->
        <member name="M:ServerTestFramework.Utilities.FeedbackManager.SetFactory(ServerTestFramework.Utilities.FeedbackHandleFactory)">
            <summary>
            Set the internal factory. This class acts as a proxy container
            for that factory.
            </summary>
            <param name="factory">Factory to hand out feedback handles</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.FeedbackManager.CreateProgressFeedback(System.String)">
            <summary>
            Create a new progress feedback handles for talking to the user interface.
            </summary>
            <param name="title">User-visible title of the feedback</param>
            <returns>New feedback handle</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.FeedbackManager.ReleaseProgressFeedback(ServerTestFramework.Utilities.ProgressFeedbackHandle)">
            <summary>
            Release a progress feedback handle to the user interface.
            </summary>
            <param name="handle">Handle that was created with CreateProgressFeedback() on the manager</param>
        </member>
        <member name="P:ServerTestFramework.Utilities.FeedbackManager.Instance">
            <summary>
            Access the global instance of the feedback manager.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.NullProgressFeedbackHandle">
            <summary>
            The default class in case you try to use the ProgressInfo without 
            setting a factory, which seems to happen for certain calls within STF 
            when running outside STFRunner.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.NullFeedbackHandleFactory">
            <summary>
            The null factory for handing out null feedback handles. Does nothing.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.FileReportDestination.OutputLimitInBytes">
            <summary> After this many bytes have been written to the file, an error will be written to the file and logging will be stopped.  -1 means no limit. </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClientException">
            <summary>
            An exception thrown by the HttpClient class.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClientException.#ctor">
            <summary>
            An exception thrown by the HttpClient class.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClientException.#ctor(System.String)">
            <summary>
            An exception thrown by the HttpClient class, with the given message.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient">
            <summary>
            A simple generic http client.
            Unlike .NET's wrapper, this does not guarentee that a built request is actually valid, making it useful for negative cases.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor">
            <summary>
            Creates the socket, used by other constructors.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.String,System.UInt16)">
            <summary>
            From a hostname/ip and port.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.String)">
            <summary>
            From a url (only the hostname and port are used).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Creates a client that points at the given IP endpoint.
            </summary>
            <param name="endpoint">The location to talk to.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            Creates a client using the given socket and IP endpoint.
            </summary>
            <param name="socket">The socket to use for the connection.</param>
            <param name="endpoint">The location to talk to.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendRequest(ServerTestFramework.Utilities.HttpClient.Request)">
            <summary>
            Sends a request to the server.
            If we aren't connected, it will attempt to connect.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.GetResponse">
            <summary>
            Receives and parses a single response from the server.  This call will block if required.
            If the request times out or not enough data to form a response comes back, returns null.
            </summary>
            <param name="parseBody">Whether a body should be parsed from the response.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.CheckForResponse(System.Boolean)">
            <summary>
            Checks a data blob to see if it contains a valid response.
            </summary>
            <param name="readBody">
            If true, read the body as specified by the Content-Length header; if false, do not.
            </param>
            <returns>The response if a valid one is found, or null if one is not.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.Connect">
            <summary>
            Connect the socket to the remote server if it is not.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendRequestAsync(ServerTestFramework.Utilities.HttpClient.Request)">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="request">The request to send.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendRequestAsync(System.Byte[])">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="request">The request to send.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.GetResponseAsync(System.Boolean,ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback)">
            <summary>
            Gets a response asynchrounously.
            </summary>
            <param name="readBody">If true, read the body of the response; if false, do not.</param>
            <param name="callback">Called when a response is received.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendReceiveAsync(ServerTestFramework.Utilities.HttpClient.Request,System.Boolean,ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback)">
            <summary>
            Sends and receives asynchrounously.
            </summary>
            <param name="request">The request to send.</param>
            <param name="readBody">If true, read the body of the response; if false, do not.</param>
            <param name="callback">Called when a response is received.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendReceiveAsync(System.Byte[],System.Boolean,ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback)">
            <summary>
            Sends and receives asynchrounously.
            </summary>
            <param name="request">The request to send.</param>
            <param name="readBody">If true, read the body of the response; if false, do not.</param>
            <param name="callback">Called when a response is received.</param>
        </member>
        <member name="F:ServerTestFramework.Utilities.HttpClient._connect_sync">
            <summary>
            Used to keep any other threads from calling BeginConnect while we are waiting to connect.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ConnectAsync(ServerTestFramework.Utilities.HttpClient.AsyncState)">
            <summary>
            Begins the connect.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ConnectAsyncComplete(System.IAsyncResult)">
            <summary>
            Ends the connect.
            </summary>
            <param name="result">The result passed in.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendAsync(ServerTestFramework.Utilities.HttpClient.AsyncState)">
            <summary>
            Begins the send.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.SendAsyncComplete(System.IAsyncResult)">
            <summary>
            Ends the send.
            </summary>
            <param name="result">The result passed in.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ReceiveAsync(ServerTestFramework.Utilities.HttpClient.AsyncState)">
            <summary>
            Begins the receive.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.ReceiveAsyncComplete(System.IAsyncResult)">
            <summary>
            Ends the receive.
            </summary>
            <param name="result">The result passed in.</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.Request">
            <summary>
            Used to build a request to the server.
            Any field set to null will not be included in the request.
            Each field is seperated by \r\n.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.HttpClient.Request.GetHeaderString">
            <summary>
            Constructs the header string.
            </summary>
            <returns>The header string.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.Response">
            <summary>
            Used to return the response from a server.
            If a field is null, it means there was no response for it.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.HttpClient.Response.Exception">
            <summary>An exception thrown when attempting to retrieve this response.</summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.AsyncResponseCallback">
            <summary>
            Called when a response is received asynchronously.
            </summary>
            <param name="response">The response that was received, or null if timed out.</param>
        </member>
        <member name="T:ServerTestFramework.Utilities.HttpClient.AsyncState">
            <summary>
            The state object passed between the async calls.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.IOCPSocket">
            <summary>
            Summary description for IOCP.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.IpHelper.GetBestInterface(System.Net.IPAddress)">
            <summary>
            Determines the interface out which packets will be routed, given a destination address.
            </summary>
            <param name="destAddr">The destination address to route.</param>
            <returns>The IPAddress of the interface chosen as the routing target.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.IpHelperException">
            <summary>
            An exception that is thrown by the IpHelper class.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.LocalInterface">
            <summary>
            Helper methods for LocalInterface.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.LocalInterface.GetBestMatch(System.Net.IPEndPoint,System.Net.IPAddress@)">
            <summary>
            This is where we attempt to divine which of our IPs (many clients are multihomed) the server will attempt to communicate with us on.
            </summary>
            <param name="localIp"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.LocalInterface.GetBestMatchByConnecting(System.Net.IPEndPoint,System.Net.IPAddress@)">
            <summary>
            This is where we attempt to divine which of our IPs (many clients are multihomed) the server will attempt to communicate with us on.
            </summary>
            <param name="localIp"></param>
            <returns></returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.MemoryReportDestination">
            <summary>
            Used to just keep track of loglines in memory, on a List of ReportLine objects.
            </summary>
        </member>
        <member name="T:MemoryMappedFile.MMF">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.MultiEnumerator`1">
            <summary>
            An enumerator for enumerating over multiple enumerators simultaneously.
            </summary>
            <typeparam name="T">The type of values over which the base enumerators enumerate.</typeparam>
        </member>
        <member name="F:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerables">
            <summary>Our Enumerables.</summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Creates a MultiEnumerator from the given IEnumerables.
            </summary>
            <param name="enumerables">The IEnumerables to enumerate.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Creates a MultiEnumerator from the given IEnumerables.
            </summary>
            <param name="enumerables">The IEnumerables to enumerate.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.GetEnumerator">
            <summary>
            Creates an enumerator for this MultiEnumerator.
            </summary>
            <returns>An enumerator for this MultiEnumerator.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an enumerator for this MultiEnumerator.
            </summary>
            <returns>An enumerator for this MultiEnumerator.</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.MultiEnumerator`1.Entry">
            <summary>
            A single value from an enumerable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Entry.Value">
            <summary>The value from the enumerable.</summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Entry.Valid">
            <summary>If true, the Value is valid. If false, it is not.</summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator">
            <summary>
            The Enumerator for a MultiEnumerator.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Enumerators">
            <summary>The enumerators to enumerate over.</summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.CurrentValue">
            <summary>The current value of the enumerator.</summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Creates an Enumerator for the given enumerables.
            </summary>
            <param name="enumerables">The enumerables to enumerate over.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Dispose">
            <summary>
            Disposes the enumerator.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next value.
            </summary>
            <returns>True if there is a value; false if the end of the list has been reached.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.Current">
            <summary>
            The current value of the enumerator.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.MultiEnumerator`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current value of the enumerator.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProcessWrapper">
            <summary>
            Provides a way to run a process and capture it's output.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ProcessWrapper.Run(System.String)">
            <summary>
            Method to run the process with the specified arguments.
            </summary>
            <param name="arguments">The command line arguments to send to the process.</param>
            <returns>The return code from the process.</returns>
            <remarks>
            The following exceptions can be thrown by this method:
                   ArgumentNullException        If the arguments string is null.
                   ProcessException            If the timeout expired waiting for the process to finish.
                   
            These exceptions can be thrown from the Process.Start method:
                   InvalidOperationException
                   Win32Exception
                   ObjectDisposedException
            </remarks>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.ProcessName">
            <summary>
            Gets or sets the friendly name of the process.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.ExecutablePath">
            <summary>
            Gets or sets the fully-qualified path to the process executable.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.WorkingDirectory">
            <summary>
            Gets or sets the name of the working directory.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.ExecutionTimeout">
            <summary>
            Gets or sets the number of seconds to allow the process to run before abandoning it. Default is 120.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.Output">
            <summary>
            Gets the text written by the running process to the Standard Output stream.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.ProcessWrapper.Error">
            <summary>
            Gets the text written by the running process to the Standard Error stream.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.ProcessOutputReader">
            <summary>
            Thread procedure wrapper that allows data to be passed in and out of the procedure.
            Used to read process output.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.PuidPool">
            <summary>
            A static accessor class for the service defined pre-allocated puid pools.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.PuidPool.Type">
            <summary>
            Define your own puid pool enum here if you want to allocate a specific
            type of puid.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Core.Utilities.RandomEx">
            <summary>
            Summary description for Random.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomString(System.Int32)">
            <summary>
            Generates a random ASCII string
            </summary>
            <param name="MaxLength">Length of string to generate</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomString(System.String,System.Int32)">
            <summary>
            Like GenerateRandomString, but with specified prefix.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomNameString(System.Int32)">
            <summary>
            Unlike GenerateRandomString, there is no prefix with this version.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomUTFString(System.Int32)">
            <summary>
            Generates a random UTF string
            </summary>
            <param name="MaxLength">Length of string to generate</param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomUpperAlphaNumericString(System.Int32)">
            <summary>
            Generates a random string comprised of upper case characters and numbers.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomUpperAlphaNumericString(System.Int32,System.Int32)">
            <summary>
            Generates a random string comprised of upper case characters and numbers.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomAlphaNumericString(System.Int32,System.Int32)">
            <summary>
            Generates a random string comprised of lower and upper case characters and numbers.
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateTotallyRandomString(System.Int32)">
            <summary>
            This will generate, like, a totally, like, random string, dude.
            
            The entire string is composed of chars in the 32..255 range
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateNumberString(System.Int32)">
            <summary>
            This will generate number strings (0,1,2,....9).
            The entire string is composed of chars in the 48 - 57 range
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateHexString(System.Int32)">
            <summary>
            This will generate hex strings (0,1,2,....e,f) with a prepended 0x
            </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateIPString">
            <summary>
            Generates a random IP address in human readable dotted form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.GenerateRandomBlob(System.Int32)">
            <summary>
            This will generate a random blob of bytes ranging from 0x0-0xff
            </summary>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.RandomEx.NextLog">
            <summary>
            Returns an Int32 that logarithmically tends towards 0
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Collections.Generic.List{System.Type},System.Reflection.Assembly,System.Type)">
            <summary>
            Uses the information passed in to build a list of all the types derived 
            from the baseType within a specific assembly
            </summary>
            <param name="list">The list to add the Types to.</param>
            <param name="asm">The assembly to search through.</param>
            <param name="baseType">The base type you want derived types from.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            Finds all types derived from baseType within the specified assembly.
            </summary>
            <param name="asm">The assembly to search through.</param>
            <param name="baseType">The base type you want derived types from.</param>
            <returns>A list of the types.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Type)">
            <summary>
            Finds all typed derived from baseType in *ALL* assemblies
            </summary>
            <param name="baseType">The base type you want derived types from.</param>
            <returns>A list of the types.</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetDerivedTypes(System.Collections.Generic.List{System.Type},System.Type)">
            <summary>
            Finds all types derived from baseType and adds them to the specified List.
            </summary>
            <param name="list">The list to add the found types to.</param>
            <param name="baseType">The base type you want derived types for.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.ReflectionUtils.GetNestedTypesInInheritanceTree(System.Type,System.Reflection.BindingFlags)">
            <summary> This calls System.Type.GetNestedTypes() on the origType and all base classes and returns the combined result. </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.RemoteReportDestination">
            <summary>
            This is a simple pass-through destination so that the destination and/or the report 
            object don't have to marshal their own parameters.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Runner.StfXmlDoc.FileIdentifierXPath">
            <summary>Path of the file identifier element.</summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StfXmlDoc.GetFileIdentifier(System.Xml.XmlDocument,System.String)">
            <summary>Gets the named file identifier XmlNode from a document.</summary>
        </member>
        <member name="M:ServerTestFramework.Runner.StfXmlDoc.TestForFileIdentifier(System.String)">
            <summary>
            Tests for the existence of a named file identifier element.
            </summary>
            <returns>True if the element exists; false otherwise.</returns>
        </member>
        <member name="M:ServerTestFramework.Runner.StfXmlDoc.ConditionalMerge(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Conditionally merges the given document, based on whether it has been merged before or not.
            A known element is used to tag the merge.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.StringUtils.MakeDeliminatorSeparatedList(System.Collections.IEnumerable,System.String,ServerTestFramework.Utilities.StringUtils.MakeDeliminatorSeparatedListStringer)">
            <summary> Builds a string separated by a deliminator for a list of items.  Uses the specified delegate to convert each object to a string </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.StringUtils.MakeDeliminatorSeparatedList(System.Collections.IEnumerable,System.String)">
            <summary>
            Builds a string separated by a deliminator for a list of items.  Each element in the list must be usefully convertable to a string.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.StringUtils.MakeCommaSeparatedList(System.Collections.IEnumerable)">
            <summary>
            Builds a string separated by commas for a list of items.  Each element in the list must be usefully convertable to a string.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.SubStatics">
            <summary>
            Used to make class variables class-static, as in each inherited subclass has it's own static instance of the class 
            variable.  Normally, when a field is static in a base class, all subclasses share one instance of this field.  
            Sometimes it is important that each subclass of a particular base class each have its own instance.
            
            To use:
               - Pick a field in a base class for which you want a static instance per sub class.
               - Add a [SubStatic] attribute to that field.
               - Call SubStatics.Initialize(this) in the constructor for the base class.
               
               If the constructor for this field type requires parameters, adjust them on the SubStaticAttribute.
               Example:
                 [SubStatic(ParameterTypes=new Type[] {typeof(int)}, Parameters=new object[] {2})]
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.SubStatics.Initialize(System.Object)">
            <summary>
            Initialize should be called in the constructor of any class that has SubStaticAttributes so that they are 
            actually initialized or set into the appropriate fields.
            </summary>
            <param name="target">A reference to the class containing fields with SubStaticAttributes.  Usually the "this" 
            keyword.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.SubStatics.GetStatic(System.Type,System.String)">
            <summary>
            Use this function to get a SubStatic from a class without having to create an instance of the class.
            </summary>
            <param name="owner">The type of the class that contains the SubStatic.</param>
            <param name="fieldName">The field name of the SubStatic item you are interested in.</param>
            <returns>The SubStatic instance for the supplied field</returns>
        </member>
        <member name="T:ServerTestFramework.Utilities.SubStaticAttribute">
            <summary>
            Add this attribute to a field to make it SubStatic.
            ParameterTypes and Parameters are nescessary to use when constructor for the SubStatic field has parameters
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.SubStaticAttribute.ParameterTypes">
            <summary>
            Array of the parameter types for the constructor of the SubStatic type.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.SubStaticAttribute.Parameters">
            <summary>
            Array of the parameters for the constructor of the SubStatic type.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TcpRelay">
            <summary>
            Listens for tcp connections on a port, and relays all that traffic to/from the destination.
            You must Dispose() this object when you are done with it, in order to kill the listener thread.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TcpRelay.AllowOnlyLocalHost">
            <summary>
            Prevent connections from anyone but ourself.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TcpRelay.Dispose">
            <summary>
            Shuts down the listener thread and connections.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TcpRelay.ProcessData(ServerTestFramework.Utilities.TcpRelay.Connection,System.Boolean,System.Byte[],System.Byte[]@)">
            <summary>
            Override this in order to alter the data before it is relayed from one side to the other.
            </summary>
            <param name="isRemoteTarget">If true, then the data being processed here is passing from the local side to the remote side.</param>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.Destination">
            <summary>
            The remote host to which traffic is relayed.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.RemotePort">
            <summary>
            The port on the remote host.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.LocalListenPort">
            <summary>
            The local port on which we listen for new connections.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TcpRelay.Verbose">
            <summary>
            Spew connections and relayed data.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TcpRelay.Connection">
            <summary>
            Represents a connection on which we are relaying data
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TextWriterReportBridge">
            <summary>
            Bridge between text writers and reporting system, used for rerouting console
            output into the report system
            </summary>
        </member>
        <member name="T:ServerTestFramework.Utilities.TimedQueue`1">
            <summary>
            A queue that will only return items placed in it after a certain amount of time has elapsed for that item.
            This queue is thread-safe.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.MinimumReuseTime">
            <summary>
            A object placed in the queue will never be returned until at least this amount of time has passed.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.MinimumQueueSize">
            <summary>
            Minumum number of objects to keep in the cache at any given time before any can be returned.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.MaximumQueueSize">
            <summary>
            Maximum number of entries to allow into the queue, after which more more are ignored.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Utilities.TimedQueue`1.UseCachedReadyList">
            <summary>
            Pre-caches a list of ready objects so they can be popped without a lock.
            The downside is if settings are changed, any objects in the cache that do not comply with the new settings will be returned.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TimedQueue`1.PopFront">
            <summary>
            Returns an object from the queue that is older than MinimumReuseTime.
            If no object is old enough, then null or 0 is returned.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.TimedQueue`1.PushBack(`0)">
            <summary>
            Adds an object to the queue.  Returns false if the queue was full.
            </summary>
        </member>
        <member name="P:ServerTestFramework.Utilities.TimedQueue`1.Count">
            <summary>
            Returns the number of objects in the queue.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.Timing.QueryPerformanceCounter">
            <summary>
            Gets the current value of the hardware performance counter.
            </summary>
            <returns>The current value of the counter.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceCounter returns false.</exception>
        </member>
        <member name="M:ServerTestFramework.Utilities.Timing.QueryPerformanceFrequency">
            <summary>
            Gets the frequency at which the hardware performance counter ticks.
            </summary>
            <returns>The frequency at which the counter ticks.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceFrequency returns false.</exception>
        </member>
        <member name="M:ServerTestFramework.Utilities.Timing.CalculatePerformanceDelta(System.Int64,System.Int64)">
            <summary>
            Calculates the time between two values of the performance counter, in seconds.
            </summary>
            <param name="start">The sample of the performance counter taken first.</param>
            <param name="end">The sample of the performance counter taken second.</param>
            <returns>The time between the two samples of the counter, in seconds.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceFrequency returns false.</exception>
        </member>
        <member name="P:ServerTestFramework.Utilities.Timing.PerformanceFrequency">
            <summary>
            The frequency at which the hardware performance counter ticks.
            </summary>
            <remarks>
            Returns the cached value.  Call QueryPerformanceFrequency() to requery the value from the system.
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown when the underlying call to QueryPerformanceFrequency returns false.</exception>
        </member>
        <member name="T:ServerTestFramework.Utilities.StopWatch">
            <summary>
            Summary description for Timers.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Core.Utilities.ValueCheck">
            <summary>
            Contains a large number of helper function for validating a variety of condtions
            such as whether two objects are equivalent, greater than, or less than, or if a 
            result is one of any possible valid results.  
            
            All the methods throw ExpectedValueCheckExceptions when the checks fail.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsTrue(System.Boolean,System.String)">
            <summary>
            Tests whether the given condition is true
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive message of the check being performed</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the given condition is true
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive format string of the check being performed</param>
            <param name="args">Parameters to be passed to the format</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsFalse(System.Boolean,System.String)">
            <summary>
            Tests whether the given condition is false
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive message of the check being performed</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the given condition is false
            </summary>
            <param name="cond">The condition to test</param>
            <param name="msg">A descriptive format string of the check being performed</param>
            <param name="args">Parameters to be passed to the format</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test``2(System.String,``0,``1)">
            <summary>
            Tests whether two objects of the same type are equivalent.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="exp">The expected value</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test(System.String,System.Byte[],System.Byte[])">
            <summary>
            Tests whether every byte in the two arrays is equivalent.
            </summary>
            <param name="msg">A dsecriptive message fo the check being performed</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.TimeSpan)">
            <summary>
            Verifies that the actual time is approximately equal to the expected 
            time within a given tolerance.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected time</param>
            <param name="got">The actual time</param>
            <param name="tolerance">The tolerance for a match</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.Test(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.TimeSpan)">
            <summary>
            Verifies that the actual timespan is approximately equal to the expected 
            time within a given tolerance.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected time</param>
            <param name="got">The actual time</param>
            <param name="tolerance">The tolerance for a match</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestDifferent``2(System.String,``0,``1)">
            <summary>
            Verifies that two objects of the same type are different.
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="exp">The value that should not be</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestDifferent(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.TimeSpan)">
            <summary> Verifies that the actual time is approximately not equal to the expected time within a given tolerance. </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected time</param>
            <param name="got">The actual time</param>
            <param name="tolerance">The tolerance for a match</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAll(System.String,System.Array,System.Array)">
            <summary>
            Checks that the arrays each array is the same length and that each 
            item in the arrays is the same.
            </summary>
            <param name="name">The name of the item that's being tested</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNotAll(System.String,System.Array,System.Array)">
            <summary> Checks that each array does not contain exactly the same set of elements (that they are different lengths or that at least one element is different). </summary>
            <param name="name">The name of the item that's being tested</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestSubset(System.String,System.Array,System.UInt32,System.Array,System.UInt32,System.UInt32)">
            <summary>
            Checks that the arrays each array is the same length and that each 
            item in the arrays is the same.
            </summary>
            <param name="name">The name of the item that's being tested</param>
            <param name="expected">The array of expected values</param>
            <param name="got">The array of actual values</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAny``1(System.String,``0[],``0)">
            <summary>
            Tests whether or not the actual value matches any of the expected values
            </summary>
            <typeparam name="T">The type of value to check</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="exp">The array of possible expected values</param>
            <param name="got">The actual result value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnordered``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnorderedComparison{``0},ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnorderedStringer{``0})">
            <summary> Validates that two unordered sets contain the same set of elements using a specific comparison function and a specific function to convert the object to a string. </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnordered``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnorderedComparison{``0})">
            <summary> Validates that two unordered sets contain the same set of elements using a specific comparison function. </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestAllUnordered``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary> Validates that two unordered sets contain the same set of elements. </summary>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestZero``1(System.String,``0)">
            <summary>
            Tests if the value is equal to it's default value.  For most numeric types, this
            is 0.  For reference types this is null.  For other value types it is default(Type)
            </summary>
            <typeparam name="T">The type of the value to check.  default(T) is used to compare</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="value">The value to check</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNonZero``1(System.String,``0)">
            <summary>
            Tests if the value is not equal to it's default value.  For most numeric types, this
            is 0.  For reference types this is null.  For other value types it is default(Type)
            </summary>
            <typeparam name="T">The type of the value to check.  default(T) is used to compare</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="value">The value to check</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.ContainsKey``2(System.String,System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Tests if a given dictionary contains a key within it. Useful for cases where an 
            item missing from a dictionary means we need to halt the test case.
            </summary>
            <typeparam name="T1">First type of the dictionary.</typeparam>
            <typeparam name="T2">Second type of the dictionary</typeparam>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="dict">The dictionary object.</param>
            <param name="key">Key to validate.</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestGreaterThan(System.String,System.IComparable,System.Object)">
            <summary>
            Tests whether the actual value is greater than the expected value
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected value to check against</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestLessThan(System.String,System.IComparable,System.Object)">
            <summary>
            Tests whether the actual value is less than the expected value
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The expected value to check against</param>
            <param name="got">The actual value</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNotNull(System.String,System.Object)">
            <summary>
            Tests whether the provided object is non-null
            </summary>
            <param name="name">The name of the object to test</param>
            <param name="o">The object to test</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestNull(System.String,System.Object)">
            <summary>
            Tests whether the provided object is null
            </summary>
            <param name="name">The name of the object to test</param>
            <param name="o">The object to test</param>
        </member>
        <member name="M:ServerTestFramework.Core.Utilities.ValueCheck.TestBits(System.String,System.UInt32,System.UInt32)">
            <summary>
            Validates that all of the expected bits are set in the actual value
            </summary>
            <param name="msg">A descriptive message of the check being performed</param>
            <param name="expected">The set of expected bits</param>
            <param name="got">The actual result bits</param>
            <remarks>
            It would be nice if this could be expanded to other numeric types, 
            but there's no easy way to provide a comprehensive suite of methods
            for all the different numeric types.
            </remarks>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlConfigFile.#ctor(System.String)">
            <summary>
            Constructor reads in the config file and determines the environment
            to run on based on the "environ" tag
            </summary>
            <param name="Filename">name of the config file</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlConfigFile.ReadNode(System.String)">
            <summary>
            Method used to read the needed data
            </summary>
            <param name="NodeName">name of the config file</param>
            <returns>The node's inner text</returns>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlConfigFile._Parse(System.String)">
            <summary>
            Searches the given string for following keywords and substitutes them:
             o %MACHINE% -- the user's machine
             o %USERNAME% -- the user's name
             o %USERDOMAIN% -- the user's domain
            </summary>
            <param name="InnerText"></param>
            <returns></returns>
        </member>
        <member name="P:ServerTestFramework.Utilities.XmlConfigFile.Item(System.String)">
            <summary>
            Accessor method used to read the needed data, it automatically takes care of
            reading from the right environment.  It's used like this:
            
            XmlConfigFile Config = new Config ("MyConfigFile.xml");
            string SomeSetting = Config["/Auth/Username"];
            
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetChildNodeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Sets a the value of a child node of a node.  If it does not exist it is created.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.SetAttributeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Sets an attribute value on a node.  If it does not exist it is created.
            </summary>
            <param name="node">The node to set on.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="val">The value to set.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Int64)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Gets a the value of a child node of a node, or a default value if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetChildNodeValue(System.Xml.XmlNode,System.String,System.Boolean@)">
            <summary>
            Gets the value of a child node of a node.
            Returns true if the value was found, false if it was not.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.Single)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Gets an attribute value on a node.  If it does not exist the default is returned.
            </summary>
            <param name="node">The node to get from.</param>
            <param name="name">The name of the attribute to get.</param>
            <param name="defaultValue">The default value to return if not found.</param>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetGroupNode(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the child node of a unique group node, or creates it if it does not exist.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Utilities.XmlUtil.GetGroupNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Retrieves the child node of a unique group node, or creates it if it does not exist.
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.loadedItems">
            <summary>
            These are the items that have been loaded and setup already
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.deferredItems">
            <summary>
            These are the items that were found but haven't been loaded yet
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.pluginParams">
            <summary>
            Command line parameters that are targetted at any plugins;
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.loadedModuleNames">
            <summary>
            Names of all modules that have already been loaded
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.loadedSuites">
            <summary>The TestNode roots that we have been notified of.</summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NotifyModuleLoading(System.String)">
            <summary>
            Called before a new module is loaded that might contain plugins or suites.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NotifySuiteLoaded(ServerTestFramework.TestNode)">
            <summary>
            Called after a suite is loaded.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NotifySuiteUnloading(ServerTestFramework.TestNode)">
            <summary>
            Called when a suite is being unloaded to tell the plugin to remove all references to it.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.UnloadAllPlugins">
            <summary>
            Called whenever the gui is wanting to close.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.LoadPluginFiles">
            <summary>
            Loads all configured plugins.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.LoadAllPluginsInAssembly(System.Reflection.Assembly)">
            <summary>
            Loads all plugins and other pluggable item types in an assembly
            </summary>
            <param name="asm">The assembly to load the types from</param>
            <returns>True if any plugin types were loaded, false otherwise</returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.QueuePlugin(System.Type,System.Reflection.Assembly)">
            <summary>
            Creates a PluggableItem from a type (if not already loaded) and adds
            it to the list of items to process.
            </summary>
            <param name="pluginType">The type of item to try to create with</param>
            <param name="asm">The assembly that contains the type</param>
            <returns>The instance of the pluggable item </returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.DebugMessage(System.String)">
            <summary>
            Outputs debug spec during plugin loading.  Only occurs if 
            DEBUG_PLUGIN_LOADING is enabled.
            </summary>
            <param name="s">The debug string to output</param>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.GetDefaultPluginsList">
            <summary>
            Override to generate a list of default plugins that should be loaded.
            Only called when no list is supplied by the settings document.
            </summary>
            <returns>A list of plugin file names.</returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.NewPluggableItem">
            <summary>
            Override to make your own PluggableItem.
            </summary>
            <returns>A new PluggableItem.</returns>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PreProcessPluggable(ServerTestFramework.Plugins.PluginHandler.PluggableItem)">
            <summary>
            Override to do some work on the PluggableItem before the base handler.
            </summary>
            <param name="item">The PluggableItem to process.</param>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PostSetupProcessPluggable(ServerTestFramework.Plugins.PluginHandler.PluggableItem)">
            <summary>
            Override to do some work on the PluggableItem after the IPluginSetup function is handled.
            </summary>
            <param name="item">The PluggableItem to process.</param>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PostProcessPluggable(ServerTestFramework.Plugins.PluginHandler.PluggableItem)">
            <summary>
            Override to do some work on the PluggableItem after the base handler.
            </summary>
            <param name="item">The PluggableItem to process.</param>
        </member>
        <member name="T:ServerTestFramework.Plugins.PluginHandler.PluggableItem">
            <summary>
            A wrapper around a pluggable item that allows you to find out 
            information about what type of item it is
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginSetup">
            <summary>
            The item respreseted by this pluggable object as an IPluginSetup
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginExtension">
            <summary>
            The item represented by this pluggable object as an IPluginExtension
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginExt``1">
            <summary>
            Returns the pluggable item as a PluginExtension of the requested
            type.  This is required to be a method because the the parameter
            is generic and there is no way to make a generic property
            </summary>
            <typeparam name="PluginType">The type of plugin that this extension extends</typeparam>
            <returns>The item respreseted by this pluggable object as an IPluginExtension</returns>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.AsIPluginModuleLoadNotification">
            <summary>
            The item respreseted by this pluggable object as an IPluginModuleLoadNotification
            </summary>
        </member>
        <member name="F:ServerTestFramework.Plugins.PluginHandler.PluggableItem.DidInit">
            <summary>
            Indicates if IPluginSetup.Initialize has been called yet
            </summary>
        </member>
        <member name="P:ServerTestFramework.Plugins.PluginHandler.PluggableItem.Item">
            <summary>
            Represents the instance of the actual item.  An instance of a 
            class that derives from something we're interested in like 
            Plugin, IPluginPreferences, etc. (defined in Plugins.cs)
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPlugin">
            <summary>
            Implement this to add new components or functionality.
            Only one instance of the class will ever be instantiated.  Ever.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginExtension">
            <summary>
            Do not implement this, this is used to easily determine if a class 
            extends from the generic IPluginExtension interface.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginExtension`1">
            <summary>
            Implement this to extend an existing plugin.  The derived class will 
            only be instantiated if one of the the plugins it extends is loaded.
            Only one instance of a derived class will ever be instantiated (even if
            a class extends multiple plugins).
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginExtension`1.PluginLoaded(`0)">
            <summary>
            This will be called to inform the extension of the existance of a
            plugin that it extends.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginSetup">
            <summary>
            Implement this if you require setup and cleanup steps for your plugin or
            extension, including the ability to save/restore global settings.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginSetup.Initialize(System.Xml.XmlNode,System.String[])">
            <summary>
            This will be called after the gui loads, as soon as the class is 
            instantiated. Settings can be loaded from the provided xml object.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginSetup.Shutdown(System.Xml.XmlNode)">
            <summary>
            This will be called when the gui is about to close down.
            Settings can be stored in the provided xml object.
            </summary>
        </member>
        <member name="T:ServerTestFramework.Plugins.IPluginModuleLoadNotification">
            <summary>
            Implement this if you require notifications when a module is about to be
            loaded or after a new suite is loaded from a module.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginModuleLoadNotification.ModuleLoading(System.String)">
            <summary>
            This is called when a module(which may contain suites or plugins) is
            about to be loaded.  When a plugin is initially created, and already
            loaded modules will also be passed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginModuleLoadNotification.SuiteLoaded(ServerTestFramework.TestNode)">
            <summary>
            This is called after a new suite is loaded from a module.  You will
            be passed the already-constructed tree.  When a plugin is initially
            created, and already-loaded suites will also be passed.
            </summary>
        </member>
        <member name="M:ServerTestFramework.Plugins.IPluginModuleLoadNotification.SuiteUnloading(ServerTestFramework.TestNode)">
            <summary> This is called when a suite is being unloaded. </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ReportingTest\ModifySSISDB\user.txt ===
2533274797650293
2533274802337888
2533274802337888
2533274801956148
2533274795995123
2572145144346683
2533274802295423
2729637095594443
2533274800970553
2769847806539343
2533274796414543
2533274796418478
2533274801454838
2533274796265258
2533274801458058
2619057640462873
2533274797931063
2533274796251433
2533274798843788
2533274797291388
2533274800291253
2533274796832918
2533274797850793
2533274797907958
2533274797907958
2650556030707618
2533274799144863
2657927994380453
2533274799976308
2533274799770133
2533274792152418
2533274793741713
2533274800708728
2533274802110368
2533274799476463
2533274800695893
2533274801510353
2533274792367703
2533274793787063
2769847806539343
2533274799630093
2757784593253133
2533274800273173
2533274802337863
2533274802337863
2533274799035313
2533274799004718
2533274800750108
2533274801916993
2533274797900788
2533274797033018
2769847806539343
2533274798658733
2533274794203723
2533274800084098
2533274791937438
2533274800680908
2533274794467583
2533274792767798
2533274797551798
2649215673666138
2714893168235188
2533274796469313
2533274800626253
2533274802114498
2533274793094763
2691436920168458
2706851026041363
2533274800171508
2561422288090873
2649215673683033
2533274796530588
2612355855290638
2533274797652828
2533274795541933
2533274798054228
2533274799983598
2533274800657083
2533274802038203
2533274796602553
2533274800431008
2533274801520013
2680043885414443
2533274797057923
2533274801804283
2561422288089288
2533274800626858
2533274794362668
2533274796538798
2533274800612788
2709531740115658
2533274801700313
2770517985055543
2793974233118588
2533274802156903
2774539056162778
2533274796119333
2533274801538268
2533274799293853
2533274792462318
2533274800979763
2533274800227858
2533274799050628
2533274795385668
2533274802202768
2558741574004798
2533274796359938
2533274797555118
2533274795937623
2533274800526688
2533274800483523
2533274792338948
2533274799875338
2533274800663773
2611015498257698
2533274800173473
2533274801686813
2533274800328788
2533274800346913
2606324248649513
2533274800330213
2533274799843918
2763816199913428
2554720502920483
2808718160474338
2533274798758308
2533274796796473
2533274800878763
2533274799050373
2675352635809973
2775879413180153
2533274794702173
2533274800171508
2533274800171508
2701489597920878
2533274797133958
2533274797992263
2533274801381053
2533274800128398
2533274796236658
2683394777975613
2533274800903908
2533274799642953
2533274801243528
2533274801295178
2560081931059758
2533274800053833
2533274797555118
2533274797555118
2533274800849208
2533274797861343
2533274798955253
2533274800268888
2533274799073463
2533274799437233
2533274797342203
2688756206103143
2533274794857078
2533274802052018
2753763522164598
2533274801432693
2533274792871228
2533274802034868
2533274798701683
2533274798388533
2533274800036588
2533274801560103
2533274802145163
2533274795065998
2533274797808248
2533274792678858
2533274798301223
2533274802115238
2533274796568588
2533274798334608
2533274801406578
2533274801811188
2533274800446313
2533274792099798
2533274793966648
2533274797591963
2533274797388913
2533274801131243
2787272447972828
2533274801485043
2533274793727058
2533274800667303
2533274795349848
2533274801272558
2533274795830563
2533274797972463
2533274802084218
2600962820523813
2533274796515443
2747061737004083
2533274802221633
2533274802010418
2547348539239948
2533274796334983
2533274798287593
2533274800303123
2580857465037868
2533274792098013
2533274801375928
2533274801445858
2533274801848438
2533274796912693
2533274802149483
2533274795227153
2533274802086928
2726286202998498
2533274799715018
2533274799579778
2533274800498093
2533274801193463
2533274795590468
2533274802304603
2533274801153018
2533274794437523
2533274794661953
2566113537691743
2533274796209008
2533274799902633
2533274801043523
2533274801927443
2533274800856113
2533274800468528
2533274800507263
2674682457268493
2533274792347943
2533274793404183
2533274801365323
2533274797557553
2533274801062528
2533274802282603
2533274796068518
2533274800290893
2533274802254453
2533274800054448
2533274793645043
2533274794697283
2533274801194078
2533274794344293
2533274802336003
2533274802050198
2533274801700313
2533274800499523
2750412629587203
2533274797845303
2533274802338813
2533274802130693
2533274802180078
2533274802059463
2533274802235053
2533274801487283
2533274792294038
2533274798833208
2533274795650223
2533274801451853
2533274795189108
2533274800358693
2533274801709923
2533274794775213
2737679237785698
2533274801982558
2533274794776548
2533274796209008
2533274796209008
2674682457277693
2533274801437178
2805367267898738
2580857465043143
2533274793271218
2533274802235828
2570134608779688
2533274795458468
2533274797031043
2555390681446063
2533274794774723
2533274797427153
2533274799497483
2533274802247148
2533274800365218
2533274797185098
2533274795652928
2533274800295113
2720254596374393
2533274794899348
2533274796414543
2533274799937263
2533274799358823
2533274800527943
2533274802337863
2533274802130693
2533274802130693
2533274795839578
2533274797823283
2533274800460633
2533274797481198
2533274798200978
2533274793934568
2533274800017868
2699479062381458
2787272447972703
2533274794865288
2808047981959138
2533274795497783
2792633876090913
2533274794670443
2686745670566053
2533274801808193
2533274797599073
2533274799731438
2533274802298268
2533274795470668
2533274795246758
2533274801295178
2533274793655223
2533274794932708
2533274800488618
2533274792402718
2533274800493063
2533274794347858
2533274799317043
2533274801895158
2533274797185098
2533274797185098
2533274800967108
2660608708444048
2533274802124108
2669991207663808
2533274801918583
2533274800906633
2533274802277088
2533274799700148
2715563346751088
2533274801695083
2533274800901823
2533274802212853
2533274797467978
2533274799136398
2533274797357763
2533274794970988
2533274802298283
2533274796670703
2533274796030558
2533274800673633
2808047981967163
2533274793001793
2533274796998723
2533274799291718
2533274793721603
2668650850627753
2533274802335548
2647205138133878
2533274801191968
2533274802104648
2533274802217268
2533274795227153
2533274800017868
2533274800017868
2533274802318533
2533274796118933
2533274798681698
2648545495148728
2533274798766823
2533274797407528
2533274798355143
2533274801919403
2533274798919543
2533274795701313
2533274794187278
2533274796797688
2533274800053833
2569464430266318
2533274798037138
2533274793276753
2533274797850238
2533274794393748
2533274795803428
2533274798663733
2533274800366178
2533274796110088
2533274802327608
2533274798480543
2533274801884413
2533274800907663
2533274794124258
2533274798113288
2533274799606873
2533274801224863
2603643534586613
2674682457284093
2533274791801498
2533274801860498
2533274800786843
2533274801429813
2533274802287323
2533274794362403
2533274799014623
2533274802013888
2533274802241658
2533274798667143
2533274800752008
2763146021386558
2533274801032903
2533274800056513
2533274800077418
2533274797638513
2533274801670483
2533274794237828
2533274800443728
2533274798569073
2533274799284108
2533274802217268
2533274802217268
2587559250195243
2533274800548828
2533274794046733
2533274802175853
2533274798016723
2533274800383178
2795314590145128
2533274800925813
2757784593250343
2533274800171508
2533274797965003
2533274800462848
2533274793238828
2533274800112438
2533274797792903
2533274799667853
2533274800055743
2533274800208873
2533274800768793
2617717283423693
2533274802003118
2533274796914693
2533274800306653
2533274801003573
2533274799514568
2533274795851508
2795314590166528
2533274800682073
2533274792681568
2533274801884318
2533274797247228
2533274801089723
2533274796910053
2533274796198708
2533274798795363
2533274795570378
2570804787312753
2533274800371938
2533274802304903
2533274792639678
2533274794560283
2533274793414898
2533274797171088
2533274799897668
2533274797358798
2533274801634618
2533274793585178
2533274802306833
2533274802273683
2533274796182478
2533274799736268
2533274797184158
2533274795959568
2533274800199908
2533274794653698
2533274800774148
2533274796358828
2533274793092278
2745721379966038
2667980672107353
2533274801785188
2533274794374883
2533274801991713
2533274795458468
2533274800535838
2533274801766158
2533274801912338
2533274802237918
2533274797277518
2533274802130693
2533274801878103
2533274802337428
2533274799431883
2533274802157698
2533274794414468
2533274801589568
2533274801761138
2533274800966378
2533274797133718
2533274800507783
2533274800898258
2763816199892373
2533274796358828
2533274796358828
2533274794836613
2533274802125028
2533274799451838
2572815322852143
2533274793138843
2533274800617513
2533274802230988
2533274799881573
2533274800786268
2533274796371223
2533274797145098
2533274799027163
2533274800680533
2533274801992208
2533274792910728
2533274801161648
2686745670562188
2533274796776953
2533274795644658
2533274795803528
2533274801830038
2533274800018743
2533274802189293
2533274793219208
2533274798477103
2533274801019293
2533274799291718
2533274799291718
2533274801471713
2533274802104878
2533274797831768
2533274799410318
2533274800534258
2533274797863423
2533274792083148
2533274802198113
2533274802054793
2533274802160273
2533274794239108
2533274801279733
2533274799360078
2533274802104648
2533274794049648
2533274797060748
2533274801920128
2533274796371223
2649215673683033
2533274796244633
2533274794266908
2533274792905458
2533274800778188
2533274801361708
2533274802167463
2804026910866298
2533274796371223
2533274800073028
2533274801955878
2533274798795363
2533274798795363
2533274802063863
2533274796500778
2533274793595943
2540646754087053
2533274799761238
2533274795676888
2533274796963468
2533274802189293
2533274802189293
2533274802189293
2533274800467488
2533274798696828
2533274801870218
2533274794405963
2533274795576123
2533274794400083
2533274796359938
2533274794335308
2533274798161148
2533274801258058
2533274800914883
2533274801073243
2533274792766918
2533274795208058
2533274797778193
2533274798870828
2533274800964098
2533274792683628
2586889071682868
2533274800121783
2674682457277373
2533274797830168
2533274797423003
2533274795678448
2649215673666158
2533274802167463
2533274800129838
2533274794472723
2533274802305393
2533274802167463
2533274791779318
2533274795067043
2533274795985733
2741700308881733
2533274801441073
2645864781090103
2533274795979263
2644524424066068
2533274795949458
2533274801912338
2639833174438463
2533274796065853
2533274799984348
2763146021387338
2533274797850633
2533274802063363
2533274797302463
2533274792677908
2533274799536453
2533274799771183
2533274802298283
2533274800156568
2533274799990298
2533274799144863
2533274802007073
2533274797060433
2561422288094868
2533274793095543
2533274802337243
2533274795005298
2533274802037518
2533274796914693
2533274796914693
2533274796965403
2533274798795168
2533274797440778
2533274798009013
2533274801294918
2533274799014953
2533274799280148
2533274800371938
2533274800371938
2533274800898258
2533274800898258
2533274801470838
2541316932610868
2548018717749873
2533274802331763
2533274800064268
2533274802301018
2533274798479993
2533274792691903
2533274800312318
2623748890073268
2533274797974813
2533274798122928
2533274798205668
2533274792155263
2533274798228838
2533274793655553
2781911019842253
2533274799275278
2533274798883838
2533274802102648
2533274802007073
2533274802007073
2604983891610743
2802016375307948
2533274801895158
2810058517501358
2814079588608678
2533274792310403
2533274794703308
2533274796623028
2533274801131243
2533274802126188
2533274792814773
2533274800521238
2533274796506788
2533274802112593
2533274802015338
2533274792824643
2533274797151213
2533274791938533
2533274795093853
2533274792996903
2533274795792948
2533274801500338
2533274799377773
2533274796870308
2533274797766748
2544667825169638
2533274799936223
2533274798139838
2533274801020028
2797325125691838
2606994427161433
2533274802289658
2533274793334723
2533274802234918
2533274797998313
2533274799339548
2533274801637108
2533274791760193
2533274794770843
2533274796915183
2533274798195278
2533274793505368
2533274795246758
2533274801811188
2533274793237333
2533274802104648
2533274793550748
2533274799235688
2533274799260978
2533274800518478
2533274801487283
2533274794567568
2533274794762348
2533274798709408
2533274802165978
2533274802317218
2533274796815533
2533274795253768
2533274792272418
2533274798109823
2533274793211278
2533274802121638
2533274795942718
2596271570903993
2533274794991033
2533274801667593
2533274793691913
2533274795854323
2533274793402778
2667980672124738
2639833174455818
2533274794665023
2533274793102028
2533274800794908
2533274792841178
2533274797237568
2533274801546933
2557401216989588
2533274802149103
2533274802338803
2753763522169843
2533274792074933
2533274798952563
2719584417849673
2533274800431008
2533274801670313
2604313713122378
2533274802251873
2749742451071688
2533274801199753
2533274795655383
2533274799715018
2724275667472288
2533274799991403
2533274801656823
2533274795980823
2533274797375968
2533274801993068
2533274792770093
2533274798951713
2533274797026718
2533274794423128
2533274792318203
2808047981967163
2533274798676913
2793304054609108
2533274794319528
2533274793819318
2533274796663488
2533274801449848
2533274800034723
2533274800032833
2648545495160308
2533274792110683
2533274797599073
2533274797599073
2533274800412173
2684735135020063
2533274794101543
2599622463483403
2533274793966113
2533274800869143
2533274800183668
2533274794235383
2533274802248293
2533274801294918
2533274801294918
2533274802213398
2603643534594578
2533274800100413
2633801567794043
2533274794398458
2533274801369478
2533274795987263
2533274796994563
2533274801354978
2533274802180078
2701489597919408
2533274794344293
2533274799689093
2533274801452048
2533274802149503
2533274802337263
2533274802224023
2533274799909838
2533274797211943
2533274793567783
2533274795832393
2533274799022918
2533274801951698
2533274798951713
2533274801310353
2533274796650238
2533274802274313
2533274800600378
2741700308881548
2533274801369478
2533274801369478
2533274801598518
2533274795339998
2533274799408283
2533274797470518
2734328345201408
2749742451060298
2533274792777433
2533274793594618
2566783716216953
2533274795672633
2533274802337863
2653906923288333
2533274797591303
2533274799662178
2533274801680713
2533274796544533
2533274798328943
2533274794244218
2533274795943963
2533274801348218
2533274801857703
2533274801984613
2533274793288863
2533274799698418
2691436920187803
2533274795719173
2533274799617503
2533274801808193
2533274794286268
2533274799407438
2533274793594618
2533274793594618
2533274801575128
2533274796418033
2687415849091658
2647205138132068
2533274793325413
2788612805004313
2533274797053548
2582197822075808
2533274793444333
2533274797666073
2533274802331763
2533274802331763
2654577101797783
2533274801493418
2533274792807713
2533274800328788
2561422288094868
2561422288094868
2715563346745893
2533274799280148
2533274800345073
2533274797766748
2533274796680203
2533274800534258
2533274800534258
2636482281869313
2533274793556793
2533274799537328
2533274798478148
2533274802047523
2533274800910828
2533274798807628
2550029253304483
2533274800665258
2533274801834638
2629110318185018
2533274801776713
2533274802094538
2533274795067043
2533274801195783
2533274796995363
2533274800169893
2533274800856113
2533274795629478
2533274796544533
2533274797320483
2533274800064323
2787272447963153
2533274798603288
2657257815868688
2698808883843868
2533274796439668
2533274800692778
2533274794161908
2533274800430853
2533274798289633
2533274797726938
2533274795987263
2533274797773343
2533274800260643
2533274792946373
2533274799671848
2533274802307848
2533274801344513
2533274794858218
2533274802213398
2533274802241658
2533274802241658
2533274794852923
2533274800491503
2533274797447433
2533274794858608
2533274796054483
2533274799087883
2533274798028448
2533274792683628
2533274796492388
2564103002132588
2533274801921843
2533274797366758
2533274799410318
2533274792834293
2533274802251873
2533274794482408
2533274796598473
2533274796857593
2533274801673413
2533274800421168
2533274795930348
2533274798486118
2533274802339088
2533274798360588
2533274800282058
2617047104909983
2533274797447433
2533274797447433
2533274798016723
2533274794559858
2533274796293968
2533274797393568
2643184067036848
2533274793607073
2533274800055743
2533274792855783
2533274800789213
2533274794884578
2533274802222183
2533274800274128
2636482281876428
2533274793585638
2533274794639203
2533274796666443
2736338880747398
2533274792834293
2533274795995323
2533274799832243
2533274798100873
2533274799502028
2723605488940518
2533274794820218
2613696212319778
2642513888506488
2533274799238783
2533274801003573
2533274793270458
2533274793773143
2686745670566053
2533274795576798
2533274800655448
2533274801040338
2533274798800313
2533274802136873
2533274797676898
2533274801453453
2533274792626318
2533274799082378
2533274799991748
2591580321306718
2533274796119333
2533274792834293
2533274793531198
2533274799116978
2533274794628908
2533274794858218
2533274794858218
2533274801304698
2533274795514878
2533274797302463
2533274800582698
2533274802122748
2533274798961513
2533274795434988
2641843709986738
2533274798801923
2533274799086578
2736338880747398
2736338880747398
2576166215428928
2533274798993688
2533274799802328
2533274798816623
2533274802224023
2533274802339318
2636482281869313
2533274794237828
2533274796170493
2533274791749838
2533274801497008
2533274800540338
2533274800417068
2533274801592278
2533274802081263
2533274802136873
2533274802136873
2672001743210768
2533274802338628
2533274799367608
2533274795423888
2533274797488243
2533274801098573
2533274801001888
2533274801458058
2533274802132928
2533274800604728
2533274801586293
2586889071681793
2533274801012343
2533274793805968
2533274802071513
2533274796911478
2533274793222848
2533274795956983
2533274793292593
2533274794266153
2533274794887863
2533274793325413
2533274793325413
2533274793323448
2533274793590128
2533274798417358
2657257815868688
2657257815868688
2533274799096223
2533274797420598
2533274799333258
2727626560036503
2533274792822723
2533274797489453
2533274793605238
2533274794244218
2533274794244218
2533274800245773
2533274800935093
2533274797167268
2533274795466453
2533274797175623
2533274799276698
2533274798726893
2776549591699863
2548688896286533
2533274802176708
2533274799876178
2533274792138243
2792633876090913
2533274794511603
2533274796994618
2533274799106008
2533274793199798
2533274792669248
2533274801346378
2533274795236433
2533274797475183
2641843709986643
2533274793203058
2533274800282058
2533274802295053
2533274796411573
2533274801440783
2533274795801623
2533274793158353
2533274796035668
2728296738549663
2533274792511428
2533274800282058
2552709967359968
2533274796187378
2533274798937153
2533274802167463
2533274798079473
2533274801149128
2533274800345513
2533274797414338
2533274792680323
2533274797160133
2533274798745243
2533274802339323
2533274799005583
2533274801046763
2700149240896878
2611685676777493
2533274800518478
2533274801895158
2624419068579938
2533274797870663
2533274800417068
2533274800417068
2533274802021118
2533274802337833
2533274802048108
2533274801772128
2533274792375853
2533274802021118
2611685676781198
2533274799457833
2533274800486643
2533274792838328
2533274793774328
2533274802305838
2533274793292353
2533274801540013
2674682457277693
2533274792421518
2533274801456548
2533274795980733
2533274796524293
2533274801807093
2533274795722853
2533274801679353
2533274801273198
2533274799862408
2608334784193058
2533274799539388
2533274801895158
2533274801895158
2533274801140378
2533274802279028
2533274801759793
2533274801999053
2787272447962593
2533274800347478
2533274800416533
2533274792614898
2533274802196138
2533274799254948
2533274800525383
2775209234672123
2533274799443818
2533274795376068
2533274798947203
2533274800617563
2533274802213058
2617717283416063
2533274796797688
2533274792712303
2533274800538858
2533274795591563
2533274801193313
2533274801994488
2533274802329408
2533274793365998
2533274793158353
2533274793158353
2533274801842713
2533274802207678
2678033349849058
2533274793966113
2533274795423888
2533274795423888
2774539056166203
2686075492047628
2683394777975613
2533274800628873
2607664605680073
2542657289621078
2533274798053158
2533274802305808
2741700308881548
2533274800496738
2533274794654133
2533274799776913
2533274792375853
2533274792375853
2533274793850783
2533274798665238
2533274801741088
2533274792421518
2533274792421518
2814079588608678
2533274800776253
2700149240893743
2533274794500208
2533274794405963
2533274796998723
2533274796200053
2750412629587203
2533274793329028
2701489597915268
2533274792726708
2533274802231908
2533274794029863
2533274800090188
2533274794097123
2533274797039968
2533274799050373
2533274800466133
2810058517508398
2533274795554558
2533274801757588
2630450675226368
2633801567806868
2533274802317783
2604313713122483
2533274799963388
2533274801587788
2533274801982558
2533274799595878
2533274800357918
2587559250209573
2533274795198818
2533274799284108
2622408533028463
2533274801424968
2807377803440153
2533274802033173
2623078711556313
2533274793972078
2533274794675973
2533274800985588
2533274799851943
2533274793574258
2533274802193418
2533274795389748
2533274801924273
2533274802186553
2579517108002253
2533274799317188
2533274802231908
2533274802231908
2533274794638708
2597611927948868
2533274799306028
2533274798925508
2533274792639393
2533274799319393
2533274796250938
2533274799923693
2533274792167068
2533274801811483
2680714063933343
2533274800680508
2533274795930348
2533274802058108
2683394777987648
2533274797298448
2533274792981048
2533274799184938
2533274799884688
2533274800053718
2533274795558303
2533274800335303
2623078711556313
2623078711556313
2533274792855783
2533274801847713
2533274799748463
2533274794454138
2607664605689138
2650556030714658
2533274792075023
2533274798672163
2533274800878763
2533274800108173
2533274802168538
2533274797111343
2533274801149128
2533274792503618
2533274798616873
2533274793202563
2533274795075773
2533274793185778
2714222989725538
2533274792926383
2533274792473523
2767837270987973
2533274792862313
2533274802149833
2772528520606783
2799335661239703
2783921555384678
2533274797927623
2533274801115803
2537966040026093
2533274800266598
2533274802058108
2533274802058108
2533274800335303
2533274800335303
2533274800628873
2533274800628873
2533274795558303
2533274802309268
2533274800219153
2533274802338633
2710201918628083
2533274795558303
2533274802102098
2533274798820418
2533274797348518
2533274801017913
2533274798569858
2533274799175153
2533274802304933
2533274802337263
2533274802251488
2533274795322368
2533274802338838
2533274799173868
2533274796215623
2533274797555118
2533274798372918
2533274802152513
2533274800246888
2533274799827653
2533274799240238
2533274797638513
2533274800583993
2533274798865018
2533274799999193
2533274802331073
2630450675212843
2533274793203058
2533274797915878
2533274800518478
2773198699139808
2533274802085073
2533274793274103
2561422288092113
2767837270987973
2767837270987973
2533274801295178
2533274799252298
2533274792669248
2533274793414898
2533274795324388
2670661386181253
2533274799963953
2787942626479108
2533274798477103
2533274799271933
2533274797991493
2533274800219153
2808047981967163
2533274802246543
2533274797036538
2533274794322873
2533274800219153
2533274799670673
2533274802263233
2533274802317218
2533274796004693
2533274796543983
2753093343658163
2533274798182723
2533274799236508
2533274797196388
2533274791913383
2533274802218453
2533274799957003
2533274801587953
2747061737005108
2533274795957953
2533274800233923
2533274800959483
2533274795283428
2533274798205018
2533274796976303
2533274793909838
2533274795589818
2533274802336998
2533274801433248
2562092466593463
2643854245533133
2533274800666968
2533274800287983
2533274802220883
2533274799788038
2533274798308398
2533274800326258
2533274801149908
2533274801283868
2533274793441683
2800676018279648
2533274799146248
2533274799952498
2533274801450643
2533274802167083
2533274800633728
2533274797451108
2533274802076928
2781240841320498
2533274800622058
2533274795130348
2533274801445338
2635141924839963
2533274801944858
2533274800655448
2533274800032233
2533274799326798
2533274793631343
2533274796004693
2533274796004693
2533274797519583
2533274798836708
2533274800940298
2533274794789798
2575496036931373
2533274794138378
2533274795591563
2533274796549573
2533274802288303
2533274797710593
2533274802337288
2533274792937733
2533274800607923
2603643534586613
2533274794334738
2533274801835518
2533274797927623
2533274797927623
2533274801433248
2533274801433248
2533274801912338
2533274798401743
2533274793859793
2533274795980733
2533274795980733
2533274792203888
2533274802082828
2533274796425528
2533274800512308
2533274801458818
2533274802167463
2539976575572048
2804026910866298
2533274796642578
2533274800855918
2533274801202758
2533274802309068
2533274800948568
2533274802337453
2533274791876913
2533274795499893
2533274794393318
2533274802065208
2533274796080503
2533274798486108
2533274801330283
2656587637341628
2533274798133003
2533274801552903
2533274799788038
2533274799788038
2533274797334198
2533274802257468
2775879413180153
2533274797558598
2533274797519583
2533274797519583
2533274800658433
2533274797192548
2674682457284093
2533274798581588
2533274801643508
2533274797710763
2533274799306028
2533274795075778
2533274802336998
2533274802336998
2533274798623903
2533274794232563
2533274799443818
2533274801071198
2533274795572743
2533274798069458
2533274800149613
2533274797175623
2533274800851498
2533274793211278
2772528520605368
2663289422502328
2533274795310093
2533274800323653
2533274802114288
2533274792365548
2793304054615048
2533274801019293
2533274802307938
2533274796784508
2533274797652828
2533274797861343
2533274802297178
2533274800892758
2533274799603873
2533274802038203
2533274802215593
2533274797983508
2533274800647823
2533274796771233
2773868877643463
2533274798200978
2568124073237478
2533274793284313
2533274798716153
2783251376862768
2533274796810998
2533274796090343
2533274799975013
2533274802093863
2533274800752008
2533274796938888
2647205138133878
2533274796781003
2653906923290218
2533274800149613
2533274800149613
2533274801455408
2757784593266698
2533274794836448
2533274792307823
2533274795310093
2533274800265643
2629110318186018
2533274801870568
2641843709994443
2533274798390798
2533274798464778
2533274799013938
2533274802338633
2533274802338633
2533274795310093
2533274798623903
2533274798623903
2533274795577368
2533274800658128
2533274796141553
2619727818975003
2533274796154108
2533274798472218
2533274802045188
2533274802054793
2533274800436638
2701489597913658
2533274802335548
2607664605680073
2533274800647823
2533274800647823
2533274792614898
2533274799280148
2638492817415898
2533274801811188
2676692992824283
2772528520615983
2533274796817243
2550029253295743
2533274793767728
2533274801276108
2533274794802843
2533274799667853
2533274795322368
2533274799743718
2533274800507783
2533274801460453
2533274798373243
2533274799290513
2533274798463373
2766496913976888
2533274802243278
2533274799215513
2533274799851943
2533274797374073
2533274800421143
2680043885406913
2533274800548828
2533274792071378
2533274800558463
2641843710007008
2533274797809708
2533274801502193
2533274793872623
2533274800870528
2533274800948258
2533274802333938
2533274792405308
2533274799630173
2533274802068613
2775879413200628
2657927994380453
2797325125691838
2533274796743523
2533274799127308
2533274801165818
2533274799497483
2533274800123283
2533274800460633
2533274793741713
2533274791949253
2533274800499738
2533274794762348
2714222989723898
2533274794665023
2533274802194748
2533274794744668
2533274795820248
2533274798483858
2704170311993338
2533274797151973
2533274799280323
2533274796880753
2533274799149223
2561422288088333
2533274792392643
2533274792615693
2533274800061668
2533274798740573
2533274794858218
2533274795031038
2533274792726813
2533274793092278
2533274797947773
2533274794400083
2533274797026718
2533274794529913
2684064956510993
2691436920187803
2533274793093163
2533274798569073
2533274795498368
2533274796351768
2533274801697068
2660608708444048
2781240841328118
2533274800292853
2533274799753393
2533274796980813
2533274799696948
2533274793712958
2533274792591703
2533274801244633
2533274793036238
2533274798007968
2533274802337448
2770517985074828
2533274802068613
2533274802068613
2533274795012438
2533274796910158
2533274801286948
2533274797869223
2533274792826983
2533274795868613
2533274800959483
2748402094025583
2755103879200013
2533274799874313
2775879413189343
2609004962717258
2710872097144558
2533274795820248
2533274795820248
2533274799428648
2533274798041793
2533274794266153
2533274794537183
2533274801785188
2533274797803018
2533274792436023
2533274799076433
2533274802257733
2533274801920128
2789953162026428
2533274792641898
2533274795423888
2533274798037138
2533274798795693
2533274801055283
2533274797558253
2533274792418693
2533274796666443
2533274793264993
2533274795954183
2533274800082093
2533274800108173
2533274802167083
2533274797801553
2533274800271223
2770517985052248
2533274798348898
2533274792311598
2533274802298178
2533274801927623
2533274801349828
2533274794713123
2609004962717258
2609004962717258
2533274802017648
2533274797571103
2533274800898863
2533274799707878
2533274802337448
2533274802337448
2533274801397473
2533274802092543
2533274794775213
2725616024484848
2747061737005258
2533274801780473
2533274802220218
2533274793750598
2533274800959483
2533274800959483
2533274795779898
2533274802213398
2789953162026428
2789953162026428
2533274801501048
2533274802243278
2533274802243278
2533274794107273
2533274796603193
2533274802336223
2680714063930173
2533274798686173
2533274797253058
2533274801225138
2533274800334653
2533274799489788
2533274799795168
2701489597919408
2533274795871323
2533274796423878
2533274799819068
2533274800548828
2533274801849818
2533274792436023
2533274792738018
2533274800090188
2533274792841178
2533274797247228
2533274792436023
2533274802324213
2555390681451333
2592250499812473
2808718160474308
2533274792713228
2533274798010703
2533274801692273
2533274793270458
2533274800106963
2622408533030898
2533274799009053
2533274792841178
2533274794907838
2560081931059758
2533274797012558
2533274802223718
2533274796137713
2533274792338323
2533274799096223
2533274799373373
2533274799392443
2533274802123408
2741700308881548
2533274799333258
2533274802189033
2533274801892743
2533274792454653
2533274801186973
2533274800202463
2533274799054713
2533274801574953
2533274793140238
2533274796736343
2812739231568633
2533274793160473
2533274802092543
2533274802092543
2533274794799778
2533274795253768
2533274801888238
2533274795554558
2761135485840898
2533274793362103
2533274801366853
2812739231568633
2533274801449848
2533274800314113
2533274801349828
2533274801349828
2533274802037423
2576166215434018
2533274798952563
2533274801615363
2533274796934978
2533274800417063
2533274800352573
2533274800233938
2533274796504253
2533274792410723
2533274794138378
2533274799766118
2533274801766158
2533274801912338
2533274799647243
2533274800415428
2533274796371223
2710872097144558
2710872097144558
2753093343651213
2533274796604553
2533274792949143
2533274802298398
2533274801202758
2533274801574318
2533274800239268
2533274795952733
2533274793160473
2533274793909633
2533274797665233
2533274797291693
2533274799248953
2576166215419383
2533274800139258
2533274795095593
2533274799898553
2533274799801543
2604313713116278
2533274795618578
2533274801222198
2533274800544058
2745721379966038
2533274796310833
2533274794956008
2533274800191703
2763146021388258
2533274795838728
2533274797830168
2533274801878113
2533274794319528
2533274794990983
2533274801437603
2533274793160473
2533274792892373
2533274801204103
2533274794694658
2533274801634263
2533274795396168
2811398874543003
2533274800692778
2533274802337208
2676022814321653
2533274798617033
2698808883862923
2533274798693038
2533274794495218
2533274796963468
2533274801743758
2533274802217228
2533274796522438
2533274797677153
2533274796544533
2727626560052473
2734998523724178
2533274799505348
2684064956510993
2533274792068448
2533274797257063
2533274798006948
2533274800065008
2533274792786533
2533274798502703
2533274798332228
2533274802202768
2791293519064988
2533274802192688
2641173531477663
2533274797246818
2533274799662758
2533274801920128
2672001743218818
2533274792612643
2533274795943963
2533274800131478
2533274791897423
2533274802048213
2602303177547968
2714893168233423
2533274793829378
2533274794374883
2533274800101663
2533274802243658
2533274794956008
2533274794956008
2703500133460763
2533274799831263
2533274796810998
2669321029162168
2533274802283858
2533274792269608
2535955504469123
2698808883862923
2698808883862923
2533274799802288
2533274792412923
2533274796944303
2533274794340388
2533274799107423
2533274792670278
2533274793524403
2533274800901823
2616376926394043
2533274799569218
2533274799990298
2533274798749858
2533274800636788
2533274802104648
2533274800502343
2533274794378268
2649215673666138
2533274798576968
2533274795889993
2533274799904773
2787272447968008
2533274801768043
2533274795535723
2533274794132313
2533274801704863
2533274797972463
2533274798100873
2533274801017263
2533274792446963
2533274799798883
2533274795930348
2533274800663773
2533274800942208
2665299958052318
2533274796020208
2533274796944303
2533274798676913
2533274802187703
2533274799644048
2808047981967163
2533274796797073
2533274794097123
2533274798781033
2533274799904773
2533274799904773
2533274801766483
2533274792978998
2533274801757588
2533274800025653
2533274798228838
2533274801744563
2773198699124488
2533274798709018
2533274801963568
2533274798479993
2533274795817003
2533274799607183
2533274798081133
2533274799457833
2533274798443183
2533274794124258
2533274795959568
2533274800696623
2533274795366543
2533274801055283
2533274801886213
2533274801870218
2533274794519178
2533274800417853
2533274794335308
2803356732345388
2533274799058373
2533274799683938
2653236744762858
2533274795930348
2533274801082863
2533274801259403
2695457991293663
2533274795383448
2533274799080423
2533274800801003
2533274794146393
2533274800620343
2533274801886213
2533274801886213
2533274799759383
2533274801318498
2533274795933758
2812069053056263
2533274796993438
2533274797741493
2692777277200423
2533274793158353
2533274796109798
2533274796065853
2533274802013888
2533274798650643
2533274798686348
2533274799707878
2533274796987958
2533274802337208
2533274802337208
2533274792286018
2533274797630893
2537966040026093
2533274802049038
2533274801870218
2533274801870218
2533274801297693
2533274802122748
2533274796483938
2533274798501868
2533274800116828
2533274797558253
2533274800032833
2533274798100873
2533274798871033
2533274797128308
2533274800758768
2533274801071198
2737009059256358
2533274795644263
2533274797643653
2533274801672293
2533274796199078
2533274801884058
2533274799455213
2533274802338813
2533274799130788
2533274802021118
2533274798384903
2533274792098158
2533274793829378
2533274793829378
2533274797880358
2533274793915723
2533274796784453
2533274801591353
2533274793570883
2533274793808948
2533274792543518
2533274796035668
2533274792615693
2533274797931063
2533274800576743
2533274801191163
2533274795130348
2533274797185098
2533274799280148
2533274800655448
2743710844413318
2533274792965188
2715563346751088
2533274796995363
2533274800116088
2533274793887498
2533274796661558
2533274792446558
2533274793237333
2533274800032233
2533274800525978
2533274792298483
2578846929501538
2533274795064523
2533274800287983
2533274794868073
2533274798344303
2579517108003998
2533274801196888
2533274797589113
2533274794107273
2533274794107273
2533274802015398
2533274794801673
2533274801931453
2533274799626808
2536625682998228
2533274801522873
2616376926392518
2533274801018258
2807377803436098
2533274802337178
2533274798220668
2537295861499348
2533274799436553
2566783716216953
2533274801029478
2748402094029608
2533274798695633
2533274794906043
2533274792843338
2533274800628873
2533274800125243
2778560127267018
2533274793831683
2533274795398353
2533274797651453
2533274798903868
2533274800065008
2533274801454058
2533274802073063
2533274798160688
2656587637350778
2533274796439668
2533274802337178
2533274802337178
2533274800493063
2533274799105993
2533274800370118
2533274796208853
2533274802038278
2569464430266318
2533274797058998
2706851026044038
2736338880746528
2533274800992293
2533274793274103
2533274792830923
2533274797675223
2556731038473653
2533274793850783
2533274799022263
2533274794547098
2533274799405203
2533274798220668
2533274799743058
2533274800436638
2533274798220668
2533274798990278
2533274799292658
2533274799875338
2533274800550178
2783251376865413
2533274793611228
2533274795123523
2533274798520343
2533274797509288
2533274800279108
2533274801573858
2678033349849058
2533274792383963
2533274797133268
2554720502915953
2737679237785698
2533274794724543
2682724599470388
2533274798906703
2802016375324043
2533274802062638
2533274801700313
2533274795527228
2533274800604728
2533274792313993
2533274799901563
2533274800631608
2533274795050413
2608334784194713
2533274799097193
2533274792582273
2533274798187758
2533274802150538
2533274802246613
2705510669014738
2533274793047733
2533274801522708
2533274795236458
2533274799702058
2614366390854178
2533274796965403
2533274799689918
2533274802081998
2533274795117633
2533274795957953
2533274798643138
2533274800106403
2533274802337258
2533274800096303
2533274801105693
2533274801670313
2533274802338633
2603643534594578
2533274797166203
2533274796492388
2533274798317473
2533274793005803
2770517985052248
2734328345198053
2533274799257543
2533274795371823
2533274795888008
2533274797346658
2533274797766748
2533274799936148
2706180847531498
2533274802297318
2533274800999928
2533274800167728
2533274792436023
2533274796670803
2533274797931438
2533274799990543
2533274795675313
2533274800106403
2533274800106403
2533274801124733
2533274801161953
2533274800198413
2533274796661558
2533274796661558
2533274802337258
2533274802337258
2533274797983733
2533274800676078
2533274800538858
2533274798704698
2533274794306438
2533274799317188
2533274792786533
2533274801884803
2533274802338853
2807377803436098
2533274798740573
2533274799832083
2533274792978998
2533274798188653
2749072272550873
2533274796149823
2533274795987263
2533274798900223
2533274800275483
2533274794653698
2533274801861598
2533274802249373
2533274795050413
2533274795050413
2533274796370768
2533274801308713
2533274799602088
2533274793040963
2533274798795693
2533274802251873
2533274797182738
2533274802134583
2533274799428648
2533274801318498
2533274802212738
2533274799102948
2533274802234918
2533274802338618
2640503352954268
2533274797036538
2533274799409793
2533274794598883
2533274800529358
2533274800271003
2533274795144918
2533274792313728
2533274799401913
2533274795566538
2533274793769263
2533274796209238
2533274794665023
2807377803436098
2738349416305448
2533274798069458
2533274798866338
2698808883843868
2749072272550873
2749072272550873
2533274801662708
2533274793446003
2533274794643623
2533274796797073
2533274799937263
2533274802104373
2533274802132243
2533274793387673
2533274796485773
2533274797991493
2534615147440143
2683394777976263
2533274798821773
2533274795949783
2533274797608708
2533274795227153
2533274802060948
2533274802073063
2533274802319143
2533274800483523
2533274802302053
2533274800582698
2701489597913658
2533274799934983
2533274792436023
2533274792436023
2533274801710743
2533274802295053
2636482281869313
2533274799875338
2533274802295148
2533274799063753
2533274800334658
2533274802338618
2533274802338618
2702159776427123
2533274792313728
2533274792313728
2533274795616578
2533274798866338
2533274798866338
2533274799640548
2533274801722913
2533274799571243
2629110318188608
2533274800262743
2533274795190008
2533274802213873
2533274799410318
2533274795465613
2533274797915793
2550029253316488
2533274799957003
2533274798520668
2747061737005108
2533274802089218
2533274800758768
2533274800525978
2533274802334443
2533274793691913
2533274797987893
2533274801466303
2533274792436023
2604313713122483
2672001743218528
2533274799436553
2533274792831068
2533274792712948
2533274796540268
2533274802213348
2666640315077538
2533274794658388
2533274797885488
2533274798043623
2533274796411573
2533274793290738
2533274801109083
2533274793370983
2533274800256538
2533274800518768
2533274802139638
2634471746332113
2533274796370808
2533274798231663
2533274801295663
2533274796028248
2533274794529518
2533274800776253
2561422288095088
2797325125691838
2533274801406578
2533274801993768
2533274800290893
2533274800760943
2533274800017868
2538636218545873
2533274799836348
2533274799581523
2669321029140883
2533274800608343
2533274800334658
2533274800334658
2533274801382413
2533274793235168
2533274797220048
2805367267898738
2533274796500778
2533274792964668
2533274802207878
2533274801526928
2533274800017868
2533274800017868
2533274797315853
2533274802081563
2533274797420598
2790623340536883
2533274793665253
2533274801638703
2719584417843843
2533274800541513
2533274800617783
2533274801759313
2533274797334198
2533274801202758
2533274797488243
2533274799286948
2533274793254503
2533274799122313
2533274802249373
2533274802249373
2533274798604538
2533274801227818
2533274793865253
2533274792910728
2662619243993483
2699479062381458
2533274799060283
2637152460386278
2730977452610363
2533274792311598
2674012278769038
2533274796546688
2533274797774163
2533274802039753
2533274797447433
2533274792941078
2533274801467593
2590910142774068
2700819419413688
2533274794414468
2533274800303673
2533274801000673
2533274798990278
2533274797118413
2650556030707618
2533274792138243
2533274794963783
2533274797073993
2533274800299893
2533274795519333
2533274800245863
2533274793449513
2533274792051958
2551369610332758
2533274801951553
2533274798722483
2533274794344293
2753093343658163
2533274801333578
2533274802289573
2533274799038773
2533274801450313
2533274799937263
2533274799937263
2533274792726708
2533274801436708
2702159776443883
2626429604126938
2533274797492123
2544667825169638
2533274799168738
2533274799952508
2533274797801553
2533274801255903
2533274802130693
2533274802337893
2533274801838628
2533274796677203
2533274801291873
2533274796898058
2802016375315588
2533274800778188
2533274793502228
2533274796234853
2533274799268873
2533274802039753
2533274802039753
2669991207666093
2814079588592873
2533274795910348
2533274796161328
2533274798334608
2533274799952268
2621068176011668
2533274800278263
2533274802246613
2533274801514043
2533274795612773
2533274794020738
2584878536142233
2533274798466008
2533274797880358
2533274798384543
2533274793537188
2533274796475298
2533274799819068
2704840490500118
2533274801097378
2533274800538418
2533274795067043
2533274800245863
2533274800245863
2598282106462713
2533274795321118
2702159776431513
2533274798749858
2670661386188773
2533274801830448
2533274798036168
2533274800818388
2533274797026648
2533274801436708
2533274801436708
2533274793480418
2533274794676063
2533274799116978
2533274799283478
2533274802056688
2533274792200408
2533274800459088
2533274801524208
2533274799393718
2551369610332758
2551369610332758
2704840490496498
2533274801148118
2533274792882498
2533274796468088
2533274793245023
2533274798899598
2533274797492123
2533274797492123
2533274801369478
2533274801937363
2533274801593048
2697468526823448
2774539056162778
2533274798703278
2533274792464093
2533274802209683
2533274802213468
2533274798106573
2533274802061373
2598282106462713
2598282106462713
2533274797950023
2533274801726593
2791293519062153
2533274798807628
2533274800000618
2533274799990298
2533274800676078
2533274796199078
2533274797544203
2586889071682253
2533274794347858
2533274800139978
2533274801333578
2533274801333578
2533274793169803
2533274802176533
2533274792674693
2533274800548828
2533274793140238
2533274800638388
2533274798503303
2533274792547958
2533274798726293
2533274800233923
2533274794447548
2657257815868688
2533274802059463
2566783716213663
2596941749429893
2533274801666598
2569464430283188
2533274795427633
2533274802167463
2702829954938913
2533274801437603
2533274793337978
2533274801888238
2533274799835803
2533274792256588
2533274794653638
2533274795075778
2533274800249693
2589569785742243
2533274799232823
2533274797283033
2615036569347023
2533274798139838
2533274792464093
2533274792464093
2533274797831768
2533274798390798
2533274800617783
2533274801816573
2533274796397758
2533274802031538
2650556030694128
2533274800827498
2533274802193418
2533274798163353
2533274800996563
2533274801494548
2533274800437513
2703500133474203
2580857465037868
2533274796694343
2533274796776853
2533274793909838
2755103879187413
2791963697573633
2533274802193278
2533274795839663
2533274798799468
2533274802158003
2533274792842538
2533274797184158
2533274800332028
2533274801613018
2533274793138843
2533274800219153
2533274799832243
2533274798776863
2533274795605843
2533274799358323
2558071395503103
2533274795889993
2533274801924273
2533274792070568
2533274797414338
2753763522165733
2533274799941028
2533274802332398
2533274799579778
2533274800561608
2533274793001793
2533274795840488
2533274794511603
2533274795123523
2533274796093998
2533274799151688
2533274800244818
2533274801780473
2533274802339568
2722935310427348
2578176750968428
2533274796776853
2795984768671208
2533274801960573
2533274792902578
2533274802297318
2533274796776853
2533274798681698
2533274799283478
2533274799283478
2533274793760478
2533274799354858
2533274798158353
2533274795566538
2533274792989338
2533274790418443
2803356732339153
2533274800607958
2533274799801543
2533274801018653
2533274800120933
2533274800367013
2754433700679663
2533274792974163
2533274792379978
2533274799847843
2533274802337833
2533274792272423
2533274802158003
2533274802158003
2533274794774723
2533274798139838
2533274798139838
2533274800065693
2533274799941028
2533274799941028
2583538179113543
2533274796968758
2533274801651683
2533274801779133
2802016375324043
2533274800490918
2533274800947598
2649215673666138
2533274802244948
2533274793029403
2533274801364193
2533274797850793
2533274797501623
2789282983499713
2533274793915723
2733658166690913
2533274799551868
2533274802318648
2533274792508123
2533274801651683
2533274801651683
2533274793480478
2678033349865478
2533274798332228
2533274800649018
2533274794176758
2533274798384903
2786602269463198
2684735135020063
2533274792879258
2533274798069853
2533274798616873
2633801567794043
2533274802036643
2533274801890423
2533274799409793
2533274799815753
2635141924847378
2533274800975863
2533274794642933
2533274800380573
2533274797192548
2670661386179083
2533274792964668
2656587637350778
2707521204555873
2533274798240573
2533274799466633
2533274793820728
2533274801998643
2533274802338858
2533274796460703
2533274799173803
2533274799743058
2533274800892758
2533274798711888
2533274797939113
2765156556944758
2533274797286018
2533274794207363
2533274796840643
2680714063933343
2533274797079988
2812739231568633
2533274792548203
2533274801481483
2533274800466133
2533274793697853
2533274793192208
2533274794020738
2533274794279133
2533274802033173
2533274795516963
2533274797475183
2533274801956683
2533274793327638
2533274800612788
2533274801962528
2533274800226753
2533274802332718
2533274799810118
2533274794837683
2533274800459688
2533274792841178
2594261035363093
2533274796994618
2533274802331208
2533274797509328
2533274799683938
2533274801487283
2702159776443883
2533274795339998
2533274799866833
2533274795256683
2533274801781383
2664629779538773
2533274795980823
2562762645118943
2533274796472178
2533274800129838
2533274799022918
2533274802081998
2533274797526728
2533274799245758
2533274801524208
2533274801744028
2533274795650918
2533274799271563
2533274801529958
2533274797585548
2533274792078408
2533274795135143
2533274801328638
2533274795623158
2533274797823283
2533274798554748
2729637095594443
2533274792859338
2533274800759838
2533274802152703
2533274795444633
2533274795616578
2533274802087198
2548688896286533
2533274801167093
2533274802334143
2533274795803528
2533274799877528
2589569785756058
2533274798220668
2533274792362563
2533274800891668
2533274795077963
2533274800351643
2533274800746073
2533274800263893
2533274794064193
2730977452610363
2533274794981338
2533274796425528
2533274794987773
2812069053056263
2671331564700748
2533274798821773
2533274797526728
2533274797526728
2533274800356023
2533274792757378
2533274795075778
2533274802152703
2533274802152703
2533274792269608
2629110318188608
2533274801960573
2533274798703278
2533274800207788
2645194602571268
2533274795465613
2533274801108618
2533274800039953
2533274792691428
2647205138133878
2580187286518573
2533274798595543
2533274791910618
2533274795803528
2533274795803528
2533274797470518
2533274800356023
2533274800356023
2581527643548973
2533274801454058
2533274798566263
2533274800072363
2533274800282058
2533274798645123
2769177628019823
2533274801020028
2533274801258058
2533274802337658
2533274792941218
2533274800662803
2533274802220883
2533274800402963
2533274802330188
2533274793043528
2533274794697283
2533274800106963
2533274795198403
2533274797070868
2533274799875073
2533274801263083
2533274793182918
2533274796137713
2533274800693193
2533274795757218
2631791032260718
2533274801431393
2533274800959483
2533274797869223
2533274801988003
2533274801547768
2533274798857318
2533274795907078
2533274800106403
2533274793799088
2812069053058353
2763816199892938
2533274800660923
2763146021397303
2533274800977328
2533274794673708
2533274795123118
2533274797568778
2533274801508368
2533274802081998
2533274802215593
2581527643548973
2581527643548973
2533274801508393
2533274802196203
2533274792074933
2533274801295663
2533274796694343
2533274796916798
2621738354526538
2533274793316303
2655247280312343
2533274802324853
2533274795492813
2533274793645043
2634471746322523
2533274801588648
2533274796869523
2533274799815753
2533274794452778
2533274801877188
2533274799236583
2533274797862683
2533274799204258
2777889948746408
2533274796670463
2533274799526653
2533274800917093
2533274792302598
2533274802198783
2533274794972388
2533274796936998
2533274798167148
2533274801493418
2702159776445108
2533274801507963
2640503352965653
2533274795777378
2533274794956583
2533274795978768
2533274794746908
2533274802338858
2533274802338858
2630450675228428
2533274797652828
2686075492048168
2533274795634573
2533274801192553
2533274800966363
2533274800283498
2757114414742263
2533274796572338
2533274800617563
2533274794832818
2533274794981338
2607664605680073
2533274801315458
2533274791733478
2533274794497938
2533274797742918
2781911019833708
2533274796233548
2533274799662178
2533274800106963
2533274800106963
2533274800728978
2533274793455338
2533274799876603
2533274799787483
2812739231568633
2533274800212323
2533274792316618
2533274796228878
2533274799292658
2533274801501048
2720254596358818
2533274802305913
2533274795965318
2533274796938888
2533274800948568
2533274799236583
2562762645112383
2763146021389753
2533274799235688
2533274796701448
2533274798216698
2812739231579513
2533274799439573
2533274793043528
2533274793043528
2533274793325413
2533274802124148
2533274797219343
2533274800558463
2533274795371283
2533274792075638
2533274795757218
2533274795757218
2533274799326798
2802016375324118
2533274798470488
2533274799234168
2533274797237568
2533274800736888
2533274799870333
2533274799272488
2533274795198403
2533274799975848
2533274800745858
2533274792855783
2533274798313313
2812069053058353
2812069053058353
2533274797100118
2615706747861898
2533274797470518
2533274801956148
2533274800597418
2533274800103563
2674012278771743
2533274800951628
2533274798028633
2812069053058353
2533274796817243
2533274802209988
2533274798037138
2533274795139333
2533274799317188
2533274795830563
2533274792149268
2533274800340663
2533274796637383
2533274794789798
2533274797033983
2669321029161548
2533274793752368
2599622463487123
2604313713122483
2533274800750108
2566113537693818
2533274793301443
2533274798616968
2533274794374678
2533274799054638
2533274802317723
2759795128796343
2533274802114288
2533274793121868
2533274801857703
2643184067036848
2533274800936953
2678033349857828
2533274795540863
2533274796625443
2533274794373018
2533274794264453
2533274802324853
2533274802324853
2533274798807733
2533274802157798
2533274796234853
2533274796471193
2533274797216103
2533274802136873
2533274794336523
2533274796701448
2533274796701448
2533274802244038
2533274802255628
2533274791876318
2533274797474838
2533274800275483
2533274799360293
2738349416296733
2533274802015398
2533274797844993
2533274798814433
2810058517501558
2533274802286518
2533274796880753
2533274802298693
2709531740109293
2533274801633068
2533274800816638
2711542275661938
2776549591708833
2533274801097378
2752423165132848
2533274793489493
2533274801399573
2533274802220883
2533274798123108
2533274793301443
2533274793301443
2533274794322873
2533274798616873
2533274792102808
2533274792068448
2533274797150078
2533274792988738
2533274796794518
2533274798544428
2533274801340468
2704170311993338
2533274801120718
2533274799430548
2533274792439283
2533274802295148
2533274797513308
2533274798589418
2533274791964163
2533274799290513
2745721379966038
2636482281863398
2533274799626808
2533274796382483
2533274801044063
2533274799292658
2533274801501048
2533274800184813
2533274790418443
2533274801874443
2533274792402718
2533274793182723
2533274796220253
2533274797407528
2734998523726288
2624419068586703
2533274802316878
2533274794353123
2533274798870828
2533274801898733
2533274802263233
2731647631141163
2533274792839693
2533274793805968
2533274799924458
2533274800518478
2533274792582273
2533274802317723
2533274802317723
2533274800221443
2704840490501623
2533274799277313
2533274800227858
2533274802327048
2609004962724658
2766496913976888
2801346196796458
2533274802139823
2533274793914433
2594261035363093
2533274796722048
2533274802337248
2686745670562158
2642513888521583
2533274792066813
2533274800693193
2752423165132848
2752423165132848
2626429604128353
2533274792137433
2533274796288268
2533274801128008
2594931213869198
2749742451064858
2533274792068448
2533274792068448
2533274796222573
2761805664354368
2533274800025653
2533274801615363
2533274793673673
2533274802337813
2640503352958283
2533274801522708
2533274793263478
2533274793370983
2533274800082093
2533274800419483
2533274800389498
2533274797652828
2533274801104193
2533274800689218
2533274792409998
2533274797128308
2533274799198033
2533274799292658
2533274800106358
2533274801012108
2533274793805968
2533274793805968
2533274799437233
2544667825171333
2533274800951223
2533274796030798
2533274799901563
2533274801181323
2533274793454953
2533274801522408
2533274801587953
2533274802153303
2803356732339153
2533274799393718
2533274793362103
2533274800869018
2763146021387338
2533274800394438
2533274801524473
2533274797179468
2533274794557758
2533274798100873
2533274802180038
2533274798695633
2654577101798603
2533274797931438
2616376926392518
2533274794836448
2533274802269078
2533274798949178
2533274799545763
2716233525259533
2622408533030898
2533274795261293
2533274793923768
2741030130367703
2533274797544203
2533274799358323
2629780496703883
2687415849071248
2533274796821323
2533274798287593
2533274797594163
2533274797935678
2549359074793778
2741700308888008
2533274801278763
2533274798655088
2533274801960158
2533274800387323
2533274794724543
2533274800751613
2533274799875338
2533274800003678
2533274800199413
2533274795944728
2533274801318228
2724945845983448
2533274801116148
2533274794497938
2543997646677248
2533274802292598
2728296738554643
2533274796742908
2533274793886223
2533274798201613
2572145144337073
2533274802119833
2533274801268278
2533274798228233
2533274798520343
2533274801124698
2533274801549833
2533274795472438
2533274800947598
2533274797362283
2533274801514043
2533274802132243
2533274797695803
2533274793093163
2662619243993483
2533274795039288
2533274795396168
2757114414742263
2533274798749108
2533274802228458
2533274796371223
2533274793887498
2533274801197128
2533274797541253
2533274800792638
2609004962713568
2533274800810328
2763816199913928
2603643534586613
2533274797803063
2533274800256233
2533274802333138
2609004962717258
2533274792643408
2533274792155963
2533274796402903
2533274800341303
2533274802149103
2562762645122543
2533274798036168
2533274802324658
2533274796545788
2704840490488208
2533274797929943
2690096563148443
2672001743224228
2533274800532898
2533274800161393
2533274794790123
2533274800899258
2533274793798528
2533274797844993
2569464430283188
2533274801710803
2627099782638488
2533274799853543
2533274801704863
2533274801800718
2533274797744003
2533274802246613
2533274797753393
2533274800438398
2533274800084078
2533274795840488
2631120853734198
2533274792326953
2644524424054258
2533274796402903
2533274796402903
2533274793562988
2533274797770383
2533274800955698
2533274799354253
2778560127267018
2533274799277313
2533274795565678
2533274795948973
2533274795944728
2533274800763728
2533274802010418
2533274794804833
2533274795466453
2533274793339768
2533274795895618
2533274798784938
2533274797286628
2533274798987778
2533274802010863
2533274800683968
2533274792226793
2641843709986738
2533274794292898
2533274800786268
2668650850635218
2533274797915793
2696798348302188
2533274802330823
2533274798190643
2533274801335473
2533274792940353
2533274795944728
2533274797039968
2533274802227003
2533274801000673
2533274800925618
2533274797656193
2533274795470668
2533274796221998
2533274801264618
2533274796370768
2533274792915118
2533274793433978
2679373706900813
2533274792989338
2533274801348323
2533274795992778
2533274802304933
2533274802243278
2533274800198413
2533274800703023
2533274802238293
2533274795633328
2533274792897883
2533274792083148
2533274801349828
2711542275661938
2783921555384678
2533274794726643
2533274793690803
2533274797188483
2533274798379663
2533274801649183
2533274800763038
2613696212327278
2533274795820208
2533274801204888
2533274794892568
2533274795136418
2533274791865208
2533274793289808
2533274801620058
2576166215421193
2533274800531658
2648545495148728
2533274796218343
2533274799443818
2533274794142158
2533274797023348
2533274797651743
2533274802253603
2533274796781003
2533274800636788
2533274801554528
2533274797082738
2533274799876498
2742370487399523
2533274796023638
2533274794304993
2533274799543973
2533274802196888
2663289422500678
2533274796195358
2533274793531198
2533274794765408
2722935310427348
2533274801194773
2548018717749873
2533274795548378
2533274802338558
2533274800540443
2533274795958648
2533274795064038
2533274798443183
2533274800088213
2533274795991363
2533274802257468
2533274793013263
2533274792155963
2669321029140883
2533274800276803
2708861561583253
2533274792894118
2533274793062248
2533274791874608
2533274800225188
2533274792605928
2609004962713568
2533274794529518
2533274802335958
2771858342101298
2533274793490208
2533274795144918
2533274797949853
2533274796469903
2753093343658163
2533274795100688
2533274792128453
2533274799228833
2769177628029238
2533274800219088
2533274801593048
2533274795684463
2533274792714038
2533274792059813
2533274798026193
2533274798677723
2533274800199413
2533274793262363
2533274798520668
2533274795337628
2533274800689218
2533274801045698
2562092466587463
2533274799825318
2533274795832393
2533274802240493
2533274802243278
2533274800053033
2533274801435438
2533274795502803
2533274794360493
2533274801983098
2533274801790088
2533274801431393
2533274802243278
2661949065484403
2551369610347508
2533274793820728
2533274800627418
2533274797407793
2533274795923098
2533274801348073
2533274801107523
2533274796423878
2533274801631763
2533274800017868
2533274799823778
2533274796489148
2533274801612488
2533274793521943
2763816199892373
2533274801781383
2533274792138823
2533274800992293
2533274801260353
2714893168235803
2533274796209328
2541987111113318
2533274792894118
2533274792894118
2533274796425528
2533274795337628
2533274795337628
2533274802005168
2533274801783103
2797325125709753
2533274793531198
2533274801953718
2533274793531198
2533274799563688
2533274795466453
2533274795466453
2533274800543823
2533274795832393
2533274795832393
2533274802152703
2533274802334443
2699479062381458
2533274799139203
2533274794529518
2562762645104028
2533274791938533
2533274801010878
2533274794171453
2533274794639203
2533274801299413
2533274792306793
2533274798546768
2533274802248293
2533274797178603
2533274794792933
2533274802269953
2533274798767963
2533274797361568
2533274801241978
2533274802074853
2533274793290738
2533274792226793
2533274795988123
2533274801605068
2683394777980688
2533274792974163
2533274801408053
2533274801631763
2533274801631763
2533274792584603
2533274797246148
2548018717756228
2533274796439383
2533274802163918
2533274801530743
2533274799600008
2533274802339098
2611015498263358
2775879413180153
2533274797150053
2616376926394043
2533274797161708
2533274802122198
2533274801592278
2649215673666138
2533274798384903
2533274800136613
2533274802251243
2657927994390263
2533274800499738
2533274799947263
2533274794132313
2533274798923083
2533274792940353
2533274800607958
2533274800899258
2533274797558598
2533274798566963
2533274799676603
2533274792118588
2533274796323618
2533274799630173
2645194602579273
2533274791872773
2533274793357343
2533274802275223
2533274793630143
2533274799607183
2533274802274618
2533274794117203
2533274799635038
2703500133454993
2533274792303078
2533274797601273
2533274801437603
2533274802335763
2533274794639203
2533274797983733
2533274800899073
2533274792306793
2533274792306793
2533274794639203
2533274802339098
2533274802339098
2753093343658163
2533274794836158
2701489597915268
2533274801311573
2533274798704698
2533274802036643
2533274800163408
2533274794000083
2533274795888663
2533274799712628
2533274799993443
2533274791757593
2634471746332113
2533274794984138
2533274798503303
2533274793886578
2533274802286458
2533274794264453
2533274793752368
2533274794747668
2533274802053328
2533274797254308
2533274801953718
2533274801953718
2535285325960733
2533274793554168
2533274800947598
2533274802196413
2533274797452343
2533274794221088
2533274792229633
2533274799164963
2533274795577368
2533274794573458
2533274799404598
2533274800774148
2747061736993613
2533274794353123
2533274795436133
2533274799851943
2533274802319143
2533274793923768
2533274800617783
2533274800760463
2533274797210078
2533274797987268
2533274799232478
2533274799767648
2802016375315588
2533274796213523
2533274793037358
2533274800663773
2533274802299243
2533274796094133
2533274801433213
2533274796113288
2533274796397758
2533274797885488
2533274801349828
2533274802055948
2533274800389498
2533274794987583
2533274801750953
2533274796360183
2533274800751613
2533274796674578
2582868000594973
2533274796208853
2533274800089603
2533274799835803
2533274793609858
2807377803448078
2533274796485773
2533274799233613
2533274797558598
2533274797558598
2701489597915268
2701489597915268
2533274794764803
2533274798043623
2533274799836348
2533274793705188
2533274795513833
2533274802264283
2533274792547138
2533274802190638
2626429604130823
2533274802289898
2533274801927443
2533274799576213
2533274797084173
2533274792083448
2533274801018258
2533274800125243
2533274801840218
2802016375315588
2802016375315588
2533274793763293
2533274802164648
2533274801668178
2533274799217983
2533274798827188
2533274792951853
2533274794451798
2533274799948883
2533274800486643
2533274800103563
2533274800934598
2533274802064293
2533274797620118
2533274793803568
2533274796161328
2533274801003573
2533274800029798
2533274801263083
2533274797513308
2533274798643778
2533274797558548
2673342100250898
2533274801271003
2533274802337453
2533274801826538
2533274800675833
2533274800736353
2533274801812723
2533274801577228
2533274796725888
2533274794832818
2533274802190638
2533274802190638
2533274802333798
2574155679879138
2533274800239268
2533274801499908
2533274792576998
2533274791950158
2533274800371938
2533274799853493
2533274800337163
2533274800561608
2650556030694128
2533274797620118
2533274792629818
2533274800954363
2533274800629488
2533274797620118
2533274794676208
2533274800583993
2533274794991033
2533274796370808
2647205138122748
2533274800211138
2533274800749953
2533274799540098
2533274799232663
2533274793062248
2533274802192478
2533274802282468
2533274800661088
2533274800561608
2623748890073268
2533274794819583
2533274794903233
2533274800292853
2533274801547768
2533274792882598
2533274799092243
2533274794503653
2533274800675833
2533274800675833
2533274800965023
2533274796994618
2533274799254553
2533274797243803
2533274800051363
2533274792155963
2533274797503593
2533274797287368
2533274797603138
2533274801877188
2533274797776413
2535955504469123
2533274798457028
2533274791758503
2533274801672343
2586889071684558
2725616024512288
2545338003694753
2533274796080773
2533274792955478
2533274800000618
2533274800525978
2533274793222693
2533274798351663
2533274802213513
2781911019830753
2533274792629818
2533274792629818
2533274800851498
2533274801331258
2533274794789798
2533274794389153
2533274796259708
2533274795146443
2533274798338123
2533274799067163
2533274794752418
2533274792576998
2533274792576998
2594261035357508
2533274799257543
2533274801447273
2707521204561028
2533274798069853
2786602269446703
2533274794104643
2533274796328593
2533274795434988
2533274793321828
2533274793881448
2533274793159428
2533274795381658
2533274801458818
2533274792075573
2533274800725263
2533274800127718
2533274796652688
2533274798202848
2533274798222628
2533274799873978
2533274802339078
2533274792889093
2533274793156258
2533274794221408
2533274802139823
2615036569361273
2533274799233613
2533274799233613
2533274801460453
2533274800139978
2533274794202043
2533274798158353
2533274800370013
2533274802023013
2533274802321703
2533274794779368
2533274800137068
2533274802336223
2533274795146443
2533274800724558
2533274801445423
2533274793562988
2533274798767148
2533274797520448
2533274802045188
2533274798797053
2533274801642708
2533274800039953
2533274800814023
2599622463497993
2533274801206883
2533274795054518
2533274801166018
2533274800450793
2533274795146443
2767167092479123
2533274801615558
2783921555392128
2533274794467583
2533274796455368
2533274799788038
2533274793094763
2533274801860473
2533274799936223
2533274791972123
2533274797724578
2533274801313653
2533274797213273
2533274802115308
2568794251765093
2533274792489568
2533274799204258
2550029253315983
2533274799595988
2533274799236583
2533274802042743
2533274795093853
2533274800265643
2740359951850608
2533274795429093
2533274801286948
2533274802336223
2533274802336223
2533274796532973
2533274798315173
2533274801157293
2533274798313313
2533274798842988
2533274800935643
2533274801045698
2615036569353778
2533274797917053
2533274802305293
2761135485837053
2533274796236498
2533274793750083
2533274799788038
2533274799788038
2533274801663693
2533274794263778
2539306397052473
2787272447963153
2533274795562183
2533274799671848
2627099782638488
2533274800767113
2533274791845328
2533274797362283
2533274802305498
2533274796603518
2569464430264413
2533274793697853
2533274795605843
2533274793237333
2533274802196718
2613026033821213
2533274802333353
2553380145891913
2533274796364508
2533274795759933
2533274797947773
2533274798616873
2701489597915268
2533274801871413
2533274800446313
2635141924845168
2533274795075778
2533274793570938
2787272447972828
2533274801453843
2533274792075638
2533274801268278
2533274801317398
2533274796236498
2533274796236498
2533274797724578
2533274801359403
2533274794622933
2533274793029113
2655917458836193
2659938529936438
2533274801397473
2785932090924413
2533274802338618
2586889071684558
2533274797724578
2533274801574318
2533274798724963
2533274800029863
2533274792152223
2533274799014133
2533274802075858
2533274793232403
2533274802026553
2533274798637188
2682724599477648
2533274799020088
2533274795531788
2533274799127308
2533274792444043
2533274797464513
2533274801316403
2533274799689918
2533274801280373
2533274793005803
2533274793909633
2533274798971983
2533274798699288
2533274800598303
2533274795383448
2812069053050488
2533274796000953
2708861561583253
2533274793938633
2533274800047913
2533274799787483
2787272447972828
2787272447972828
2533274794224253
2533274802291208
2533274793976013
2533274797579513
2533274793321968
2533274801800718
2533274802213468
2538636218545873
2630450675213643
2533274793931228
2533274797653338
2533274798711568
2533274793963943
2533274795246758
2533274796468088
2533274801993068
2533274796949543
2533274798034743
2533274797651418
2533274800106963
2533274796546688
2533274796720808
2533274800031623
2790623340536883
2533274796540103
2533274801818853
2533274798034743
2533274801819183
2533274798066713
2533274797036538
2533274797823158
2533274792455133
2533274792861358
2533274798962423
2701489597915268
2701489597915268
2533274799975848
2533274794855108
2533274798810823
2533274801768423
2533274795548378
2533274794545198
2720254596370943
2533274802322153
2533274801993068
2533274801993068
2533274798826963
2533274796493008
2533274794130763
2533274798028633
2533274793642508
2533274795589818
2533274799031618
2533274802115308
2533274800327548
2533274802321348
2533274798429968
2533274793264993
2533274794364383
2533274800620073
2792633876092173
2533274798771833
2744381022943718
2533274802324853
2533274795970498
2533274797470518
2533274802115308
2533274793518123
2533274800944548
2533274792626618
2533274795930173
2533274792722623
2762475842880793
2533274797307653
2533274801605068
2533274796233548
2579517108012933
2533274791733478
2533274798054228
2533274800685038
2533274801370253
2533274801584648
2727626560053938
2533274792730753
2533274795913343
2765826735449033
2533274794837683
2533274800837768
2533274796540103
2533274797250933
2533274793680498
2533274797510738
2533274800664118
2533274796540103
2533274799877528
2533274793760283
2533274799645703
2533274802018558
2533274795236863
2727626560050328
2730977452623253
2533274800063203
2533274798784938
2533274793750598
2803356732337888
2533274792806433
2533274793384913
2533274802167463
2533274800458538
2533274793980338
2533274800681958
2533274800944548
2533274800944548
2533274799592913
2533274802229813
2533274802337818
2533274798876058
2533274801848548
2533274799029443
2533274801426533
2533274798723808
2533274801397513
2533274798346978
2533274799280323
2673342100236763
2533274802302053
2533274795839578
2533274797619188
2533274800616358
2533274800733988
2533274802338858
2674012278771743
2533274795852213
2563432823633213
2533274793335843
2533274800701633
2533274792842513
2533274799368173
2533274799883273
2533274797372828
2533274795236863
2533274795236863
2533274792168768
2533274797002798
2533274797196388
2533274802295348
2533274799401913
2533274795151313
2533274801727338
2533274794877093
2808718160469043
2533274794559858
2533274798616968
2533274801668788
2533274795652928
2533274801751883
2533274802302053
2533274802302053
2533274800666968
2800676018277623
2533274798091683
2533274802048728
2533274795359343
2533274797625048
2533274795310093
2533274798962423
2533274798962423
2680714063923438
2609004962721268
2533274792313993
2533274796781003
2533274796905348
2533274797535953
2533274799283728
2533274801621283
2533274796209328
2533274800525383
2533274794790213
2533274801477823
2533274800113573
2533274799907938
2533274798202348
2533274798475348
2533274800202463
2533274795236433
2533274800545578
2533274792853713
2533274795855058
2533274800759958
2554050324417728
2533274793140238
2533274802272933
2533274795470668
2533274797243803
2533274802218563
2533274793642508
2533274793642508
2533274795203183
2533274798288373
2533274801427793
2533274800692778
2533274801543638
2533274801982558
2533274801362078
2549359074785433
2533274797949853
2533274800525383
2533274800525383
2533274795591288
2533274801297693
2533274795031608
2533274802337893
2603643534587593
2533274802125258
2533274796770463
2533274795077963
2533274796209008
2533274799743058
2533274794547098
2533274796454008
2533274801580918
2533274798382523
2533274802189033
2702829954960228
2533274793549963
2533274798876058
2533274798077358
2533274798876058
2533274800163408
2533274792303078
2533274798475348
2533274798475348
2533274799087883
2702159776431513
2533274798630488
2652566566247553
2533274792882598
2533274801497788
2533274796798313
2533274801630958
2533274795299063
2533274799073023
2533274795123058
2533274797558598
2709531740116548
2533274800683813
2533274796646758
2542657289632748
2533274797643833
2533274801344513
2533274795942718
2533274802005168
2533274798630488
2533274798630488
2533274801953718
2533274801866758
2533274799202173
2533274801177448
2764486378420138
2533274793561863
2799335661257813
2533274800795598
2533274802219088
2682724599469548
2703500133462363
2533274801341928
2533274801467593
2533274802051818
2533274793233103
2533274796584788
2533274792314973
2533274801484093
2533274802082828
2533274798572258
2533274794970888
2533274802198348
2749742451061703
2533274798153408
2533274799802818
2533274793558908
2533274799466633
2533274801951553
2533274802324853
2533274793342608
2533274796091568
2533274799592913
2533274799592913
2533274798842988
2533274798679698
2533274792138983
2533274794830823
2533274801442293
2533274801919403
2538636218539653
2533274802020103
2533274800627473
2596941749428323
2533274799292658
2533274801924458
2791293519062153
2533274799732028
2582197822077013
2533274799399453
2533274800663208
2533274802143518
2533274792853408
2533274798068773
2533274801529958
2533274800491843
2699479062381313
2533274796195548
2533274800958948
2533274802200253
2533274798702848
2533274798298653
2690096563139938
2650556030707618
2533274800717143
2533274797670673
2604313713122483
2533274792951853
2533274797284383
2533274800257503
2533274802088263
2533274798522408
2533274797084173
2533274801484093
2533274801484093
2533274794336523
2533274799975048
2533274797744003
2533274793180508
2533274797526728
2533274799939958
2533274798249113
2655247280312343
2533274794909928
2533274792801643
2533274801679353
2533274800893118
2533274792591703
2533274794447548
2533274801406578
2533274792649528
2533274793723428
2533274801891108
2807377803432448
2533274793880083
2533274801327918
2533274801592623
2533274801447273
2533274801770633
2566783716213663
2533274801956973
2533274799901278
2533274801757468
2533274801750953
2533274793938633
2533274795166343
2533274792765938
2533274798193773
2533274798843788
2641843710000838
2533274802338813
2533274800284108
2533274799430548
2533274801621208
2533274794461513
2533274802165823
2533274801522873
2533274794673708
2533274799911698
2562092466596793
2533274797151213
2533274799832083
2533274801960573
2533274801228708
2533274801327918
2533274801327918
2533274801753718
2533274794336523
2533274792986898
2533274801439608
2533274797631423
2533274801423913
2613696212319253
2533274797823158
2533274799223158
2533274801138508
2533274798820418
2533274792277073
2533274800323653
2738349416284973
2533274792306793
2533274797286628
2533274796943108
2533274793962353
2533274798005423
2533274800680533
2533274801592623
2533274801592623
2533274800337163
2533274795387323
2738349416287193
2533274801549668
2533274798105088
2533274801439608
2533274801439608
2533274801812723
2533274799245758
2678703528371973
2533274802337118
2649215673666138
2533274801931453
2533274795050758
2533274801161953
2533274795700013
2759795128806653
2533274793554168
2533274800869143
2533274798685968
2613696212319253
2533274797993208
2533274799936148
2533274793609578
2533274797003843
2636482281869313
2533274797651743
2533274797929373
2533274798456208
2793304054609108
2570134608781008
2533274793549963
2533274800380573
2533274800680533
2533274800604043
2533274797745518
2533274802164648
2751082808089758
2604313713122483
2533274800106403
2533274793870103
2533274794752418
2533274800636788
2533274800898258
2533274801184213
2672001743218528
2533274801875238
2533274799821543
2533274801280373
2533274800680508
2533274801462548
2533274795185703
2533274800209153
2697468526818633
2708191383087118
2533274795708133
2533274800680533
2533274796380718
2533274793355528
2533274802227003
2533274796941163
2533274796370768
2533274800627418
2533274800491843
2533274800491843
2533274794529518
2533274793029403
2797325125697278
2533274800826608
2533274798345283
2533274799516198
2533274800414193
2533274802072068
2745051201462828
2533274798301223
2715563346764833
2533274794509593
2533274794963783
2533274797506493
2669321029147598
2727626560034163
2533274801402028
2606324248639753
2533274793346298
2533274792141843
2533274795926363
2533274799142928
2533274799256558
2533274799526653
2533274802223718
2533274792434913
2533274794451183
2533274797601273
2533274799901563
2533274801874443
2808718160469043
2533274796280423
2533274798250563
2533274798543578
2533274801466303
2806037446400018
2653236744773648
2533274799576213
2743710844432263
2533274802330953
2533274793663318
2533274802182143
2636482281869313
2636482281869313
2533274796024803
2533274797353703
2533274799806963
2533274797148418
2533274797286018
2751082808095458
2533274801641418
2533274797673953
2533274802048213
2533274795040888
2533274800417138
2533274799948883
2533274794247248
2533274792412923
2533274800776253
2549359074793778
2533274792102808
2630450675213643
2533274794982928
2533274796776853
2533274801466303
2533274801466303
2533274797480298
2533274800617378
2795314590167908
2533274798301223
2533274798301223
2533274797980543
2533274794800608
2533274798608753
2648545495154443
2533274799142928
2533274799142928
2533274800600658
2533274794764803
2766496913956388
2533274796371223
2533274800638613
2807377803443003
2533274795396178
2533274797059088
2533274799626808
2533274801036058
2533274802332718
2635812103343928
2643184067036848
2533274798409988
2533274795040888
2533274796665038
2533274795431993
2533274801569183
2533274794081148
2533274796821618
2533274797993208
2786602269459578
2533274795359343
2533274795040888
2533274799232478
2533274792408213
2533274797607863
2533274797599073
2533274800306653
2533274801902063
2533274801284148
2533274799017703
2533274801884803
2589569785756978
2533274791950158
2704840490501623
2533274802133938
2533274798608753
2533274798608753
2533274800409083
2533274797237568
2741700308876578
2533274797357758
2533274801746713
2533274796160793
2533274799766118
2533274802317963
2569464430261753
2533274798188653
2533274793792708
2533274800892758
2622408533023783
2622408533030898
2533274796870733
2533274793445858
2533274792508123
2533274801607783
2533274801621283
2533274802309273
2599622463494603
2533274802218633
2615036569347023
2533274799360293
2635141924835333
2533274795830583
2533274801770633
2533274801770633
2602303177554183
2533274794786778
2533274795634573
2533274802227003
2759795128796343
2533274798752218
2533274793870103
2533274797513203
2533274797656193
2533274801132903
2533274802207473
2533274795576798
2533274800984633
2533274802227003
2786602269456863
2533274796611658
2533274802179558
2533274802317963
2631120853742763
2533274792629818
2740359951850608
2533274802152028
2533274802337263
2533274801497788
2533274802320528
2680043885414443
2546678360735413
2533274800685038
2533274795759933
2533274796817243
2533274798473713
2533274797603138
2533274798632028
2533274801062793
2533274795930768
2533274794573868
2533274802048728
2533274796994563
2533274797558598
2533274797558598
2533274802324658
2533274798506348
2533274798819728
2533274802324298
2533274799229238
2533274791888373
2533274795502803
2533274800837768
2533274792699883
2533274802265253
2533274795741013
2533274796722048
2533274798925508
2533274797026648
2533274802286543
2533274801179288
2533274801722913
2533274798499708
2533274800438398
2637152460386278
2533274801044063
2533274794674778
2533274801875533
2533274795629338
2533274793556793
2533274800559563
2623748890067863
2533274802305808
2533274800395403
2533274795299063
2702829954960228
2533274801404518
2533274798483358
2533274800258678
2533274802075678
2533274799272488
2533274793470733
2533274797465243
2533274798751723
2533274799005583
2533274802337898
2533274794992273
2533274799635038
2533274798457028
2533274795341123
2533274795795243
2533274799170983
2533274797603408
2621068175996178
2533274792002243
2533274797159848
2673342100236763
2533274796746888
2533274801668788
2533274802137203
2533274794380208
2533274802304903
2533274799055768
2797325125709753
2533274799514373
2533274802093298
2533274800306598
2533274796742908
2609675141241538
2533274801801933
2533274794703308
2533274801018653
2533274800493768
2533274793425403
2533274793729348
2533274798693038
2533274792871228
2533274802266818
2533274796382483
2533274802079548
2533274792997873
2533274799947263
2533274801876873
2533274800217603
2533274797176778
2533274792526013
2533274793734608
2533274794675973
2533274800693743
2533274800934533
2533274793447518
2533274795465923
2533274798401743
2533274800528833
2533274797720968
2533274792728473
2533274799607498
2724945845983448
2533274796802138
2790623340541358
2533274794784163
2533274795165878
2533274792859878
2533274792282648
2533274800356283
2533274792379978
2533274802042743
2533274794368698
2533274795833788
2533274801999753
2738349416308418
2533274796323618
2533274800899073
2618387461927608
2533274798018848
2734328345211743
2533274793128428
2533274794326683
2533274798345283
2533274799170983
2533274801313053
2533274802167463
2533274802307788
2533274800899073
2533274797809793
2533274802194863
2533274795432093
2533274795507773
2533274797271088
2533274799886968
2533274802335958
2533274799725328
2533274801958103
2699479062371113
2533274800725263
2533274800362628
2533274794386258
2533274798978683
2533274800327548
2586889071684558
2533274798220668
2533274794980188
2533274798709408
2533274799702058
2533274800258678
2726956381527708
2533274794958603
2533274795401658
2533274801807398
2795984768660368
2793304054609108
2533274799424238
2580857465051783
2533274800617088
2790623340541358
2790623340541358
2627099782653228
2533274793931228
2533274800594028
2533274800345213
2533274795465448
2533274797414338
2543327468137728
2533274792368343
2533274795833788
2533274795833788
2623748890071208
2533274802335958
2533274795431993
2726956381515363
2763146021379983
2533274797693518
2533274797372543
2533274793782303
2533274796370768
2533274796370768
2533274796550338
2533274797084123
2726956381513773
2533274795569363
2533274802132243
2533274801055283
2533274800612433
2533274800658873
2533274792941218
2533274797300923
2533274800758768
2533274792075573
2533274797742918
2533274799610298
2533274802147518
2533274800277583
2533274798409988
2533274798409988
2533274800810328
2533274800767113
2533274802329043
2533274795774028
2533274797709523
2533274801006268
2571474965821948
2533274791984853
2533274792558273
2533274799702058
2533274799702058
2533274800892758
2533274800345323
2533274800064298
2558071395489243
2533274794386333
2533274800032963
2533274801011338
2533274792368343
2533274792368343
2533274799671848
2533274793215543
2533274802338833
2781911019833708
2533274802228458
2533274794682083
2783921555384678
2629780496703883
2533274801263818
2543997646675523
2533274793665253
2533274801196888
2533274800732058
2656587637350778
2533274800923098
2773198699121768
2533274796248968
2533274792226793
2533274792941218
2533274792941218
2533274793167358
2609004962713568
2783251376862098
2569464430283188
2533274799354858
2690096563148443
2533274801144973
2533274799153198
2533274794504468
2533274795156508
2533274796425568
2533274801875533
2775879413180153
2533274801196888
2537295861502933
2533274801668783
2533274798334608
2533274799832218
2533274802011938
2533274792376718
2533274793760283
2533274801196888
2690096563139938
2533274794362013
2533274794907208
2533274798379663
2533274801992398
2533274797601953
2533274794235383
2533274801947773
2533274799338058
2546678360738588
2533274792744443
2533274799443603
2533274793612978
2704170311987393
2533274802003118
2533274801993068
2533274802150948
2657257815864208
2725616024512288
2533274798005423
2533274801357743
2533274797115158
2533274794328958
2533274793290738
2533274798723808
2533274795839093
2533274802337658
2533274799399453
2533274796911788
2533274793080803
2533274802088263
2701489597915268
2533274801133458
2702829954957163
2533274794238178
2533274797966858
2533274799555908
2533274800542158
2533274801040193
2533274792712303
2533274800945073
2549359074802023
2716233525268388
2533274797984193
2533274800812858
2533274801331258
2596271570906908
2704170311986818
2533274798685968
2533274801124698
2533274795516963
2533274800147123
2533274794484033
2533274799509978
2533274800600658
2533274802337658
2533274802337658
2720254596370943
2533274798457563
2533274799874973
2533274795324388
2533274797709668
2533274798705233
2533274792566168
2533274796273693
2533274800503693
2533274802274313
2533274796968758
2533274798012333
2533274796997523
2533274798294163
2533274799277343
2533274793235168
2533274801154638
2533274799640548
2533274801386858
2533274801992398
2533274801992398
2533274794856113
2533274798231863
2542657289632748
2533274796171513
2730307274102523
2533274801429723
2533274802005278
2533274802088133
2533274800951503
2631791032258333
2533274796058183
2678033349862483
2533274793616743
2533274799805153
2533274800345213
2763146021379983
2763146021379983
2533274792697278
2533274802022928
2533274798329698
2533274800938503
2533274799922253
2533274792994978
2533274797015078
2701489597915268
2701489597915268
2728966917071913
2533274801993768
2533274799806103
2533274792543518
2533274800669638
2533274800123283
2533274793224883
2533274796328593
2533274799739853
2533274800965668
2533274797509328
2533274793281768
2533274802088133
2533274802088133
2533274801347003
2533274798593598
2533274800722918
2533274798163713
2533274801994488
2533274801403168
2704840490500118
2533274799520353
2533274794972893
2533274797987893
2533274797283033
2533274799499573
2533274791854523
2533274792154948
2533274793566453
2533274802122733
2533274798175003
2611015498263358
2533274796984248
2533274800781448
2533274795349703
2533274802326518
2533274798881808
2533274799009008
2533274801580918
2533274802304248
2533274800212658
2533274801828818
2533274801144973
2649215673666138
2533274798037138
2533274792789258
2533274791854523
2533274791854523
2533274800206263
2739019594816243
2533274801425328
2533274792713123
2533274800827498
2533274801786953
2570134608786548
2775209234672123
2533274792852358
2533274801291873
2533274802218563
2662619243993483
2533274793903603
2533274791857013
2661278886962173
2533274799183518
2533274802013888
2533274794828178
2533274796045233
2533274793321968
2533274800389068
2533274800561608
2789282983520458
2533274799408733
2533274800003678
2533274798090778
2533274799239928
2739019594816243
2739019594816243
2533274793990998
2534615147439668
2533274793436848
2533274801810553
2533274801084888
2533274792392643
2533274797103613
2533274799838713
2533274799429688
2533274801229438
2533274795310093
2533274800382453
2533274793946888
2533274799485298
2533274792905458
2533274800763728
2737009059256358
2533274798804748
2612355855288698
2533274801658863
2537295861502933
2533274791917138
2533274800275913
2746391558490063
2533274799214653
2533274799381748
2533274800758768
2533274801499908
2533274796920523
2533274796453218
2533274794777413
2533274795741013
2545338003698218
2678703528364298
2533274798987213
2533274802334443
2533274800269368
2533274796439668
2533274795429093
2533274796416233
2533274801349503
2533274798197773
2533274800088213
2731647631141163
2533274800192258
2707521204561028
2533274802274313
2533274802274313
2533274800908548
2738349416284973
2533274792198978
2533274791809148
2533274796195548
2533274802286458
2533274797689183
2533274801318228
2533274799233613
2533274798896568
2533274792844068
2533274800382453
2533274800382453
2533274802337533
2533274796509338
2533274798572258
2692107098700713
2533274802307473
2533274794557758
2533274798323618
2727626560053938
2533274798776863
2533274802246683
2533274795142418
2533274792543518
2533274792543518
2533274794046558
2533274799640548
2533274799640548
2533274798527128
2533274799496098
2533274800226753
2533274801733523
2533274793107483
2533274798034743
2533274801275478
2533274797295748
2533274800824463
2533274800064298
2533274801128008
2533274801266218
2533274793301078
2533274799449028
2533274799952508
2533274802081438
2533274794628503
2533274802205943
2533274799990543
2533274792702568
2533274795032703
2533274792474823
2533274802121613
2683394777976333
2533274798522408
2704840490496498
2533274799292658
2533274798240573
2533274799389633
2533274801596058
2596941749428323
2780570662798143
2533274797348518
2723605488955338
2568124073228608
2533274795820208
2533274801455408
2533274800689218
2533274792216403
2533274800668478
2533274802337533
2533274802337533
2533274800955698
2533274797300923
2533274800062148
2533274795050758
2533274796652688
2533274793792333
2533274792883868
2533274793107483
2533274793107483
2533274800317948
2533274802221633
2533274800595463
2538636218539653
2704170311983083
2533274802295148
2533274797736208
2533274795254223
2720254596359713
2767837271001063
2533274798849953
2783921555380903
2533274794373298
2533274802213348
2533274793080803
2533274794362013
2533274801858613
2533274793956988
2533274799401548
2533274797084463
2533274797643833
2533274794000083
2691436920166873
2533274794067943
2533274800532898
2534615147440143
2533274793112798
2533274796042673
2533274799902508
2533274795527438
2533274793726773
2814079588591938
2533274798826448
2533274801972533
2533274802223098
2533274800659998
2533274797546858
2533274801477823
2533274793331013
2604313713122483
2623748890067863
2533274797736208
2533274797736208
2533274795117633
2533274802058108
2533274793631343
2533274795774673
2533274800660458
2533274801225248
2533274793374988
2533274797299208
2533274797970078
2533274796918273
2661949065480548
2533274799263453
2533274801831143
2675352635805493
2533274800623638
2533274796987958
2533274802269673
2533274794307923
2533274797080093
2533274801483598
2533274799225523
2661949065484403
2533274800935643
2533274801606508
2533274794877093
2678033349865478
2643854245533133
2533274801580918
2785932090928478
2795984768660368
2533274795652188
2533274800493088
2574825858390128
2533274799214738
2534615147440143
2534615147440143
2533274801370253
2640503352958283
2533274800148858
2533274802257733
2533274796700003
2533274800795743
2533274793968158
2533274799939958
2533274801964498
2533274793190483
2533274801803248
2533274800120543
2533274796872413
2533274801770633
2533274800604728
2533274802213348
2533274802213348
2533274793425403
2533274794737883
2533274796918273
2533274796918273
2533274798026193
2533274798802083
2533274797370918
2533274796559703
2770517985061483
2533274798267788
2533274799869508
2533274796987958
2533274796987958
2533274801212268
2533274796815823
2533274801552903
2533274794553513
2533274797795898
2533274798651218
2533274799436553
2767167092479123
2543327468159138
2533274799260573
2533274793806943
2533274792832748
2533274794476128
2533274802214823
2533274796797073
2533274797509328
2533274799606873
2739019594801123
2533274792535493
2533274798164453
2533274797223308
2533274792183503
2533274797571103
2533274797951163
2541316932605723
2533274795958103
2533274792059813
2604313713122483
2533274801255903
2533274795053848
2533274792446963
2533274793706893
2533274795330598
2533274799215513
2533274794355208
2533274793502228
2533274800544058
2533274800898258
2533274794193948
2533274800184813
2533274798799468
2533274799153198
2533274793407528
2533274802288893
2776549591707033
2533274802190638
2533274802246563
2533274800601463
2533274800660923
2533274801443813
2533274794666803
2533274799957603
2533274800749953
2692107098694163
2533274797445948
2571474965821948
2533274797024253
2533274792926383
2533274796912693
2635141924842288
2642513888506488
2533274795256683
2763146021391863
2533274800249693
2533274798470488
2533274801193898
2533274800913703
2688086027596878
2533274794956583
2533274800047913
2533274793863878
2533274795943798
2533274792860003
2791963697573633
2533274802010418
2533274800365823
2533274795060138
2706851026057663
2533274796934623
2533274792498373
2533274794683428
2533274793029853
2533274794543713
2533274801255903
2533274801255903
2533274802161268
2533274792279963
2763816199909118
2533274800418643
2533274798528558
2533274797935663
2533274802105763
2533274797987893
2533274794064098
2533274802275398
2533274794857078
2533274792885918
2533274792106513
2533274798709408
2533274800258678
2769847806547033
2533274801622768
2806037446400018
2533274795252018
2533274796231963
2533274796816293
2602303177550663
2533274797873423
2533274797312338
2533274793484518
2533274794768093
2533274799408733
2533274794777413
2533274799074383
2533274802246613
2574825858395703
2533274797656543
2533274800216403
2533274802207473
2533274801196823
2533274801177448
2738349416287193
2533274792844133
2533274793753918
2533274792860003
2702829954957163
2785261912412883
2533274802333798
2533274801977728
2533274793316303
2533274794769933
2533274792860003
2533274799311578
2533274795003143
2533274799821543
2533274794393748
2533274801076658
2533274796042983
2533274794857078
2533274794857078
2533274799433858
2533274802022928
2801346196803603
2533274800020268
2533274792885918
2533274797822428
2533274801499828
2689426384638318
2533274794202043
2533274797021298
2723605488955338
2641173531489313
2533274800230248
2533274802337658
2533274802070148
2596271570902093
2533274793750598
2533274801866608
2676022814322038
2533274801786953
2533274792792298
2533274801074528
2533274792810508
2533274796879238
2533274801403168
2533274793625583
2702159776429213
2699479062371113
2533274800721418
2533274796439383
2533274798202848
2533274800501018
2621068175996178
2629110318199828
2653906923280013
2729637095579028
2533274797951163
2533274792885918
2533274798971983
2533274798018848
2666640315093273
2625089247098898
2533274801852523
2533274802243743
2533274801179288
2533274801482138
2533274801069723
2533274792691428
2735668702238458
2533274797637708
2533274801880163
2618387461937243
2533274795943798
2533274795943798
2533274797558598
2533274792557483
2533274800276633
2533274802286543
2653236744772693
2533274796870733
2533274796329488
2728966917082838
2533274802160503
2533274794423698
2533274796506388
2533274794428813
2533274793445858
2533274795158653
2533274800910978
2533274801913868
2533274795628928
2533274794833538
2533274800147123
2533274802272933
2568794251765003
2533274793436768
2533274800163408
2533274801616573
2533274793540498
2533274801147573
2533274802010863
2613696212319253
2533274792991828
2533274798771293
2533274800356283
2533274798601218
2536625682982453
2533274797558598
2533274797558598
2533274802339318
2533274795041338
2747731915522708
2751082808089758
2533274794852683
2670661386192813
2533274794221088
2533274795166158
2533274792548203
2533274795252833
2533274802264283
2533274798650788
2533274798971818
2533274800275483
2533274799901278
2533274800913703
2533274800913703
2533274800699053
2533274797589748
2533274802335478
2533274802335243
2533274800483523
2533274792078408
2533274801205978
2533274796197148
2601632999028063
2533274802304743
2533274793963943
2533274793554168
2533274795014468
2533274798377948
2695457991293728
2533274793298988
2533274797126808
2640503352965653
2533274798627718
2533274796972948
2533274792572363
2533274793792333
2533274796570208
2533274793940138
2533274797196388
2533274794925708
2533274798617033
2533274797966858
2533274797558253
2785932090921883
2533274794336523
2533274799170983
2533274802335763
2533274801727338
2533274802337813
2533274800901328
2706851026044038
2533274792640478
2533274801539073
2625759425613283
2533274798791023
2533274800386223
2612355855301613
2533274797951163
2533274793339768
2550029253303158
2533274800195288
2533274796963468
2533274796617323
2533274799446683
2533274795735658
2533274802318903
2533274795503698
2533274801668788
2533274802291208
2533274796042673
2533274796042673
2533274794329768
2533274795576958
2533274792482938
2533274798313313
2775879413192988
2533274799987113
2533274802053328
2621738354526538
2533274800623638
2533274800541733
2533274801990258
2533274794877183
2533274799198033
2533274796092158
2533274797411493
2533274801299413
2533274797401048
2533274797917598
2533274801368638
2706851026044038
2706851026044038
2533274793878998
2533274798458898
2533274796817243
2533274799604733
2533274794789108
2533274794784348
2533274791888373
2533274798849953
2533274794562813
2533274799417518
2533274797200733
2533274795576958
2533274795576958
2533274801617213
2533274801873533
2533274791949253
2533274798267788
2533274793036238
2533274792249788
2533274800524858
2533274792597463
2533274799906123
2533274802282468
2533274800711853
2533274792175668
2533274801349828
2734998523719508
2533274796987313
2533274793473258
2533274794020643
2533274801846033
2533274800694913
2533274792222953
2691436920186503
2533274801764768
2533274801924273
2533274797286628
2533274798546743
2752423165138548
2533274802251243
2742370487391198
2533274799068668
2533274801579798
2533274797407298
2533274800711853
2533274800711853
2533274795501733
2533274799819493
2533274801200653
2533274802220718
2773198699124488
2533274795042088
2533274799225748
2533274800827498
2533274801105463
2533274802230413
2533274802060023
2533274802121638
2533274799664708
2533274800617088
2533274791857013
2533274798450253
2533274800341163
2533274801841893
2533274792154043
2533274793393428
2802016375315538
2533274800029773
2533274800461483
2533274802075858
2533274796821618
2533274799670673
2533274800675833
2533274802292688
2742370487391198
2742370487391198
2533274792110683
2625089247088178
2533274795177508
2533274797611418
2660608708451568
2533274794917878
2533274796058183
2533274794664208
2533274799417518
2533274795943828
2533274800213133
2533274795671808
2533274798699288
2533274798361643
2533274798239338
2533274801987423
2533274793211278
2533274800684948
2533274802335138
2533274792071033
2533274797133268
2533274800899073
2533274791755788
2533274799248953
2533274798142163
2533274799743963
2533274800433418
2533274800370118
2533274801924273
2533274801924273
2533274801440033
2533274802337903
2533274798448998
2623078711546543
2799335661257813
2533274793159428
2533274794876683
2533274798562353
2533274801679418
2706180847526598
2533274792781193
2708191383088153
2533274799248953
2533274799248953
2533274797488308
2533274799409588
2533274802324853
2533274802262768
2533274794917878
2533274799664708
2533274799664708
2533274795943828
2533274795943828
2533274794970988
2533274801062523
2533274792744443
2533274800461483
2533274800461483
2533274802296098
2533274801532388
2533274796604553
2533274800210113
2700819419409713
2533274802165148
2533274801098573
2533274796976338
2533274792711963
2533274801370798
2533274800430653
2533274801520473
2533274797084463
2533274796840193
2533274793852368
2533274795977543
2533274794101543
2533274800565498
2533274801481978
2752423165138548
2752423165138548
2533274800725178
2533274801826538
2726286203007123
2533274798338123
2533274796798313
2533274799336043
2533274802335763
2533274802335763
2533274792933853
2533274799602143
2533274796934623
2533274794388408
2533274794917878
2533274798001728
2533274799102668
2533274794590883
2533274798886688
2533274793655223
2669991207666093
2730977452617593
2754433700679663
2730977452617593
2533274800984633
2533274802042933
2533274799954608
2533274802337903
2701489597920878
2533274800068653
2533274794673708
2533274796579648
2533274797333588
2533274800050568
2534615147439668
2533274800898258
2533274802072068
2608334784195318
2533274802337903
2533274797552423
2533274796193708
2533274796926523
2533274797810853
2533274801361053
2703500133454993
2533274799264983
2533274802147518
2533274792844133
2533274800584313
2533274794917093
2533274801764768
2533274801764768
2533274797131563
2622408533044263
2533274795421368
2533274792474823
2533274801709923
2533274802058108
2625759425613283
2533274794364383
2533274796798313
2533274796798313
2533274797420598
2533274801779963
2533274801827278
2533274796101153
2533274794221858
2533274795897038
2533274793888158
2533274797465938
2533274793472403
2533274802335598
2533274800234893
2552709967383763
2533274793387673
2533274797880018
2533274793234473
2769177628029238
2533274801852523
2533274795476833
2533274801779168
2533274793897273
2533274800216403
2533274797651743
2533274800433908
2533274794081148
2533274802018288
2533274801299043
2533274802317963
2533274800544058
2533274801786073
2533274792926383
2533274800696623
2533274800358693
2533274801668788
2533274802081998
2533274799392203
2533274798696953
2533274802221633
2533274801493418
2533274792334708
2533274801327918
2533274802213058
2533274799668933
2533274795236863
2533274801616573
2800005839765353
2533274801606508
2533274793573618
2720254596354728
2703500133474203
2533274799902508
2533274798966438
2533274800440803
2533274801460653
2533274802217268
2533274799217983
2533274794748993
2533274796432093
2631791032262293
2533274799522888
2533274801776663
2637822638908168
2533274792167068
2533274794081148
2576836393945088
2533274801649183
2731647631140903
2533274794779368
2533274798961513
2533274798250563
2533274796581643
2533274798175223
2791963697573633
2533274799585408
2533274797513203
2533274797823273
2533274795520098
2533274800793568
2533274794064098
2533274794999753
2533274797964398
2533274802241658
2533274802326708
2533274800433838
2533274801574318
2533274795300563
2533274799159873
2533274794224253
2558071395498943
2533274798403588
2558071395503103
2533274797219708
2533274802034868
2533274802335958
2533274793553143
2533274799806103
2533274792994978
2533274796793438
2533274802043648
2533274793475743
2533274801592278
2533274798685968
2533274790410563
2533274796655223
2533274797455703
2533274800239733
2533274802339573
2533274802330988
2533274793328543
2661949065485368
2533274794685638
2533274799838683
2533274794638708
2533274798589598
2533274801583988
2533274801678033
2533274797538188
2533274799417883
2533274799602143
2562762645112383
2733658166680333
2533274794503653
2533274797745648
2533274802332783
2533274801888953
2533274801642708
2533274799870333
2533274800683813
2673342100244798
2533274792144933
2552709967373353
2533274799865818
2567453894723358
2533274794235383
2533274797320013
2533274799405303
2533274798931743
2533274793058918
2533274800693018
2772528520606783
2533274800507263
2533274801991853
2533274792778568
2533274800099623
2533274799993443
2602973356058423
2533274799990333
2702159776431513
2533274798186158
2600292642017723
2689426384631353
2533274793918323
2533274797128248
2533274793851288
2575496036916978
2533274796559703
2533274800480683
2533274800617513
2533274800747733
2533274797391898
2533274793325413
2533274801841893
2533274797240628
2533274800506323
2533274799419493
2533274797629213
2533274797862683
2533274802065023
2533274794355208
2533274801446913
2533274795507773
2533274798946263
2533274800878763
2533274798817498
2533274797818253
2533274801570223
2536625682989003
2533274796905738
2533274802272268
2546678360738588
2533274798802253
2552709967373353
2552709967373353
2533274792434913
2533274791749018
2533274792677908
2733658166680333
2733658166680333
2533274798465623
2533274799146248
2676022814322038
2533274800198168
2533274800840783
2533274796666443
2569464430263258
2533274801423913
2533274793642508
2533274800781448
2533274801777988
2533274798865333
2533274800747733
2533274800747733
2533274794574123
2533274799391438
2533274801316403
2603643534587593
2533274797114103
2541316932591248
2533274797013923
2533274799555743
2533274800117103
2533274798060823
2793304054608308
2533274797695368
2533274798388923
2533274795523493
2533274802197053
2533274800734068
2533274792434913
2533274792434913
2679373706894223
2533274801958103
2533274798447963
2533274795271088
2533274793609578
2773198699139808
2533274801280373
2533274793940138
2533274796912693
2533274796478308
2533274797443958
2533274801669983
2568794251765093
2533274797880018
2533274798102608
2533274801016948
2677363171342728
2533274802079548
2533274801133623
2533274802330498
2804697089377238
2533274800860198
2533274794980188
2533274800989718
2533274792559513
2722935310440283
2533274793342608
2533274801194368
2621738354519878
2533274797286173
2609004962716613
2533274792547958
2751082808092028
2729637095595818
2792633876092173
2739019594801123
2533274792321378
2533274801316403
2533274801316403
2533274801524953
2533274794954728
2533274800851483
2533274801167213
2533274797589748
2533274798736038
2533274795711048
2533274795566683
2533274794433228
2533274792713123
2533274801565003
2533274801023928
2533274792889093
2533274800913703
2533274802121453
2722935310440283
2722935310440283
2533274800049898
2677363171342728
2677363171342728
2533274800163333
2533274796852518
2533274798843788
2533274799620123
2533274802016963
2533274801415673
2533274792128453
2533274800112813
2533274801147573
2533274796087888
2533274797196488
2533274790419928
2533274802324298
2533274800234893
2533274792933853
2533274798182963
2688756206103143
2533274794467103
2533274796617323
2533274795535723
2533274799576658
2533274797409048
2533274798433268
2533274801593048
2533274802320548
2533274795576123
2533274798987778
2619727818979328
2533274796243373
2533274801735533
2533274792984993
2533274799638223
2533274795305218
2533274799177068
2533274796467413
2790623340536883
2541987111113203
2533274801445423
2533274801764378
2533274793727058
2533274801913588
2626429604130823
2533274800380608
2625089247098898
2637152460375648
2533274801345143
2533274793278693
2533274793888158
2589569785755373
2675352635800758
2761135485847338
2533274800039953
2533274794393318
2533274795854648
2533274799482258
2557401216989588
2533274794384563
2625089247100608
2533274799510663
2779900484296853
2533274796277428
2535285325972488
2568794251749798
2533274799516198
2533274800944548
2533274798001728
2533274800439638
2533274795431993
2533274798220793
2533274794325153
2533274795635178
2533274800294933
2533274799776913
2533274800294728
2533274802005278
2533274802068838
2533274791872773
2533274797747088
2592920678322428
2533274794827553
2533274801944033
2533274802337813
2533274793041318
2533274802119773
2533274792547138
2533274798499708
2533274793607073
2650556030694128
2533274802034818
2533274802081438
2533274801240033
2533274794109933
2533274796835058
2533274801065943
2615036569353778
2533274795689653
2533274802218103
2533274794741228
2533274800365218
2533274800777563
2533274795873903
2533274794437523
2533274795503398
2533274800612528
2533274793836983
2623078711551313
2533274797370918
2771188163579703
2533274801370283
2533274802336448
2533274800452153
2533274793216653
2533274801518058
2533274798327003
2533274802272028
2533274791872773
2533274791872773
2533274799146248
2533274801378948
2533274794020753
2533274796870733
2533274801402028
2533274802133938
2655917458833118
2678703528364298
2533274799960273
2604313713114623
2533274795979263
2726286203000343
2533274795629338
2533274798153408
2533274799709838
2600292642017723
2533274797629658
2533274799962068
2533274802196718
2533274791958243
2533274792313993
2533274797062453
2533274794000083
2533274794046558
2533274799296913
2533274800587473
2533274801779963
2580187286518573
2533274802022928
2706851026039328
2533274796419638
2533274799697238
2533274794741228
2533274793092278
2533274801308928
2533274795943963
2533274801987498
2533274796416233
2533274800954108
2562762645112383
2533274793441043
2533274797085473
2533274792263153
2533274798987213
2533274792867928
2533274801758548
2533274793799088
2737009059256358
2533274795979263
2533274795979263
2533274795054518
2533274797913713
2533274793063358
2533274800653273
2533274802065023
2533274794741228
2714222989725538
2739689773331903
2533274801272248
2766496913958513
2533274797196488
2533274800005933
2533274792379978
2533274796869698
2533274798470103
2533274797058658
2533274793741713
2533274801348073
2533274797440313
2533274796946148
2533274792313993
2533274792313993
2533274798971818
2533274801424778
2533274797160133
2533274802142533
2533274802337903
2533274793554168
2802016375315538
2533274801965773
2533274793577848
2533274797038648
2533274792141843
2533274798285183
2533274798767163
2533274801200653
2533274793063358
2533274793063358
2533274796423378
2533274801788653
2533274800785353
2533274793980338
2533274800758138
2533274798601218
2533274797287368
2533274801893508
2682724599475828
2533274800681958
2533274800657718
2533274792730753
2533274794628503
2533274800302643
2533274801839193
2533274801590408
2533274802252743
2533274800066428
2533274797003483
2759124950299783
2533274792454973
2722265131915963
2533274794697283
2533274800300788
2533274793119163
2533274799256558
2533274802331738
2533274801299043
2714222989725538
2533274797198053
2533274799228848
2533274797603138
2714222989725538
2533274792623248
2533274795156283
2533274794545503
2533274801348073
2533274801348073
2533274802338813
2533274798285183
2533274798285183
2533274793234473
2533274800217603
2533274800934533
2533274800684948
2533274801805423
2533274801841383
2533274793040558
2533274800802393
2539306397052473
2533274797401048
2533274796870733
2533274796870733
2533274798583083
2533274800594028
2533274801532308
2533274794879498
2533274793398058
2533274794737883
2580857465051783
2586218893179993
2533274792977538
2533274795801623
2533274797455703
2533274796617413
2533274797810853
2533274797811848
2533274800146278
2533274792054953
2533274800681958
2533274800681958
2533274799736528
2533274801470748
2533274793099623
2533274796972948
2533274802154143
2533274801014698
2533274801960348
2533274791972123
2533274798012333
2533274801166953
2533274796816293
2533274796569463
2533274802312648
2533274802338813
2533274802338813
2702829954939343
2533274800122073
2533274800330033
2533274802189033
2533274798090778
2533274798709408
2533274801772128
2533274799483418
2533274798938428
2533274796245008
2533274800594708
2533274800090538
2586218893179993
2586218893179993
2533274800906193
2533274799446683
2533274801611573
2533274800140803
2533274796229468
2533274798632028
2533274796498638
2533274796768468
2533274802307098
2533274802273683
2533274796773498
2533274802001623
2669991207663863
2780570662798143
2533274798384998
2589569785755378
2533274800108133
2572145144338203
2664629779531443
2533274797612823
2533274798895553
2533274800085893
2533274793881448
2533274801841893
2533274795434988
2533274800721418
2533274800612788
2533274797632063
2533274799666623
2533274800951223
2533274796920523
2533274799199638
2787272447971368
2533274797002798
2533274800345213
2589569785746148
2533274799536453
2533274801552903
2533274801649878
2533274800717143
2661278886962173
2533274797505048
2533274802305608
2533274793915723
2533274802092203
2533274792853713
2533274800112813
2533274801388913
2533274801000793
2533274801016948
2786602269463198
2533274801873768
2533274801892743
2641843710000838
2762475842867363
2533274794662063
2533274796386743
2533274799987113
2533274800002753