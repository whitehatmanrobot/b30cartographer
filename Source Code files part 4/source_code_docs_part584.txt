idate</param>
            <returns>Unconditionally returns <c>true</c></returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.EnsureValidDataType">
            <summary>
            Throws an exception if this attribute is not correctly formed
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType">
            <summary>
            Gets the DataType. If it equals DataType.Custom, <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType"/> should also be retrieved.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType">
            <summary>
            Gets the string representing a custom data type. Returns a non-null value only if <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType"/> is DataType.Custom.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat">
            <summary>
            Gets the default display format that gets used along with this DataType.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DisplayAttribute">
            <summary>
            DisplayAttribute is a general-purpose attribute to specify user-visible globalizable strings for types and members.
            The string properties of this class can be used either as literals or as resource identifiers into a specified
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/>
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.#ctor">
            <summary>
            Default constructor for DisplayAttribute.  All associated string properties and methods will return <c>null</c>.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName">
            <summary>
            Gets the UI display string for ShortName.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/> or the
            localized string found when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/> will be returned.
            <para>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            <para>
            If <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/> is <c>null</c>, the value from <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName"/> will be returned.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/> property,
            but a public static property with a name matching the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/> value couldn't be found
            on the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName">
            <summary>
            Gets the UI display string for Name.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/> or the
            localized string found when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/> will be returned.
            <para>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            <para>
            Can return <c>null</c> and will not fall back onto other values, as it's more likely for the
            consumer to want to fall back onto the property name.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/> property,
            but a public static property with a name matching the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/> value couldn't be found
            on the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription">
            <summary>
            Gets the UI display string for Description.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/> or the
            localized string found when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/> will be returned.
            <para>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/> property,
            but a public static property with a name matching the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/> value couldn't be found
            on the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt">
            <summary>
            Gets the UI display string for Prompt.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt"/> or the
            localized string found when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt"/> will be returned.
            <para>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt"/> property,
            but a public static property with a name matching the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt"/> value couldn't be found
            on the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName">
            <summary>
            Gets the UI display string for GroupName.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName"/> or the
            localized string found when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has not been specified, the value of
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName"/> will be returned.
            <para>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName"/>
            represents a resource key within that resource type, then the localized value will be returned.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName"/> property,
            but a public static property with a name matching the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName"/> value couldn't be found
            on the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/>.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateField">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField"/> if it has been set, or <c>null</c>.
            </summary>
            <returns>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField"/> has been set returns the value of that property.
            <para>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField"/> has not been set returns <c>null</c>.
            </para>
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateFilter">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter"/> if it has been set, or <c>null</c>.
            </summary>
            <returns>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter"/> has been set returns the value of that property.
            <para>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter"/> has not been set returns <c>null</c>.
            </para>
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetOrder">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order"/> if it has been set, or <c>null</c>.
            </summary>
            <returns>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order"/> has been set returns the value of that property.
            <para>
            When <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order"/> has not been set returns <c>null</c>.
            </para>
            </returns>
            <remarks>
            When an order is not specified, presentation layers should consider using the value
            of 10000.  This value allows for explicitly-ordered fields to be displayed before
            and after the fields that don't specify an order.
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName">
            <summary>
            Gets or sets the ShortName attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> to configure a localized
            short name for display.
            <para>
            The <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            The short name is generally used as the grid column label for a UI element bound to the member
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name">
            <summary>
            Gets or sets the Name attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> to configure a localized
            name for display.
            <para>
            The <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            The name is generally used as the field label for a UI element bound to the member
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description">
            <summary>
            Gets or sets the Description attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> to configure a localized
            description for display.
            <para>
            The <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            Description is generally used as a tool tip or description a UI element bound to the member
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt">
            <summary>
            Gets or sets the Prompt attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> to configure a localized
            prompt for display.
            <para>
            The <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            A prompt is generally used as a prompt or watermark for a UI element bound to the member
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName">
            <summary>
            Gets or sets the GroupName attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName"/> method to retrieve the UI display string.
            </para>
            </summary>
            <remarks>
            The property contains either the literal, non-localized string or the resource key
            to be used in conjunction with <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> to configure a localized
            group name for display.
            <para>
            The <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName"/> method will return either the literal, non-localized
            string or the localized string when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> has been specified.
            </para>
            </remarks>
            <value>
            A group name is used for grouping fields into the UI.  A <c>null</c> or empty string is legal,
            and consumers must allow for that.
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that contains the resources for <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName"/>,
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/>, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/>, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt"/>, and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName"/>.
            Using <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType"/> along with these Key properties, allows the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName"/>,
            <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName"/>, <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription"/>, <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt"/>, and <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName"/>
            methods to return localized values.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField">
            <summary>
            Gets or sets whether UI should be generated automatically to display this field. If this property is not
            set then the presentation layer will automatically determine whether UI should be generated. Setting this
            property allows an override of the default behavior of the presentation layer.
            <para>
            Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateField"/> method to retrieve the value, as this property getter will throw
            an exception if the value has not been set.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the getter of this property is invoked when the value has not been explicitly set using the setter.
            </exception>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter">
            <summary>
            Gets or sets whether UI should be generated automatically to display filtering for this field. If this property is not
            set then the presentation layer will automatically determine whether filtering UI should be generated. Setting this
            property allows an override of the default behavior of the presentation layer.
            <para>
            Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateFilter"/> method to retrieve the value, as this property getter will throw
            an exception if the value has not been set.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the getter of this property is invoked when the value has not been explicitly set using the setter.
            </exception>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order">
            <summary>
            Gets or sets the order in which this field should be displayed.  If this property is not set then
            the presentation layer will automatically determine the order.  Setting this property explicitly
            allows an override of the default behavior of the presentation layer.
            <para>
            Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetOrder"/> method to retrieve the value, as this property getter will throw
            an exception if the value has not been set.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the getter of this property is invoked when the value has not been explicitly set using the setter.
            </exception>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute">
            <summary>
            Sets the display column, the sort column, and the sort order for when a table is used as a parent table in FK relationships.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute">
            <summary>
            Allows overriding various display-related options for a given field. The options have the same meaning as in BoundField.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString">
            <summary>
            Gets or sets the format string
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.NullDisplayText">
            <summary>
            Gets or sets the string to display when the value is null
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ConvertEmptyStringToNull">
            <summary>
            Gets or sets a value indicating whether empty strings should be set to null
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ApplyFormatInEditMode">
            <summary>
            Gets or sets a value indicating whether the format string should be used in edit mode
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute">
            <summary>
            An attribute used to specify the filtering behavior for a column.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the name of the control, without specifying which presentation layer to use
            </summary>
            <param name="filterUIHint">The name of the UI control.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor that accepts both the name of the control as well as the presentation layer
            </summary>
            <param name="filterUIHint">The name of the control to use</param>
            <param name="presentationLayer">The name of the presentation layer that supports this control</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Full constructor that accepts the name of the control, presentation layer, and optional parameters
            to use when constructing the control
            </summary>
            <param name="filterUIHint">The name of the control</param>
            <param name="presentationLayer">The presentation layer</param>
            <param name="controlParameters">The list of parameters for the control</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.GetHashCode">
            <summary>
            Returns the hash code for this FilterUIHintAttribute.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.Equals(System.Object)">
            <summary>
            Determines whether this instance of FilterUIHintAttribute and a specified object,
            which must also be a FilterUIHintAttribute object, have the same value.
            </summary>
            <param name="obj">An System.Object.</param>
            <returns>true if obj is a FilterUIHintAttribute and its value is the same as this instance; otherwise, false.</returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.FilterUIHint">
            <summary>
            Gets the name of the control that is most appropriate for this associated property or field
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.PresentationLayer">
            <summary>
            Gets the name of the presentation layer that supports the control type in <see cref="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.FilterUIHint"/>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.ControlParameters">
            <summary>
            Gets the name-value pairs used as parameters to the control's constructor
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.EditableAttribute">
            <summary>
            Indicates whether the consumer of a field or property, such as a client application,
            should allow editing of the value.
            </summary>
            <remarks>
            This attribute neither enforces nor guarantees editability; the underlying data
            store might allow changing the data regardless of this attribute.  The presence
            of this attribute signals intent to the consumer of the attribute whethere or not
            the end user should be allowed to change the value via the client application.
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.EditableAttribute.#ctor(System.Boolean)">
            <summary>
            Indicate whether or not a field/property is editable.
            </summary>
            <param name="allowEdit">
            Indicates whether the field/property is editable.  The value provided
            will apply to both <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit"/> and
            <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue"/> unless the <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue"/>
            property is explicitly specified.
            </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit">
            <summary>
            Indicates whether or not the field/property allows editing of the
            value.
            </summary>
            <value>
            When <c>true</c>, the field/property is editable.
            <para>
            When <c>false</c>, the field/property is not editable.
            </para>
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue">
            <summary>
            Indicates whether or not the field/property allows an initial value
            to be specified.
            </summary>
            <remarks>
            The value of this property defaults to match the <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit"/>
            property value specified in the constructor.
            </remarks>
            <value>
            When <c>true</c>, the field/property can have its value set for
            newly constructed instances, such as during an insert operation.
            <para>
            When <c>false</c>, the field/property cannot have its
            value provided for newly constructed instances, such as during
            an insert operation.  This will often indicate that the value
            is auto-generated by the persistence store.
            </para>
            </value>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.KeyAttribute">
            <summary>
            Used to mark one or more entity properties that provide the entity's unique identity
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.LocalizableString">
            <summary>
            A helper class for providing a localizable string property.  
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.LocalizableString.#ctor(System.String)">
            <summary>
            Constructs a localizable string, specifying the property name associated
            with this item.  The <paramref name="propertyName"/> value will be used
            within any exceptions thrown as a result of localization failures.
            </summary>
            <param name="propertyName">The name of the property being localized.  This name
            will be used within exceptions thrown as a result of localization failures.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.LocalizableString.ClearCache">
            <summary>
            Clears any cached values, forcing <see cref="M:System.ComponentModel.DataAnnotations.LocalizableString.GetLocalizableValue"/> to
            perform evaluation.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.LocalizableString.GetLocalizableValue">
            <summary>
            Gets the potentially localized value.
            </summary>
            <remarks>
            If <see cref="P:System.ComponentModel.DataAnnotations.LocalizableString.ResourceType"/> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.LocalizableString.Value"/> is not
            null, then localization will occur and the localized value will be returned.
            <para>
            If <see cref="P:System.ComponentModel.DataAnnotations.LocalizableString.ResourceType"/> is null then <see cref="P:System.ComponentModel.DataAnnotations.LocalizableString.Value"/> will be returned
            as a literal, non-localized string.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if localization fails.  This can occur if <see cref="P:System.ComponentModel.DataAnnotations.LocalizableString.ResourceType"/> has been
            specified, <see cref="P:System.ComponentModel.DataAnnotations.LocalizableString.Value"/> is not null, but the resource could not be
            accessed.  <see cref="P:System.ComponentModel.DataAnnotations.LocalizableString.ResourceType"/> must be a public class, and <see cref="P:System.ComponentModel.DataAnnotations.LocalizableString.Value"/>
            must be the name of a public static string property that contains a getter.
            </exception>
            <returns>
            Returns the potentially localized value.
            </returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.LocalizableString.Value">
            <summary>
            Gets or sets the value of this localizable string.  This value can be
            either the literal, non-localized value, or it can be a resource name
            found on the resource type supplied to <see cref="M:System.ComponentModel.DataAnnotations.LocalizableString.GetLocalizableValue"/>.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.LocalizableString.ResourceType">
            <summary>
            Gets or sets the resource type to be used for localization.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.RangeAttribute">
            <summary>
            Used for specifying a range constraint
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that takes integer minimum and maximum values
            </summary>
            <param name="minimum">The minimum value, inclusive</param>
            <param name="maximum">The maximum value, inclusive</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Constructor that takes double minimum and maximum values
            </summary>
            <param name="minimum">The minimum value, inclusive</param>
            <param name="maximum">The maximum value, inclusive</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Allows for specifying range for arbitrary types. The minimum and maximum strings will be converted to the target type.
            </summary>
            <param name="type">The type of the range parameters. Must implement IComparable.</param>
            <param name="minimum">The minimum allowable value.</param>
            <param name="maximum">The maximum allowable value.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(System.Object)">
            <summary>
            Returns true if the value falls between min and max, inclusive.
            </summary>
            <param name="value">The value to test for validity.</param>
            <returns><c>true</c> means the <paramref name="value"/> is valid</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.FormatErrorMessage(System.String)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)"/>
            </summary>
            <remarks>This override exists to provide a formatted message describing the minimum and maximum values</remarks>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>A localized string describing the minimum and maximum values</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.SetupConversion">
            <summary>
            Validates the properties of this attribute and sets up the conversion function.
            This method throws exceptions if the attribute is not configured properly.
            If it has once determined it is properly configured, it is a NOP.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum">
            <summary>
            Gets the minimum value for the range
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum">
            <summary>
            Gets the maximum value for the range
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.OperandType">
            <summary>
            Gets the type of the <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum"/> and <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum"/> values (e.g. Int32, Double, or some custom type)
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute">
            <summary>
            Regular expression validation attribute
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the regular expression pattern
            </summary>
            <param name="pattern">The regular expression to use.  It cannot be null.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.IsValid(System.Object)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"/>
            </summary>
            <remarks>This override performs the specific regular expression matching of the given <paramref name="value"/></remarks>
            <param name="value">The value to test for validity.</param>
            <returns><c>true</c> if the given value matches the current regular expression pattern</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
            <exception cref="T:System.ArgumentException"> is thrown if the <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern"/> is not a valid regular expression.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.FormatErrorMessage(System.String)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)"/>
            </summary>
            <remarks>This override provide a formatted error message describing the pattern</remarks>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized message to present to the user</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
            <exception cref="T:System.ArgumentException"> is thrown if the <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern"/> is not a valid regular expression.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.SetupRegex">
            <summary>
            Sets up the <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Regex"/> property from the <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern"/> property.
            </summary>
            <exception cref="T:System.ArgumentException"> is thrown if the current <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern"/> cannot be parsed</exception>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern">
            <summary>
            Gets the regular expression pattern to use
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.RequiredAttribute">
            <summary>
            Validation attribute to indicate that a property field or parameter is required.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>This constructor selects a reasonable default error message for <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)"/></remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.IsValid(System.Object)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"/>
            </summary>
            <param name="value">The value to test</param>
            <returns><c>false</c> if the <paramref name="value"/> is null or an empty string</returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.AssociatedMetadataTypeTypeDescriptor_MetadataTypeContainsUnknownProperties">
            <summary>
              Looks up a localized string similar to The associated metadata type for type &apos;{0}&apos; contains the following unknown properties or fields: {1}. Please make sure that the names of these members match the names of the properties on the main type..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.AttributeStore_Type_Must_Be_Public">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; must be public..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.AttributeStore_Unknown_Method">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not contain a public method named &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.AttributeStore_Unknown_Property">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not contain a public property named &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.CustomValidationAttribute_Method_Must_Return_ValidationResult">
            <summary>
              Looks up a localized string similar to The CustomValidationAttribute method &apos;{0}&apos; in type &apos;{1}&apos; must return System.ComponentModel.DataAnnotations.ValidationResult.  Use System.ComponentModel.DataAnnotations.ValidationResult.Success to represent success..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.CustomValidationAttribute_Method_Not_Found">
            <summary>
              Looks up a localized string similar to The CustomValidationAttribute method &apos;{0}&apos; does not exist in type &apos;{1}&apos; or is not public and static..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.CustomValidationAttribute_Method_Required">
            <summary>
              Looks up a localized string similar to The CustomValidationAttribute.Method was not specified..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.CustomValidationAttribute_Method_Signature">
            <summary>
              Looks up a localized string similar to The CustomValidationAttribute method &apos;{0}&apos; in type &apos;{1}&apos; must match the expected signature: public static ValidationResult {0}(object value, ValidationContext context).  The value can be strongly typed.  The ValidationContext parameter is optional..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.CustomValidationAttribute_Type_Conversion_Failed">
            <summary>
              Looks up a localized string similar to Could not convert the value of type &apos;{0}&apos; to &apos;{1}&apos; as expected by method {2}.{3}..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.CustomValidationAttribute_Type_Must_Be_Public">
            <summary>
              Looks up a localized string similar to The custom validation type &apos;{0}&apos; must be public..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.CustomValidationAttribute_ValidationError">
            <summary>
              Looks up a localized string similar to {0} is not valid..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.CustomValidationAttribute_ValidatorType_Required">
            <summary>
              Looks up a localized string similar to The CustomValidationAttribute.ValidatorType was not specified..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.DataTypeAttribute_EmptyDataTypeString">
            <summary>
              Looks up a localized string similar to The custom DataType string cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.DisplayAttribute_PropertyNotSet">
            <summary>
              Looks up a localized string similar to The {0} property has not been set.  Use the {1} method to get the value..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.EnumDataTypeAttribute_TypeCannotBeNull">
            <summary>
              Looks up a localized string similar to The type provided for EnumDataTypeAttribute cannot be null..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.EnumDataTypeAttribute_TypeNeedsToBeAnEnum">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; needs to represent an enumeration type..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.LocalizableString_LocalizationFailed">
            <summary>
              Looks up a localized string similar to Cannot retrieve property &apos;{0}&apos; because localization failed.  Type &apos;{1}&apos; is not public or does not contain a public static string property with the name &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.MetadataTypeAttribute_TypeCannotBeNull">
            <summary>
              Looks up a localized string similar to MetadataClassType cannot be null..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.RangeAttribute_ArbitraryTypeNotIComparable">
            <summary>
              Looks up a localized string similar to The type {0} must implement {1}..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.RangeAttribute_MinGreaterThanMax">
            <summary>
              Looks up a localized string similar to The maximum value &apos;{0}&apos; must be greater than or equal to the minimum value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.RangeAttribute_Must_Set_Min_And_Max">
            <summary>
              Looks up a localized string similar to The minimum and maximum values must be set..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.RangeAttribute_Must_Set_Operand_Type">
            <summary>
              Looks up a localized string similar to The OperandType must be set when strings are used for minimum and maximum values..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.RangeAttribute_ValidationError">
            <summary>
              Looks up a localized string similar to The field {0} must be between {1} and {2}..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.RegexAttribute_ValidationError">
            <summary>
              Looks up a localized string similar to The field {0} must match the regular expression &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.RegularExpressionAttribute_Empty_Pattern">
            <summary>
              Looks up a localized string similar to The pattern must be set to a valid regular expression..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.RequiredAttribute_ValidationError">
            <summary>
              Looks up a localized string similar to The {0} field is required..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.StringLengthAttribute_InvalidMaxLength">
            <summary>
              Looks up a localized string similar to The maximum length must be a nonnegative integer..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.StringLengthAttribute_ValidationError">
            <summary>
              Looks up a localized string similar to The field {0} must be a string with a maximum length of {1}..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.StringLengthAttribute_ValidationErrorIncludingMinimum">
            <summary>
              Looks up a localized string similar to The field {0} must be a string with a minimum length of {2} and a maximum length of {1}..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.UIHintImplementation_ControlParameterKeyIsNotAString">
            <summary>
              Looks up a localized string similar to The key parameter at position {0} with value &apos;{1}&apos; is not a string. Every key control parameter must be a string..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.UIHintImplementation_ControlParameterKeyIsNull">
            <summary>
              Looks up a localized string similar to The key parameter at position {0} is null. Every key control parameter must be a string..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.UIHintImplementation_ControlParameterKeyOccursMoreThanOnce">
            <summary>
              Looks up a localized string similar to The key parameter at position {0} with value &apos;{1}&apos; occurs more than once..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.UIHintImplementation_NeedEvenNumberOfControlParameters">
            <summary>
              Looks up a localized string similar to The number of control parameters must be even..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.ValidationAttribute_Cannot_Set_ErrorMessage_And_Resource">
            <summary>
              Looks up a localized string similar to Either ErrorMessageString or ErrorMessageResourceName must be set, but not both..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.ValidationAttribute_IsValid_NotImplemented">
            <summary>
              Looks up a localized string similar to IsValid(object value) has not been implemented by this class.  The preferred entry point is GetValidationResult() and classes should override IsValid(object value, ValidationContext context)..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.ValidationAttribute_NeedBothResourceTypeAndResourceName">
            <summary>
              Looks up a localized string similar to Both ErrorMessageResourceType and ErrorMessageResourceName need to be set on this attribute..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.ValidationAttribute_ResourcePropertyNotStringType">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; on resource type &apos;{1}&apos; is not a string type..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.ValidationAttribute_ResourceTypeDoesNotHaveProperty">
            <summary>
              Looks up a localized string similar to The resource type &apos;{0}&apos; does not have an accessible static property named &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.ValidationAttribute_ValidationError">
            <summary>
              Looks up a localized string similar to The field {0} is invalid..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.ValidationContext_Must_Be_Method">
            <summary>
              Looks up a localized string similar to The ValidationContext for the type &apos;{0}&apos;, member name &apos;{1}&apos; must provide the MethodInfo..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.ValidationContextServiceContainer_ItemAlreadyExists">
            <summary>
              Looks up a localized string similar to A service of type &apos;{0}&apos; already exists in the container..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.Validator_InstanceMustMatchValidationContextInstance">
            <summary>
              Looks up a localized string similar to The instance provided must match the ObjectInstance on the ValidationContext supplied..
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources.Validator_Property_Value_Wrong_Type">
            <summary>
              Looks up a localized string similar to The value for property &apos;{0}&apos; must be of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.StringLengthAttribute">
            <summary>
            Validation attribute to assert a string property, field or parameter does not exceed a maximum length
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.IsValid(System.Object)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"/>
            </summary>
            <remarks>This method returns <c>true</c> if the <paramref name="value"/> is null.  
            It is assumed the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> is used if the value may not be null.</remarks>
            <param name="value">The value to test.</param>
            <returns><c>true</c> if the value is null or less than or equal to the set maximum length</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)"/>
            </summary>
            <param name="name">The name to include in the formatted string</param>
            <returns>A localized string to describe the maximum acceptable length</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.EnsureLegalLengths">
            <summary>
            Checks that MinimumLength and MaximumLength have legal values.  Throws InvalidOperationException if not.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength">
            <summary>
            Gets the maximum acceptable length of the string
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength">
            <summary>
            Gets or sets the minimum acceptable length of the string
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.TimestampAttribute">
            <summary>
            This attribute is used to mark a Timestamp member of a Type. 
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.UIHintAttribute">
            <summary>
            Attribute to provide a hint to the presentation layer about what control it should use
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the name of the control, without specifying which presentation layer to use
            </summary>
            <param name="uiHint">The name of the UI control.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor that accepts both the name of the control as well as the presentation layer
            </summary>
            <param name="uiHint">The name of the control to use</param>
            <param name="presentationLayer">The name of the presentation layer that supports this control</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Full constructor that accepts the name of the control, presentation layer, and optional parameters
            to use when constructing the control
            </summary>
            <param name="uiHint">The name of the control</param>
            <param name="presentationLayer">The presentation layer</param>
            <param name="controlParameters">The list of parameters for the control</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint">
            <summary>
            Gets the name of the control that is most appropriate for this associated property or field
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer">
            <summary>
            Gets the name of the presentation layer that supports the control type in <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint"/>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters">
            <summary>
            Gets the name-value pairs used as parameters to the control's constructor
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHintImplementation.GetHashCode">
            <summary>
            Returns the hash code for this UIHintAttribute.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHintImplementation.Equals(System.Object)">
            <summary>
            Determines whether this instance of UIHintAttribute and a specified object,
            which must also be a UIHintAttribute object, have the same value.
            </summary>
            <param name="obj">An System.Object.</param>
            <returns>true if obj is a UIHintAttribute and its value is the same as this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHintImplementation.BuildControlParametersDictionary">
            <summary>
            Validates the input control parameters and throws InvalidOperationException if they are not correct.
            </summary>
            <returns>
            Dictionary of control parameters.
            </returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHintImplementation.UIHint">
            <summary>
            Gets the name of the control that is most appropriate for this associated property or field
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHintImplementation.PresentationLayer">
            <summary>
            Gets the name of the presentation layer that supports the control type in <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHintImplementation.UIHint"/>
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationContext">
            <summary>
            Describes the context in which a validation is being performed.
            </summary>
            <remarks>
            This class contains information describing the instance on which
            validation is being performed.
            <para>
            It supports <see cref="T:System.IServiceProvider"/> so that custom validation
            code can acquire additional services to help it perform its validation.
            </para>
            <para>
            An <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items"/> property bag is available for additional contextual
            information about the validation.  Values stored in <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items"/>
            will be available to validation methods that use this <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/>
            </para>
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.IServiceProvider,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Construct a ValidationContext for a given object instance, an optional <paramref name="serviceProvider"/>, and an optional
            property bag of <paramref name="items"/>.
            </summary>
            <param name="instance">The object instance being validated.  It cannot be null.</param>
            <param name="serviceProvider">
            Optional <see cref="T:System.IServiceProvider"/> to use when <see cref="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)"/> is called.
            If it is null, <see cref="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)"/> will always return null.
            </param>
            <param name="items">Optional set of key/value pairs to make available to consumers via <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items"/>.
            If null, an empty dictionary will be created.  If not null, the set of key/value pairs will be copied into a
            new dictionary, preventing consumers from modifying the original dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is <c>null</c></exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.GetDisplayName">
            <summary>
            Looks up the display name using the DisplayAttribute attached to the respective type or property.
            </summary>
            <returns>A display-friendly name of the member represented by the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName"/>.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)">
            <summary>
            See <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            </summary>
            <param name="serviceType">The type of the service needed.</param>
            <returns>An instance of that service or null if it is not available.</returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance">
            <summary>
            Gets the object instance being validated.  While it will not be null, the state of the instance is indeterminate
            as it might only be partially initialized during validation.
            <para>Consume this instance with caution!</para>
            </summary>
            <remarks>
            During validation, especially property-level validation, the object instance might be in an indeterminate state.
            For example, the property being validated, as well as other properties on the instance might not have been
            updated to their new values.
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectType">
            <summary>
            Gets the type of the object being validated.  It will not be null.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.DisplayName">
            <summary>
            Gets or sets the user-visible name of the type or property being validated.
            </summary>
            <value>If this name was not explicitly set, this property will consult an associated <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>
            to see if can use that instead.  Lacking that, it returns <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName"/>.  The <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance"/>
            type name will be used if MemberName has not been set.
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName">
            <summary>
            Gets or sets the name of the type or property being validated.
            </summary>
            <value>This name reflects the API name of the member being validated, not a localized name.  It should be set
            only for property or parameter contexts.</value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.Items">
            <summary>
            Gets the dictionary of key/value pairs associated with this context.
            </summary>
            <value>This property will never be null, but the dictionary may be empty.  Changes made
            to items in this dictionary will never affect the original dictionary specified in the constructor.</value>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationResult">
            <summary>
            Container class for the results of a validation request.
            <para>
            Use the static <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> to represent successful validation.
            </para>
            </summary>
            <seealso cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.ValidationResult.Success">
            <summary>
            Gets a <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> that indicates Success.
            </summary>
            <remarks>
            The <c>null</c> value is used to indicate success.  Consumers of <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>s
            should compare the values to <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> rather than checking for null.
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String)">
            <summary>
            Constructor that accepts an error message.  This error message would override any error message
            provided on the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>.
            </summary>
            <param name="errorMessage">The user-visible error message.  If null, <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/>
            will use <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)"/> for its error message.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor that accepts an error message as well as a list of member names involved in the validation.
            This error message would override any error message provided on the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>.
            </summary>
            <param name="errorMessage">The user-visible error message.  If null, <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/> 
            will use <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)"/> for its error message.</param>
            <param name="memberNames">The list of member names affected by this result.  If empty,
            <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/> will construct this list from its <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName"/>.  
            This list of member names is meant to be used by presentation layers to indicate which fields are in error.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.MemberNames">
            <summary>
            Gets the collection of member names affected by this result.  The collection may be empty but will never be null.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage">
            <summary>
            Gets the error message for this result.  It may be null.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Validator">
            <summary>
            Helper class to validate objects, properties and other values using their associated <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>
            custom attributes.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Tests whether the given property value is valid.
            </summary>
            <remarks>
            This method will test each <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> associated with the property
            identified by <paramref name="validationContext"/>.  If <paramref name="validationResults"/> is non-null,
            this method will add a <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> to it for each validation failure.
            <para>
            If there is a <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> found on the property, it will be evaluated before all other
            validation attributes.  If the required validator fails then validation will abort, adding that single
            failure into the <paramref name="validationResults"/> when applicable, returning a value of <c>false</c>.
            </para>
            <para>
            If <paramref name="validationResults"/> is null and there isn't a <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> failure,
            then all validators will be evaluated.
            </para>
            </remarks>
            <param name="value">The value to test.</param>
            <param name="validationContext">Describes the property member to validate and provides services and context for the validators.</param>
            <param name="validationResults">Optional collection to receive <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>s for the failures.</param>
            <returns><c>true</c> if the value is valid, <c>false</c> if any validation errors are encountered.</returns>
            <exception cref="T:System.ArgumentException">
            When the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName"/> of <paramref name="validationContext"/> is not a valid property.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Tests whether the given object instance is valid.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s attached to the object instance's type.  It also
            checks to ensure all properties marked with <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> are set.  It does not validate the
            property values of the object.
            <para>
            If <paramref name="validationResults"/> is null, then execution will abort upon the first validation
            failure.  If <paramref name="validationResults"/> is non-null, then all validation attributes will be
            evaluated.
            </para>
            </remarks>
            <param name="instance">The object instance to test.  It cannot be <c>null</c>.</param>
            <param name="validationContext">Describes the object to validate and provides services and context for the validators.</param>
            <param name="validationResults">Optional collection to receive <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>s for the failures.</param>
            <returns><c>true</c> if the object is valid, <c>false</c> if any validation errors are encountered.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="instance"/> doesn't match the
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance"/>on <paramref name="validationContext"/>.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean)">
            <summary>
            Tests whether the given object instance is valid.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s attached to the object instance's type.  It also
            checks to ensure all properties marked with <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> are set.  If <paramref name="validateAllProperties"/>
            is <c>true</c>, this method will also evaluate the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s for all the immediate properties
            of this object.  This process is not recursive.
            <para>
            If <paramref name="validationResults"/> is null, then execution will abort upon the first validation
            failure.  If <paramref name="validationResults"/> is non-null, then all validation attributes will be
            evaluated.
            </para>
            <para>
            For any given property, if it has a <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> that fails validation, no other validators
            will be evaluated for that property.
            </para>
            </remarks>
            <param name="instance">The object instance to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object to validate and provides services and context for the validators.</param>
            <param name="validationResults">Optional collection to receive <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>s for the failures.</param>
            <param name="validateAllProperties">If <c>true</c>, also evaluates all properties of the object (this process is not
            recursive over properties of the properties).</param>
            <returns><c>true</c> if the object is valid, <c>false</c> if any validation errors are encountered.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="instance"/> doesn't match the
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance"/>on <paramref name="validationContext"/>.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            Tests whether the given value is valid against a specified list of <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s.
            </summary>
            <remarks>
            This method will test each <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s specified .  If
            <paramref name="validationResults"/> is non-null, this method will add a <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>
            to it for each validation failure.
            <para>
            If there is a <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> within the <paramref name="validationAttributes"/>, it will
            be evaluated before all other validation attributes.  If the required validator fails then validation will
            abort, adding that single failure into the <paramref name="validationResults"/> when applicable, returning a
            value of <c>false</c>.
            </para>
            <para>
            If <paramref name="validationResults"/> is null and there isn't a <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> failure,
            then all validators will be evaluated.
            </para>
            </remarks>
            <param name="value">The value to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object being validated and provides services and context for the validators.</param>
            <param name="validationResults">Optional collection to receive <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>s for the failures.</param>
            <param name="validationAttributes">The list of <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s to validate this <paramref name="value"/> against.</param>
            <returns><c>true</c> if the object is valid, <c>false</c> if any validation errors are encountered.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if the given property <paramref name="value"/> is not valid.
            </summary>
            <param name="value">The value to test.</param>
            <param name="validationContext">Describes the object being validated and provides services and context for the validators.  It cannot be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">When <paramref name="value"/> is invalid for this property.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if the given <paramref name="instance"/> is not valid.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s attached to the object's type.
            </remarks>
            <param name="instance">The object instance to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object being validated and provides services and context for the validators.  It cannot be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="instance"/> doesn't match the
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance"/> on <paramref name="validationContext"/>.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">When <paramref name="instance"/> is found to be invalid.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)">
            <summary>
            Throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if the given object instance is not valid.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s attached to the object's type.
            If <paramref name="validateAllProperties"/> is <c>true</c> it also validates all the object's properties.
            </remarks>
            <param name="instance">The object instance to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object being validated and provides services and context for the validators.  It cannot be <c>null</c>.</param>
            <param name="validateAllProperties">If <c>true</c>, also validates all the <paramref name="instance"/>'s properties.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="instance"/> doesn't match the
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance"/> on <paramref name="validationContext"/>.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">When <paramref name="instance"/> is found to be invalid.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            Throw a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if the given value is not valid for the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s.
            </summary>
            <remarks>
            This method evaluates the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s supplied until a validation error occurs,
            at which time a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> is thrown.
            <para>
            A <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> within the <paramref name="validationAttributes"/> will always be evaluated first.
            </para>
            </remarks>
            <param name="value">The value to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object being tested.</param>
            <param name="validationAttributes">The list of <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s to validate against this instance.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">When <paramref name="value"/> is found to be invalid.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.CreateValidationContext(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Creates a new <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/> to use to validate the type or a member of
            the given object instance.
            </summary>
            <param name="instance">The object instance to use for the context.</param>
            <param name="validationContext">An parent validation context that supplies an <see cref="T:System.IServiceProvider"/>
            and <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items"/>.</param>
            <returns>A new <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/> for the <paramref name="instance"/> provided.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.CanBeAssigned(System.Type,System.Object)">
            <summary>
            Determine whether the given value can legally be assigned into the specified type.
            </summary>
            <param name="destinationType">The destination <see cref="T:System.Type"/> for the value.</param>
            <param name="value">The value to test to see if it can be assigned as the Type indicated by <paramref name="destinationType"/>.</param>
            <returns><c>true</c> if the assignment is legal.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="destinationType"/> is null.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.EnsureValidPropertyType(System.String,System.Type,System.Object)">
            <summary>
            Determines whether the given value can legally be assigned to the given property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyType">The type of the property.</param>
            <param name="value">The value.  Null is permitted only if the property will accept it.</param>
            <exception cref="T:System.ArgumentException"> is thrown if <paramref name="value"/> is the wrong type for this property.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.GetObjectValidationErrors(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean,System.Boolean)">
            <summary>
            Internal iterator to enumerate all validation errors for the given object instance.
            </summary>
            <param name="instance">Object instance to test.</param>
            <param name="validationContext">Describes the object type.</param>
            <param name="validateAllProperties">if <c>true</c> also validates all properties.</param>
            <param name="breakOnFirstError">Whether to break on the first error or validate everything.</param>
            <returns>A collection of validation errors that result from validating the <paramref name="instance"/> with
            the given <paramref name="validationContext"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="instance"/> doesn't match the
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance"/> on <paramref name="validationContext"/>.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.GetObjectPropertyValidationErrors(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean,System.Boolean)">
            <summary>
            Internal iterator to enumerate all the validation errors for all properties of the given object instance.
            </summary>
            <param name="instance">Object instance to test.</param>
            <param name="validationContext">Describes the object type.</param>
            <param name="validateAllProperties">If <c>true</c>, evaluates all the properties, otherwise just checks that
            ones marked with <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> are not null.</param>
            <param name="breakOnFirstError">Whether to break on the first error or validate everything.</param>
            <returns>A list of <see cref="T:System.ComponentModel.DataAnnotations.Validator.ValidationError"/> instances.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.GetPropertyValues(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Retrieves the property values for the given instance.
            </summary>
            <param name="instance">Instance from which to fetch the properties.</param>
            <param name="validationContext">Describes the entity being validated.</param>
            <returns>A set of key value pairs, where the key is a validation context for the property and the value is its current
            value.</returns>
            <remarks>Ignores indexed properties.</remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.GetValidationErrors(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute},System.Boolean)">
            <summary>
            Internal iterator to enumerate all validation errors for an value.
            </summary>
            <remarks>
            If a <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> is found, it will be evaluated first, and if that fails,
            validation will abort, regardless of the <paramref name="breakOnFirstError"/> parameter value.
            </remarks>
            <param name="value">The value to pass to the validation attributes.</param>
            <param name="validationContext">Describes the type/member being evaluated.</param>
            <param name="attributes">The validation attributes to evaluate.</param>
            <param name="breakOnFirstError">Whether or not to break on the first validation failure.  A
            <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> failure will always abort with that sole failure.</param>
            <returns>The collection of validation errors.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationAttribute,System.ComponentModel.DataAnnotations.Validator.ValidationError@)">
            <summary>
            Tests whether a value is valid against a single <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> using the <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/>.
            </summary>
            <param name="value">The value to be tested for validity.</param>
            <param name="validationContext">Describes the property member to validate.</param>
            <param name="attribute">The validation attribute to test.</param>
            <param name="validationError">The validation error that occurs during validation.  Will be <c>null</c> when the return value is <c>true</c>.</param>
            <returns><c>true</c> if the value is valid.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Validator.ValidationError">
            <summary>
            Private helper class to encapsulate a ValidationAttribute with the failed value and the user-visible
            target name against which it was validated.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationAttributeStore">
            <summary>
            Cache of <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s
            </summary>
            <remarks>
            This internal class serves as a cache of validation attributes and [Display] attributes.
            It exists both to help performance as well as to abstract away the differences between
            Reflection and TypeDescriptor.
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttributeStore.EnsureValidationContext(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Throws an ArgumentException of the validation context is null
            </summary>
            <param name="validationContext">The context to check</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttributeStore.GetTypeValidationAttributes(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Retrieves the type level validation attributes for the given type.
            </summary>
            <param name="validationContext">The context that describes the type.  It cannot be null.</param>
            <returns>The collection of validation attributes.  It could be empty.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttributeStore.GetTypeDisplayAttribute(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Retrieves the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> associated with the given type.  It may be null.
            </summary>
            <param name="validationContext">The context that describes the type.  It cannot be null.</param>
            <returns>The display attribute instance, if present.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttributeStore.GetPropertyValidationAttributes(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Retrieves the set of validation attributes for the property
            </summary>
            <param name="validationContext">The context that describes the property.  It cannot be null.</param>
            <returns>The collection of validation attributes.  It could be empty.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttributeStore.GetPropertyDisplayAttribute(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Retrieves the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> associated with the given property
            </summary>
            <param name="validationContext">The context that describes the property.  It cannot be null.</param>
            <returns>The display attribute instance, if present.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttributeStore.GetPropertyType(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Retrieves the Type of the given property.
            </summary>
            <param name="validationContext">The context that describes the property.  It cannot be null.</param>
            <returns>The type of the specified property</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttributeStore.IsPropertyContext(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether or not a given <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/>'s
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName"/> references a property on
            the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectType"/>.
            </summary>
            <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/> to check.</param>
            <returns><c>true</c> when the <paramref name="validationContext"/> represents a property, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttributeStore.GetTypeStoreItem(System.Type)">
            <summary>
            Retrieves or creates the store item for the given type
            </summary>
            <param name="type">The type whose store item is needed.  It cannot be null</param>
            <returns>The type store item.  It will not be null.</returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationAttributeStore.Instance">
            <summary>
            Gets the singleton <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttributeStore"/>
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationAttributeStore.StoreItem">
            <summary>
            Private abstract class for all store items
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationAttributeStore.TypeStoreItem">
            <summary>
            Private class to store data associated with a type
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationAttributeStore.PropertyStoreItem">
            <summary>
            Private class to store data associated with a property
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationException">
            <summary>
            Exception used for validation using <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationAttribute"/>.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.ComponentModel.DataAnnotations.ValidationResult,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
            <summary>
            Constructor that accepts a structured <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult"/> describing the problem.
            </summary>
            <param name="validationResult">The value describing the validation error</param>
            <param name="validatingAttribute">The attribute that triggered this exception</param>
            <param name="value">The value that caused the validating attribute to trigger the exception</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
            <summary>
            Constructor that accepts an error message, the failing attribute, and the invalid value.
            </summary>
            <param name="errorMessage">The localized error message</param>
            <param name="validatingAttribute">The attribute that triggered this exception</param>
            <param name="value">The value that caused the validating attribute to trigger the exception</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>The long form of this constructor is preferred because it gives better error reporting.</remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String)">
            <summary>
            Constructor that accepts only a localized message
            </summary>
            <remarks>The long form of this constructor is preferred because it gives better error reporting.</remarks>
            <param name="message">The localized message</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that accepts a localized message and an inner exception
            </summary>
            <remarks>The long form of this constructor is preferred because it gives better error reporting</remarks>
            <param name="message">The localized error message</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationAttribute">
            <summary>
            Gets the <see>ValidationAttribute</see> instance that triggered this exception.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult">
            <summary>
            Gets the <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult"/> instance that describes the validation error.
            </summary>
            <value>
            This property will never be null.
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationException.Value">
            <summary>
            Gets the value that caused the validating attribute to trigger the exception
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Aug09\EULA.rtf ===
{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset0 Calibri;}} {\*\generator Msftedit 5.41.21.2509;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\fs36 Microsoft Public License (Ms-PL)\f1\fs22\par \f0 This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.\par \b\fs28 1. Definitions\b0\fs22\par The terms \ldblquote reproduce,\rdblquote  \ldblquote reproduction,\rdblquote  \ldblquote derivative works,\rdblquote  and \ldblquote distribution\rdblquote  have the same meaning here as under U.S. copyright law. A \ldblquote contribution\rdblquote  is the original software, or any additions or changes to the software. A \ldblquote contributor\rdblquote  is any person that distributes its contribution under this license. \ldblquote Licensed patents\rdblquote  are a contributor\rquote s patent claims that read directly on its contribution. \par \b\fs28 2. Grant of Rights\b0\fs22\par (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.\par (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.\par \b\fs28 3. Conditions and Limitations\b0\fs22\par (A) No Trademark License- This license does not grant you rights to use any contributors\rquote  name, logo, or trademarks.\par (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.\par (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.\par (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.\par (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees, or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement.\f1\par
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\SDK Help\en-US\License.rtf ===
{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff36\deff0\stshfdbch11\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman{\*\falt Times};}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New{\*\falt Arial};} {\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol{\*\falt Bookshelf Symbol 3};}{\f10\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings{\*\falt Symbol};} {\f11\froman\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt ?l?r ??\'81\'66c};}{\f36\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma{\*\falt ?? ??};} {\f37\fswiss\fcharset0\fprq2{\*\panose 020b0603020202020204}Trebuchet MS{\*\falt Arial};}{\f39\fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri{\*\falt Times New Roman};} {\f185\froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria{\*\falt Calisto MT};}{\f204\fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}@MS Mincho{\*\falt @MS Gothic};}{\f218\froman\fcharset238\fprq2 Times New Roman CE{\*\falt Times};} {\f219\froman\fcharset204\fprq2 Times New Roman Cyr{\*\falt Times};}{\f221\froman\fcharset161\fprq2 Times New Roman Greek{\*\falt Times};}{\f222\froman\fcharset162\fprq2 Times New Roman Tur{\*\falt Times};} {\f223\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew){\*\falt Times};}{\f224\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic){\*\falt Times};}{\f225\froman\fcharset186\fprq2 Times New Roman Baltic{\*\falt Times};} {\f226\froman\fcharset163\fprq2 Times New Roman (Vietnamese){\*\falt Times};}{\f238\fmodern\fcharset238\fprq1 Courier New CE{\*\falt Arial};}{\f239\fmodern\fcharset204\fprq1 Courier New Cyr{\*\falt Arial};} {\f241\fmodern\fcharset161\fprq1 Courier New Greek{\*\falt Arial};}{\f242\fmodern\fcharset162\fprq1 Courier New Tur{\*\falt Arial};}{\f243\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew){\*\falt Arial};} {\f244\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic){\*\falt Arial};}{\f245\fmodern\fcharset186\fprq1 Courier New Baltic{\*\falt Arial};}{\f246\fmodern\fcharset163\fprq1 Courier New (Vietnamese){\*\falt Arial};} {\f578\fswiss\fcharset238\fprq2 Tahoma CE{\*\falt ?? ??};}{\f579\fswiss\fcharset204\fprq2 Tahoma Cyr{\*\falt ?? ??};}{\f581\fswiss\fcharset161\fprq2 Tahoma Greek{\*\falt ?? ??};}{\f582\fswiss\fcharset162\fprq2 Tahoma Tur{\*\falt ?? ??};} {\f583\fbidi \fswiss\fcharset177\fprq2 Tahoma (Hebrew){\*\falt ?? ??};}{\f584\fbidi \fswiss\fcharset178\fprq2 Tahoma (Arabic){\*\falt ?? ??};}{\f585\fswiss\fcharset186\fprq2 Tahoma Baltic{\*\falt ?? ??};} {\f586\fswiss\fcharset163\fprq2 Tahoma (Vietnamese){\*\falt ?? ??};}{\f587\fswiss\fcharset222\fprq2 Tahoma (Thai){\*\falt ?? ??};}{\f588\fswiss\fcharset238\fprq2 Trebuchet MS CE{\*\falt Arial};} {\f589\fswiss\fcharset204\fprq2 Trebuchet MS Cyr{\*\falt Arial};}{\f591\fswiss\fcharset161\fprq2 Trebuchet MS Greek{\*\falt Arial};}{\f592\fswiss\fcharset162\fprq2 Trebuchet MS Tur{\*\falt Arial};} {\f595\fswiss\fcharset186\fprq2 Trebuchet MS Baltic{\*\falt Arial};}{\f608\fswiss\fcharset238\fprq2 Calibri CE{\*\falt Times New Roman};}{\f609\fswiss\fcharset204\fprq2 Calibri Cyr{\*\falt Times New Roman};} {\f611\fswiss\fcharset161\fprq2 Calibri Greek{\*\falt Times New Roman};}{\f612\fswiss\fcharset162\fprq2 Calibri Tur{\*\falt Times New Roman};}{\f615\fswiss\fcharset186\fprq2 Calibri Baltic{\*\falt Times New Roman};} {\f2068\froman\fcharset238\fprq2 Cambria CE{\*\falt Calisto MT};}{\f2069\froman\fcharset204\fprq2 Cambria Cyr{\*\falt Calisto MT};}{\f2071\froman\fcharset161\fprq2 Cambria Greek{\*\falt Calisto MT};} {\f2072\froman\fcharset162\fprq2 Cambria Tur{\*\falt Calisto MT};}{\f2075\froman\fcharset186\fprq2 Cambria Baltic{\*\falt Calisto MT};}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255; \red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;} {\stylesheet{\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \snext0 \sautoupd Normal;}{\s1\ql \fi-357\li357\ri0\sb120\sa120\widctlpar\jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\adjustright\rin0\lin357\itap0 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext1 \slink15 heading 1;}{\s2\ql \fi-363\li720\ri0\sb120\sa120\widctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl1\outlinelevel1\adjustright\rin0\lin720\itap0 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext2 \slink16 heading 2;}{\s3\ql \fi-357\li1077\ri0\sb120\sa120\widctlpar\tx1077\jclisttab\tx1440\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl2\outlinelevel2\adjustright\rin0\lin1077\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext3 \slink17 heading 3;}{\s4\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl3\outlinelevel3\adjustright\rin0\lin1435\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext4 \slink18 heading 4;}{\s5\ql \fi-357\li1792\ri0\sb120\sa120\widctlpar\tx1792\jclisttab\tx2155\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl4\outlinelevel4\adjustright\rin0\lin1792\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext5 \slink19 heading 5;}{\s6\ql \fi-357\li2149\ri0\sb120\sa120\widctlpar \jclisttab\tx2152\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl5\outlinelevel5\adjustright\rin0\lin2149\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext6 \slink20 heading 6;}{\s7\ql \fi-357\li2506\ri0\sb120\sa120\widctlpar\jclisttab\tx2509\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl6\outlinelevel6\adjustright\rin0\lin2506\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext7 \slink21 heading 7;}{\s8\ql \fi-357\li2863\ri0\sb120\sa120\widctlpar \jclisttab\tx2866\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl7\outlinelevel7\adjustright\rin0\lin2863\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext8 \slink22 heading 8;}{\s9\ql \fi-358\li3221\ri0\sb120\sa120\widctlpar\jclisttab\tx3223\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl8\outlinelevel8\adjustright\rin0\lin3221\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext9 \slink23 heading 9;}{\*\cs10 \additive \slocked \ssemihidden Default Paragraph Font;}{\* \ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv  \ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20 \ltrch\fcs0 \fs20\lang1024\langfe1024\loch\f0\hich\af0\dbch\af11\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\*\cs15  \additive \rtlch\fcs1 \ab\af0\afs32 \ltrch\fcs0 \b\f185\fs32\kerning32 \sbasedon10 \slink1 \slocked Heading 1 Char;}{\*\cs16 \additive \rtlch\fcs1 \ab\af36 \ltrch\fcs0 \b\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\langnp1033\langfenp1033  \sbasedon10 \slink2 \slocked Heading 2 Char;}{\*\cs17 \additive \rtlch\fcs1 \ab\af0\afs26 \ltrch\fcs0 \b\f185\fs26 \sbasedon10 \slink3 \slocked \ssemihidden Heading 3 Char;}{\*\cs18 \additive \rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f39\fs28  \sbasedon10 \slink4 \slocked \ssemihidden Heading 4 Char;}{\*\cs19 \additive \rtlch\fcs1 \ab\ai\af0\afs26 \ltrch\fcs0 \b\i\f39\fs26 \sbasedon10 \slink5 \slocked \ssemihidden Heading 5 Char;}{\*\cs20 \additive \rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\f39  \sbasedon10 \slink6 \slocked \ssemihidden Heading 6 Char;}{\*\cs21 \additive \rtlch\fcs1 \af0\afs24 \ltrch\fcs0 \f39\fs24 \sbasedon10 \slink7 \slocked \ssemihidden Heading 7 Char;}{\*\cs22 \additive \rtlch\fcs1 \ai\af0\afs24 \ltrch\fcs0 \i\f39\fs24  \sbasedon10 \slink8 \slocked \ssemihidden Heading 8 Char;}{\*\cs23 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \f185 \sbasedon10 \slink9 \slocked \ssemihidden Heading 9 Char;}{ \s24\ql \li357\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin357\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext24 Body 1;}{\s25\ql \li720\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext25 Body 2;}{\s26\ql \li1077\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin1077\itap0 \rtlch\fcs1  \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext26 Body 3;}{ \s27\ql \li1435\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin1435\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext27 Body 4;}{\s28\ql \li1803\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin1803\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext28 Body 5;}{\s29\ql \li2160\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin2160\itap0 \rtlch\fcs1  \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext29 Body 6;}{ \s30\ql \li2506\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin2506\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext30 Body 7;}{\s31\ql \li2863\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin2863\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext31 Body 8;}{\s32\ql \li3221\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin3221\itap0 \rtlch\fcs1  \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext32 Body 9;}{\s33\ql \fi-357\li357\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin357\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext33 Bullet 1;}{ \s34\ql \fi-363\li720\ri0\sb120\sa120\widctlpar\jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls2\adjustright\rin0\lin720\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext34 Bullet 2;}{\s35\ql \fi-357\li1077\ri0\sb120\sa120\widctlpar\jclisttab\tx1080\wrapdefault\aspalpha\aspnum\faauto\ls3\adjustright\rin0\lin1077\itap0  \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext35 Bullet 3;}{\s36\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin1435\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext36 Bullet 4;}{ \s37\ql \fi-357\li1792\ri0\sb120\sa120\widctlpar\jclisttab\tx1795\wrapdefault\aspalpha\aspnum\faauto\ls5\adjustright\rin0\lin1792\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext37 Bullet 5;}{\s38\ql \fi-357\li2149\ri0\sb120\sa120\widctlpar\jclisttab\tx2152\wrapdefault\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin2149\itap0  \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext38 Bullet 6;}{\s39\ql \fi-357\li2506\ri0\sb120\sa120\widctlpar \jclisttab\tx2509\wrapdefault\aspalpha\aspnum\faauto\ls7\adjustright\rin0\lin2506\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext39 Bullet 7;}{ \s40\ql \fi-357\li2863\ri0\sb120\sa120\widctlpar\jclisttab\tx2866\wrapdefault\aspalpha\aspnum\faauto\ls8\adjustright\rin0\lin2863\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext40 Bullet 8;}{\s41\ql \fi-358\li3221\ri0\sb120\sa120\widctlpar\jclisttab\tx3223\wrapdefault\aspalpha\aspnum\faauto\ls9\adjustright\rin0\lin3221\itap0  \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon32 \snext41 Bullet 9;}{ \s42\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af36\afs28\alang1025 \ltrch\fcs0 \b\fs28\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext0 Heading EULA;}{\s43\ql \li0\ri0\sb120\sa120\widctlpar\brdrb\brdrs\brdrw10\brsp20 \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af36\afs28\alang1025 \ltrch\fcs0  \b\fs28\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Heading Software Title;}{\s44\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1  \ab\af36\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext44 Preamble;}{\s45\ql \li0\ri0\sb120\sa120\widctlpar\brdrb\brdrs\brdrw10\brsp20  \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext1 Preamble Border;}{ \s46\qc \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext46 Heading Warranty;}{\s47\ql \fi-360\li360\ri0\sb120\sa120\widctlpar\jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls11\outlinelevel0\adjustright\rin0\lin360\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Heading 1 Warranty;}{\s48\ql \fi-360\li720\ri0\sb120\sa120\widctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls11\ilvl1\outlinelevel1\adjustright\rin0\lin720\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext0 Heading 2 Warranty;}{\s49\ql \fi-357\li1077\ri0\sb120\sa120\widctlpar\tx1077\jclisttab\tx1440\wrapdefault\aspalpha\aspnum\faauto\ls10\ilvl2\outlinelevel2\adjustright\rin0\lin1077\itap0 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon3 \snext49 Heading 3 Bold;}{\s50\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin1435\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\ul\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon36 \snext50  Bullet 4 Underline;}{\s51\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\ul\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon35 \snext51 Bullet 3 Underline;}{\s52\ql \li720\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \rtlch\fcs1  \af36\afs19\alang1025 \ltrch\fcs0 \fs19\ul\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon25 \snext52 Body 2 Underline;}{ \s53\ql \li1077\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin1077\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\ul\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon26 \snext53 Body 3 Underline;}{\s54\ql \li0\ri0\sb120\sa120\sl480\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext54 \slink55 Body Text 2;}{\*\cs55 \additive \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f36\fs19 \sbasedon10 \slink54 \slocked \ssemihidden Body Text 2 Char;}{ \s56\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar\jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin1435\itap0 \rtlch\fcs1 \ai\af36\afs19\alang1025 \ltrch\fcs0  \i\fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon36 \snext56 Bullet 4 Italics;}{\*\cs57 \additive \rtlch\fcs1 \af36 \ltrch\fcs0 \f36\lang1033\langfe1033\langnp1033\langfenp1033 \sbasedon10 \slocked  Body 2 Char;}{\*\cs58 \additive \rtlch\fcs1 \af36 \ltrch\fcs0 \f36\lang1033\langfe1033\langnp1033\langfenp1033 \sbasedon10 \slocked Body 3 Char;}{\*\cs59 \additive \rtlch\fcs1 \af36 \ltrch\fcs0 \f36\lang1033\langfe1033\langnp1033\langfenp1033  \sbasedon10 \slocked Body 4 Char;}{\*\cs60 \additive \rtlch\fcs1 \af36 \ltrch\fcs0 \f36\lang1033\langfe1033\langnp1033\langfenp1033 \sbasedon10 \slocked Body 1 Char;}{\s61\ql \li0\ri0\sb120\sa120\widctlpar\brdrt\brdrs\brdrw10\brsp20  \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\rtlgutter\itap0 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon44 \snext61 Preamble Border Above;}{ \s62\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext62 \slink63 \ssemihidden footnote text;}{\*\cs63 \additive \rtlch\fcs1 \af36\afs20 \ltrch\fcs0 \f36\fs20 \sbasedon10 \slink62 \slocked \ssemihidden Footnote Text Char;}{\*\cs64 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \super  \sbasedon10 \ssemihidden footnote reference;}{\s65\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext65 \slink66 \ssemihidden endnote text;}{\*\cs66 \additive \rtlch\fcs1 \af36\afs20 \ltrch\fcs0 \f36\fs20 \sbasedon10 \slink65 \slocked \ssemihidden  Endnote Text Char;}{\*\cs67 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \super \sbasedon10 \ssemihidden endnote reference;}{\s68\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025  \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext68 \slink69 \ssemihidden annotation text;}{\*\cs69 \additive \rtlch\fcs1 \af36\afs20 \ltrch\fcs0 \f36\fs20  \sbasedon10 \slink68 \slocked \ssemihidden Comment Text Char;}{\*\cs70 \additive \rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16 \sbasedon10 \ssemihidden annotation reference;}{\s71\ql \li0\ri0\sa160\sl-240\slmult0 \widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext71 Char;}{ \s72\ql \li0\ri0\sa160\sl-240\slmult0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext72 Char Char Char Char;}{\*\cs73 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \ul\cf2 \sbasedon10 Hyperlink;}{\s74\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1  \af36\afs16\alang1025 \ltrch\fcs0 \fs16\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext74 \slink75 \ssemihidden Balloon Text;}{\*\cs75 \additive \rtlch\fcs1 \af36\afs16 \ltrch\fcs0 \f36\fs16  \sbasedon10 \slink74 \slocked \ssemihidden Balloon Text Char;}{\*\cs76 \additive \rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang1033\langfe1033\langnp1033\langfenp1033 \sbasedon10 Heading 2 Char1;}{\*\cs77 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \sbasedon10  page number;}{\s78\ql \li0\ri0\sa160\sl-240\slmult0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext78 Char Char Char Char1;}{\s79\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af36\afs19\alang1025  \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \snext0 \styrsid8999754 Body 0 Bold;}{\s80\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1  \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \snext0 \styrsid8999754 Body 0;}{\s81\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0  \rtlch\fcs1 \ab\af36\afs20\alang1025 \ltrch\fcs0 \b\fs20\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon68 \snext68 \slink82 \ssemihidden \styrsid12090718 annotation subject;}{\*\cs82 \additive \rtlch\fcs1  \ab\af36\afs20 \ltrch\fcs0 \b\f36\fs20 \sbasedon69 \slink81 \slocked \ssemihidden \styrsid12090718 Comment Subject Char;}{\*\cs83 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \ul\cf12 \sbasedon10 \ssemihidden \styrsid11033338 FollowedHyperlink;}{ \s84\ql \li0\ri0\widctlpar\tqc\tx4680\tqr\tx9360\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext84 \slink85 \ssemihidden \styrsid5664413 header;}{\*\cs85 \additive \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f36\fs19 \sbasedon10 \slink84 \slocked \ssemihidden \styrsid5664413 Header Char;}{\s86\ql \li0\ri0\widctlpar \tqc\tx4680\tqr\tx9360\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext86 \slink87 \ssemihidden \styrsid5664413 footer;}{\*\cs87 \additive \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f36\fs19 \sbasedon10 \slink86 \slocked \ssemihidden \styrsid5664413 Footer Char;}}{\*\latentstyles\lsdstimax156\lsdlockeddef1} {\*\listtable{\list\listtemplateid176468498\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid692200086\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \s41\fi-358\li3221 \jclisttab\tx3223\lin3221 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23 \leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691 \'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;} \f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid196815738}{\list\listtemplateid-1793664660{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers \'01;}\rtlch\fcs1 \ab\ai0\af0 \ltrch\fcs0 \b\i0\fbias0 \s47\fi-360\li360\jclisttab\tx360\lin360 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1  \ab\ai0\af0 \ltrch\fcs0 \b\i0\fbias0 \s48\fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02);}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0  \fbias0 \fi-360\li1080\jclisttab\tx1080\lin1080 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'03(\'03);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0 \fi-360\li1440 \jclisttab\tx1440\lin1440 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'03(\'04);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0 \fi-360\li1800\jclisttab\tx1800\lin1800 } {\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'03(\'05);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc0 \levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0 \fi-360\li2520\jclisttab\tx2520\lin2520 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'07.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\'02\'08.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0 \fi-360\li3240\jclisttab\tx3240\lin3240 }{\listname ;}\listid394402059}{\list\listtemplateid1928476992{\listlevel\levelnfc0\levelnfcn0\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af36\afs20 \ltrch\fcs0 \b\i0\f36\fs20\fbias0 \s49\fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3\levelnfcn3\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1 \levelnfcn1\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \fi-357\li1792\jclisttab\tx2155\lin1792 } {\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2149\jclisttab\tx2152\lin2149 } {\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2506\jclisttab\tx2509\lin2506 } {\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2863\jclisttab\tx2866\lin2863 } {\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-358\li3221\jclisttab\tx3223\lin3221 } {\listname ;}\listid398796681}{\list\listtemplateid789093748\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid-317712510\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0  \s34\fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440 \jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 } {\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693 \'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid477573462}{\list\listtemplateid1948578256{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af0\afs20 \ltrch\fcs0 \b\i0\fs20\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1\levelnfcn1\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \fi-357\li1792\jclisttab\tx2155\lin1792 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname ;}\listid630479929}{\list\listtemplateid67698717 {\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00);}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li360\jclisttab\tx360\lin360 }{\listlevel\levelnfc4\levelnfcn4\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'01);}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\'02\'02);}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li1080\jclisttab\tx1080\lin1080 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'03(\'03);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'03(\'04);}{\levelnumbers\'02;} \rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li1800\jclisttab\tx1800\lin1800 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'03(\'05);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0  \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li2520\jclisttab\tx2520\lin2520  }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'07.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc2\levelnfcn2 \leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'08.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li3240\jclisttab\tx3240\lin3240 }{\listname ;}\listid700712945}{\list\listtemplateid680715664{\listlevel \levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \s1\fi-357\li357\jclisttab\tx360\lin357 }{\listlevel \levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \s2\fi-363\li720\jclisttab\tx720\lin720 }{\listlevel \levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af36\afs20 \ltrch\fcs0 \b\i0\f36\fs20\fbias0 \s3\fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel \levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \s4\fi-358\li1435 \jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1\levelnfcn1\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0  \s5\fi-357\li1792\jclisttab\tx2155\lin1792 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0  \b0\i0\f37\fs20\fbias0 \s6\fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20  \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \s7\fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20  \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \s8\fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20  \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \s9\fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname ;}\listid752163927}{\list\listtemplateid2088029282{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af36\afs20 \ltrch\fcs0 \b\i0\f36\fs20\fbias0 \fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1\levelnfcn1\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \fi-357\li1792\jclisttab\tx2155\lin1792 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname ;}\listid800729109} {\list\listtemplateid-296591990\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid-48305026\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \s40\fi-357\li2863 \jclisttab\tx2866\lin2863 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23 \leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691 \'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;} \f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid810947713}{\list\listtemplateid1567531878{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers \'01;}\rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;} \rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;} \rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;} \rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1\levelnfcn1\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \fi-357\li1792\jclisttab\tx2155\lin1792 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname ;}\listid826823576}{\list\listtemplateid-529391892\listhybrid{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid1843529426\'01\u-3913 ?;}{\levelnumbers;}\loch\af3\hich\af3\dbch\af0\fbias0 \fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0 \leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\leveltemplateid67698689\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\leveltemplateid67698691\'02\'07.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698693\'02\'08.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid919675952}{\list\listtemplateid2088029282{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af37\afs20 \ltrch\fcs0 \b\i0\f37\fs20\fbias0 \fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af36\afs20 \ltrch\fcs0 \b\i0\f36\fs20\fbias0 \fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1\levelnfcn1\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\strike0\f37\fs20\ulnone\fbias0 \fi-357\li1792\jclisttab\tx2155\lin1792 }{\listlevel\levelnfc0\levelnfcn0 \leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4 \leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255 \levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255 \levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af37\afs20 \ltrch\fcs0 \b0\i0\f37\fs20\fbias0 \fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname  ;}\listid974869818}{\list\listtemplateid-1813845996\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid2033377338\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \s39 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440  }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691 \'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;} \f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1219436735}{\list\listtemplateid-41362566\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid-1175557160\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \s36\fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691 \'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;} \f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880 \jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23 \leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1559511898}{\list\listtemplateid-743794326\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid1229593488\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \s35\fi-357\li1077\jclisttab\tx1080\lin1077 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691 \'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;} \f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040 \jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1567649130} {\list\listtemplateid1363474438\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1077\levelindent0{\leveltext\leveltemplateid1637229796\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \s37\fi-357\li1792 \jclisttab\tx1795\lin1792 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1077\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 } {\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1077\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1077\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace1077\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace1077\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1077\levelindent0 {\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1077\levelindent0{\leveltext \leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1077\levelindent0{\leveltext\leveltemplateid67698693 \'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1848404271}{\list\listtemplateid-1802592190\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\leveltemplateid961321180\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \s38\fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693 \'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;} \f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600 \jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 } {\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1877695764}{\list\listtemplateid1186249844\listhybrid{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid1182702444\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \s33\fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc23\levelnfcn23 \leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693 \'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;} \f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760 \jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 } {\listname ;}\listid2054619191}}{\*\listoverridetable{\listoverride\listid2054619191\listoverridecount0\ls1}{\listoverride\listid477573462\listoverridecount0\ls2}{\listoverride\listid1567649130\listoverridecount0\ls3}{\listoverride\listid1559511898 \listoverridecount0\ls4}{\listoverride\listid1848404271\listoverridecount0\ls5}{\listoverride\listid1877695764\listoverridecount0\ls6}{\listoverride\listid1219436735\listoverridecount0\ls7}{\listoverride\listid810947713\listoverridecount0\ls8} {\listoverride\listid196815738\listoverridecount0\ls9}{\listoverride\listid398796681\listoverridecount0\ls10}{\listoverride\listid394402059\listoverridecount0\ls11}{\listoverride\listid700712945\listoverridecount0\ls12}{\listoverride\listid826823576 \listoverridecount0\ls13}{\listoverride\listid630479929\listoverridecount0\ls14}{\listoverride\listid800729109\listoverridecount0\ls15}{\listoverride\listid974869818\listoverridecount0\ls16}{\listoverride\listid752163927\listoverridecount0\ls17} {\listoverride\listid477573462\listoverridecount9{\lfolevel}{\lfolevel}{\lfolevel}{\lfolevel}{\lfolevel}{\lfolevel}{\lfolevel}{\lfolevel}{\lfolevel}\ls18}{\listoverride\listid919675952\listoverridecount9{\lfolevel}{\lfolevel\listoverridestartat \levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel \listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}\ls19}}{\*\pgptbl {\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}}{\*\rsidtbl \rsid4949\rsid17701\rsid269534\rsid345491\rsid480810\rsid535495\rsid555183 \rsid686833\rsid750469\rsid787759\rsid803676\rsid986187\rsid997752\rsid1012355\rsid1070219\rsid1122066\rsid1264931\rsid1391079\rsid1528414\rsid1574943\rsid1845488\rsid1901037\rsid1928288\rsid2177547\rsid2648264\rsid2760050\rsid2784514\rsid3042060 \rsid3159161\rsid3162620\rsid3370445\rsid3416253\rsid3553829\rsid3605935\rsid3611186\rsid3623337\rsid3739474\rsid3760629\rsid3887918\rsid4022155\rsid4066572\rsid4543067\rsid4676768\rsid4724299\rsid4739523\rsid4858179\rsid4865423\rsid4872515\rsid4933881 \rsid4938624\rsid4995346\rsid5180462\rsid5185544\rsid5251506\rsid5440694\rsid5459775\rsid5596195\rsid5649096\rsid5664413\rsid5707678\rsid5918861\rsid6102415\rsid6184270\rsid6447867\rsid6498245\rsid6758513\rsid6965769\rsid7226971\rsid7237359\rsid7290457 \rsid7345747\rsid7433926\rsid7438204\rsid7559903\rsid7603843\rsid7619174\rsid7692510\rsid7824598\rsid7878867\rsid8066538\rsid8068251\rsid8070290\rsid8070493\rsid8078242\rsid8078293\rsid8324055\rsid8325040\rsid8391033\rsid8419363\rsid8458805\rsid8460618 \rsid8461019\rsid8535117\rsid8679684\rsid8738620\rsid8812012\rsid8858237\rsid8999754\rsid9129020\rsid9321702\rsid9651656\rsid9766000\rsid9831002\rsid9836815\rsid9857610\rsid9860938\rsid9964378\rsid10050265\rsid10124158\rsid10163881\rsid10254862 \rsid10707597\rsid10753283\rsid10813938\rsid10833491\rsid10898191\rsid11033338\rsid11142543\rsid11347136\rsid11621510\rsid11754382\rsid11874088\rsid11955386\rsid12000701\rsid12090718\rsid12585274\rsid12596065\rsid12664082\rsid12669038\rsid12678880 \rsid12858202\rsid12914755\rsid13108781\rsid13174101\rsid13334496\rsid13393456\rsid13569148\rsid13908819\rsid13922080\rsid14028737\rsid14114191\rsid14168694\rsid14228190\rsid14235961\rsid14293847\rsid14363573\rsid14491415\rsid14494636\rsid14617721 \rsid14705568\rsid14767805\rsid14771509\rsid14826354\rsid14894057\rsid14897950\rsid14943232\rsid15366221\rsid15404297\rsid15493712\rsid15601712\rsid15680505\rsid15744953\rsid15754718\rsid15872081\rsid15925451\rsid15939916\rsid16082277\rsid16141742 \rsid16395859\rsid16450365\rsid16471711\rsid16606077\rsid16661796\rsid16712132\rsid16729739}{\*\generator Microsoft Word 11.0.0000;}{\info{\title MICROSOFT [PRE-RELEASE ][EVALUATION ]SOFTWARE LICENSE TERMS}{\author tyfuller}{\operator Terisch (LCA)} {\creatim\yr2009\mo5\dy4\hr11\min26}{\revtim\yr2009\mo5\dy4\hr11\min27}{\printim\yr2009\mo5\dy4\hr9\min23}{\version3}{\edmins1}{\nofpages3}{\nofwords1133}{\nofchars6459}{\*\company Microsoft}{\nofcharsws7577}{\vern24613}{\*\password 00000000}} {\*\userprops {\propname db_build_version}\proptype30{\staticval 2.6}{\propname db_charger_document_reference}\proptype3{\staticval 16654}{\propname db_charger_client_name}\proptype30{\staticval tbc}{\propname db_charger_matter_number}\proptype30 {\staticval tbc}{\propname autosave}\proptype30{\staticval false}{\propname owner}\proptype30{\staticval REDMOND\'5cirisl}{\propname db_master_reference}\proptype30{\staticval USETERMS_OTHERSUPER_ENGLISH}{\propname db_master_version}\proptype30 {\staticval 20060329}{\propname db_master_clock}\proptype3{\staticval 559}{\propname db_master_name}\proptype30{\staticval List of Beta, Evaluation or Standalone Software License Terms Languages}{\propname db_master_description}\proptype30{\staticval  } {\propname db_output_filter_reference}\proptype30{\staticval }{\propname db_base_url}\proptype30{\staticval http://usetermassembly/dealbuilder_live/DealBuilderNET/dealbuilder.aspx}{\propname ProductVersion}\proptype30{\staticval 0}{\propname MScom} \proptype11{\staticval 0}{\propname Language}\proptype30{\staticval Bulgarian\'3bChinese (Simplified)\'3bChinese (Traditional)\'3bCroatian\'3bCzech\'3bDanish\'3bDutch\'3bEnglish\'3bEstonian\'3bFinnish\'3bFrench\'3bGerman\'3bGreek\'3bHungarian\'3bItalian \'3bJapanese\'3bKorean\'3bLatvian\'3bNorwegian (Bokmal)\'3bPolish\'3bPortuguese (Brazil)\'3bPortuguese (Portugal)\'3bRomanian\'3bRussian\'3bSe}{\propname CanadaAvail}\proptype11{\staticval 1}{\propname CanadaFrench}\proptype11{\staticval 1}{\propname File Format}\proptype11{\staticval 1}{\propname MandatoryActivation}\proptype11{\staticval 0}{\propname SoftwareType}\proptype30{\staticval Free, Standalone Software}{\propname ProductName}\proptype30{\staticval Silverlight Software Development Kit 1.0} {\propname NumberOfCopies}\proptype30{\staticval Any number of copies}{\propname StandaloneUseRight}\proptype30{\staticval For one user to use any number of copies to design, develop and test the user's programs}{\propname MediaElementsTemplates} \proptype11{\staticval 0}{\propname DistributableCode}\proptype11{\staticval 1}{\propname DistributableCodeType}\proptype30{\staticval Sample Code}{\propname Transfer}\proptype30{\staticval No transfer permitted}{\propname OtherMicrosoftPrograms} \proptype11{\staticval 0}{\propname PrereleaseCode}\proptype11{\staticval 0}{\propname ThirdPartyPrograms}\proptype11{\staticval 0}{\propname Benchmarking}\proptype11{\staticval 0}{\propname MPEG}\proptype11{\staticval 0}{\propname InternetBasedServices} \proptype11{\staticval 0}{\propname InternetBasedServicesFeaturesDesc}\proptype30{\staticval }{\propname db_commit}\proptype30{\staticval ProductVersion}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}{\xmlns2 urn:schemas-micro soft-com:office:smarttags}}\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect  \widowctrl\ftnbj\aenddoc\revisions\donotembedsysfont0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\noxlattoyen\expshrtn\noultrlspc \dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1440\dgvorigin1440\dghshow1\dgvshow1 \jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct \asianbrkrule\rsidroot10813938\newtblstyruls\nogrowautofit\viewbksp1 \fet0{\*\wgrffmtfilter 013f}\ilfomacatclnup0{\*\template C:\\Documents and Settings\\sabrinap\\Application Data\\Microsoft\\Templates\\EULA.dot} {\*\docvar {db_xml}{<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>\'0d<!DOCTYPE Document SYSTEM "..\'5cDocument.DTD">\'0d<Document><Control NAME="db_base_url" TYPE="string"><Value>http://usetermassembly/dealbuilder_live/DealBuilderNET/dealbuilder.aspx</Value></Control><C ontrol NAME="db_folder_form" TYPE="string"><Value>microsoft</Value></Control><Control NAME="db_folder_stylesheet" TYPE="string"><Value>microsoft</Value></Control><Control NAME="db_folder_image" TYPE="string"><Value>microsoft</Value></Control><Control NAME ="db_charger_dataset_reference" TYPE="numeric"><Value>16646</Value></Control><Control NAME="db_charger_client_name" TYPE="string"><Value>tbc</Value></Control><Control NAME="db_charger_matter_number" TYPE="string"><Value>tbc</Value></Control><Control NAME= "db_master_reference" TYPE="string"><Value>USETERMS_OTHERSUPER_ENGLISH</Value></Control><Control NAME="db_master_publish_build" TYPE="string"><Value>2.6</Value></Control><Control NAME="db_master_name" TYPE="string"><Value>List of Beta, Evaluation or Stand alone Software License Terms Languages</Value></Control><Control NAME="db_master_description" TYPE="string"><Value> </Value></Control><Control NAME="db_master_version" TYPE="string"><Value>20060329</Value></Control><Control NAME="db_master_clock" TYPE="nu meric"><Value>559</Value></Control><Control NAME="db_master_refresh" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_host_create_onload" TYPE="string"><Value></Value></Control><Control NAME="db_host_input_onload" TYPE="string"><Value></Value ></Control><Control NAME="db_host_output_onload" TYPE="string"><Value></Value></Control><Control NAME="db_host_exception_onload" TYPE="string"><Value></Value></Control><Control NAME="db_host_javascript" TYPE="string"><Value></Value></Control><Control NAME ="db_transaction_generator" TYPE="string"><Value>unique</Value></Control><Control NAME="db_transaction_prefix" TYPE="string"><Value></Value></Control><Control NAME="db_transaction_suffix" TYPE="string"><Value></Value></Control><Control NAME="db_evaluate"  TYPE="boolean"><Value>true</Value></Control><Control NAME="db_evaluate_logic" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_evaluate_repeat" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_evaluate_cross_reference" TYPE="bool ean"><Value>true</Value></Control><Control NAME="db_evaluate_calculation" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_evaluate_variable" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_evaluate_include" TYPE="boolean"><Valu e>true</Value></Control><Control NAME="db_codeload_include" TYPE="string"><Value>lazy</Value></Control><Control NAME="db_locale_input_date_sequence" TYPE="string"><Value>day_month_year</Value></Control><Control NAME="db_locale_input_thousands_char" TYPE=" string"><Value>,</Value></Control><Control NAME="db_locale_input_decimalpoint_char" TYPE="string"><Value>.</Value></Control><Control NAME="db_locale_output_date_sequence" TYPE="string"><Value>day_month_year</Value></Control><Control NAME="db_locale_output _thousands_char" TYPE="string"><Value>,</Value></Control><Control NAME="db_locale_output_decimalpoint_char" TYPE="string"><Value>.</Value></Control><Control NAME="db_output_hyperlink_target" TYPE="string"><Value>_blank</Value></Control><Control NAME="db_o utput_document_format" TYPE="string"><Value>rtf</Value></Control><Control NAME="db_output_document_redline" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_output_document_redline_cause" TYPE="string"><Value>drafting</Value></Control><Contr ol NAME="db_output_document_drafting_notes" TYPE="string"><Value>indefinite</Value></Control><Control NAME="db_output_document_properties" TYPE="string"><Value>true</Value></Control><Control NAME="db_output_document_property" TYPE="string"><Value>autosave |text|false</Value><Value>owner|text|REDMOND\'5cirisl</Value></Control><Control NAME="db_output_document_variable_xml" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_output_document_termsheet" TYPE="boolean"><Value>false</Value></Control><Cont rol NAME="db_output_document_answers" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_output_document_answers_column" TYPE="string"><Value>prompt</Value><Value>value</Value></Control><Control NAME="db_output_document_answers_row" TYPE="strin g"><Value>page</Value><Value>group</Value><Value>sure</Value><Value>unsure</Value><Value>unknown</Value><Value>deferred</Value></Control><Control NAME="db_output_document_answers_relaunch_transaction_hyperlink" TYPE="boolean"><Value>false</Value></Control ><Control NAME="db_output_document_answers_relaunch_transaction_url" TYPE="string"><Value></Value></Control><Control NAME="db_output_filter_reference" TYPE="string"><Value></Value></Control><Control NAME="db_output_variable_as" TYPE="string"><Value>alias< /Value></Control><Control NAME="db_output_variable_highlights" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_output_variable_sequence" TYPE="string"><Value>ascending</Value></Control><Control NAME="db_output_white_space" TYPE="boolean"><V alue>false</Value></Control><Control NAME="db_output_line_breaks" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_input_show_column_headings" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_input_heading_repetition_column" TYP E="string"><Value>Repeat</Value></Control><Control NAME="db_input_heading_highlight_column" TYPE="string"><Value>Check</Value></Control><Control NAME="db_input_heading_prompt_column" TYPE="string"><Value>Prompt</Value></Control><Control NAME="db_input_hea ding_question_column" TYPE="string"><Value>Answer</Value></Control><Control NAME="db_input_heading_state_column" TYPE="string"><Value>Deferral</Value></Control><Control NAME="db_input_heading_guidance_column" TYPE="string"><Value>Guidance</Value></Control ><Control NAME="db_input_heading_comment_column" TYPE="string"><Value>Insert your comments below</Value></Control><Control NAME="db_input_heading_variable_name_column" TYPE="string"><Value>Variable</Value></Control><Control NAME="db_input_help_url" TYPE=" string"><Value>/dealbuilder_live/help/dealbuilder/help.html</Value></Control><Control NAME="db_input_data_validation" TYPE="string"><Value>onsubmit</Value></Control><Control NAME="db_input_show_page_title" TYPE="boolean"><Value>true</Value></Control><Cont rol NAME="db_input_show_group_title" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_input_show_repetition_column" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_input_show_state_column" TYPE="boolean"><Value>true</Value></Co ntrol><Control NAME="db_input_show_variable_name_column" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_input_show_committed" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_input_show_group_state" TYPE="boolean"><Value>true </Value></Control><Control NAME="db_input_show_group_state_threshold" TYPE="numeric"><Value>2</Value></Control><Control NAME="db_input_state_display" TYPE="string"><Value>dropdown</Value></Control><Control NAME="db_input_state_preselect" TYPE="string"><Va lue>sure</Value></Control><Control NAME="db_input_unknown_option" TYPE="string"><Value>Unknown</Value></Control><Control NAME="db_input_unknown_position" TYPE="string"><Value>first</Value></Control><Control NAME="db_input_other_option" TYPE="string"><Valu e>Other</Value></Control><Control NAME="db_input_other_position" TYPE="string"><Value>last</Value></Control><Control NAME="db_input_other_width_single" TYPE="numeric"><Value>20</Value></Control><Control NAME="db_input_other_width_multiple" TYPE="numeric"> <Value>20</Value></Control><Control NAME="db_input_other_depth_multiple" TYPE="numeric"><Value>4</Value></Control><Control NAME="db_input_other_prompt_multiple" TYPE="string"><Value>Specify others:</Value></Control><Control NAME="db_input_other_prompt_sin gle" TYPE="string"><Value>Specify other:</Value></Control><Control NAME="db_input_other_prompt_break_before" TYPE="numeric"><Value>1</Value></Control><Control NAME="db_input_other_prompt_break_after" TYPE="numeric"><Value>1</Value></Control><Control NAME= "db_input_active_separator_sure_multiline" TYPE="string"><Value>, </Value></Control><Control NAME="db_input_active_separator_sure_multiple" TYPE="string"><Value> and </Value></Control><Control NAME="db_input_active_separator_unsure_multiple" TYPE="string" ><Value> and/or </Value></Control><Control NAME="db_input_active_separator_unsure_single" TYPE="string"><Value> or </Value></Control><Control NAME="db_input_active_boolean_true" TYPE="string"><Value>Yes</Value></Control><Control NAME="db_input_active_bool ean_false" TYPE="string"><Value>No</Value></Control><Control NAME="db_input_repeat_navigation_prefix" TYPE="string"><Value>(%1 of %2)&amp\'3bnbsp\'3b</Value></Control><Control NAME="db_input_repeat_navigation_postfix" TYPE="string"><Value></Value></Control><Con trol NAME="db_input_repeat_navigation_portrayal" TYPE="string"><Value>visible</Value></Control><Control NAME="db_input_repeat_format" TYPE="string"><Value>digits</Value></Control><Control NAME="db_input_repeat_prev" TYPE="string"><Value>Prev</Value></Cont rol><Control NAME="db_input_repeat_next" TYPE="string"><Value>Next</Value></Control><Control NAME="db_input_repeat_separator" TYPE="string"><Value>&amp\'3bnbsp\'3b|&amp\'3bnbsp\'3b</Value></Control><Control NAME="db_input_prompt_compulsory_symbol" TYPE="string"><Valu e>*</Value></Control><Control NAME="db_input_prompt_compulsory_symbol_location" TYPE="string"><Value>after</Value></Control><Control NAME="db_input_question_compulsory_symbol" TYPE="string"><Value></Value></Control><Control NAME="db_input_question_compuls ory_symbol_location" TYPE="string"><Value>after</Value></Control><Control NAME="db_input_disable_when_unknown_compulsory" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_input_disable_when_unknown_non_compulsory" TYPE="boolean"><Value>false< /Value></Control><Control NAME="db_input_simple_alert" TYPE="string"><Value>client_side</Value></Control><Control NAME="db_input_warning_irrelevant_page" TYPE="string"><Value>&lt\'3bU&gt\'3bWARNING:&lt\'3b/U&gt\'3b That page is no longer relevant because of answers g iven on this page or a previous page!</Value></Control><Control NAME="db_input_last_page_next_button" TYPE="string"><Value>enabled</Value></Control><Control NAME="db_input_page_goto_list_content" TYPE="string"><Value>relevant_pages</Value></Control><Varia ble NAME="ProductVersion" TYPE="string" STATUS="sure"><Value>0</Value></Variable><Variable NAME="MScom" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="Language" TYPE="select" STATUS="sure"><Value>Bulgarian</Value><Value>Chinese (S implified)</Value><Value>Chinese (Traditional)</Value><Value>Croatian</Value><Value>Czech</Value><Value>Danish</Value><Value>Dutch</Value><Value>English</Value><Value>Estonian</Value><Value>Finnish</Value><Value>French</Value><Value>German</Value><Value>G reek</Value><Value>Hungarian</Value><Value>Italian</Value><Value>Japanese</Value><Value>Korean</Value><Value>Latvian</Value><Value>Norwegian (Bokmal)</Value><Value>Polish</Value><Value>Portuguese (Brazil)</Value><Value>Portuguese (Portugal)</Value><Value> Romanian</Value><Value>Russian</Value><Value>Serbian (Latin)</Value><Value>Slovak</Value><Value>Slovenian</Value><Value>Spanish</Value><Value>Swedish</Value><Value>Thai</Value><Value>Turkish</Value><Value>Ukrainian</Value></Variable><Variable NAME="Canada Avail" TYPE="boolean" STATUS="sure"><Value>1</Value></Variable><Variable NAME="CanadaFrench" TYPE="boolean" STATUS="sure"><Value>1</Value></Variable><Variable NAME="FileFormat" TYPE="boolean" STATUS="sure"><Value>1</Value></Variable><Variable NAME="Softwa reType" TYPE="select" STATUS="sure"><Value>Free, Standalone Software</Value></Variable><Variable NAME="ProductName" TYPE="string" STATUS="sure"><Value>Silverlight Software Development Kit 1.0</Value></Variable><Variable NAME="NumberOfCopies" TYPE="select"  STATUS="sure"><Value>Any number of copies</Value></Variable><Variable NAME="StandaloneUseRight" TYPE="select" STATUS="sure"><Value>For one user to use any number of copies to design, develop and test the user&apos\'3bs programs</Value></Variable><Variable N AME="MediaElementsTemplates" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="DistributableCode" TYPE="boolean" STATUS="sure"><Value>1</Value></Variable><Variable NAME="DistributableCodeType" TYPE="select" STATUS="sure"><Value>Sampl e Code</Value></Variable><Variable NAME="Transfer" TYPE="select" STATUS="sure"><Value>No transfer permitted</Value></Variable><Variable NAME="OtherMicrosoftPrograms" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="PrereleaseCode" T YPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="ThirdPartyPrograms" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="Benchmarking" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="MPEG"  TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="InternetBasedServices" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable></Document>}}{\*\ftnsep \ltrpar \pard\plain \ltrpar \ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0  \ltrch\fcs0 \insrsid9836815 \chftnsep  \par }}{\*\ftnsepc \ltrpar \pard\plain \ltrpar\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9836815 \chftnsepc  \par }}{\*\aftnsep \ltrpar \pard\plain \ltrpar\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9836815 \chftnsep  \par }}{\*\aftnsepc \ltrpar \pard\plain \ltrpar\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9836815 \chftnsepc  \par }}\ltrpar \sectd \ltrsect\psz1\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid4739523\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3 \pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}} {\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar \s42\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs28\alang1025 \ltrch\fcs0  \b\fs28\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 MICROSOFT SOFTWARE LICENSE TERMS \par }\pard\plain \ltrpar\s43\ql \li0\ri0\sb120\sa120\widctlpar\brdrb\brdrs\brdrw10\brsp20 \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs28\alang1025 \ltrch\fcs0  \b\fs28\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 MICROSOFT }{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid14114191  \hich\af36\dbch\af11\loch\f36 SILVERLIGHT }{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid3159161 \hich\af36\dbch\af11\loch\f36 3}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid986187 \hich\af36\dbch\af11\loch\f36  }{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid14114191  \hich\af36\dbch\af11\loch\f36 SOFTWARE DEVELOPMENT KIT}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par }\pard\plain \ltrpar\s44\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36  These license terms are an agreement between Microsoft Corporation (or based on where you live, one of its affiliates) and you.  Please read them.  They apply to the software named above, which includes the media on which you received it, if any.  The ter \hich\af36\dbch\af11\loch\f36 m\hich\af36\dbch\af11\loch\f36 s also apply to any Microsoft \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s34\ql \fi-363\li720\ri0\sb120\sa120\widctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls2\adjustright\rin0\lin720\itap0\pararsid14114191 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36  \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 updates, \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 supplements, \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 Internet-based services, and \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 support services \par }\pard\plain \ltrpar\s44\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36  for this software, unless other terms accompany those items.  If so, those terms apply. \par }{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 By using the software, \hich\af36\dbch\af11\loch\f36 you accept these terms.  If you do not accept them, do not use the software.}{\rtlch\fcs1 \af36  \ltrch\fcs0 \insrsid14494636  \par \hich\af36\dbch\af11\loch\f36 \hich\f36 The software is a software development kit designed to work with Microsoft Silverlight (collectively \'93\loch\f36 \hich\f36 Microsoft Silverlight\'94\loch\f36 ).  This agreement does not give you any rights to inst \hich\af36\dbch\af11\loch\f36 all or use Microsoft Silverlight.  You must acquire a separate license to acquire such rights.}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid14494636\charrsid14235961  \par }\pard\plain \ltrpar\s61\ql \li0\ri0\sb120\sa120\widctlpar\brdrt\brdrs\brdrw10 \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5251506 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 If you comply with these license terms, you have the rights below. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 1.\tab}}\pard\plain \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\adjustright\rin0\lin357\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 INSTALLATION AND USE RIGHTS.  }{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \cs57\b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36  One user may install and use any number of copies of the soft\hich\af36\dbch\af11\loch\f36 ware on }{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \cs57\b0\insrsid555183\charrsid14235961 \hich\af36\dbch\af11\loch\f36 your devices}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0  \cs57\b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36  to design, develop and test your programs}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \cs57\b0\insrsid3887918\charrsid3887918 \hich\af36\dbch\af11\loch\f36  }{\rtlch\fcs1 \af36 \ltrch\fcs0  \b0\insrsid3887918\charrsid3887918 \hich\af36\dbch\af11\loch\f36 for use with Microsoft Silverlight}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \cs57\b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 .}{\rtlch\fcs1 \af36 \ltrch\fcs0  \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 2.\tab}\hich\af36\dbch\af11\loch\f36 ADDITIONAL LICENSING REQUIREMENTS AND/OR USE RIGHTS. \par {\listtext\pard\plain\ltrpar \s2 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 a.\tab}}\pard\plain \ltrpar\s2\ql \fi-363\li720\ri0\sb120\sa120\widctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl1\outlinelevel1\adjustright\rin0\lin720\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 Distributable Code.}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0  \cs57\b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36   The software contains code that you are permitted to distribute in programs you develop }{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \cs57\b0\insrsid5649096 \hich\af36\dbch\af11\loch\f36  for use with Microsoft Silverlight }{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \cs57\b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 if you comply with the terms below.}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s49 \rtlch\fcs1 \ab\af36\afs20 \ltrch\fcs0 \b\f36\fs20\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 i.\tab}}\pard\plain \ltrpar\s49\ql \fi-357\li1077\ri0\sb120\sa120\widctlpar \jclisttab\tx1077\jclisttab\tx1440\wrapdefault\aspalpha\aspnum\faauto\ls10\ilvl2\outlinelevel2\adjustright\rin0\lin1077\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 Right to Use and Distribute.}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0  \cs58\b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 \hich\f36   The code and text files listed below are \'93\loch\f36 \hich\f36 Distributable Code.\'94}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s50 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s50\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin1435\itap0\pararsid14114191 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\ul\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1  \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 Sample Code}{\rtlch\fcs1 \af36 \ltrch\fcs0 \ulnone\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 \hich\f36  .  You may modify, copy, and distribute the source and object code form of code marked as \'93\loch\f36 \hich\f36 sample.\'94}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid986187  \par {\listtext\pard\plain\ltrpar \s50 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid986187 \loch\af3\dbch\af11\hich\f3 \'b7\tab}}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid986187 \hich\af36\dbch\af11\loch\f36 Silverlight Libraries}{\rtlch\fcs1 \af36  \ltrch\fcs0 \ulnone\insrsid986187 \hich\af36\dbch\af11\loch\f36 \hich\f36 .  You may copy and distribute the object code form of code marked as \'93\loch\f36 \hich\f36 Silverlight Libraries\'94\loch\f36 \hich\f36 , \'93\loch\f36 \hich\f36 Client Libraries \'94\loch\f36 \hich\f36  and \'93\hich\af36\dbch\af11\loch\f36 Server Libraries.}{\rtlch\fcs1 \af36 \ltrch\fcs0 \ulnone\insrsid3887918 \loch\af36\dbch\af11\hich\f36 \'94}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid986187\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s50 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36  Third Party Distribution}{\rtlch\fcs1 \af36 \ltrch\fcs0 \ulnone\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 .  You may permit distributors of your programs to copy and distribute the Distributable Code as part of those programs.}{ \rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14494636  \par {\listtext\pard\plain\ltrpar \s49 \rtlch\fcs1 \ab\af36\afs20 \ltrch\fcs0 \b\f36\fs20\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 ii.\tab}}\pard\plain \ltrpar\s49\ql \fi-357\li1077\ri0\sb120\sa120\widctlpar \jclisttab\tx1077\jclisttab\tx1440\wrapdefault\aspalpha\aspnum\faauto\ls10\ilvl2\outlinelevel2\adjustright\rin0\lin1077\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 Distribution Requirements}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0  \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 .}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \cs58\b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36   For any Distributable Code you distribute, you must}{\rtlch\fcs1 \af36  \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s36\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin1435\itap0\pararsid14114191 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1  \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 add significant primary functionality to it in your programs; \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36  require distributors and external end users to agree to terms that protect it at least as much as this agreement; \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 display your valid copyright notice on your programs; and \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 indemnify, defen\hich\af36\dbch\af11\loch\f36  d, and hold harmless Microsoft from any claims, including attorneys\hich\f36 \rquote \loch\f36  fees, related to the distribution or use of your programs. \par {\listtext\pard\plain\ltrpar \s49 \rtlch\fcs1 \ab\af36\afs20 \ltrch\fcs0 \b\f36\fs20\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 iii.\tab}}\pard\plain \ltrpar\s49\ql \fi-357\li1077\ri0\sb120\sa120\widctlpar \jclisttab\tx1077\jclisttab\tx1440\wrapdefault\aspalpha\aspnum\faauto\ls10\ilvl2\outlinelevel2\adjustright\rin0\lin1077\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 Distribution Restrictions.}{\rtlch\fcs1 \af36 \ltrch\fcs0  \cs58\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36   }{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \cs58\b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 You may not}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s36\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin1435\itap0\pararsid14114191 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1  \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 alter any copyright, trademark or patent notice in the Distributable Code; \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 use \hich\af36\dbch\af11\loch\f36 Microsoft\hich\f36 \rquote \loch\f36  s trademarks in your }{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid14228190 \hich\af36\dbch\af11\loch\f36 programs}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid986187 \loch\af36\dbch\af11\hich\f36 \rquote \loch\f36  }{\rtlch\fcs1 \af36 \ltrch\fcs0  \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 names or in a way that suggests your }{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid14228190 \hich\af36\dbch\af11\loch\f36 programs }{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \hich\af36\dbch\af11\loch\f36 come from or are endorsed by Microsoft; \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 include Distributable Code in malicious, deceptive or unlawful programs; or \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36  modify or distribute the source code of any Distributable Code so that any part of it becomes subject to an Excluded License.  An Excluded License is one that requires, as a condition of use, modification or distribution, that \par {\listtext\pard\plain\ltrpar \s37 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s37\ql \fi-357\li1792\ri0\sb120\sa120\widctlpar \jclisttab\tx1795\wrapdefault\aspalpha\aspnum\faauto\ls5\adjustright\rin0\lin1792\itap0\pararsid14114191 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1  \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 the code be disclosed or di\hich\af36\dbch\af11\loch\f36 stributed in source code form; or \par {\listtext\pard\plain\ltrpar \s37 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 others have the right to modify it. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\caps\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 3.\tab}}\pard\plain \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\adjustright\rin0\lin357\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  {\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 Scope of License}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 .}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0  \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36   The software is licensed, not sold. }{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid6965769 \hich\af36\dbch\af11\loch\f36  }{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0  \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 This \hich\af36\dbch\af11\loch\f36  agreement only gives you some rights to use the software.  Microsoft reserves all other rights.  Unless applicable law gives you more rights despite this limitation, you may use the software only as expressly permitted in this agreement.  In doing so, you \hich\af36\dbch\af11\loch\f36  \hich\af36\dbch\af11\loch\f36 must comply with any technical limitations in the software that only allow you to use it in certain ways. You may not}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s34\ql \fi-363\li720\ri0\sb120\sa120\widctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls2\adjustright\rin0\lin720\itap0\pararsid14114191 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36  \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 work around any technical limitations in the software}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid14494636 \hich\af36\dbch\af11\loch\f36 ;}{\rtlch\fcs1 \af36 \ltrch\fcs0  \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36  reverse engineer, decompile or disassemble the software, except and only to the\hich\af36\dbch\af11\loch\f36  extent that applicable law expressly permits, despite this limitation}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid14494636  \hich\af36\dbch\af11\loch\f36 ;}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 publish the software for others to copy}{\rtlch\fcs1 \af36 \ltrch\fcs0  \insrsid14494636 \hich\af36\dbch\af11\loch\f36 ;}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 rent, lease or lend the software}{\rtlch\fcs1 \af36 \ltrch\fcs0  \insrsid14494636 \hich\af36\dbch\af11\loch\f36 ; or}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36 transfer the software or this agreement to any third party}{\rtlch\fcs1  \af36 \ltrch\fcs0 \insrsid14494636 \hich\af36\dbch\af11\loch\f36 .}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 4.\tab}}\pard\plain \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0 \pnrauth2\pnrdate651502299\pnrstart0\pnrxst2\pnrxst0\pnrxst0\pnrxst0\pnrxst46\pnrxst0\pnrstop6\pnrstart1\pnrrgb1\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrstop9\pnrstart2\pnrnfc0\pnrnfc4\pnrnfc2\pnrnfc3\pnrnfc1\pnrnfc0 \pnrnfc4\pnrnfc255\pnrnfc255\pnrnfc0\pnrnfc0\pnrnfc4\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrstop18\pnrstart3\pnrpnbr4\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0 \pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrstop36 \adjustright\rin0\lin357\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \hich\af36\dbch\af11\loch\f36 BACKUP COPY.}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36   You may make one backup\hich\af36\dbch\af11\loch\f36   copy of the software.  You may use it only to reinstall the software.}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 5.\tab}}\pard \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0 \pnrauth2\pnrdate651502299\pnrstart0\pnrxst2\pnrxst0\pnrxst0\pnrxst0\pnrxst46\pnrxst0\pnrstop6\pnrstart1\pnrrgb1\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrstop9\pnrstart2\pnrnfc0\pnrnfc4\pnrnfc2\pnrnfc3\pnrnfc1\pnrnfc0 \pnrnfc4\pnrnfc255\pnrnfc255\pnrnfc0\pnrnfc0\pnrnfc5\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrstop18\pnrstart3\pnrpnbr5\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0 \pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrstop36 \adjustright\rin0\lin357\itap0\pararsid14114191 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 DOCUMENTATION.}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9964378\charrsid14235961  \hich\af36\dbch\af11\loch\f36   Any person that has valid access to your computer or internal network may copy and use the documentation for your internal, reference purposes.}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9964378\charrsid5918861  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\f37\fs20\insrsid5918861 \hich\af37\dbch\af11\loch\f37 6.\tab}}\pard \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0 \pnrauth2\pnrdate651502299\pnrstart0\pnrxst2\pnrxst0\pnrxst0\pnrxst0\pnrxst46\pnrxst0\pnrstop6\pnrstart1\pnrrgb1\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrstop9\pnrstart2\pnrnfc0\pnrnfc4\pnrnfc2\pnrnfc3\pnrnfc1\pnrnfc0 \pnrnfc4\pnrnfc255\pnrnfc255\pnrnfc0\pnrnfc0\pnrnfc6\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrstop18\pnrstart3\pnrpnbr6\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0 \pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrstop36\adjustright\rin0\lin357\itap0\pararsid5918861  {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid5918861 \hich\af36\dbch\af11\loch\f36 NOTICE\hich\af36\dbch\af11\loch\f36  ABOUT THE H.264\hich\af36\dbch\af11\loch\f36 /AVC VISUAL STANDARD, AND THE VC-1 VIDEO STANDARD.  }{\rtlch\fcs1 \af36 \ltrch\fcs0  \b0\insrsid5918861 \hich\af36\dbch\af11\loch\f36 This software may include H.264/MPEG-4 AVC and/or VC-1.  }{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861\charrsid3623337 \hich\af36\dbch\af11\loch\f36 MPEG LA, L.L.C. requires this notice:}{\rtlch\fcs1  \af36 \ltrch\fcs0 \insrsid5918861 \hich\af36\dbch\af11\loch\f36   \par }\pard \ltrpar\s1\ql \li357\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin357\itap0\pararsid5918861 {\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861 \hich\af36\dbch\af11\loch\f36 THIS PRODU}{\rtlch\fcs1  \af36 \ltrch\fcs0 \b0\insrsid5918861\charrsid3623337 \hich\af36\dbch\af11\loch\f36 CT IS LICENSED UNDER THE }{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861 \hich\af36\dbch\af11\loch\f36 AVC AND THE VC-1}{\rtlch\fcs1 \af36 \ltrch\fcs0  \b0\insrsid5918861\charrsid3623337 \hich\af36\dbch\af11\loch\f36  PATENT PORTFOLIO LICENSES FOR THE PERSONAL AND NON-COMME\hich\af36\dbch\af11\loch\f36 RCIAL USE OF A CONSUMER}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861  \hich\af36\dbch\af11\loch\f36  TO (1}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861\charrsid3623337 \hich\af36\dbch\af11\loch\f36 ) ENCODE VIDEO IN COMPLIANCE WITH THE }{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861 \hich\af36\dbch\af11\loch\f36  ABOVE}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861\charrsid3623337 \hich\af36\dbch\af11\loch\f36  STANDARD}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861 \hich\af36\dbch\af11\loch\f36 S}{\rtlch\fcs1 \af36 \ltrch\fcs0  \b0\insrsid5918861\charrsid3623337 \hich\af36\dbch\af11\loch\f36 \hich\f36  (\'93}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861 \hich\af36\dbch\af11\loch\f36 VIDEO STANDARDS}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861\charrsid3623337  \loch\af36\dbch\af11\hich\f36 \'94\loch\f36 ) }{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861 \hich\af36\dbch\af11\loch\f36 AND/OR (2}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861\charrsid3623337 \hich\af36\dbch\af11\loch\f36 ) DECODE }{ \rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid15680505 \hich\af36\dbch\af11\loch\f36 AVC}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861 \hich\af36\dbch\af11\loch\f36  AND VC-1 VIDEO }{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861\charrsid3623337  \hich\af36\dbch\af11\loch\f36 THAT WAS ENCODED BY A CONSUMER ENGAGED IN A PERSONAL AND NON-COMMERCIAL ACTIVITY AND/OR WAS OBTAINED FROM A VIDEO PR\hich\af36\dbch\af11\loch\f36 OVIDER LICENSED TO PROVIDE }{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861  \hich\af36\dbch\af11\loch\f36 SUCH}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861\charrsid3623337 \hich\af36\dbch\af11\loch\f36  VIDEO.  NO LICENSE IS GRANTED OR SHALL BE IMPLIED FOR ANY OTHER USE.}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861  \hich\af36\dbch\af11\loch\f36   ADDITIONAL INFORMATION MAY BE OBTAINED FROM MPEG LA, L.L.C. SEE }{\field\flddirty{\*\fldinst {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid5918861 \hich\af36\dbch\af11\loch\f36 HYPERLINK "HTTP://WWW.MPEGLA.COM"}{\rtlch\fcs1 \af36  \ltrch\fcs0 \insrsid5596195 {\*\datafield  00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b4600000068007400740070003a002f002f007700770077002e006d007000650067006c0061002e0063006f006d002f000000795881f43b1d7f48af2c825dc485276300000000a5ab000000000000}}}{\fldrslt { \rtlch\fcs1 \af36 \ltrch\fcs0 \cs73\b0\ul\cf2\insrsid5918861\charrsid13922080 \hich\af36\dbch\af11\loch\f36 HTTP://WWW.MPEGLA.COM}}}\sectd \psz1\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid4739523\sftnbj {\rtlch\fcs1 \af36 \ltrch\fcs0  \b0\insrsid2760050\charrsid2760050 \hich\af36\dbch\af11\loch\f36 .}{\rtlch\fcs1 \af36 \ltrch\fcs0 \b0\insrsid5918861\charrsid2760050  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\caps\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 7.\tab}}\pard \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0 \pnrauth2\pnrdate651502299\pnrstart0\pnrxst2\pnrxst0\pnrxst0\pnrxst0\pnrxst46\pnrxst0\pnrstop6\pnrstart1\pnrrgb1\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrrgb0\pnrstop9\pnrstart2\pnrnfc0\pnrnfc4\pnrnfc2\pnrnfc3\pnrnfc1\pnrnfc0 \pnrnfc4\pnrnfc255\pnrnfc255\pnrnfc0\pnrnfc0\pnrnfc7\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrstop18\pnrstart3\pnrpnbr7\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0 \pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrstop36 \adjustright\rin0\lin357\itap0\pararsid14114191 {\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 Export Restrictions}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \hich\af36\dbch\af11\loch\f36 .}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36   The software is subject to {\*\xmlopen\xmlns2{\factoidname country-region}}{\*\xmlopen\xmlns2{\factoidname place}} \hich\af36\dbch\af11\loch\f36 United States{\*\xmlclose}{\*\xmlclose}  export laws and regulations.  You must comply with all domestic and international export laws and regulations that apply to the software.  These laws include restrictions on destinations, end us\hich\af36\dbch\af11\loch\f36  ers and end use.  For additional information, see }{\field\flddirty{\*\fldinst {\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \cs73\b0\ul\cf2\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36  HYPERLINK "http://www.microsoft.com/exporting" }{\rtlch\fcs1  \ab0\af0 \ltrch\fcs0 \cs73\b0\ul\cf2\insrsid5596195\charrsid14235961 {\*\datafield  00d0c9ea79f9bace118c8200aa004ba90b02000000170000001c0000007700770077002e006d006900630072006f0073006f00660074002e0063006f006d002f006500780070006f007200740069006e0067000000e0c9ea79f9bace118c8200aa004ba90b4600000068007400740070003a002f002f007700770077002e00 6d006900630072006f0073006f00660074002e0063006f006d002f006500780070006f007200740069006e006700000000000000000000000000000000000000000000000000000000e10000000000000000001800000000000000000000000000000000000000000000000000000000000000000000140000000000000000 00007220000000010000000000002000000000004e000000000000295a7322000000000000ff000200445700c900000000}}}{\fldrslt {\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \cs73\b0\ul\cf2\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 www.microsoft.com/exporting}}} \sectd \psz1\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid4739523\sftnbj {\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 .}{\rtlch\fcs1 \af36 \ltrch\fcs0 \cs73\insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\caps\f37\fs20\insrsid9651656\charrsid14235961 \hich\af37\dbch\af11\loch\f37 8.\tab}}\pard \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\adjustright\rin0\lin357\itap0\pararsid14114191 {\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9651656\charrsid14235961 \hich\af36\dbch\af11\loch\f36 SUPPORT SERVICES.}{\rtlch\fcs1 \af36  \ltrch\fcs0 \insrsid9651656\charrsid14235961 \hich\af36\dbch\af11\loch\f36  }{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid6965769 \hich\af36\dbch\af11\loch\f36  }{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9651656\charrsid14235961  \hich\af36\dbch\af11\loch\f36 \hich\f36 Because this software is \'93\loch\f36 \hich\f36 as is,\'94\loch\f36  we may not provide support services for it.}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9651656\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\caps\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 9.\tab}}{\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9964378\charrsid14235961  \hich\af36\dbch\af11\loch\f36 Entire Agreement.}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36   This\hich\af36\dbch\af11\loch\f36   agreement, and the terms for supplements, updates, Internet-based services and support services that you use, are the entire agreement for the software and support services. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\caps\f37\fs20\cf1\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 10.\tab}}\pard \ltrpar \s1\ql \fi-360\li360\ri0\sb120\sa120\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\adjustright\rin0\lin360\itap0\pararsid14114191 {\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\cf1\insrsid9964378\charrsid14235961  \hich\af36\dbch\af11\loch\f36 Applicable Law}{\rtlch\fcs1 \af36 \ltrch\fcs0 \cf1\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 . \par {\*\xmlopen\xmlns2{\factoidname country-region}}{\*\xmlopen\xmlns2{\factoidname place}}{\listtext\pard\plain\ltrpar \s2 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 a.\tab} }\pard\plain \ltrpar\s2\ql \fi-363\li720\ri0\sb120\sa120\widctlpar\jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl1\outlinelevel1\adjustright\rin0\lin720\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 United States{\*\xmlclose}{\*\xmlclose}.}{\rtlch\fcs1 \ab0\af36  \ltrch\fcs0 \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36   If you acquired t\hich\af36\dbch\af11\loch\f36 he software in the {\*\xmlopen\xmlns2{\factoidname country-region}}\hich\af36\dbch\af11\loch\f36 United States{\*\xmlclose},  {\*\xmlopen\xmlns2{\factoidname State}}{\*\xmlopen\xmlns2{\factoidname place}}\hich\af36\dbch\af11\loch\f36 Washington{\*\xmlclose}{\*\xmlclose}  state law governs the interpretation of this agreement and applies to claims for breach of it, regardless of conflict of laws principles.  The laws of the state where you live govern all \hich\af36\dbch\af11\loch\f36  other claims, including claims under state consumer protection laws, unfair competition laws, and in tort.}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s2 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 b.\tab}\hich\af36\dbch\af11\loch\f36 Outside the {\*\xmlopen\xmlns2{\factoidname country-region}} {\*\xmlopen\xmlns2{\factoidname place}}\hich\af36\dbch\af11\loch\f36 United States{\*\xmlclose}{\*\xmlclose}.}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36    If you acquired the software in any other country, the laws of that country apply.}{\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\caps\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 11.\tab}}\pard\plain \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\adjustright\rin0\lin357\itap0\pararsid14114191 \rtlch\fcs1 \ab\af36\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033  {\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 Legal Effect\hich\af36\dbch\af11\loch\f36 .}{\rtlch\fcs1 \ab0\af36 \ltrch\fcs0 \b0\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36    This agreement describes certain legal rights.  You may have other rights under the laws of your country.  You may also have rights with respect to the party from whom you acquired the software.  This agreement does not change your rights under the laws \hich\af36\dbch\af11\loch\f36  of your country if the laws of your country do not permit it to do so.}{\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\caps\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 12.\tab}\hich\af36\dbch\af11\loch\f36 Disclaimer of Warranty.}{\rtlch\fcs1 \af36 \ltrch\fcs0  \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36   }{\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9964378\charrsid3159161 \hich\af36\dbch\af11\loch\f36 \hich\f36 The software is licensed \'93\loch\f36 \hich\f36 as-is.\'94\loch\f36    You bear the risk of using it.  Microsoft gives no express warranties, guarantees or conditions.  You may have additiona\hich\af36\dbch\af11\loch\f36  l consumer rights under your local laws which this agreement cannot change.  To the extent permitted under your local laws, Microsoft excludes the implied warranties of merchantability, fitness for a particular purpose and non-infringement}{\rtlch\fcs1  \af36 \ltrch\fcs0 \insrsid9964378\charrsid3159161 \hich\af36\dbch\af11\loch\f36 .}{\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9964378\charrsid14235961  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af37\afs20 \ltrch\fcs0 \b\caps\f37\fs20\insrsid9964378\charrsid14235961 \hich\af37\dbch\af11\loch\f37 13.\tab}}\pard \ltrpar\s1\ql \fi-360\li360\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\adjustright\rin0\lin360\itap0\pararsid14114191 {\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 Limitation  \hich\af36\dbch\af11\loch\f36 on and Exclusion of Remedies and Damages.  }{\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9964378\charrsid3159161 \hich\af36\dbch\af11\loch\f36  You can recover from Microsoft and its suppliers only direct damages up to U.S. $5.00.  You cannot recover any other damages, including consequential, lost profits, special, indirect or incidental damages}{\rtlch\fcs1 \af36 \ltrch\fcs0  \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 .}{\rtlch\fcs1 \af36 \ltrch\fcs0 \caps\insrsid9964378\charrsid14235961  \par }\pard\plain \ltrpar\s24\ql \li357\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin357\itap0\pararsid14114191 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 This li\hich\af36\dbch\af11\loch\f36 mitation applies to \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s34\ql \fi-363\li720\ri0\sb120\sa120\widctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls2\adjustright\rin0\lin720\itap0\pararsid14114191 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36  \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36 anything related to the software, services, content (including code) on third party Internet sites, or third party programs; and \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af36\afs19 \ltrch\fcs0 \f3\fs19\insrsid9964378\charrsid14235961 \loch\af3\dbch\af11\hich\f3 \'b7\tab}\hich\af36\dbch\af11\loch\f36  claims for breach of contract, breach of warranty, guarantee or condition, strict liability, negligence\hich\af36\dbch\af11\loch\f36 , or other tort to the extent permitted by applicable law. \par }\pard\plain \ltrpar\ql \li360\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0\pararsid14114191 \rtlch\fcs1 \af36\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\af36\hich\af36\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af36 \ltrch\fcs0 \insrsid9964378\charrsid14235961 \hich\af36\dbch\af11\loch\f36  It also applies even if Microsoft knew or should have known about the possibility of the damages.  The above limitation or exclusion may not apply to you because your country may not allow the excl\hich\af36\dbch\af11\loch\f36  usion or limitation of incidental, consequential or other damages.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1928288\charrsid14235961  \par }}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\ReferenceAssemblies\system.windows.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Internal.IManagedFrameworkInternalHelper">
      <summary>This type is not intended to be used or implemented by your code. </summary>
    </member>
    <member name="M:Microsoft.Internal.IManagedFrameworkInternalHelper.SetContextEx(System.IntPtr)">
      <summary>[SECURITY CRITICAL] This method is not intended to be used or implemented by your code. </summary>
      <param name="context">Do not use.</param>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>Represents a dynamic data collection that provides notifications when items get added, removed, or when the entire list is refreshed.</summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> class.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>Occurs when an item in the collection changes, or the entire collection changes.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an item into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> event with the provided event data.</summary>
      <param name="e">The event data to report in the event.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> event with the provided arguments.</summary>
      <param name="e">The event data to report in the event.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>Occurs when a property on an individual item in the collection changes.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>Removes the item at the specified index of the collection.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>Represents a read-only <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
      <typeparam name="T">The type of objects that the collection holds.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> class that serves as a wrapper for the specified <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
      <param name="list">The collection to wrap.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>Occurs when an item is added or removed.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> event. </summary>
      <param name="args">The event data.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> event. </summary>
      <param name="args">The event data.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>For a description of this member, see <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>For a description of this member, see <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>Notifies listeners of dynamic changes to a collection, such as when items are added and removed, or the entire collection object is reset.</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>Occurs when the items list of the collection has changed, or the collection is reset.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>Describes the action that caused a <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event. </summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>One or more items were added to the collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>One or more items were removed from the collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>One or more items were replaced in the collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>The content of the collection changed dramatically.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>Provides event data for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> class, specifying the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> value.</summary>
      <param name="action">The action value, as a value of the enumeration. This should always be <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />; see Remarks.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> is not <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> class that describes an <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> change.</summary>
      <param name="action">The action value, as a value of the enumeration. This should be <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />; see Remarks.</param>
      <param name="changedItem">The item that is affected by the change.</param>
      <param name="index">The index where the change occurred.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> is not <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> class that describes a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> change.</summary>
      <param name="action">The action value, as a value of the enumeration. This should be <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />; see Remarks.</param>
      <param name="newItem">The new item that is replacing the original item.</param>
      <param name="oldItem">The original item that is replaced.</param>
      <param name="index">The index of the item being replaced.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> is not <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>Gets the description of the action that caused the event. </summary>
      <returns>The description of the action that caused the event, as a value of the enumeration.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>Gets the items affected by an action.</summary>
      <returns>The list of items affected by an action. The default is null.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>Gets the index at which the change occurred.</summary>
      <returns>The index at which the change occurred.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>Gets the item affected by a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.</summary>
      <returns>The list of items affected by a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>Gets the index at which the change occurred for a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.</summary>
      <returns>The index at which the change occurred for a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>Represents the method that handles events that implement the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class and sets the <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property to true.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class and sets the <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property to the specified value.</summary>
      <param name="isCancelable">true to disable the ability to cancel a <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change; false to enable cancellation.</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>Gets or sets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change should be canceled. </summary>
      <returns>true if the event should be canceled; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property value is false.</exception>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change can be canceled. </summary>
      <returns>true if the event can be canceled; false if the event cannot be canceled.</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>Represents a method that can handle the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event of an <see cref="T:System.ComponentModel.ICollectionView" /> implementation. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.ComponentModel.DesignerProperties">
      <summary>Provides attached properties that can be used to communicate with a designer.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> attached property for the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> property value for the element.</returns>
      <param name="element">The element from which the property value is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.DesignerProperties.IsInDesignMode">
      <summary>Gets or sets whether a <see cref="T:System.Windows.DependencyObject" /> is running in the context of a designer.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether a <see cref="T:System.Windows.DependencyObject" /> is running in the context of a designer.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignerProperties.IsInDesignModeProperty">
      <summary>Identifies the <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> attached property.</summary>
    </member>
    <member name="P:System.ComponentModel.DesignerProperties.IsInDesignTool">
      <summary>Gets a value that indicates whether the element is running in the context of a designer. </summary>
      <returns>true if the element is running in the context of a designer; otherwise, false. </returns>
    </member>
    <member name="M:System.ComponentModel.DesignerProperties.SetIsInDesignMode(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the value of the <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> attached property to a specified element. </summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="value">The needed <see cref="T:System.Boolean" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>Provides a base class for defining how to divide the items in a collection into groups.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.GroupDescription" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>Returns the group name or names for the specified item.</summary>
      <returns>An object that represents the group name or names.</returns>
      <param name="item">The item to return the group name for.</param>
      <param name="level">The level of the group within the grouping hierarchy.</param>
      <param name="culture">The culture information that affects grouping.</param>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>Gets the collection of group names.</summary>
      <returns>The collection of group names. </returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>Indicates whether the specified item belongs in the specified group.</summary>
      <returns>true if the item belongs in the group; otherwise, false.</returns>
      <param name="groupName">The name of the group to check.</param>
      <param name="itemName">The name of the item to check.</param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> event. </summary>
      <param name="e">The event data.</param>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>Occurs when a property value has changed.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>Indicates whether the group names should be serialized.</summary>
      <returns>true if the group names should be serialized; otherwise, false.</returns>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>For a description of this member, see <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>Gets a value that indicates whether this view supports filtering by way of the <see cref="P:System.ComponentModel.ICollectionView.Filter" /> property.</summary>
      <returns>true if this view supports filtering; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>Gets a value that indicates whether this view supports grouping by way of the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> property.</summary>
      <returns>true if this view supports grouping; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>Gets a value that indicates whether this view supports sorting by way of the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> property.</summary>
      <returns>true if this view supports sorting; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>Indicates whether the specified item belongs to this collection view. </summary>
      <returns>true if the item belongs to this collection view; otherwise, false.</returns>
      <param name="item">The object to check. </param>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>Gets or sets the cultural information for any operations of the view that may differ by culture, such as sorting.</summary>
      <returns>The culture information to use during culture-sensitive operations. </returns>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>Occurs after the current item has been changed.</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>Occurs before the current item changes.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>Gets the current item in the view.</summary>
      <returns>The current item in the view or null if there is no current item.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
      <returns>The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh. </summary>
      <returns>The typical usage is to create a using scope with an implementation of this method and then include multiple view-changing calls within the scope. The implementation should delay automatic refresh until after the using scope exits. </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>Gets or sets a callback that is used to determine whether an item is appropriate for inclusion in the view. </summary>
      <returns>A method that is used to determine whether an item is appropriate for inclusion in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view. </summary>
      <returns>A collection of objects that describe how the items in the collection are grouped in the view. </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>Gets the top-level groups.</summary>
      <returns>A read-only collection of the top-level groups or null if there are no groups.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection.</summary>
      <returns>true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the start of the collection.</summary>
      <returns>true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the start of the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>Gets a value that indicates whether the view is empty.</summary>
      <returns>true if the view is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>Sets the specified item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
      <param name="item">The item to set as the current item.</param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
      <param name="position">The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> to.</param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view to the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>Recreates the view.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription" /> instances that describe how the items in the collection are sorted in the view.</summary>
      <returns>A collection of values that describe how the items in the collection are sorted in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>Gets the underlying collection.</summary>
      <returns>The underlying collection.</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>Defines the direction and the property name that will be used as the criteria for sorting a collection.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescription" /> structure. </summary>
      <param name="propertyName">The name of the property to sort the list by.</param>
      <param name="direction">The sort order.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="propertyName" /> parameter is empty.-or-The <paramref name="direction" /> parameter does not specify a valid value.</exception>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>Gets or sets a value that indicates whether to sort in ascending or descending order.</summary>
      <returns>A value that indicates the sort direction. </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.SortDescription.IsSealed" /> is true.</exception>
      <exception cref="T:System.ArgumentException">The specified value is not a valid sort direction.</exception>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>Compares the specified instance and the current instance of <see cref="T:System.ComponentModel.SortDescription" /> for value equality.</summary>
      <returns>true if <paramref name="obj" /> and this <see cref="T:System.ComponentModel.SortDescription" /> instance have the same <see cref="P:System.ComponentModel.SortDescription.PropertyName" /> and <see cref="P:System.ComponentModel.SortDescription.Direction" /> values; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>Gets a value that indicates whether this structure is in an immutable state. </summary>
      <returns>true if this object is being used; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compares two <see cref="T:System.ComponentModel.SortDescription" /> instances for value equality. </summary>
      <returns>true if the two <see cref="T:System.ComponentModel.SortDescription" /> instances have the same <see cref="P:System.ComponentModel.SortDescription.PropertyName" /> and <see cref="P:System.ComponentModel.SortDescription.Direction" /> values; otherwise, false.</returns>
      <param name="sd1">The first <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
      <param name="sd2">The second <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compares two <see cref="T:System.ComponentModel.SortDescription" /> instances for value inequality. </summary>
      <returns>true if the two <see cref="T:System.ComponentModel.SortDescription" /> instances do not have the same <see cref="P:System.ComponentModel.SortDescription.PropertyName" /> and <see cref="P:System.ComponentModel.SortDescription.Direction" /> values; otherwise, false.</returns>
      <param name="sd1">The first <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
      <param name="sd2">The second <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>Gets or sets the property name being used as the sorting criteria.</summary>
      <returns>The name of the property to sort by.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.SortDescription.IsSealed" /> is true.</exception>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>Represents a collection of <see cref="T:System.ComponentModel.SortDescription" /> instances.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescriptionCollection" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>Removes all <see cref="T:System.ComponentModel.SortDescription" /> instances from the collection.</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>Occurs when a <see cref="T:System.ComponentModel.SortDescription" /> is added or removed.</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>Gets an empty and non-modifiable <see cref="T:System.ComponentModel.SortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Inserts a <see cref="T:System.ComponentModel.SortDescription" /> into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the <see cref="T:System.ComponentModel.SortDescription" /> is inserted.</param>
      <param name="item">The <see cref="T:System.ComponentModel.SortDescription" /> to insert.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>Removes the <see cref="T:System.ComponentModel.SortDescription" /> at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.ComponentModel.SortDescription" /> to remove. </param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Replaces the <see cref="T:System.ComponentModel.SortDescription" /> at the specified index.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.ComponentModel.SortDescription" /> to replace.</param>
      <param name="item">The new value for the <see cref="T:System.ComponentModel.SortDescription" /> at the specified index.</param>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>For a description of this member, see <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageSettings">
      <summary>Provides a <see cref="T:System.Collections.Generic.Dictionary`2" /> that stores key-value pairs in isolated storage. </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. This exception is thrown when you attempt to reference an instance of the class by using an indexer and the variable you pass in for the key value is null.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Add(System.String,System.Object)">
      <summary>Adds an entry to the dictionary for the key-value pair.</summary>
      <param name="key">The key for the entry to be stored.</param>
      <param name="value">The value to be stored.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> already exists in the dictionary.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings">
      <summary>Gets an instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the application level, or creates a new instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> if one does not exist.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> object that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the application level. If an instance does not already exist, a new instance is created.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Clear">
      <summary>Resets the count of items stored in <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> to zero and releases all references to elements in the collection.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Contains(System.String)">
      <summary>Determines if the application settings dictionary contains the specified key.</summary>
      <returns>true if the dictionary contains the specified key; otherwise, false.</returns>
      <param name="key">The key for the entry to be located.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Count">
      <summary>Gets the number of key-value pairs that are stored in the dictionary.</summary>
      <returns>The number of key-value pairs that are stored in the dictionary.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Item(System.String)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element that has the specified key.</returns>
      <param name="key">The key of the item to get or set.</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Keys">
      <summary>Gets a collection that contains the keys in the dictionary.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> that contains the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Remove(System.String)">
      <summary>Removes the entry with the specified key.</summary>
      <returns>true if the specified key was removed; otherwise, false.</returns>
      <param name="key">The key for the entry to be deleted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Save">
      <summary>Saves data written to the current <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> object.</summary>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> does not have enough available free space.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings">
      <summary>Gets an instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the domain level, or creates a new instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> if one does not exist.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> object that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the domain level. If an instance does not already exist, a new instance is created.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</summary>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to be added.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Clear">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Clear" />.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="item">The key-value pair for the entry to be located.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">The key for the entry to be deleted.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified <paramref name="key" />; otherwise, false.</returns>
      <param name="key">The key for the entry to be located.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#Keys"></member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified <paramref name="key" />; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#Values"></member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#Count">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.Count" />.</summary>
      <returns>The number of elements that are contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false. In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Clear">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Clear" />.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified <paramref name="key" />; otherwise, false. </returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.IsFixedSize" />.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, false. In the default implementation of <see cref="T:System.Collections.IDictionary" />, this property always returns false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, false. In the default implementation of <see cref="T:System.Collections.IDictionary" />, this property always returns false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Item(System.Object)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.Item(System.Object)" />.</summary>
      <returns>The value associated with the specified <paramref name="key" />.</returns>
      <param name="key">The key of the value to get or set.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Remove(System.Object)" />.</summary>
      <param name="key">The key for the entry to be deleted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue``1(System.String,``0@)">
      <summary>Gets a value for the specified key.</summary>
      <returns>true if the specified key is found; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <paramref name="value" /> parameter.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Values">
      <summary>Gets a collection that contains the values in the dictionary.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> that contains the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="T:System.Net.Browser.WebRequestCreator">
      <summary>Provides objects for specifying whether the browser or the client handles HTTP requests and responses. </summary>
    </member>
    <member name="P:System.Net.Browser.WebRequestCreator.BrowserHttp">
      <summary>Gets an object that specifies browser HTTP handling for Web requests and responses.</summary>
      <returns>An <see cref="T:System.Net.IWebRequestCreate" /> object that specifies browser handling for Web requests and responses.</returns>
    </member>
    <member name="P:System.Net.Browser.WebRequestCreator.ClientHttp">
      <summary>Gets an object that specifies client HTTP handling for Web requests and responses.</summary>
      <returns>An <see cref="T:System.Net.IWebRequestCreate" /> object for use with Silverlight-based application that runs outside of a Web browser. </returns>
    </member>
    <member name="T:System.Windows.Analytics">
      <summary>Exposes read-only data about how an application is performing.</summary>
    </member>
    <member name="M:System.Windows.Analytics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Analytics" /> class.</summary>
    </member>
    <member name="P:System.Windows.Analytics.AverageProcessLoad">
      <summary>Gets how much of the CPU this process is using across all cores averaged together.</summary>
      <returns>A value between 0 and 1 that determines how of the CPU this process is across all cores averaged together. 0 maps to 0% load while 1 maps to 100% load.</returns>
    </member>
    <member name="P:System.Windows.Analytics.AverageProcessorLoad">
      <summary>Gets how much CPU processing is being used across all cores averaged together.</summary>
      <returns>A value between 0 and 1 that determines how much CPU processing is being used across all cores averaged together. 0 maps to 0% load while 1 maps to 100% load.</returns>
    </member>
    <member name="M:System.Windows.Analytics.Finalize">
      <summary>Frees resources used by the <see cref="T:System.Windows.Analytics" /> class.</summary>
    </member>
    <member name="P:System.Windows.Analytics.GpuCollection">
      <summary>Gets a collection of <see cref="T:System.Windows.GpuInformation" /> objects which each include details taken from a video driver. The collection is useful for multi-adapter cases.</summary>
      <returns>a collection of <see cref="T:System.Windows.GpuInformation" /> objects which each include details taken from a video driver. </returns>
    </member>
    <member name="T:System.Windows.Application">
      <summary>Encapsulates a Silverlight application.</summary>
    </member>
    <member name="M:System.Windows.Application.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Application" /> class.</summary>
    </member>
    <member name="P:System.Windows.Application.ApplicationLifetimeObjects">
      <summary>Gets the application extension services that have been registered for this application.</summary>
      <returns>The registered services. </returns>
    </member>
    <member name="M:System.Windows.Application.CheckAndDownloadUpdateAsync">
      <summary>Launches an asynchronous process to check for and download an updated version of the application.</summary>
    </member>
    <member name="E:System.Windows.Application.CheckAndDownloadUpdateCompleted">
      <summary>Occurs when the application has finished checking for updates in response to a <see cref="M:System.Windows.Application.CheckAndDownloadUpdateAsync" /> method call.</summary>
    </member>
    <member name="P:System.Windows.Application.Current">
      <summary>Gets the <see cref="T:System.Windows.Application" /> object for the current application.</summary>
      <returns>The <see cref="T:System.Windows.Application" /> object for the current application.</returns>
    </member>
    <member name="E:System.Windows.Application.Exit">
      <summary>Occurs just before an application shuts down and cannot be canceled.</summary>
    </member>
    <member name="M:System.Windows.Application.GetResourceStream(System.Uri)">
      <summary>Returns a resource file from a location in the application package.</summary>
      <returns>A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains the stream for the desired resource file.</returns>
      <param name="uriResource">A relative URI that identifies the resource file to be loaded. The URI is relative to the application package and does not need a leading forward slash. </param>
      <exception cref="T:System.ArgumentException">The application class is not initialized.-or-<paramref name="uriResource" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriResource" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Application.GetResourceStream(System.Windows.Resources.StreamResourceInfo,System.Uri)">
      <summary>Returns a resource file from a location in the specified zip package.</summary>
      <returns>A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains the stream for the desired resource file.</returns>
      <param name="zipPackageStreamResourceInfo">A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains the zip package stream with the desired resource file.</param>
      <param name="uriResource">A relative URI that identifies the resource file to be extracted from the zip package. The URI is relative to the application package and does not need a leading forward slash. </param>
      <exception cref="T:System.ArgumentException">The application class is not initialized.-or-<paramref name="uriResource" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zipPackageStreamResourceInfo" /> is null.-or-<paramref name="uriResource" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Application.Host">
      <summary>Gets various details about the Silverlight application's host.</summary>
      <returns>A <see cref="T:System.Windows.Interop.SilverlightHost" /> that provides various details about the Silverlight host application.</returns>
    </member>
    <member name="M:System.Windows.Application.Install">
      <summary>Attempts to install the application so that it can run outside the browser. </summary>
      <returns>true if the application was successfully installed; otherwise, false. </returns>
      <exception cref="T:System.InvalidOperationException">The application is already installed.-or-The application is hosted at a URI with a scheme other than http, https, or file.</exception>
    </member>
    <member name="P:System.Windows.Application.InstallState">
      <summary>Gets the current installation state of the application.</summary>
      <returns>The installation state of the application.</returns>
    </member>
    <member name="E:System.Windows.Application.InstallStateChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Application.InstallState" /> property value changes. </summary>
    </member>
    <member name="P:System.Windows.Application.IsRunningOutOfBrowser">
      <summary>Gets a value that indicates whether the application was launched from the out-of-browser state.</summary>
      <returns>true if the application was launched from the out-of-browser state; false if the application was launched from within its host Web page. </returns>
    </member>
    <member name="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
      <summary>Loads a XAML file that is located at the specified Uniform Resource Identifier (URI) and converts it to an instance of the object that is specified by the root element of the XAML file.</summary>
      <param name="component">An object of the same type as the root element of the XAML file to be loaded.</param>
      <param name="resourceLocator">A relative URI that identifies the XAML file to be loaded.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="resourceLocator" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> is null.-or-<paramref name="resourceLocator" /> is null.</exception>
      <exception cref="T:System.Windows.Markup.XamlParseException">An error occurred while parsing the XAML file.</exception>
    </member>
    <member name="P:System.Windows.Application.Resources">
      <summary>Gets a collection of application-scoped resources, such as styles, templates, and brushes.</summary>
      <returns>A <see cref="T:System.Windows.ResourceDictionary" /> object that contains zero or more application-scoped resources.</returns>
    </member>
    <member name="P:System.Windows.Application.RootVisual">
      <summary>Gets or sets the main application UI.</summary>
      <returns>A <see cref="T:System.Windows.UIElement" /> that is the main application UI.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property, the specified value is not an instance of a class that derives from <see cref="T:System.Windows.UIElement" />.</exception>
    </member>
    <member name="E:System.Windows.Application.Startup">
      <summary>Occurs when an application is started.</summary>
    </member>
    <member name="E:System.Windows.Application.UnhandledException">
      <summary>Occurs when an exception that is raised by Silverlight is not handled.</summary>
    </member>
    <member name="T:System.Windows.ApplicationServiceContext">
      <summary>Represents the initial state of a Silverlight application when application extension services are started. </summary>
    </member>
    <member name="P:System.Windows.ApplicationServiceContext.ApplicationInitParams">
      <summary>Gets the initialization parameters specified by the host Web page when embedding the Silverlight plug-in. </summary>
      <returns>The initialization parameters as a dictionary of key/value pairs. </returns>
    </member>
    <member name="T:System.Windows.ApplicationUnhandledExceptionEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Application.UnhandledException" /> event.</summary>
    </member>
    <member name="M:System.Windows.ApplicationUnhandledExceptionEventArgs.#ctor(System.Exception,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ApplicationUnhandledExceptionEventArgs" /> class.</summary>
      <param name="ex">The exception that is being thrown as unhandled.</param>
      <param name="handled">A value that indicates whether the exception has been handled and should not be processed further.</param>
    </member>
    <member name="P:System.Windows.ApplicationUnhandledExceptionEventArgs.ExceptionObject">
      <summary>Gets or sets the unhandled exception.</summary>
      <returns>The unhandled exception.</returns>
    </member>
    <member name="P:System.Windows.ApplicationUnhandledExceptionEventArgs.Handled">
      <summary>Gets or sets a value that indicates whether the exception is handled.</summary>
      <returns>true to mark the exception as handled, which indicates that Silverlight should not process it further; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.AssemblyPart">
      <summary>An assembly part is an assembly that is to be included in a Silverlight-based application package (.xap).</summary>
    </member>
    <member name="M:System.Windows.AssemblyPart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AssemblyPart" /> class.</summary>
    </member>
    <member name="M:System.Windows.AssemblyPart.Load(System.IO.Stream)">
      <summary>Converts a <see cref="T:System.IO.Stream" /> to an <see cref="T:System.Reflection.Assembly" /> that is subsequently loaded into the current application domain.</summary>
      <returns>The <see cref="T:System.Reflection.Assembly" /> that is subsequently loaded into the current application domain.</returns>
      <param name="assemblyStream">The <see cref="T:System.IO.Stream" /> to load into the current application domain.</param>
    </member>
    <member name="P:System.Windows.AssemblyPart.Source">
      <summary>Gets the <see cref="T:System.Uri" /> that identifies an assembly as an assembly part.</summary>
      <returns>A <see cref="T:System.String" /> that is the assembly, which is identified as an assembly part.</returns>
    </member>
    <member name="F:System.Windows.AssemblyPart.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.AssemblyPart.Source" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.AssemblyPart.Source" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.AssemblyPartCollection">
      <summary>Stores a collection of <see cref="T:System.Windows.AssemblyPart" /> objects. Provides collection support for the <see cref="P:System.Windows.Deployment.Parts" /> property.</summary>
    </member>
    <member name="M:System.Windows.AssemblyPartCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AssemblyPartCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.CheckAndDownloadUpdateCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Application.CheckAndDownloadUpdateCompleted" /> event. </summary>
    </member>
    <member name="P:System.Windows.CheckAndDownloadUpdateCompletedEventArgs.Error">
      <summary>Gets an exception that represents an error that occurred when attempting to download an update. </summary>
      <returns>An exception that represents the error, or null if no error occurred.</returns>
    </member>
    <member name="P:System.Windows.CheckAndDownloadUpdateCompletedEventArgs.UpdateAvailable">
      <summary>Gets a value that indicates whether a new version of the application was successfully downloaded and will be used on the next application launch. </summary>
      <returns>true if an update is available; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.CheckAndDownloadUpdateCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Application.CheckAndDownloadUpdateCompleted" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.CornerRadius">
      <summary>Describes the characteristics of a rounded corner, such as can be applied to a <see cref="T:System.Windows.Controls.Border" />.</summary>
    </member>
    <member name="M:System.Windows.CornerRadius.#ctor(System.Double)">
      <summary>Initializes a new <see cref="T:System.Windows.CornerRadius" /> structure, applying the same uniform radius to all its corners.</summary>
      <param name="uniformRadius">A uniform radius applied to all four <see cref="T:System.Windows.CornerRadius" /> properties (<see cref="P:System.Windows.CornerRadius.TopLeft" />, <see cref="P:System.Windows.CornerRadius.TopRight" />, <see cref="P:System.Windows.CornerRadius.BottomRight" />, <see cref="P:System.Windows.CornerRadius.BottomLeft" />).</param>
    </member>
    <member name="M:System.Windows.CornerRadius.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.CornerRadius" /> structure, applying specific radius values to its corners.</summary>
      <param name="topLeft">Sets the initial <see cref="P:System.Windows.CornerRadius.TopLeft" />.</param>
      <param name="topRight">Sets the initial <see cref="P:System.Windows.CornerRadius.TopRight" />.</param>
      <param name="bottomRight">Sets the initial <see cref="P:System.Windows.CornerRadius.BottomLeft" />.</param>
      <param name="bottomLeft">Sets the initial <see cref="P:System.Windows.CornerRadius.BottomRight" />.</param>
    </member>
    <member name="P:System.Windows.CornerRadius.BottomLeft">
      <summary>Gets or sets the radius of rounding, in pixels, of the bottom left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the bottom left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.CornerRadius.BottomRight">
      <summary>Gets or sets the radius of rounding, in pixels, of the bottom right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the bottom right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.CornerRadius.Equals(System.Object)">
      <summary>Compares this <see cref="T:System.Windows.CornerRadius" /> structure to another object for equality.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Windows.CornerRadius.Equals(System.Windows.CornerRadius)">
      <summary>Compares this <see cref="T:System.Windows.CornerRadius" /> structure to another <see cref="T:System.Windows.CornerRadius" /> structure for equality.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.CornerRadius" />  are equal; otherwise, false.</returns>
      <param name="cornerRadius">An instance of <see cref="T:System.Windows.CornerRadius" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.CornerRadius.GetHashCode">
      <summary>Returns the hash code of the structure.</summary>
      <returns>A hash code for this <see cref="T:System.Windows.CornerRadius" />.</returns>
    </member>
    <member name="M:System.Windows.CornerRadius.op_Equality(System.Windows.CornerRadius,System.Windows.CornerRadius)">
      <summary>Compares the value of two <see cref="T:System.Windows.CornerRadius" /> structures for equality.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.CornerRadius" /> are equal; otherwise, false.</returns>
      <param name="cr1">The first structure to compare.</param>
      <param name="cr2">The other structure to compare.</param>
    </member>
    <member name="M:System.Windows.CornerRadius.op_Inequality(System.Windows.CornerRadius,System.Windows.CornerRadius)">
      <summary>Compares two <see cref="T:System.Windows.CornerRadius" /> structures for inequality. </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.CornerRadius" /> are not equal; otherwise, false.</returns>
      <param name="cr1">The first structure to compare.</param>
      <param name="cr2">The other structure to compare.</param>
    </member>
    <member name="P:System.Windows.CornerRadius.TopLeft">
      <summary>Gets or sets the radius of rounding, in pixels, of the top left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the top left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.CornerRadius.TopRight">
      <summary>Gets or sets the radius of rounding, in pixels, of the top right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the top right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.CornerRadius.ToString">
      <summary>Returns the string representation of the <see cref="T:System.Windows.CornerRadius" /> structure.</summary>
      <returns>A <see cref="T:System.String" /> that represents the <see cref="T:System.Windows.CornerRadius" /> value.</returns>
    </member>
    <member name="T:System.Windows.CrossDomainAccess">
      <summary>Defines values that specify the access that cross-domain callers have to a Silverlight-based application.</summary>
    </member>
    <member name="F:System.Windows.CrossDomainAccess.NoAccess">
      <summary>Cross-domain callers have no access to the Silverlight application.</summary>
    </member>
    <member name="F:System.Windows.CrossDomainAccess.ScriptableOnly">
      <summary>Cross-domain callers have script access to the Silverlight application.</summary>
    </member>
    <member name="T:System.Windows.DataTemplate">
      <summary>Describes the visual structure of a data object.</summary>
    </member>
    <member name="M:System.Windows.DataTemplate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataTemplate" /> class.</summary>
    </member>
    <member name="M:System.Windows.DataTemplate.LoadContent">
      <summary>Creates the <see cref="T:System.Windows.UIElement" /> objects in the <see cref="T:System.Windows.DataTemplate" />. </summary>
      <returns>The root <see cref="T:System.Windows.UIElement" /> of the <see cref="T:System.Windows.DataTemplate" />.</returns>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>Represents an object that participates in the Silverlight dependency property system.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.CheckAccess">
      <summary>Determines whether the calling thread has access to this object.</summary>
      <returns>true if the calling thread has access to this object; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>Clears the local value of a dependency property. </summary>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to clear the value for.</param>
    </member>
    <member name="P:System.Windows.DependencyObject.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> this object is associated with. </summary>
      <returns>The <see cref="T:System.Windows.Threading.Dispatcher" /> this object is associated with. </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)">
      <summary>Returns any base value established for a Silverlight dependency property, which would apply in cases where an animation is not active.</summary>
      <returns>The returned base value.</returns>
      <param name="dp">The identifier for the desired dependency property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dp" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>Returns the current effective value of a dependency property from a <see cref="T:System.Windows.DependencyObject" />. </summary>
      <returns>Returns the current effective value.</returns>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dp" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>Returns the local value of a dependency property, if a local value is set. </summary>
      <returns>Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</returns>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the local value for.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Sets the local value of a dependency property on a <see cref="T:System.Windows.DependencyObject" />. </summary>
      <param name="dp">The identifier of the dependency property to set.</param>
      <param name="value">The new local value.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</exception>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>Represents a dependency property that is registered with the Silverlight dependency property system. Dependency properties provide support for value expressions, data binding, animation, and property change notification.</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>Retrieves the property metadata value for the dependency property as registered to the specified <see cref="T:System.Type" />.</summary>
      <returns>A property metadata object.</returns>
      <param name="forType">The specific type from which to retrieve the dependency property metadata.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers a dependency property with the specified property name, property type, owner type, and property metadata for the property. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. The identifier is then used both by your own code and any third-party user code to reference the dependency property later, for operations such as setting its value programmatically, or attaching a <see cref="T:System.Windows.Data.Binding" /> in code.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">A property metadata instance. This can contain a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter was null (check the exception for the name of the missing parameter).</exception>
      <exception cref="T:System.ArgumentException">A parameter was out of range, for instance <paramref name="name" /> was an empty string.-or-Attempted to register with a <paramref name="propertyType" /> that does not match a default value specified in the <paramref name="typeMetadata" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers an attached dependency property with the specified property name, property type, owner type, and property metadata for the property. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the attached property later, for operations such as setting its value programmatically, or attaching a  <see cref="T:System.Windows.Data.Binding" />.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">A property metadata instance. This can contain a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</param>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>Specifies a static value that is used by the property system rather than null to indicate that the property exists, but does not have its value set by the property system.</summary>
      <returns>The sentinel value for an unset value.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>Provides data for a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation.</summary>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>Gets the value of the property after the change.</summary>
      <returns>The property value after the change.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>Gets the value of the property before the change.</summary>
      <returns>The property value before the change.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>Gets the identifier for the dependency property where the value change occurred.</summary>
      <returns>The identifier field of the dependency property where the value change occurred.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>Represents the method that will handle events raised when a <see cref="T:System.Windows.DependencyProperty" /> is changed on a particular <see cref="T:System.Windows.DependencyObject" /> implementation. </summary>
      <param name="sender">The source of the event (typically the object where the property changed).</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Deployment">
      <summary>Provides application part and localization information in the application manifest when deploying a Silverlight-based application.</summary>
    </member>
    <member name="M:System.Windows.Deployment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Deployment" /> class.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Deployment.Current" /> property has already been initialized. </exception>
    </member>
    <member name="P:System.Windows.Deployment.Current">
      <summary>Gets the current <see cref="T:System.Windows.Deployment" /> object. </summary>
      <returns>The current <see cref="T:System.Windows.Deployment" /> object.</returns>
    </member>
    <member name="P:System.Windows.Deployment.EntryPointAssembly">
      <summary>Gets a string name that identifies which part in the <see cref="T:System.Windows.Deployment" /> is the entry point assembly.</summary>
      <returns>A string that names the assembly that should be used as the entry point assembly. This is expected to be the name of one of the assemblies you specified as an <see cref="T:System.Windows.AssemblyPart" />.</returns>
    </member>
    <member name="F:System.Windows.Deployment.EntryPointAssemblyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.EntryPointAssembly" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.EntryPointAssembly" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Deployment.EntryPointType">
      <summary>Gets a string that identifies the namespace and type name of the class that contains the <see cref="T:System.Windows.Application" /> entry point for your application.</summary>
      <returns>The namespace and type name of the class that contains the <see cref="T:System.Windows.Application" /> entry point.</returns>
    </member>
    <member name="F:System.Windows.Deployment.EntryPointTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.EntryPointType" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.EntryPointType" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Deployment.ExternalCallersFromCrossDomain">
      <summary>Gets a value that indicates the level of access that cross-domain callers have to the Silverlight-based application in this deployment.</summary>
      <returns>A value that indicates the access level of cross-domain callers.</returns>
    </member>
    <member name="F:System.Windows.Deployment.ExternalCallersFromCrossDomainProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.ExternalCallersFromCrossDomain" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.ExternalCallersFromCrossDomain" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Deployment.ExternalParts">
      <summary>Gets a collection of <see cref="T:System.Windows.ExternalPart" /> instances that represent the external assemblies required by the application.</summary>
      <returns>The collection of external assembly parts. The default is an empty collection.</returns>
    </member>
    <member name="F:System.Windows.Deployment.ExternalPartsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.ExternalParts" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.ExternalParts" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Deployment.GetAppIdForUri(System.Uri,System.String@)">
      <summary>[SECURITY CRITICAL] Gets a value that represents a unique ID for an out-of-browser application.</summary>
      <returns>A unique ID for the out-of-browser application. </returns>
      <param name="AppUri">The absolute URI of the application's .xap file on its host server.</param>
      <param name="xapLocationStr">When this method returns, contains the local path to the .xap file in the offline application cache. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Windows.Deployment.OutOfBrowserSettings">
      <summary>Gets an object that contains information about the application that is used for out-of-browser support. </summary>
      <returns>Information about the application that is used for out-of-browser support. </returns>
    </member>
    <member name="F:System.Windows.Deployment.OutOfBrowserSettingsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.OutOfBrowserSettings" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.OutOfBrowserSettings" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Deployment.Parts">
      <summary>Gets a collection of assembly parts that are included in the deployment.</summary>
      <returns>The collection of assembly parts. The default is an empty collection.</returns>
    </member>
    <member name="F:System.Windows.Deployment.PartsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.Parts" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.Parts" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Deployment.RegisterAssembly(System.Reflection.Assembly)">
      <summary>[SECURITY CRITICAL] Enables a native Silverlight host, such as Expression Blend or Visual Studio, to instruct Silverlight to register an assembly that the Silverlight host has separately loaded into the host-managed application domain in which a Silverlight application is running.</summary>
      <param name="assembly">The assembly that the Silverlight host has separately loaded.</param>
    </member>
    <member name="P:System.Windows.Deployment.RuntimeVersion">
      <summary>Gets the Silverlight runtime version that this deployment supports.</summary>
      <returns>The Silverlight runtime version that this deployment supports.</returns>
    </member>
    <member name="F:System.Windows.Deployment.RuntimeVersionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.RuntimeVersion" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.RuntimeVersion" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Deployment.SetCurrentApplication(System.Windows.Application)">
      <summary>[SECURITY CRITICAL] Allows a native host of the Silverlight plug-in to specify the current <see cref="T:System.Windows.Application" /> object of the running Silverlight application.</summary>
      <param name="application">The <see cref="T:System.Windows.Application" /> object that the native host is setting as the current <see cref="T:System.Windows.Application" />.</param>
    </member>
    <member name="T:System.Windows.Duration">
      <summary>Represents the duration of time that a <see cref="T:System.Windows.Media.Animation.Timeline" /> is active.</summary>
    </member>
    <member name="M:System.Windows.Duration.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Duration" /> structure with the supplied <see cref="T:System.TimeSpan" /> value.</summary>
      <param name="timeSpan">Represents the initial time interval of this duration.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeSpan" /> evaluates as less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:System.Windows.Duration.Add(System.Windows.Duration)">
      <summary>Adds the value of the specified <see cref="T:System.Windows.Duration" /> to this <see cref="T:System.Windows.Duration" />.</summary>
      <returns>If each involved <see cref="T:System.Windows.Duration" /> has values, a <see cref="T:System.Windows.Duration" /> that represents the combined values. Otherwise this method returns null.</returns>
      <param name="duration">An instance of <see cref="T:System.Windows.Duration" /> that represents the value of the current instance plus <paramref name="duration" />.</param>
    </member>
    <member name="P:System.Windows.Duration.Automatic">
      <summary>Gets a <see cref="T:System.Windows.Duration" /> value that is automatically determined.</summary>
      <returns>A <see cref="T:System.Windows.Duration" /> initialized to an automatic value.</returns>
    </member>
    <member name="M:System.Windows.Duration.Compare(System.Windows.Duration,System.Windows.Duration)">
      <summary>Compares one <see cref="T:System.Windows.Duration" /> value to another.</summary>
      <returns>If <paramref name="t1" /> is less than <paramref name="t2" />, a negative value that represents the difference. If <paramref name="t1" /> is equal to <paramref name="t2" />, a value of 0. If <paramref name="t1" /> is greater than <paramref name="t2" />, a positive value that represents the difference.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Object)">
      <summary>Determines whether a specified object is equal to a <see cref="T:System.Windows.Duration" />.</summary>
      <returns>true if value is equal to this <see cref="T:System.Windows.Duration" />; otherwise, false.</returns>
      <param name="value">Object to check for equality.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Windows.Duration)">
      <summary>Determines whether a specified <see cref="T:System.Windows.Duration" /> is equal to this <see cref="T:System.Windows.Duration" />.</summary>
      <returns>true if <paramref name="duration" /> is equal to this <see cref="T:System.Windows.Duration" />; otherwise, false.</returns>
      <param name="duration">The <see cref="T:System.Windows.Duration" /> to check for equality.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether two <see cref="T:System.Windows.Duration" /> values are equal.</summary>
      <returns>true if <paramref name="t1" /> is equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">First <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">Second <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="P:System.Windows.Duration.Forever">
      <summary>Gets a <see cref="T:System.Windows.Duration" /> value that represents an infinite interval.</summary>
      <returns>A <see cref="T:System.Windows.Duration" /> initialized to a forever value.</returns>
    </member>
    <member name="M:System.Windows.Duration.GetHashCode">
      <summary>Gets a hash code for this object.</summary>
      <returns>The hash code identifier.</returns>
    </member>
    <member name="P:System.Windows.Duration.HasTimeSpan">
      <summary>Gets a value that indicates if this <see cref="T:System.Windows.Duration" /> represents a <see cref="T:System.TimeSpan" /> value.</summary>
      <returns>true if this <see cref="T:System.Windows.Duration" /> is a <see cref="T:System.TimeSpan" /> value; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Duration.op_Addition(System.Windows.Duration,System.Windows.Duration)">
      <summary>Adds two <see cref="T:System.Windows.Duration" /> values together.</summary>
      <returns>If both <see cref="T:System.Windows.Duration" /> values have <see cref="T:System.TimeSpan" /> values, this method returns the sum of those two values. If either value is set to <see cref="P:System.Windows.Duration.Automatic" />, the method returns <see cref="P:System.Windows.Duration.Automatic" />. If either value is set to <see cref="P:System.Windows.Duration.Forever" />, the method returns <see cref="P:System.Windows.Duration.Forever" />.If either <paramref name="t1" /> or <paramref name="t2" /> has no value, this method returns null.</returns>
      <param name="t1">The first <see cref="T:System.Windows.Duration" /> to add.</param>
      <param name="t2">The second <see cref="T:System.Windows.Duration" /> to add.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Equality(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether two <see cref="T:System.Windows.Duration" /> cases are equal.</summary>
      <returns>true if both <see cref="T:System.Windows.Duration" /> values have equal property values, or if all <see cref="T:System.Windows.Duration" /> values are null. Otherwise, this method returns false.</returns>
      <param name="t1">The first <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_GreaterThan(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if one <see cref="T:System.Windows.Duration" /> is greater than another.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is greater than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The <see cref="T:System.Windows.Duration" /> value to compare.</param>
      <param name="t2">The second <see cref="T:System.Windows.Duration" /> value to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_GreaterThanOrEqual(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether a <see cref="T:System.Windows.Duration" /> is greater than or equal to another.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is greater than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Implicit(System.TimeSpan)~System.Windows.Duration">
      <summary>Implicitly creates a <see cref="T:System.Windows.Duration" /> from a given <see cref="T:System.TimeSpan" />.</summary>
      <returns>A created <see cref="T:System.Windows.Duration" />.</returns>
      <param name="timeSpan">
        <see cref="T:System.TimeSpan" /> from which a <see cref="T:System.Windows.Duration" /> is implicitly created.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeSpan" /> evaluates as less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:System.Windows.Duration.op_Inequality(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if two <see cref="T:System.Windows.Duration" /> cases are not equal.</summary>
      <returns>true if exactly one of <paramref name="t1" /> or <paramref name="t2" /> represent a value, or if they both represent values that are not equal; otherwise, false.</returns>
      <param name="t1">The first <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_LessThan(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if a <see cref="T:System.Windows.Duration" /> is less than the value of another instance.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is less than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_LessThanOrEqual(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if a <see cref="T:System.Windows.Duration" /> is less than or equal to another.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is less than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Subtraction(System.Windows.Duration,System.Windows.Duration)">
      <summary>Subtracts the value of one <see cref="T:System.Windows.Duration" /> from another.</summary>
      <returns>If each <see cref="T:System.Windows.Duration" /> has values, a <see cref="T:System.Windows.Duration" /> that represents the value of <paramref name="t1" /> minus <paramref name="t2" />. If <paramref name="t1" /> has a value of <see cref="P:System.Windows.Duration.Forever" /> and <paramref name="t2" /> has a value of <see cref="P:System.Windows.Duration.TimeSpan" />, this method returns <see cref="P:System.Windows.Duration.Forever" />. Otherwise this method returns null.</returns>
      <param name="t1">The first <see cref="T:System.Windows.Duration" />.</param>
      <param name="t2">The <see cref="T:System.Windows.Duration" /> to subtract.</param>
    </member>
    <member name="M:System.Windows.Duration.op_UnaryPlus(System.Windows.Duration)">
      <summary>Returns the specified <see cref="T:System.Windows.Duration" />.</summary>
      <returns>A <see cref="T:System.Windows.Duration" />.</returns>
      <param name="duration">The <see cref="T:System.Windows.Duration" /> to get.</param>
    </member>
    <member name="M:System.Windows.Duration.Plus(System.Windows.Duration)">
      <summary>Adds one <see cref="T:System.Windows.Duration" /> to this <see cref="T:System.Windows.Duration" />.</summary>
      <returns>The summed <see cref="T:System.Windows.Duration" />.</returns>
      <param name="duration">The <see cref="T:System.Windows.Duration" /> to add.</param>
    </member>
    <member name="M:System.Windows.Duration.Subtract(System.Windows.Duration)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Duration" /> from this <see cref="T:System.Windows.Duration" />.</summary>
      <returns>The subtracted <see cref="T:System.Windows.Duration" />.</returns>
      <param name="duration">The <see cref="T:System.Windows.Duration" /> to subtract from this <see cref="T:System.Windows.Duration" />.</param>
    </member>
    <member name="P:System.Windows.Duration.TimeSpan">
      <summary>Gets the <see cref="T:System.TimeSpan" /> value that this <see cref="T:System.Windows.Duration" /> represents.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> value that this <see cref="T:System.Windows.Duration" /> represents.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Duration" /> does not represent a <see cref="T:System.TimeSpan" />.</exception>
    </member>
    <member name="M:System.Windows.Duration.ToString">
      <summary>Converts a <see cref="T:System.Windows.Duration" /> to a <see cref="T:System.String" /> representation.</summary>
      <returns>A <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Duration" />.</returns>
    </member>
    <member name="T:System.Windows.DurationConverter">
      <summary>Provides type conversion support for the <see cref="T:System.Windows.Duration" /> structure. </summary>
    </member>
    <member name="M:System.Windows.DurationConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DurationConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.DurationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of one type to the <see cref="T:System.Windows.Duration" /> type.</summary>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
    </member>
    <member name="M:System.Windows.DurationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given value to the <see cref="T:System.Windows.Duration" /> type.</summary>
      <returns>The returned <see cref="T:System.Windows.Duration" />.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="T:System.Windows.EventTrigger">
      <summary>Represents a trigger that applies a set of actions (animation storyboards) in response to an event.</summary>
    </member>
    <member name="M:System.Windows.EventTrigger.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.EventTrigger" /> class.</summary>
    </member>
    <member name="P:System.Windows.EventTrigger.Actions">
      <summary>Gets the collection of <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> objects that this <see cref="T:System.Windows.EventTrigger" /> maintains.</summary>
      <returns>The existing <see cref="T:System.Windows.TriggerActionCollection" />.</returns>
    </member>
    <member name="P:System.Windows.EventTrigger.RoutedEvent">
      <summary>Gets or sets the name of the event that initiates the trigger.</summary>
      <returns>The name or identifier of the event. See Remarks.</returns>
    </member>
    <member name="T:System.Windows.ExceptionRoutedEventArgs">
      <summary>Provides event data for exceptions that are raised as events by asynchronous operations, such as <see cref="E:System.Windows.Controls.MediaElement.MediaFailed" /> or <see cref="E:System.Windows.Controls.MultiScaleImage.ImageFailed" />.</summary>
    </member>
    <member name="P:System.Windows.ExceptionRoutedEventArgs.ErrorException">
      <summary>Gets the underlying exception or native-level error reported by the event.</summary>
      <returns>The exception being reported.</returns>
    </member>
    <member name="T:System.Windows.ExceptionRoutedEventHandler">
      <summary>Represents the method that will handle certain events that report exceptions. These exceptions generally come from asynchronous operations where holding up the UI thread for exception checking is not an option.</summary>
      <param name="sender">The object where the handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>This type is not intended to be used from your code or to be derived from.</summary>
    </member>
    <member name="T:System.Windows.ExtensionPart">
      <summary>Represents a zip file containing assemblies used by application library caching.</summary>
    </member>
    <member name="M:System.Windows.ExtensionPart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ExtensionPart" /> class. </summary>
    </member>
    <member name="P:System.Windows.ExtensionPart.Source">
      <summary>Gets or sets the file name or URI of the external library package.</summary>
      <returns>The file name or URI of the external library package.</returns>
    </member>
    <member name="F:System.Windows.ExtensionPart.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.ExtensionPart.Source" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ExtensionPart.Source" /> dependency property. </returns>
    </member>
    <member name="T:System.Windows.ExternalPart">
      <summary>Defines a base class for specifying parts of a Silverlight application that are external to the application package (.xap file). </summary>
    </member>
    <member name="M:System.Windows.ExternalPart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ExternalPart" /> class. </summary>
    </member>
    <member name="T:System.Windows.ExternalPartCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.ExternalPart" /> instances that indicate parts of a Silverlight application that are external to the application package (.xap file). </summary>
    </member>
    <member name="M:System.Windows.ExternalPartCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ExternalPartCollection" /> class. </summary>
    </member>
    <member name="T:System.Windows.FontStretch">
      <summary>Describes the degree to which a font has been stretched, compared to the normal aspect ratio of that font.</summary>
    </member>
    <member name="M:System.Windows.FontStretch.Equals(System.Object)">
      <summary>Compares an object with the current <see cref="T:System.Windows.FontStretch" /> object.</summary>
      <returns>true if two instances are equal; otherwise, false.</returns>
      <param name="obj">The instance of the object to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStretch.GetHashCode">
      <summary>Retrieves the hash code for this object.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="M:System.Windows.FontStretch.op_Equality(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontStretch" /> for equality.</summary>
      <returns>true when the specified <see cref="T:System.Windows.FontStretch" /> objects are equal; otherwise, false.</returns>
      <param name="left">First instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">Second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_Inequality(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine inequality.</summary>
      <returns>false if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of the current <see cref="T:System.Windows.FontStretch" /> object.</summary>
      <returns>A <see cref="T:System.String" /> value representation of the object.</returns>
    </member>
    <member name="T:System.Windows.FontStretches">
      <summary>Provides a set of predefined font stretches as static property values.</summary>
    </member>
    <member name="P:System.Windows.FontStretches.Condensed">
      <summary>Specifies a condensed font stretch.</summary>
      <returns>A value that represents a condensed font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.Expanded">
      <summary>Specifies an expanded font stretch.</summary>
      <returns>A value that represents an expanded font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.ExtraCondensed">
      <summary>Specifies an extra-condensed font stretch.</summary>
      <returns>A value that represents an extra-condensed font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.ExtraExpanded">
      <summary>Specifies an extra-expanded font stretch.</summary>
      <returns>A value that represents an extra-expanded font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.Normal">
      <summary>Specifies a normal font stretch.</summary>
      <returns>A value that represents a normal font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.SemiCondensed">
      <summary>Specifies a semi-condensed font stretch.</summary>
      <returns>A value that represents a semi-condensed font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.SemiExpanded">
      <summary>Specifies a semi-expanded font stretch.</summary>
      <returns>A value that represents a semi-expanded font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.UltraCondensed">
      <summary>Specifies an ultra-condensed font stretch.</summary>
      <returns>A value that represents an ultra-condensed font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.UltraExpanded">
      <summary>Specifies an ultra-expanded font stretch.</summary>
      <returns>A value that represents an ultra-expanded font stretch.</returns>
    </member>
    <member name="T:System.Windows.FontStyle">
      <summary>Represents the style of a font face (for instance, as normal or italic).</summary>
    </member>
    <member name="M:System.Windows.FontStyle.Equals(System.Object)">
      <summary>Compares an object with the current <see cref="T:System.Windows.FontStyle" /> instance for equality.</summary>
      <returns>true to show the two instances are equal; otherwise, false.</returns>
      <param name="obj">An object that represents the <see cref="T:System.Windows.FontStyle" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStyle.GetHashCode">
      <summary>Retrieves the hash code for this object. </summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="M:System.Windows.FontStyle.op_Equality(System.Windows.FontStyle,System.Windows.FontStyle)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontStyle" /> for equality.</summary>
      <returns>true if the specified <see cref="T:System.Windows.FontStyle" /> objects are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStyle.op_Inequality(System.Windows.FontStyle,System.Windows.FontStyle)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStyle" /> to determine inequality.</summary>
      <returns>false to show <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStyle.ToString">
      <summary>Creates a string that represents the current <see cref="T:System.Windows.FontStyle" /> object.</summary>
      <returns>A string that represents the value of the <see cref="T:System.Windows.FontStyle" /> object.</returns>
    </member>
    <member name="T:System.Windows.FontStyles">
      <summary>Provides a set of predefined font styles as static property values.</summary>
    </member>
    <member name="P:System.Windows.FontStyles.Italic">
      <summary>Specifies an italic font style.</summary>
      <returns>A font style that represents an italic font style.</returns>
    </member>
    <member name="P:System.Windows.FontStyles.Normal">
      <summary>Specifies a normal, or roman, font style.</summary>
      <returns>A font style that represents a normal, or roman, font style.</returns>
    </member>
    <member name="T:System.Windows.FontWeight">
      <summary>Refers to the density of a typeface, in terms of the lightness or heaviness of the strokes.</summary>
    </member>
    <member name="M:System.Windows.FontWeight.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Windows.FontWeight" /> object is equal to a specified object.</summary>
      <returns>true if the two instances are equal; otherwise, false.</returns>
      <param name="obj">The object to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontWeight.GetHashCode">
      <summary>Retrieves the hash code for this object.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="M:System.Windows.FontWeight.op_Equality(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontWeight" /> for equality.</summary>
      <returns>true if the instances of <see cref="T:System.Windows.FontWeight" /> are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_Inequality(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine inequality.</summary>
      <returns>false if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.ToString">
      <summary>Returns a text string that represents the value of the <see cref="T:System.Windows.FontWeight" /> object.</summary>
      <returns>A string that represents the value of the <see cref="T:System.Windows.FontWeight" /> object, such as "Light" or "Normal".</returns>
    </member>
    <member name="T:System.Windows.FontWeights">
      <summary>Provides a set of predefined font weights as static property values.</summary>
    </member>
    <member name="P:System.Windows.FontWeights.Black">
      <summary>Specifies a "Black" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Black" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Bold">
      <summary>Specifies a "Bold" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraBlack">
      <summary>Specifies an "ExtraBlack" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents an "ExtraBlack" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraBold">
      <summary>Specifies an "ExtraBold" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents an "ExtraBlack" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraLight">
      <summary>Specifies an "ExtraLight" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents an "ExtraLight" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Light">
      <summary>Specifies a "Light" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Light" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Medium">
      <summary>Specifies a "Medium" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Medium" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Normal">
      <summary>Specifies a "Normal" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Normal" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.SemiBold">
      <summary>Specifies a "SemiBold" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "SemiBold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Thin">
      <summary>Specifies a "Thin" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Thin" font weight.</returns>
    </member>
    <member name="T:System.Windows.FrameworkElement">
      <summary>Provides a framework of common APIs for objects that participate in Silverlight layout. Also defines APIs related to data binding, object tree, and object lifetime feature areas in Silverlight.</summary>
    </member>
    <member name="M:System.Windows.FrameworkElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.</summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.ActualHeight">
      <summary>Gets the rendered height of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The object's height, in pixels. The default is 0. The default might be encountered if the object has not been loaded and undergone a layout pass.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.ActualHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.ActualWidth">
      <summary>Gets the rendered width of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The object's width, in pixels. The default is 0. The default might be encountered if the object has not been loaded and undergone a layout pass.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.ActualWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
      <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
      <returns>The actual size used once the element is arranged.</returns>
      <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
    </member>
    <member name="E:System.Windows.FrameworkElement.BindingValidationError">
      <summary>Occurs when a data validation error is reported by a binding source.</summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.Cursor">
      <summary>Gets or sets the cursor that displays while the mouse pointer is over a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The cursor to display. The default is defined as null for code access. However, the practical default at run time will come from a variety of factors.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.DataContext">
      <summary>Gets or sets the data context for a <see cref="T:System.Windows.FrameworkElement" /> when it participates in data binding.</summary>
      <returns>The object to use as data context.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.DataContextProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property identifier.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.FindName(System.String)">
      <summary>Retrieves an object that has the specified identifier name. </summary>
      <returns>The requested object. This can be null if no matching object was found in the XAML namescope.</returns>
      <param name="name">The name of the requested object.</param>
    </member>
    <member name="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
      <summary>Retrieves the <see cref="T:System.Windows.Data.BindingExpression" /> for a dependency property where a binding is established.</summary>
      <returns>A <see cref="T:System.Windows.Data.BindingExpression" /> for the binding, if the local value represented a databound value. May return null if the property is not a databound value.</returns>
      <param name="dp">The dependency property identifier for the specific property on this <see cref="T:System.Windows.FrameworkElement" /> where you want to obtain the <see cref="T:System.Windows.Data.BindingExpression" />.</param>
    </member>
    <member name="P:System.Windows.FrameworkElement.Height">
      <summary>Gets or sets the suggested height of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The height of the object, in pixels. The default is <see cref="F:System.Double.NaN" />. Except for the special <see cref="F:System.Double.NaN" /> value, this value must be equal to or greater than 0. See Remarks for upper-bound information.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.HeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.HorizontalAlignment">
      <summary>Gets or sets the horizontal alignment characteristics applied to a <see cref="T:System.Windows.FrameworkElement" /> when it is composed within a layout parent, such as a panel or items control.</summary>
      <returns>A horizontal alignment setting, as a value of the enumeration. The default is <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Language">
      <summary>Gets or sets localization/globalization language information that applies to a <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <returns>The language information for this object. The default is an <see cref="T:System.Windows.Markup.XmlLanguage" /> object with its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.LanguageProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property identifier.</returns>
    </member>
    <member name="E:System.Windows.FrameworkElement.LayoutUpdated">
      <summary>Occurs when the layout of the Silverlight visual tree changes. </summary>
    </member>
    <member name="E:System.Windows.FrameworkElement.Loaded">
      <summary>Occurs when a <see cref="T:System.Windows.FrameworkElement" /> has been constructed and added to the object tree. </summary>
    </member>
    <member name="F:System.Windows.FrameworkElement.LoadedEvent">
      <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Margin">
      <summary>Gets or sets the outer margin of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>Provides margin values for the object. The default value is a default <see cref="T:System.Windows.Thickness" /> with all properties (dimensions) equal to 0.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MarginProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.MaxHeight">
      <summary>Gets or sets the maximum height constraint of a <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <returns>The maximum height of the object, in pixels. The default value is <see cref="F:System.Double.PositiveInfinity" />. This value can be any value equal to or greater than 0. <see cref="F:System.Double.PositiveInfinity" /> is also valid.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MaxHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.MaxWidth">
      <summary>Gets or sets the maximum width constraint of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The maximum width of the object, in pixels. The default is <see cref="F:System.Double.PositiveInfinity" />. This value can be any value equal to or greater than 0. <see cref="F:System.Double.PositiveInfinity" /> is also valid.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MaxWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
      <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
      <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.</returns>
      <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
    </member>
    <member name="P:System.Windows.FrameworkElement.MinHeight">
      <summary>Gets or sets the minimum height constraint of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The minimum height of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, <see cref="F:System.Double.PositiveInfinity" /> is not valid.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MinHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.MinWidth">
      <summary>Gets or sets the minimum width constraint of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The minimum width of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, <see cref="F:System.Double.PositiveInfinity" /> is not valid.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MinWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Name">
      <summary>Gets (or sets, but see Remarks) the identifying name of the object. The name provides a reference that is initially markup-compiled. After a XAML processor creates the object tree from markup, run-time code can refer to a markup element by this name.</summary>
      <returns>The name of the object, which must be a string that is valid in the XamlName Grammar. The default is an empty string.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.OnApplyTemplate">
      <summary>When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />. </summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.Parent">
      <summary>Gets the parent object of this <see cref="T:System.Windows.FrameworkElement" /> in the object tree. </summary>
      <returns>The parent object of this object in the object tree.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Resources">
      <summary>Gets the locally defined resource dictionary. In XAML, you can establish resource items as child object elements of the &lt;frameworkElement.Resources&gt; property element, through XAML implicit collection syntax.</summary>
      <returns>The current locally defined dictionary of resources, where each resource can be accessed by its key.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.Binding)">
      <summary>Attaches a binding to a <see cref="T:System.Windows.FrameworkElement" />, using the provided binding object, and returns a <see cref="T:System.Windows.Data.BindingExpressionBase" /> for possible later use.</summary>
      <returns>A <see cref="T:System.Windows.Data.BindingExpressionBase" /> object.  See Remarks.</returns>
      <param name="dp">The dependency property identifier of the property that is data bound.</param>
      <param name="binding">The binding to use for the property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binding" /> is specified as <see cref="F:System.Windows.Data.BindingMode.TwoWay" />, but has an empty <see cref="P:System.Windows.Data.Binding.Path" />.-or-<paramref name="dp" /> or <paramref name="binding" /> parameters are null.</exception>
    </member>
    <member name="E:System.Windows.FrameworkElement.SizeChanged">
      <summary>Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on a <see cref="T:System.Windows.FrameworkElement" />. </summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.Style">
      <summary>Gets or sets an instance <see cref="T:System.Windows.Style" /> that is applied for this object during rendering.</summary>
      <returns>The applied style for the object, if present; otherwise, null. The default for a default-constructed <see cref="T:System.Windows.FrameworkElement" /> is null.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.StyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Tag">
      <summary>Gets or sets an arbitrary object value that can be used to store custom information about this object.</summary>
      <returns>The intended value. This property has no default value.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.TagProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Triggers">
      <summary>Gets the collection of triggers for animations that are defined for a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The collection of triggers for animations that are defined for this object.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.VerticalAlignment">
      <summary>Gets or sets the vertical alignment characteristics applied to a <see cref="T:System.Windows.FrameworkElement" /> when it is composed within a parent object such as a panel or items control.</summary>
      <returns>A vertical alignment setting. The default is <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.VerticalAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Width">
      <summary>Gets or sets the width of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The width of the object, in pixels. The default is <see cref="F:System.Double.NaN" />. Except for the special <see cref="F:System.Double.NaN" /> value, this value must be equal to or greater than 0. See Remarks for upper bound information.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.WidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.FrameworkTemplate">
      <summary>Creates an element tree of elements.</summary>
    </member>
    <member name="M:System.Windows.FrameworkTemplate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FrameworkTemplate" /> class.</summary>
    </member>
    <member name="T:System.Windows.GpuInformation">
      <summary>Represents details taken from a video driver.</summary>
    </member>
    <member name="P:System.Windows.GpuInformation.DeviceId">
      <summary>Gets or sets the device ID of the GPU.</summary>
      <returns>The device ID for the GPU.</returns>
    </member>
    <member name="P:System.Windows.GpuInformation.DriverVersion">
      <summary>Gets or sets the driver version of the GPU.</summary>
      <returns>The driver version of the GPU.</returns>
    </member>
    <member name="P:System.Windows.GpuInformation.VendorId">
      <summary>Gets or sets the vendor ID of the GPU.</summary>
      <returns>The vendor ID of the GPU.</returns>
    </member>
    <member name="T:System.Windows.GridLength">
      <summary>Represents the length of elements that explicitly support <see cref="F:System.Windows.GridUnitType.Star" /> unit types. </summary>
    </member>
    <member name="M:System.Windows.GridLength.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.GridLength" /> structure using the specified absolute value in pixels. </summary>
      <param name="pixels">The absolute count of pixels to establish as the value.</param>
    </member>
    <member name="M:System.Windows.GridLength.#ctor(System.Double,System.Windows.GridUnitType)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.GridLength" /> structure and specifies what kind of value it holds. </summary>
      <param name="value">The initial value of this instance of <see cref="T:System.Windows.GridLength" />.</param>
      <param name="type">The <see cref="T:System.Windows.GridUnitType" /> held by this instance of <see cref="T:System.Windows.GridLength" />.</param>
      <exception cref="T:System.ArgumentException">value is less than 0 or is not a number.- or -type is not a valid <see cref="T:System.Windows.GridUnitType" />.</exception>
    </member>
    <member name="P:System.Windows.GridLength.Auto">
      <summary>Gets an instance of <see cref="T:System.Windows.GridLength" /> that holds a value whose size is determined by the size properties of the content object.</summary>
      <returns>A instance of <see cref="T:System.Windows.GridLength" /> whose <see cref="P:System.Windows.GridLength.GridUnitType" /> property is set to <see cref="F:System.Windows.GridUnitType.Auto" />. </returns>
    </member>
    <member name="M:System.Windows.GridLength.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Windows.GridLength" /> instance. </summary>
      <returns>true if the specified object has the same value and <see cref="T:System.Windows.GridUnitType" /> as the current instance; otherwise, false.</returns>
      <param name="oCompare">The object to compare with the current instance.</param>
    </member>
    <member name="M:System.Windows.GridLength.Equals(System.Windows.GridLength)">
      <summary>Determines whether the specified <see cref="T:System.Windows.GridLength" /> is equal to the current <see cref="T:System.Windows.GridLength" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.GridLength" /> has the same value and <see cref="P:System.Windows.GridLength.GridUnitType" /> as the current instance; otherwise, false.</returns>
      <param name="gridLength">The <see cref="T:System.Windows.GridLength" /> structure to compare with the current instance.</param>
    </member>
    <member name="M:System.Windows.GridLength.GetHashCode">
      <summary>Gets a hash code for the <see cref="T:System.Windows.GridLength" />. </summary>
      <returns>A hash code for the <see cref="T:System.Windows.GridLength" />. </returns>
    </member>
    <member name="P:System.Windows.GridLength.GridUnitType">
      <summary>Gets the associated <see cref="T:System.Windows.GridUnitType" /> for the <see cref="T:System.Windows.GridLength" />. </summary>
      <returns>One of the <see cref="T:System.Windows.GridUnitType" /> values. The default is <see cref="F:System.Windows.GridUnitType.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.GridLength.IsAbsolute">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.GridLength" /> holds a value that is expressed in pixels. </summary>
      <returns>true if the <see cref="P:System.Windows.GridLength.GridUnitType" /> property is <see cref="F:System.Windows.GridUnitType.Pixel" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.GridLength.IsAuto">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.GridLength" /> holds a value whose size is determined by the size properties of the content object. </summary>
      <returns>true if the <see cref="P:System.Windows.GridLength.GridUnitType" /> property is <see cref="F:System.Windows.GridUnitType.Auto" />; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.GridLength.IsStar">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.GridLength" /> holds a value that is expressed as a weighted proportion of available space. </summary>
      <returns>true if the <see cref="P:System.Windows.GridLength.GridUnitType" /> property is <see cref="F:System.Windows.GridUnitType.Star" />; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.GridLength.op_Equality(System.Windows.GridLength,System.Windows.GridLength)">
      <summary>Compares two <see cref="T:System.Windows.GridLength" /> structures for equality.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.GridLength" /> have the same value and <see cref="T:System.Windows.GridUnitType" />; otherwise, false.</returns>
      <param name="gl1">The first instance of <see cref="T:System.Windows.GridLength" /> to compare.</param>
      <param name="gl2">The second instance of <see cref="T:System.Windows.GridLength" /> to compare.</param>
    </member>
    <member name="M:System.Windows.GridLength.op_Inequality(System.Windows.GridLength,System.Windows.GridLength)">
      <summary>Compares two <see cref="T:System.Windows.GridLength" /> structures to determine if they are not equal.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.GridLength" /> do not have the same value and <see cref="T:System.Windows.GridUnitType" />; otherwise, false.</returns>
      <param name="gl1">The first instance of <see cref="T:System.Windows.GridLength" /> to compare.</param>
      <param name="gl2">The second instance of <see cref="T:System.Windows.GridLength" /> to compare.</param>
    </member>
    <member name="M:System.Windows.GridLength.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Windows.GridLength" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the current <see cref="T:System.Windows.GridLength" /> structure.</returns>
    </member>
    <member name="P:System.Windows.GridLength.Value">
      <summary>Gets a <see cref="T:System.Double" /> that represents the value of the <see cref="T:System.Windows.GridLength" />.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the value of the current instance. </returns>
    </member>
    <member name="T:System.Windows.GridUnitType">
      <summary>Describes the kind of value that a <see cref="T:System.Windows.GridLength" /> object is holding. </summary>
    </member>
    <member name="F:System.Windows.GridUnitType.Auto">
      <summary>The size is determined by the size properties of the content object. </summary>
    </member>
    <member name="F:System.Windows.GridUnitType.Pixel">
      <summary>The value is expressed in pixels. </summary>
    </member>
    <member name="F:System.Windows.GridUnitType.Star">
      <summary>The value is expressed as a weighted proportion of available space. </summary>
    </member>
    <member name="T:System.Windows.HorizontalAlignment">
      <summary>Indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element. </summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Left">
      <summary>An element aligned to the left of the layout slot for the parent element. </summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Center">
      <summary>An element aligned to the center of the layout slot for the parent element. </summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Right">
      <summary>An element aligned to the right of the layout slot for the parent element.</summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Stretch">
      <summary>An element stretched to fill the entire layout slot of the parent element.</summary>
    </member>
    <member name="T:System.Windows.IApplicationLifetimeAware">
      <summary>Defines methods that application extension services can optionally implement in order to respond to application lifetime events. </summary>
    </member>
    <member name="M:System.Windows.IApplicationLifetimeAware.Exited">
      <summary>Called by an application immediately after the <see cref="E:System.Windows.Application.Exit" /> event occurs. </summary>
    </member>
    <member name="M:System.Windows.IApplicationLifetimeAware.Exiting">
      <summary>Called by an application immediately before the <see cref="E:System.Windows.Application.Exit" /> event occurs. </summary>
    </member>
    <member name="M:System.Windows.IApplicationLifetimeAware.Started">
      <summary>Called by an application immediately after the <see cref="E:System.Windows.Application.Startup" /> event occurs.</summary>
    </member>
    <member name="M:System.Windows.IApplicationLifetimeAware.Starting">
      <summary>Called by an application immediately before the <see cref="E:System.Windows.Application.Startup" /> event occurs.</summary>
    </member>
    <member name="T:System.Windows.IApplicationService">
      <summary>Defines methods that application extension services must implement in order to enable an application to start and stop the service. </summary>
    </member>
    <member name="M:System.Windows.IApplicationService.StartService(System.Windows.ApplicationServiceContext)">
      <summary>Called by an application in order to initialize the application extension service.</summary>
      <param name="context">Provides information about the application state. </param>
    </member>
    <member name="M:System.Windows.IApplicationService.StopService">
      <summary>Called by an application in order to stop the application extension service. </summary>
    </member>
    <member name="T:System.Windows.Icon">
      <summary>Represents an icon that is used to identify an offline application.</summary>
    </member>
    <member name="M:System.Windows.Icon.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Icon" /> class. </summary>
    </member>
    <member name="P:System.Windows.Icon.Size">
      <summary>Gets the icon size. </summary>
      <returns>The icon size.</returns>
    </member>
    <member name="F:System.Windows.Icon.SizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Icon.Size" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Icon.Size" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Icon.Source">
      <summary>Gets the path and file name to the PNG source file of the icon. </summary>
      <returns>The path to the PNG source file of the icon. </returns>
    </member>
    <member name="F:System.Windows.Icon.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Icon.Source" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Icon.Source" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.IconCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Icon" /> instances.</summary>
    </member>
    <member name="M:System.Windows.IconCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.IconCollection" /> class. </summary>
    </member>
    <member name="T:System.Windows.InstallState">
      <summary>Defines constants that indicate the state of an application that is configured to run outside the browser.</summary>
    </member>
    <member name="F:System.Windows.InstallState.NotInstalled">
      <summary>The application is running within its host Web page.</summary>
    </member>
    <member name="F:System.Windows.InstallState.Installing">
      <summary>The application is in the process of being installed to run outside the browser. </summary>
    </member>
    <member name="F:System.Windows.InstallState.Installed">
      <summary>The application is running outside the browser.</summary>
    </member>
    <member name="F:System.Windows.InstallState.InstallFailed">
      <summary>The application could not be installed to run outside the browser. </summary>
    </member>
    <member name="T:System.Windows.LineStackingStrategy">
      <summary>Describes the mechanism by which a line box is determined for each line. </summary>
    </member>
    <member name="F:System.Windows.LineStackingStrategy.MaxHeight">
      <summary>The stack height is the smallest value that contains the extended block progression dimension of all the inline elements on that line when those elements are properly aligned. This is the default.</summary>
    </member>
    <member name="F:System.Windows.LineStackingStrategy.BlockLineHeight">
      <summary>The stack height is determined by the block element line-height property value.</summary>
    </member>
    <member name="T:System.Windows.MessageBox">
      <summary>Displays a message to the user and optionally prompts for a response. </summary>
    </member>
    <member name="M:System.Windows.MessageBox.Show(System.String)">
      <summary>Displays a message box that contains the specified text and an OK button.</summary>
      <returns>
        <see cref="F:System.Windows.MessageBoxResult.OK" /> in all cases.</returns>
      <param name="messageBoxText">The message to display.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBoxText" /> is null.</exception>
    </member>
    <member name="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
      <summary>Displays a message box that contains the specified text, title bar caption, and response buttons. </summary>
      <returns>A value that indicates the user's response to the message. </returns>
      <param name="messageBoxText">The message to display.</param>
      <param name="caption">The title of the message box. </param>
      <param name="button">A value that indicates the button or buttons to display. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBoxText" /> is null.-or-<paramref name="caption" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="button" /> is not a valid <see cref="T:System.Windows.MessageBoxButton" /> value.</exception>
    </member>
    <member name="T:System.Windows.MessageBoxButton">
      <summary>Specifies the buttons to include when you display a message box.</summary>
    </member>
    <member name="F:System.Windows.MessageBoxButton.OK">
      <summary>Displays only the OK button.</summary>
    </member>
    <member name="F:System.Windows.MessageBoxButton.OKCancel">
      <summary>Displays both the OK and Cancel buttons.</summary>
    </member>
    <member name="T:System.Windows.MessageBoxResult">
      <summary>Represents a user's response to a message box.</summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.None">
      <summary>This value is not currently used. </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.OK">
      <summary>The user clicked the OK button. </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.Cancel">
      <summary>The user clicked the Cancel button or pressed ESC.</summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.Yes">
      <summary>This value is not currently used. </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.No">
      <summary>This value is not currently used. </summary>
    </member>
    <member name="T:System.Windows.NullableBoolConverter">
      <summary>Converts <see cref="T:System.Nullable`1" /> types (using the <see cref="T:System.Boolean" /> type constraint on the generic)  from strings.</summary>
    </member>
    <member name="M:System.Windows.NullableBoolConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.NullableBoolConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.NullableBoolConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether this converter can convert an object of the specified type to the <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic).</summary>
      <returns>true if <paramref name="sourceType" /> is a <see cref="T:System.String" />, <see cref="T:System.Boolean" />, or a <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic) that can be assigned from <paramref name="sourceType" />; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">The type that you want to convert from.</param>
    </member>
    <member name="M:System.Windows.NullableBoolConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic).</summary>
      <returns>A <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic) that represents the converted object.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The object to convert to a <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic).</param>
      <exception cref="T:System.NotSupportedException">The conversion attempt failed. <paramref name="value" /> is not a <see cref="T:System.String" />, <see cref="T:System.Boolean" />, or <see cref="T:System.Nullable`1" /> (using the <see cref="T:System.Boolean" /> type constraint on the generic) type.</exception>
    </member>
    <member name="T:System.Windows.OutOfBrowserSettings">
      <summary>Represents information about an application that is configured for out-of-browser support. </summary>
    </member>
    <member name="M:System.Windows.OutOfBrowserSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.OutOfBrowserSettings" /> class. </summary>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.Blurb">
      <summary>Gets a short description of the application.</summary>
      <returns>A short description of the application.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.BlurbProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.Blurb" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.Blurb" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.EnableGPUAcceleration">
      <summary>Gets a value that indicates whether to use graphics processor unit hardware acceleration for cached compositions, which potentially results in graphics optimization. </summary>
      <returns>true if GPU acceleration is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.EnableGPUAccelerationProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.EnableGPUAcceleration" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.EnableGPUAcceleration" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.Icons">
      <summary>Gets a collection of <see cref="T:System.Windows.Icon" /> instances associated with the application.</summary>
      <returns>The icons associated with the application.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.IconsProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.Icons" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.Icons" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.ShortName">
      <summary>Gets the short version of the application title. </summary>
      <returns>The short version of the application title. </returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.ShortNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.ShortName" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.ShortName" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.ShowInstallMenuItem">
      <summary>Gets a value that indicates whether the application right-click menu includes an install option.</summary>
      <returns>true if the right-click menu includes an install option; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.ShowInstallMenuItemProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.ShowInstallMenuItem" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.ShowInstallMenuItem" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.WindowSettings">
      <summary>Gets the settings applied to the application window.</summary>
      <returns>The settings applied to the application window.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.WindowSettingsProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.WindowSettings" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.WindowSettings" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary>Represents an x- and y-coordinate pair in two-dimensional space. Can also represent a logical point for certain property usages.</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>Initializes a <see cref="T:System.Windows.Point" /> structure that contains the specified values. </summary>
      <param name="x">The x-coordinate value of the <see cref="T:System.Windows.Point" /> structure. </param>
      <param name="y">The y-coordinate value of the <see cref="T:System.Windows.Point" /> structure. </param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>Determines whether the specified object is a <see cref="T:System.Windows.Point" /> and whether it contains the same values as this <see cref="T:System.Windows.Point" />. </summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Windows.Point" /> and contains the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values as this <see cref="T:System.Windows.Point" />; otherwise, false.</returns>
      <param name="o">The object to compare.</param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality.</summary>
      <returns>true if both <see cref="T:System.Windows.Point" /> structures contain the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values; otherwise, false.</returns>
      <param name="value">The point to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.Point" />.</summary>
      <returns>The hash code for this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality.</summary>
      <returns>true if both the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of <paramref name="point1" /> and <paramref name="point2" /> are equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Point" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Point" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for inequality</summary>
      <returns>true if <paramref name="point1" /> and <paramref name="point2" /> have different <see cref="P:System.Windows.Point.X" /> or <see cref="P:System.Windows.Point.Y" /> values; false if <paramref name="point1" /> and <paramref name="point2" /> have the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values.</returns>
      <param name="point1">The first point to compare.</param>
      <param name="point2">The second point to compare.</param>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format.</returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the IFormattable implementation. </param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>Gets or sets the <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>The <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure.  The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.PresentationFrameworkCollection`1">
      <summary>Provides a common collection class for Silverlight collections.</summary>
      <typeparam name="T">Type constraint for type safety of the constrained collection implementation.</typeparam>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <param name="value">The object to add.</param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> contains a specific value.</summary>
      <returns>true if the object is found in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />; otherwise, false.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</returns>
    </member>
    <member name="F:System.Windows.PresentationFrameworkCollection`1.CountProperty">
      <summary>Identifies the <see cref="P:System.Windows.PresentationFrameworkCollection`1.Count" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.PresentationFrameworkCollection`1.Count" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.IndexOf(`0)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
      <param name="value">The object to insert into the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <returns>true if an object was removed; otherwise, false.</returns>
      <param name="value">The object to remove from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove. </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> .</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <returns>The position into which the new element was inserted. </returns>
      <param name="value">The object to add.</param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> contains a specific value.</summary>
      <returns>true if the object is found in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />; otherwise, false.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
      <param name="value">The object to insert into the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</param>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>Represents the callback that is invoked when the effective property value of a dependency property changes.</summary>
      <param name="d">The <see cref="T:System.Windows.DependencyObject" /> on which the property has changed value.</param>
      <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>Defines certain behavior aspects of a dependency property, including conditions it was registered with. </summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class, using a provided property default value.</summary>
      <param name="defaultValue">A default value for the property where this <see cref="T:System.Windows.PropertyMetadata" /> is applied.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class, using a provided property default value and property changed callback reference.</summary>
      <param name="defaultValue">A default value for the property where this <see cref="T:System.Windows.PropertyMetadata" /> is applied.</param>
      <param name="propertyChangedCallback">A reference to the callback to call for property changed behavior.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class, using the supplied property changed callback reference.</summary>
      <param name="propertyChangedCallback">A reference to the callback to call for property changed behavior.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary>Gets the default value for the dependency property. </summary>
      <returns>The default value for the dependency property.</returns>
    </member>
    <member name="T:System.Windows.PropertyPath">
      <summary>Implements a data structure for describing a property as a path below another property, or below an owning type. Property paths are used in data binding to objects, and in storyboards and timelines for animations.</summary>
    </member>
    <member name="M:System.Windows.PropertyPath.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</summary>
      <param name="parameter">A dependency property identifier, or a property path string.</param>
    </member>
    <member name="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</summary>
      <param name="path">The path string for this <see cref="T:System.Windows.PropertyPath" />.</param>
      <param name="pathParameters">Do not use. See Remarks.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Provided an array of length greater than zero for <paramref name="pathParameters" />.</exception>
    </member>
    <member name="P:System.Windows.PropertyPath.Path">
      <summary>Gets the path value held by this <see cref="T:System.Windows.PropertyPath" />.</summary>
      <returns>The path value held by this <see cref="T:System.Windows.PropertyPath" />.</returns>
    </member>
    <member name="T:System.Windows.PropertyPathConverter">
      <summary>Provides type conversion support for the <see cref="T:System.Windows.PropertyPath" /> type. </summary>
    </member>
    <member name="M:System.Windows.PropertyPathConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyPathConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.PropertyPathConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of one type to the <see cref="T:System.Windows.PropertyPath" /> type.</summary>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
    </member>
    <member name="M:System.Windows.PropertyPathConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given value to the <see cref="T:System.Windows.PropertyPath" /> type.</summary>
      <returns>The returned <see cref="T:System.Windows.PropertyPath" />.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is not a string and is not an existing <see cref="T:System.Windows.PropertyPath" />.</exception>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>Describes the width, height, and point origin of a rectangle. </summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a <see cref="T:System.Windows.Rect" /> structure that has the specified x-coordinate, y-coordinate, width, and height. </summary>
      <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <exception cref="T:System.ArgumentException">width or height are less than 0.</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>Initializes a <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the two specified points. </summary>
      <param name="point1">The first point that the new rectangle must contain.</param>
      <param name="point2">The second point that the new rectangle must contain.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>Initializes a <see cref="T:System.Windows.Rect" /> structure based on an origin and size. </summary>
      <param name="location">The origin of the new <see cref="T:System.Windows.Rect" />.</param>
      <param name="size">The size of the new <see cref="T:System.Windows.Rect" />.</param>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>Gets the y-axis value of the bottom of the rectangle. </summary>
      <returns>The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <see cref="F:System.Double.NegativeInfinity" /> .</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>Indicates whether the rectangle described by the <see cref="T:System.Windows.Rect" /> contains the specified point.</summary>
      <returns>true if the rectangle described by the <see cref="T:System.Windows.Rect" /> contains the specified point; otherwise, false.</returns>
      <param name="point">The point to check.</param>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>Gets a special value that represents a rectangle with no position or area. </summary>
      <returns>The empty rectangle, which has <see cref="P:System.Windows.Rect.X" /> and <see cref="P:System.Windows.Rect.Y" /> property values of <see cref="F:System.Double.PositiveInfinity" />, and has <see cref="P:System.Windows.Rect.Width" /> and <see cref="P:System.Windows.Rect.Height" /> property values of <see cref="F:System.Double.NegativeInfinity" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>Indicates whether the specified object is equal to the current <see cref="T:System.Windows.Rect" />.</summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Rect" /> and has the same x,y,width,height values as the current <see cref="T:System.Windows.Rect" />; otherwise, false.</returns>
      <param name="o">The object to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>Indicates whether the specified <see cref="T:System.Windows.Rect" /> is equal to the current <see cref="T:System.Windows.Rect" />. </summary>
      <returns>true if the specified <see cref="T:System.Windows.Rect" /> has the same x,y,width,height property values as the current <see cref="T:System.Windows.Rect" />; otherwise, false.</returns>
      <param name="value">The rectangle to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>Creates a hash code for the <see cref="T:System.Windows.Rect" />. </summary>
      <returns>A hash code for the current <see cref="T:System.Windows.Rect" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>Gets or sets the height of the rectangle. </summary>
      <returns>A value that represents the height of the rectangle. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">Specified a value less than 0.</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>Finds the intersection of the rectangle represented by the current <see cref="T:System.Windows.Rect" /> and the rectangle represented by the specified <see cref="T:System.Windows.Rect" />, and stores the result as the current <see cref="T:System.Windows.Rect" />. </summary>
      <param name="rect">The rectangle to intersect with the current rectangle.</param>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>Gets a value that indicates whether the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</summary>
      <returns>true if the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>Gets the x-axis value of the left side of the rectangle. </summary>
      <returns>The x-axis value of the left side of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compares two <see cref="T:System.Windows.Rect" /> structures for equality.</summary>
      <returns>true if the <see cref="T:System.Windows.Rect" /> structures have the same x,y,width,height property values; otherwise, false.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compares two <see cref="T:System.Windows.Rect" /> structures for inequality.  </summary>
      <returns>true if the <see cref="T:System.Windows.Rect" /> structures do not have the same x,y,width,height property values; otherwise, false.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>Gets the x-axis value of the right side of the rectangle.  </summary>
      <returns>The x-axis value of the right side of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format.</returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the IFormattable implementation. </param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>Gets the y-axis position of the top of the rectangle. </summary>
      <returns>The y-axis position of the top of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>Returns a string representation of the <see cref="T:System.Windows.Rect" /> structure. </summary>
      <returns>A string representation of the current <see cref="T:System.Windows.Rect" /> structure. The string has the following form: "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />".</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>Returns a string representation of the rectangle by using the specified format provider. </summary>
      <returns>A string representation of the current rectangle that is determined by the specified format provider.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>Expands the rectangle represented by the current <see cref="T:System.Windows.Rect" /> exactly enough to contain the specified point. </summary>
      <param name="point">The point to include.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>Expands the rectangle represented by the current <see cref="T:System.Windows.Rect" /> exactly enough to contain the specified rectangle. </summary>
      <param name="rect">The rectangle to include.</param>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>Gets or sets the width of the rectangle.  </summary>
      <returns>A value that represents the width of the rectangle in pixels. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">Specified a value less than 0.</exception>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>Gets or sets the x-axis value of the left side of the rectangle. </summary>
      <returns>The x-axis value of the left side of the rectangle. This value is interpreted as pixels within the coordinate space.</returns>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>Gets or sets the y-axis value of the top side of the rectangle. </summary>
      <returns>The y-axis value of the top side of the rectangle. This value is interpreted as pixels within the coordinate space..</returns>
    </member>
    <member name="T:System.Windows.ResourceDictionary">
      <summary>Provides a dictionary that contains keyed resources used by components of a Silverlight-based application. </summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ResourceDictionary" /> class. </summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Add(System.Object,System.Object)">
      <summary>Adds an item to the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <param name="key">The string key of the item to add.</param>
      <param name="value">The item value to add. </param>
      <exception cref="T:System.NotSupportedException">Attempted to add null as a value.</exception>
      <exception cref="T:System.ArgumentException">Attempted to add an item with a <paramref name="key" /> that already exists in this <see cref="T:System.Windows.ResourceDictionary" />.-or-Attempted to use a <paramref name="key" /> that is not a string.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Add(System.String,System.Object)">
      <summary>Adds an item to the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <param name="key">The string key of the item to add.</param>
      <param name="value">The item value to add. </param>
      <exception cref="T:System.NotSupportedException">Attempted to add null as a value.</exception>
      <exception cref="T:System.ArgumentException">Attempted to add an item with a <paramref name="key" /> that already exists in this <see cref="T:System.Windows.ResourceDictionary" />.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Clear">
      <summary>Removes all items from this <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Contains(System.Object)">
      <summary>Returns a value that indicates whether a specified key exists in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <returns>true if an item with that key exists in the <see cref="T:System.Windows.ResourceDictionary" />; otherwise, false.</returns>
      <param name="key">The key to check for in the <see cref="T:System.Windows.ResourceDictionary" />.</param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Windows.ResourceDictionary" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Windows.ResourceDictionary" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Count">
      <summary>Gets the number of elements contained in the collection.</summary>
      <returns>The number of elements contained in the collection.</returns>
    </member>
    <member name="M:System.Windows.ResourceDictionary.GetEnumerator">
      <summary>Exposes the enumerator, which supports a simple iteration over a non-generic collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Windows.ResourceDictionary" /> has a fixed size.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Item(System.Object)">
      <summary>Gets the element at the specified index.</summary>
      <returns>The object if it exists; otherwise, null.</returns>
      <param name="key">The key of the element to get. </param>
      <exception cref="T:System.NotImplementedException">Attempted to set a value using the indexer. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is not a string.</exception>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <returns>The <see cref="T:System.Collections.ICollection" /> of all keys in this <see cref="T:System.Windows.ResourceDictionary" />.</returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.MergedDictionaries">
      <summary>Gets a collection of the <see cref="T:System.Windows.ResourceDictionary" /> dictionaries that constitute the various resource dictionaries in the merged dictionaries.</summary>
      <returns>A collection of the <see cref="T:System.Windows.ResourceDictionary" /> dictionaries that constitute the various resource dictionaries in the merged dictionaries. </returns>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Remove(System.Object)">
      <summary>Removes a specific item from the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <param name="key">The string key of the item to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Attempted to use a <paramref name="key" /> that is not a string.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Remove(System.String)">
      <summary>Removes a specific item from the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <param name="key">The string key of the item to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Source">
      <summary>Gets or sets a URI that provides the source location of a merged resource dictionary.</summary>
      <returns>A URI that provides the source location of a merged resource dictionary. This is typically a path within the XAP for an application, or a relative reference to a loose XAML file.</returns>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</summary>
      <param name="item">The object to add to the collection.</param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Clear">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Clear" />.</summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)" />.</summary>
      <returns>true if <paramref name="item" /> is found in the collection; otherwise, false.</returns>
      <param name="item">The object to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" />.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing. </param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.NotImplementedException">Thrown in all cases by this implementation.</exception>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Count">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</summary>
      <returns>The number of elements contained in the collection.</returns>
      <exception cref="T:System.NotImplementedException">Thrown in all cases by this implementation.</exception>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original collection. </returns>
      <param name="item">The object to remove from the collection.</param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.Object,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />.</summary>
      <param name="key">The object to use as the key for the element to add.</param>
      <param name="value">The object to use as the value for the element to add.</param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />.</summary>
      <returns>true if the dictionary contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the dictionary.</param>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.Object)">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />.</summary>
      <returns>The element with the specified key. </returns>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.IDictionary`2.Keys" />.</summary>
      <returns>A collection that contains the keys of the elements in the dictionary.</returns>
      <exception cref="T:System.NotImplementedException">Thrown in all cases.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />.</summary>
      <returns>true if the element was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="key" /> is not found in the original collection. </returns>
      <param name="key">The key of the element to remove. </param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.Object,System.Object@)">
      <summary>For a description of this member, see  <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />.</summary>
      <returns>true if the dictionary contains an object with the specified key; otherwise, false.</returns>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.IDictionary`2.Values" />.</summary>
      <returns>A collection that contains the values of the elements in the dictionary.</returns>
      <exception cref="T:System.NotImplementedException">Thrown in all cases.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
      <exception cref="T:System.NotImplementedException">Thrown in all cases.</exception>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>Always null. <see cref="T:System.Windows.ResourceDictionary" /> is not synchronized.</returns>
      <exception cref="T:System.NotImplementedException">Thrown in all cases.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An enumerator that can be used to iterate through the collection. </returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values of the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <returns>The <see cref="T:System.Collections.ICollection" /> of all values in this <see cref="T:System.Windows.ResourceDictionary" />.</returns>
    </member>
    <member name="T:System.Windows.RoutedEvent">
      <summary>Represents a routed event to the Silverlight event system.</summary>
    </member>
    <member name="M:System.Windows.RoutedEvent.ToString">
      <summary>Returns the string representation of the routed event.</summary>
      <returns>The name of the routed event.</returns>
    </member>
    <member name="T:System.Windows.RoutedEventArgs">
      <summary>Contains state information and event data associated with a routed event. </summary>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class. </summary>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.OriginalSource">
      <summary>Gets a reference to the object that raised the event. </summary>
      <returns>The object that raised the event.</returns>
    </member>
    <member name="T:System.Windows.RoutedEventHandler">
      <summary>Represents the method that will handle routed events.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Windows.RoutedPropertyChangedEventArgs`1">
      <summary>Provides data about a change in value to a dependency property as reported by particular routed events, including the previous and current value of the property that changed. </summary>
      <typeparam name="T">The type of the dependency property that has changed.</typeparam>
    </member>
    <member name="M:System.Windows.RoutedPropertyChangedEventArgs`1.#ctor(`0,`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" /> class, with provided old and new values.</summary>
      <param name="oldValue">The previous value of the property, before the event was raised.</param>
      <param name="newValue">The current value of the property at the time of the event.</param>
    </member>
    <member name="P:System.Windows.RoutedPropertyChangedEventArgs`1.NewValue">
      <summary>Gets the new value of a property as reported by a property-changed event. </summary>
      <returns>The generic value. In a practical implementation of the <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" />, the generic type of this property is replaced with the constrained type of the implementation.</returns>
    </member>
    <member name="P:System.Windows.RoutedPropertyChangedEventArgs`1.OldValue">
      <summary>Gets the previous value of the property as reported by a property-changed event. </summary>
      <returns>The generic value. In a practical implementation of the <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" />, the generic type of this property is replaced with the constrained type of the implementation.</returns>
    </member>
    <member name="T:System.Windows.RoutedPropertyChangedEventHandler`1">
      <summary>Represents methods that will handle various routed events that track property value changes.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data. Specific event definitions will constrain <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" /> to a type, with the type parameter of the constraint matching the type parameter constraint of a delegate implementation.</param>
      <typeparam name="T">The type of the property value where changes in value are reported.</typeparam>
    </member>
    <member name="T:System.Windows.Setter">
      <summary>Applies a value to a property in a <see cref="T:System.Windows.Style" />.</summary>
    </member>
    <member name="M:System.Windows.Setter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Setter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Setter.#ctor(System.Windows.DependencyProperty,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Setter" /> class with the specified property and value.</summary>
      <param name="property">The dependency property to apply the value to.</param>
      <param name="value">The value to apply to the property.</param>
    </member>
    <member name="P:System.Windows.Setter.Property">
      <summary>Gets or sets the property to apply the <see cref="P:System.Windows.Setter.Value" /> to.</summary>
      <returns>A <see cref="T:System.Windows.DependencyProperty" /> to which the <see cref="P:System.Windows.Setter.Value" /> will be applied. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Setter.Value">
      <summary>Gets or sets the value to apply to the property that is specified by the <see cref="T:System.Windows.Setter" />.</summary>
      <returns>The value to apply to the property that is specified by the <see cref="T:System.Windows.Setter" />.</returns>
    </member>
    <member name="T:System.Windows.SetterBase">
      <summary>Represents the base class for value setters. </summary>
    </member>
    <member name="P:System.Windows.SetterBase.IsSealed">
      <summary>Gets a value that indicates whether this object is in an immutable state.</summary>
      <returns>true if this object is in an immutable state; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.SetterBaseCollection">
      <summary>Represents a collection of objects that inherit from <see cref="T:System.Windows.SetterBase" />.</summary>
    </member>
    <member name="M:System.Windows.SetterBaseCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SetterBaseCollection" /> class. </summary>
    </member>
    <member name="P:System.Windows.SetterBaseCollection.IsSealed">
      <summary>Gets a value that indicates whether the collection is in a read-only state.</summary>
      <returns>true if this object is in a read-only state and cannot be changed; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Size">
      <summary>Describes the width and height of an object. </summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Size" /> structure and assigns it an initial <paramref name="width" /> and <paramref name="height" />.</summary>
      <param name="width">The initial width of the instance of <see cref="T:System.Windows.Size" />.</param>
      <param name="height">The initial height of the instance of <see cref="T:System.Windows.Size" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> or <paramref name="height" /> are less than 0.</exception>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>Gets a value that represents a static empty <see cref="T:System.Windows.Size" />. </summary>
      <returns>An empty instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>Compares an object to an instance of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the sizes are equal; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>Compares a value to an instance of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are equal; otherwise, false.</returns>
      <param name="value">The size to compare to this current instance of <see cref="T:System.Windows.Size" />.</param>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>Gets the hash code for this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The hash code for this instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>Gets or sets the height of this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The <see cref="P:System.Windows.Size.Height" /> of this instance of <see cref="T:System.Windows.Size" />, in pixels. The default is 0. The value cannot be negative.</returns>
      <exception cref="T:System.ArgumentException">Specified a value less than 0.</exception>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>Gets a value that indicates whether this instance of <see cref="T:System.Windows.Size" /> is <see cref="P:System.Windows.Size.Empty" />. </summary>
      <returns>true if this instance of size is <see cref="P:System.Windows.Size.Empty" />; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Size" /> are equal; otherwise false.</returns>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for inequality. </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are not equal; otherwise false.</returns>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Windows.Size" />.</summary>
      <returns>A string representation of this <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>Gets or sets the width of this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The <see cref="P:System.Windows.Size.Width" /> of this instance of <see cref="T:System.Windows.Size" />, in pixels. The default value is 0. The value cannot be negative.</returns>
      <exception cref="T:System.ArgumentException">Specified a value less than 0.</exception>
    </member>
    <member name="T:System.Windows.SizeChangedEventArgs">
      <summary>Provides data related to the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event. </summary>
    </member>
    <member name="P:System.Windows.SizeChangedEventArgs.NewSize">
      <summary>Gets the new size of the object reporting the size change.</summary>
      <returns>The new size. The <see cref="T:System.Windows.Size" /> structure contains the new height and width.</returns>
    </member>
    <member name="P:System.Windows.SizeChangedEventArgs.PreviousSize">
      <summary>Gets the previous size of the object reporting the size change.</summary>
      <returns>The previous size. </returns>
    </member>
    <member name="T:System.Windows.SizeChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.StartupEventArgs">
      <summary>Contains the event data for the <see cref="E:System.Windows.Application.Startup" /> event.</summary>
    </member>
    <member name="P:System.Windows.StartupEventArgs.InitParams">
      <summary>Gets the initialization parameters that were passed as part of HTML initialization of a Silverlight plug-in.</summary>
      <returns>The set of initialization parameters, as a dictionary with key strings and value strings.</returns>
    </member>
    <member name="T:System.Windows.StartupEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Application.Startup" /> event. </summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Style">
      <summary>Contains property setters that can be shared between instances of a type.</summary>
    </member>
    <member name="M:System.Windows.Style.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Style" /> class. </summary>
    </member>
    <member name="M:System.Windows.Style.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" />. </summary>
      <param name="targetType">The type to which the style will apply.</param>
    </member>
    <member name="P:System.Windows.Style.BasedOn">
      <summary>Gets or sets a defined style that is the basis of the current style.</summary>
      <returns>A defined style that is the basis of the current style. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Style.IsSealed">
      <summary>Gets a value that indicates whether the style is read-only and cannot be changed.</summary>
      <returns>true if the style is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Style.Seal">
      <summary>Locks the style so that the <see cref="P:System.Windows.Style.TargetType" /> property or any <see cref="T:System.Windows.Setter" /> in the <see cref="P:System.Windows.Style.Setters" /> collection cannot be changed.</summary>
    </member>
    <member name="P:System.Windows.Style.Setters">
      <summary>Gets a collection of <see cref="T:System.Windows.Setter" /> objects.</summary>
      <returns>A collection of <see cref="T:System.Windows.Setter" /> objects. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Windows.Style.TargetType">
      <summary>Gets or sets the type for which the style is intended.</summary>
      <returns>The type of object to which the style is applied.</returns>
    </member>
    <member name="T:System.Windows.StyleTypedPropertyAttribute">
      <summary>Represents an attribute that is applied to the class definition and reports the <see cref="P:System.Windows.Style.TargetType" /> of the properties that are of type <see cref="T:System.Windows.Style" />.</summary>
    </member>
    <member name="M:System.Windows.StyleTypedPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.StyleTypedPropertyAttribute" /> class.</summary>
    </member>
    <member name="P:System.Windows.StyleTypedPropertyAttribute.Property">
      <summary>Gets or sets the name of the property that is of type <see cref="T:System.Windows.Style" />.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="P:System.Windows.StyleTypedPropertyAttribute.StyleTargetType">
      <summary>Gets or sets the <see cref="P:System.Windows.Style.TargetType" /> of the <see cref="P:System.Windows.StyleTypedPropertyAttribute.Property" /> this attribute is specifying. </summary>
      <returns>The <see cref="P:System.Windows.Style.TargetType" /> of the <see cref="P:System.Windows.StyleTypedPropertyAttribute.Property" /> this attribute is specifying.</returns>
    </member>
    <member name="T:System.Windows.SystemColors">
      <summary>Contains system colors, system brushes, and system resource keys that correspond to system display elements.</summary>
    </member>
    <member name="P:System.Windows.SystemColors.ActiveBorderColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the active window's border.</summary>
      <returns>The color of the active window's border.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ActiveCaptionColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color of the active window's title bar.</summary>
      <returns>The background color of the active window's title bar.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ActiveCaptionTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the text in the active window's title bar.</summary>
      <returns>The color of the active window's title bar.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.AppWorkspaceColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the application workspace.</summary>
      <returns>The color of the application workspace.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the face color of a three-dimensional display element.</summary>
      <returns>The face color of a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlDarkColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the shadow color of a three-dimensional display element.</summary>
      <returns>The shadow color of a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlDarkDarkColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the dark shadow color of a three-dimensional display element.</summary>
      <returns>The dark shadow color of a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlLightColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the light color of a three-dimensional display element.</summary>
      <returns>The light color of a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlLightLightColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the highlight color of a three-dimensional display element.</summary>
      <returns>The highlight color of a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of text in a three-dimensional display element.</summary>
      <returns>The color of text in a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.DesktopColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the desktop.</summary>
      <returns>The color of the desktop.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.GrayTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of disabled text.</summary>
      <returns>The color of disabled text.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.HighlightColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color of selected items.</summary>
      <returns>The background color of selected items.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.HighlightTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the text of selected items.</summary>
      <returns>The color of the text of selected items.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.InactiveBorderColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of an inactive window's border.</summary>
      <returns>The color of an inactive window's border.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.InactiveCaptionColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color of an inactive window's title bar.</summary>
      <returns>The background color of an inactive window's title bar.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.InactiveCaptionTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the text of an inactive window's title bar.</summary>
      <returns>The color of the text of an inactive window's title bar.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.InfoColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color for the <see cref="T:System.Windows.Controls.ToolTip" /> control.</summary>
      <returns>The background color for the <see cref="T:System.Windows.Controls.ToolTip" /> control.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.InfoTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the text color for the <see cref="T:System.Windows.Controls.ToolTip" /> control.</summary>
      <returns>The text color for the <see cref="T:System.Windows.Controls.ToolTip" /> control.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.MenuColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of a menu's background.</summary>
      <returns>The color of a menu's background.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.MenuTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of a menu's text.</summary>
      <returns>The color of a menu's text.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ScrollBarColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color of a scroll bar.</summary>
      <returns>The background color of a scroll bar.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.WindowColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color in the client area of a window.</summary>
      <returns>The background color in the client area of a window.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.WindowFrameColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of a window frame.</summary>
      <returns>The color of a window frame.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.WindowTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the text in the client area of a window.</summary>
      <returns>The color of the text in the client area of a window.</returns>
    </member>
    <member name="T:System.Windows.SystemParameters">
      <summary>Contains properties that you can use to query system settings.</summary>
    </member>
    <member name="P:System.Windows.SystemParameters.HighContrast">
      <summary>Gets a value that indicates whether the client computer is in high-contrast mode.</summary>
      <returns>true if the client computer is in high-contrast mode; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.TemplateBindingExpression">
      <summary>Supports template binding.</summary>
    </member>
    <member name="T:System.Windows.TemplatePartAttribute">
      <summary>Represents an attribute that is applied to the class definition to identify the types of the named parts that are used for control templating.</summary>
    </member>
    <member name="M:System.Windows.TemplatePartAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TemplatePartAttribute" /> class</summary>
    </member>
    <member name="P:System.Windows.TemplatePartAttribute.Name">
      <summary>Gets or sets a string that reports the object model name of a template part.</summary>
      <returns>A string that should be used as the name of a template part in a template.</returns>
    </member>
    <member name="P:System.Windows.TemplatePartAttribute.Type">
      <summary>Gets or sets a string that reports the <see cref="T:System.Type" /> of a template part.</summary>
      <returns>A <see cref="T:System.Type" /> object that reports the type of a template part.</returns>
    </member>
    <member name="T:System.Windows.TemplateVisualStateAttribute">
      <summary>Specifies that a control can be in a certain state and that a <see cref="T:System.Windows.VisualState" /> is expected in the control's <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
    </member>
    <member name="M:System.Windows.TemplateVisualStateAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TemplateVisualStateAttribute" /> class. </summary>
    </member>
    <member name="P:System.Windows.TemplateVisualStateAttribute.GroupName">
      <summary>Gets or sets the name of the group that the state belongs to.</summary>
      <returns>The name of the group that the state belongs to.</returns>
    </member>
    <member name="P:System.Windows.TemplateVisualStateAttribute.Name">
      <summary>Gets or sets the name of the state that the control can be in.</summary>
      <returns>The name of the state that the control can be in.</returns>
    </member>
    <member name="T:System.Windows.TextAlignment">
      <summary>Specifies whether text is centered, left-aligned, or right-aligned.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Center">
      <summary>Text is centered.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Left">
      <summary>Text is aligned to the left.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Right">
      <summary>Text is aligned to the right.</summary>
    </member>
    <member name="T:System.Windows.TextDecorationCollection">
      <summary>Provides the value for the <see cref="P:System.Windows.Controls.TextBlock.TextDecorations" /> and <see cref="P:System.Windows.Documents.Inline.TextDecorations" /> properties.</summary>
    </member>
    <member name="T:System.Windows.TextDecorations">
      <summary>Implements a set of predefined text decorations.</summary>
    </member>
    <member name="P:System.Windows.TextDecorations.Underline">
      <summary>Specifies an underlined text decoration.</summary>
      <returns>A <see cref="T:System.Windows.TextDecorationCollection" /> that represents an underlined text decoration.</returns>
    </member>
    <member name="T:System.Windows.TextWrapping">
      <summary>Specifies whether text wraps when it reaches the edge of its container.</summary>
    </member>
    <member name="F:System.Windows.TextWrapping.Wrap">
      <summary>Line breaking occurs if a line of text overflows beyond the available width of its container. Line breaking occurs even if the standard line-breaking algorithm cannot determine any line break opportunity, such as when a line of text includes a long word that is constrained by a fixed-width container without scrolling.</summary>
    </member>
    <member name="F:System.Windows.TextWrapping.NoWrap">
      <summary>No line wrapping is performed.</summary>
    </member>
    <member name="T:System.Windows.Thickness">
      <summary>Describes the thickness of a frame around a rectangle. Four <see cref="T:System.Double" /> values describe the <see cref="P:System.Windows.Thickness.Left" />, <see cref="P:System.Windows.Thickness.Top" />, <see cref="P:System.Windows.Thickness.Right" />, and <see cref="P:System.Windows.Thickness.Bottom" /> sides of the rectangle, respectively. </summary>
    </member>
    <member name="M:System.Windows.Thickness.#ctor(System.Double)">
      <summary>Initializes a <see cref="T:System.Windows.Thickness" /> structure that has the specified uniform length on each side. </summary>
      <param name="uniformLength">The uniform length applied to all four sides of the bounding rectangle.</param>
    </member>
    <member name="M:System.Windows.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a <see cref="T:System.Windows.Thickness" /> structure that has specific lengths (supplied as a <see cref="T:System.Double" />) applied to each side of the rectangle. </summary>
      <param name="left">The thickness for the left side of the rectangle.</param>
      <param name="top">The thickness for the upper side of the rectangle.</param>
      <param name="right">The thickness for the right side of the rectangle</param>
      <param name="bottom">The thickness for the lower side of the rectangle.</param>
    </member>
    <member name="P:System.Windows.Thickness.Bottom">
      <summary>Gets or sets the width, in pixels, of the lower side of the bounding rectangle.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the width, in pixels, of the lower side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.Thickness.Equals(System.Object)">
      <summary>Compares this <see cref="T:System.Windows.Thickness" /> structure to another <see cref="T:System.Object" /> for equality.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Windows.Thickness.Equals(System.Windows.Thickness)">
      <summary>Compares this <see cref="T:System.Windows.Thickness" /> structure to another <see cref="T:System.Windows.Thickness" /> structure for equality.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Thickness" /> are equal; otherwise, false.</returns>
      <param name="thickness">An instance of <see cref="T:System.Windows.Thickness" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.Thickness.GetHashCode">
      <summary>Returns the hash code of the structure.</summary>
      <returns>A hash code for this instance of <see cref="T:System.Windows.Thickness" />.</returns>
    </member>
    <member name="P:System.Windows.Thickness.Left">
      <summary>Gets or sets the width, in pixels, of the left side of the bounding rectangle. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the width, in pixels, of the left side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.Thickness.op_Equality(System.Windows.Thickness,System.Windows.Thickness)">
      <summary>Compares the value of two <see cref="T:System.Windows.Thickness" /> structures for equality.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Thickness" /> are equal; otherwise, false.</returns>
      <param name="t1">The first structure to compare.</param>
      <param name="t2">The other structure to compare.</param>
    </member>
    <member name="M:System.Windows.Thickness.op_Inequality(System.Windows.Thickness,System.Windows.Thickness)">
      <summary>Compares two <see cref="T:System.Windows.Thickness" /> structures for inequality. </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Thickness" /> are not equal; otherwise, false.</returns>
      <param name="t1">The first structure to compare.</param>
      <param name="t2">The other structure to compare.</param>
    </member>
    <member name="P:System.Windows.Thickness.Right">
      <summary>Gets or sets the width, in pixels, of the right side of the bounding rectangle. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the width, in pixels, of the right side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.Thickness.Top">
      <summary>Gets or sets the width, in pixels, of the upper side of the bounding rectangle.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the width, in pixels, of the upper side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.Thickness.ToString">
      <summary>Returns the string representation of the <see cref="T:System.Windows.Thickness" /> structure.</summary>
      <returns>A <see cref="T:System.String" /> that represents the <see cref="T:System.Windows.Thickness" /> value.</returns>
    </member>
    <member name="T:System.Windows.TriggerAction">
      <summary>Serves as the base class for <see cref="T:System.Windows.Media.Animation.BeginStoryboard" />.</summary>
    </member>
    <member name="T:System.Windows.TriggerActionCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> objects.</summary>
    </member>
    <member name="M:System.Windows.TriggerActionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TriggerActionCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.TriggerBase">
      <summary>Serves as the base class for <see cref="T:System.Windows.EventTrigger" />.</summary>
    </member>
    <member name="T:System.Windows.TriggerCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.EventTrigger" /> objects. </summary>
    </member>
    <member name="T:System.Windows.UIElement">
      <summary>
        <see cref="T:System.Windows.UIElement" /> is a base class for most of the objects that have visual appearance and can process basic input in Silverlight. </summary>
    </member>
    <member name="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <paramref name="handledEventsToo" /> as true to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
      <param name="handledEventsToo">true to register the handler such that it is invoked even when the routed event is marked handled in its event data; false to register the handler with the default condition that it will not be invoked if the routed event is already marked handled. The default is false.Do not routinely ask to rehandle a routed event. For more information, see Remarks.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routedEvent" /> or<paramref name=" handler" /> are null<paramref name="." /></exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="routedEvent" /> does not represent a supported routed event.-or-<paramref name="handler" /> does not implement a supported delegate.</exception>
    </member>
    <member name="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
      <summary>Positions child objects and determines a size for a <see cref="T:System.Windows.UIElement" />. Parent objects that implement custom layout for their child elements should call this method from their layout override implementations to form a recursive layout update.</summary>
      <param name="finalRect">The final size that the parent computes for the child in layout, provided as a <see cref="T:System.Windows.Rect" /> value.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="finalRect" /> contained a <see cref="F:System.Double.NaN" /> or infinite value. See Remarks.</exception>
    </member>
    <member name="P:System.Windows.UIElement.CacheMode">
      <summary>Gets or sets a value that indicates that rendered content should be cached when possible.</summary>
      <returns>A value that indicates that rendered content should be cached when possible. If you specify a value of <see cref="T:System.Windows.Media.CacheMode" />, rendering operations from <see cref="P:System.Windows.UIElement.RenderTransform" /> and <see cref="P:System.Windows.UIElement.Opacity" /> execute on the graphics processing unit (GPU), if available. The default is null, which does not enable a cached composition mode. </returns>
    </member>
    <member name="F:System.Windows.UIElement.CacheModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.CaptureMouse">
      <summary>Sets mouse capture to a <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>Returns true if the object has mouse capture; otherwise, returns false.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Clip">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Geometry" /> used to define the outline of the contents of a <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The geometry to be used for clipping area sizing. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.UIElement.ClipProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.DesiredSize">
      <summary>Gets the size that this <see cref="T:System.Windows.UIElement" /> computed during the measure pass of the layout process. </summary>
      <returns>The size that this <see cref="T:System.Windows.UIElement" /> computed during the measure pass of the layout process.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Effect">
      <summary>Gets or sets the pixel shader effect to use for rendering this <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The pixel shader effect to use for rendering this <see cref="T:System.Windows.UIElement" />. The default is null (no effects).</returns>
    </member>
    <member name="F:System.Windows.UIElement.EffectProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotFocus">
      <summary>Occurs when a <see cref="T:System.Windows.UIElement" /> receives focus.</summary>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateArrange">
      <summary>Invalidates the arrange state (layout) for a <see cref="T:System.Windows.UIElement" />. After the invalidation, the <see cref="T:System.Windows.UIElement" /> will have its layout updated, which will occur asynchronously. </summary>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateMeasure">
      <summary>Invalidates the measurement state (layout) for a <see cref="T:System.Windows.UIElement" />. </summary>
    </member>
    <member name="P:System.Windows.UIElement.IsHitTestVisible">
      <summary>Gets or sets whether the contained area of this <see cref="T:System.Windows.UIElement" /> can return true values for hit testing. </summary>
      <returns>true if the contained area of this <see cref="T:System.Windows.UIElement" /> can be used for hit-testing; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsHitTestVisibleProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.UIElement.KeyDown">
      <summary>Occurs when a keyboard key is pressed while the <see cref="T:System.Windows.UIElement" /> has focus.</summary>
    </member>
    <member name="F:System.Windows.UIElement.KeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.KeyUp">
      <summary>Occurs when a keyboard key is released while the <see cref="T:System.Windows.UIElement" />  has focus.</summary>
    </member>
    <member name="F:System.Windows.UIElement.KeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LostFocus">
      <summary>Occurs when a <see cref="T:System.Windows.UIElement" /> loses focus.</summary>
    </member>
    <member name="E:System.Windows.UIElement.LostMouseCapture">
      <summary>Occurs when the object loses mouse (or stylus) capture.</summary>
    </member>
    <member name="M:System.Windows.UIElement.Measure(System.Windows.Size)">
      <summary>Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />. Typically, objects that implement custom layout for their layout children call this method from their own <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementations to form a recursive layout update.</summary>
      <param name="availableSize">The available space that a parent can allocate a child object. A child object can request a larger space than what is available; the provided size might be accommodated if scrolling or other resize behavior is possible in that particular container.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="availableSize" /> contained a <see cref="F:System.Double.NaN" /> value. See Remarks.</exception>
    </member>
    <member name="E:System.Windows.UIElement.MouseEnter">
      <summary>Occurs when the mouse (or a stylus) enters the bounding area of a <see cref="T:System.Windows.UIElement" />.</summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeave">
      <summary>Occurs when the mouse (or the stylus) leaves the bounding area of a <see cref="T:System.Windows.UIElement" />.</summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed (or when the tip of the stylus touches the tablet) while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />.</summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released (or the tip of the stylus is removed from the tablet) while the mouse (or the stylus) is over a <see cref="T:System.Windows.UIElement" /> (or while a <see cref="T:System.Windows.UIElement" /> holds mouse capture).</summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseMove">
      <summary>Occurs when the coordinate position of the mouse (or stylus) changes while over a <see cref="T:System.Windows.UIElement" /> (or while a <see cref="T:System.Windows.UIElement" /> holds mouse capture).</summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />, or the <see cref="T:System.Windows.UIElement" /> has focus.</summary>
    </member>
    <member name="M:System.Windows.UIElement.OnCreateAutomationPeer">
      <summary>When implemented in a derived class, returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Silverlight automation infrastructure.</summary>
      <returns>The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> subclass to return.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Opacity">
      <summary>Gets or sets the degree of the object's opacity.</summary>
      <returns>A value between 0 and 1.0 that declares the opacity factor, with 1.0 meaning full opacity and 0 meaning transparent. The default value is 1.0.</returns>
    </member>
    <member name="P:System.Windows.UIElement.OpacityMask">
      <summary>Gets or sets the brush used to alter the opacity of regions of this object.</summary>
      <returns>A brush that describes the opacity applied to this object. The default is null.</returns>
    </member>
    <member name="F:System.Windows.UIElement.OpacityMaskProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.UIElement.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Projection">
      <summary>Gets or sets the perspective projection (3-D effect) to apply when rendering this <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The perspective projection to apply when rendering this <see cref="T:System.Windows.UIElement" />. The default is null (no perspective applied).</returns>
    </member>
    <member name="F:System.Windows.UIElement.ProjectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Projection" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Projection" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseMouseCapture">
      <summary>Removes mouse capture from a <see cref="T:System.Windows.UIElement" />. After this call, typically no object holds mouse capture.</summary>
    </member>
    <member name="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Removes the specified routed event handler from this <see cref="T:System.Windows.UIElement" />. </summary>
      <param name="routedEvent">The identifier of the routed event for which the handler is attached.</param>
      <param name="handler">The specific handler implementation to remove from the event handler collection on this <see cref="T:System.Windows.UIElement" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routedEvent" /> or<paramref name=" handler" /> are null<paramref name="." /></exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="routedEvent" /> does not represent a supported routed event.-or-<paramref name="handler" /> does not implement a supported delegate.</exception>
    </member>
    <member name="P:System.Windows.UIElement.RenderSize">
      <summary>Gets the final render size of a <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The rendered size for this object. There is no default value.</returns>
    </member>
    <member name="P:System.Windows.UIElement.RenderTransform">
      <summary>Gets or sets transform information that affects the rendering position of a <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>Describes the specifics of the desired render transform. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.UIElement.RenderTransformOrigin">
      <summary>Gets or sets the origin point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The origin point of the render transform. The default value is a point with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.UIElement.RenderTransformOriginProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.UIElement.RenderTransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.TransformToVisual(System.Windows.UIElement)">
      <summary>Returns a transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement" /> to the specified object.</summary>
      <returns>The transform information as an object. Call <see cref="M:System.Windows.Media.GeneralTransform.Transform(System.Windows.Point)" /> on this object to get a practical transform.</returns>
      <param name="visual">The object to compare to the current object for purposes of obtaining the transform.</param>
    </member>
    <member name="M:System.Windows.UIElement.UpdateLayout">
      <summary>Ensures that all positions of child objects of a <see cref="T:System.Windows.UIElement" /> are properly updated for layout. </summary>
    </member>
    <member name="P:System.Windows.UIElement.UseLayoutRounding">
      <summary>Gets or sets a value that determines whether rendering for the object and its subtree should use rounding behavior that aligns rendering to whole pixels.</summary>
      <returns>true if rendering and layout should use rounding to whole pixels; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.UIElement.UseLayoutRoundingProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.UseLayoutRounding" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.UseLayoutRounding" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Visibility">
      <summary>Gets or sets the visibility of a <see cref="T:System.Windows.UIElement" />. A <see cref="T:System.Windows.UIElement" /> that is not visible does not render and does not communicate its desired size to layout.</summary>
      <returns>A value of the enumeration. The default value is <see cref="F:System.Windows.Visibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.UIElement.VisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.VerticalAlignment">
      <summary>Describes how a child element is vertically positioned or stretched within a parent's layout slot. </summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Top">
      <summary>The element is aligned to the top of the parent's layout slot.</summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Center">
      <summary>The element is aligned to the center of the parent's layout slot.</summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Bottom">
      <summary>The element is aligned to the bottom of the parent's layout slot. </summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Stretch">
      <summary>The element is stretched to fill the entire layout slot of the parent element.</summary>
    </member>
    <member name="T:System.Windows.Visibility">
      <summary>Specifies the display state of an element. </summary>
    </member>
    <member name="F:System.Windows.Visibility.Visible">
      <summary>Display the element.</summary>
    </member>
    <member name="F:System.Windows.Visibility.Collapsed">
      <summary>Do not display the element, and do not reserve space for it in layout.</summary>
    </member>
    <member name="T:System.Windows.VisualState">
      <summary>Represents the visual appearance of the control when it is in a specific state.</summary>
    </member>
    <member name="M:System.Windows.VisualState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.VisualState" /> class. </summary>
    </member>
    <member name="P:System.Windows.VisualState.Name">
      <summary>Gets the name of the <see cref="T:System.Windows.VisualState" />.</summary>
      <returns>The name of the <see cref="T:System.Windows.VisualState" />.</returns>
    </member>
    <member name="P:System.Windows.VisualState.Storyboard">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Animation.Storyboard" /> that defines the appearance of the control when it is the state that is represented by the <see cref="T:System.Windows.VisualState" />. </summary>
      <returns>A Storyboard that defines the appearance of the control when it is the state that is represented by the <see cref="T:System.Windows.VisualState" />.</returns>
    </member>
    <member name="T:System.Windows.VisualStateChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> and <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanged" /> events. </summary>
    </member>
    <member name="M:System.Windows.VisualStateChangedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.VisualStateChangedEventArgs" /> class. </summary>
    </member>
    <member name="P:System.Windows.VisualStateChangedEventArgs.Control">
      <summary>Gets the <see cref="T:System.Windows.Controls.Control" /> that is transitioning states.</summary>
      <returns>The <see cref="T:System.Windows.Controls.Control" /> that is transitioning states.</returns>
    </member>
    <member name="P:System.Windows.VisualStateChangedEventArgs.NewState">
      <summary>Gets the state the <see cref="T:System.Windows.Controls.Control" /> is transitioning to or has transitioned to.</summary>
      <returns>The state the <see cref="T:System.Windows.Controls.Control" /> is transitioning to or has transitioned to.</returns>
    </member>
    <member name="P:System.Windows.VisualStateChangedEventArgs.OldState">
      <summary>Gets the state the <see cref="T:System.Windows.Controls.Control" /> is transitioning from or has transitioned from.</summary>
      <returns>The state the <see cref="T:System.Windows.Controls.Control" /> is transitioning from or has transitioned from.</returns>
    </member>
    <member name="T:System.Windows.VisualStateGroup">
      <summary>Contains mutually exclusive <see cref="T:System.Windows.VisualState" /> objects and <see cref="T:System.Windows.VisualTransition" /> objects that are used to go from one state to another.</summary>
    </member>
    <member name="M:System.Windows.VisualStateGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.VisualStateGroup" /> class. </summary>
    </member>
    <member name="E:System.Windows.VisualStateGroup.CurrentStateChanged">
      <summary>Occurs after a control transitions into a different state.</summary>
    </member>
    <member name="E:System.Windows.VisualStateGroup.CurrentStateChanging">
      <summary>Occurs when a control begins transitioning into a different state.</summary>
    </member>
    <member name="P:System.Windows.VisualStateGroup.Name">
      <summary>Gets the name of the <see cref="T:System.Windows.VisualStateGroup" />.</summary>
      <returns>The name of the <see cref="T:System.Windows.VisualStateGroup" />.</returns>
    </member>
    <member name="P:System.Windows.VisualStateGroup.States">
      <summary>Gets the collection of mutually exclusive <see cref="T:System.Windows.VisualState" /> objects.</summary>
      <returns>The collection of mutually exclusive <see cref="T:System.Windows.VisualState" /> objects.</returns>
    </member>
    <member name="P:System.Windows.VisualStateGroup.Transitions">
      <summary>Gets the collection of <see cref="T:System.Windows.VisualTransition" /> objects.</summary>
      <returns>The collection of <see cref="T:System.Windows.VisualTransition" /> objects.</returns>
    </member>
    <member name="T:System.Windows.VisualStateManager">
      <summary>Manages states and the logic for transitioning between states for controls.</summary>
    </member>
    <member name="M:System.Windows.VisualStateManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.VisualStateManager" /> class. </summary>
    </member>
    <member name="P:System.Windows.VisualStateManager.CustomVisualStateManager">
      <summary>Gets or sets the <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control. </summary>
      <returns>The <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control. The default is null.</returns>
    </member>
    <member name="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty">
      <summary>Identifies the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> attached property.</summary>
      <returns>The <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control. </returns>
      <param name="obj">The element from which to get the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.</exception>
    </member>
    <member name="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)">
      <summary>Gets the value of the VisualStateManager.VisualStateGroups attached property.</summary>
      <returns>The collection of <see cref="T:System.Windows.VisualStateGroup" /> objects that is associated with the specified object.</returns>
      <param name="obj">The element from which to get the VisualStateManager.VisualStateGroups.</param>
    </member>
    <member name="M:System.Windows.VisualStateManager.GoToState(System.Windows.Controls.Control,System.String,System.Boolean)">
      <summary>Transitions the control between two states.</summary>
      <returns>true if the control successfully transitioned to the new state; otherwise, false.</returns>
      <param name="control">The control to transition between states. </param>
      <param name="stateName">The state to transition to.</param>
      <param name="useTransitions">true to use a <see cref="T:System.Windows.VisualTransition" /> to transition between states; otherwise, false.</param>
    </member>
    <member name="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)">
      <summary>Transitions a control between states.</summary>
      <returns>true if the control successfully transitioned to the new state; otherwise, false.</returns>
      <param name="control">The control to transition between states. </param>
      <param name="templateRoot">The root element of the control's <see cref="T:System.Windows.Controls.ControlTemplate" />.</param>
      <param name="stateName">The name of the state to transition to.</param>
      <param name="group">The <see cref="T:System.Windows.VisualStateGroup" /> that the state belongs to.</param>
      <param name="state">The representation of the state to transition to.</param>
      <param name="useTransitions">true to use a <see cref="T:System.Windows.VisualTransition" /> to transition between states; otherwise, false.</param>
    </member>
    <member name="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.Controls.Control)">
      <summary>Raises the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanged" /> event on the specified <see cref="T:System.Windows.VisualStateGroup" />.</summary>
      <param name="stateGroup">The object on which the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> event</param>
      <param name="oldState">The state that the control transitioned from.</param>
      <param name="newState">The state that the control transitioned to.</param>
      <param name="control">The control that transitioned states.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateGroup" /> is null.-or-<paramref name="newState" /> is null.-or-<paramref name="control" /> is null.</exception>
    </member>
    <member name="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.Controls.Control)">
      <summary>Raises the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> event on the specified <see cref="T:System.Windows.VisualStateGroup" />.</summary>
      <param name="stateGroup">The object on which the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> event</param>
      <param name="oldState">The state that the control is transitioning from.</param>
      <param name="newState">The state that the control is transitioning to.</param>
      <param name="control">The control that is transitioning states.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateGroup" /> is null.-or-<paramref name="newState" /> is null.-or-<paramref name="control" /> is null.</exception>
    </member>
    <member name="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)">
      <summary>Sets the value of the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> attached property.</summary>
      <param name="obj">The object on which to set the property.</param>
      <param name="value">The <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:System.Windows.VisualTransition">
      <summary>Represents the visual behavior that occurs when the control transitions from one state to another.</summary>
    </member>
    <member name="M:System.Windows.VisualTransition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.VisualTransition" /> class. </summary>
    </member>
    <member name="P:System.Windows.VisualTransition.From">
      <summary>Gets or sets the name of the <see cref="T:System.Windows.VisualState" /> to transition from.</summary>
      <returns>The name of the <see cref="T:System.Windows.VisualState" /> to transition from.</returns>
    </member>
    <member name="P:System.Windows.VisualTransition.GeneratedDuration">
      <summary>Gets or sets the amount of time it takes to move from one state to another.</summary>
      <returns>The amount of time it takes to move from one state to another.</returns>
    </member>
    <member name="P:System.Windows.VisualTransition.GeneratedEasingFunction">
      <summary>Gets or sets the easing function applied to the generated animations.</summary>
      <returns>An <see cref="T:System.Windows.Media.Animation.IEasingFunction" /> that is applied to the generated animations.</returns>
    </member>
    <member name="P:System.Windows.VisualTransition.Storyboard">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.Storyboard" /> that occurs when the transition occurs.</summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.Storyboard" /> that occurs when the transition occurs.</returns>
    </member>
    <member name="P:System.Windows.VisualTransition.To">
      <summary>Gets or sets the name of the <see cref="T:System.Windows.VisualState" /> to transition to.</summary>
      <returns>The name of the <see cref="T:System.Windows.VisualState" /> to transition to.</returns>
    </member>
    <member name="T:System.Windows.WindowSettings">
      <summary>Represents information about an out-of-browser application window.</summary>
    </member>
    <member name="M:System.Windows.WindowSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.WindowSettings" /> class. </summary>
    </member>
    <member name="P:System.Windows.WindowSettings.Height">
      <summary>Gets the initial window height of the application.</summary>
      <returns>The initial window height of the application.</returns>
    </member>
    <member name="F:System.Windows.WindowSettings.HeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.WindowSettings.Height" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.WindowSettings.Height" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.WindowSettings.Title">
      <summary>Gets the full title of the out-of-browser application for display in the title bar of the application window.</summary>
      <returns>The full title of the application.</returns>
    </member>
    <member name="F:System.Windows.WindowSettings.TitleProperty">
      <summary>Identifies the <see cref="P:System.Windows.WindowSettings.Title" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.WindowSettings.Title" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.WindowSettings.Width">
      <summary>Gets the initial window width of the application.</summary>
      <returns>The initial window width of the application.</returns>
    </member>
    <member name="F:System.Windows.WindowSettings.WidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.WindowSettings.Width" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.WindowSettings.Width" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationElementIdentifiers">
      <summary>Contains values used as automation property identifiers by UI automation providers.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AcceleratorKeyProperty">
      <summary>Identifies the accelerator key automation property. The accelerator key property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AccessKeyProperty">
      <summary>Identifies the access key automation property. The access key property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationIdProperty">
      <summary>Identifies the automation element identifier  automation property. The automation element identifier value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.BoundingRectangleProperty">
      <summary>Identifies the bounding rectangle automation property. The bounding rectangle property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ClassNameProperty">
      <summary>Identifies the class name automation property. The class name property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" /> method. </summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ClickablePointProperty">
      <summary>Identifies the clickable point automation property. A valid clickable point property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ControlTypeProperty">
      <summary>Identifies the control type  automation property. The control type property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" /> method. </summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.HasKeyboardFocusProperty">
      <summary>Identifies the keyboard focus automation property. The keyboard focus state is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.HelpTextProperty">
      <summary>Identifies the help text automation property. The help text property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsContentElementProperty">
      <summary>Identifies the content element determination automation property. The content element status indicates whether the element contains content that is valuable to the end user. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsControlElementProperty">
      <summary>Identifies the control element determination automation property. The control element status indicates whether the element contains user interface components that can be manipulated. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsEnabledProperty">
      <summary>Identifies the enabled determination automation property. The enabled status indicates whether the item referenced by the automation peer is enabled. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsKeyboardFocusableProperty">
      <summary>Identifies the keyboard-focusable determination automation property. The keyboard focusable status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsOffscreenProperty">
      <summary>Identifies the offscreen determination automation property. The offscreen status indicates whether the item referenced by the automation peer is off the screen. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" /> method. </summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsPasswordProperty">
      <summary>Identifies the password determination automation property. The password status indicates whether the item referenced by the automation peer contains a password. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsRequiredForFormProperty">
      <summary>Identifies the form requirement determination automation property. The form requirement status indicates whether the element must be completed on a form. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ItemStatusProperty">
      <summary>Identifies the item status automation property. The current item status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ItemTypeProperty">
      <summary>Identifies the item type automation property. The item type value is returned by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LabeledByProperty">
      <summary>Identifies the labeled-by peer automation property. The current label peer is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LocalizedControlTypeProperty">
      <summary>Identifies the localized control type automation property. The current localized control type is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlTypeCore" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.NameProperty">
      <summary>Identifies the element name automation property. The current name is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.OrientationProperty">
      <summary>Identifies the orientation automation property. The current orientation value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationProperties">
      <summary>Provides support for getting or setting the value of instance-level values of automation properties. These property values are set as attached properties (typically in XAML) and supplement or override automation property values from a given control's <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />. </summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AcceleratorKey">
      <summary>Gets or sets the accelerator key string for the element.</summary>
      <returns>The accelerator key string for the element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AccessKey">
      <summary>Gets or sets the access key for the element.</summary>
      <returns>The access key for the element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AccessKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AutomationId">
      <summary>Gets or set the string that uniquely identifies the element to UI automation.</summary>
      <returns>The string that uniquely identifies the element to UI automation.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AutomationIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The accelerator key, as a string.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAccessKey(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The access key, as a string.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAutomationId(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The UI Automation identifier for the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetHelpText(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The help text for the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>true if the specified element is required for completion of a form; otherwise, false.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The item status of the element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The item type of the element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetLabeledBy(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The element that is targeted by the label. </returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetName(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The name of the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.HelpText">
      <summary>Gets or sets the help text for the element.</summary>
      <returns>The help text for the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.HelpTextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm">
      <summary>Gets or sets a value that indicates whether the element is required to be filled out on a form.</summary>
      <returns>true if the element is required to be filled out on a form; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.ItemStatus">
      <summary>Gets or sets a description of the status of an item in an element.</summary>
      <returns>The status of an item in an element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.ItemStatusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.ItemType">
      <summary>Gets or sets a description of the type of the specified element.</summary>
      <returns>The description of the type of the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.ItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.LabeledBy">
      <summary>Gets or sets the element that contains the text label for the element.</summary>
      <returns>The element that contains the text label for the element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.LabeledByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.Name">
      <summary>Gets or sets the automation name of the element.</summary>
      <returns>The name of the element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property. </returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAcceleratorKey(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The accelerator key value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAccessKey(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The access key value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAutomationId(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The UI automation identifier value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetHelpText(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The help text.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetIsRequiredForForm(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">true to specify that the element is required to be filled out on a form; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetItemStatus(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The item status.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetItemType(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The item type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetLabeledBy(System.Windows.DependencyObject,System.Windows.UIElement)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The UI element that represents the label for <paramref name="element" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetName(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The object name.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Automation.AutomationProperty">
      <summary>Identifies a property of <see cref="T:System.Windows.Automation.AutomationElementIdentifiers" />. </summary>
    </member>
    <member name="T:System.Windows.Automation.DockPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IDockProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPatternIdentifiers.DockPositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IDockProvider.DockPosition" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.DockPosition">
      <summary>Contains values that specify the dock position of an object within a docking container.</summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Top">
      <summary>Indicates that the UI automation element is docked along the top edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Left">
      <summary>Indicates that the UI automation element is docked along the left edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Bottom">
      <summary>Indicates that the UI automation element is docked along the bottom edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Right">
      <summary>Indicates that the UI automation element is docked along the right edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Fill">
      <summary>Indicates that the UI automation element is docked along all edges of the docking container and fills all available space within the container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.None">
      <summary>Indicates that the UI automation element is not docked to any edge of the docking container</summary>
    </member>
    <member name="T:System.Windows.Automation.ElementNotAvailableException">
      <summary>The exception that is thrown when an attempt is made to access a UI automation element corresponding to a part of the user interface that is no longer available.</summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class. </summary>
    </member>
    <member name="T:System.Windows.Automation.ElementNotEnabledException">
      <summary>The exception that is thrown when an attempt is made through UI automation to manipulate a control that is not enabled. </summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class. </summary>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapsePatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePatternIdentifiers.ExpandCollapseStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapseState">
      <summary>Contains values that specify the <see cref="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState" /> automation property value of a UI automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.Collapsed">
      <summary>No child nodes, controls, or content of the UI automation element are displayed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.Expanded">
      <summary>All child nodes, controls or content of the UI automation element are displayed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.PartiallyExpanded">
      <summary>Some, but not all, child nodes, controls, or content of the UI automation element are displayed. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.LeafNode">
      <summary>The UI automation element has no child nodes, controls, or content to display.</summary>
    </member>
    <member name="T:System.Windows.Automation.GridItemPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ColumnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Column" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ColumnSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ContainingGridProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.RowProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Row" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.RowSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan" /> property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.GridPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.ColumnCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.RowCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.RowCount" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.MultipleViewPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.CurrentViewProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.SupportedViewsProperty">
      <summary>Identifies the automation property that gets the control-specific collection of views.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.RangeValuePatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.LargeChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.MaximumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.MinimumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.SmallChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.RowOrColumnMajor">
      <summary>Specifies whether data in a table should be read primarily by row or by column.</summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.RowMajor">
      <summary>Data in the table should be read row by row. </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.ColumnMajor">
      <summary>Data in the table should be read column by column. </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.Indeterminate">
      <summary>The best way to present the data is indeterminate.</summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollAmount">
      <summary>Contains values that are used by the <see cref="T:System.Windows.Automation.Provider.IScrollProvider" /> pattern to indicate the direction and distance to scroll.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.LargeDecrement">
      <summary>Specifies that scrolling is performed in large decrements, which is equivalent to pressing the PAGE UP key or to clicking a blank part of a scrollbar. If the distance represented by the PAGE UP key is not a relevant amount for the control, or if no scrollbar exists, the value represents an amount equal to the size of the currently visible window.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.SmallDecrement">
      <summary>Specifies that scrolling is performed in small decrements, which is equivalent to pressing an arrow key or to clicking the arrow button on a scrollbar. </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.NoAmount">
      <summary>Specifies that scrolling should not be performed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.LargeIncrement">
      <summary>Specifies that scrolling is performed in large increments, which is equivalent to pressing the PAGE DOWN key or to clicking a blank part of a scrollbar. If the distance represented by the PAGE DOWN key is not a relevant amount for the control, or if no scrollbar exists, the value represents an amount equal to the size of the currently visible region.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.SmallIncrement">
      <summary>Specifies that scrolling is performed in small increments, which equivalent to pressing an arrow key or to clicking the arrow button on a scrollbar. </summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IScrollProvider" /> pattern, as well as the <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> constant.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll">
      <summary>Specifies that scrolling should not be performed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.SelectionItemPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.SelectionContainerProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.SelectionPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.CanSelectMultipleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.IsSelectionRequiredProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.SelectionProperty">
      <summary>Identifies the property that gets the selected items in a container.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.TableItemPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.ITableProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.ColumnHeaderItemsProperty">
      <summary>Identifies the automation property that retrieves all the column headers associated with a table item or cell.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.RowHeaderItemsProperty">
      <summary>Identifies the automation property that retrieves all the row headers associated with a table item or cell.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.TablePatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.ITableProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.ColumnHeadersProperty">
      <summary>Identifies the automation property that is accessed by the  <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.RowHeadersProperty">
      <summary>Identifies the automation property that is accessed by the <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.RowOrColumnMajorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.TogglePatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IToggleProvider" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TogglePatternIdentifiers.ToggleStateProperty">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ToggleState" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.ToggleState">
      <summary>Contains values that specify the <see cref="T:System.Windows.Automation.ToggleState" /> of a UI automation element</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.Off">
      <summary>The UI automation element is not selected, checked, marked, or otherwise activated.</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.On">
      <summary>The UI automation element  is selected, checked, marked, or otherwise activated.</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.Indeterminate">
      <summary>The UI automation element is in an indeterminate state.</summary>
    </member>
    <member name="T:System.Windows.Automation.TransformPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.ITransformProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanMoveProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanMove" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanResizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanResize" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanRotateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.ValuePatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.Value" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.WindowInteractionState">
      <summary>Defines values that specify the current state of the window for purposes of user or programmatic interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.Running">
      <summary>The window is running. This does not guarantee that the window is responding or ready for user interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.Closing">
      <summary>The window is closing. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.ReadyForUserInteraction">
      <summary>The window is ready for user interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.BlockedByModalWindow">
      <summary>The window is blocked by a modal window. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.NotResponding">
      <summary>The window is not responding. </summary>
    </member>
    <member name="T:System.Windows.Automation.WindowPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IWindowProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.CanMaximizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.CanMinimizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.IsModalProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.IsTopmostProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowInteractionStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowVisualStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.WindowVisualState">
      <summary>Contains values that specify the visual state of a window for the <see cref="T:System.Windows.Automation.Provider.IWindowProvider" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Normal">
      <summary>Specifies that the window is normal (restored). </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Maximized">
      <summary>Specifies that the window is maximized. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Minimized">
      <summary>Specifies that the window is minimized.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationControlType">
      <summary>Specifies the control type that is exposed to the UI automation client.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Button">
      <summary>A button control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Calendar">
      <summary>A calendar control, such as a date picker.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.CheckBox">
      <summary>A check box control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ComboBox">
      <summary>A combo box control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Edit">
      <summary>An edit control, such as a text box.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Hyperlink">
      <summary>A hyperlink control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Image">
      <summary>An image control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ListItem">
      <summary>A list item control, which is a child item of a list control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.List">
      <summary>A list control, such as a list box.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Menu">
      <summary>A menu control, such as a top-level menu in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuBar">
      <summary>A menu bar control, which generally contains a set of top-level menus.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuItem">
      <summary>A menu item control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ProgressBar">
      <summary>A progress bar control, which visually indicates the progress of a lengthy operation.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.RadioButton">
      <summary>A radio button control, which is a selection mechanism allowing exactly one selected item in a group.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ScrollBar">
      <summary>A scroll bar control, such as a scroll bar in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Slider">
      <summary>A slider control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Spinner">
      <summary>A spinner control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.StatusBar">
      <summary>A status bar control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Tab">
      <summary>A tab control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TabItem">
      <summary>A tab item control, which represents a page of a tab control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Text">
      <summary>An edit control, such as a text box or rich text box.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolBar">
      <summary>A toolbar, such as the control that contains a set of command buttons in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolTip">
      <summary>A tooltip control, an informational window that appears as a result of moving the pointer over a control or sometimes when tabbing to a control using the keyboard.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Tree">
      <summary>A tree control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TreeItem">
      <summary>A node in a tree control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Custom">
      <summary>A control that is not one of the defined control types.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Group">
      <summary>A group control, which acts as a container for other controls.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Thumb">
      <summary>The control in a scrollbar that can be dragged to a different position.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.DataGrid">
      <summary>A data grid control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.DataItem">
      <summary>A data item control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Document">
      <summary>A document control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.SplitButton">
      <summary>A split button, which is a button that performs a default action and can also expand to a list of other possible actions.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Window">
      <summary>A window frame, which contains child objects.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Pane">
      <summary>A pane control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Header">
      <summary>A header control, which is a container for the labels of rows and columns of information.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.HeaderItem">
      <summary>A header item, which is the label for a row or column of information.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Table">
      <summary>A table.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TitleBar">
      <summary>The caption bar on a window.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Separator">
      <summary>A separator, which creates a visual division in controls such as menus and toolbars.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationEvents">
      <summary>Specifies the event that is raised by the element through the associated <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipOpened">
      <summary>The event that is raised when a tooltip is opened.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipClosed">
      <summary>The event that is raised when a tooltip is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuOpened">
      <summary>The event that is raised when a menu is opened. .</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuClosed">
      <summary>The event that is raised when a menu is closed. </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.AutomationFocusChanged">
      <summary>The event that is raised when the focus has changed. See <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked">
      <summary>The event that is raised when a control is activated. See <see cref="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementAddedToSelection">
      <summary>The event that is raised when an item is added to a collection of selected items. See <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementRemovedFromSelection">
      <summary>The event that is raised when an item is removed from a collection of selected items. See <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementSelected">
      <summary>The event that is raised when a single item is selected (which clears any previous selection). See <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.Select" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionPatternOnInvalidated">
      <summary>The event that is raised when a selection in a container has changed significantly.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextSelectionChanged">
      <summary>The event that is raised when the text selection is modified. Note that Silverlight 2 does not specifically expose a TextPattern, and <see cref="T:System.Windows.Controls.TextBox" /> uses <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> instead.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextChanged">
      <summary>The event that is raised when textual content is modified. Note that Silverlight 2 does not specifically expose a TextPattern, and <see cref="T:System.Windows.Controls.TextBox" /> uses <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> instead.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.AsyncContentLoaded">
      <summary>The event that is raised when content is loaded asynchronously.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.PropertyChanged">
      <summary>The event that is raised when a property has changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.StructureChanged">
      <summary>The event that is raised when the UI Automation tree structure is changed.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationOrientation">
      <summary>Specifies the orientation direction in which a control can be presented. </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.None">
      <summary>The control does not have an orientation. </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.Horizontal">
      <summary>The control is presented horizontally.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.Vertical">
      <summary>The control is presented horizontally.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationPeer">
      <summary>Provides a base class that exposes another associated class to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.#ctor">
      <summary>Provides initialization for base class values when they are called by the constructor of a derived class.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutomationPeer.EventsSource">
      <summary>Gets or sets an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is reported to the automation client as a source for all the events that come from this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is the source of events.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey">
      <summary>Gets the accelerator key combinations for the object that is associated with the UI automation peer. </summary>
      <returns>The accelerator key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKeyCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The accelerator key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey">
      <summary>Gets the access key for the element that is associated with the automation peer.</summary>
      <returns>The access key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKeyCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType">
      <summary>Gets the control type for the element that is associated with the UI automation peer.</summary>
      <returns>The control type.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> of the element that is associated with the automation peer.</summary>
      <returns>The identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationIdCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle">
      <summary>Gets the <see cref="T:System.Windows.Rect" /> object that represents the screen coordinates of the element that is associated with the automation peer.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangleCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren">
      <summary>Gets the collection of child elements that are represented in the UI automation tree as immediate child elements of the automation peer.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName">
      <summary>Gets a name that is used with <see cref="T:System.Windows.Automation.Peers.AutomationControlType" />, to differentiate the control that is represented by this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />. </summary>
      <returns>The class name. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassNameCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint">
      <summary>Gets a <see cref="T:System.Windows.Point" /> on the element that is associated with the automation peer that responds to a mouse click. </summary>
      <returns>A point in the clickable area of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePointCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>A point within the clickable area of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText">
      <summary>Gets text that describes the functionality of the control that is associated with the automation peer. </summary>
      <returns>The help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpTextCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus">
      <summary>Gets text that conveys the visual status of the element that is associated with this automation peer. </summary>
      <returns>The status.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The status.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType">
      <summary>Gets a string that describes what kind of item an element represents. </summary>
      <returns>The kind of item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The kind of item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.UIElement" /> that is targeted to the element. </summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledByCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType">
      <summary>Gets a localized string that represents the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> value for the control that is associated with this automation peer.</summary>
      <returns>The type of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The type of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetName">
      <summary>Gets text that describes the element that is associated with this automation peer.</summary>
      <returns>The name.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetNameCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The name.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation">
      <summary>Gets a value that indicates the explicit control orientation, if any.</summary>
      <returns>The orientation of the control as a value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientationCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>The orientation of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetParent">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is the parent of this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The parent automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>When overridden in a derived class, gets the control pattern that is associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface" />.</summary>
      <returns>The object that implements the pattern interface; null if this peer does not support this interface.</returns>
      <param name="patternInterface">A value from the <see cref="T:System.Windows.Automation.Peers.PatternInterface" /> enumeration.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus">
      <summary>Gets a value that indicates whether the element that is associated with this automation peer currently has keyboard focus.</summary>
      <returns>true if the element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.InvalidatePeer">
      <summary>Triggers recalculation of the main properties of the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> notification to the automation client if the properties have changed. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement">
      <summary>Gets a value that indicates whether the element that is associated with this automation peer contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElementCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement">
      <summary>Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.</summary>
      <returns>true if the element is a control; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true if the element is a control; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled">
      <summary>Gets a value that indicates whether the element associated with this automation peer supports interaction.</summary>
      <returns>true if the element supports interaction; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabledCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.</summary>
      <returns>true if the automation peer can receive and send events; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable">
      <summary>Gets a value that indicates whether the element can accept keyboard focus.</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusableCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen">
      <summary>Gets a value that indicates whether an element is off the screen.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreenCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword">
      <summary>Gets a value that indicates whether the element contains sensitive content.</summary>
      <returns>true if the element contains sensitive content such as a password; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPasswordCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>true if the element contains sensitive content; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm">
      <summary>Gets a value that indicates whether the element that is associated with this peer must be completed on a form.</summary>
      <returns>true if the element must be completed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForFormCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>true if the element must be completed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents)">
      <summary>Gets a value that indicates whether UI automation is listening for the specified event. </summary>
      <returns>true if UI automation is listening for the specified event; otherwise, false.</returns>
      <param name="eventId">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.PeerFromProvider(System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Gets an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the specified <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> proxy.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</returns>
      <param name="provider">The class that implements <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ProviderFromPeer(System.Windows.Automation.Peers.AutomationPeer)">
      <summary>Gets the <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> proxy for the specified <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The proxy.</returns>
      <param name="peer">The automation peer.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents)">
      <summary>Raises an automation event.</summary>
      <param name="eventId">The event identifier for the event to raise, as a value of the enumeration. See <see cref="T:System.Windows.Automation.Peers.AutomationEvents" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent(System.Windows.Automation.AutomationProperty,System.Object,System.Object)">
      <summary>Raises an event to notify the automation client of a changed property value.</summary>
      <param name="property">The property that changed.</param>
      <param name="oldValue">The previous value of the property.</param>
      <param name="newValue">The new value of the property.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus">
      <summary>Sets the keyboard focus on the element that is associated with this automation peer.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Button" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.#ctor(System.Windows.Controls.Button)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> class.</summary>
      <param name="owner">The element associated with this automation peer.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Button" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this UI automation peer.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the object that supports the specified control pattern of the element that is associated with this automation peer.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ButtonBaseAutomationPeer">
      <summary>Represents a base class for exposing classes derived from <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonBaseAutomationPeer.#ctor(System.Windows.Controls.Primitives.ButtonBase)">
      <summary>Provides initialization for base class values when called by the constructor of a derived class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> to associate with this peer.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonBaseAutomationPeer.GetNameCore">
      <summary>Gets the name of the class of the object associated with this <see cref="T:System.Windows.Automation.Peers.ButtonBaseAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>A string that contains the class name, minus the accelerator key.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.CheckBox" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CheckBoxAutomationPeer.#ctor(System.Windows.Controls.CheckBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.CheckBox" /> to associate with this <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CheckBoxAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CheckBoxAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ComboBox" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.#ctor(System.Windows.Controls.ComboBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ComboBox" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.CreateItemAutomationPeer(System.Object)">
      <summary>Creates an automation peer for an individual item in the <see cref="T:System.Windows.Controls.ComboBox" /> associated with this <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" />.</summary>
      <returns>The new <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> for the specified item in the list.</returns>
      <param name="item">The item to create the automation peer for.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for this <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type as a value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for this <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="pattern">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
      <summary>Hides all nodes, controls, or content that are descendants of the control.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
      <summary>Displays all child nodes, controls, or content of the control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
      <summary>Gets the state of the control (expanded or collapsed).</summary>
      <returns>The state of the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>Gets a value that indiates whether the value of the control is read-only.</summary>
      <returns>true if the control is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>Sets the value of the control.</summary>
      <param name="value">The value of the control.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.FrameworkElement" /> types (including controls) to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.#ctor(System.Windows.FrameworkElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)">
      <summary>Creates a <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.FromElement(System.Windows.UIElement)">
      <summary>Returns the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />, or null if the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> was not created by the <see cref="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)" /> method.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAcceleratorKeyCore">
      <summary>Returns the accelerator key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAccessKeyCore">
      <summary>Returns the access key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key for the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAutomationControlTypeCore">
      <summary>Returns the control type for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAutomationIdCore">
      <summary>Returns the string that uniquely identifies the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The automation identifier for the element associated with the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />, or <see cref="F:System.String.Empty" /> if there is no automation identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetBoundingRectangleCore">
      <summary>Returns the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The <see cref="T:System.Windows.Rect" /> that contains the coordinates of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetChildrenCore">
      <summary>Returns the collection of child elements of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetClassNameCore">
      <summary>Returns the name of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The name of the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. See Remarks.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetClickablePointCore">
      <summary>Returns a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>The <see cref="T:System.Windows.Point" /> on the element that allows a click.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetHelpTextCore">
      <summary>Returns the string that describes the functionality of the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The help text, or <see cref="F:System.String.Empty" /> if there is no help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetItemStatusCore">
      <summary>Returns a string that communicates the visual status of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetItemTypeCore">
      <summary>Returns a human-readable string that contains the item type that the <see cref="T:System.Windows.UIElement" /> for this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> represents. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetLabeledByCore">
      <summary>Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.UIElement" /> that targets the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetLocalizedControlTypeCore">
      <summary>Returns the localized version of the control type for the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The string that contains the type of control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetNameCore">
      <summary>Returns the text label of the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetOrientationCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is laid out in a specific direction. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationOrientation.None" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Returns the control pattern for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</summary>
      <returns>See Remarks.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.HasKeyboardFocusCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> currently has keyboard input focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard input focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsContentElementCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is an element that contains data that is presented to the user. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true if the element contains data for the user to read; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsControlElementCore">
      <summary>Returns a value that indicates whether the element  that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is understood by the end user as interactive. Optionally, the user might understand the element as contributing to the logical structure of the control in the GUI. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true if the element is interactive; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsEnabledCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is enabled. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.</summary>
      <returns>true if the element is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsKeyboardFocusableCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element is focusable by the keyboard; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsOffscreenCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is off the screen. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsPasswordCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> contains protected content. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>true if the element contains sensitive content; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsRequiredForFormCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is required to be completed on a form. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>The value that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)" />, if the value is set; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.Owner">
      <summary>Gets the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</summary>
      <returns>The element that owns this peer class.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.SetFocusCore">
      <summary>Sets the keyboard input focus on the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.HyperlinkButton" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.#ctor(System.Windows.Controls.HyperlinkButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.HyperlinkButton" /> to associate with the <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.HyperlinkButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Hyperlink" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.HyperlinkButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains "Hyperlink".</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.HyperlinkButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.IsControlElementCore">
      <summary>Gets a value that indicates whether the element that is associated with this automation peer is an element that contains data that is presented to the user.</summary>
      <returns>Returns true.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ImageAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Image" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ImageAutomationPeer.#ctor(System.Windows.Controls.Image)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ImageAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Image" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ImageAutomationPeer" />.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.ItemAutomationPeer">
      <summary>Exposes a data item in an <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.#ctor(System.Object,System.Windows.Automation.Peers.ItemsControlAutomationPeer)">
      <summary>Provides initialization for base class values when called by the constructor of a derived class.</summary>
      <param name="item">The data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</param>
      <param name="itemsControlAutomationPeer">The <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" /> that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.#ctor(System.Windows.UIElement)">
      <summary>Provides initialization for base class values when called by the constructor of a derived class.</summary>
      <param name="item">The data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetAcceleratorKeyCore">
      <summary>Returns the accelerator key for the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetAccessKeyCore">
      <summary>Returns the access key for the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key for the element that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetAutomationControlTypeCore">
      <summary>Returns the control type for the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetAutomationIdCore">
      <summary>Returns the string that uniquely identifies the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The automation identifier for the element associated with the <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />, or <see cref="F:System.String.Empty" /> if there is no automation identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetBoundingRectangleCore">
      <summary>Returns the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The <see cref="T:System.Windows.Rect" /> that contains the coordinates of the element item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetChildrenCore">
      <summary>Returns the collection of child elements of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetClassNameCore">
      <summary>Returns the class name of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The name of the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. See Remarks.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetClickablePointCore">
      <summary>Returns a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>The <see cref="T:System.Windows.Point" /> on the element that allows a click.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetHelpTextCore">
      <summary>Returns the string that describes the functionality of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. his method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The help text, or <see cref="F:System.String.Empty" /> if there is no help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetItemStatusCore">
      <summary>Returns a string that communicates the visual status of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetItemTypeCore">
      <summary>Returns a human-readable string that contains the type of item that the item represents. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The item type string.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetLabeledByCore">
      <summary>Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the object that targets the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>An automation peer for the targeting object.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetLocalizedControlTypeCore">
      <summary>Returns the localized version of the control type for the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The string that contains the type of control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.UIElement" /> that corresponds to the data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetOrientationCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is laid out in a specific direction. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Returns the control pattern for the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.HasKeyboardFocusCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> currently has keyboard input focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard input focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsContentElementCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is an element that contains data that is presented to the user. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true if the element contains data for the user to read; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsControlElementCore">
      <summary>Returns a value that indicates whether the element  that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is understood by the end user as interactive. Optionally, the user might understand the element as contributing to the logical structure of the control in the GUI. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true if the element is interactive; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsEnabledCore">
      <summary>Returns a value that indicates whether the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is enabled. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.</summary>
      <returns>true if the element is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsKeyboardFocusableCore">
      <summary>Returns a value that indicates whether the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element is focusable by the keyboard; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsOffscreenCore">
      <summary>Returns a value that indicates whether the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is off the screen. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsPasswordCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> contains protected content. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>true if the element contains sensitive content; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsRequiredForFormCore">
      <summary>Returns a value that indicates whether the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is required to be completed on a form. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>The value that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)" />, if the value is set; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ItemAutomationPeer.Item">
      <summary>Gets the data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</summary>
      <returns>The data item.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ItemAutomationPeer.ItemsControlAutomationPeer">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" /> that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" /> associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.SetFocusCore">
      <summary>Sets the keyboard input focus on the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ItemsControl" /> types to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.#ctor(System.Windows.Controls.ItemsControl)">
      <summary>Provides initialization for base class values when called by the constructor of a derived class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ItemsControl" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.CreateItemAutomationPeer(System.Object)">
      <summary>When overridden in a derived class, creates a new instance of the <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> for a data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection of this <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
      <returns>An object that exposes the data item to UI automation.</returns>
      <param name="item">The data item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.GetChildrenCore">
      <summary>Gets the collection of child elements of the <see cref="T:System.Windows.Controls.ItemsControl" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />. </summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets a control pattern for the <see cref="T:System.Windows.Controls.ItemsControl" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values that indicates the control pattern.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.ListBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ListBox" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.#ctor(System.Windows.Controls.ListBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ListBox" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.CreateItemAutomationPeer(System.Object)">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> for a data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection of this <see cref="T:System.Windows.Controls.ListBox" />.</summary>
      <returns>An object that exposes the data item to UI automation.</returns>
      <param name="item">The data item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.ListBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.List" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.ListBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, the string value of ListBox.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer">
      <summary>Exposes the items in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection of a <see cref="T:System.Windows.Controls.ListBox" /> to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.#ctor(System.Object,System.Windows.Automation.Peers.SelectorAutomationPeer)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> class with the specified selector automation peer. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ListBoxItem" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />.</param>
      <param name="selectorAutomationPeer">The <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" /> that is associated with the <see cref="T:System.Windows.Controls.ListBox" /> that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.#ctor(System.Windows.Controls.ListBoxItem)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ListBoxItem" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.ListBoxItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.ListItem" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.ListBoxItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, a string value of ListBoxItem.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.ListBoxItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.MediaElementAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.MediaElement" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.MediaElementAutomationPeer.#ctor(System.Windows.Controls.MediaElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.MediaElement" /> to associate with the <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.MediaElementAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.MediaElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.MediaElementAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.MediaElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains MediaElement.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.MultiScaleImage" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.#ctor(System.Windows.Controls.MultiScaleImage)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.MultiScaleImage" /> to associate with the <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains MultiScaleImage.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.PasswordBox" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.#ctor(System.Windows.Controls.PasswordBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.PasswordBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.PasswordBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>Gets a value that specifies whether the value of a control is read-only.</summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>Sets the value of the control.</summary>
      <param name="value">The value to set.</param>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner of this peer is not enabled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is passed as null.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>Gets the value of the control. </summary>
      <returns>The value of the control as a string.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown in all cases.</exception>
    </member>
    <member name="T:System.Windows.Automation.Peers.PatternInterface">
      <summary>Specifies the control pattern that the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)" /> method returns.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Invoke">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IInvokeProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Selection">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Value">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.RangeValue">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Scroll">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IScrollProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ScrollItem">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ExpandCollapse">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Grid">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.GridItem">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.MultipleView">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Window">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IWindowProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.SelectionItem">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Dock">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IDockProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Table">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ITableProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.TableItem">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Toggle">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IToggleProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Transform">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ITransformProvider" /> control pattern interface.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ProgressBar" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.#ctor(System.Windows.Controls.ProgressBar)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ProgressBar" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.ProgressBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.ProgressBar" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.ProgressBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains ProgressBar.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.ProgressBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
      <summary>Gets a value that specifies whether the value of a control is read-only.</summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
      <summary>Gets the value that is added to or subtracted from the value property when a large change is made, such as with the PAGE DOWN key.</summary>
      <returns>The large-change value supported by the control, or <see cref="F:System.Double.NaN" /> if this option is not supported. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
      <summary>Sets the value of the control.</summary>
      <param name="val">The value to set. </param>
      <exception cref="T:System.InvalidOperationException">Thrown in all cases.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
      <summary>Gets the value that is added to or subtracted from the value property when a small change is made, such as with an arrow key.</summary>
      <returns>The small-change value supported by the control, or <see cref="F:System.Double.NaN" /> if this option is not supported. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.RadioButton" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.#ctor(System.Windows.Controls.RadioButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.RadioButton" /> to associate with the <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.RadioButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.RadioButton" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.RadioButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains RadioButton.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.RadioButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Controls.CheckBox" /> for this peer is not checked.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>Gets a value that indicates whether an item is selected.</summary>
      <returns>true if the element is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Controls.CheckBox" /> for this peer is checked.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>Deselects any selected items and then selects the current element.</summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">
        <see cref="T:System.Windows.Controls.CheckBox" /> for this peer is not enabled.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>Gets the UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.</summary>
      <returns>The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RangeBaseAutomationPeer.#ctor(System.Windows.Controls.Primitives.RangeBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> to associate with the <see cref="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RangeBaseAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
      <summary>Gets a value that specifies whether the value of a control is read-only.</summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
      <summary>Gets the value that is added to or subtracted from the value when a large change is made, such as with the PAGE DOWN key.</summary>
      <returns>The large-change value supported by the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
      <summary>Gets the maximum range value supported by the control.</summary>
      <returns>The maximum value supported by the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
      <summary>Gets the minimum range value supported by the control.</summary>
      <returns>The minimum value supported by the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
      <summary>Sets the value of the control.</summary>
      <param name="val">The value to set. </param>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">The owner of this peer is not enabled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set value outside of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> and <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> of the owner control.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
      <summary>Gets the value that is added to or subtracted from the value when a small change is made, such as with an arrow key.</summary>
      <returns>The small-change value supported by the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.RepeatButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> to associate with the <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Button" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains RepeatButton.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner control is not enabled.</exception>
    </member>
    <member name="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.#ctor(System.Windows.Controls.Primitives.ScrollBar)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.ScrollBar" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains ScrollBar.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetClickablePointCore">
      <summary>Gets a clickable point for this control.</summary>
      <returns>A point that is clickable within the control, or a point with <see cref="F:System.Double.NaN" /> coordinates, if no point is clickable within the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetOrientationCore">
      <summary>Gets the orientation of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> control associated with this peer.</summary>
      <returns>Orientation of the scroll bar.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ScrollViewer" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.#ctor(System.Windows.Controls.ScrollViewer)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ScrollViewer" /> object that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" />. instance.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.ScrollViewer" /> object that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" /> instance. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Pane" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.GetClassNameCore">
      <summary>Gets the text name of the <see cref="T:System.Windows.Controls.ScrollViewer" /> object that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" /> instance. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string containing the value ScrollViewer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the object that supports the specified control pattern of the element that is associated with this automation peer.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.IsControlElementCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.ScrollViewer" /> object associated with this peer is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.</summary>
      <returns>true value to indicate that the owner control is interactive; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll horizontally.</summary>
      <returns>true if the control can scroll horizontally; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontalScrollPercent">
      <summary>Gets the current horizontal scroll position.</summary>
      <returns>The horizontal scroll position as a percentage of the total content area in the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontalViewSize">
      <summary>Gets the current horizontal view size.</summary>
      <returns>The horizontal size of the viewable region as a percentage of the total content area in the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the visible region of the content area horizontally and vertically.</summary>
      <param name="horizontalAmount">The horizontal increment specific to the control.</param>
      <param name="verticalAmount">The vertical increment specific to the control.</param>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner control not enabled.</exception>
      <exception cref="T:System.InvalidOperationException">Current scrollable state of a particular scroll axis does not support a scroll action.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#SetScrollPercent(System.Double,System.Double)">
      <summary>Sets the horizontal and vertical scroll position as a percentage of the total content area in the control.</summary>
      <param name="horizontalPercent">The horizontal position as a percentage of the content area's total range.</param>
      <param name="verticalPercent">The vertical position as a percentage of the content area's total range.</param>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner control not enabled.</exception>
      <exception cref="T:System.InvalidOperationException">Current scrollable state of a particular scroll axis does not support a scroll action.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Specified an input parameter that was less than 0 or greater than 100.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll vertically.</summary>
      <returns>true if the control can scroll vertically; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticalScrollPercent">
      <summary>Gets the current vertical scroll position.</summary>
      <returns>The vertical scroll position as a percentage of the total content area in the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticalViewSize">
      <summary>Gets the vertical view size.</summary>
      <returns>The vertical size of the viewable region as a percentage of the total content area in the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.SelectorAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.Selector" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.#ctor(System.Windows.Controls.Primitives.Selector)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.Selector" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.Selector" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.List" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.Selector" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>Gets a value that indicates whether the UI automation provider allows more than one child element to be selected at the same time.</summary>
      <returns>true if multiple selection is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>Retrieves a UI automation provider for each child element that is selected.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>Gets a value that indicates whether the UI automation provider requires at least one child element to be selected.</summary>
      <returns>true if selection is required; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer">
      <summary>Exposes the items in <see cref="T:System.Windows.Controls.Primitives.Selector" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.#ctor(System.Object,System.Windows.Automation.Peers.SelectorAutomationPeer)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" /> class with the specified selector automation peer. </summary>
      <param name="owner">The <see cref="T:System.Windows.UIElement" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" />.</param>
      <param name="selectorAutomationPeer">The <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" /> that is associated with the control that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.#ctor(System.Windows.UIElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.UIElement" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the element that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
      <exception cref="T:System.NotImplementedException">Owner element is not enabled.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>Gets a value that indicates whether an item is selected. </summary>
      <returns>true if an item is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
      <exception cref="T:System.NotImplementedException">Owner element is not enabled.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>Clears any selection and then selects the current element. </summary>
      <exception cref="T:System.NotImplementedException">Owner element is not enabled.</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Windows.Controls.Primitives.Selector" /> for the item was not found through the relevant <see cref="P:System.Windows.Automation.Peers.ItemAutomationPeer.ItemsControlAutomationPeer" /> value.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>Gets the UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.</summary>
      <returns>The UI automation provider.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.SliderAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Slider" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.#ctor(System.Windows.Controls.Slider)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Slider" /> to associate with the <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Slider" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Slider" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.Slider" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains Slider.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.GetClickablePointCore">
      <summary>Gets a clickable point on the control.</summary>
      <returns>A <see cref="T:System.Windows.Point" /> structure containing a point on the control that is clickable. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.TextBlockAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.TextBlock" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.#ctor(System.Windows.Controls.TextBlock)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.TextBlock" /> to associate with the <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.TextBlock" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Text" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.TextBlock" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string containing TextBlock.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.GetNameCore">
      <summary>Gets the label of the <see cref="T:System.Windows.Controls.TextBlock" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The label of the element that is associated with this automation peer. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.IsControlElementCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.TextBlock" /> associated with this peer is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.</summary>
      <returns>false if the element is part of a template; otherwise true. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.TextBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.TextBox" /> types to  UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.#ctor(System.Windows.Controls.TextBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.TextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.Controls.TextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.TextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.TextBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>Gets a value that specifies whether the value of a control is read-only.</summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>Sets the value of a control property.</summary>
      <param name="value">The new value.</param>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner control is not enabled.</exception>
      <exception cref="T:System.InvalidOperationException">Owner control is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> provided as null.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.TextBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control as a string. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ThumbAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.Thumb" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ThumbAutomationPeer.#ctor(System.Windows.Controls.Primitives.Thumb)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ThumbAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Thumb" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ThumbAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains Thumb.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.ToggleButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Button" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the text name of the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains Button.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern implementation for this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values that indicates the control pattern.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.System#Windows#Automation#Provider#IToggleProvider#Toggle">
      <summary>Cycles through the toggle states of a control.</summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner control is not enabled.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.System#Windows#Automation#Provider#IToggleProvider#ToggleState">
      <summary>Gets the toggle state of the control.</summary>
      <returns>The toggle state of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IDockProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that expose their dock properties in a docking container. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IDockProvider.DockPosition">
      <summary>Gets the current <see cref="T:System.Windows.Automation.DockPosition" /> of the control in a docking container.</summary>
      <returns>The <see cref="T:System.Windows.Automation.DockPosition" /> of the control, relative to the boundaries of the docking container and to other elements in the container.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IDockProvider.SetDockPosition(System.Windows.Automation.DockPosition)">
      <summary>Docks the control in a docking container.</summary>
      <param name="dockPosition">The dock position, relative to the boundaries of the docking container and to other elements in the container.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IExpandCollapseProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that visually expand to display content and that collapse to hide content.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse">
      <summary>Hides all nodes, controls, or content that are descendants of the control.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Expand">
      <summary>Displays all child nodes, controls, or content of the control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState">
      <summary>Gets the state (expanded or collapsed) of the control.</summary>
      <returns>The state (expanded or collapsed) of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IGridItemProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to individual child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.IGridProvider" />. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.Column">
      <summary>Gets the ordinal number of the column that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the column that contains the cell or item.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan">
      <summary>Gets the number of columns that are spanned by a cell or item.</summary>
      <returns>The number of columns. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid">
      <summary>Gets a UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and that represents the container of the cell or item.</summary>
      <returns>A UI automation provider that implements the <see cref="F:System.Windows.Automation.Peers.PatternInterface.Grid" /> control pattern and that represents the cell or item container. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.Row">
      <summary>Gets the ordinal number of the row that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the row that contains the cell or item. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan">
      <summary>Gets the number of rows spanned by a cell or item.</summary>
      <returns>The number of rows. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IGridProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that act as containers for a collection of child elements. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount">
      <summary>Gets the total number of columns in a grid.</summary>
      <returns>The total number of columns in a grid.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IGridProvider.GetItem(System.Int32,System.Int32)">
      <summary>Retrieves the UI automation provider for the specified cell.</summary>
      <returns>The UI automation provider for the specified cell.</returns>
      <param name="row">The ordinal number of the row that contains the cell.</param>
      <param name="column">The ordinal number of the column that contains the cell.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridProvider.RowCount">
      <summary>Gets the total number of rows in a grid.</summary>
      <returns>The total number of rows in a grid.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IInvokeProvider">
      <summary>Exposes a method to support UI automation access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IMultipleViewProvider">
      <summary>Exposes methods and properties to support UI automation client access to controls that provide, and are able to switch between, multiple representations of the same set of information or child controls.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView">
      <summary>Gets the current control-specific view.</summary>
      <returns>The value (<paramref name="viewId" />) for the current view of the UI automation element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.GetSupportedViews">
      <summary>Retrieves a collection of control-specific view identifiers.</summary>
      <returns>A collection of values that identifies the views available for a UI automation element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.GetViewName(System.Int32)">
      <summary>Retrieves the name of a control-specific view.</summary>
      <returns>A localized name for the view.</returns>
      <param name="viewId">The view identifier.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.SetCurrentView(System.Int32)">
      <summary>Sets the current control-specific view. </summary>
      <param name="viewId">A view identifier.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRangeValueProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that can be set to a value within a range.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly">
      <summary>Gets a value that indicates whether the value of a control is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange">
      <summary>Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a large change is made, such as with the PAGE DOWN key.</summary>
      <returns>The large-change value that is supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum">
      <summary>Gets the maximum range value that is supported by the control.</summary>
      <returns>The maximum value that is supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum">
      <summary>Gets the minimum range value that is supported by the control.</summary>
      <returns>The minimum value that is supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
      <summary>Sets the value of the control.</summary>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange">
      <summary>Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a small change is made, such as with an arrow key.</summary>
      <returns>The small-change value supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderSimple">
      <summary>Provides methods and properties that expose basic information about a UI element.</summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IScrollItemProvider">
      <summary>Exposes methods and properties to support access by UI automation client to individual child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.IScrollProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.</summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IScrollProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to a control that acts as a scrollable container for a collection of child objects. The children of this control must implement <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll horizontally.</summary>
      <returns>true if the control can scroll horizontally; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent">
      <summary>Gets the current horizontal scroll position.</summary>
      <returns>The horizontal scroll position as a percentage of the total content area within the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize">
      <summary>Gets the current horizontal view size.</summary>
      <returns>The horizontal size of the viewable region as a percentage of the total content area within the control. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollProvider.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the visible region of the content area horizontally, vertically, or both.</summary>
      <param name="horizontalAmount">The horizontal increment that is specific to the control. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.</param>
      <param name="verticalAmount">The vertical increment that is specific to the control. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollProvider.SetScrollPercent(System.Double,System.Double)">
      <summary>Sets the horizontal and vertical scroll position as a percentage of the total content area within the control.</summary>
      <param name="horizontalPercent">The horizontal position as a percentage of the content area's total range. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.</param>
      <param name="verticalPercent">The vertical position as a percentage of the content area's total range. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll vertically.</summary>
      <returns>true if the control can scroll vertically; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent">
      <summary>Gets the current vertical scroll position.</summary>
      <returns>The vertical scroll position as a percentage of the total content area within the control. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize">
      <summary>Gets the vertical view size.</summary>
      <returns>The vertical size of the viewable region as a percentage of the total content area within the control. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISelectionItemProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to individual, selectable child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected">
      <summary>Gets a value that indicates whether an item is selected. </summary>
      <returns>true if the element is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.Select">
      <summary>Clears any existing selection and then selects the current element.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer">
      <summary>Gets the UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.</summary>
      <returns>The UI automation provider.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISelectionProvider">
      <summary>Exposes methods and properties to support access by a UI Automation client to controls that act as containers for a collection of individual, selectable child items. The children of this control must implement <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple">
      <summary>Gets a value that indicates whether the UI automation provider allows more than one child element to be selected concurrently.</summary>
      <returns>true if multiple selection is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionProvider.GetSelection">
      <summary>Retrieves a UI automation provider for each child element that is selected.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired">
      <summary>Gets a value that indicates whether the UI automation provider requires at least one child element to be selected.</summary>
      <returns>true if selection is required; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITableItemProvider">
      <summary>Exposes methods and properties to support UI automation client access to child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.ITableProvider" />. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableItemProvider.GetColumnHeaderItems">
      <summary>Retrieves an array of UI automation providers representing all the column headers associated with a table item or cell.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableItemProvider.GetRowHeaderItems">
      <summary>Retrieves an array of UI automation providers representing all the row headers associated with a table item or cell.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITableProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that act as containers for a collection of child elements. The children of this element must implement <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" /> and be organized in a two-dimensional logical coordinate system that can be traversed (a UI automation client can move to adjacent controls, which are headers or cells of the table) by using the keyboard.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders">
      <summary>Returns a collection of UI Automation providers that represents all the column headers in a table.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders">
      <summary>Returns a collection of UI Automation providers that represents all row headers in the table.</summary>
      <returns>An array of UI automation providers.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor">
      <summary>Gets the primary direction of traversal for the table.</summary>
      <returns>The primary direction of traversal, as a value of the enumeration. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IToggleProvider">
      <summary>Exposes methods and properties to support UI automation client access to controls that can cycle through a set of states and maintain a particular state.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IToggleProvider.Toggle">
      <summary>Cycles through the toggle states of a control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IToggleProvider.ToggleState">
      <summary>Gets the toggle state of the control.</summary>
      <returns>The toggle state of the control, as a value of the enumeration. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITransformProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls or elements that can be moved, resized, or rotated within a two-dimensional space.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanMove">
      <summary>Gets a value that indicates whether the element can be moved.</summary>
      <returns>true if the element can be moved; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanResize">
      <summary>Gets a value that indicates whether the element can be resized.</summary>
      <returns>true if the element can be resized; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate">
      <summary>Gets a value that indicates whether the element can be rotated.</summary>
      <returns>true if the element can be rotated; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Move(System.Double,System.Double)">
      <summary>Moves the control.</summary>
      <param name="x">The absolute screen coordinates of the left side of the control.</param>
      <param name="y">The absolute screen coordinates of the top of the control.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Resize(System.Double,System.Double)">
      <summary>Resizes the control. </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Rotate(System.Double)">
      <summary>Rotates the control.</summary>
      <param name="degrees">The number of degrees to rotate the control. A positive number rotates the control clockwise. A negative number rotates the control counterclockwise.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IValueProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that have an intrinsic value that does not span a range and that can be represented as a string. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly">
      <summary>Gets a value that indicates whether the value of a control is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)">
      <summary>Sets the value of a control.</summary>
      <param name="value">The value to set. The provider is responsible for converting the value to the appropriate data type.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IValueProvider.Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IWindowProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI). </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.Close">
      <summary>Closes the window.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState">
      <summary>Gets the interaction state of the window. </summary>
      <returns>The interaction state of the control, as a value of the enumeration. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.IsModal">
      <summary>Gets a value that specifies whether the window is modal.</summary>
      <returns>true if the window is modal; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost">
      <summary>Gets a value that specifies whether the window is the topmost element in the z-order of layout.</summary>
      <returns>true if the window is topmost; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable">
      <summary>Gets a value that specifies whether the window can be maximized.</summary>
      <returns>true if the window can be maximized; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable">
      <summary>Gets a value that specifies whether the window can be minimized. </summary>
      <returns>true if the window can be minimized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)">
      <summary>Changes the visual state of the window (such as minimizing or maximizing it).</summary>
      <param name="state">The visual state of the window to change to, as a value of the enumeration.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.VisualState">
      <summary>Gets the visual state of the window. </summary>
      <returns>The visual state of the window, as a value of the enumeration. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)">
      <summary>Blocks the calling code for the specified time or until the associated process enters an idle state, whichever completes first. </summary>
      <returns>true if the window has entered the idle state; false if the timeout occurred.</returns>
      <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to become idle.</param>
    </member>
    <member name="T:System.Windows.Controls.Border">
      <summary>Draws a border, background, or both around another object.</summary>
    </member>
    <member name="M:System.Windows.Controls.Border.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Border" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.Border.Background">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that fills the background of the border.</summary>
      <returns>The brush that fills the background.</returns>
    </member>
    <member name="F:System.Windows.Controls.Border.BackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Border.Background" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Border.Background" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Border.BorderBrush">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to create the border.</summary>
      <returns>The brush that fills the border.  </returns>
    </member>
    <member name="F:System.Windows.Controls.Border.BorderBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Border.BorderBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Border.BorderBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Border.BorderThickness">
      <summary>Gets or sets the thickness of the border.</summary>
      <returns>The thickness of the border in pixels.  The default is 0 on all four sides.</returns>
    </member>
    <member name="F:System.Windows.Controls.Border.BorderThicknessProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Border.BorderThickness" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Border.BorderThickness" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Border.Child">
      <summary>Gets or sets the child element to draw the border around.</summary>
      <returns>The <see cref="T:System.Windows.UIElement" /> to apply the border to.</returns>
    </member>
    <member name="P:System.Windows.Controls.Border.CornerRadius">
      <summary>Gets or sets the radius for the corners of the border.</summary>
      <returns>The degree to which the corners are rounded.</returns>
    </member>
    <member name="F:System.Windows.Controls.Border.CornerRadiusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Border.CornerRadius" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Border.CornerRadius" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Border.Padding">
      <summary>Gets or sets the distance between the border and its child object.</summary>
      <returns>The dimensions of the space between the border and its child as a <see cref="T:System.Windows.Thickness" /> value. The <see cref="T:System.Windows.Thickness" /> values are in pixels.</returns>
    </member>
    <member name="F:System.Windows.Controls.Border.PaddingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Border.Padding" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Border.Padding" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Button">
      <summary>Represents a button control.</summary>
    </member>
    <member name="M:System.Windows.Controls.Button.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Button" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Button.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Button" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Button.OnClick">
      <summary>Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event. </summary>
    </member>
    <member name="M:System.Windows.Controls.Button.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>
        <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Button" /> object.</returns>
    </member>
    <member name="T:System.Windows.Controls.Canvas">
      <summary>Defines an area within which you can explicitly position child objects by using coordinates that are relative to the area. </summary>
    </member>
    <member name="M:System.Windows.Controls.Canvas.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Canvas" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Canvas.ArrangeOverride(System.Windows.Size)">
      <summary>Provides the behavior for the "arrange" pass of Silverlight layout.</summary>
      <returns>The actual size used.</returns>
      <param name="arrangeSize">The size that this object should use to arrange its child objects.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.GetLeft(System.Windows.UIElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property for a given object. </summary>
      <returns>The <see cref="P:System.Windows.Controls.Canvas.Left" /> value of the specified object.</returns>
      <param name="element">The object from which the property value is read.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.GetTop(System.Windows.UIElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property for a given object. </summary>
      <returns>The <see cref="P:System.Windows.Controls.Canvas.Top" /> value of the specified object.</returns>
      <param name="element">The object from which the property value is read.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.GetZIndex(System.Windows.UIElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property for a given object. </summary>
      <returns>The <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> value of the requested object. The maximum allowed value for <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> is Int16.MaxValue – 1 = 32766.</returns>
      <param name="element">The object from which the property value is read.</param>
    </member>
    <member name="P:System.Windows.Controls.Canvas.Left">
      <summary>Gets or sets the distance between the left side of an object and the left side of its parent <see cref="T:System.Windows.Controls.Canvas" />.</summary>
      <returns>The offset position from the left side of a parent <see cref="T:System.Windows.Controls.Canvas" />, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.Canvas.LeftProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Canvas.MeasureOverride(System.Windows.Size)">
      <summary>Provides the behavior for the "measure" pass of Silverlight layout. </summary>
      <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.</returns>
      <param name="constraint">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.SetLeft(System.Windows.UIElement,System.Double)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property for a given object. </summary>
      <param name="element">The object to which the property value is written.</param>
      <param name="length">The <see cref="P:System.Windows.Controls.Canvas.Left" /> value of the specified element.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.SetTop(System.Windows.UIElement,System.Double)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property for a given object. </summary>
      <param name="element">The object to which the property value is written.</param>
      <param name="length">The <see cref="P:System.Windows.Controls.Canvas.Top" /> value of the specified object.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.SetZIndex(System.Windows.UIElement,System.Int32)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property for a given object. </summary>
      <param name="element">The object to which the property value is written.</param>
      <param name="value">The <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> value of the specified object.</param>
    </member>
    <member name="P:System.Windows.Controls.Canvas.Top">
      <summary>Gets or sets the distance between the top of an element and the top of its parent <see cref="T:System.Windows.Controls.Canvas" />. </summary>
      <returns>The offset position from the top of a parent <see cref="T:System.Windows.Controls.Canvas" />, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.Canvas.TopProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Canvas.ZIndex">
      <summary>Gets or sets the z-order rendering behavior of objects in a <see cref="T:System.Windows.Controls.Canvas" />. </summary>
      <returns>The z-order of the object within the <see cref="T:System.Windows.Controls.Canvas" />. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.Canvas.ZIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property.</returns>
    </member>
    <member name="T:System.Windows.Controls.CheckBox">
      <summary>Represents a control that a user can select (check) or clear (uncheck).</summary>
    </member>
    <member name="M:System.Windows.Controls.CheckBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.CheckBox" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.CheckBox.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" /> for the check box object.</returns>
    </member>
    <member name="T:System.Windows.Controls.CleanUpVirtualizedItemEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.VirtualizingStackPanel.CleanUpVirtualizedItemEvent" /> event.</summary>
    </member>
    <member name="P:System.Windows.Controls.CleanUpVirtualizedItemEventArgs.Cancel">
      <summary>Gets or sets a value that indicates whether this item should not be re-virtualized.</summary>
      <returns>true if you want to prevent revirtualization of this item; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Controls.CleanUpVirtualizedItemEventArgs.UIElement">
      <summary>Gets an instance of the visual element that represents the data value.</summary>
      <returns>The <see cref="T:System.Windows.UIElement" /> that represents the data value.</returns>
    </member>
    <member name="P:System.Windows.Controls.CleanUpVirtualizedItemEventArgs.Value">
      <summary>Gets an <see cref="T:System.Object" /> that represents the original data value.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the original data value.</returns>
    </member>
    <member name="T:System.Windows.Controls.CleanUpVirtualizedItemEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Controls.VirtualizingStackPanel.CleanUpVirtualizedItemEvent" /> attached events.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.ClickMode">
      <summary>Specifies when the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised for a control. </summary>
    </member>
    <member name="F:System.Windows.Controls.ClickMode.Release">
      <summary>Specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the left mouse button is pressed and released, and the mouse pointer is over the control. If you are using the keyboard, specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the SPACEBAR or ENTER key is pressed and released, and the control has keyboard focus.</summary>
    </member>
    <member name="F:System.Windows.Controls.ClickMode.Press">
      <summary>Specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the mouse button is pressed and the mouse pointer is over the control. If you are using the keyboard, specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the SPACEBAR or ENTER is pressed and the control has keyboard focus.</summary>
    </member>
    <member name="F:System.Windows.Controls.ClickMode.Hover">
      <summary>Specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the mouse pointer moves over the control. </summary>
    </member>
    <member name="T:System.Windows.Controls.ColumnDefinition">
      <summary>Defines column-specific properties that apply to <see cref="T:System.Windows.Controls.Grid" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Controls.ColumnDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ColumnDefinition" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.ActualWidth">
      <summary>Gets a value that represents the actual calculated width of a <see cref="T:System.Windows.Controls.ColumnDefinition" />. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the actual calculated width in pixels. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.MaxWidth">
      <summary>Gets or sets a value that represents the maximum width of a <see cref="T:System.Windows.Controls.ColumnDefinition" />.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the maximum width in pixels. The default is <see cref="F:System.Double.PositiveInfinity" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ColumnDefinition.MaxWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ColumnDefinition.MaxWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ColumnDefinition.MaxWidth" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.MinWidth">
      <summary>Gets or sets a value that represents the minimum width of a <see cref="T:System.Windows.Controls.ColumnDefinition" />. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the minimum width in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ColumnDefinition.MinWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ColumnDefinition.MinWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ColumnDefinition.MinWidth" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.Width">
      <summary>Gets the calculated width of a <see cref="T:System.Windows.Controls.ColumnDefinition" /> element, or sets the <see cref="T:System.Windows.GridLength" /> value of a column that is defined by the <see cref="T:System.Windows.Controls.ColumnDefinition" />. </summary>
      <returns>The <see cref="T:System.Windows.GridLength" /> that represents the width of the column. The default value is 1.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ColumnDefinition.WidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ColumnDefinition.Width" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ColumnDefinition.Width" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ColumnDefinitionCollection">
      <summary>Provides access to an ordered, strongly typed collection of <see cref="T:System.Windows.Controls.ColumnDefinition" /> objects.</summary>
    </member>
    <member name="T:System.Windows.Controls.ComboBox">
      <summary>Represents a selection control that combines a non-editable text box and a drop-down containing a list box that allows users to select an item from a list. </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ComboBox" /> class. . </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges and sizes the combo box control and its contents.</summary>
      <returns>The actual size of the combo box.</returns>
      <param name="arrangeBounds">The size allowed for the combo box control.</param>
    </member>
    <member name="E:System.Windows.Controls.ComboBox.DropDownClosed">
      <summary>Occurs when the drop-down portion of the combo box closes.</summary>
    </member>
    <member name="E:System.Windows.Controls.ComboBox.DropDownOpened">
      <summary>Occurs when the drop-down portion of the combo box opens.</summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.GetContainerForItemOverride">
      <summary>Retrieves an empty combo box item.</summary>
      <returns>An empty combo box item.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.IsDropDownOpen">
      <summary>Gets or sets a value that indicates whether the drop-down portion of the combo box is currently open.</summary>
      <returns>true if the drop-down portion is open; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.IsDropDownOpenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ComboBox.IsDropDownOpen" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ComboBox.IsDropDownOpen" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.IsEditable">
      <summary>Gets a value that indicates whether the user can edit text in the text box portion of a combo box. This property always returns false.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.IsItemItsOwnContainerOverride(System.Object)">
      <summary>Determines whether the specified item is (or is eligible to be) its own item container. </summary>
      <returns>true if the item is a <see cref="T:System.Windows.Controls.ComboBoxItem" />; otherwise, false. The default is false.</returns>
      <param name="item">The item to evaluate.</param>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.IsSelectionActiveProperty">
      <summary>Identifies the IsSelectionActive attached property.</summary>
      <returns>The identifier for the IsSelectionActive attached property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.IsSelectionBoxHighlighted">
      <summary>Gets a value that indicates whether the <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItem" /> is highlighted.</summary>
      <returns>true if the <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItem" /> is highlighted; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.ItemContainerStyle">
      <summary>Gets or sets the style applied to the container generated for each item in the combo box.</summary>
      <returns>The style applied to the container generated for each item in the combo box.</returns>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.ItemContainerStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ComboBox.ItemContainerStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ComboBox.ItemContainerStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.MaxDropDownHeight">
      <summary>Gets or sets the maximum height of the drop-down that lists combo box items.</summary>
      <returns>The maximum height of the drop-down that lists combo box items. The default is infinity.</returns>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.MaxDropDownHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ComboBox.MaxDropDownHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ComboBox.MaxDropDownHeight" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ComboBox" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ComboBox" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnDropDownClosed(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.ComboBox.DropDownClosed" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnDropDownOpened(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.ComboBox.DropDownOpened" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event.</summary>
      <param name="e">The event data</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event that occurs when the mouse pointer enters this control.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event that occurs when the mouse pointer leaves the combo box.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event that occurs when the left mouse button is pressed while the mouse pointer is over the combo box.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.SelectionBoxItem">
      <summary>Gets the item displayed in the selection box.</summary>
      <returns>The item displayed in the selection box.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.SelectionBoxItemTemplate">
      <summary>Gets the template applied to the selection box content. </summary>
      <returns>The template applied to the selection box content.</returns>
    </member>
    <member name="T:System.Windows.Controls.ComboBoxItem">
      <summary>Represents a selectable item contained in a <see cref="T:System.Windows.Controls.ComboBox" /> control.</summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBoxItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ComboBoxItem" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBoxItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" />event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.ContentControl">
      <summary>Represents a control with a single piece of content. Controls such as <see cref="T:System.Windows.Controls.Button" />, <see cref="T:System.Windows.Controls.CheckBox" />, and <see cref="T:System.Windows.Controls.ScrollViewer" /> directly or indirectly inherit from this class.</summary>
    </member>
    <member name="M:System.Windows.Controls.ContentControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ContentControl" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.ContentControl.Content">
      <summary>Gets or sets the value of the <see cref="T:System.Windows.Controls.ContentControl" /> dependency property.</summary>
      <returns>An object that contains the control's content. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ContentControl.ContentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ContentControl.Content" /> dependency property </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ContentControl.Content" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ContentControl.ContentTemplate">
      <summary>Gets or sets the data template that is used to display the content of the <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
      <returns>The data template that is used to display the content of the <see cref="T:System.Windows.Controls.ContentControl" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ContentControl.ContentTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> dependency property </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ContentControl.OnContentChanged(System.Object,System.Object)">
      <summary>Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes. </summary>
      <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
      <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
    </member>
    <member name="T:System.Windows.Controls.ContentPresenter">
      <summary>Displays the content of a <see cref="T:System.Windows.Controls.ContentPresenter" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.ContentPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ContentPresenter" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.ContentPresenter.Content">
      <summary>Gets or sets the data that is used to generate the child elements of a <see cref="T:System.Windows.Controls.ContentPresenter" />.</summary>
      <returns>The data that is used to generate the child elements. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ContentPresenter.ContentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ContentPresenter.Content" /> dependency property </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ContentPresenter.Content" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ContentPresenter.ContentTemplate">
      <summary>Gets or sets the template that is used to display the content of the control.</summary>
      <returns>A <see cref="T:System.Windows.DataTemplate" /> that defines the visualization of the content. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ContentPresenter.ContentTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ContentPresenter.ContentTemplate" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ContentPresenter.ContentTemplate" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Control">
      <summary>Represents the base class for UI elements that use a <see cref="T:System.Windows.Controls.ControlTemplate" /> to define their appearance. </summary>
    </member>
    <member name="M:System.Windows.Controls.Control.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Control" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Control.ApplyTemplate">
      <summary>Loads the relevant control template so that its parts can be referenced.</summary>
      <returns>Returns whether the visual tree was rebuilt by this call. true indicates the tree was rebuilt; false indicates that the previous visual tree was retained.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.Background">
      <summary>Gets or sets a brush that provides the background of the control.</summary>
      <returns>The brush that provides the background of the control. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.BackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.Background" /> dependency property </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.Background" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.BorderBrush">
      <summary>Gets or sets a brush that describes the border background of a control.</summary>
      <returns>The brush that is used to fill the control's border; the default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.BorderBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.BorderBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.BorderBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.BorderThickness">
      <summary>Gets or sets the border thickness of a control. </summary>
      <returns>A thickness value; the default is a thickness of 0 on all four sides.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.BorderThicknessProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.BorderThickness" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.BorderThickness" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.DefaultStyleKey">
      <summary>Gets or sets the key that references the default style for the control.</summary>
      <returns>The key that references the default style for the control. To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the control being styled.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.DefaultStyleKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.DefaultStyleKey" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.DefaultStyleKey" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Control.Focus">
      <summary>Attempts to set the focus on the control.</summary>
      <returns>true if focus was set to the control, or focus was already on the control. false if the control is not focusable.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontFamily">
      <summary>Gets or sets the font used to display text in the control.</summary>
      <returns>The font used to display text in the control. The default is the "Portable User Interface".</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontFamilyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.FontFamily" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.FontFamily" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontSize">
      <summary>Gets or sets the size of the text in this control.</summary>
      <returns>The size of the text in the <see cref="T:System.Windows.Controls.Control" />. The default is 11 (in pixels).</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.f</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontStretch">
      <summary>Gets or sets the degree to which a font is condensed or expanded on the screen.</summary>
      <returns>One of the values that specifies the degree to which a font is condensed or expanded on the screen. The default is <see cref="P:System.Windows.FontStretches.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontStretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.FontStretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.FontStretch" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontStyle">
      <summary>Gets or sets the style in which the text is rendered.</summary>
      <returns>One of the values that specifies the style in which the text is rendered.  The default is <see cref="P:System.Windows.FontStyles.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontWeight">
      <summary>Gets or sets the thickness of the specified font.</summary>
      <returns>One of the values that specifies the thickness of the specified font. The default is <see cref="P:System.Windows.FontWeights.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontWeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.FontWeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.FontWeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.Foreground">
      <summary>Gets or sets a brush that describes the foreground color.</summary>
      <returns>The brush that paints the foreground of the control. The default value is <see cref="P:System.Windows.Media.Colors.Black" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.ForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.Foreground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.Foreground" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Control.GetTemplateChild(System.String)">
      <summary>Retrieves the named element in the instantiated <see cref="T:System.Windows.Controls.ControlTemplate" /> visual tree.</summary>
      <returns>The named element from the template, if found. Can return null if no element with name <paramref name="childName" /> was found in the template.</returns>
      <param name="childName">The name of element to find.</param>
    </member>
    <member name="P:System.Windows.Controls.Control.HorizontalContentAlignment">
      <summary>Gets or sets the horizontal alignment of the control's content. </summary>
      <returns>One of the <see cref="T:System.Windows.HorizontalAlignment" /> values. The default is <see cref="F:System.Windows.HorizontalAlignment.Center" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.HorizontalContentAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.HorizontalContentAlignment" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.HorizontalContentAlignment" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.IsEnabled">
      <summary>Gets or sets a value indicating whether the user can interact with the control. </summary>
      <returns>true if the user can interact with the control; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Controls.Control.IsEnabledChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.Control.IsEnabled" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.Controls.Control.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.IsEnabled" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.IsEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.IsTabStop">
      <summary>Gets or sets a value that indicates whether a control is included in tab navigation. </summary>
      <returns>true if the control is included in tab navigation; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.IsTabStopProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.IsTabStop" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.IsTabStop" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Control.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.GotFocus" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.KeyDown" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.KeyUp" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.LostFocus" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> event occurs to provide handling for the event in a derived class without attaching a delegate. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseEnter" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseLeave" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseMove" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseWheel" /> event occurs to provide handling for the event in a derived class without attaching a delegate. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Windows.Controls.Control.Padding">
      <summary>Gets or sets the padding inside a control.</summary>
      <returns>The amount of space between the content of a <see cref="T:System.Windows.Controls.Control" /> and its <see cref="P:System.Windows.FrameworkElement.Margin" /> or <see cref="T:System.Windows.Controls.Border" />.  The default is a thickness of 0 on all four sides.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.PaddingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.Padding" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.Padding" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.TabIndex">
      <summary>Gets or sets a value that determines the order in which elements receive focus when the user navigates through controls by using the TAB key.</summary>
      <returns>A value that determines the order of logical navigation for a device. The default value is <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.TabIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.TabIndex" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.TabIndex" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.TabNavigation">
      <summary>Gets or sets a value that modifies how tabbing and <see cref="P:System.Windows.Controls.Control.TabIndex" /> work for this control.</summary>
      <returns>A value of the enumeration. The default is <see cref="F:System.Windows.Input.KeyboardNavigationMode.Local" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.TabNavigationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.TabNavigation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.TabNavigation" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.Template">
      <summary>Gets or sets a control template. </summary>
      <returns>The template that defines the appearance of the <see cref="T:System.Windows.Controls.Control" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.TemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.Template" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.Template" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.VerticalContentAlignment">
      <summary>Gets or sets the vertical alignment of the control's content.</summary>
      <returns>One of the <see cref="T:System.Windows.VerticalAlignment" /> values. The default is <see cref="F:System.Windows.VerticalAlignment.Center" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.VerticalContentAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.VerticalContentAlignment" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.VerticalContentAlignment" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ControlTemplate">
      <summary>Defines the element tree that is applied as a control template.</summary>
    </member>
    <member name="M:System.Windows.Controls.ControlTemplate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ControlTemplate" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.ControlTemplate.TargetType">
      <summary>Gets or sets the type to which the <see cref="T:System.Windows.Controls.ControlTemplate" /> is applied.</summary>
      <returns>The type to which the <see cref="T:System.Windows.Controls.ControlTemplate" /> is applied.</returns>
    </member>
    <member name="T:System.Windows.Controls.Grid">
      <summary>Defines a flexible grid area that consists of columns and rows.</summary>
    </member>
    <member name="M:System.Windows.Controls.Grid.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Grid" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Grid.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges the content of a <see cref="T:System.Windows.Controls.Grid" /> element.</summary>
      <returns>
        <see cref="T:System.Windows.Size" /> that represents the arranged size of this <see cref="T:System.Windows.Controls.Grid" /> element and its children.</returns>
      <param name="arrangeSize">Specifies the size this <see cref="T:System.Windows.Controls.Grid" /> element should use to arrange its child elements.</param>
    </member>
    <member name="P:System.Windows.Controls.Grid.Column">
      <summary>Gets or sets a value that indicates which column child content within a <see cref="T:System.Windows.Controls.Grid" /> should appear in. </summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the column in which child content should appear. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.ColumnDefinitions">
      <summary>Gets a <see cref="T:System.Windows.Controls.ColumnDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" />. </summary>
      <returns>A <see cref="T:System.Windows.Controls.ColumnDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" /></returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.ColumnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Grid.Column" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Grid.Column" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.ColumnSpan">
      <summary>Gets or sets a value that indicates the total number of columns that child content spans within a <see cref="T:System.Windows.Controls.Grid" />.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of columns that child content should span. The default value is 1.</returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.ColumnSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetColumn(System.Windows.FrameworkElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property.  This is a zero-based index.</returns>
      <param name="element">The element from which to read the property value.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetColumnSpan(System.Windows.FrameworkElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property.</returns>
      <param name="element">The element from which to read the property value.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetRow(System.Windows.FrameworkElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property.</returns>
      <param name="element">The element from which to read the property value.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetRowSpan(System.Windows.FrameworkElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property.</returns>
      <param name="element">The element from which to read the property value.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.MeasureOverride(System.Windows.Size)">
      <summary>Measures the children of a <see cref="T:System.Windows.Controls.Grid" /> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.Grid.ArrangeOverride(System.Windows.Size)" /> pass.</summary>
      <returns>
        <see cref="T:System.Windows.Size" /> that represents the maximum area available to the child content for layout.</returns>
      <param name="constraint">Indicates an upper limit size that should not be exceeded.</param>
    </member>
    <member name="P:System.Windows.Controls.Grid.Row">
      <summary>Gets or sets a value that indicates which row child content within a <see cref="T:System.Windows.Controls.Grid" /> should appear in.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the row in which child content should appear. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.RowDefinitions">
      <summary>Gets a <see cref="T:System.Windows.Controls.RowDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" />. </summary>
      <returns>A <see cref="T:System.Windows.Controls.RowDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.RowProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Grid.Row" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Grid.Row" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.RowSpan">
      <summary>Gets or sets a value that indicates the total number of rows that child content spans within a <see cref="T:System.Windows.Controls.Grid" />.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of rows that child content should span. The default value is 1.</returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.RowSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetColumn(System.Windows.FrameworkElement,System.Int32)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <param name="element">The element on which to set the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetColumnSpan(System.Windows.FrameworkElement,System.Int32)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <param name="element">The element on which to set the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetRow(System.Windows.FrameworkElement,System.Int32)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <param name="element">The element on which to set the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetRowSpan(System.Windows.FrameworkElement,System.Int32)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <param name="element">The element on which to set the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="P:System.Windows.Controls.Grid.ShowGridLines">
      <summary>Gets or sets a value that indicates whether grid lines are visible within this <see cref="T:System.Windows.Controls.Grid" />. </summary>
      <returns>true if grid lines are visible; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.ShowGridLinesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Grid.ShowGridLines" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Grid.ShowGridLines" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.HyperlinkButton">
      <summary>Represents a button control that displays a hyperlink.</summary>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.HyperlinkButton" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.HyperlinkButton.NavigateUri">
      <summary>Gets or sets the URI to navigate to when the <see cref="T:System.Windows.Controls.HyperlinkButton" /> is clicked. </summary>
      <returns>The URI to navigate to when the <see cref="T:System.Windows.Controls.HyperlinkButton" /> is clicked.</returns>
    </member>
    <member name="F:System.Windows.Controls.HyperlinkButton.NavigateUriProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.HyperlinkButton" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.OnClick">
      <summary>Provides handling for the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> property is not or cannot be converted to an absolute URI.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Controls.HyperlinkButton.TargetName" /> property is set to a value that contains embedded whitespace.</exception>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" /> for the hyperlink button object. </returns>
    </member>
    <member name="P:System.Windows.Controls.HyperlinkButton.TargetName">
      <summary>Gets or sets the name of the target window or frame that the Web page should open in, or the name of the object within the Silverlight application to navigate to.</summary>
      <returns>Gets or sets the name of the target window or frame that the Web page should open in, or the name of the object within the Silverlight application to navigate to.</returns>
    </member>
    <member name="F:System.Windows.Controls.HyperlinkButton.TargetNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.HyperlinkButton.TargetName" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.HyperlinkButton.TargetName" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Image">
      <summary>Represents a control that displays an image.</summary>
    </member>
    <member name="M:System.Windows.Controls.Image.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Image" /> class. </summary>
    </member>
    <member name="E:System.Windows.Controls.Image.ImageFailed">
      <summary>Occurs when there is an error associated with image retrieval or format.</summary>
    </member>
    <member name="E:System.Windows.Controls.Image.ImageOpened">
      <summary>Occurs when the image source is downloaded and decoded with no failure. You can use this event to determine the size of an image before rendering it.</summary>
    </member>
    <member name="P:System.Windows.Controls.Image.Source">
      <summary>Gets or sets the source for the image.</summary>
      <returns>A source object for the drawn image.</returns>
    </member>
    <member name="F:System.Windows.Controls.Image.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Image.Source" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Image.Source" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Image.Stretch">
      <summary>Gets or sets a value that describes how an <see cref="T:System.Windows.Controls.Image" /> should be stretched to fill the destination rectangle. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Stretch" />A value of the enumeration that specifies how the source image is applied if the <see cref="P:System.Windows.FrameworkElement.Height" /> and <see cref="P:System.Windows.FrameworkElement.Width" /> of the <see cref="T:System.Windows.Controls.Image" /> are specified and are different than the source image's height and width.The default value is Uniform.</returns>
    </member>
    <member name="F:System.Windows.Controls.Image.StretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Image.Stretch" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Image.Stretch" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.INavigate">
      <summary>Defines a method for internal navigation in a Silverlight application.</summary>
    </member>
    <member name="M:System.Windows.Controls.INavigate.Navigate(System.Uri)">
      <summary>Displays the content located at the specified URI.</summary>
      <returns>true if the content was successfully displayed; otherwise, false.</returns>
      <param name="source">The URI of the content to display. </param>
    </member>
    <member name="T:System.Windows.Controls.InkPresenter">
      <summary>Implements a rectangular surface that displays ink strokes.</summary>
    </member>
    <member name="M:System.Windows.Controls.InkPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.InkPresenter" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.InkPresenter.Strokes">
      <summary>Gets or sets the strokes that the <see cref="T:System.Windows.Controls.InkPresenter" /> displays.</summary>
      <returns>The collection of ink strokes that are displayed by the <see cref="T:System.Windows.Controls.InkPresenter" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.InkPresenter.StrokesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.InkPresenter.Strokes" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.InkPresenter.Strokes" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ItemCollection">
      <summary>Holds the list of items that represent the content of an <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
    </member>
    <member name="E:System.Windows.Controls.ItemCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Occurs when the items list of the collection has changed, or the collection is reset.</summary>
    </member>
    <member name="T:System.Windows.Controls.ItemContainerGenerator">
      <summary>Provides mappings between the items of an <see cref="T:System.Windows.Controls.ItemsControl" /> and their container elements.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.ContainerFromIndex(System.Int32)">
      <summary>Returns the container for the item at the specified index within the <see cref="T:System.Windows.Controls.ItemCollection" />.</summary>
      <returns>The container for the item at the specified index within the item collection, if the item has a container; otherwise, null.</returns>
      <param name="index">The index of the item to retrieve.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.ContainerFromItem(System.Object)">
      <summary>Returns the container corresponding to the specified item.</summary>
      <returns>A container that corresponds to the specified item, if the item has a container and exists in the collection; otherwise, null.</returns>
      <param name="item">The item to retrieve the container for.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.GeneratorPositionFromIndex(System.Int32)">
      <returns>System.Windows.Controls.Primitives.GeneratorPosition</returns>
      <param name="itemIndex"></param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.IndexFromContainer(System.Windows.DependencyObject)">
      <summary>Returns the index to the item that has the specified, generated container.</summary>
      <returns>The index to the item that corresponds to the specified generated container.</returns>
      <param name="container">The generated container to retrieve the item index for.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.IndexFromGeneratorPosition(System.Windows.Controls.Primitives.GeneratorPosition)">
      <summary>Returns the index that maps to the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that is the index which maps to the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
      <param name="position">The index of desired item.The <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />  for the desired index.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.ItemFromContainer(System.Windows.DependencyObject)">
      <summary>Returns the item that corresponds to the specified, generated container.</summary>
      <returns>The contained item, or the container if it does not contain an item.</returns>
      <param name="container">The <see cref="T:System.Windows.DependencyObject" /> that corresponds to the item to be returned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="container" /> is null.</exception>
    </member>
    <member name="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged"></member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#GenerateNext(System.Boolean@)">
      <summary>Returns the container element used to display the next item, and whether the container element has been newly generated (realized).</summary>
      <returns>A <see cref="T:System.Windows.DependencyObject" /> that is the container element which is used to display the next item.</returns>
      <param name="isNewlyRealized">true if the returned <see cref="T:System.Windows.DependencyObject" /> is newly generated (realized); otherwise, false.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#GetItemContainerGeneratorForPanel(System.Windows.Controls.Panel)">
      <summary>Returns the <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> appropriate for use by the specified panel. </summary>
      <returns>An <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> appropriate for use by the specified panel.</returns>
      <param name="panel">The panel for which to return an appropriate <see cref="T:System.Windows.Controls.ItemContainerGenerator" />.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#PrepareItemContainer(System.Windows.DependencyObject)">
      <summary>Prepares the specified element as the container for the corresponding item.</summary>
      <param name="container">The container to prepare. Normally, <paramref name="container" /> is the result of the previous call to <see cref="M:System.Windows.Controls.Primitives.IItemContainerGenerator.GenerateNext(System.Boolean@)" />.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#Remove(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32)">
      <summary>Removes one or more generated (realized) items.</summary>
      <param name="position">The <see cref="T:System.Int32" /> index of the element to remove. <paramref name="position" /> must refer to a previously generated (realized) item, which means its offset must be zero.</param>
      <param name="count">The <see cref="T:System.Int32" /> number of elements to remove, starting at <paramref name="position" />.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#RemoveAll">
      <summary>Removes all generated (realized) items.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#StartAt(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorDirection,System.Boolean)">
      <summary>Prepares the generator to generate items, starting at the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />, and in the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorDirection" />, and controlling whether or not to start at a generated (realized) item.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that tracks the lifetime of the generation process.</returns>
      <param name="position">A <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />, that specifies the position of the item to start generating items at.</param>
      <param name="direction">Specifies the position of the item to start generating items at.</param>
      <param name="allowStartAtRealizedItem">A <see cref="T:System.Boolean" /> that specifies whether to start at a generated (realized) item.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IRecyclingItemContainerGenerator#Recycle(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32)">
      <summary>Disassociates item containers from their data items and saves the containers so they can be reused later for other data items.</summary>
      <param name="position">The zero-based index of the first element to reuse. <paramref name="position" /> must refer to a previously generated (realized) item.</param>
      <param name="count">The number of elements to reuse, starting at <paramref name="position" />.</param>
    </member>
    <member name="T:System.Windows.Controls.ItemsControl">
      <summary>Represents a control that can be used to present a collection of items.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ItemsControl" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Undoes the effects of the <see cref="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)" /> method.</summary>
      <param name="element">The container element.</param>
      <param name="item">The item.</param>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.DisplayMemberPath">
      <summary>Gets or sets the name or path of the property that is displayed for each data item.</summary>
      <returns>The name or path of the property that is displayed for each the data item in the control.  The default is an empty string ("").</returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.DisplayMemberPathProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ItemsControl.DisplayMemberPath" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.DisplayMemberPath" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.GetContainerForItemOverride">
      <summary>Creates or identifies the element that is used to display the given item.</summary>
      <returns>The element that is used to display the given item.</returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.GetItemsOwner(System.Windows.DependencyObject)">
      <summary>Returns the <see cref="T:System.Windows.Controls.ItemsControl" /> that the specified element hosts items for.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ItemsControl" /> that the specified element hosts items for, or null.</returns>
      <param name="element">The host element. </param>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.IsItemItsOwnContainerOverride(System.Object)">
      <summary>Determines if the specified item is (or is eligible to be) its own container.</summary>
      <returns>true if the item is (or is eligible to be) its own container; otherwise, false.</returns>
      <param name="item">The item to check.</param>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemContainerGenerator">
      <summary>Gets the <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> associated with this <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> associated with this <see cref="T:System.Windows.Controls.ItemsControl" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.Items">
      <summary>Gets the collection used to generate the content of the control.</summary>
      <returns>The collection that is used to generate the content of the control, if it exists; otherwise, null. The default is an empty collection.</returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.ItemsControlFromItemContainer(System.Windows.DependencyObject)">
      <summary>Returns the <see cref="T:System.Windows.Controls.ItemsControl" /> that owns the specified container element.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ItemsControl" /> that owns the specified container element; otherwise, null.</returns>
      <param name="container">The container element to return the <see cref="T:System.Windows.Controls.ItemsControl" /> for.</param>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemsPanel">
      <summary>Gets or sets the template that defines the panel that controls the layout of items.</summary>
      <returns>An <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> that defines the panel to use for the layout of the items. The default value for the <see cref="T:System.Windows.Controls.ItemsControl" /> is an <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> that specifies a <see cref="T:System.Windows.Controls.StackPanel" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.ItemsPanelProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemsSource">
      <summary>Gets or sets a collection used to generate the content of the <see cref="T:System.Windows.Controls.ItemsControl" />. </summary>
      <returns>The  object that is used to generate the content of the <see cref="T:System.Windows.Controls.ItemsControl" />. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.ItemsSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemTemplate">
      <summary>Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used to display each item. </summary>
      <returns>The template that specifies the visualization of the data objects. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.ItemTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Called when the value of the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> property changes.</summary>
      <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> that contains the event data</param>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Prepares the specified element to display the specified item. </summary>
      <param name="element">The element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="T:System.Windows.Controls.ItemsPanelTemplate">
      <summary>Specifies the panel that the <see cref="T:System.Windows.Controls.ItemsPresenter" /> creates for the layout of the items of an <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsPanelTemplate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> class. </summary>
    </member>
    <member name="T:System.Windows.Controls.ItemsPresenter">
      <summary>Specifies where items are placed in a control, usually an <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ItemsPresenter" /> class. </summary>
    </member>
    <member name="T:System.Windows.Controls.ListBox">
      <summary>Contains a list of selectable items. </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ListBox" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBox.GetContainerForItemOverride">
      <summary>Creates or identifies the element used to display a specified item. </summary>
      <returns>A <see cref="T:System.Windows.Controls.ListBoxItem" /> corresponding to a specified item.</returns>
    </member>
    <member name="M:System.Windows.Controls.ListBox.IsItemItsOwnContainerOverride(System.Object)">
      <summary>Determines if the specified item is (or is eligible to be) its own item container. </summary>
      <returns>true if the item is its own item container; otherwise, false.</returns>
      <param name="item">The specified item.</param>
    </member>
    <member name="F:System.Windows.Controls.ListBox.IsSelectionActiveProperty">
      <summary>Identifies the IsSelectionActive dependency property. </summary>
      <returns>The identifier for the IsSelectionActive dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ListBox.ItemContainerStyle">
      <summary>Gets or sets the style that is used when rendering the item containers. </summary>
      <returns>The style applied to the item containers. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ListBox.ItemContainerStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ListBox.ItemContainerStyle" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ListBox.ItemContainerStyle" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ListBox" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" /> for the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ListBox" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event that occurs when a key is pressed while the control has focus.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.ScrollIntoView(System.Object)">
      <summary>Causes the object to scroll into view. </summary>
      <param name="item">The object to scroll.</param>
    </member>
    <member name="P:System.Windows.Controls.ListBox.SelectedItems">
      <summary>Gets the list of currently selected items for the <see cref="T:System.Windows.Controls.ListBox" /> control.</summary>
      <returns>The list of currently selected items for the <see cref="T:System.Windows.Controls.ListBox" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.ListBox.SelectionMode">
      <summary>Gets or sets the selection behavior for the <see cref="T:System.Windows.Controls.ListBox" /> control.</summary>
      <returns>One of the <see cref="T:System.Windows.Controls.SelectionMode" /> values.</returns>
    </member>
    <member name="F:System.Windows.Controls.ListBox.SelectionModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ListBox.SelectionMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ListBox.SelectionMode" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ListBoxItem">
      <summary>Represents a selectable item in a <see cref="T:System.Windows.Controls.ListBox" />. </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ListBoxItem" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.ListBoxItem.IsSelected">
      <summary>Gets or sets a value that indicates whether a <see cref="T:System.Windows.Controls.ListBoxItem" /> is selected. </summary>
      <returns>true if the item is selected; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ListBoxItem.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ListBoxItem" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> for the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ListBoxItem" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.MediaElement">
      <summary>Represents an object that contains audio, video, or both.</summary>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:System.Windows.Controls.MediaElement" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Attributes">
      <summary>Gets the collection of attributes that corresponds to the current entry in the ASX file that <see cref="P:System.Windows.Controls.MediaElement.Source" /> is set to.</summary>
      <returns>The collection of attributes that corresponds to the current entry in the ASX file that <see cref="P:System.Windows.Controls.MediaElement.Source" /> is set to.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AttributesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Attributes" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Attributes" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.AudioStreamCount">
      <summary>Gets the number of audio streams available in the current media file. </summary>
      <returns>The number of audio streams that exist in the source media file. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AudioStreamCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamCount" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamCount" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.AudioStreamIndex">
      <summary>Gets or sets the index of the audio stream that plays along with the video component. The collection of audio streams is composed at run time and represents all audio streams available within the media file. </summary>
      <returns>The index within the media file of the audio component that plays along with the video component. The index can be unspecified, in which case the value is null. The default value is null (see the "Remarks" section).</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AudioStreamIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamIndex" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamIndex" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.AutoPlay">
      <summary>Gets or sets a value that indicates whether media will begin playback automatically when the <see cref="P:System.Windows.Controls.MediaElement.Source" /> property is set. </summary>
      <returns>true if playback is automatic; otherwise, false. The default value is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AutoPlayProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.AutoPlay" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.AutoPlay" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Balance">
      <summary>Gets or sets a ratio of volume across stereo speakers. </summary>
      <returns>The ratio of volume across speakers in the range between -1 and 1. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.BalanceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Balance" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Balance" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.BufferingProgress">
      <summary>Gets a value that indicates the current buffering progress. </summary>
      <returns>The amount of buffering that is completed for media content. The value ranges from 0 to 1. Multiply by 100 to obtain a percentage. The default value is 0.</returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.BufferingProgressChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.MediaElement.BufferingProgress" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.BufferingProgressProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.BufferingProgress" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.BufferingProgress" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.BufferingTime">
      <summary>Gets or sets the amount of time to buffer.</summary>
      <returns>The amount of time to buffer. The default value is a <see cref="T:System.TimeSpan" /> with value of 5 seconds (0:0:05).</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.BufferingTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.BufferingTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.BufferingTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.CanPause">
      <summary>Gets a value indicating if media can be paused if the <see cref="M:System.Windows.Controls.MediaElement.Pause" /> method is called. </summary>
      <returns>true if the media can be paused; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.CanPauseProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.CanPause" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.CanPause" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.CanSeek">
      <summary>Gets a value indicating if media can be repositioned by setting the value of the <see cref="P:System.Windows.Controls.MediaElement.Position" /> property. </summary>
      <returns>true if the media can be repositioned; otherwise, false.The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.CanSeekProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.CanSeek" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.CanSeek" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.CurrentState">
      <summary>Gets the status of the <see cref="T:System.Windows.Controls.MediaElement" />. </summary>
      <returns>The current state of the <see cref="T:System.Windows.Controls.MediaElement" />. The state can be one of the following (as defined in the <see cref="T:System.Windows.Media.MediaElementState" /> enumeration): <see cref="F:System.Windows.Media.MediaElementState.Buffering" />, <see cref="F:System.Windows.Media.MediaElementState.Closed" />, <see cref="F:System.Windows.Media.MediaElementState.Opening" />, <see cref="F:System.Windows.Media.MediaElementState.Paused" />, <see cref="F:System.Windows.Media.MediaElementState.Playing" />, or <see cref="F:System.Windows.Media.MediaElementState.Stopped" />.The default value is <see cref="F:System.Windows.Media.MediaElementState.Closed" />.</returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.CurrentStateChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Controls.MediaElement.CurrentState" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.CurrentStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.CurrentState" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.CurrentState" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.DownloadProgress">
      <summary>Gets a percentage value indicating the amount of download completed for content located on a remote server.</summary>
      <returns>A value that indicates the amount of download completed for content that is located on a remote server. The value ranges from 0 to 1. Multiply by 100 to obtain a percentage. The default value is 0.</returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.DownloadProgressChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgress" /> property has changed.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.DownloadProgressOffset">
      <summary>Gets the offset of the download progress. </summary>
      <returns>The offset of the download progress.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.DownloadProgressOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgressOffset" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgressOffset" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.DownloadProgressProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgress" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgress" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.DroppedFramesPerSecond">
      <summary>Gets the number of frames per second being dropped by the media.</summary>
      <returns>The number of frames per second being dropped by the media.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.DroppedFramesPerSecondProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.DroppedFramesPerSecond" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.DroppedFramesPerSecond" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.IsMuted">
      <summary>Gets or sets a value indicating whether the audio is muted. </summary>
      <returns>true if audio is muted; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.IsMutedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.IsMuted" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.IsMuted" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.LicenseAcquirer">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.LicenseAcquirer" /> associated with the <see cref="T:System.Windows.Controls.MediaElement" />. The <see cref="T:System.Windows.Media.LicenseAcquirer" /> handles acquiring licenses for DRM encrypted content.</summary>
      <returns>The <see cref="T:System.Windows.Media.LicenseAcquirer" /> associated with the <see cref="T:System.Windows.Controls.MediaElement" />. The default is null.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Windows.Media.LicenseAcquirer" /> is null.</exception>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.LogReady">
      <summary>Occurs when the log is ready.</summary>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MarkerReached">
      <summary>Occurs when a timeline marker is encountered during media playback.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Markers">
      <summary>Gets the collection of timeline markers associated with the currently loaded media file.</summary>
      <returns>The collection of timeline markers (represented as <see cref="T:System.Windows.Media.TimelineMarker" /> objects) associated with the currently loaded media file. The default value is an empty collection.</returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MediaEnded">
      <summary>Occurs when the <see cref="T:System.Windows.Controls.MediaElement" />  is no longer playing audio or video.</summary>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MediaFailed">
      <summary>Occurs when there is an error associated with the media <see cref="P:System.Windows.Controls.MediaElement.Source" />.</summary>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MediaOpened">
      <summary>Occurs when the media stream has been validated and opened, and the file headers have been read.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.NaturalDuration">
      <summary>Gets the duration of the media file currently opened.</summary>
      <returns>The natural duration of the media. The default value is <see cref="P:System.Windows.Duration.Automatic" />, which is the value held if you query this property before <see cref="E:System.Windows.Controls.MediaElement.MediaOpened" />. </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.NaturalDurationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.NaturalDuration" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.NaturalDuration" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.NaturalVideoHeight">
      <summary>Gets the height of the video associated with the media.</summary>
      <returns>The height of the video that is associated with the media, in pixels. Audio files will return 0. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.NaturalVideoHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.NaturalVideoWidth">
      <summary>Gets the width of the video associated with the media.</summary>
      <returns>The width of the video associated with the media. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.NaturalVideoWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.Pause">
      <summary>Pauses media at the current position.</summary>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.Play">
      <summary>Plays media from the current position.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Position">
      <summary>Gets or sets the current position of progress through the media's playback time.</summary>
      <returns>The amount of time since the beginning of the media. The default is a <see cref="T:System.TimeSpan" /> with value 0:0:0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.PositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Position" /> dependency property.</summary>
      <returns>The identifier the <see cref="P:System.Windows.Controls.MediaElement.Position" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.RenderedFramesPerSecond">
      <summary>Gets the number of frames per second being rendered by the media.</summary>
      <returns>The number of frames per second being rendered by the media.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.RenderedFramesPerSecondProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.RenderedFramesPerSecond" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.RenderedFramesPerSecond" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.RequestLog">
      <summary>Sends a request to generate a log which will then be raised through the <see cref="E:System.Windows.Controls.MediaElement.LogReady" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.SetSource(System.IO.Stream)">
      <summary>Sets the <see cref="P:System.Windows.Controls.MediaElement.Source" /> property using the supplied stream.</summary>
      <param name="stream">A stream that contains a valid media source.</param>
      <exception cref="T:System.ArgumentNullException">The s<paramref name="tream" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.SetSource(System.Windows.Media.MediaStreamSource)">
      <summary>This sets the source of a <see cref="T:System.Windows.Controls.MediaElement" /> to a subclass of <see cref="T:System.Windows.Media.MediaStreamSource" />.</summary>
      <param name="mediaStreamSource">A subclass of <see cref="T:System.Windows.Media.MediaStreamSource" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="mediaStreamSource" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified <paramref name="mediaStreamSource" /> is invalid, or does not exist.</exception>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Source">
      <summary>Gets or sets a media source on the <see cref="T:System.Windows.Controls.MediaElement" />. </summary>
      <returns>A string that specifies the source of the element, as a Uniform Resource Identifier (URI). The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Source" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Source" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.Stop">
      <summary>Stops and resets media to be played from the beginning.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Stretch">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> value that describes how a <see cref="T:System.Windows.Controls.MediaElement" /> fills the destination rectangle. </summary>
      <returns>A value of the enumeration that specifies the stretch behavior for the rendered media. The default value is Uniform.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.StretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Stretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Stretch" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Volume">
      <summary>Gets or sets the media's volume. </summary>
      <returns>The media's volume represented on a linear scale between 0 and 1. The default is 0.5.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.VolumeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Volume" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Volume" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.MultiScaleImage">
      <summary>Enables users to open a multi-resolution image, which can be zoomed in on and panned across. </summary>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.MultiScaleImage" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.AllowDownloading">
      <summary>Gets or sets a value that indicates whether downloading is permitted by this <see cref="T:System.Windows.Controls.MultiScaleImage" />. </summary>
      <returns>true if downloading is permitted by this <see cref="T:System.Windows.Controls.MultiScaleImage" />. false if downloading is not permitted by this <see cref="T:System.Windows.Controls.MultiScaleImage" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.AllowDownloadingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.AllowDownloading" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.AllowDownloading" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.AspectRatio">
      <summary>Gets the aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleImage" />. The aspect ratio is the width of the image divided by its height.</summary>
      <returns>The aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleImage" />. The aspect ratio is the width of the image divided by its height.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.AspectRatioProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.AspectRatio" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.AspectRatio" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.BlurFactor">
      <summary>Gets or sets the extent that data is blurred while rendering.</summary>
      <returns>The extent that data is blurred while rendering. A value of 2 means that data is twice as blurry (one level lower), while a value of 0.5 means that data is sharper (one level higher). The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.BlurFactorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.BlurFactor" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.BlurFactor" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.ElementToLogicalPoint(System.Windows.Point)">
      <summary>Gets a point with logical coordinates (values between 0 and 1) from a point of the <see cref="T:System.Windows.Controls.MultiScaleImage" />. </summary>
      <returns>The logical point translated from the <paramref name="elementPoint" />.</returns>
      <param name="elementPoint">The point on the <see cref="T:System.Windows.Controls.MultiScaleImage" /> to translate into a point with logical coordinates (values between 0 and 1).</param>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ImageFailed">
      <summary>Occurs if the download of a tile times out or fails for another reason.</summary>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ImageOpenFailed">
      <summary>Occurs if the first piece of metadata used to open the image fails. If this event occurs no parts of the image will open successfully.</summary>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ImageOpenSucceeded">
      <summary>Occurs when the first piece of metadata that is needed to load the rest of the tiles opens.</summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.IsDownloading">
      <summary>Gets a value that indicates whether the image is still downloading.</summary>
      <returns>true if the image is still downloading. false if all the needed tiles have been downloaded. If the image is moved, <see cref="P:System.Windows.Controls.MultiScaleImage.IsDownloading" /> may become true again.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.IsDownloadingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.IsDownloading" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.IsDownloading" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.IsIdle">
      <summary>Gets a value that indicates whether Deep Zoom is done downloading, decoding, blending, and animating (if springs are being used) images. . </summary>
      <returns>true, if Deep Zoom is done downloading, decoding, blending, and animating (if springs are being used) images. Otherwise, false..</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.IsIdleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.IsIdle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.IsIdle" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.LogicalToElementPoint(System.Windows.Point)">
      <summary>Gets a point with pixel coordinates relative to the <see cref="T:System.Windows.Controls.MultiScaleImage" /> from a logical point (values between 0 and1).</summary>
      <returns>A point with pixel coordinates relative to the <see cref="T:System.Windows.Controls.MultiScaleImage" /> translated from <paramref name="logicalPoint" />.</returns>
      <param name="logicalPoint">The logical point to translate into pixel coordinates relative to the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</param>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.MotionFinished">
      <summary>Occurs when the zoom or pan animation ends. </summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.Source">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.MultiScaleTileSource" /> object that is used as the source for the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</summary>
      <returns>The <see cref="T:System.Windows.Media.MultiScaleTileSource" /> object that is used as the source for the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.Source" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.Source" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.SubImages">
      <summary>Gets the collection of <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> objects within the multiresolution image that is used by the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</summary>
      <returns>The collection of <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> objects within the multiresolution image that is used by the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.SubImagesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.SubImages" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.SubImages" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.UseSprings">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.MultiScaleImage" /> uses spring animations.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.MultiScaleImage" /> uses spring animations; otherwise, false. The default value is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.UseSpringsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.UseSprings" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.UseSprings" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ViewportChanged">
      <summary>Occurs when the viewport (the area of the image displayed) changes. </summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.ViewportOrigin">
      <summary>Gets or sets the top-left corner of the area of the image to be displayed. </summary>
      <returns>The point of the top-left corner of the rectangular area of the image to be displayed. </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.ViewportOriginProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportOrigin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportOrigin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.ViewportWidth">
      <summary>Gets or sets the width of the area of the image displayed.</summary>
      <returns>The width of the area of the image displayed. </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.ViewportWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.ZoomAboutLogicalPoint(System.Double,System.Double,System.Double)">
      <summary>Enables a user to zoom in on a point of the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</summary>
      <param name="zoomIncrementFactor">Specifies the zoom. This number is greater than 0. A value of 1 specifies that the image fit the allotted page size exactly. A number greater than 1 specifies to zoomed in. If a value of 0 or less is used, failure is returned and no zoom changes are applied.  </param>
      <param name="zoomCenterLogicalX">X coordinate for the point on the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is zoomed in on. This is a logical point (between 0 and 1). </param>
      <param name="zoomCenterLogicalY">Y coordinate for the point on the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is zoomed in on. This is a logical point (between 0 and 1).</param>
    </member>
    <member name="T:System.Windows.Controls.MultiScaleSubImage">
      <summary>This class holds the properties for each sub-image within the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleSubImage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.AspectRatio">
      <summary>Gets the aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. The aspect ratio is the width of the image divided by its height.</summary>
      <returns>The aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. The aspect ratio is the width of the image divided by its height.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.AspectRatioProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.AspectRatio" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.AspectRatio" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.Opacity">
      <summary>Gets or sets the degree of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> opacity.</summary>
      <returns>A value between 0 and 1.0 that declares the opacity, with 1.0 meaning full opacity and 0 meaning transparent. The default value is 1.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.Opacity" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.Opacity" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.ViewportOrigin">
      <summary>Gets or sets the top-left corner of the area of the image to be displayed.</summary>
      <returns>The point of the top-left corner of the rectangular area of the image to be displayed.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.ViewportOriginProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportOrigin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportOrigin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.ViewportWidth">
      <summary>Gets or sets the width of the area of the image displayed.</summary>
      <returns>The width of the area of the image displayed. </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.ViewportWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportWidth" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.ZIndex">
      <summary>Gets or sets a value that represents the z-order rendering behavior of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. Z-order determines the relative rendering order of objects (which object is on top of which other objects).</summary>
      <returns>The value that represents the z-order rendering behavior of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.ZIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ZIndex" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ZIndex" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.OpenFileDialog">
      <summary>Provides a dialog box that enables the user to select one or more files. </summary>
    </member>
    <member name="M:System.Windows.Controls.OpenFileDialog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.OpenFileDialog" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.File">
      <summary>Gets a <see cref="T:System.IO.FileInfo" /> object for the selected file. If multiple files are selected, returns the first selected file.</summary>
      <returns>The selected file. If multiple files are selected, returns the first selected file.</returns>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.Files">
      <summary>Gets a collection of <see cref="T:System.IO.FileInfo" /> objects for the selected files.</summary>
      <returns>A collection of <see cref="T:System.IO.FileInfo" /> objects for the selected files.</returns>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.Filter">
      <summary>Gets or sets a filter string that specifies the file types and descriptions to display in the <see cref="T:System.Windows.Controls.OpenFileDialog" />.</summary>
      <returns>A filter string that specifies the file types and descriptions to display in the <see cref="T:System.Windows.Controls.OpenFileDialog" />. The default is <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentException">The filter string does not contain at least one vertical bar (|).</exception>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.FilterIndex">
      <summary>Gets or sets the index of the selected item in the <see cref="T:System.Windows.Controls.OpenFileDialog" /> filter drop-down list.</summary>
      <returns>The index of the selected item in the <see cref="T:System.Windows.Controls.OpenFileDialog" /> filter drop-down list. The default is 1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The filter index is less than 1.</exception>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.Multiselect">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.OpenFileDialog" /> allows users to select multiple files.</summary>
      <returns>true if multiple selections are allowed; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Windows.Controls.OpenFileDialog.ShowDialog">
      <summary>Displays an <see cref="T:System.Windows.Controls.OpenFileDialog" /> that is modal to the Web browser window.</summary>
      <returns>true if the user clicked OK; false if the user clicked Cancel or closed the dialog box.</returns>
      <exception cref="T:System.InvalidOperationException">
                Silverlight was unable to display the dialog box.</exception>
      <exception cref="T:System.Security.SecurityException">Active Scripting in Internet Explorer is disabled.-or-The call to the <see cref="M:System.Windows.Controls.OpenFileDialog.ShowDialog" /> method was not made from user-initiated code.</exception>
    </member>
    <member name="T:System.Windows.Controls.Orientation">
      <summary>Defines the different orientations that a control or layout can have.</summary>
    </member>
    <member name="F:System.Windows.Controls.Orientation.Vertical">
      <summary>The control or layout should be vertically oriented.</summary>
    </member>
    <member name="F:System.Windows.Controls.Orientation.Horizontal">
      <summary>The control or layout should be horizontally oriented.</summary>
    </member>
    <member name="T:System.Windows.Controls.Panel">
      <summary>Provides a base class for all <see cref="T:System.Windows.Controls.Panel" /> elements. Use <see cref="T:System.Windows.Controls.Panel" /> elements to position and arrange child objects in Silverlight-based applications. </summary>
    </member>
    <member name="M:System.Windows.Controls.Panel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Panel" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.Panel.Background">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Brush" /> that is used to fill the panel. </summary>
      <returns>The brush used to fill the panel. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.Panel.BackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Panel.Background" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Panel.Background" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Panel.Children">
      <summary>Gets the collection of child elements of the panel. </summary>
      <returns>The collection of child objects. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Windows.Controls.Panel.IsItemsHost">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Windows.Controls.Panel" /> is a container for UI items that are generated by an <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
      <returns>true if this instance of <see cref="T:System.Windows.Controls.Panel" /> is an items host; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Panel.IsItemsHostProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Panel.IsItemsHost" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Panel.IsItemsHost" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.PasswordBox">
      <summary>Represents a control for entering passwords.</summary>
    </member>
    <member name="M:System.Windows.Controls.PasswordBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.PasswordBox" /> class</summary>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.CaretBrush">
      <summary>Gets or sets the brush that is used to render the vertical bar that indicates the insertion point.</summary>
      <returns>The brush that is used to render the vertical bar that indicates the insertion point.</returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.CaretBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.CaretBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.CaretBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.FontSource">
      <summary>Gets or sets the font source that is applied to the password box for rendering content.</summary>
      <returns>The font source used to render content in the text box. The default is null.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value set is not a valid source.</exception>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.MaxLength">
      <summary>Gets or sets the maximum length for passwords to be handled by this <see cref="T:System.Windows.Controls.PasswordBox" />.</summary>
      <returns>An integer specifying the maximum length, in character, for passwords to be handled by this <see cref="T:System.Windows.Controls.PasswordBox" />. A value of zero (0) means no limit.The default value is 0 (no length limit).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to a negative value.</exception>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.MaxLengthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.MaxLength" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.MaxLength" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.Password">
      <summary>Gets or sets the password currently held by the <see cref="T:System.Windows.Controls.PasswordBox" />.</summary>
      <returns>A string representing the password currently held by the <see cref="T:System.Windows.Controls.PasswordBox" />.The default value is <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to a null value.</exception>
    </member>
    <member name="E:System.Windows.Controls.PasswordBox.PasswordChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Controls.PasswordBox.Password" /> property changes.</summary>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.PasswordChar">
      <summary>Gets or sets the masking character for the <see cref="T:System.Windows.Controls.PasswordBox" />. </summary>
      <returns>A masking character to echo when the user enters text into the <see cref="T:System.Windows.Controls.PasswordBox" />. The default value is a bullet character (●). </returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.PasswordCharProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.PasswordChar" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.PasswordChar" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.PasswordProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.Password" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.Password" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.PasswordBox.SelectAll">
      <summary>Selects all the character in the <see cref="T:System.Windows.Controls.PasswordBox" />.</summary>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.SelectionBackground">
      <summary>Gets or sets the brush used to render the background for the selected text.</summary>
      <returns>The brush that fills the background of the selected text.</returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.SelectionBackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.SelectionBackground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.SelectionBackground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.SelectionForeground">
      <summary>Gets or sets the brush used for the selected text in the <see cref="T:System.Windows.Controls.PasswordBox" />.</summary>
      <returns>The brush used for the selected text in the <see cref="T:System.Windows.Controls.PasswordBox" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.SelectionForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.SelectionForeground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.SelectionForeground" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ProgressBar">
      <summary>Represents a control that indicates the progress of an operation.</summary>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ProgressBar" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.ProgressBar.IsIndeterminate">
      <summary>Gets or sets a value that indicates whether the progress bar reports generic progress with a repeating pattern or reports progress based on the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property. </summary>
      <returns>true if the progress bar reports generic progress with a repeating pattern; false if the progress bar reports progress based on the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ProgressBar.IsIndeterminateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ProgressBar.IsIndeterminate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ProgressBar.IsIndeterminate" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ProgressBar" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ProgressBar" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.OnValueChanged(System.Double,System.Double)">
      <summary>Called when value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property changes.</summary>
      <param name="oldValue">The previous value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="T:System.Windows.Controls.RadioButton">
      <summary>Represents a button that allows a user to select a single option from a group of options.</summary>
    </member>
    <member name="M:System.Windows.Controls.RadioButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.RadioButton" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.RadioButton.GroupName">
      <summary>Gets or sets the name that specifies which <see cref="T:System.Windows.Controls.RadioButton" /> controls are mutually exclusive.</summary>
      <returns>The name that specifies which <see cref="T:System.Windows.Controls.RadioButton" /> controls are mutually exclusive. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.RadioButton.GroupNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RadioButton.GroupName" /> dependency property. </summary>
      <returns>The identifier for <see cref="P:System.Windows.Controls.RadioButton.GroupName" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.RadioButton.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>An <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" /> for the radio button object.</returns>
    </member>
    <member name="M:System.Windows.Controls.RadioButton.OnToggle">
      <summary>Sets the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked" /> property to true.</summary>
    </member>
    <member name="T:System.Windows.Controls.RowDefinition">
      <summary>Defines row-specific properties that apply to <see cref="T:System.Windows.Controls.Grid" /> elements.</summary>
    </member>
    <member name="M:System.Windows.Controls.RowDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.RowDefinition" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.ActualHeight">
      <summary>Gets a value that represents the calculated height of the <see cref="T:System.Windows.Controls.RowDefinition" />.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the calculated height in pixels. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.Height">
      <summary>Gets the calculated height of a <see cref="T:System.Windows.Controls.RowDefinition" /> element, or sets the <see cref="T:System.Windows.GridLength" /> value of a row that is defined by the <see cref="T:System.Windows.Controls.RowDefinition" />. </summary>
      <returns>The <see cref="T:System.Windows.GridLength" /> that represents the height of the row. The default value is 1.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.RowDefinition.HeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RowDefinition.Height" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.RowDefinition.Height" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.MaxHeight">
      <summary>Gets or sets a value that represents the maximum height of a <see cref="T:System.Windows.Controls.RowDefinition" />.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the maximum height. </returns>
    </member>
    <member name="F:System.Windows.Controls.RowDefinition.MaxHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RowDefinition.MaxHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.RowDefinition.MaxHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.MinHeight">
      <summary>Gets or sets a value that represents the minimum allowed height of a <see cref="T:System.Windows.Controls.RowDefinition" />. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the minimum allowed height. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.RowDefinition.MinHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RowDefinition.MinHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.RowDefinition.MinHeight" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.RowDefinitionCollection">
      <summary>Provides access to an ordered, strongly typed collection of <see cref="T:System.Windows.Controls.RowDefinition" /> objects.</summary>
    </member>
    <member name="T:System.Windows.Controls.SaveFileDialog">
      <summary>Provides a dialog box that enables the user to specify options for saving a file.</summary>
    </member>
    <member name="M:System.Windows.Controls.SaveFileDialog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.SaveFileDialog" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.SaveFileDialog.DefaultExt">
      <summary>Gets or sets the default file name extension applied to files that are saved with the <see cref="T:System.Windows.Controls.SaveFileDialog" />.</summary>
      <returns>The default file name extension applied to files that are saved with the <see cref="T:System.Windows.Controls.SaveFileDialog" />, which can optionally include the dot character (.).</returns>
    </member>
    <member name="P:System.Windows.Controls.SaveFileDialog.Filter">
      <summary>Gets or sets a filter string that specifies the files types and descriptions to display in the <see cref="T:System.Windows.Controls.SaveFileDialog" />.</summary>
      <returns>A filter string that specifies the file types and descriptions to display in the <see cref="T:System.Windows.Controls.SaveFileDialog" />. The default is <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentException">The filter string does not contain at least one vertical bar (|).</exception>
    </member>
    <member name="P:System.Windows.Controls.SaveFileDialog.FilterIndex">
      <summary>Gets or sets the index of the selected item in the Save as type drop-down list.</summary>
      <returns>The index of the selected item in the Save as type filter drop-down list. The default is 1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The filter index is less than 1.</exception>
    </member>
    <member name="M:System.Windows.Controls.SaveFileDialog.OpenFile">
      <summary>Opens the file specified by the <see cref="P:System.Windows.Controls.SaveFileDialog.File" /> property.</summary>
      <returns>A read-write stream for the file specified by the <see cref="P:System.Windows.Controls.SaveFileDialog.File" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">No file was selected in the dialog box.</exception>
    </member>
    <member name="P:System.Windows.Controls.SaveFileDialog.SafeFileName"></member>
    <member name="M:System.Windows.Controls.SaveFileDialog.ShowDialog">
      <summary>Displays a <see cref="T:System.Windows.Controls.SaveFileDialog" /> that is modal to the Web browser window.</summary>
      <returns>true if the user clicked Save; false if the user clicked Cancel or closed the dialog box.</returns>
    </member>
    <member name="T:System.Windows.Controls.ScrollBarVisibility">
      <summary>Specifies the visibility of a scrollbar within a <see cref="T:System.Windows.Controls.ScrollViewer" /> control.</summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Disabled">
      <summary>A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> does not appear even when the viewport cannot display all of the content. The dimension of the content is set to the corresponding dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> parent. For a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the width of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />. For a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the height of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Auto">
      <summary>A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> appears and the dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> is applied to the content when the viewport cannot display all of the content. For a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the width of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />. For a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the height of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Hidden">
      <summary>A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> does not appear even when the viewport cannot display all of the content. The dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> is not applied to the content.</summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Visible">
      <summary>A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> always appears. The dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> is applied to the content. For a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the width of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />. For a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the height of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />.</summary>
    </member>
    <member name="T:System.Windows.Controls.ScrollContentPresenter">
      <summary>Displays the content of a <see cref="T:System.Windows.Controls.ScrollViewer" /> control.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.CanHorizontallyScroll">
      <summary>Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.</summary>
      <returns>true if scrolling is possible; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.CanVerticallyScroll">
      <summary>Gets or sets a value that indicates whether scrolling on the vertical axis is possible.</summary>
      <returns>true if scrolling is possible; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ExtentHeight">
      <summary>Gets the vertical size of the extent.</summary>
      <returns>The vertical size of the extent.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ExtentWidth">
      <summary>Gets the horizontal size of the extent.</summary>
      <returns>The horizontal size of the extent.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.HorizontalOffset">
      <summary>Gets or sets the distance the content has been scrolled horizontally.</summary>
      <returns>The distance the content has been scrolled horizontally.</returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.LineDown">
      <summary>Scrolls the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> content downward by one line.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.LineLeft">
      <summary>Scrolls the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> content to the left by a predetermined amount.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.LineRight">
      <summary>Scrolls the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> content to the right by a predetermined amount.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.LineUp">
      <summary>Scrolls the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> content upward by one line.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.MakeVisible(System.Windows.UIElement,System.Windows.Rect)">
      <summary>Forces content to scroll until the coordinate space of a visual object is visible.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> that represents the visible region. </returns>
      <param name="visual">A <see cref="T:System.Windows.UIElement" /> that becomes visible.</param>
      <param name="rectangle">The bounding rectangle that identifies the coordinate space to make visible.</param>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.MouseWheelDown">
      <summary>Scrolls down within content after a user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.MouseWheelLeft">
      <summary>Scrolls left within content after a user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.MouseWheelRight">
      <summary>Scrolls right within content after a user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.MouseWheelUp">
      <summary>Scrolls up within content after a user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.PageDown">
      <summary>Scrolls down within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.PageLeft">
      <summary>Scrolls left within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.PageRight">
      <summary>Scrolls right within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.PageUp">
      <summary>Scrolls up within the content by one page.</summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ScrollOwner">
      <summary>Gets or sets the <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.</returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.SetHorizontalOffset(System.Double)">
      <summary>Sets the distance the content has been scrolled horizontally.</summary>
      <param name="offset">The distance the content has been scrolled horizontally.</param>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.SetVerticalOffset(System.Double)">
      <summary>Sets the distance the content has been scrolled vertically.</summary>
      <param name="offset">The distance the content has been scrolled vertically.</param>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.VerticalOffset">
      <summary>Gets or sets the distance the content has been scrolled vertically.</summary>
      <returns>The distance the content has been scrolled vertically.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ViewportHeight">
      <summary>Gets the vertical size of the viewport.</summary>
      <returns>The vertical size of the viewport.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ViewportWidth">
      <summary>Gets the horizontal size of the viewport.</summary>
      <returns>The horizontal size of the viewport.</returns>
    </member>
    <member name="T:System.Windows.Controls.ScrollViewer">
      <summary>Represents a scrollable area that can contain other visible elements. </summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ScrollViewer" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility">
      <summary>Gets a value that indicates whether the horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is visible. </summary>
      <returns>A <see cref="T:System.Windows.Visibility" /> that indicates whether the horizontal scroll bar is visible. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility">
      <summary>Gets a value that indicates whether the vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is visible. </summary>
      <returns>A <see cref="T:System.Windows.Visibility" /> that indicates whether the vertical scroll bar is visible. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ExtentHeight">
      <summary>Gets the vertical size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.</summary>
      <returns>The vertical size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ExtentHeightProperty">
      <summary>Identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ExtentWidth">
      <summary>Gets the horizontal size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.</summary>
      <returns>The horizontal size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ExtentWidthProperty">
      <summary>Identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property from a specified element.</summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property.</returns>
      <param name="element">The element from which the property value is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.GetVerticalScrollBarVisibility(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property from a specified element.</summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property.</returns>
      <param name="element">The element from which the property value is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.HorizontalOffset">
      <summary>Gets a value that contains the horizontal offset of the scrolled content. </summary>
      <returns>The horizontal offset of the scrolled content. The default value is 0.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.HorizontalOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalOffset" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalOffset" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility">
      <summary>Gets or sets a value that indicates whether a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed.</summary>
      <returns>A <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> value that indicates whether a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.InvalidateScrollInfo">
      <summary>Called when the value of properties that describe the size and location of the scroll area change. </summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ScrollViewer" /> control when a new template is applied.</summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ScrollableHeight">
      <summary>Gets a value that represents the vertical size of the area that can be scrolled; the difference between the width of the extent and the width of the viewport.</summary>
      <returns>The vertical size of the area that can be scrolled. This property has no default value.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ScrollableHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableHeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ScrollableWidth">
      <summary>Gets a value that represents the horizontal size of the area that can be scrolled; the difference between the width of the extent and the width of the viewport.. </summary>
      <returns>The horizontal size of the area that can be scrolled. This property has no default value.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ScrollableWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableWidth" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.ScrollToHorizontalOffset(System.Double)">
      <summary>Scrolls the content that is within the <see cref="T:System.Windows.Controls.ScrollViewer" /> to the specified horizontal offset position.</summary>
      <param name="offset">The position that the content scrolls to.</param>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.ScrollToVerticalOffset(System.Double)">
      <summary>Scrolls the content that is within the <see cref="T:System.Windows.Controls.ScrollViewer" /> to the specified vertical offset position.</summary>
      <param name="offset">The position that the content scrolls to.</param>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(System.Windows.DependencyObject,System.Windows.Controls.ScrollBarVisibility)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property to a specified element.</summary>
      <param name="element">The element on which to set the property value.</param>
      <param name="horizontalScrollBarVisibility">The property value to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.SetVerticalScrollBarVisibility(System.Windows.DependencyObject,System.Windows.Controls.ScrollBarVisibility)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property to a specified element.</summary>
      <param name="element">The element on which to set the property value.</param>
      <param name="verticalScrollBarVisibility">The property value to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.VerticalOffset">
      <summary>Gets a value that contains the vertical offset of the scrolled content.</summary>
      <returns>The vertical offset of the scrolled content. The default value is 0.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.VerticalOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalOffset" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalOffset" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility">
      <summary>Gets or sets a value that indicates whether a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed. </summary>
      <returns>A <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> value that indicates whether a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ViewportHeight">
      <summary>Gets a value that contains the vertical size of the viewable content. </summary>
      <returns>The vertical size of the viewable content. This property has no default value.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ViewportHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ViewportWidth">
      <summary>Gets a value that contains the horizontal size of the viewable content.</summary>
      <returns>The horizontal size of the viewable content. The default value is 0.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ViewportWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.SelectionChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Primitives.Selector.SelectionChanged" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.SelectionChangedEventArgs.#ctor(System.Collections.IList,System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.SelectionChangedEventArgs" /> class. </summary>
      <param name="removedItems">The items that were unselected.</param>
      <param name="addedItems">The items that were selected.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="removedItems" /> or <paramref name="addedItems" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.SelectionChangedEventArgs.AddedItems">
      <summary>Gets a list that contains the items that were selected. </summary>
      <returns>The items that were selected in this event.</returns>
    </member>
    <member name="P:System.Windows.Controls.SelectionChangedEventArgs.RemovedItems">
      <summary>Gets a list that contains the items that were unselected. </summary>
      <returns>The items that were unselected in this event.</returns>
    </member>
    <member name="T:System.Windows.Controls.SelectionChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Selector.SelectionChanged" /> event. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.SelectionMode">
      <summary>Defines the selection behavior for a <see cref="T:System.Windows.Controls.ListBox" />. </summary>
    </member>
    <member name="F:System.Windows.Controls.SelectionMode.Single">
      <summary>The user can select only one item at a time. </summary>
    </member>
    <member name="F:System.Windows.Controls.SelectionMode.Multiple">
      <summary>The user can select multiple items without pressing a modifier key.</summary>
    </member>
    <member name="F:System.Windows.Controls.SelectionMode.Extended">
      <summary>The user can select multiple items by pressing a modifier key.</summary>
    </member>
    <member name="T:System.Windows.Controls.Slider">
      <summary>Represents a control that lets the user select from a range of values by moving a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control along a track.</summary>
    </member>
    <member name="M:System.Windows.Controls.Slider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Slider" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Slider.IsDirectionReversed">
      <summary>Gets or sets a value that indicates the direction of increasing value. </summary>
      <returns>true if the direction of increasing value is to the left for a horizontal slider or down for a vertical slider; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Slider.IsDirectionReversedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Slider.IsDirectionReversed" /> dependency property.</summary>
    </member>
    <member name="P:System.Windows.Controls.Slider.IsFocused">
      <summary>Gets a value indicating whether the slider control has focus.</summary>
      <returns>true if the slider control has focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Slider.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Slider.IsFocused" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Slider.IsFocused" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Slider" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" /> object for use by the automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" /> object for use by the slider control.</returns>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMaximumChanged(System.Double,System.Double)">
      <summary>Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property changes.</summary>
      <param name="oldMaximum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.</param>
      <param name="newMaximum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMinimumChanged(System.Double,System.Double)">
      <summary>Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property changes.</summary>
      <param name="oldMinimum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.</param>
      <param name="newMinimum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnValueChanged(System.Double,System.Double)">
      <summary>Updates the current position of the <see cref="T:System.Windows.Controls.Slider" /> when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property changes.</summary>
      <param name="oldValue">The old <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Slider" />.</param>
      <param name="newValue">The new <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Slider" />.</param>
    </member>
    <member name="P:System.Windows.Controls.Slider.Orientation">
      <summary>Gets or sets the orientation of a <see cref="T:System.Windows.Controls.Slider" />. </summary>
      <returns>One of the <see cref="T:System.Windows.Controls.Orientation" /> values. The default is <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Slider.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Slider.Orientation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Slider.Orientation" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.StackPanel">
      <summary>Arranges child elements into a single line that can be oriented horizontally or vertically. </summary>
    </member>
    <member name="M:System.Windows.Controls.StackPanel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.StackPanel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.StackPanel.ArrangeOverride(System.Windows.Size)">
      <summary>Positions child elements and determines a size for the derived class. </summary>
      <returns>The actual size used.</returns>
      <param name="arrangeSize">The final area within the parent that this element should use to arrange itself and its children.</param>
    </member>
    <member name="M:System.Windows.Controls.StackPanel.MeasureOverride(System.Windows.Size)">
      <summary>Measures the size in layout required for child elements and determines a size for the derived class. </summary>
      <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
      <param name="constraint">The available size that this element can give to child elements.</param>
    </member>
    <member name="P:System.Windows.Controls.StackPanel.Orientation">
      <summary>Gets or sets the dimension by which child elements are stacked.  </summary>
      <returns>One of the enumeration values that specifies the orientation of child elements. The default is <see cref="F:System.Windows.Controls.Orientation.Vertical" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.StackPanel.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.StackPanel.Orientation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.StackPanel.Orientation" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.TextBlock">
      <summary>Provides a lightweight control for displaying small amounts of flow content.</summary>
    </member>
    <member name="M:System.Windows.Controls.TextBlock.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.TextBlock" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontFamily">
      <summary>Gets or sets the preferred top-level font family for the text content in this element. </summary>
      <returns>A <see cref="T:System.Windows.Media.FontFamily" /> object that specifies the preferred font family, or a primary preferred font family with one or more fallback font families. For information about defaults, see the <see cref="T:System.Windows.Media.FontFamily" /> class topic.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontFamilyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontFamily" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontFamily" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontSize">
      <summary>Gets or sets the font size for the text content in this element. </summary>
      <returns>A non-negative value that specifies the font size, measured in pixels. The default is 11.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontSize" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontSource">
      <summary>Gets or sets the font source that is applied to the text for rendering content.</summary>
      <returns>The font source that is used to render content in the text box.  The default is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontStretch">
      <summary>Gets or sets the font stretch for the text content in this element. </summary>
      <returns>The requested font stretch, which is a <see cref="T:System.Windows.FontStretch" /> that is obtained from one of the <see cref="T:System.Windows.FontStretches" /> property values. The default is <see cref="P:System.Windows.FontStretches.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontStretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontStretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontStretch" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontStyle">
      <summary>Gets or sets the font style for the content in this element. </summary>
      <returns>The requested font style, which is a <see cref="T:System.Windows.FontStyle" /> that is obtained from one of the <see cref="T:System.Windows.FontStyles" /> property values. The default is <see cref="P:System.Windows.FontStyles.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontWeight">
      <summary>Gets or sets the top-level font weight for the <see cref="T:System.Windows.Controls.TextBlock" />.</summary>
      <returns>The requested font weight, which is a <see cref="T:System.Windows.FontWeight" /> that is obtained from one of the <see cref="T:System.Windows.FontWeights" /> property values. The default is <see cref="P:System.Windows.FontWeights.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontWeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontWeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontWeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Foreground">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> to apply to the text contents of the <see cref="T:System.Windows.Controls.TextBlock" />. </summary>
      <returns>The brush used to apply to the text contents. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of <see cref="P:System.Windows.Media.Colors.Black" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.ForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.Foreground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.Foreground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Inlines">
      <summary>Gets the collection of inline text elements within a <see cref="T:System.Windows.Controls.TextBlock" />.</summary>
      <returns>A collection that holds all inline text elements from the <see cref="T:System.Windows.Controls.TextBlock" />.The default is an empty collection.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.LineHeight">
      <summary>Gets or sets the height of each line of content. </summary>
      <returns>The height of each line in pixels. A value of <see cref="F:System.Double.NaN" /> (equivalent to an attribute value of "Auto") indicates that the line height is determined automatically from the current font characteristics. The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> is set to a non-positive value.</exception>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.LineHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.LineStackingStrategy">
      <summary>Gets or sets a value that indicates how a line box is determined for each line of text in the <see cref="T:System.Windows.Controls.TextBlock" />. </summary>
      <returns>A value that indicates how a line box is determined for each line of text in the <see cref="T:System.Windows.Controls.TextBlock" />. The default is <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.LineStackingStrategyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.LineStackingStrategy" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.LineStackingStrategy" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Padding">
      <summary>Gets or sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a <see cref="T:System.Windows.Controls.TextBlock" />.</summary>
      <returns>A <see cref="T:System.Windows.Thickness" /> structure that specifies the amount of padding to apply.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.PaddingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.Padding" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.Padding" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Text">
      <summary>Gets or sets the text contents of a <see cref="T:System.Windows.Controls.TextBlock" />. </summary>
      <returns>A string that specifies the text contents of this <see cref="T:System.Windows.Controls.TextBlock" />. The default is an empty string.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.TextAlignment">
      <summary>Gets or sets a value that indicates the horizontal alignment of text content. </summary>
      <returns>The text alignment. The default is <see cref="F:System.Windows.TextAlignment.Left" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.TextAlignment" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.TextAlignment" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.TextDecorations">
      <summary>Gets or sets a value that specifies the text decorations that are applied to the content in a <see cref="T:System.Windows.Controls.TextBlock" /> element. </summary>
      <returns>A <see cref="T:System.Windows.TextDecorationCollection" />, or null if no text decorations are applied.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextDecorationsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.TextDecorations" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.TextDecorations" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.Text" /> dependency property.</summary>
      <returns>The identifier of the <see cref="P:System.Windows.Controls.TextBlock.Text" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.TextWrapping">
      <summary>Gets or sets how the <see cref="T:System.Windows.Controls.TextBlock" /> wraps text.</summary>
      <returns>A value that indicates how the <see cref="T:System.Windows.Controls.TextBlock" /> wraps text. The default is <see cref="F:System.Windows.TextWrapping.NoWrap" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextWrappingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.TextWrapping" /> dependency property. </summary>
      <returns>The identifier of the <see cref="P:System.Windows.Controls.TextBlock.TextWrapping" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.TextBox">
      <summary>Represents a control that can be used to display single-format, multi-line text.</summary>
    </member>
    <member name="M:System.Windows.Controls.TextBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.TextBox" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.TextBox.AcceptsReturn">
      <summary>Gets or sets the value that determines whether the text box allows and displays the newline or return characters.</summary>
      <returns>true if the text box allows newline characters; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.AcceptsReturnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.AcceptsReturn" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.AcceptsReturn" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.CaretBrush">
      <summary>Gets or sets the brush that is used to render the vertical bar that indicates the insertion point.</summary>
      <returns>A brush that is used to render the vertical bar that indicates the insertion point.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.CaretBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.CaretBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.CaretBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.FontSource">
      <summary>Gets or sets the font source that is applied to the <see cref="T:System.Windows.Controls.TextBox" /> for rendering content.</summary>
      <returns>The font source used to render content in the text box. The default is null.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value set is not a valid source.</exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.HorizontalScrollBarVisibility">
      <summary>Gets or sets the visibility of the horizontal scroll bar.</summary>
      <returns>The visibility of the horizontal scroll bar. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.IsReadOnly">
      <summary>Gets or sets the value that determines if the user can change the text in the text box.</summary>
      <returns>true if the text box is read-only; otherwise, false.  The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.IsReadOnly" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.IsReadOnly" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.MaxLength">
      <summary>Gets or sets the value that determines the maximum number of characters allowed for user input.</summary>
      <returns>The maximum number of characters allowed for user input.  The default is 0.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value set is less than 0.</exception>
      <exception cref="T:System.ArgumentNullException">The value set is null.</exception>
    </member>
    <member name="F:System.Windows.Controls.TextBox.MaxLengthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.MaxLength" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.MaxLength" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.TextBox" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.GotFocus" /> event occurs</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Called when <see cref="E:System.Windows.UIElement.KeyDown" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.KeyUp" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.LostFocus" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.MouseEnter" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.MouseLeave" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event occurs.</summary>
      <param name="e">The data for the event. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event occurs.</summary>
      <param name="e">The data for the event. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.MouseMove" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.Select(System.Int32,System.Int32)">
      <summary>Selects a range of text in the text box.</summary>
      <param name="start">The zero-based index of the first character in the selection.</param>
      <param name="length">The length of the selection, in characters.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="start" /> or <paramref name="length" /> value is negative.</exception>
    </member>
    <member name="M:System.Windows.Controls.TextBox.SelectAll">
      <summary>Selects the entire contents of the text box.</summary>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectedText">
      <summary>Gets or sets the content of the current selection in the text box.</summary>
      <returns>The currently selected text in the text box.  If no text is selected, the value is <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">The value is set to null.</exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionBackground">
      <summary>Gets or sets the brush that fills the background of the selected text.</summary>
      <returns>The brush that fills the background of the selected text.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.SelectionBackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.SelectionBackground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.SelectionBackground" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.TextBox.SelectionChanged">
      <summary>Occurs when the text selection has changed.</summary>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionForeground">
      <summary>Gets or sets the brush used for the selected text in the text box.</summary>
      <returns>The brush used for the selected text in the text box.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.SelectionForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.SelectionForeground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.SelectionForeground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionLength">
      <summary>Gets or sets the number of characters in the current selection in the text box.</summary>
      <returns>The number of characters in the current selection in the text box, or 0 if there is no selection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionStart">
      <summary>Gets or sets the starting position of the text selected in the text box.</summary>
      <returns>The starting position of the current selection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.Text">
      <summary>Gets or sets the text contents of the text box.</summary>
      <returns>A string containing the text contents of the text box. The default is an empty string ("").</returns>
      <exception cref="T:System.ArgumentNullException">The value is set to null.</exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.TextAlignment">
      <summary>Gets or sets how the text should be aligned in the text box.</summary>
      <returns>One of the <see cref="T:System.Windows.TextAlignment" /> enumeration values.  The default is <see cref="F:System.Windows.TextAlignment.Left" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.TextAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.TextAlignment" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.TextAlignment" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.TextBox.TextChanged">
      <summary>Occurs when content changes in the text box.</summary>
    </member>
    <member name="F:System.Windows.Controls.TextBox.TextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.Text" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.Text" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.TextWrapping">
      <summary>Gets or sets how line breaking occurs if a line of text extends beyond the available width of the text box.</summary>
      <returns>One of the <see cref="T:System.Windows.TextWrapping" /> values. The default is <see cref="F:System.Windows.TextWrapping.NoWrap" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.TextWrappingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.TextWrapping" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.TextWrapping" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.VerticalScrollBarVisibility">
      <summary>Gets or sets the visibility of the vertical scroll bar.</summary>
      <returns>The visibility of the vertical scroll bar. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.</returns>
    </member>
    <member name="T:System.Windows.Controls.TextChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.TextBox.TextChanged" /> event.</summary>
    </member>
    <member name="T:System.Windows.Controls.TextChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.TextBox.TextChanged" /> event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.ToolTip">
      <summary>Represents a control that creates a pop-up window that displays information for an element in the UI. </summary>
    </member>
    <member name="M:System.Windows.Controls.ToolTip.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ToolTip" /> class. </summary>
    </member>
    <member name="E:System.Windows.Controls.ToolTip.Closed">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.ToolTip" /> is closed and is no longer visible. </summary>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.HorizontalOffset">
      <summary>Gets or sets the horizontal distance between the target origin and the pop-up alignment point. </summary>
      <returns>The horizontal distance between the target origin and the pop-up alignment point. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.HorizontalOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.HorizontalOffset" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.HorizontalOffset" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.IsOpen">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.ToolTip" /> is visible.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.ToolTip" /> is visible; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.IsOpenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.IsOpen" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.IsOpen" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ToolTip.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ToolTip" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ToolTip.OnCreateAutomationPeer">
      <summary>Returns an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>An <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.Controls.ToolTip" /> object.</returns>
    </member>
    <member name="E:System.Windows.Controls.ToolTip.Opened">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.ToolTip" /> becomes visible.</summary>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.Placement">
      <summary>Gets or sets how the <see cref="T:System.Windows.Controls.ToolTip" /> should be positioned in relation to the <see cref="P:System.Windows.Controls.ToolTip.PlacementTarget" />.</summary>
      <returns>One of the <see cref="T:System.Windows.Controls.Primitives.PlacementMode" /> values. The default is <see cref="F:System.Windows.Controls.Primitives.PlacementMode.Mouse" />. </returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.PlacementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.Placement" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.Placement" />dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.PlacementTarget">
      <summary>Gets or sets the visual element or control that the tool tip should be positioned in relation to when opened by the <see cref="T:System.Windows.Controls.ToolTipService" />.</summary>
      <returns>The visual element or control that the tool tip should be positioned in relation to when opened by the <see cref="T:System.Windows.Controls.ToolTipService" />. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.PlacementTargetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.PlacementTarget" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.PlacementTarget" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.VerticalOffset">
      <summary>Gets or sets the vertical distance between the target origin and the pop-up alignment point.</summary>
      <returns>The vertical distance between the target origin and the pop-up alignment point. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.VerticalOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.VerticalOffset" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.VerticalOffset" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ToolTipService">
      <summary>Represents a service that provides static methods to display a tooltip.</summary>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.GetPlacement(System.Windows.DependencyObject)">
      <summary>Gets the relative position of the specified tooltip.</summary>
      <returns>The relative position of the specified tooltip.</returns>
      <param name="element">The tooltip retrieve the position of.</param>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.GetPlacementTarget(System.Windows.DependencyObject)">
      <summary>Gets the visual element that the tooltip is positioned relative to.</summary>
      <returns>The visual element that the tooltip is positioned relative to.</returns>
      <param name="element">The tooltip to retrieve the visual element of.</param>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.GetToolTip(System.Windows.DependencyObject)">
      <summary>Gets the tooltip for an object.</summary>
      <returns>The object's tooltip value.</returns>
      <param name="element">The object from which the property value is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.ToolTipService.Placement">
      <summary>Gets or sets the position of the tooltip in relation to its target visual element.</summary>
      <returns>The position of the tooltip in relation to its target visual element.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTipService.PlacementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.Placement" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.Placement" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ToolTipService.PlacementTarget">
      <summary>Gets or sets the visual element that the tooltip should be positioned in relation to.</summary>
      <returns>The visual element that the tooltip should be displayed in relation to.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTipService.PlacementTargetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.PlacementTarget" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.PlacementTarget" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.SetPlacement(System.Windows.DependencyObject,System.Windows.Controls.Primitives.PlacementMode)">
      <summary>Sets the position of the specified <see cref="P:System.Windows.Controls.ToolTipService.ToolTip" /> using the specified placement mode.</summary>
      <param name="element">The tooltip to set the position of.</param>
      <param name="value">One of the <see cref="T:System.Windows.Controls.Primitives.PlacementMode" /> values that specify where the tooltip should appear relative to the control that is the placement target. </param>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.SetPlacementTarget(System.Windows.DependencyObject,System.Windows.UIElement)">
      <summary>Sets the position of the specified <see cref="P:System.Windows.Controls.ToolTipService.ToolTip" /> relative to the specified value element.</summary>
      <param name="element">The tooltip to set the position of.</param>
      <param name="value">The visual element to set the tooltip for.</param>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.SetToolTip(System.Windows.DependencyObject,System.Object)">
      <summary>Sets the tooltip for an object.</summary>
      <param name="element">The object to which the attached property is written.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.ToolTipService.ToolTip">
      <summary>Gets or sets a tooltip to be attached to a control.</summary>
      <returns>The tooltip to display for a control.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTipService.ToolTipProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTipService.ToolTip" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTipService.ToolTip" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.UIElementCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.UIElement" /> objects.</summary>
    </member>
    <member name="T:System.Windows.Controls.UserControl">
      <summary>Provides the base class for defining a new control that encapsulates related existing controls and provides its own logic.</summary>
    </member>
    <member name="M:System.Windows.Controls.UserControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.UserControl" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.UserControl.Content">
      <summary>Gets or sets the content that is contained within a user control.</summary>
      <returns>The content of the user control.</returns>
    </member>
    <member name="F:System.Windows.Controls.UserControl.ContentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.UserControl.Content" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.UserControl.Content" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Validation">
      <summary>Provides methods and attached properties that support data validation and govern the visual state of the control.</summary>
    </member>
    <member name="P:System.Windows.Controls.Validation.Errors">
      <summary>Gets a collection of <see cref="T:System.Windows.Controls.ValidationError" /> objects associated with the binding target element. </summary>
      <returns>A collection of <see cref="T:System.Windows.Controls.ValidationError" /> objects associated with the binding target element. </returns>
    </member>
    <member name="F:System.Windows.Controls.Validation.ErrorsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Validation.Errors" /> dependency property.</summary>
    </member>
    <member name="M:System.Windows.Controls.Validation.GetErrors(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Validation.Errors" /> attached property for the specified element.</summary>
      <returns>A collection of <see cref="T:System.Windows.Controls.ValidationError" /> objects associated with the specified element. </returns>
      <param name="element">The element to retrieve the errors for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Validation.GetHasError(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Validation.HasError" /> attached property for the specified element.</summary>
      <returns>true if any binding on the specified element has a validation error; otherwise, false. </returns>
      <param name="element">The element to check for errors.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.Validation.HasError">
      <summary>Gets a value that indicates whether any binding on the target element has a validation error. </summary>
      <returns>true if any binding on the target element has a validation error; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.Controls.Validation.HasErrorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Validation.HasError" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Controls.ValidationError">
      <summary>Represents a validation error that is generated by the binding engine when an exception occurs during target-to-source updates. </summary>
    </member>
    <member name="P:System.Windows.Controls.ValidationError.ErrorContent">
      <summary>Gets the error message. </summary>
      <returns>The error message. </returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationError.Exception">
      <summary>Gets the exception that caused the validation error.</summary>
      <returns>The exception that caused the validation error.</returns>
    </member>
    <member name="T:System.Windows.Controls.ValidationErrorEventAction">
      <summary>Describes the reason a <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event has occurred.</summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationErrorEventAction.Added">
      <summary>A new <see cref="T:System.Windows.Controls.ValidationError" /> has occurred.</summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationErrorEventAction.Removed">
      <summary>An existing <see cref="T:System.Windows.Controls.ValidationError" /> has been removed.</summary>
    </member>
    <member name="T:System.Windows.Controls.ValidationErrorEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event.</summary>
    </member>
    <member name="P:System.Windows.Controls.ValidationErrorEventArgs.Action">
      <summary>Gets the state of the validation error.</summary>
      <returns>One of the enumeration values that indicates the state of the validation error.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationErrorEventArgs.Error">
      <summary>Gets the validation error that caused the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event.</summary>
      <returns>A <see cref="T:System.Windows.Controls.ValidationError" /> object that contains the exception that caused the validation error.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationErrorEventArgs.Handled">
      <summary>Gets or sets the value that marks the routed event as handled.</summary>
      <returns>true if the event is handled; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Controls.VirtualizationMode">
      <summary>Specifies the method the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> uses to manage virtualizing its child items.</summary>
    </member>
    <member name="F:System.Windows.Controls.VirtualizationMode.Standard">
      <summary>Create and discard the item containers.</summary>
    </member>
    <member name="F:System.Windows.Controls.VirtualizationMode.Recycling">
      <summary>Reuse the item containers.</summary>
    </member>
    <member name="T:System.Windows.Controls.VirtualizingPanel">
      <summary>Provides a framework for <see cref="T:System.Windows.Controls.Panel" /> elements that virtualize their child data collection. This is an abstract class.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.VirtualizingPanel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.AddInternalChild(System.Windows.UIElement)">
      <summary>Adds the specified <see cref="T:System.Windows.UIElement" /> to the <see cref="P:System.Windows.Controls.Panel.Children" /> collection of a <see cref="T:System.Windows.Controls.VirtualizingPanel" /> element.</summary>
      <param name="child">The <see cref="T:System.Windows.UIElement" /> child to add to the collection.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.BringIndexIntoView(System.Int32)">
      <summary>When implemented in a derived class, generates the item at the specified index location and makes it visible.</summary>
      <param name="index">The index position of the item that is generated and made visible.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.InsertInternalChild(System.Int32,System.Windows.UIElement)">
      <summary>Adds the specified <see cref="T:System.Windows.UIElement" /> to the <see cref="P:System.Windows.Controls.Panel.InternalChildren" /> collection of a <see cref="T:System.Windows.Controls.VirtualizingPanel" /> element at the specified index position.</summary>
      <param name="index">The index position within the collection at which the child element is inserted.</param>
      <param name="child">The <see cref="T:System.Windows.UIElement" /> child to add to the collection.</param>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingPanel.ItemContainerGenerator">
      <summary>Gets a value that identifies the <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> for this <see cref="T:System.Windows.Controls.VirtualizingPanel" />.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> for this <see cref="T:System.Windows.Controls.VirtualizingPanel" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.OnClearChildren">
      <summary>Called when the collection of child elements is cleared by the base <see cref="T:System.Windows.Controls.Panel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
      <summary>Called when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> for this <see cref="T:System.Windows.Controls.Panel" /> changes.</summary>
      <param name="sender">The <see cref="T:System.Object" /> that raised the event.</param>
      <param name="args">Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.RemoveInternalChildRange(System.Int32,System.Int32)">
      <summary>Removes child elements from the <see cref="P:System.Windows.Controls.Panel.Children" /> collection.</summary>
      <param name="index">The beginning index position within the collection at which the first child element is removed.</param>
      <param name="range">The total number of child elements to remove from the collection.</param>
    </member>
    <member name="T:System.Windows.Controls.VirtualizingStackPanel">
      <summary>Arranges and virtualizes content on a single line that is oriented either horizontally or vertically.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges the content of a <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> element.</summary>
      <returns>The <see cref="T:System.Windows.Size" /> that represents the arranged size of this <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> element and its child elements.</returns>
      <param name="arrangeSize">The <see cref="T:System.Windows.Size" /> that this element should use to arrange its child elements.</param>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.CanHorizontallyScroll">
      <summary>Gets or sets a value that indicates whether a <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> can scroll in the horizontal dimension.</summary>
      <returns>true if content can scroll in the horizontal dimension; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.CanVerticallyScroll">
      <summary>Gets or sets a value that indicates whether content can scroll in the vertical dimension.</summary>
      <returns>true if content can scroll in the vertical dimension; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.Controls.VirtualizingStackPanel.CleanUpVirtualizedItemEvent">
      <summary>Occurs when an item that is hosted by the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is re-virtualized.</summary>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.ExtentHeight">
      <summary>Gets a value that contains the vertical size of the extent (see remarks).</summary>
      <returns>A <see cref="T:System.Double" /> that represents the vertical size of the extent (see remarks). The returned value is described in Device Independent Pixels. The default is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.ExtentWidth">
      <summary>Gets a value that contains the horizontal size of the extent (see remarks).</summary>
      <returns>A <see cref="T:System.Double" /> that represents the horizontal size of the extent (see remarks). The returned value is described in Device Independent Pixels. The default is 0.0.</returns>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.GetIsVirtualizing(System.Windows.DependencyObject)">
      <summary>Gets a value that determines whether the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is virtualizing its content.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is virtualizing its content; otherwise false.</returns>
      <param name="o">The object being virtualized.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.GetVirtualizationMode(System.Windows.DependencyObject)">
      <summary>Returns the <see cref="T:System.Windows.Controls.VirtualizationMode" /> for the specified object.</summary>
      <returns>One of the enumeration values that specifies whether the object uses container recycling.</returns>
      <param name="element">The object from which the <see cref="T:System.Windows.Controls.VirtualizationMode" /> is read.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.HorizontalOffset">
      <summary>Gets a value that contains the horizontal offset of the scrolled content.</summary>
      <returns>
        <see cref="T:System.Double" /> that represents the horizontal offset of the scrolled content. The returned value is described in Device Independent Pixels. The default is 0.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.VirtualizingStackPanel.IsVirtualizingProperty">
      <summary>Identifies the IsVirtualizing attached property.</summary>
      <returns>The identifier for the IsVirtualizing attached property.</returns>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.LineDown">
      <summary>Scrolls content downward by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.LineLeft">
      <summary>Scrolls content to the left by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.LineRight">
      <summary>Scrolls content to the right by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.LineUp">
      <summary>Scrolls content upward by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MakeVisible(System.Windows.UIElement,System.Windows.Rect)">
      <summary>Scrolls to the specified coordinates and makes that portion of a <see cref="T:System.Windows.UIElement" /> visible.</summary>
      <returns>Rectangular area of the <see cref="T:System.Windows.UIElement" /> now visible.</returns>
      <param name="visual">The <see cref="T:System.Windows.UIElement" /> that becomes visible.</param>
      <param name="rectangle">A <see cref="T:System.Windows.Rect" /> that represents the coordinate space within a <see cref="T:System.Windows.UIElement" />.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MeasureOverride(System.Windows.Size)">
      <summary>Measures the child elements of a <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.VirtualizingStackPanel.ArrangeOverride(System.Windows.Size)" /> pass.</summary>
      <returns>The <see cref="T:System.Windows.Size" /> that represents the desired size of the element.</returns>
      <param name="constraint">An upper limit <see cref="T:System.Windows.Size" /> that should not be exceeded.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MouseWheelDown">
      <summary>Scrolls content logically downward in response to a downward click of the mouse wheel button</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MouseWheelLeft">
      <summary>Scrolls content logically to the left in response to a left click of the mouse wheel button.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MouseWheelRight">
      <summary>Scrolls content logically to the right in response to a right click of the mouse wheel button.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MouseWheelUp">
      <summary>Scrolls content logically upward in response to an upward click of the mouse wheel button.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.OnCleanUpVirtualizedItem(System.Windows.Controls.CleanUpVirtualizedItemEventArgs)">
      <summary>Called when an item that is hosted by the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is re-virtualized.</summary>
      <param name="e">Data about the event.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.OnClearChildren">
      <summary>Called when the collection of child elements is cleared by the base <see cref="T:System.Windows.Controls.Panel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
      <summary>Called when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> for this <see cref="T:System.Windows.Controls.Panel" /> changes.</summary>
      <param name="sender">The <see cref="T:System.Object" /> that raised the event.</param>
      <param name="args">Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</param>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.Orientation">
      <summary>Gets or sets a value that describes the horizontal or vertical orientation of stacked content.</summary>
      <returns>The <see cref="T:System.Windows.Controls.Orientation" /> of child content. The default is <see cref="F:System.Windows.Controls.Orientation.Vertical" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.VirtualizingStackPanel.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.Orientation" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.Orientation" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.PageDown">
      <summary>Scrolls content downward by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.PageLeft">
      <summary>Scrolls content to the left by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.PageRight">
      <summary>Scrolls content to the right by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.PageUp">
      <summary>Scrolls content upward by one page.</summary>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.ScrollOwner">
      <summary>Gets or sets a value that identifies the container that controls scrolling behavior in this <see cref="T:System.Windows.Controls.VirtualizingStackPanel" />.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ScrollViewer" /> that owns scrolling for this <see cref="T:System.Windows.Controls.VirtualizingStackPanel" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.SetHorizontalOffset(System.Double)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.HorizontalOffset" /> property.</summary>
      <param name="offset">The value of the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.HorizontalOffset" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.SetVerticalOffset(System.Double)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.VerticalOffset" /> property.</summary>
      <param name="offset">The value of the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.VerticalOffset" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.SetVirtualizationMode(System.Windows.DependencyObject,System.Windows.Controls.VirtualizationMode)">
      <summary>Sets the <see cref="T:System.Windows.Controls.VirtualizationMode" /> on the specified object.</summary>
      <param name="element">The element on which to set the <see cref="T:System.Windows.Controls.VirtualizationMode" />.</param>
      <param name="value">One of the enumeration values that specifies whether <paramref name="element" /> uses container recycling.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.VerticalOffset">
      <summary>Gets a value representing how far down the content is currently scrolled.</summary>
      <returns>
        <see cref="T:System.Double" /> that represents the vertical offset of the scrolled content. The returned value is described in Device Independent Pixels. The default is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.ViewportHeight">
      <summary>Gets a value that contains the vertical size of the viewport (visible area) of the content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the vertical size of the viewport (visible area) of the content. The returned value is described in Device Independent Pixels. The default is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.ViewportWidth">
      <summary>Gets a value that contains the horizontal size of the viewport (visible area) of the content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the vertical size of the viewport (visible area) of the content. The returned value is described in Device Independent Pixels. The default is 0.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.VirtualizingStackPanel.VirtualizationModeProperty">
      <summary>Identifies the VirtualizationMode dependency property.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ButtonBase">
      <summary>Represents the base class for all button controls, such as <see cref="T:System.Windows.Controls.Button" />, <see cref="T:System.Windows.Controls.Primitives.RepeatButton" />, and <see cref="T:System.Windows.Controls.HyperlinkButton" />. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> class. </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ButtonBase.Click">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.Button" /> is clicked. </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode">
      <summary>Gets or sets when the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs.</summary>
      <returns>When the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs. The default value is <see cref="F:System.Windows.Controls.ClickMode.Release" />. </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> dependency property </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.IsFocused">
      <summary>Gets a value that determines whether the button has focus.</summary>
      <returns>true if the control has focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsFocused" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsFocused" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.IsMouseOver">
      <summary>Gets a value indicating whether the mouse pointer is located over this button control.</summary>
      <returns>true to indicate the mouse pointer is over the button control, otherwise false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.IsMouseOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsMouseOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsMouseOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed">
      <summary>Gets a value that indicates whether a <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is currently in a pressed state.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is in a pressed state; otherwise false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnClick">
      <summary>Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Called when the value of the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> property changes.</summary>
      <param name="e">The data for <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event that occurs when the user presses a key while this control has focus.</summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event that occurs when the user releases a key while this control has focus.</summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">The event data for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event that occurs when the mouse enters this control. </summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event that occurs when the mouse leaves an element. </summary>
      <param name="e">The event data for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event that occurs when the left mouse button is pressed while the mouse pointer is over this control.</summary>
      <param name="e">The event data. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event that occurs when the left mouse button is released while the mouse pointer is over this control. </summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseMove" /> event that occurs when the mouse pointer moves while over this element.</summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragCompleted" /> event that occurs when a user completes a drag operation with the mouse of a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DragCompletedEventArgs.#ctor(System.Double,System.Double,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DragCompletedEventArgs" /> class. </summary>
      <param name="horizontalChange">The horizontal change in position of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control, resulting from the drag operation.</param>
      <param name="verticalChange">The vertical change in position of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control, resulting from the drag operation.</param>
      <param name="canceled">A value that indicates whether the drag operation was canceled by a call to the <see cref="M:System.Windows.Controls.Primitives.Thumb.CancelDrag" /> method.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragCompletedEventArgs.Canceled">
      <summary>Gets a value that indicates whether the drag operation was canceled.</summary>
      <returns>true if the drag operation was canceled; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragCompletedEventArgs.HorizontalChange">
      <summary>Gets the horizontal distance between the current mouse position and the thumb coordinates.</summary>
      <returns>The horizontal distance between the current mouse position and the thumb coordinates.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragCompletedEventArgs.VerticalChange">
      <summary>Gets the vertical distance between the current mouse position and the thumb coordinates.</summary>
      <returns>The vertical distance between the current mouse position and the thumb coordinates.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragCompleted" /> event of a <see cref="T:System.Windows.Controls.Primitives.Thumb" />. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragDeltaEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event that occurs one or more times when a user drags a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control with the mouse..</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DragDeltaEventArgs.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs" /> class.</summary>
      <param name="horizontalChange">The horizontal change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</param>
      <param name="verticalChange">The vertical change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragDeltaEventArgs.HorizontalChange">
      <summary>Gets the horizontal change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</summary>
      <returns>The horizontal change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragDeltaEventArgs.VerticalChange">
      <summary>Gets the vertical change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</summary>
      <returns>The vertical change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragDeltaEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event of a <see cref="T:System.Windows.Controls.Primitives.Thumb" />. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragStartedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragStarted" /> event that occurs when a user drags a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control with the mouse. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DragStartedEventArgs.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DragStartedEventArgs" /> class.</summary>
      <param name="horizontalOffset">The horizontal distance between the current mouse position and the thumb coordinates.</param>
      <param name="verticalOffset">The vertical distance between the current mouse position and the thumb coordinates.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragStartedEventArgs.HorizontalOffset">
      <summary>Gets the horizontal distance between the current mouse position and the thumb coordinates.</summary>
      <returns>The horizontal distance between the current mouse position and the thumb coordinates.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragStartedEventArgs.VerticalOffset">
      <summary>Gets the vertical distance between the current mouse position and the thumb coordinates.</summary>
      <returns>The vertical distance between the current mouse position and the thumb coordinates.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragStartedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragStarted" /> event of a <see cref="T:System.Windows.Controls.Primitives.Thumb" />. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.GeneratorDirection">
      <summary>Specifies the direction in which item generation will occur. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.GeneratorDirection.Forward">
      <summary>Specifies to generate items in a forward direction.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.GeneratorDirection.Backward">
      <summary>Specifies to generate items in a backward direction.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.GeneratorPosition">
      <summary>
        <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> is used to describe the position of an item that is managed by <see cref="T:System.Windows.Controls.ItemContainerGenerator" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> with the specified index and offset.</summary>
      <param name="index">An <see cref="T:System.Int32" /> index that is relative to the generated (realized) items. -1 is a special value that refers to a fictitious item at the beginning or the end of the items list.</param>
      <param name="offset">An <see cref="T:System.Int32" /> offset that is relative to the ungenerated (unrealized) items near the indexed item. An offset of 0 refers to the indexed element itself, an offset 1 refers to the next ungenerated (unrealized) item, and an offset of -1 refers to the previous item.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.Equals(System.Object)">
      <summary>Compares the specified instance and the current instance of <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> for value equality.</summary>
      <returns>true if <paramref name="o" /> and this instance of <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> have the same values.</returns>
      <param name="o">The <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> instance to compare.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</summary>
      <returns>The hash code for this <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.GeneratorPosition.Index">
      <summary>Gets or sets the <see cref="T:System.Int32" /> index that is relative to the generated (realized) items.</summary>
      <returns>An <see cref="T:System.Int32" /> index that is relative to the generated (realized) items.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.GeneratorPosition.Offset">
      <summary>Gets or sets the <see cref="T:System.Int32" /> offset that is relative to the ungenerated (unrealized) items near the indexed item.</summary>
      <returns>An <see cref="T:System.Int32" /> offset that is relative to the ungenerated (unrealized) items near the indexed item.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.op_Equality(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorPosition)">
      <summary>Compares two <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> objects for value equality.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="gp1">The first instance to compare.</param>
      <param name="gp2">The second instance to compare.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.op_Inequality(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorPosition)">
      <summary>Compares two <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> objects for value inequality.</summary>
      <returns>true if the values are not equal; otherwise, false.</returns>
      <param name="gp1">The first instance to compare.</param>
      <param name="gp2">The second instance to compare.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.ToString">
      <summary>Returns a string representation of this instance of <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</summary>
      <returns>A string representation of this instance of <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.IItemContainerGenerator">
      <summary>An interface that is implemented by classes which are responsible for generating UI content on behalf of a host.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.GenerateNext(System.Boolean@)">
      <summary>Returns the container element used to display the next item, and whether the container element has been newly generated (realized).</summary>
      <returns>A <see cref="T:System.Windows.DependencyObject" /> that is the container element which is used to display the next item.</returns>
      <param name="isNewlyRealized">Is true if the returned <see cref="T:System.Windows.DependencyObject" /> is newly generated (realized); otherwise, false.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.GeneratorPositionFromIndex(System.Int32)">
      <summary>Returns the <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> object that maps to the item at the specified index.</summary>
      <returns>An <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> object that maps to the item at the specified index.</returns>
      <param name="itemIndex">The index of desired item.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.GetItemContainerGeneratorForPanel(System.Windows.Controls.Panel)">
      <summary>Returns the <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> appropriate for use by the specified panel. </summary>
      <returns>An <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> appropriate for use by the specified panel.</returns>
      <param name="panel">The panel for which to return an appropriate <see cref="T:System.Windows.Controls.ItemContainerGenerator" />.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.IndexFromGeneratorPosition(System.Windows.Controls.Primitives.GeneratorPosition)">
      <summary>Returns the index that maps to the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that is the index which maps to the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
      <param name="position">The index of desired item.The <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />  for the desired index.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.PrepareItemContainer(System.Windows.DependencyObject)">
      <summary>Prepares the specified element as the container for the corresponding item.</summary>
      <param name="container">The container to prepare. Normally, <paramref name="container" /> is the result of the previous call to <see cref="M:System.Windows.Controls.Primitives.IItemContainerGenerator.GenerateNext(System.Boolean@)" />.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.Remove(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32)">
      <summary>Removes one or more generated (realized) items.</summary>
      <param name="position">The <see cref="T:System.Int32" /> index of the element to remove. <paramref name="position" /> must refer to a previously generated (realized) item, which means its offset must be zero.</param>
      <param name="count">The <see cref="T:System.Int32" /> number of elements to remove, starting at <paramref name="position" />.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.RemoveAll">
      <summary>Removes all generated (realized) items.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.StartAt(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorDirection,System.Boolean)">
      <summary>Prepares the generator to generate items, starting at the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />, and in the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorDirection" />, and controlling whether or not to start at a generated (realized) item.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that tracks the lifetime of the generation process.</returns>
      <param name="position">A <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />, that specifies the position of the item to start generating items at.</param>
      <param name="direction">Specifies the position of the item to start generating items at.</param>
      <param name="allowStartAtRealizedItem">A <see cref="T:System.Boolean" /> that specifies whether to start at a generated (realized) item.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator">
      <summary>Extends the <see cref="T:System.Windows.Controls.Primitives.IItemContainerGenerator" /> interface to reuse the UI content it generates. Classes that are responsible for generating user interface (UI) content on behalf of a host implement this interface.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator.Recycle(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32)">
      <summary>Disassociates item containers from their data items and saves the containers so they can be reused later for other data items.</summary>
      <param name="position">The zero-based index of the first element to reuse. <paramref name="position" /> must refer to a previously generated (realized) item.</param>
      <param name="count">The number of elements to reuse, starting at <paramref name="position" />.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.IScrollInfo">
      <summary>Represents the main scrollable region inside a <see cref="T:System.Windows.Controls.ScrollViewer" /> control.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.CanHorizontallyScroll">
      <summary>Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.</summary>
      <returns>true if scrolling is possible; otherwise false. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.CanVerticallyScroll">
      <summary>Gets or sets a value that indicates whether scrolling on the vertical axis is possible.</summary>
      <returns>true if scrolling is possible; otherwise false. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.ExtentHeight">
      <summary>Gets the vertical size of the extent.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the vertical size of the extent. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.ExtentWidth">
      <summary>Gets the horizontal size of the extent.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the horizontal size of the extent. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.HorizontalOffset">
      <summary>Gets the horizontal offset of the scrolled content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the horizontal offset. Valid values are between zero and the <see cref="P:System.Windows.Controls.Primitives.IScrollInfo.ExtentWidth" /> minus the <see cref="P:System.Windows.Controls.Primitives.IScrollInfo.ViewportWidth" />. This property has no default value.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.LineDown">
      <summary>Scrolls down within the content by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.LineLeft">
      <summary>Scrolls left within the content by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.LineRight">
      <summary>Scrolls right within the content by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.LineUp">
      <summary>Scrolls up within the content by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.MakeVisible(System.Windows.UIElement,System.Windows.Rect)">
      <summary>Forces content to scroll until the coordinate space of a visual object is visible.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> that is visible.</returns>
      <param name="visual">A <see cref="T:System.Windows.UIElement" /> that becomes visible.</param>
      <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.MouseWheelDown">
      <summary>Scrolls down within the content after the user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.MouseWheelLeft">
      <summary>Scrolls left within the content after the user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.MouseWheelRight">
      <summary>Scrolls right within the content after the user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.MouseWheelUp">
      <summary>Scrolls up within the content after the user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.PageDown">
      <summary>Scrolls down within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.PageLeft">
      <summary>Scrolls left within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.PageRight">
      <summary>Scrolls right within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.PageUp">
      <summary>Scrolls up within the content by one page.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.ScrollOwner">
      <summary>Gets or sets a <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.</summary>
      <returns>A <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior. This property has no default value.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.SetHorizontalOffset(System.Double)">
      <summary>Sets the amount of horizontal offset.</summary>
      <param name="offset">The amount that content is horizontally offset from the containing viewport.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.SetVerticalOffset(System.Double)">
      <summary>Sets the amount of vertical offset.</summary>
      <param name="offset">The amount that content is vertically offset from the containing viewport.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.VerticalOffset">
      <summary>Gets the vertical offset of the scrolled content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the vertical offset of the scrolled content. Valid values are between zero and the <see cref="P:System.Windows.Controls.Primitives.IScrollInfo.ExtentHeight" /> minus the <see cref="P:System.Windows.Controls.Primitives.IScrollInfo.ViewportHeight" />. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.ViewportHeight">
      <summary>Gets the vertical size of the viewport for this content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the vertical size of the viewport for this content. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.ViewportWidth">
      <summary>Gets the horizontal size of the viewport for this content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the horizontal size of the viewport for this content. This property has no default value.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ItemsChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ItemsChangedEventArgs.Action">
      <summary>Gets the action that occurred on the items collection.</summary>
      <returns>Returns the action that occurred.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ItemsChangedEventArgs.ItemCount">
      <summary>Gets the number of items that were involved in the change.</summary>
      <returns>Integer that represents the number of items involved in the change.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ItemsChangedEventArgs.ItemUICount">
      <summary>Gets the number of UI elements involved in the change.</summary>
      <returns>Integer that represents the number of UI elements involved in the change.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ItemsChangedEventArgs.OldPosition">
      <summary>Gets the position in the collection before the change occurred.</summary>
      <returns>Returns a <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ItemsChangedEventArgs.Position">
      <summary>Gets the position in the collection where the change occurred.</summary>
      <returns>Returns a <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ItemsChangedEventHandler">
      <summary>Represents the method that will handle the  <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.LayoutInformation">
      <summary>Defines methods that provide additional information about the layout of an element.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutClip(System.Windows.FrameworkElement)">
      <summary>Returns the visible region of the specified element.</summary>
      <returns>The visible region of the clipped element, or null if the element was not clipped during layout.</returns>
      <param name="element">The element whose layout clip geometry is desired.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutExceptionElement(System.Windows.Threading.Dispatcher)">
      <summary>Returns the element that was being processed by the layout system at the moment of an unhandled exception.</summary>
      <returns>The element being processed at the time of an unhandled exception.</returns>
      <param name="dispatcher">The <see cref="T:System.Windows.Threading.Dispatcher" /> object that defines the scope of the operation.  There is one dispatcher per layout engine instance.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot(System.Windows.FrameworkElement)">
      <summary>Returns the layout slot, or bounding box, that contains the specified element.</summary>
      <returns>The area assigned to the element for layout.</returns>
      <param name="element">The element whose layout slot is desired.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.PlacementMode">
      <summary>Specifies the preferred location for positioning a <see cref="T:System.Windows.Controls.ToolTip" /> relative to a visual element.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.PlacementMode.Bottom">
      <summary>Indicates that the preferred location of the tooltip is at the bottom of the target element. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.PlacementMode.Right">
      <summary>Indicates that the preferred location of the tooltip is at the right of the target element.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.PlacementMode.Mouse">
      <summary>Indicates that the preferred location of the tooltip is at the mouse pointer location.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.PlacementMode.Left">
      <summary>Indicates that the preferred location of the tooltip is at the left of the target element.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.PlacementMode.Top">
      <summary>Indicates that the preferred location of the tooltip is at the top of the target element.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.Popup">
      <summary>Displays content on top of existing Silverlight content, within the bounds of the Silverlight control.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Popup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.Popup" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.Child">
      <summary>Gets or sets the content to be hosted in the popup. </summary>
      <returns>The content to be hosted in the popup.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.ChildProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.Child" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.Child" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Popup.Closed">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> property is set to false.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset">
      <summary>Gets or sets the distance between the left side of the Silverlight control and the left side of the popup. </summary>
      <returns>The distance, in pixels, between the left side of the Silverlight control and the left side of the popup.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.IsOpen">
      <summary>Gets or sets whether the popup is currently displaying on the screen.</summary>
      <returns>true if the popup is currently displaying; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.IsOpenProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Popup.Opened">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> property is set to true.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.VerticalOffset">
      <summary>Gets or sets the distance between the top of the Silverlight control and the top of the popup. </summary>
      <returns>The distance, in pixels, from the top of the Silverlight control and the top of the popup.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.RangeBase">
      <summary>Represents an element that has a value within a specific range, such as the <see cref="T:System.Windows.Controls.ProgressBar" />, <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, and <see cref="T:System.Windows.Controls.Slider" /> controls.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.LargeChange">
      <summary>Gets or sets a value to be added to or subtracted from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> control. </summary>
      <returns>
        <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to add to or subtract from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> element. The default is 1. </returns>
      <exception cref="T:System.ArgumentException">The new value is <see cref="F:System.Double.NaN" />, less than zero, or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.Maximum">
      <summary>Gets or sets the highest possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. </summary>
      <returns>The highest possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. The default is 1.</returns>
      <exception cref="T:System.ArgumentException">The new value is either <see cref="F:System.Double.NaN" /> or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.MaximumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.Minimum">
      <summary>Gets or sets the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. </summary>
      <returns>
        <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">The new value is either <see cref="F:System.Double.NaN" /> or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.MinimumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.OnMaximumChanged(System.Double,System.Double)">
      <summary>Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property changes. </summary>
      <param name="oldMaximum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.</param>
      <param name="newMaximum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.OnMinimumChanged(System.Double,System.Double)">
      <summary>Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property changes. </summary>
      <param name="oldMinimum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.</param>
      <param name="newMinimum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.OnValueChanged(System.Double,System.Double)">
      <summary>Raises the <see cref="E:System.Windows.Controls.Primitives.RangeBase.ValueChanged" /> routed event. </summary>
      <param name="oldValue">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property.</param>
      <param name="newValue">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.SmallChange">
      <summary>Gets or sets a <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to be added to or subtracted from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> control. </summary>
      <returns>
        <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to add to or subtract from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> element. The default is 0.1. </returns>
      <exception cref="T:System.ArgumentException">The new value is <see cref="F:System.Double.NaN" />, less than zero, or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.ToString">
      <summary>Provides a string representation of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> object. </summary>
      <returns>Returns the string representation of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> object.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.Value">
      <summary>Gets or sets the current setting of the range control, which may be coerced. </summary>
      <returns>The current setting of the range control, which may be coerced. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">The new value is either <see cref="F:System.Double.NaN" /> or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.</exception>
    </member>
    <member name="E:System.Windows.Controls.Primitives.RangeBase.ValueChanged">
      <summary>Occurs when the range value changes. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.RepeatButton">
      <summary>Represents a control that raises its <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event repeatedly from the time it is pressed until it is released.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RepeatButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RepeatButton.Delay">
      <summary>Gets or sets the time, in milliseconds, the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> waits when it is pressed before it starts repeating the click action.</summary>
      <returns>The time, in milliseconds, the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> waits when it is pressed before it starts repeating the click action. The default is 250.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Delay" /> is set to a value less than 0.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RepeatButton.DelayProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Delay" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Delay" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RepeatButton.Interval">
      <summary>Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts.</summary>
      <returns>The time, in milliseconds, between repetitions of the click action, as soon as repeating starts. The default is 250.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Interval" /> is set to a value less than 0.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RepeatButton.IntervalProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Interval" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Interval" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RepeatButton.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> control when a new template is applied.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollBar">
      <summary>Represents a control that provides a scroll bar that has a sliding <see cref="T:System.Windows.Controls.Primitives.Thumb" /> whose position corresponds to a value.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ScrollBar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ScrollBar.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> control when a new template is applied.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollBar.Orientation">
      <summary>Gets or sets whether the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is displayed horizontally or vertically. </summary>
      <returns>An <see cref="T:System.Windows.Controls.Orientation" /> enumeration value that defines whether the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is displayed horizontally or vertically. The default is <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollBar.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.Orientation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.Orientation" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ScrollBar.Scroll">
      <summary>Occurs one or more times as content scrolls in a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> when the user moves the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> by using the mouse.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollBar.ViewportSize">
      <summary>Gets or sets the amount of the scrollable content that is currently visible. </summary>
      <returns>The amount of the scrollable content that is currently visible. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.ViewportSize" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.ViewportSize" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ScrollEventArgs.#ctor(System.Windows.Controls.Primitives.ScrollEventType,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ScrollEventArgs" /> class. </summary>
      <param name="scrollEventType">A <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> describing the event.</param>
      <param name="newValue">The new <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollEventArgs.NewValue">
      <summary>Gets the new <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
      <returns>The <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> after the event.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollEventArgs.ScrollEventType">
      <summary>Gets a <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> describing the event.</summary>
      <returns>A <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> describing the event.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event of a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Controls.Primitives.ScrollEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollEventType">
      <summary>Specifies the type of <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event that occurred. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.EndScroll">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> was dragged to a new position and is now no longer being dragged by the user.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.First">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> position of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.LargeDecrement">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the left for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or upward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.LargeIncrement">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the right for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or downward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.Last">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> position of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.SmallDecrement">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the left for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or upward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the right for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or downward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.ThumbPosition">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to a new position because the user selected Scroll Here in the shortcut menu of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.ThumbTrack">
      <summary>The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> was dragged and caused a <see cref="E:System.Windows.UIElement.MouseMove" /> event. A <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event of this <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> may occur more than one time when the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> is dragged in the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.Selector">
      <summary>Represents a control that allows a user to select an item from a collection of items.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Removes any bindings and templates applied to the item container for the specified content.</summary>
      <param name="element">The combo box item used to display the specified content.</param>
      <param name="item">The item content.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.GetIsSelectionActive(System.Windows.DependencyObject)">
      <summary>Gets a value that indicates whether the specified <see cref="T:System.Windows.Controls.Primitives.Selector" /> has the focus.</summary>
      <returns>true to indicate that the <see cref="T:System.Windows.Controls.Primitives.Selector" /> has the focus; otherwise, false. </returns>
      <param name="element">The <see cref="T:System.Windows.Controls.Primitives.Selector" /> to evaluate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItem"></member>
    <member name="F:System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItemProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItem" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItem" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.Selector" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Updates the current selected item when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection has changed.</summary>
      <param name="e">Contains data about changes in the items collection.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Prepares the specified element to display the specified item.</summary>
      <param name="element">The element used to display the specified item.</param>
      <param name="item">The item to display</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Selector.SelectedIndex">
      <summary>Gets or sets the index of the selected item.</summary>
      <returns>The index of the selected item. The default is -1.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Selector.SelectedIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedIndex" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedIndex" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Selector.SelectedItem">
      <summary>Gets or sets the selected item.</summary>
      <returns>The selected item. The default is null. </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Selector.SelectedItemProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem" /> dependency property.</summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Selector.SelectionChanged">
      <summary>Occurs when the currently selected item changes.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.Thumb">
      <summary>Represents a control that can be dragged by the user.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Thumb.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Thumb.CancelDrag">
      <summary>Cancels a drag operation for the <see cref="T:System.Windows.Controls.Primitives.Thumb" />.</summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Thumb.DragCompleted">
      <summary>Occurs when the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control loses mouse capture.</summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Thumb.DragDelta">
      <summary>Occurs one or more times as the mouse pointer is moved when a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control has logical focus and mouse capture. </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Thumb.DragStarted">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control receives logical focus and mouse capture.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Thumb.IsDragging">
      <summary>Gets whether the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control has focus and mouse capture.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control has focus and mouse capture; otherwise false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Thumb.IsDraggingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsDragging" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsDragging" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Thumb.IsFocused">
      <summary>Gets whether the thumb has focus.</summary>
      <returns>true to indicate the thumb has focus; otherwise false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Thumb.IsFocusedProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsFocused" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsFocused" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Thumb.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control when a new template is applied.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ToggleButton">
      <summary>Base class for controls that can switch states, such as <see cref="T:System.Windows.Controls.CheckBox" /> and <see cref="T:System.Windows.Controls.RadioButton" />. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> class. </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ToggleButton.Checked">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is checked.</summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ToggleButton.Indeterminate">
      <summary>Occurs when the state of a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is switched to the indeterminate state.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked">
      <summary>Gets or sets whether the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is checked.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is checked; false if the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is unchecked; otherwise null. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ToggleButton.IsThreeState">
      <summary>Gets or sets whether the control supports two or three states.</summary>
      <returns>true if the control supports three states; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ToggleButton.IsThreeStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsThreeState" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsThreeState" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnClick">
      <summary>Called when the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is clicked by the mouse or the keyboard. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnContentChanged(System.Object,System.Object)">
      <summary>Called when the <see cref="T:System.Windows.Controls.ContentControl" /> property changes.</summary>
      <param name="oldContent">The content to be replaced.</param>
      <param name="newContent">The new content to display.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnToggle">
      <summary>Called by the <see cref="M:System.Windows.Controls.Primitives.ToggleButton.OnClick" /> method to implement toggle behavior. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.ToString">
      <summary>Returns the string representation of a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> object. </summary>
      <returns>String representation of a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> object.</returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ToggleButton.Unchecked">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is unchecked.</summary>
    </member>
    <member name="T:System.Windows.Data.Binding">
      <summary>Defines a binding that connects the properties of binding targets and data sources.</summary>
    </member>
    <member name="M:System.Windows.Data.Binding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.Binding" /> class.</summary>
    </member>
    <member name="M:System.Windows.Data.Binding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.Binding" /> class with an initial property path for the data source.</summary>
      <param name="path">The initial property path for the source of the binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.BindsDirectlyToSource">
      <summary>Gets or sets a value that indicates whether the binding ignores any <see cref="T:System.ComponentModel.ICollectionView" /> settings on the data source. </summary>
      <returns>true if the binding binds directly to the data source; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Data.Binding.Converter">
      <summary>Gets or sets the converter object that is called by the binding engine to modify the data as it is passed between the source and target, or vice versa.</summary>
      <returns>The <see cref="T:System.Windows.Data.IValueConverter" /> object that modifies the data.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.ConverterCulture">
      <summary>Gets or sets the culture to be used by the <see cref="P:System.Windows.Data.Binding.Converter" />.</summary>
      <returns>The <see cref="T:System.Globalization.CultureInfo" /> used by the <see cref="P:System.Windows.Data.Binding.Converter" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.ConverterParameter">
      <summary>Gets or sets a parameter that can be used in the <see cref="P:System.Windows.Data.Binding.Converter" /> logic.</summary>
      <returns>A parameter to be passed to the <see cref="P:System.Windows.Data.Binding.Converter" />.  This can be used in the conversion logic.  The default is null.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.ElementName">
      <summary>Gets or sets the name of the element to use as the binding source object.</summary>
      <returns>The value of the <see cref="P:System.Windows.FrameworkElement.Name" /> property or x:Name Attribute of the element to bind to. The default is null.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.-or-The <see cref="P:System.Windows.Data.Binding.Source" /> or <see cref="P:System.Windows.Data.Binding.RelativeSource" /> property has already been set.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.Mode">
      <summary>Gets or sets a value that indicates the direction of the data flow in the binding.</summary>
      <returns>One of the <see cref="T:System.Windows.Data.BindingMode" /> values. The default is <see cref="F:System.Windows.Data.BindingMode.OneWay" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.NotifyOnValidationError">
      <summary>Gets or sets a value that indicates whether the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event is raised on validation errors.</summary>
      <returns>true if the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event is raised; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.Path">
      <summary>Gets or sets the path to the binding source property.</summary>
      <returns>The property path for the source of the binding. See <see cref="T:System.Windows.PropertyPath" /> or Property Path Syntax.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.RelativeSource">
      <summary>Gets or sets the binding source by specifying its location relative to the position of the binding target.</summary>
      <returns>The relative location of the binding source to use. The default is null.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.-or-The <see cref="P:System.Windows.Data.Binding.ElementName" /> or <see cref="P:System.Windows.Data.Binding.Source" /> property has already been set.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.Source">
      <summary>Gets or sets the data source for the binding.</summary>
      <returns>The source object that contains the data for the binding.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.-or-The <see cref="P:System.Windows.Data.Binding.ElementName" /> or <see cref="P:System.Windows.Data.Binding.RelativeSource" /> property has already been set.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.UpdateSourceTrigger">
      <summary>Gets or sets a value that determines the timing of binding source updates for two-way bindings.</summary>
      <returns>A value that determines when the binding source is updated. The default is <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />. </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.ValidatesOnExceptions">
      <summary>Gets or sets a value that indicates whether the binding engine will report exception validation errors.</summary>
      <returns>true if the binding engine will report exception validation errors; otherwise, false.  The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="T:System.Windows.Data.BindingBase">
      <summary>Provides an abstract base class for the <see cref="T:System.Windows.Data.Binding" /> class. </summary>
    </member>
    <member name="M:System.Windows.Data.BindingBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.BindingBase" /> class. </summary>
    </member>
    <member name="T:System.Windows.Data.BindingExpression">
      <summary>Contains information about a single instance of a <see cref="T:System.Windows.Data.Binding" />. </summary>
    </member>
    <member name="P:System.Windows.Data.BindingExpression.DataItem">
      <summary>Gets the binding source object that this <see cref="T:System.Windows.Data.BindingExpression" /> uses.</summary>
      <returns>The binding source object that this <see cref="T:System.Windows.Data.BindingExpression" /> uses.</returns>
    </member>
    <member name="P:System.Windows.Data.BindingExpression.ParentBinding">
      <summary>Returns the <see cref="T:System.Windows.Data.Binding" /> object of the current <see cref="T:System.Windows.Data.BindingExpression" />.</summary>
      <returns>The <see cref="T:System.Windows.Data.Binding" /> object of the current <see cref="T:System.Windows.Data.BindingExpression" />.</returns>
    </member>
    <member name="M:System.Windows.Data.BindingExpression.UpdateSource">
      <summary>Sends the current binding target value to the binding source property in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.BindingExpression" /> is detached from the binding target. </exception>
    </member>
    <member name="T:System.Windows.Data.BindingExpressionBase">
      <summary>Represents the base class for the <see cref="T:System.Windows.Data.BindingExpression" /> class. </summary>
    </member>
    <member name="T:System.Windows.Data.BindingMode">
      <summary>Describes how the data propagates in a binding.</summary>
    </member>
    <member name="F:System.Windows.Data.BindingMode.OneWay">
      <summary>Updates the target property when the binding is created.  Changes to the source object can also propagate to the target.</summary>
    </member>
    <member name="F:System.Windows.Data.BindingMode.OneTime">
      <summary>Updates the target property when the binding is created.</summary>
    </member>
    <member name="F:System.Windows.Data.BindingMode.TwoWay">
      <summary>Updates either the target or the source object when either changes.  When the binding is created, the target property is updated from the source.</summary>
    </member>
    <member name="T:System.Windows.Data.BindingOperations">
      <summary>Provides the static <see cref="M:System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" /> method. </summary>
    </member>
    <member name="M:System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
      <summary>Creates and associates a new <see cref="T:System.Windows.Data.BindingExpressionBase" /> with the specified binding target property.</summary>
      <returns>An object that contains information about the binding. </returns>
      <param name="target">The target to set the binding to. </param>
      <param name="dp">The property on the target to bind. </param>
      <param name="binding">The binding to assign to the target property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.-or-<paramref name="dp" /> is null.-or-<paramref name="binding" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not of type <see cref="T:System.Windows.FrameworkElement" /> or <see cref="T:System.Windows.Data.CollectionViewSource" />.-or-<paramref name="target" /> is of type <see cref="T:System.Windows.Data.CollectionViewSource" /> and <paramref name="binding" /> has a <see cref="P:System.Windows.Data.Binding.Source" /> value of null.-or-<paramref name="binding" /> has a <see cref="P:System.Windows.Data.Binding.Mode" /> value of <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> and an empty <see cref="P:System.Windows.Data.Binding.Path" /> value. </exception>
    </member>
    <member name="T:System.Windows.Data.CollectionViewSource">
      <summary>The XAML proxy of a collection view class.</summary>
    </member>
    <member name="M:System.Windows.Data.CollectionViewSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.CollectionViewSource" /> class.</summary>
    </member>
    <member name="P:System.Windows.Data.CollectionViewSource.Culture">
      <summary>Gets or sets the cultural information for any operations of the view that might differ by culture, such as sorting.</summary>
      <returns>The culture to use during view operations.</returns>
    </member>
    <member name="M:System.Windows.Data.CollectionViewSource.DeferRefresh">
      <summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that you can use to dispose of the calling object.</returns>
    </member>
    <member name="E:System.Windows.Data.CollectionViewSource.Filter">
      <summary>Provides filtering logic.</summary>
    </member>
    <member name="P:System.Windows.Data.CollectionViewSource.GroupDescriptions">
      <summary>This property is not implemented.</summary>
      <returns>This property is not implemented. Accessing it will cause a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Windows.Data.CollectionViewSource" /> class does not support grouping.</exception>
    </member>
    <member name="M:System.Windows.Data.CollectionViewSource.OnCollectionViewTypeChanged(System.Type,System.Type)">
      <summary>Invoked when the collection view type changes.</summary>
      <param name="oldCollectionViewType">The old collection view type.</param>
      <param name="newCollectionViewType">The new collection view type.</param>
    </member>
    <member name="M:System.Windows.Data.CollectionViewSource.OnSourceChanged(System.Object,System.Object)">
      <summary>Invoked when the <see cref="P:System.Windows.Data.CollectionViewSource.Source" /> property changes.</summary>
      <param name="oldSource">The old value of the <see cref="P:System.Windows.Data.CollectionViewSource.Source" /> property.</param>
      <param name="newSource">The new value of the <see cref="P:System.Windows.Data.CollectionViewSource.Source" /> property.</param>
    </member>
    <member name="P:System.Windows.Data.CollectionViewSource.SortDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describe how the items in the collection are sorted in the view.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describe how the items in the collection are sorted in the view.</returns>
    </member>
    <member name="P:System.Windows.Data.CollectionViewSource.Source">
      <summary>Gets or sets the collection object from which to create this view.</summary>
      <returns>The collection object from which to create this view. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Data.CollectionViewSource.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Data.CollectionViewSource.Source" /> dependency property.</summary>
    </member>
    <member name="P:System.Windows.Data.CollectionViewSource.View">
      <summary>Gets the view object that is currently associated with this instance of <see cref="T:System.Windows.Data.CollectionViewSource" />.</summary>
      <returns>The view object that is currently associated with this instance of <see cref="T:System.Windows.Data.CollectionViewSource" />.</returns>
    </member>
    <member name="F:System.Windows.Data.CollectionViewSource.ViewProperty">
      <summary>Identifies the <see cref="P:System.Windows.Data.CollectionViewSource.View" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Data.FilterEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Data.CollectionViewSource.Filter" /> event.</summary>
    </member>
    <member name="P:System.Windows.Data.FilterEventArgs.Accepted">
      <summary>Gets or sets a value that indicates whether the item passes the filter criteria.</summary>
      <returns>true if the item passes the filter; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Data.FilterEventArgs.Item">
      <summary>Gets the object that the filter should test.</summary>
      <returns>The object that the filter should test. The default is null.</returns>
    </member>
    <member name="T:System.Windows.Data.FilterEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Data.CollectionViewSource.Filter" /> event.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Data.IValueConverter">
      <summary>Exposes methods that allow modifying the data as it passes through the binding engine.</summary>
    </member>
    <member name="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Modifies the source data before passing it to the target for display in the UI.</summary>
      <returns>The value to be passed to the target dependency property.</returns>
      <param name="value">The source data being passed to the target.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
    </member>
    <member name="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.</summary>
      <returns>The value to be passed to the source object.</returns>
      <param name="value">The target data being passed to the source.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
    </member>
    <member name="T:System.Windows.Data.RelativeSource">
      <summary>Implements a markup extension that describes the location of the binding source relative to the position of the binding target.</summary>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.RelativeSource" /> class by using default relative source mode. </summary>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.#ctor(System.Windows.Data.RelativeSourceMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.RelativeSource" /> class by using the specified relative source mode. </summary>
      <param name="mode">The relative source mode to use for the related binding.</param>
    </member>
    <member name="P:System.Windows.Data.RelativeSource.Mode">
      <summary>Gets or sets a value that describes the location of the binding source relative to the position of the binding target.</summary>
      <returns>A value of the enumeration.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property, the property has already been set to a different value.</exception>
    </member>
    <member name="T:System.Windows.Data.RelativeSourceMode">
      <summary>Defines constants that describe the location of the binding source relative to the position of the binding target.</summary>
    </member>
    <member name="F:System.Windows.Data.RelativeSourceMode.TemplatedParent">
      <summary>Refers to the element to which the template (in which the data-bound element exists) is applied. This is similar to setting a TemplateBinding Markup Extension and is only applicable if the <see cref="T:System.Windows.Data.Binding" /> is within a template.</summary>
    </member>
    <member name="F:System.Windows.Data.RelativeSourceMode.Self">
      <summary>Refers to the element on which you are setting the binding and allows you to bind one property of that element to another property on the same element.</summary>
    </member>
    <member name="T:System.Windows.Data.UpdateSourceTrigger">
      <summary>Defines constants that indicate when a binding source is updated by its binding target in two-way binding. </summary>
    </member>
    <member name="F:System.Windows.Data.UpdateSourceTrigger.Default">
      <summary>The binding source is updated automatically when the binding target value changes.</summary>
    </member>
    <member name="F:System.Windows.Data.UpdateSourceTrigger.Explicit">
      <summary>The binding source is updated only when you call the <see cref="M:System.Windows.Data.BindingExpression.UpdateSource" /> method.</summary>
    </member>
    <member name="T:System.Windows.Documents.FontSource">
      <summary>Represents one or more fonts created from a stream.</summary>
    </member>
    <member name="M:System.Windows.Documents.FontSource.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.FontSource" /> class. </summary>
      <param name="stream">The stream that contains the font source. </param>
    </member>
    <member name="T:System.Windows.Documents.Glyphs">
      <summary>Provides a visual representation of letters, characters, or symbols, in a specific font and style.</summary>
    </member>
    <member name="M:System.Windows.Documents.Glyphs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Glyphs" /> class.</summary>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.Fill">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to render the glyphs.</summary>
      <returns>The brush to use to render the glyphs. The default is null, which is evaluated as <see cref="P:System.Windows.Media.Colors.Transparent" /> for rendering.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FillProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.Fill" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.Fill" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.FontRenderingEmSize">
      <summary>Gets or sets the em size used for rendering the glyphs.</summary>
      <returns>The em size used for rendering. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.FontRenderingEmSize" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.FontRenderingEmSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.FontUri">
      <summary>Gets or sets the location of the font used for rendering the glyphs.</summary>
      <returns>The URI source of the font. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FontUriProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.FontUri" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.FontUri" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.Indices">
      <summary>Gets or sets the glyph indices for the glyphs.</summary>
      <returns>A string that defines glyph indices as well as other glyph specifics in a string mini-language. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.IndicesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.Indices" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.Indices" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.OriginX">
      <summary>Gets or sets the x origin for the glyphs.</summary>
      <returns>The x origin of the <see cref="T:System.Windows.Documents.Glyphs" />, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.OriginXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.OriginX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.OriginX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.OriginY">
      <summary>Gets or sets the y origin for the glyphs.</summary>
      <returns>The y origin of the <see cref="T:System.Windows.Documents.Glyphs" />, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.OriginYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.OriginY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.OriginY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.StyleSimulations">
      <summary>Gets or sets the style simulations applied to the glyphs.</summary>
      <returns>One of the enumeration values that specifies the style simulations to apply to the glyphs. The default is None.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.StyleSimulationsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.StyleSimulations" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.StyleSimulations" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.UnicodeString">
      <summary>Gets or sets the Unicode string to render in glyphs.</summary>
      <returns>A Unicode string with XAML-compatible encoding. The default is an empty string.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.UnicodeStringProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.UnicodeString" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.UnicodeString" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Documents.Inline">
      <summary>Provides a base for inline flow content element behavior.</summary>
    </member>
    <member name="M:System.Windows.Documents.Inline.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Inline" /> class.</summary>
    </member>
    <member name="M:System.Windows.Documents.Inline.FindName(System.String)">
      <summary>Gets an object in the Silverlight object model by referencing the object's x:Name or <see cref="P:System.Windows.Documents.Inline.Name" /> attribute value.</summary>
      <returns>The object that has the specified name, or null if no object is retrieved.</returns>
      <param name="name">The name of the object to retrieve.</param>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontFamily">
      <summary>Gets or sets the preferred top-level font family for the content in this element. </summary>
      <returns>The preferred font family, or a primary preferred font family with one or more fallback font families. See <see cref="T:System.Windows.Media.FontFamily" /> for default information.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontFamilyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Inline.FontFamily" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Inline.FontFamily" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontSize">
      <summary>Gets or sets the font size for the content in this element. </summary>
      <returns>The desired font size in pixels. The default is 11 pixels.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Inline.FontSize" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Inline.FontSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontStretch">
      <summary>Gets or sets the glyph width of the font in a family to select.</summary>
      <returns>One of the <see cref="T:System.Windows.FontStretches" /> property values, specifying the desired font stretch. The default is <see cref="P:System.Windows.FontStretches.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontStretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Inline.FontStretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Inline.FontStretch" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontStyle">
      <summary>Gets or sets the font style for the content in this element.</summary>
      <returns>One of the <see cref="T:System.Windows.FontStyles" /> property values, specifying the font style. The default is <see cref="P:System.Windows.FontStyles.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Inline.FontStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Inline.FontStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontWeight">
      <summary>Gets or sets the top-level font weight to select from the font family for the content in this element.</summary>
      <returns>One of the <see cref="T:System.Windows.FontWeights" /> property values, specifying the font weight. The default is <see cref="P:System.Windows.FontWeights.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontWeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Inline.FontWeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Inline.FontWeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.Foreground">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> to apply to the content in this element. </summary>
      <returns>The brush that is applied to the text contents. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value <see cref="P:System.Windows.Media.Colors.Black" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.ForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Inline.Foreground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Inline.Foreground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.Language">
      <summary>Gets or sets the language of the content within an <see cref="T:System.Windows.Documents.Inline" /> element.</summary>
      <returns>A value of type <see cref="T:System.Windows.Markup.XmlLanguage" />. The default is a <see cref="T:System.Windows.Markup.XmlLanguage" /> value created with the string en-US (<see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> is "en-US").</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.LanguageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Inline.Language" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Inline.Language" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.Name">
      <summary>Gets or sets a unique identification for the object. <see cref="P:System.Windows.Documents.Inline.Name" /> can only be set from initial parsing of XAML.</summary>
      <returns>The unique identifier for the object. This property is read-only for code, but write-only for XAML, due to special parser handling of XAML properties named "Name".</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.TextDecorations">
      <summary>Gets or sets the text decorations that are applied to the content within a <see cref="T:System.Windows.Documents.Inline" /> element.</summary>
      <returns>A collection of text decorations. The default is null, which means that no text decorations are applied.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.TextDecorationsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Inline.TextDecorations" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Inline.TextDecorations" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Documents.InlineCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Documents.Inline" /> elements.</summary>
    </member>
    <member name="M:System.Windows.Documents.InlineCollection.Add(System.String)">
      <summary>Adds a string to the collection.</summary>
      <param name="text">The text to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Documents.LineBreak">
      <summary>Represents an inline element that causes a new line to begin in content when rendered in a text container.</summary>
    </member>
    <member name="M:System.Windows.Documents.LineBreak.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.LineBreak" /> class.</summary>
    </member>
    <member name="T:System.Windows.Documents.Run">
      <summary>Represents a discrete section of formatted or unformatted text.</summary>
    </member>
    <member name="M:System.Windows.Documents.Run.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Run" /> class.</summary>
    </member>
    <member name="P:System.Windows.Documents.Run.Text">
      <summary>Gets or sets the text contents of the <see cref="T:System.Windows.Documents.Run" />.</summary>
      <returns>A string specifying the text contents of the <see cref="T:System.Windows.Documents.Run" />. The default is <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributes">
      <summary>Specifies drawing attributes that are used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> class. </summary>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Color">
      <summary>Gets or sets the color that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The color that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is Black.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Height">
      <summary>Gets or sets the height of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The height of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is 2 pixels.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.OutlineColor">
      <summary>Gets or sets the outline color that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The outline color of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is Black.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Width">
      <summary>Gets or sets the width of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The width of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is 2 pixels.</returns>
    </member>
    <member name="T:System.Windows.Ink.Stroke">
      <summary>Represents a collection of points that correspond to a stylus-down, move, and stylus-up sequence.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke" /> class.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.#ctor(System.Windows.Input.StylusPointCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke" /> class with the specified <see cref="T:System.Windows.Input.StylusPointCollection" />.</summary>
      <param name="stylusPoints">A <see cref="T:System.Windows.Input.StylusPointCollection" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPoints" /> does not contain any stylus points.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylusPoints" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Ink.Stroke.DrawingAttributes">
      <summary>Gets or sets the properties of the stroke, such as <see cref="P:System.Windows.Ink.DrawingAttributes.Height" />, <see cref="P:System.Windows.Ink.DrawingAttributes.Width" />, <see cref="P:System.Windows.Ink.DrawingAttributes.Color" />, or <see cref="P:System.Windows.Ink.DrawingAttributes.OutlineColor" />. </summary>
      <returns>The <see cref="T:System.Windows.Ink.DrawingAttributes" /> of the stroke.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetBounds">
      <summary>Retrieves the bounding box for the <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> structure defining the bounding box for the <see cref="T:System.Windows.Ink.Stroke" /> object.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Input.StylusPointCollection)">
      <summary>Indicates whether a specified <see cref="T:System.Windows.Input.StylusPointCollection" /> intersects with a <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <returns>true if the specified <see cref="T:System.Windows.Input.StylusPointCollection" /> intersects with the <see cref="T:System.Windows.Ink.Stroke" /> object; otherwise, false.</returns>
      <param name="stylusPointCollection">The <see cref="T:System.Windows.Input.StylusPointCollection" /> used to check for intersection with the <see cref="T:System.Windows.Ink.Stroke" /> object.</param>
    </member>
    <member name="P:System.Windows.Ink.Stroke.StylusPoints">
      <summary>Gets or sets the stylus points of the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The <see cref="T:System.Windows.Input.StylusPointCollection" /> that contains the stylus points that represent the current <see cref="T:System.Windows.Ink.Stroke" />.</returns>
    </member>
    <member name="T:System.Windows.Ink.StrokeCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Ink.Stroke" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollection" /> class. </summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetBounds">
      <summary>Returns the bounds of the strokes in the collection.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> that contains the bounds of the strokes in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Input.StylusPointCollection)">
      <summary>Indicates whether a specified <see cref="T:System.Windows.Input.StylusPointCollection" /> intersects with a <see cref="T:System.Windows.Ink.StrokeCollection" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the strokes that intersect with the points in the specified <see cref="T:System.Windows.Input.StylusPointCollection" />.</returns>
      <param name="stylusPointCollection">The <see cref="T:System.Windows.Input.StylusPointCollection" /> used to check for intersection with the <see cref="T:System.Windows.Ink.Stroke" /> object.</param>
    </member>
    <member name="T:System.Windows.Input.Cursor">
      <summary>Represents the image used for the mouse pointer.</summary>
    </member>
    <member name="M:System.Windows.Input.Cursor.ToString">
      <summary>Returns the string representation of the <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The name of the cursor.</returns>
    </member>
    <member name="T:System.Windows.Input.Cursors">
      <summary>Defines a set of default mouse pointer images for Silverlight.</summary>
    </member>
    <member name="P:System.Windows.Input.Cursors.Arrow">
      <summary>Represents an Arrow <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>An Arrow <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Eraser">
      <summary>Represents an Eraser <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>An Eraser <see cref="T:System.Windows.Input.Cursor" />. </returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Hand">
      <summary>Represents a Hand <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A Hand <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.IBeam">
      <summary>Represents an IBeam <see cref="T:System.Windows.Input.Cursor" />, which is typically used to show where the text cursor appears when the mouse is clicked. </summary>
      <returns>An IBeam <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.None">
      <summary>Represents a special <see cref="T:System.Windows.Input.Cursor" /> that is invisible. </summary>
      <returns>The None <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNS">
      <summary>Represents a SizeNS <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A SizeNS <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeWE">
      <summary>Represents a SizeWE <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A SizeWE <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Stylus">
      <summary>Represents a Stylus <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A Stylus <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Wait">
      <summary>Represents a Wait<see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A Wait <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="T:System.Windows.Input.FocusManager">
      <summary>Provides utility methods related to element focus, without the need to handle focus-related events.</summary>
    </member>
    <member name="M:System.Windows.Input.FocusManager.GetFocusedElement">
      <summary>Queries the Silverlight focus system to determine which object has focus. </summary>
      <returns>The object that currently has focus.  Typically, this is a <see cref="T:System.Windows.Controls.Control" /> class. </returns>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>Defines the contract for commanding, using the same contract as used in WPF.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>Defines the method that determines whether the command can execute in its current state.</summary>
      <returns>true if this command can be executed; otherwise, false.</returns>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null. </param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>Occurs when changes occur that affect whether the command should execute.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>Defines the method to be called when the command is invoked.</summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null. </param>
    </member>
    <member name="T:System.Windows.Input.InputMethod">
      <summary>Supports the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.</summary>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetIsInputMethodEnabled(System.Windows.DependencyObject)">
      <summary>Gets the value for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property on the specified object.</summary>
      <returns>The <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property value.</returns>
      <param name="target">The object to get the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property value from.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a <see cref="T:System.Windows.Controls.TextBox" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputMethod.IsInputMethodEnabled">
      <summary>Gets or sets a value that determines whether input method editors can be used to provide input for the control where the property is attached.</summary>
      <returns>true if input method editors can be used to provide input; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.IsInputMethodEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetIsInputMethodEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the value for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property on the specified object.</summary>
      <param name="target">The object on which to set the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property value.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a <see cref="T:System.Windows.Controls.TextBox" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>Specifies the possible key values on a keyboard. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>A special value indicating no key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>The BACKSPACE key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>The TAB key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>The ENTER key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Shift">
      <summary>The SHIFT key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Ctrl">
      <summary>The CTRL (control) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Alt">
      <summary>The ALT key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>The CAPSLOCK key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>The ESC (also known as ESCAPE) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>The SPACE key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>The PAGEUP key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>The PAGEDOWN key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>The END key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>The HOME key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>The left arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>The up arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>The right arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>The down arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>The INSERT key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>The DEL (also known as DELETE) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>The 0 (zero) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>The 1 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>The 2 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>The 3 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>The 4 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>The 5 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>The 6 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>The 7 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>The 8 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>The 9 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>The A key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>The B key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>The C key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>The D key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>The E key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>The F key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>The G key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>The H key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>The I key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>The J key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>The K key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>The L key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>The M key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>The N key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>The O key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>The P key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>The Q key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>The R key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>The S key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>The T key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>The U key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>The V key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>The W key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>The X key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>The Y key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>The Z key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>The F1 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>The F2 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>The F3 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>The F4 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>The F5 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>The F6 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>The F7 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>The F8 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>The F9 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>The F10 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>The F11 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>The F12 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>The 0 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>The 1 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>The 2 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>The 3 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>The 4 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>The 5 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>The 6 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>The 7 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>The 8 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>The 9 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>The * (MULTIPLY) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>The + (ADD) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>The - (SUBTRACT) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>The . (DECIMAL) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>The / (DIVIDE) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Unknown">
      <summary>A special value indicating the key is out of range of this enumeration.</summary>
    </member>
    <member name="T:System.Windows.Input.Keyboard">
      <summary>Represents the keyboard device. </summary>
    </member>
    <member name="P:System.Windows.Input.Keyboard.Modifiers">
      <summary>Gets the set of <see cref="T:System.Windows.Input.ModifierKeys" /> that are currently pressed. </summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyboardNavigationMode">
      <summary>Specifies the tabbing behavior across tab stops for a Silverlight tabbing sequence within a container.</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Local">
      <summary>Tab indexes are considered on the local subtree only inside this container.</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Cycle">
      <summary>Focus returns to the first or the last keyboard navigation stop inside of a container when the first or last keyboard navigation stop is reached.</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Once">
      <summary>The container and all of its child elements as a whole receive focus only once. </summary>
    </member>
    <member name="T:System.Windows.Input.KeyEventArgs">
      <summary>Provides event data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> events.</summary>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.Handled">
      <summary>Gets or sets a value that marks the routed event as handled, and , and prevents most handlers along the event route from handling the same event again.</summary>
      <returns>true to mark the routed event handled; false to leave the routed event unhandled, which permits the event to potentially route further. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.Key">
      <summary>Gets the keyboard key associated with the event. </summary>
      <returns>One of the enumeration values that indicates the key referenced by the event.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.PlatformKeyCode">
      <summary>Gets an integer value that represents the key that is pressed or released (depending on which event is raised). This value is the nonportable key code, which is operating system–specific.</summary>
      <returns>The key code value.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> events.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>Specifies the set of modifier keys. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>No modifiers are pressed. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>The ALT key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>The CTRL key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>The SHIFT key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>The Windows logo key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Apple">
      <summary>The Apple key (also known as the Open Apple key) is pressed.</summary>
    </member>
    <member name="T:System.Windows.Input.MouseButtonEventArgs">
      <summary>Provides event data for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> and <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> events. </summary>
    </member>
    <member name="P:System.Windows.Input.MouseButtonEventArgs.Handled">
      <summary>Gets or sets a value that marks the routed event as handled, and prevents most handlers along the event route from handling the same event again.</summary>
      <returns>true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseButtonEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> and <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> events. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.MouseEventArgs">
      <summary>Provides data for mouse related events that do not specifically involve mouse buttons, for example <see cref="E:System.Windows.UIElement.MouseMove" />.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.UIElement)">
      <summary>Returns the x- and y-coordinates of the mouse pointer position, optionally evaluated against a coordinate origin of a supplied <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>A <see cref="T:System.Windows.Point" /> that represents the current x- and y-coordinates of the mouse pointer position. If null was passed as <paramref name="relativeTo" />, this coordinate is for the overall Silverlight plug-in content area. If a non-null <paramref name="relativeTo" /> was passed, this coordinate is relative to the object referenced by <paramref name="relativeTo" />.</returns>
      <param name="relativeTo">Any <see cref="T:System.Windows.UIElement" />-derived object that is contained by the Silverlight plug-in and connected to the object tree. To specify the object relative to the overall Silverlight coordinate system, use a <paramref name="relativeTo" /> value of null.</param>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.StylusDevice">
      <summary>Gets an object that reports stylus device information, such as the collection of stylus points associated with the input.</summary>
      <returns>The stylus device information object.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseEventHandler">
      <summary>Represents the method that will handle mouse related routed events that do not specifically involve mouse buttons; for example, <see cref="E:System.Windows.UIElement.MouseMove" />.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.MouseWheelEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event. </summary>
    </member>
    <member name="P:System.Windows.Input.MouseWheelEventArgs.Delta">
      <summary>Gets a value that indicates the amount that the mouse wheel has changed, relative to its starting state or the last occurrence of the event. </summary>
      <returns>An integer value that provides a factor of how much the mouse wheel is turned. Value can be negative; see Remarks.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseWheelEventArgs.Handled">
      <summary>Gets or sets a value that marks the routed event as handled, and prevents most handlers along the event route from handling the same event again.</summary>
      <returns>true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseWheelEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</summary>
      <param name="sender">The object where the event handler is attached. </param>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="T:System.Windows.Input.StylusDevice">
      <summary>Reports stylus device information, such as the collection of stylus points associated with the input.</summary>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.DeviceType">
      <summary>Gets the type of the tablet device.</summary>
      <returns>The type of the tablet device.</returns>
    </member>
    <member name="M:System.Windows.Input.StylusDevice.GetStylusPoints(System.Windows.UIElement)">
      <summary>Returns the stylus points collected since the last mouse event.</summary>
      <returns>A collection of the stylus points collected since the last mouse event.</returns>
      <param name="relativeTo">Specifies the offset for the object (typically an <see cref="T:System.Windows.Controls.InkPresenter" />) that should be applied to captured points.</param>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.Inverted">
      <summary>Gets or sets a value that indicates whether the stylus is inverted.</summary>
      <returns>true if the stylus is inverted; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Windows.Input.StylusPoint">
      <summary>Represents a single point collected while the user is entering ink strokes with the stylus or mouse.</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPoint" /> class. </summary>
      <param name="x">The x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid.</param>
      <param name="y">The y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid.</param>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.PressureFactor">
      <summary>Gets or sets the pressure factor of the stylus on the screen.</summary>
      <returns>The pressure factor of the stylus on the screen. The default is 0.5.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Windows.Input.StylusPoint.PressureFactor" />
                is set to a value that is less than 0 or greater than 1.0.</exception>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.X">
      <summary>Gets or sets the value for the x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
      <returns>The x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid. The default is 0.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Windows.Input.StylusPoint.X" /> is set a value that evaluates to infinity or a value that is not a number.</exception>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.Y">
      <summary>Gets or sets the value for the y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
      <returns>The y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid. The default is 0.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Windows.Input.StylusPoint.Y" /> is set a value that evaluates to infinity or a value that is not a number.</exception>
    </member>
    <member name="T:System.Windows.Input.StylusPointCollection">
      <summary>Represents a collection of related <see cref="T:System.Windows.Input.StylusPoint" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointCollection" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.Add(System.Windows.Input.StylusPointCollection)">
      <summary>Adds a collection of <see cref="T:System.Windows.Input.StylusPoint" /> objects to the collection. </summary>
      <param name="stylusPoints">The collection of <see cref="T:System.Windows.Input.StylusPoint" /> objects to add to the collection.</param>
    </member>
    <member name="T:System.Windows.Input.TabletDeviceType">
      <summary>Defines values for the type of devices the tablet device uses.</summary>
    </member>
    <member name="F:System.Windows.Input.TabletDeviceType.Mouse">
      <summary>Indicates the tablet device is a mouse.</summary>
    </member>
    <member name="F:System.Windows.Input.TabletDeviceType.Stylus">
      <summary>Indicates the tablet device is a stylus.</summary>
    </member>
    <member name="F:System.Windows.Input.TabletDeviceType.Touch">
      <summary>Indicates the tablet device is a touch screen.</summary>
    </member>
    <member name="T:System.Windows.Input.Touch">
      <summary>Provides an application-level service that processes multitouch input from the operating system and raises the Silverlight-specific <see cref="E:System.Windows.Input.Touch.FrameReported" /> event.</summary>
    </member>
    <member name="E:System.Windows.Input.Touch.FrameReported">
      <summary>Occurs when the input system promotes a Windows 7 multitouch message for Silverlight.</summary>
    </member>
    <member name="T:System.Windows.Input.TouchAction">
      <summary>Describes the action of a specific touch point.</summary>
    </member>
    <member name="F:System.Windows.Input.TouchAction.Down">
      <summary>A touch action from a TOUCHEVENTF_DOWN message.</summary>
    </member>
    <member name="F:System.Windows.Input.TouchAction.Move">
      <summary>A touch action from a TOUCHEVENTF_MOVE message.</summary>
    </member>
    <member name="F:System.Windows.Input.TouchAction.Up">
      <summary>A touch action from a TOUCHEVENTF_UP message.</summary>
    </member>
    <member name="T:System.Windows.Input.TouchDevice">
      <summary>Describes the device type that produced the touch point.</summary>
    </member>
    <member name="M:System.Windows.Input.TouchDevice.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TouchDevice" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.TouchDevice.DirectlyOver">
      <summary>Gets the topmost <see cref="T:System.Windows.UIElement" /> object that the mouse is over at the time that this touch point was produced.</summary>
      <returns>The topmost (in Z-order) <see cref="T:System.Windows.UIElement" /> object that the mouse is over at the time that this touch point was produced.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchDevice.DirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchDevice.DirectlyOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchDevice.DirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.TouchDevice.Id">
      <summary>Gets a unique ID as provided by the operating system for a particular touch device.</summary>
      <returns>A unique ID for a particular touch device.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchDevice.IdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchDevice.Id" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchDevice.Id" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Input.TouchFrameEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Input.Touch.FrameReported" /> event. </summary>
    </member>
    <member name="M:System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(System.Windows.UIElement)">
      <summary>Returns the primary touch point for the reported frame, as a <see cref="T:System.Windows.Input.TouchPoint" /> value. Can be evaluated against a coordinate reference point rather than the absolute Silverlight coordinates.</summary>
      <returns>The primary touch point for the reported frame.</returns>
      <param name="relativeTo">A coordinate reference point that can be used to offset the return value's coordinate. If you want the reference to be based on Silverlight absolute coordinates, specify <paramref name="relativeTo" /> as null.</param>
    </member>
    <member name="M:System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(System.Windows.UIElement)">
      <summary>Returns a collection of all <see cref="T:System.Windows.Input.TouchPoint" /> values in the reported frame. Can be evaluated against a coordinate reference point rather than the absolute Silverlight coordinates.</summary>
      <returns>A collection of <see cref="T:System.Windows.Input.TouchPoint" /> values.</returns>
      <param name="relativeTo">A coordinate reference point that can be used to offset the coordinates of all points in the collection returned. If you want the reference to be based on Silverlight absolute coordinates, specify <paramref name="relativeTo" /> as null.</param>
    </member>
    <member name="M:System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp">
      <summary>Disables automatic mouse event promotion for the primary touch point, until all touch points report as <see cref="F:System.Windows.Input.TouchAction.Up" />.</summary>
      <exception cref="T:System.InvalidOperationException">No primary touch point recorded.-or-Primary touch point has action other than <see cref="F:System.Windows.Input.TouchAction.Down" />.</exception>
    </member>
    <member name="P:System.Windows.Input.TouchFrameEventArgs.Timestamp">
      <summary>Gets an integer timestamp value for the event.</summary>
      <returns>An integer timestamp value for the event.</returns>
    </member>
    <member name="T:System.Windows.Input.TouchFrameEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.Touch.FrameReported" /> event of <see cref="T:System.Windows.Input.Touch" />.</summary>
      <param name="sender">The object where the event is handled.</param>
      <param name="e">Data for the event.</param>
    </member>
    <member name="T:System.Windows.Input.TouchPoint">
      <summary>Represents a single touch point from a multitouch message source.</summary>
    </member>
    <member name="M:System.Windows.Input.TouchPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TouchPoint" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.TouchPoint.Action">
      <summary>Gets the type of action (up, down, move) that the <see cref="T:System.Windows.Input.TouchPoint" /> represents.</summary>
      <returns>A value of the <see cref="T:System.Windows.Input.TouchAction" /> enumeration.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchPoint.ActionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchPoint.Action" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchPoint.Action" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.TouchPoint.Position">
      <summary>Gets the X,Y coordinate position of the touch point as a <see cref="T:System.Windows.Point" />.</summary>
      <returns>A <see cref="T:System.Windows.Point" /> value that reports the coordinate position of the touch point.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchPoint.PositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchPoint.Position" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchPoint.Position" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.TouchPoint.Size">
      <summary>Gets the rectangular area reported as the touch point contact area.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> value. If the device being used for multitouch input does not support reporting a touch size area, the value of this property is a <see cref="T:System.Windows.Size" /> with both values -1.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchPoint.SizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchPoint.Size" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchPoint.Size" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.TouchPoint.TouchDevice">
      <summary>Gets the specific device type that produced the touch point.</summary>
      <returns>A <see cref="P:System.Windows.Input.TouchPoint.TouchDevice" /> value that reports specifics of the device.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchPoint.TouchDeviceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchPoint.TouchDevice" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchPoint.TouchDevice" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Input.TouchPointCollection">
      <summary>Contains a collection of <see cref="T:System.Windows.Input.TouchPoint" /> values.</summary>
    </member>
    <member name="T:System.Windows.Interop.Content">
      <summary>Reports details about the Silverlight-based application's instantiation settings, and exposes some of the HTML DOM values for the hosted Silverlight plug-in instance. <see cref="T:System.Windows.Interop.Content" /> contains APIs that specifically relate to the Silverlight content area (the area declared by the width and height in the initialization).</summary>
    </member>
    <member name="M:System.Windows.Interop.Content.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Interop.Content" /> class.</summary>
    </member>
    <member name="P:System.Windows.Interop.Content.ActualHeight">
      <summary>Gets the browser-determined height of the Silverlight plug-in content area.</summary>
      <returns>The browser-determined height of the Silverlight plug-in content area, in pixels. The default value is the height of the Silverlight plug-in, as specified by the HTML object element that instantiated it. </returns>
    </member>
    <member name="P:System.Windows.Interop.Content.ActualWidth">
      <summary>Gets the browser-determined width of the Silverlight plug-in content area.</summary>
      <returns>The browser-determined width of the Silverlight plug-in content area, in pixels. The default value is the width of the Silverlight plug-in, as specified by the HTML object element that instantiated it. </returns>
    </member>
    <member name="E:System.Windows.Interop.Content.FullScreenChanged">
      <summary>Occurs when the hosted Silverlight plug-in either enters or exits full-screen mode.</summary>
    </member>
    <member name="P:System.Windows.Interop.Content.IsFullScreen">
      <summary>Gets or sets a value that indicates whether the Silverlight plug-in is displaying in full-screen mode.</summary>
      <returns>true if the Silverlight plug-in displays as a full-screen plug-in. false if the Silverlight plug-in displays as an embedded plug-in.</returns>
    </member>
    <member name="E:System.Windows.Interop.Content.Resized">
      <summary>Occurs when the <see cref="P:System.Windows.Interop.Content.ActualHeight" /> or the <see cref="P:System.Windows.Interop.Content.ActualWidth" /> of the Silverlight plug-in change.</summary>
    </member>
    <member name="E:System.Windows.Interop.Content.Zoomed">
      <summary>Occurs when the zoom setting in the host browser window changes or is initialized. </summary>
    </member>
    <member name="P:System.Windows.Interop.Content.ZoomFactor">
      <summary>Gets the factor by which the current browser window resizes its contents.  </summary>
      <returns>The zoom setting for the current browser window. </returns>
    </member>
    <member name="T:System.Windows.Interop.HostingRenderTargetBitmap">
      <summary>Enables a native Silverlight host, such as Expression Blend or Visual Studio, to convert a <see cref="T:System.Windows.UIElement" /> object into a bitmap.</summary>
    </member>
    <member name="M:System.Windows.Interop.HostingRenderTargetBitmap.#ctor(System.Int32,System.Int32,System.IntPtr)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Windows.Interop.HostingRenderTargetBitmap" /> class. </summary>
      <param name="width">The width of the <see cref="T:System.Windows.UIElement" /> to convert.</param>
      <param name="height">The height of the <see cref="T:System.Windows.UIElement" /> to convert.</param>
      <param name="bitmap">A pointer to the target bitmap.</param>
    </member>
    <member name="M:System.Windows.Interop.HostingRenderTargetBitmap.Render(System.Windows.UIElement)">
      <summary>Renders the <see cref="T:System.Windows.UIElement" /> object to the bitmap pointer specified in the constructor.</summary>
      <returns>The dirty rectangle. </returns>
      <param name="visual">The object to render.</param>
    </member>
    <member name="T:System.Windows.Interop.NavigationStateChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Interop.SilverlightHost.NavigationStateChanged" /> event. </summary>
    </member>
    <member name="M:System.Windows.Interop.NavigationStateChangedEventArgs.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Interop.NavigationStateChangedEventArgs" /> class. </summary>
      <param name="previousNavigationState">The URI fragment that represents the previous navigation state. </param>
      <param name="newNavigationState">The URI fragment that represents the new navigation state.</param>
    </member>
    <member name="P:System.Windows.Interop.NavigationStateChangedEventArgs.NewNavigationState">
      <summary>Gets the URI fragment that represents the new navigation state. </summary>
      <returns>The URI fragment that represents the new navigation state. </returns>
    </member>
    <member name="P:System.Windows.Interop.NavigationStateChangedEventArgs.PreviousNavigationState">
      <summary>Gets the URI fragment that represents the previous navigation state. </summary>
      <returns>The URI fragment that represents the previous navigation state. </returns>
    </member>
    <member name="T:System.Windows.Interop.Settings">
      <summary>Reports details about the Silverlight-based application's instantiation settings, and exposes some of the HTML DOM values for the hosted Silverlight plug-in instance. </summary>
    </member>
    <member name="M:System.Windows.Interop.Settings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Interop.Settings" /> object.</summary>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableAutoZoom">
      <summary>Gets or sets a value that indicates whether the Silverlight plug-in will resize its content based on the current browser zoom setting. </summary>
      <returns>true if Silverlight responds to the browser zoom setting; otherwise, false. The default is true if there is no handler for the <see cref="E:System.Windows.Interop.Content.Zoomed" /> event; otherwise, the default is false. </returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableCacheVisualization">
      <summary>Gets or sets a value that indicates whether to use a non-production analysis visualization mode, which shows areas of a page that are being GPU accelerated with a colored overlay. Do not use in production code.</summary>
      <returns>true if cache visualization is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableFrameRateCounter">
      <summary>Gets or sets a value that indicates whether a diagnostic frame rate counter should appear in the status area of the hosting browser. (Microsoft Internet Explorer only.)</summary>
      <returns>true if the frame rate counter is enabled. false if the frame rate counter is disabled. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableGPUAcceleration">
      <summary>Gets a value that indicates whether to use graphics processor unit (GPU) hardware acceleration for cached compositions, which potentially results in graphics optimization. </summary>
      <returns>true if hardware acceleration is enabled; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableHTMLAccess">
      <summary>Gets a value that indicates whether the Silverlight plug-in allows hosted content or its runtime to access the HTML DOM.</summary>
      <returns>true if hosted content can access the browser DOM; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableRedrawRegions">
      <summary>Gets or sets a value that indicates whether to show the areas of the Silverlight plug-in that are being redrawn each frame.</summary>
      <returns>true if the areas of the plug-in that are being redrawn each frame are shown; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.MaxFrameRate">
      <summary>Gets or sets the maximum number of frames to render per second.</summary>
      <returns>An integer value that specifies the maximum number of frames to render per second. The default value is 60.</returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.Windowless">
      <summary>Gets a value that indicates whether the Silverlight plug-in displays as a windowless plug-in. (Applies to Windows versions of Silverlight only.)</summary>
      <returns>true if the Silverlight plug-in displays as a windowless plug-in; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Interop.SilverlightHost">
      <summary>Reports details about the Silverlight-based application's instantiation settings, and exposes some of the HTML DOM values for the hosted Silverlight plug-in instance.</summary>
    </member>
    <member name="M:System.Windows.Interop.SilverlightHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Interop.SilverlightHost" /> class.</summary>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Background">
      <summary>Gets the background color value that was applied to the Silverlight plug-in as part of instantiation settings.</summary>
      <returns>The background color for the Silverlight plug-in.</returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Content">
      <summary>Gets the "Content" sub-object of this <see cref="T:System.Windows.Interop.SilverlightHost" />.</summary>
      <returns>The "Content" sub-object.</returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.InitParams">
      <summary>Gets the initialization parameters that were passed as part of HTML initialization of a Silverlight plug-in.</summary>
      <returns>The set of initialization parameters, as a dictionary with key strings and value strings.</returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.IsLoaded">
      <summary>Gets a value that indicates whether the hosted Silverlight plug-in has finished loading.</summary>
      <returns>true if the plug-in has finished loading; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Interop.SilverlightHost.IsVersionSupported(System.String)">
      <summary>Returns a value that indicates whether the installed Silverlight plug-in supports the specified version. </summary>
      <returns>true if the version can be supported by the installation; otherwise, false.</returns>
      <param name="versionStr">The version to check, in the form of major.minor.build.revision See Remarks for more information about the string form.</param>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.NavigationState">
      <summary>Gets or sets a URI fragment that represents the current navigation state.</summary>
      <returns>A URI fragment that represents the current navigation state.</returns>
      <exception cref="T:System.ArgumentNullException">When setting this property, the specified value is null.</exception>
    </member>
    <member name="E:System.Windows.Interop.SilverlightHost.NavigationStateChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Interop.SilverlightHost.NavigationState" /> property changes value.</summary>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Settings">
      <summary>Gets the "Settings" sub-object of this <see cref="T:System.Windows.Interop.SilverlightHost" />.</summary>
      <returns>The "Settings" sub-object.</returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Source">
      <summary>Gets the URI of the package or XAML file that specifies the XAML content to render.</summary>
      <returns>The URI of the package, XAML file, or XAML scripting tag that contains the content to load into the Silverlight plug-in.</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary>Specifies which property of a class can be interpreted to be the content property when the class is parsed by a XAML processor.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> class, using the specified content property name.</summary>
      <param name="name">The content property name.</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary>Gets the name of the property that is the declared content property.</summary>
      <returns>A string that contains the name of the property that is the content property.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlParseException">
      <summary>The exception that is thrown when a XAML parsing exception occurs.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.LineNumber">
      <summary>Gets the line number where the exception occurred.</summary>
      <returns>The number of the line on which the XAML parsing exception occurred.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.LinePosition">
      <summary>Gets the position in the line where the exception occurred.</summary>
      <returns>The position on the line where the XAML parsing exception occurred.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlReader">
      <summary>Provides a XAML processor engine for parsing XAML and creating corresponding Silverlight object trees.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.Load(System.String)">
      <summary>Parses a well-formed XAML fragment and creates a corresponding Silverlight object tree, and returns the root of the object tree.</summary>
      <returns>The root object of the Silverlight object tree.</returns>
      <param name="xaml">A string that contains a valid XAML fragment.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.LoadWithInitialTemplateValidation(System.String)">
      <summary>[SECURITY CRITICAL] Cannot be called.</summary>
      <returns>Cannot be called.</returns>
      <param name="xaml">Cannot be called.</param>
    </member>
    <member name="T:System.Windows.Markup.XmlLanguage">
      <summary>Represents culture information for use in XML and XAML markup.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.Equals(System.Object)">
      <summary>Checks for equality of an object to the current object.</summary>
      <returns>true if the objects are the same object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare to the calling object.</param>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.GetHashCode">
      <summary>Serves as a hash function for the <see cref="T:System.Windows.Markup.XmlLanguage" /> class.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)">
      <summary>Returns a <see cref="T:System.Windows.Markup.XmlLanguage" /> instance, based on a string representing the language per RFC 3066.</summary>
      <returns>A new <see cref="T:System.Windows.Markup.XmlLanguage" /> with the provided string as its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value.</returns>
      <param name="ietfLanguageTag">An RFC 3066 language string, or an empty string ("").</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ietfLanguageTag" /> cannot be processed as a valid IETF language.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag">
      <summary>Gets the string representation of the language tag.</summary>
      <returns>A string that represents the language tag.</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.op_Equality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)">
      <summary>Determines whether two specified <see cref="T:System.Windows.Markup.XmlLanguage" /> objects have the same value. </summary>
      <returns>true if the value of <paramref name="xmlLanguage1" /> is the same as the value of <paramref name="xmlLanguage2" />; otherwise, false.</returns>
      <param name="xmlLanguage1">The first <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.</param>
      <param name="xmlLanguage2">The second <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.op_Inequality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)">
      <summary>Determines whether two specified <see cref="T:System.Windows.Markup.XmlLanguage" /> objects have a different value. </summary>
      <returns>true if the value of <paramref name="xmlLanguage1" /> is different from the value of <paramref name="xmlLanguage2" />; otherwise, false.</returns>
      <param name="xmlLanguage1">The first <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.</param>
      <param name="xmlLanguage2">The second <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.</param>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary>Specifies a mapping in an assembly between an XML namespace (xmlns) and a CLR namespace.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> class.</summary>
      <param name="xmlNamespace">Specifies the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace" />  value.</param>
      <param name="clrNamespace">Specifies the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> or <paramref name="clrNamespace" /> are null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary>Gets or sets the name of the assembly that contains the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" />.</summary>
      <returns>The name of the assembly that contains the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>Gets the CLR namespace that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace" /> by the attribute. </summary>
      <returns>The CLR namespace that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace" /> by the attribute. </returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>Gets the XML namespace (xmlns) that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" /> by the attribute.</summary>
      <returns>The XML namespace (xmlns) that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" /> by the attribute.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary>Specifies a recommended prefix to associate with an XML namespace when writing elements and attributes in a XAML file.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> class.</summary>
      <param name="xmlNamespace">The URI of the relevant XML namespace (use a string, not a true <see cref="T:System.Uri" /> type).</param>
      <param name="prefix">The recommended prefix to use when mapping the XML namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> or <paramref name="prefix" /> are null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary>Gets the recommended prefix to associate with the XML namespace.</summary>
      <returns>A string that provides the recommended prefix to use when mapping the <see cref="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace" /> namespace.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary>Gets the XML namespace URI.</summary>
      <returns>A string that provides the URI for the relevant XML namespace.</returns>
    </member>
    <member name="T:System.Windows.Media.AlignmentX">
      <summary>Describes how content is positioned horizontally in a container. </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Left">
      <summary>The contents align toward the left of the container. </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Center">
      <summary>The contents align toward the center of the container. </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Right">
      <summary>The contents align toward the right of the container. </summary>
    </member>
    <member name="T:System.Windows.Media.AlignmentY">
      <summary>Describes how content is positioned vertically in a container. </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Top">
      <summary>The contents align toward the upper edge of the container. </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Center">
      <summary>The contents align toward the center of the container.</summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Bottom">
      <summary>The contents align toward the lower edge of the container. </summary>
    </member>
    <member name="T:System.Windows.Media.ArcSegment">
      <summary>Represents an elliptical arc between two points. </summary>
    </member>
    <member name="M:System.Windows.Media.ArcSegment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.ArcSegment" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.IsLargeArc">
      <summary>Gets or sets a value that indicates whether the arc should be greater than 180 degrees.</summary>
      <returns>true if the arc should be greater than 180 degrees; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.IsLargeArcProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.Point">
      <summary>Gets or sets the endpoint of the elliptical arc.</summary>
      <returns>The point to which the arc is drawn. The default is a <see cref="T:System.Windows.Point" /> with value 0,0. </returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.PointProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ArcSegment.Point" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.ArcSegment.Point" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.RotationAngle">
      <summary>Gets or sets the amount (in degrees) by which the ellipse is rotated about the x-axis.  </summary>
      <returns>The amount (in degrees) by which the ellipse is rotated about the x-axis. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.RotationAngleProperty">
      <summary>Identifies the  <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.Size">
      <summary>Gets or sets the x- and y-radius of the arc as a <see cref="T:System.Windows.Size" /> structure. </summary>
      <returns>A <see cref="T:System.Windows.Size" /> structure that describes the x- and y-radius of the elliptical arc. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the arc's x-radius; its <see cref="P:System.Windows.Size.Height" /> property specifies the arc's y-radius. The default is a <see cref="T:System.Windows.Size" /> with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.SizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ArcSegment.Size" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.ArcSegment.Size" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.SweepDirection">
      <summary>Gets or sets a value that specifies whether the arc is drawn in the <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> or <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> direction.</summary>
      <returns>One of the enumeration values that specifies the direction in which the arc is drawn. The default is <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />.</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.SweepDirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> dependency property identifier.</returns>
    </member>
    <member name="T:System.Windows.Media.BezierSegment">
      <summary>Represents a cubic Bezier curve drawn between two points. </summary>
    </member>
    <member name="M:System.Windows.Media.BezierSegment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.BezierSegment" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point1">
      <summary>Gets or sets the first control point of the curve. </summary>
      <returns>The first control point of the curve. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point1Property">
      <summary>Identifies the <see cref="P:System.Windows.Media.BezierSegment.Point1" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.BezierSegment.Point1" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point2">
      <summary>Gets or sets the second control point of the curve.</summary>
      <returns>The second control point of the curve.</returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point2Property">
      <summary>Identifies the <see cref="P:System.Windows.Media.BezierSegment.Point2" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.BezierSegment.Point2" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point3">
      <summary>Gets or sets the end point of the curve.</summary>
      <returns>The end point of the curve.</returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point3Property">
      <summary>Identifies the <see cref="P:System.Windows.Media.BezierSegment.Point3" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.BezierSegment.Point3" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.BitmapCache">
      <summary>Represents a cached bitmap.</summary>
    </member>
    <member name="M:System.Windows.Media.BitmapCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.BitmapCache" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.BitmapCache.RenderAtScale">
      <summary>Gets or sets the scale at which the object is rendered on the cached bitmap surface. Use this property for cached objects that are scaled to improve performance. </summary>
      <returns>The scale at which the object is rendered as a cached bitmap. If you specify a negative number, an error will be thrown. The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.BitmapCache.RenderAtScaleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.BitmapCache.RenderAtScale" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.Brush">
      <summary>Defines objects used to paint graphical objects. Classes that derive from <see cref="T:System.Windows.Media.Brush" /> describe how the area is painted.</summary>
    </member>
    <member name="M:System.Windows.Media.Brush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Brush" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Brush.Opacity">
      <summary>Gets or sets the degree of opacity of a <see cref="T:System.Windows.Media.Brush" />.  </summary>
      <returns>The value of the <see cref="P:System.Windows.Media.Brush.Opacity" /> property is expressed as a value between 0 and 1.0. The default value is 1.0. </returns>
    </member>
    <member name="F:System.Windows.Media.Brush.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Brush.Opacity" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.Brush.Opacity" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.Brush.RelativeTransform">
      <summary>Gets or sets the transformation that is applied to the brush using relative coordinates. </summary>
      <returns>The transformation that is applied to the brush using relative coordinates. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Brush.RelativeTransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Brush.RelativeTransform" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.Brush.RelativeTransform" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.Brush.Transform">
      <summary>Gets or sets the transformation that is applied to the brush.</summary>
      <returns>The transformation to apply to the brush.</returns>
    </member>
    <member name="F:System.Windows.Media.Brush.TransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Brush.Transform" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.Brush.Transform" /> dependency property identifier.</returns>
    </member>
    <member name="T:System.Windows.Media.BrushMappingMode">
      <summary>Specifies the coordinate system used by a <see cref="T:System.Windows.Media.Brush" />. </summary>
    </member>
    <member name="F:System.Windows.Media.BrushMappingMode.Absolute">
      <summary>The coordinate system is not relative to a bounding box. Values are interpreted directly in local space.  </summary>
    </member>
    <member name="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox">
      <summary>The coordinate system is relative to a bounding box: 0 indicates 0 percent of the bounding box, and 1 indicates 100 percent of the bounding box. For example, (0.5, 0.5) describes a point in the middle of the bounding box, and (1, 1) describes a point at the bottom right of the bounding box. </summary>
    </member>
    <member name="T:System.Windows.Media.CacheMode">
      <summary>Represents cached content. </summary>
    </member>
    <member name="M:System.Windows.Media.CacheMode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.CacheMode" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Color">
      <summary>Describes a color in terms of alpha, red, green, and blue channels. </summary>
    </member>
    <member name="P:System.Windows.Media.Color.A">
      <summary>Gets or sets the sRGB alpha channel value of the color. </summary>
      <returns>The sRGB alpha channel value of the color, as a value between 0 and 255.</returns>
    </member>
    <member name="P:System.Windows.Media.Color.B">
      <summary>Gets or sets the sRGB blue channel value of the color. </summary>
      <returns>The sRGB blue channel value, as a value between 0 and 255.</returns>
    </member>
    <member name="M:System.Windows.Media.Color.Equals(System.Object)">
      <summary>Tests whether the specified object is a <see cref="T:System.Windows.Media.Color" /> structure and is equivalent to the current color. </summary>
      <returns>true if the specified object is a <see cref="T:System.Windows.Media.Color" /> structure and is identical to the current <see cref="T:System.Windows.Media.Color" /> structure; otherwise, false.</returns>
      <param name="o">The object to compare to the current <see cref="T:System.Windows.Media.Color" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Color.Equals(System.Windows.Media.Color)">
      <summary>Tests whether the specified <see cref="T:System.Windows.Media.Color" /> structure is identical to the current color.</summary>
      <returns>true if the specified <see cref="T:System.Windows.Media.Color" /> structure is identical to the current <see cref="T:System.Windows.Media.Color" /> structure; otherwise, false.</returns>
      <param name="color">The <see cref="T:System.Windows.Media.Color" /> structure to compare to the current <see cref="T:System.Windows.Media.Color" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Color.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Creates a new <see cref="T:System.Windows.Media.Color" /> structure by using the specified sRGB alpha channel and color channel values. </summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> structure with the specified values.</returns>
      <param name="a">The alpha channel, <see cref="P:System.Windows.Media.Color.A" />, of the new color. The value must be between 0 and 255.</param>
      <param name="r">The red channel, <see cref="P:System.Windows.Media.Color.R" />, of the new color. The value must be between 0 and 255.</param>
      <param name="g">The green channel, <see cref="P:System.Windows.Media.Color.G" />, of the new color. The value must be between 0 and 255.</param>
      <param name="b">The blue channel, <see cref="P:System.Windows.Media.Color.B" />, of the new color. The value must be between 0 and 255.</param>
    </member>
    <member name="P:System.Windows.Media.Color.G">
      <summary>Gets or sets the sRGB green channel value of the color. </summary>
      <returns>The sRGB green channel value, as a value between 0 and 255.</returns>
    </member>
    <member name="M:System.Windows.Media.Color.GetHashCode">
      <summary>Gets a hash code for the current <see cref="T:System.Windows.Media.Color" /> structure. </summary>
      <returns>A hash code for the current <see cref="T:System.Windows.Media.Color" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Color.op_Equality(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>Tests whether two <see cref="T:System.Windows.Media.Color" /> structures are identical. </summary>
      <returns>true if <paramref name="color1" /> and <paramref name="color2" /> are exactly identical; otherwise, false.</returns>
      <param name="color1">The first <see cref="T:System.Windows.Media.Color" /> structure to compare.</param>
      <param name="color2">The second <see cref="T:System.Windows.Media.Color" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Color.op_Inequality(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>Tests whether two <see cref="T:System.Windows.Media.Color" /> structures are not identical. </summary>
      <returns>true if <paramref name="color1" /> and <paramref name="color2" /> are not equal; otherwise, false.</returns>
      <param name="color1">The first <see cref="T:System.Windows.Media.Color" /> structure to compare.</param>
      <param name="color2">The second <see cref="T:System.Windows.Media.Color" /> structure to compare.</param>
    </member>
    <member name="P:System.Windows.Media.Color.R">
      <summary>Gets or sets the sRGB red channel value of the color. </summary>
      <returns>The sRGB red channel value, as a value between 0 and 255.</returns>
    </member>
    <member name="M:System.Windows.Media.Color.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format.</returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the IFormattable implementation. </param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.Media.Color.ToString">
      <summary>Creates a string representation of the color using the ARGB channels in hex notation. </summary>
      <returns>The string representation of the color.</returns>
    </member>
    <member name="M:System.Windows.Media.Color.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of the color by using the ARGB channels and the specified format provider. </summary>
      <returns>The string representation of the color.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="T:System.Windows.Media.ColorInterpolationMode">
      <summary>Determines how the colors in a gradient are interpolated. </summary>
    </member>
    <member name="F:System.Windows.Media.ColorInterpolationMode.ScRgbLinearInterpolation">
      <summary>Colors are interpolated in the scRGB color space </summary>
    </member>
    <member name="F:System.Windows.Media.ColorInterpolationMode.SRgbLinearInterpolation">
      <summary>Colors are interpolated in the sRGB color space </summary>
    </member>
    <member name="T:System.Windows.Media.Colors">
      <summary>Implements a set of predefined colors. </summary>
    </member>
    <member name="P:System.Windows.Media.Colors.Black">
      <summary>Gets the system-defined color that has the ARGB value of #FF000000. </summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has an ARGB value of #FF000000. </returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Blue">
      <summary>Gets the system-defined color that has the ARGB value of #FF0000FF.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FF0000FF.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Brown">
      <summary>Gets the system-defined color that has the ARGB value of #FFA52A2A.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FFA52A2A.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Cyan">
      <summary>Gets the system-defined color that has the ARGB value of #FF00FFFF.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FF00FFFF.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkGray">
      <summary>Gets the system-defined color that has the ARGB value of #FFA9A9A9.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FFA9A9A9.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Gray">
      <summary>Gets the system-defined color that has the ARGB value of #FF808080.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FF808080.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Green">
      <summary>Gets the system-defined color that has the ARGB value of #FF008000.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FF008000.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightGray">
      <summary>Gets the system-defined color that has the ARGB value of #FFD3D3D3.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FFD3D3D3.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Magenta">
      <summary>Gets the system-defined color that has the ARGB value of #FFFF00FF.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FFFF00FF.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Orange">
      <summary>Gets the system-defined color that has the ARGB value of #FFFFA500.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FFFFA500.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Purple">
      <summary>Gets the system-defined color that has the ARGB value of #FF800080.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FF800080.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Red">
      <summary>Gets the system-defined color that has the ARGB value of #FFFF0000.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FFFF0000.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Transparent">
      <summary>Gets the system-defined color that has the ARGB value of #00FFFFFF.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #00FFFFFF.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.White">
      <summary>Gets the system-defined color that has the ARGB value of #FFFFFFFF.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FFFFFFFF.</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Yellow">
      <summary>Gets the system-defined color that has the ARGB value of #FFFFFF00.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that has the ARGB value of #FFFFFF00.</returns>
    </member>
    <member name="T:System.Windows.Media.CompositionTarget">
      <summary>Represents the display surface of a Silverlight-based application.</summary>
    </member>
    <member name="E:System.Windows.Media.CompositionTarget.Rendering">
      <summary>Occurs when the core Silverlight rendering process renders a frame.</summary>
    </member>
    <member name="T:System.Windows.Media.DeepZoomImageTileSource">
      <summary>Used to specify the source of a <see cref="T:System.Windows.Controls.MultiScaleImage" />. </summary>
    </member>
    <member name="M:System.Windows.Media.DeepZoomImageTileSource.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.DeepZoomImageTileSource" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.DeepZoomImageTileSource.#ctor(System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.DeepZoomImageTileSource" /> class with the specified source Uri.</summary>
      <param name="sourceUri">The source Uri.</param>
    </member>
    <member name="P:System.Windows.Media.DeepZoomImageTileSource.UriSource">
      <summary>Gets or sets the source Uri of the <see cref="T:System.Windows.Media.DeepZoomImageTileSource" />.</summary>
      <returns>The source Uri of the <see cref="T:System.Windows.Media.DeepZoomImageTileSource" />.</returns>
    </member>
    <member name="F:System.Windows.Media.DeepZoomImageTileSource.UriSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.DeepZoomImageTileSource.UriSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.DeepZoomImageTileSource.UriSource" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.DoubleCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Double" /> values.</summary>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.DoubleCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.EllipseGeometry">
      <summary>Represents the geometry of a circle or ellipse. </summary>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.EllipseGeometry" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.EllipseGeometry.Center">
      <summary>Gets or sets the center point of the <see cref="T:System.Windows.Media.EllipseGeometry" />. </summary>
      <returns>The center point of the <see cref="T:System.Windows.Media.EllipseGeometry" />.</returns>
    </member>
    <member name="F:System.Windows.Media.EllipseGeometry.CenterProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.EllipseGeometry.Center" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.EllipseGeometry.Center" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.EllipseGeometry.RadiusX">
      <summary>Gets or sets the x-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry" />.  </summary>
      <returns>The x-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry" />. </returns>
    </member>
    <member name="F:System.Windows.Media.EllipseGeometry.RadiusXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.EllipseGeometry.RadiusX" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.EllipseGeometry.RadiusX" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.EllipseGeometry.RadiusY">
      <summary>Gets or sets the y-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry" />. </summary>
      <returns>The y-radius value of the <see cref="T:System.Windows.Media.EllipseGeometry" />.</returns>
    </member>
    <member name="F:System.Windows.Media.EllipseGeometry.RadiusYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.EllipseGeometry.RadiusY" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.EllipseGeometry.RadiusY" /> dependency property identifier.</returns>
    </member>
    <member name="T:System.Windows.Media.FillRule">
      <summary>Specifies how the intersecting areas of <see cref="T:System.Windows.Media.PathFigure" /> objects contained in a <see cref="T:System.Windows.Media.Geometry" /> are combined to form the area of the <see cref="T:System.Windows.Media.Geometry" />.</summary>
    </member>
    <member name="F:System.Windows.Media.FillRule.EvenOdd">
      <summary>Rule that determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction and counting the number of path segments within the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.</summary>
    </member>
    <member name="F:System.Windows.Media.FillRule.Nonzero">
      <summary>Rule that determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of 0, add one each time a segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is 0 then the point is outside the path. Otherwise, it is inside.</summary>
    </member>
    <member name="T:System.Windows.Media.FontFamily">
      <summary>Represents a family of related fonts.</summary>
    </member>
    <member name="M:System.Windows.Media.FontFamily.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.FontFamily" /> class from the specified font family string.</summary>
      <param name="familyName">The family name or names that comprise the new <see cref="T:System.Windows.Media.FontFamily" />. See "Font Family Grammar" in Remarks.</param>
    </member>
    <member name="M:System.Windows.Media.FontFamily.Equals(System.Object)">
      <summary>Gets a value that indicates whether the current font family object and the specified font family object are the same.</summary>
      <returns>true if <paramref name="o" /> is equal to the current <see cref="T:System.Windows.Media.FontFamily" /> object; otherwise, false. If <paramref name="o" /> is not a <see cref="T:System.Windows.Media.FontFamily" /> object, false is returned.</returns>
      <param name="o">The object to compare.</param>
    </member>
    <member name="M:System.Windows.Media.FontFamily.GetHashCode">
      <summary>Serves as a hash function for <see cref="T:System.Windows.Media.FontFamily" />.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamily.Source">
      <summary>Gets the font family name that is used to construct the <see cref="T:System.Windows.Media.FontFamily" /> object.</summary>
      <returns>The font family name of the <see cref="T:System.Windows.Media.FontFamily" /> object.</returns>
    </member>
    <member name="M:System.Windows.Media.FontFamily.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Windows.Media.FontFamily" />.</summary>
      <returns>The input font family string.</returns>
    </member>
    <member name="T:System.Windows.Media.GeneralTransform">
      <summary>Provides generalized transformation support for objects, such as points and rectangles.</summary>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.GeneralTransform" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.GeneralTransform.Inverse">
      <summary>Gets the inverse transformation of this <see cref="T:System.Windows.Media.GeneralTransform" />, if possible.</summary>
      <returns>An inverse of this instance, if possible; otherwise null.</returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.Transform(System.Windows.Point)">
      <summary>Transforms the specified point and returns the result.</summary>
      <returns>The result of transforming <paramref name="point" />.</returns>
      <param name="point">The point to transform.</param>
      <exception cref="T:System.InvalidOperationException">The transform did not succeed.</exception>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.TransformBounds(System.Windows.Rect)">
      <summary>When overridden in a derived class, transforms the specified bounding box and returns an axis-aligned bounding box that is exactly large enough to contain it.</summary>
      <returns>The smallest axis-aligned bounding box possible that contains the transformed <paramref name="rect" />.</returns>
      <param name="rect">The bounding box to transform.</param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
      <summary>When overridden in a derived class, attempts to transform the specified point and returns a value that indicates whether the transformation was successful.</summary>
      <returns>true if <paramref name="inPoint" /> was transformed; otherwise, false.</returns>
      <param name="inPoint">The point to transform.</param>
      <param name="outPoint">The result of transforming <paramref name="inPoint" />.</param>
    </member>
    <member name="T:System.Windows.Media.Geometry">
      <summary>Provides a base class for objects that define geometric shapes. <see cref="T:System.Windows.Media.Geometry" /> objects can be used for clipping regions and as geometry definitions for rendering two-dimensional graphic data as a <see cref="T:System.Windows.Shapes.Path" />.</summary>
    </member>
    <member name="P:System.Windows.Media.Geometry.Bounds">
      <summary>Gets a <see cref="T:System.Windows.Rect" /> that specifies the axis-aligned bounding box of the <see cref="T:System.Windows.Media.Geometry" />.</summary>
      <returns>The axis-aligned bounding box of the <see cref="T:System.Windows.Media.Geometry" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Geometry.Empty">
      <summary>Gets an empty geometry object.</summary>
      <returns>The empty geometry object.</returns>
    </member>
    <member name="P:System.Windows.Media.Geometry.StandardFlatteningTolerance">
      <summary>Gets the standard tolerance used for polygonal approximation.</summary>
      <returns>The standard tolerance. The default value is 0.25.</returns>
    </member>
    <member name="P:System.Windows.Media.Geometry.Transform">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Transform" /> object applied to a <see cref="T:System.Windows.Media.Geometry" />. </summary>
      <returns>The transformation applied to the <see cref="T:System.Windows.Media.Geometry" />. Note that this value may be a single <see cref="T:System.Windows.Media.Transform" /> or a <see cref="T:System.Windows.Media.TransformCollection" /> cast as a <see cref="T:System.Windows.Media.Transform" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Geometry.TransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Geometry.Transform" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Geometry.Transform" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.GeometryCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Geometry" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.GeometryCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.GeometryGroup">
      <summary>Represents a composite geometry, composed of other <see cref="T:System.Windows.Media.Geometry" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.GeometryGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.GeometryGroup" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.GeometryGroup.Children">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.GeometryCollection" /> that contains the objects that define this <see cref="T:System.Windows.Media.GeometryGroup" />.  </summary>
      <returns>A collection containing the children of this <see cref="T:System.Windows.Media.GeometryGroup" />.</returns>
    </member>
    <member name="F:System.Windows.Media.GeometryGroup.ChildrenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.GeometryGroup.Children" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.GeometryGroup.Children" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.GeometryGroup.FillRule">
      <summary>Gets or sets how the intersecting areas of the objects contained in this <see cref="T:System.Windows.Media.GeometryGroup" /> are combined.  </summary>
      <returns>One of the enumeration values that specifies how the intersecting areas are combined to form the resulting area. The default is <see cref="F:System.Windows.Media.FillRule.EvenOdd" />.</returns>
    </member>
    <member name="F:System.Windows.Media.GeometryGroup.FillRuleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.GeometryGroup.FillRule" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.GeometryGroup.FillRule" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.GradientBrush">
      <summary>An abstract class that describes a gradient, composed of gradient stops. Classes that derive from <see cref="T:System.Windows.Media.GradientBrush" /> describe different ways of interpreting gradient stops. </summary>
    </member>
    <member name="M:System.Windows.Media.GradientBrush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.GradientBrush" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.ColorInterpolationMode">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.ColorInterpolationMode" /> enumeration value that specifies how the gradient's colors are interpolated.  </summary>
      <returns>Specifies how the colors in a gradient are interpolated. The default is <see cref="F:System.Windows.Media.ColorInterpolationMode.SRgbLinearInterpolation" />. </returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.ColorInterpolationModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.GradientBrush.ColorInterpolationMode" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.GradientBrush.ColorInterpolationMode" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.GradientStops">
      <summary>Gets or sets the brush's gradient stops. </summary>
      <returns>A collection of the <see cref="T:System.Windows.Media.GradientStop" /> objects associated with the brush, each of which specifies a color and an offset along the brush's gradient axis. The default is an empty <see cref="T:System.Windows.Media.GradientStopCollection" />. </returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.GradientStopsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.GradientBrush.GradientStops" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.GradientBrush.GradientStops" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.MappingMode">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.BrushMappingMode" /> enumeration value that specifies whether the positioning coordinates of the gradient brush are absolute or relative to the output area.</summary>
      <returns>A <see cref="T:System.Windows.Media.BrushMappingMode" /> value that specifies how to interpret the gradient brush's positioning coordinates. The default is <see cref="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox" />.</returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.MappingModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.GradientBrush.MappingMode" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.GradientBrush.MappingMode" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.SpreadMethod">
      <summary>Gets or sets the type of spread method that specifies how to draw a gradient that starts or ends inside the bounds of the object to be painted. </summary>
      <returns>The type of spread method used to paint the gradient. The default is <see cref="F:System.Windows.Media.GradientSpreadMethod.Pad" />.</returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.SpreadMethodProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.GradientBrush.SpreadMethod" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.GradientBrush.SpreadMethod" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.GradientSpreadMethod">
      <summary>Specifies how to draw the gradient outside a gradient brush's gradient vector or space.  </summary>
    </member>
    <member name="F:System.Windows.Media.GradientSpreadMethod.Pad">
      <summary>The color values at the ends of the gradient vector fill the remaining space. </summary>
    </member>
    <member name="F:System.Windows.Media.GradientSpreadMethod.Reflect">
      <summary>The gradient is repeated in the reverse direction until the space is filled. </summary>
    </member>
    <member name="F:System.Windows.Media.GradientSpreadMethod.Repeat">
      <summary>The gradient is repeated in the original direction until the space is filled. </summary>
    </member>
    <member name="T:System.Windows.Media.GradientStop">
      <summary>Describes the location and color of a transition point in a gradient. </summary>
    </member>
    <member name="M:System.Windows.Media.GradientStop.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.GradientStop" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.GradientStop.Color">
      <summary>Gets or sets the color of the gradient stop. </summary>
      <returns>The color of the gradient stop. The default is <see cref="P:System.Windows.Media.Colors.Transparent" />.</returns>
    </member>
    <member name="F:System.Windows.Media.GradientStop.ColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.GradientStop.Color" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.GradientStop.Color" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.GradientStop.Offset">
      <summary>Gets the location of the gradient stop within the gradient vector. </summary>
      <returns>The relative location of this gradient stop along the gradient vector. The default is 0. </returns>
    </member>
    <member name="F:System.Windows.Media.GradientStop.OffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.GradientStop.Offset" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.GradientStop.Offset" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.GradientStopCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.GradientStop" /> objects that can be individually accessed by index. </summary>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.GradientStopCollection" /> class. </summary>
    </member>
    <member name="T:System.Windows.Media.ImageBrush">
      <summary>Paints an area with an image. </summary>
    </member>
    <member name="M:System.Windows.Media.ImageBrush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.ImageBrush" /> class. </summary>
    </member>
    <member name="E:System.Windows.Media.ImageBrush.ImageFailed">
      <summary>Occurs when there is an error associated with image retrieval or format.</summary>
    </member>
    <member name="E:System.Windows.Media.ImageBrush.ImageOpened">
      <summary>Occurs when the image source is downloaded and decoded with no failure. You can use this event to determine the size of an image before rendering it.</summary>
    </member>
    <member name="P:System.Windows.Media.ImageBrush.ImageSource">
      <summary>Gets or sets the image displayed by this <see cref="T:System.Windows.Media.ImageBrush" />.</summary>
      <returns>The image displayed by this <see cref="T:System.Windows.Media.ImageBrush" />.</returns>
    </member>
    <member name="F:System.Windows.Media.ImageBrush.ImageSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ImageBrush.ImageSource" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.ImageBrush.ImageSource" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.ImageSource">
      <summary>Provides an object source type for <see cref="P:System.Windows.Controls.Image.Source" />, <see cref="P:System.Windows.Controls.MultiScaleImage.Source" />, and <see cref="P:System.Windows.Media.ImageBrush.ImageSource" />.</summary>
    </member>
    <member name="T:System.Windows.Media.ImageSourceConverter">
      <summary>Converts a <see cref="T:System.Windows.Media.ImageSource" /> to and from other data types.</summary>
    </member>
    <member name="M:System.Windows.Media.ImageSourceConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.ImageSourceConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.ImageSourceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the converter can convert an object of the given type to an instance of <see cref="T:System.Windows.Media.ImageSource" />.</summary>
      <returns>true if the converter can convert the provided type to an instance of <see cref="T:System.Windows.Media.ImageSource" />; otherwise, false.</returns>
      <param name="context">Type context information used to evaluate conversion.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.ImageSourceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.Media.ImageSource" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.ImageSource" />.</returns>
      <param name="context">Type context information used for conversion.</param>
      <param name="culture">Cultural information that is respected during conversion.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null or is an invalid type.</exception>
    </member>
    <member name="T:System.Windows.Media.ImplicitInputBrush">
      <summary>Represents the input bitmap to a shader.</summary>
    </member>
    <member name="M:System.Windows.Media.ImplicitInputBrush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.ImplicitInputBrush" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.LicenseAcquirer">
      <summary>This class handles acquiring licenses for DRM encrypted content.</summary>
    </member>
    <member name="M:System.Windows.Media.LicenseAcquirer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.LicenseAcquirer" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.LicenseAcquirer.LicenseServerUriOverride">
      <summary>Gets or sets a URI value that overrides whatever the license server URI is in the content header.</summary>
      <returns>The URI that overrides the URI provided in the content header (if any). If this value is null (the default), then the system will use whatever license server URI is in the content header.  The default value is null. </returns>
    </member>
    <member name="M:System.Windows.Media.LicenseAcquirer.OnAcquireLicense(System.IO.Stream,System.Uri)">
      <summary>The default implementation of this method calls into the <see cref="T:System.Windows.Controls.MediaElement" /> to acquire a license. Developers should override this method if they want to handle the license acquisition themselves.</summary>
      <param name="licenseChallenge">The SOAP license challenge.</param>
      <param name="licenseServerUri">The URI of the License Server. In the case of PlayReady content with a license server, this value will be the value in the PlayReady header. In the case of WM DRM content and PlayReady content without a license server specified in the header, this value will be null unless the <see cref="P:System.Windows.Media.LicenseAcquirer.LicenseServerUriOverride" /> property has been set, then that value will passed in as the <paramref name="licenseServerUri" />.</param>
    </member>
    <member name="M:System.Windows.Media.LicenseAcquirer.SetLicenseResponse(System.IO.Stream)">
      <summary>Developers call this to return the SOAP body from the http response to the license challenge. The SOAP body is passed in as a stream and contains the entire SOAP response.</summary>
      <param name="licenseResponse">The SOAP body from the http response to the license challenge. The SOAP body is passed in as a stream and contains the entire SOAP response.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="licenseResponse" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified <paramref name="licenseResponse" /> is invalid.</exception>
    </member>
    <member name="T:System.Windows.Media.LinearGradientBrush">
      <summary>Paints an area with a linear gradient. </summary>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.LinearGradientBrush" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.GradientStopCollection,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.LinearGradientBrush" /> class that has the specified <see cref="T:System.Windows.Media.GradientStopCollection" /> and angle.</summary>
      <param name="gradientStopCollection">The <see cref="P:System.Windows.Media.GradientBrush.GradientStops" /> to set on this brush.</param>
      <param name="angle">A <see cref="T:System.Double" /> that represents the angle, in degrees, of the gradient. A value of 0 creates a horizontal gradient, and a value of 90 creates a vertical gradient. Negative values are permitted, as are values over 360 (will be treated as mod 360).</param>
    </member>
    <member name="P:System.Windows.Media.LinearGradientBrush.EndPoint">
      <summary>Gets or sets the ending two-dimensional coordinates of the linear gradient. </summary>
      <returns>The ending two-dimensional coordinates of the linear gradient. The default is a <see cref="T:System.Windows.Point" /> with value 1,1.  </returns>
    </member>
    <member name="F:System.Windows.Media.LinearGradientBrush.EndPointProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.LinearGradientBrush.StartPoint">
      <summary>Gets or sets the starting two-dimensional coordinates of the linear gradient. </summary>
      <returns>The starting two-dimensional coordinates for the linear gradient. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.Media.LinearGradientBrush.StartPointProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.LineGeometry">
      <summary>Represents the geometry of a line. </summary>
    </member>
    <member name="M:System.Windows.Media.LineGeometry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.LineGeometry" /> class that has no length. </summary>
    </member>
    <member name="P:System.Windows.Media.LineGeometry.EndPoint">
      <summary>Gets or sets the end point of a line. </summary>
      <returns>The end point of the line. The default is a <see cref="T:System.Windows.Point" /> with value 0,0. </returns>
    </member>
    <member name="F:System.Windows.Media.LineGeometry.EndPointProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.LineGeometry.EndPoint" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.LineGeometry.EndPoint" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.LineGeometry.StartPoint">
      <summary>Gets or sets the start point of the line. </summary>
      <returns>The start point of the line. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.Media.LineGeometry.StartPointProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.LineGeometry.StartPoint" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.LineGeometry.StartPoint" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.LineSegment">
      <summary>Represents a line drawn between two points, which can be part of a <see cref="T:System.Windows.Media.PathFigure" /> within <see cref="T:System.Windows.Shapes.Path" /> data.</summary>
    </member>
    <member name="M:System.Windows.Media.LineSegment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.LineSegment" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.LineSegment.Point">
      <summary>Gets or sets the end point of the line segment. </summary>
      <returns>The end point of the line segment. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.Media.LineSegment.PointProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.LineSegment.Point" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.LineSegment.Point" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.LogReadyRoutedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.MediaElement.LogReady" /> event.</summary>
    </member>
    <member name="M:System.Windows.Media.LogReadyRoutedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.LogReadyRoutedEventArgs" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.LogReadyRoutedEventArgs.Log">
      <summary>Gets an XML string in the Windows Media Log format that contains the fields listed in the LogFields section.</summary>
      <returns>The XML string in the Windows Media Log format that contains the fields listed in the LogFields section.</returns>
    </member>
    <member name="P:System.Windows.Media.LogReadyRoutedEventArgs.LogSource">
      <summary>Gets a value that indicates why the log was generated.</summary>
      <returns>One of the enumeration values that indicates why the log was generated.</returns>
    </member>
    <member name="T:System.Windows.Media.LogReadyRoutedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.MediaElement.LogReady" /> event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Windows.Media.LogSource">
      <summary>Indicates the reason that a media log was generated.</summary>
    </member>
    <member name="F:System.Windows.Media.LogSource.RequestLog">
      <summary>The <see cref="M:System.Windows.Controls.MediaElement.RequestLog" /> method was called.</summary>
    </member>
    <member name="F:System.Windows.Media.LogSource.Stop">
      <summary>The media stopped.</summary>
    </member>
    <member name="F:System.Windows.Media.LogSource.Seek">
      <summary>A seek operation occurred on the media; that is, playback was moved forward or backward.</summary>
    </member>
    <member name="F:System.Windows.Media.LogSource.Pause">
      <summary>The media paused.</summary>
    </member>
    <member name="F:System.Windows.Media.LogSource.SourceChanged">
      <summary>The source of the media changed.</summary>
    </member>
    <member name="F:System.Windows.Media.LogSource.EndOfStream">
      <summary>The media reached the end of its stream.</summary>
    </member>
    <member name="F:System.Windows.Media.LogSource.MediaElementShutdown">
      <summary>The runtime shut down.</summary>
    </member>
    <member name="F:System.Windows.Media.LogSource.RuntimeShutdown">
      <summary>The runtime shut down.</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary> Represents a 3x3 affine transformation matrix used for transformations in two-dimensional space. </summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <param name="m11">The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M11" /> coefficient.</param>
      <param name="m12">The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M12" /> coefficient.</param>
      <param name="m21">The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M21" /> coefficient.</param>
      <param name="m22">The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M22" /> coefficient.</param>
      <param name="offsetX">The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetX" /> coefficient.</param>
      <param name="offsetY">The <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetY" /> coefficient.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" /> structure; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Media.Matrix" /> structure is identical to this instance. </summary>
      <returns>true if instances are equal; otherwise, false. </returns>
      <param name="value">The instance of <see cref="T:System.Windows.Media.Matrix" /> to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary>Gets an identity <see cref="T:System.Windows.Media.Matrix" />. </summary>
      <returns>An identity matrix.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix. </summary>
      <returns>true if the <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>Gets or sets the value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary> Gets or sets the value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary>Gets or sets the value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>Gets or sets the value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>Gets or sets the value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.  </summary>
      <returns>The value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>Gets or sets the value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>The value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are identical.</summary>
      <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are identical; otherwise, false.</returns>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are not identical.</summary>
      <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are not identical; otherwise, false.</returns>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format.</returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the IFormattable implementation. </param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" />, and <see cref="P:System.Windows.Media.Matrix.OffsetY" /> values of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Matrix" /> structure with culture-specific formatting information. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" />, and <see cref="P:System.Windows.Media.Matrix.OffsetY" /> values of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <param name="provider">The culture-specific formatting information.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>Transforms the specified point by the <see cref="T:System.Windows.Media.Matrix" /> and returns the result.</summary>
      <returns>The result of transforming <paramref name="point" /> by this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <param name="point">The point to transform.</param>
    </member>
    <member name="T:System.Windows.Media.Matrix3DProjection">
      <summary>Enables you to apply a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> to an object.</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix3DProjection.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Windows.Media.Matrix3DProjection" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Matrix3DProjection.ProjectionMatrix">
      <summary>Gets or sets the Matrix3D used for the projection applied to the object.</summary>
      <returns>The Matrix3D used for the projection applied to the object.</returns>
    </member>
    <member name="F:System.Windows.Media.Matrix3DProjection.ProjectionMatrixProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Matrix3DProjection.ProjectionMatrix" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.MatrixTransform">
      <summary>Creates an arbitrary affine matrix transformation that is used to manipulate objects or coordinate systems in a two-dimensional plane.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.MatrixTransform" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.MatrixTransform.Matrix">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Matrix" /> that defines this transformation. </summary>
      <returns>The <see cref="T:System.Windows.Media.Matrix" /> structure that defines this transformation. The default is an identity <see cref="T:System.Windows.Media.Matrix" />. An identity matrix has a value of 1 in coefficients [1,1], [2,2], and [3,3]; and a value of 0 in the rest of the coefficients.</returns>
    </member>
    <member name="F:System.Windows.Media.MatrixTransform.MatrixProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.MatrixTransform.Matrix" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.MatrixTransform.Matrix" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.MediaElementState">
      <summary>Defines the potential states of a <see cref="T:System.Windows.Controls.MediaElement" /> object.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Closed">
      <summary>The <see cref="T:System.Windows.Controls.MediaElement" /> contains no media. The <see cref="T:System.Windows.Controls.MediaElement" /> displays a transparent frame.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Opening">
      <summary>The <see cref="T:System.Windows.Controls.MediaElement" /> is validating and attempting to open the Uniform Resource Identifier (URI) specified by its <see cref="P:System.Windows.Controls.MediaElement.Source" /> property. While in this state, the <see cref="T:System.Windows.Controls.MediaElement" /> queues any <see cref="M:System.Windows.Controls.MediaElement.Play" />, <see cref="M:System.Windows.Controls.MediaElement.Pause" />, or <see cref="M:System.Windows.Controls.MediaElement.Stop" /> commands it receives and processes them if the media is successfully opened.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Individualizing">
      <summary>The <see cref="T:System.Windows.Controls.MediaElement" /> is in the process of ensuring that proper individualization components (only applicable when playing DRM protected content) are installed on the user's computer. See Digital Rights Management (DRM) for more information.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.AcquiringLicense">
      <summary>The <see cref="T:System.Windows.Controls.MediaElement" /> is acquiring a license required to play DRM protected content. Once <see cref="M:System.Windows.Media.LicenseAcquirer.OnAcquireLicense(System.IO.Stream,System.Uri)" /> has been called, the <see cref="T:System.Windows.Controls.MediaElement" /> will remain in this state until <see cref="M:System.Windows.Media.LicenseAcquirer.SetLicenseResponse(System.IO.Stream)" /> has been called.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Buffering">
      <summary>The <see cref="T:System.Windows.Controls.MediaElement" /> is loading the media for playback. Its <see cref="P:System.Windows.Controls.MediaElement.Position" /> does not advance during this state. If the <see cref="T:System.Windows.Controls.MediaElement" /> was already playing video, it continues to display the last displayed frame.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Playing">
      <summary>The <see cref="T:System.Windows.Controls.MediaElement" /> is playing the media specified by its source property. Its <see cref="P:System.Windows.Controls.MediaElement.Position" /> advances forward.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Paused">
      <summary>The <see cref="T:System.Windows.Controls.MediaElement" /> does not advance its <see cref="P:System.Windows.Controls.MediaElement.Position" />. If the <see cref="T:System.Windows.Controls.MediaElement" /> was playing video, it continues to display the current frame.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaElementState.Stopped">
      <summary>The <see cref="T:System.Windows.Controls.MediaElement" /> contains media but is not playing or paused. Its <see cref="P:System.Windows.Controls.MediaElement.Position" /> is 0 and does not advance. If the loaded media is video, the <see cref="T:System.Windows.Controls.MediaElement" /> displays the first frame.</summary>
    </member>
    <member name="T:System.Windows.Media.MediaSampleAttributeKeys">
      <summary>Describes the media sample.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaSampleAttributeKeys.KeyFrameFlag">
      <summary>Data about the sample needed to decrypt it.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaSampleAttributeKeys.DRMInitializationVector">
      <summary>A Boolean value describing whether or not the given video frame is a keyframe.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaSampleAttributeKeys.FrameWidth">
      <summary>Height of the video frame.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaSampleAttributeKeys.FrameHeight">
      <summary>Width of the video frame.</summary>
    </member>
    <member name="T:System.Windows.Media.MediaSourceAttributesKeys">
      <summary>Describes the media source.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaSourceAttributesKeys.CanSeek">
      <summary>A Boolean value that describes whether this source can seek.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaSourceAttributesKeys.Duration">
      <summary>The length of playback time of this source as an integer in 100-nanosecond increments.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaSourceAttributesKeys.DRMHeader">
      <summary>DRM data that the pipeline needs to initialize and decrypt correctly. This is the DRM header represented as a string.</summary>
    </member>
    <member name="T:System.Windows.Media.MediaStreamAttributeKeys">
      <summary>Specifies an attribute name that describes the media stream.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamAttributeKeys.CodecPrivateData">
      <summary>Codec data that the pipeline needs to initialize and render correctly.  For video, this is other header information. For audio, this is the base16-encoded WaveFormatEx structure.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamAttributeKeys.VideoFourCC">
      <summary>Data needed to instantiate a video codec. This is the four-character value also known as a FourCC.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamAttributeKeys.Width">
      <summary>The integer width a video frame is to be rendered at.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamAttributeKeys.Height">
      <summary>The integer height a video frame is to be rendered at.</summary>
    </member>
    <member name="T:System.Windows.Media.MediaStreamDescription">
      <summary>This class describes a media stream in enough detail to initialize the <see cref="T:System.Windows.Controls.MediaElement" /> and the underlying media pipeline.</summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamDescription.#ctor(System.Windows.Media.MediaStreamType,System.Collections.Generic.IDictionary{System.Windows.Media.MediaStreamAttributeKeys,System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.MediaStreamDescription" /> class with the specified values.</summary>
      <param name="type">A value from the enumeration, which is either audio or video.</param>
      <param name="mediaStreamAttributes">A collection of pairs describing other attributes of the overall Media Stream.</param>
      <exception cref="T:System.InvalidOperationException">The specified <paramref name="type" /> is not audio or video.</exception>
    </member>
    <member name="P:System.Windows.Media.MediaStreamDescription.MediaAttributes">
      <summary>Gets a collection of attributes about the media stream. This collection only contains attributes that are used to initialize the media pipeline and the <see cref="T:System.Windows.Controls.MediaElement" />.</summary>
      <returns>A collection of attributes about the media stream. The default value is Empty IDictionary&lt;MediaStreamAttributeKeys, string&gt;.</returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamDescription.StreamId">
      <summary>Gets the stream ID of the stream being described.</summary>
      <returns>The stream ID of the stream being described.</returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamDescription.Type">
      <summary>Gets the type of stream that is being described which is either <see cref="F:System.Windows.Media.MediaStreamType.Audio" /> or <see cref="F:System.Windows.Media.MediaStreamType.Video" />.</summary>
      <returns>The type of stream that is being described which is either <see cref="F:System.Windows.Media.MediaStreamType.Audio" /> or <see cref="F:System.Windows.Media.MediaStreamType.Video" />. The default value is <see cref="F:System.Windows.Media.MediaStreamType.Video" />.</returns>
    </member>
    <member name="T:System.Windows.Media.MediaStreamSample">
      <summary>This class describes a media sample in enough detail to allow the <see cref="T:System.Windows.Controls.MediaElement" /> and underlying pipeline to render the sample.</summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSample.#ctor(System.Windows.Media.MediaStreamDescription,System.IO.Stream,System.Int64,System.Int64,System.Int64,System.Collections.Generic.IDictionary{System.Windows.Media.MediaSampleAttributeKeys,System.String})">
      <summary>Instantiates a new instance of the <see cref="T:System.Windows.Media.MediaStreamSample" /> class.</summary>
      <param name="mediaStreamDescription">A description of the stream this sample was pulled from.</param>
      <param name="stream">A stream containing the desired media sample.</param>
      <param name="offset">The offset into the stream where the actual sample data begins.</param>
      <param name="count">The number of bytes that comprises the sample data.</param>
      <param name="timestamp">The time from the beginning of the media file at which this sample should be rendered as expressed using 100 nanosecond increments.</param>
      <param name="attributes">A collection of pairs describing other attributes of the media sample.</param>
      <exception cref="T:System.InvalidOperationException">One or more parameters are invalid.</exception>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.Attributes">
      <summary>Gets a collection of attributes describing to the <see cref="T:System.Windows.Controls.MediaElement" /> and media pipeline how to render this sample.</summary>
      <returns>A collection of attributes describing to the <see cref="T:System.Windows.Controls.MediaElement" /> and media pipeline how to render this sample. The default value is Empty IDictionary&lt;MediaSampleAttributeKeys, string&gt;</returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.Count">
      <summary>Gets the number of bytes into the stream where the sample ends.</summary>
      <returns>The number of bytes into the stream where the sample ends. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.MediaStreamDescription">
      <summary>Gets the description of the stream that this sample came from.</summary>
      <returns>The description of the stream that this sample came from. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.Offset">
      <summary>Gets the byte offset into the stream where the sample comes from. For sample streams that contain a header as well, this is set to where the actual sample begins.</summary>
      <returns>The byte offset into the stream where the sample comes from. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.Stream">
      <summary>Gets the stream of data representing the sample. </summary>
      <returns>The stream of data representing the sample. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSample.Timestamp">
      <summary>Gets the time at which a sample should be rendered as measured in 100 nanosecond increments.</summary>
      <returns>The time at which a sample should be rendered as measured in 100 nanosecond increments. The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.Media.MediaStreamSource">
      <summary>Enables <see cref="T:System.Windows.Controls.MediaElement" /> to use a container format other than ASF.</summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.MediaStreamSource" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.MediaStreamSource.AudioBufferLength">
      <summary>Gets or sets the length of the audio buffer.</summary>
      <returns>The length of the audio buffer.</returns>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.CloseMedia">
      <summary>Closes down the open media streams and otherwise cleans up the <see cref="T:System.Windows.Media.MediaStreamSource" />. The <see cref="T:System.Windows.Controls.MediaElement" /> can call this method when going through normal shutdown or as a result of an error.</summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ErrorOccurred(System.String)">
      <summary>Developers call this method whenever an unrecoverable error has occurred in the <see cref="T:System.Windows.Media.MediaStreamSource" />. This will cause the <see cref="E:System.Windows.Controls.MediaElement.MediaFailed" /> event to be raised.</summary>
      <param name="errorDescription">A string describing the error.</param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.GetDiagnosticAsync(System.Windows.Media.MediaStreamSourceDiagnosticKind)">
      <summary>Gathers the diagnostic information requested.</summary>
      <param name="diagnosticKind">A member of the <see cref="T:System.Windows.Media.MediaStreamSourceDiagnosticKind" /> enumeration describing what type of information is desired. </param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.GetSampleAsync(System.Windows.Media.MediaStreamType)">
      <summary>Causes the <see cref="T:System.Windows.Media.MediaStreamSource" /> to prepare a <see cref="T:System.Windows.Media.MediaStreamSample" /> describing the next media sample to be rendered by the media pipeline. This method can be responded to by both <see cref="M:System.Windows.Media.MediaStreamSource.ReportGetSampleCompleted(System.Windows.Media.MediaStreamSample)" /> and <see cref="M:System.Windows.Media.MediaStreamSource.ReportGetSampleProgress(System.Double)" />.</summary>
      <param name="mediaStreamType">The description of the stream that the next sample should come from which will be either <see cref="F:System.Windows.Media.MediaStreamType.Audio" /> or <see cref="F:System.Windows.Media.MediaStreamType.Video" />.</param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.OpenMediaAsync">
      <summary>Collects the metadata required to instantiate a collection of <see cref="T:System.Windows.Media.MediaStreamDescription" /> objects and then instantiates it.</summary>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportGetDiagnosticCompleted(System.Windows.Media.MediaStreamSourceDiagnosticKind,System.Int64)">
      <summary>Developers call this method to pass the requested diagnostic information to the <see cref="T:System.Windows.Controls.MediaElement" />.</summary>
      <param name="diagnosticKind">The type of diagnostic that you are returning a value for.</param>
      <param name="diagnosticValue">If a request was made for DownloadProgress, then the percentage downloaded should be passed in as a value in the range [0:1].</param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportGetSampleCompleted(System.Windows.Media.MediaStreamSample)">
      <summary>Developers call this method to give the <see cref="T:System.Windows.Controls.MediaElement" /> a media sample to be rendered.</summary>
      <param name="mediaStreamSample">The description of the media stream that this sample came from. Passing in null indicates that a stream has ended.</param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportGetSampleProgress(System.Double)">
      <summary>Developers call this method to inform the <see cref="T:System.Windows.Controls.MediaElement" /> that it will not return a sample right now because it has dipped below its requested buffering level.</summary>
      <param name="bufferingProgress">A value between 0 and 1 indicating what percentage of the buffer is filled.</param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportOpenMediaCompleted(System.Collections.Generic.IDictionary{System.Windows.Media.MediaSourceAttributesKeys,System.String},System.Collections.Generic.IEnumerable{System.Windows.Media.MediaStreamDescription})">
      <summary>Call this method to report to a <see cref="T:System.Windows.Controls.MediaElement" /> that a <see cref="T:System.Windows.Media.MediaStreamSource" /> is attached to that the media has been opened and that the <see cref="T:System.Windows.Media.MediaStreamSource" /> has descriptions for the streams of content it contains.</summary>
      <param name="mediaStreamAttributes">A collection of attributes describing features of the entire media stream. Currently supported attributes:Duration: What is the duration of the file DRMHeader: The PlayReady DRM header describing the encryption of the file. Information from within this header will be used to post a license challenge to a PlayReady license serverCanSeek: A Boolean indicating whether or not this stream is seekable.</param>
      <param name="availableMediaStreams">A description of each audio and video stream contained within the content.</param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportSeekCompleted(System.Int64)">
      <summary>Call this method to report to a <see cref="T:System.Windows.Controls.MediaElement" /> that a <see cref="T:System.Windows.Media.MediaStreamSource" /> is attached to that the requested Seek has now been handled.</summary>
      <param name="timeSeekedTo">The number of ticks (nanoseconds) into the file where the actual seek took place.</param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.ReportSwitchMediaStreamCompleted(System.Windows.Media.MediaStreamDescription)">
      <summary>Call this method to report to a <see cref="T:System.Windows.Controls.MediaElement" /> that a <see cref="T:System.Windows.Media.MediaStreamSource" /> is attached to the requested stream switch which has now been completed and that samples returned will now be from the requested stream instead of the original stream. (Note: This is meant for the multiple audio stream case (language tracks) and not the adaptive streaming case)</summary>
      <param name="mediaStreamDescription">The description of the stream actually switched to. This should be the same stream as what was requested by <see cref="M:System.Windows.Media.MediaStreamSource.SwitchMediaStreamAsync(System.Windows.Media.MediaStreamDescription)" />.</param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.SeekAsync(System.Int64)">
      <summary>Takes the given offset and ensures that future calls to <see cref="M:System.Windows.Media.MediaStreamSource.GetSampleAsync(System.Windows.Media.MediaStreamType)" /> will be returned samples starting at that point.</summary>
      <param name="seekToTime">The time as represented by 100 nanosecond increments since the beginning of the media file to seek to.</param>
    </member>
    <member name="M:System.Windows.Media.MediaStreamSource.SwitchMediaStreamAsync(System.Windows.Media.MediaStreamDescription)">
      <summary>Called when a stream switch is requested on the <see cref="T:System.Windows.Controls.MediaElement" />.</summary>
      <param name="mediaStreamDescription">The stream switched to.</param>
    </member>
    <member name="T:System.Windows.Media.MediaStreamSourceDiagnosticKind">
      <summary>Describes the type of diagnostic information used by the media.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamSourceDiagnosticKind.BufferLevelInMilliseconds">
      <summary>Represents a download buffer in milliseconds.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamSourceDiagnosticKind.BufferLevelInBytes">
      <summary>Represents a download buffer in bytes.</summary>
    </member>
    <member name="T:System.Windows.Media.MediaStreamType">
      <summary>Enumeration that specifies the type of stream.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamType.Audio">
      <summary>The stream is an audio stream.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamType.Video">
      <summary>The stream is a video stream.</summary>
    </member>
    <member name="F:System.Windows.Media.MediaStreamType.Script">
      <summary>The stream is a script stream. Note: Currently script commands are not supported in <see cref="T:System.Windows.Media.MediaStreamSource" />.</summary>
    </member>
    <member name="T:System.Windows.Media.MultiScaleTileSource">
      <summary>Used to specify the source of Deep Zoom images. </summary>
    </member>
    <member name="M:System.Windows.Media.MultiScaleTileSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.MultiScaleTileSource" /> class with the specified parameters.</summary>
      <param name="imageWidth">The width of the Deep Zoom image.</param>
      <param name="imageHeight">The height of the Deep Zoom image.</param>
      <param name="tileWidth">The width of the tiles in the Deep Zoom image.</param>
      <param name="tileHeight">The height of the tiles in the Deep Zoom image.</param>
      <param name="tileOverlap">How much the tiles in the Deep Zoom image overlap.</param>
      <exception cref="T:System.ArgumentException">One or more arguments are invalid.</exception>
    </member>
    <member name="M:System.Windows.Media.MultiScaleTileSource.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.MultiScaleTileSource" /> class with the specified parameters.</summary>
      <param name="imageWidth">The width of the Deep Zoom image.</param>
      <param name="imageHeight">The height of the Deep Zoom image.</param>
      <param name="tileWidth">The width of the tiles in the Deep Zoom image.</param>
      <param name="tileHeight">The height of the tiles in the Deep Zoom image.</param>
      <param name="tileOverlap">How much the tiles in the Deep Zoom image overlap.</param>
      <exception cref="T:System.ArgumentException">One or more arguments are invalid.</exception>
    </member>
    <member name="M:System.Windows.Media.MultiScaleTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
      <summary>Gets a collection of the URIs that comprise the Deep Zoom image.</summary>
      <param name="tileLevel">Level of the tile.</param>
      <param name="tilePositionX">X-coordinate position of the tile.</param>
      <param name="tilePositionY">Y-coordinate position of the tile.</param>
      <param name="tileImageLayerSources">Source of the tile image layer, which is a collection of URIs.</param>
    </member>
    <member name="M:System.Windows.Media.MultiScaleTileSource.InvalidateTileLayer(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Invalidates specified tile layers.</summary>
      <param name="level">Tile level.</param>
      <param name="tilePositionX">X position of the tile.</param>
      <param name="tilePositionY">Y position of the tile.</param>
      <param name="tileLayer">Layer of the tile.</param>
    </member>
    <member name="P:System.Windows.Media.MultiScaleTileSource.TileBlendTime">
      <summary>Gets or sets the amount of time to blend a new level of detail when a tile becomes available.</summary>
      <returns>The amount of time to blend a new level of detail when a tile becomes available.</returns>
    </member>
    <member name="T:System.Windows.Media.PathFigure">
      <summary>Represents a subsection of a geometry, a single connected series of two-dimensional geometric segments. </summary>
    </member>
    <member name="M:System.Windows.Media.PathFigure.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.PathFigure" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.PathFigure.IsClosed">
      <summary>Gets or sets a value that indicates whether this figure's first and last segments are connected.  </summary>
      <returns>true if this figure's first and last segments are connected; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.IsClosedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PathFigure.IsClosed" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PathFigure.IsClosed" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PathFigure.IsFilled">
      <summary>Gets or sets a value that indicates whether the contained area of this <see cref="T:System.Windows.Media.PathFigure" /> is to be used for hit-testing, rendering, and clipping.  </summary>
      <returns>true if the contained area of this <see cref="T:System.Windows.Media.PathFigure" /> is to be used for hit-testing, rendering, and clipping; otherwise, false.  The default is true.</returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.IsFilledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PathFigure.IsFilled" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PathFigure.IsFilled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PathFigure.Segments">
      <summary>Gets or sets the collection of segments that define the shape of this <see cref="T:System.Windows.Media.PathFigure" /> object. </summary>
      <returns>The collection of segments that define the shape of this <see cref="T:System.Windows.Media.PathFigure" /> object. The default is an empty collection.</returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.SegmentsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PathFigure.Segments" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PathFigure.Segments" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PathFigure.StartPoint">
      <summary>Gets or sets the <see cref="T:System.Windows.Point" /> where the <see cref="T:System.Windows.Media.PathFigure" /> begins. </summary>
      <returns>The <see cref="T:System.Windows.Point" /> where the <see cref="T:System.Windows.Media.PathFigure" /> begins. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.StartPointProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PathFigure.StartPoint" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PathFigure.StartPoint" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.PathFigureCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.PathFigure" /> objects that collectively make up the geometry of a <see cref="T:System.Windows.Media.PathGeometry" />. </summary>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.PathFigureCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.PathGeometry">
      <summary>Represents a complex shape that may be composed of arcs, curves, ellipses, lines, and rectangles. </summary>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.PathGeometry" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.PathGeometry.Figures">
      <summary>Gets or sets the collection of <see cref="T:System.Windows.Media.PathFigure" /> objects that describe the path's contents. </summary>
      <returns>A collection of <see cref="T:System.Windows.Media.PathFigure" /> objects that describe the path's contents. Each individual <see cref="T:System.Windows.Media.PathFigure" /> describes a shape.</returns>
    </member>
    <member name="F:System.Windows.Media.PathGeometry.FiguresProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PathGeometry.Figures" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PathGeometry.Figures" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PathGeometry.FillRule">
      <summary>Gets or sets a value that determines how the intersecting areas contained in the <see cref="T:System.Windows.Media.PathGeometry" /> are combined. </summary>
      <returns>Indicates how the intersecting areas of the <see cref="T:System.Windows.Media.PathGeometry" /> are combined.  The default is <see cref="F:System.Windows.Media.FillRule.EvenOdd" />.</returns>
    </member>
    <member name="F:System.Windows.Media.PathGeometry.FillRuleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PathGeometry.FillRule" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PathGeometry.FillRule" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.PathSegment">
      <summary>Represents a segment of a <see cref="T:System.Windows.Media.PathFigure" /> object.</summary>
    </member>
    <member name="T:System.Windows.Media.PathSegmentCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.PathSegment" /> objects that can be individually accessed by index.</summary>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.PathSegmentCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.PenLineCap">
      <summary>Describes the shape at the end of a line or segment. </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Flat">
      <summary>A cap that does not extend past the last point of the line. Comparable to no line cap.</summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Square">
      <summary>A rectangle that has a height equal to the line thickness and a length equal to half the line thickness. </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Round">
      <summary>A semicircle that has a diameter equal to the line thickness. </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Triangle">
      <summary>An isosceles right triangle whose base length is equal to the thickness of the line. </summary>
    </member>
    <member name="T:System.Windows.Media.PenLineJoin">
      <summary>Describes the shape that joins two lines or segments. </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineJoin.Miter">
      <summary>Line joins use regular angular vertices. </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineJoin.Bevel">
      <summary>Line joins use beveled vertices. </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineJoin.Round">
      <summary>Line joins use rounded vertices. </summary>
    </member>
    <member name="T:System.Windows.Media.PlaneProjection">
      <summary>Represents a perspective transform (a 3-D-like effect) on an object.</summary>
    </member>
    <member name="M:System.Windows.Media.PlaneProjection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.PlaneProjection" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.CenterOfRotationX">
      <summary>Gets or sets the x-coordinate of the center of rotation of the object you rotate. </summary>
      <returns>The x-coordinate of the center of rotation of the object you rotate. Typical values are between 0 and 1 with a value of 0 corresponding to one edge of the object and 1 to the opposite edge. Values outside this range are allowed and move the center of rotation accordingly. The default is 0.5 (the center of object). </returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.CenterOfRotationXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.CenterOfRotationX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.CenterOfRotationX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.CenterOfRotationY">
      <summary>Gets or sets the y-coordinate of the center of rotation of the object you rotate.</summary>
      <returns>The ycoordinate of the center of rotation of the object you rotate. Typical values are between 0 and 1 with a value of 0 corresponding to one edge of the object and 1 to the opposite edge. Values outside this range are allowed and move the center of rotation accordingly. The default is 0.5 (the center of object).</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.CenterOfRotationYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.CenterOfRotationY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.CenterOfRotationY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.CenterOfRotationZ">
      <summary>Gets or sets the z-coordinate of the center of rotation of the object you rotate.</summary>
      <returns>The z-coordinate of the center of rotation of the object you rotate. The default is 0. Values greater than 0 correspond to coordinates out from the plane of the object, and negative values correspond to coordinates behind the plane of the object.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.CenterOfRotationZProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.CenterOfRotationZ" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.CenterOfRotationZ" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.GlobalOffsetX">
      <summary>Gets or sets the distance the object is translated along the x-axis of the screen. </summary>
      <returns>The distance the object is translated along the x-axis of the screen.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.GlobalOffsetXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.GlobalOffsetX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.GlobalOffsetX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.GlobalOffsetY">
      <summary>Gets or sets the distance the object is translated along the y-axis of the screen. </summary>
      <returns>The distance the object is translated along the y-axis of the screen.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.GlobalOffsetYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.GlobalOffsetY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.GlobalOffsetY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.GlobalOffsetZ">
      <summary>Gets or sets the distance the object is translated along the z-axis of the screen.</summary>
      <returns>The distance the object is translated along the z-axis of the screen.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.GlobalOffsetZProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.GlobalOffsetZ" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.GlobalOffsetZ" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.LocalOffsetX">
      <summary>Gets or sets the distance the object is translated along the x-axis of the plane of the object. </summary>
      <returns>The distance the object is translated along the x-axis of the plane of the object.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.LocalOffsetXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.LocalOffsetX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.LocalOffsetX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.LocalOffsetY">
      <summary>Gets or sets the distance the object is translated along the y-axis of the plane of the object.</summary>
      <returns>The distance the object is translated along the y-axis of the plane of the object.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.LocalOffsetYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.LocalOffsetY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.LocalOffsetY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.LocalOffsetZ">
      <summary>Gets or sets the distance the object is translated along the z-axis of the plane of the object.</summary>
      <returns>The distance the object is translated along the z-axis of the plane of the object.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.LocalOffsetZProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.LocalOffsetZ" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.LocalOffsetZ" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.ProjectionMatrix">
      <summary>Gets or sets a projection matrix on the <see cref="T:System.Windows.Media.PlaneProjection" />.</summary>
      <returns>The projection matrix of the <see cref="T:System.Windows.Media.PlaneProjection" />. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.ProjectionMatrixProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.ProjectionMatrix" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.ProjectionMatrix" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.RotationX">
      <summary>Gets or sets the number of degrees to rotate the object around the x-axis of rotation.</summary>
      <returns>The number of degrees to rotate the object around the x-axis of rotation. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.RotationXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.RotationX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.RotationX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.RotationY">
      <summary>Gets or sets the number of degrees to rotate the object around the y-axis of rotation.</summary>
      <returns>The number of degrees to rotate the object around the y-axis of rotation. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.RotationYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.RotationY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.RotationY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.PlaneProjection.RotationZ">
      <summary>Gets or sets the number of degrees to rotate the object around the z-axis of rotation.</summary>
      <returns>The number of degrees to rotate the object around the z-axis of rotation. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.PlaneProjection.RotationZProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PlaneProjection.RotationZ" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PlaneProjection.RotationZ" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.PointCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Point" /> values that can be individually accessed by index.</summary>
    </member>
    <member name="M:System.Windows.Media.PointCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.PointCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.PolyBezierSegment">
      <summary>Represents one or more cubic Bezier curves.</summary>
    </member>
    <member name="M:System.Windows.Media.PolyBezierSegment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.PolyBezierSegment" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.PolyBezierSegment.Points">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.PointCollection" /> that defines this <see cref="T:System.Windows.Media.PolyBezierSegment" /> object.  </summary>
      <returns>The collection of points that defines this <see cref="T:System.Windows.Media.PolyBezierSegment" /> object.</returns>
    </member>
    <member name="F:System.Windows.Media.PolyBezierSegment.PointsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PolyBezierSegment.Points" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PolyBezierSegment.Points" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.PolyLineSegment">
      <summary>Represents a set of line segments defined by a <see cref="T:System.Windows.Media.PointCollection" /> with each <see cref="T:System.Windows.Point" /> specifying the end point of a line segment. </summary>
    </member>
    <member name="M:System.Windows.Media.PolyLineSegment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.PolyLineSegment" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.PolyLineSegment.Points">
      <summary>Gets or sets the collection of <see cref="T:System.Windows.Point" /> values that defines this <see cref="T:System.Windows.Media.PolyLineSegment" /> object. </summary>
      <returns>The points that define this <see cref="T:System.Windows.Media.PolyLineSegment" /> object.</returns>
    </member>
    <member name="F:System.Windows.Media.PolyLineSegment.PointsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PolyLineSegment.Points" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PolyLineSegment.Points" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.PolyQuadraticBezierSegment">
      <summary>Represents a set of quadratic Bezier segments. </summary>
    </member>
    <member name="M:System.Windows.Media.PolyQuadraticBezierSegment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.PolyQuadraticBezierSegment.Points">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.PointCollection" /> that defines this <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> object. </summary>
      <returns>A collection of points that defines the shape of this <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> object. The default value is an empty collection.</returns>
    </member>
    <member name="F:System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.PolyQuadraticBezierSegment.Points" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.PolyQuadraticBezierSegment.Points" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Projection">
      <summary>Provides a base class for projections, which describe how to transform an object in 3-D space using perspective transforms.</summary>
    </member>
    <member name="M:System.Windows.Media.Projection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Projection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.QuadraticBezierSegment">
      <summary>Creates a quadratic Bezier curve between two points in a <see cref="T:System.Windows.Media.PathFigure" />. </summary>
    </member>
    <member name="M:System.Windows.Media.QuadraticBezierSegment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.QuadraticBezierSegment.Point1">
      <summary>Gets or sets the control point of the curve. </summary>
      <returns>The control point of this <see cref="T:System.Windows.Media.QuadraticBezierSegment" />. The default value is a <see cref="T:System.Windows.Point" /> with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.Media.QuadraticBezierSegment.Point1Property">
      <summary>Identifies the <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point1" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point1" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.QuadraticBezierSegment.Point2">
      <summary>Gets or sets the end <see cref="T:System.Windows.Point" /> of this <see cref="T:System.Windows.Media.QuadraticBezierSegment" />. </summary>
      <returns>The end point of this <see cref="T:System.Windows.Media.QuadraticBezierSegment" />. The default value is a <see cref="T:System.Windows.Point" /> with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.Media.QuadraticBezierSegment.Point2Property">
      <summary>Identifies the <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point2" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point2" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.RadialGradientBrush">
      <summary>Paints an area with a radial gradient. A focal point defines the beginning of the gradient, and a circle defines the end point of the gradient. </summary>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.RadialGradientBrush" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.#ctor(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.RadialGradientBrush" /> class with the specified start and stop colors. </summary>
      <param name="startColor">Color value at the focus (<see cref="P:System.Windows.Media.RadialGradientBrush.GradientOrigin" />) of the radial gradient.</param>
      <param name="endColor">Color value at the outer edge of the radial gradient.</param>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.#ctor(System.Windows.Media.GradientStopCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.RadialGradientBrush" /> class that has the specified gradient stops. </summary>
      <param name="gradientStopCollection">The gradient stops to set on this brush.</param>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.Center">
      <summary>Gets or sets the center of the outer circle of the radial gradient. </summary>
      <returns>The two-dimensional point located at the center of the radial gradient. The default value is a <see cref="T:System.Windows.Point" /> with value 0.5,0.5.</returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.CenterProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.RadialGradientBrush.Center" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.RadialGradientBrush.Center" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.GradientOrigin">
      <summary>Gets or sets the location of the focal point that defines the beginning of the gradient. </summary>
      <returns>The two-dimensional point located at the center of the radial gradient. The default value is a <see cref="T:System.Windows.Point" /> with value 0.5,0.5.</returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.GradientOriginProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.RadialGradientBrush.GradientOrigin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.RadialGradientBrush.GradientOrigin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.RadiusX">
      <summary>Gets or sets the horizontal radius of the outer circle of the radial gradient. </summary>
      <returns>The horizontal radius of the outermost circle of the radial gradient. The default value is 0.5.</returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.RadiusXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusX" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.RadiusY">
      <summary>Gets or sets the vertical radius of the outer circle of a radial gradient. </summary>
      <returns>The vertical radius of the outer circle of a radial gradient. The default is 0.5.</returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.RadiusYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusY" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusY" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.RectangleGeometry">
      <summary>Describes a two-dimensional rectangular geometry. </summary>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.RectangleGeometry" /> class, and creates a rectangle with zero area. </summary>
    </member>
    <member name="P:System.Windows.Media.RectangleGeometry.RadiusX">
      <summary>Gets or sets the x-radius of the ellipse that is used to round the corners of the rectangle.</summary>
      <returns>The x-radius of the ellipse used to round the corners of the rectangle geometry. The default is 0. </returns>
    </member>
    <member name="F:System.Windows.Media.RectangleGeometry.RadiusXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.RectangleGeometry.RadiusX" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.RectangleGeometry.RadiusX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.RectangleGeometry.RadiusY">
      <summary>Gets or sets the y-radius of the ellipse that is used to round the corners of the rectangle.  </summary>
      <returns>The y-radius of the ellipse used to round the corners of the rectangle geometry. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.RectangleGeometry.RadiusYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.RectangleGeometry.RadiusY" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.RectangleGeometry.RadiusY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.RectangleGeometry.Rect">
      <summary>Gets or sets the dimensions of the rectangle. </summary>
      <returns>The <see cref="T:System.Windows.Rect" /> structure that describes the position and size of the rectangle. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.RectangleGeometry.RectProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.RectangleGeometry.Rect" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.RectangleGeometry.Rect" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.RenderingEventArgs">
      <summary>Do not use.</summary>
    </member>
    <member name="P:System.Windows.Media.RenderingEventArgs.RenderingTime">
      <summary>Do not use.</summary>
      <returns>Do not use.</returns>
    </member>
    <member name="T:System.Windows.Media.RotateTransform">
      <summary>Rotates an object clockwise about a specified point in a two-dimensional x-y coordinate system. </summary>
    </member>
    <member name="M:System.Windows.Media.RotateTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.RotateTransform" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.RotateTransform.Angle">
      <summary>Gets or sets the angle, in degrees, of clockwise rotation.</summary>
      <returns>The angle, in degrees, of clockwise rotation. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.RotateTransform.AngleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.RotateTransform.Angle" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.RotateTransform.Angle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.RotateTransform.CenterX">
      <summary>Gets or sets the x-coordinate of the rotation center point.</summary>
      <returns>The x-coordinate of the center of rotation. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.RotateTransform.CenterXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.RotateTransform.CenterX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.RotateTransform.CenterX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.RotateTransform.CenterY">
      <summary>Gets or sets the y-coordinate of the rotation center point. </summary>
      <returns>The y-coordinate of the center of rotation. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.RotateTransform.CenterYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.RotateTransform.CenterY" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.ScaleTransform">
      <summary>Scales an object in the two-dimensional x-y coordinate system. </summary>
    </member>
    <member name="M:System.Windows.Media.ScaleTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.ScaleTransform" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.ScaleTransform.CenterX">
      <summary>Gets or sets the x-coordinate of the center point of this <see cref="T:System.Windows.Media.ScaleTransform" />. </summary>
      <returns>The x-coordinate of the center point of this <see cref="T:System.Windows.Media.ScaleTransform" />. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.ScaleTransform.CenterXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ScaleTransform.CenterX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.ScaleTransform.CenterX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.ScaleTransform.CenterY">
      <summary>Gets or sets the y-coordinate of the center point of this <see cref="T:System.Windows.Media.ScaleTransform" />.</summary>
      <returns>The y-coordinate of the center point of this <see cref="T:System.Windows.Media.ScaleTransform" />. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.ScaleTransform.CenterYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ScaleTransform.CenterY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.ScaleTransform.CenterY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.ScaleTransform.ScaleX">
      <summary>Gets or sets the x-axis scale factor.</summary>
      <returns>The scale factor along the x-axis. The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.ScaleTransform.ScaleXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ScaleTransform.ScaleX" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.ScaleTransform.ScaleX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.ScaleTransform.ScaleY">
      <summary>Gets or sets the y-axis scale factor.</summary>
      <returns>The scale factor along the y-axis. The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.ScaleTransform.ScaleYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ScaleTransform.ScaleY" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.ScaleTransform.ScaleY" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.SkewTransform">
      <summary>Represents a two-dimensional skew. </summary>
    </member>
    <member name="M:System.Windows.Media.SkewTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.SkewTransform" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.SkewTransform.AngleX">
      <summary>Gets or sets the x-axis skew angle, which is measured in degrees counterclockwise from the y-axis. </summary>
      <returns>The skew angle, which is measured in degrees counterclockwise from the y-axis. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.SkewTransform.AngleXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.SkewTransform.AngleX" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.SkewTransform.AngleX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.SkewTransform.AngleY">
      <summary>Gets or sets the y-axis skew angle, which is measured in degrees counterclockwise from the x-axis.</summary>
      <returns>The skew angle, which is measured in degrees counterclockwise from the x-axis. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.SkewTransform.AngleYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.SkewTransform.AngleY" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.SkewTransform.AngleY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.SkewTransform.CenterX">
      <summary>Gets or sets the x-coordinate of the transform center. </summary>
      <returns>The x-coordinate of the transform center. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.SkewTransform.CenterXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.SkewTransform.CenterX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.SkewTransform.CenterX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.SkewTransform.CenterY">
      <summary>Gets or sets the y-coordinate of the transform center.</summary>
      <returns>The y-coordinate of the transform center. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.SkewTransform.CenterYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.SkewTransform.CenterY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.SkewTransform.CenterY" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.SolidColorBrush">
      <summary>Paints an area with a solid color. </summary>
    </member>
    <member name="M:System.Windows.Media.SolidColorBrush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.SolidColorBrush" /> class with no color. </summary>
    </member>
    <member name="M:System.Windows.Media.SolidColorBrush.#ctor(System.Windows.Media.Color)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.SolidColorBrush" /> class with the specified <see cref="T:System.Windows.Media.Color" />. </summary>
      <param name="color">The color to apply to the brush.</param>
    </member>
    <member name="P:System.Windows.Media.SolidColorBrush.Color">
      <summary>Gets or sets the color of this <see cref="T:System.Windows.Media.SolidColorBrush" />.</summary>
      <returns>The brush's color. The default value is <see cref="P:System.Windows.Media.Colors.Transparent" />.</returns>
    </member>
    <member name="F:System.Windows.Media.SolidColorBrush.ColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Stretch">
      <summary>Describes how content is resized to fill its allocated space.</summary>
    </member>
    <member name="F:System.Windows.Media.Stretch.None">
      <summary>The content preserves its original size. </summary>
    </member>
    <member name="F:System.Windows.Media.Stretch.Fill">
      <summary>The content is resized to fill the destination dimensions. The aspect ratio is not preserved. </summary>
    </member>
    <member name="F:System.Windows.Media.Stretch.Uniform">
      <summary>The content is resized to fit in the destination dimensions while it preserves its native aspect ratio. </summary>
    </member>
    <member name="F:System.Windows.Media.Stretch.UniformToFill">
      <summary>The content is resized to fill the destination dimensions while it preserves its native aspect ratio. If the aspect ratio of the destination rectangle differs from the source, the source content is clipped to fit in the destination dimensions.</summary>
    </member>
    <member name="T:System.Windows.Media.StyleSimulations">
      <summary>Describes the simulation style of a font.</summary>
    </member>
    <member name="F:System.Windows.Media.StyleSimulations.None">
      <summary>No font style simulation. </summary>
    </member>
    <member name="F:System.Windows.Media.StyleSimulations.BoldSimulation">
      <summary>Bold style simulation. </summary>
    </member>
    <member name="F:System.Windows.Media.StyleSimulations.ItalicSimulation">
      <summary>Italic style simulation. </summary>
    </member>
    <member name="F:System.Windows.Media.StyleSimulations.BoldItalicSimulation">
      <summary>Bold and Italic style simulation. </summary>
    </member>
    <member name="T:System.Windows.Media.SweepDirection">
      <summary>Specifies the direction an elliptical arc is drawn.</summary>
    </member>
    <member name="F:System.Windows.Media.SweepDirection.Counterclockwise">
      <summary>Aarcs are drawn in a counterclockwise (negative-angle) direction.</summary>
    </member>
    <member name="F:System.Windows.Media.SweepDirection.Clockwise">
      <summary>Arcs are drawn in a clockwise (positive-angle) direction.</summary>
    </member>
    <member name="T:System.Windows.Media.TextHintingMode">
      <summary>Specifies whether text rendering is optimized for readability or not.</summary>
    </member>
    <member name="F:System.Windows.Media.TextHintingMode.Fixed">
      <summary>The default text render mode.</summary>
    </member>
    <member name="F:System.Windows.Media.TextHintingMode.Animated">
      <summary>Turns off text rendering optimizations.</summary>
    </member>
    <member name="T:System.Windows.Media.TextOptions">
      <summary>Provides options for controlling the rendering behavior of text.</summary>
    </member>
    <member name="M:System.Windows.Media.TextOptions.GetTextHintingMode(System.Windows.FrameworkElement)">
      <summary>Gets the <see cref="T:System.Windows.Media.TextHintingMode" /> for this <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Media.TextHintingMode" /> for this <see cref="T:System.Windows.FrameworkElement" />.</returns>
      <param name="target">The <see cref="T:System.Windows.FrameworkElement" /> to get this property on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Media.TextOptions.SetTextHintingMode(System.Windows.FrameworkElement,System.Windows.Media.TextHintingMode)">
      <summary>Sets the <see cref="T:System.Windows.Media.TextHintingMode" /> for this <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <param name="target">The <see cref="T:System.Windows.FrameworkElement" /> to set this property on.</param>
      <param name="textHintingMode">The <see cref="T:System.Windows.Media.TextHintingMode" /> to set the <see cref="T:System.Windows.FrameworkElement" /> to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Media.TextOptions.TextHintingMode">
      <summary>Gets or sets a value that indicates whether text rendering is optimized for readability.</summary>
      <returns>A value that indicates whether text rendering is optimized for readability.</returns>
    </member>
    <member name="F:System.Windows.Media.TextOptions.TextHintingModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.TextOptions.TextHintingMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.TextOptions.TextHintingMode" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.TileBrush">
      <summary>Base class that describes a way to paint a region. </summary>
    </member>
    <member name="M:System.Windows.Media.TileBrush.#ctor">
      <summary>Provides initialization for base class values when called by the constructor of a derived class.  </summary>
    </member>
    <member name="P:System.Windows.Media.TileBrush.AlignmentX">
      <summary>Gets or sets the horizontal alignment of content in the <see cref="T:System.Windows.Media.TileBrush" /> base tile. </summary>
      <returns>A value that specifies the horizontal position of <see cref="T:System.Windows.Media.TileBrush" /> content in its base tile. The default value is <see cref="F:System.Windows.Media.AlignmentX.Center" />.</returns>
    </member>
    <member name="F:System.Windows.Media.TileBrush.AlignmentXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.TileBrush.AlignmentX" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.TileBrush.AlignmentX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.TileBrush.AlignmentY">
      <summary>Gets or sets the vertical alignment of content in the <see cref="T:System.Windows.Media.TileBrush" /> base tile. </summary>
      <returns>A value that specifies the vertical position of <see cref="T:System.Windows.Media.TileBrush" /> content in its base tile. The default value is <see cref="F:System.Windows.Media.AlignmentY.Center" />.</returns>
    </member>
    <member name="F:System.Windows.Media.TileBrush.AlignmentYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.TileBrush.AlignmentY" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.TileBrush.AlignmentY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.TileBrush.Stretch">
      <summary>Gets or sets a value that specifies how the content of this <see cref="T:System.Windows.Media.TileBrush" /> stretches to fit its tiles.</summary>
      <returns>A value that specifies how this <see cref="T:System.Windows.Media.TileBrush" /> content is projected onto its base tile. The default value is <see cref="F:System.Windows.Media.Stretch.Fill" />.</returns>
    </member>
    <member name="F:System.Windows.Media.TileBrush.StretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.TileBrush.Stretch" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.TileBrush.Stretch" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.TimelineMarker">
      <summary>Represents metadata associated with a specific point in a media file.</summary>
    </member>
    <member name="M:System.Windows.Media.TimelineMarker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TimelineMarker" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TimelineMarker.Text">
      <summary>Gets or sets the text value of a <see cref="T:System.Windows.Media.TimelineMarker" />.</summary>
      <returns>The text value of the <see cref="T:System.Windows.Media.TimelineMarker" />. The default value is an empty string.</returns>
    </member>
    <member name="F:System.Windows.Media.TimelineMarker.TextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.TimelineMarker.Text" /> dependency property.</summary>
    </member>
    <member name="P:System.Windows.Media.TimelineMarker.Time">
      <summary>Gets or sets the time at which a <see cref="T:System.Windows.Media.TimelineMarker" /> is reached.</summary>
      <returns>The time at which the TimelineMarker is reached. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.TimelineMarker.TimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.TimelineMarker.Time" /> dependency property.</summary>
    </member>
    <member name="P:System.Windows.Media.TimelineMarker.Type">
      <summary>Gets or sets the marker type of a <see cref="T:System.Windows.Media.TimelineMarker" />.</summary>
      <returns>A string that describes the type of this TimelineMarker. The default value is an empty string.</returns>
    </member>
    <member name="F:System.Windows.Media.TimelineMarker.TypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.TimelineMarker.Type" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.TimelineMarkerCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.TimelineMarker" /> objects that can be individually accessed by index.</summary>
    </member>
    <member name="M:System.Windows.Media.TimelineMarkerCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TimelineMarkerCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.TimelineMarkerRoutedEventArgs">
      <summary>Provides event data for the <see cref="E:System.Windows.Controls.MediaElement.MarkerReached" /> event.</summary>
    </member>
    <member name="M:System.Windows.Media.TimelineMarkerRoutedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TimelineMarkerRoutedEventArgs" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TimelineMarkerRoutedEventArgs.Marker">
      <summary>Gets the <see cref="T:System.Windows.Media.TimelineMarker" /> that triggered this event.</summary>
      <returns>The <see cref="T:System.Windows.Media.TimelineMarker" /> that triggered this event.</returns>
    </member>
    <member name="T:System.Windows.Media.TimelineMarkerRoutedEventHandler">
      <summary>Represents methods that will handle various routed events related to timeline markers.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Windows.Media.Transform">
      <summary>Defines functionality that enables transformations in a two-dimensional plane. </summary>
    </member>
    <member name="P:System.Windows.Media.Transform.Inverse">
      <summary>Gets the inverse of this transform, if it exists.</summary>
      <returns>The inverse of this transform, if it exists; otherwise, null.</returns>
    </member>
    <member name="M:System.Windows.Media.Transform.TransformBounds(System.Windows.Rect)">
      <summary>Transforms the specified bounding box and returns an axis-aligned bounding box that is exactly large enough to contain it.</summary>
      <returns>The smallest axis-aligned bounding box that can contain the transformed <paramref name="rect" />.</returns>
      <param name="rect">The bounding box to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Transform.TryTransform(System.Windows.Point,System.Windows.Point@)">
      <summary>Attempts to transform the specified point and returns a value that indicates whether the transformation was successful.</summary>
      <returns>true if <paramref name="inPoint" /> was transformed; otherwise, false.</returns>
      <param name="inPoint">The point to transform.</param>
      <param name="outPoint">The result of transforming <paramref name="inPoint" />.</param>
    </member>
    <member name="T:System.Windows.Media.TransformCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Transform" /> objects that can be individually accessed by index. </summary>
    </member>
    <member name="M:System.Windows.Media.TransformCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TransformCollection" /> class. </summary>
    </member>
    <member name="T:System.Windows.Media.TransformGroup">
      <summary>Represents a composite <see cref="T:System.Windows.Media.Transform" /> composed of other <see cref="T:System.Windows.Media.Transform" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.TransformGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TransformGroup" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TransformGroup.Children">
      <summary>Gets or sets the collection of child <see cref="T:System.Windows.Media.Transform" /> objects.</summary>
      <returns>The collection of child <see cref="T:System.Windows.Media.Transform" /> objects. The default is an empty collection. </returns>
    </member>
    <member name="F:System.Windows.Media.TransformGroup.ChildrenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.TransformGroup.Children" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.TransformGroup.Children" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.TransformGroup.Value">
      <summary>Gets the <see cref="T:System.Windows.Media.Matrix" /> structure that describes the transformation represented by this <see cref="T:System.Windows.Media.TransformGroup" />.</summary>
      <returns>A composite of the <see cref="T:System.Windows.Media.Transform" /> objects in this <see cref="T:System.Windows.Media.TransformGroup" />.</returns>
    </member>
    <member name="T:System.Windows.Media.TranslateTransform">
      <summary>Translates (moves) an object in the two-dimensional x-y coordinate system. </summary>
    </member>
    <member name="M:System.Windows.Media.TranslateTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TranslateTransform" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.TranslateTransform.X">
      <summary>Gets or sets the distance to translate along the x-axis.</summary>
      <returns>The distance to translate (move) an object along the x-axis, in pixels. This property is read/write. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.TranslateTransform.XProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.TranslateTransform.X" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.TranslateTransform.X" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.TranslateTransform.Y">
      <summary>Gets or sets the distance to translate (move) an object along the y-axis.</summary>
      <returns>The distance to translate (move) an object along the y-axis, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.TranslateTransform.YProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.TranslateTransform.Y" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.TranslateTransform.Y" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.VideoBrush">
      <summary>Paints an area with video content.</summary>
    </member>
    <member name="M:System.Windows.Media.VideoBrush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.VideoBrush" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.VideoBrush.SetSource(System.Windows.Controls.MediaElement)">
      <summary>Sets the source of the <see cref="T:System.Windows.Media.VideoBrush" />.</summary>
      <param name="source">The element used as the source for the <see cref="T:System.Windows.Media.VideoBrush" />.</param>
    </member>
    <member name="P:System.Windows.Media.VideoBrush.SourceName">
      <summary>Gets or sets the name of the <see cref="T:System.Windows.Controls.MediaElement" /> to use as the source of the <see cref="T:System.Windows.Media.VideoBrush" />.</summary>
      <returns>The name of the <see cref="T:System.Windows.Controls.MediaElement" /> to use as the source of the <see cref="T:System.Windows.Media.VideoBrush" />.</returns>
    </member>
    <member name="F:System.Windows.Media.VideoBrush.SourceNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.VideoBrush.SourceName" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.VisualTreeHelper">
      <summary>Provides utility methods that can used to traverse object relationships (along child object or parent object axes) in the Silverlight visual tree.</summary>
    </member>
    <member name="M:System.Windows.Media.VisualTreeHelper.FindElementsInHostCoordinates(System.Windows.Point,System.Windows.UIElement)">
      <summary>Retrieves a set of objects that are located within a specified point of an object's coordinate space.</summary>
      <returns>An enumerable set of <see cref="T:System.Windows.UIElement" /> objects that are determined to be located in the visual tree composition at the specified point and within the specified subtee.</returns>
      <param name="intersectingPoint">The point to use as the determination point.</param>
      <param name="subtree">The object to search within. </param>
    </member>
    <member name="M:System.Windows.Media.VisualTreeHelper.FindElementsInHostCoordinates(System.Windows.Rect,System.Windows.UIElement)">
      <summary>Retrieves a set of objects that are located within a specified <see cref="T:System.Windows.Rect" /> of an object's coordinate space.</summary>
      <returns>An enumerable set of <see cref="T:System.Windows.UIElement" /> objects that are determined to be located in the visual tree composition at the specified point and within the specified subtee.</returns>
      <param name="intersectingRect">The <see cref="T:System.Windows.Rect" /> to use as the determination area.</param>
      <param name="subtree">The object to search within.</param>
    </member>
    <member name="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)">
      <summary>Using the provided index, obtains a specific child object of the provided object by examining the visual tree.</summary>
      <returns>The child object as referenced by <paramref name="childIndex" />.</returns>
      <param name="reference">The object that holds the child collection.</param>
      <param name="childIndex">The index of the requested child object in the <paramref name="reference" /> child collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Specified an invalid child index.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="reference" /> is null, or is not a valid <see cref="T:System.Windows.UIElement" />.</exception>
    </member>
    <member name="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)">
      <summary>Returns the number of children that exists in an object's child collection in the visual tree.</summary>
      <returns>The number of visual children for the provided source visual.</returns>
      <param name="reference">The source visual.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="reference" /> is null, or is not a valid <see cref="T:System.Windows.UIElement" />.</exception>
    </member>
    <member name="M:System.Windows.Media.VisualTreeHelper.GetParent(System.Windows.DependencyObject)">
      <summary>Returns an object's parent object in the visual tree.</summary>
      <returns>The parent object of the <paramref name="reference" /> object in the visual tree.</returns>
      <param name="reference">The object to get the parent object for.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="reference" /> is null, or is not a valid <see cref="T:System.Windows.UIElement" />.</exception>
    </member>
    <member name="T:System.Windows.Media.Animation.BackEase">
      <summary>Represents an easing function that retracts the motion of an animation slightly before it begins to animate in the path indicated.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.BackEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.BackEase" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.BackEase.Amplitude">
      <summary>Gets or sets the amplitude of retraction associated with a <see cref="T:System.Windows.Media.Animation.BackEase" /> animation.</summary>
      <returns>The amplitude of retraction associated with a <see cref="T:System.Windows.Media.Animation.BackEase" /> animation. This value must be greater than or equal to 0. The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.BackEase.AmplitudeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.BackEase.Amplitude" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.BackEase.Amplitude" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.BackEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.BeginStoryboard">
      <summary>A trigger action that begins a <see cref="T:System.Windows.Media.Animation.Storyboard" /> and distributes its animations to their targeted objects and properties.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.BeginStoryboard.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.BeginStoryboard.Storyboard">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.Storyboard" /> that this <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> starts. </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.Storyboard" /> that the <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> starts. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.BeginStoryboard.StoryboardProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.BeginStoryboard.Storyboard" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.BeginStoryboard.Storyboard" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.BounceEase">
      <summary>Represents an easing function that creates an animated bouncing effect.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.BounceEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.BounceEase" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.BounceEase.Bounces">
      <summary>Gets or sets the number of bounces.</summary>
      <returns>The number of bounces. The value must be greater or equal to zero. Negative values will resolve to zero. The default is 3. </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.BounceEase.BouncesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.BounceEase.Bounces" /> dependency property.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.BounceEase.Bounciness">
      <summary>Gets or sets a value that specifies how bouncy the bounce animation is. Low values of this property result in bounces with little lose of height between bounces (more bouncy) while high values result in dampened bounces (less bouncy).</summary>
      <returns>The value that specifies how bouncy the bounce animation is. This value must be positive. The default value is 2.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.BounceEase.BouncinessProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.BounceEase.Bounciness" /> dependency property.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.BounceEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.CircleEase">
      <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using a circular function.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.CircleEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.CircleEase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.CircleEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.ClockState">
      <summary>Describes the potential states of an animation.</summary>
    </member>
    <member name="F:System.Windows.Media.Animation.ClockState.Active">
      <summary>The current animation changes in direct relation to that of its parent.</summary>
    </member>
    <member name="F:System.Windows.Media.Animation.ClockState.Filling">
      <summary>The animation continues and does not change in relation to that of its parent.</summary>
    </member>
    <member name="F:System.Windows.Media.Animation.ClockState.Stopped">
      <summary>The animation is stopped.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.ColorAnimation">
      <summary>Animates the value of a  <see cref="T:System.Windows.Media.Color" /> property between two target values using linear interpolation over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ColorAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorAnimation" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorAnimation.By">
      <summary>Gets or sets the total amount by which the animation changes its starting value.  </summary>
      <returns>The total amount by which the animation changes its starting value.     The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorAnimation.ByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ColorAnimation.By" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ColorAnimation.By" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorAnimation.EasingFunction">
      <summary>Gets or sets the easing function applied to this animation.</summary>
      <returns>The easing function applied to this animation.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorAnimation.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ColorAnimation.EasingFunction" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ColorAnimation.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorAnimation.From">
      <summary>Gets or sets the animation's starting value. </summary>
      <returns>The starting value of the animation. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorAnimation.FromProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ColorAnimation.From" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ColorAnimation.From" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorAnimation.To">
      <summary>Gets or sets the animation's ending value. </summary>
      <returns>The ending value of the animation. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorAnimation.ToProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ColorAnimation.To" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ColorAnimation.To" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames">
      <summary>Animates the value of a <see cref="T:System.Windows.Media.Color" /> property along a set of <see cref="P:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.KeyFrames" /> over a specified <see cref="T:System.Windows.Duration" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.KeyFrames">
      <summary>Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.ColorKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.ColorKeyFrame" /> objects that define the animation. The default is an empty collection.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ColorKeyFrame">
      <summary>Provides a base class for specific animation key-frame techniques that define an animation segment with a <see cref="T:System.Windows.Media.Color" /> target value. Derived classes each provide a different key-frame interpolation method for a <see cref="T:System.Windows.Media.Color" /> value that is provided for a <see cref="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames" /> animation. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ColorKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorKeyFrame" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime">
      <summary>Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> should be reached. </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> property. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ColorKeyFrame.Value">
      <summary>Gets or sets the key frame's target value. </summary>
      <returns>The key frame's target value, which is the value at its specified <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.KeyTime" />. The default is a <see cref="T:System.Windows.Media.Color" /> with an ARBG value of #00000000.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ColorKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ColorKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.ColorKeyFrame" /> objects that can be individually accessed by index. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ColorKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ColorKeyFrameCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.CubicEase">
      <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using the formula f(t) = t3.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.CubicEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.CubicEase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.CubicEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.DiscreteColorKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Media.Color" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> using discrete values.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteColorKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteColorKeyFrame" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.DiscreteDoubleKeyFrame">
      <summary>Animates from the <see cref="T:System.Double" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> using discrete values.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteDoubleKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteDoubleKeyFrame" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.DiscreteObjectKeyFrame">
      <summary>Animates from the <see cref="T:System.Object" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value" /> using discrete values.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteObjectKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscreteObjectKeyFrame" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.DiscretePointKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Point" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> using discrete frames.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscretePointKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DiscretePointKeyFrame" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.DoubleAnimation">
      <summary>Animates the value of a  <see cref="T:System.Double" /> property between two target values using linear interpolation over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DoubleAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleAnimation" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleAnimation.By">
      <summary>Gets or sets the total amount by which the animation changes its starting value.</summary>
      <returns>The total amount by which the animation changes its starting value. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleAnimation.ByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.By" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.By" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleAnimation.EasingFunction">
      <summary>Gets or sets the easing function applied to this animation.</summary>
      <returns>The easing function applied to this animation.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleAnimation.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.EasingFunction" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleAnimation.From">
      <summary>Gets or sets the animation's starting value.</summary>
      <returns>The starting value of the animation. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleAnimation.FromProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.From" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.From" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleAnimation.To">
      <summary>Gets or sets the animation's ending value.</summary>
      <returns>The ending value of the animation. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleAnimation.ToProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.To" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleAnimation.To" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames">
      <summary>Animates the value of a <see cref="T:System.Double" /> property along a set of <see cref="P:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.KeyFrames" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.KeyFrames">
      <summary>Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame" /> objects that define the animation. The default is an empty collection.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.DoubleKeyFrame">
      <summary>An abstract class that defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DoubleKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime">
      <summary>Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> should be reached.</summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> property. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.DoubleKeyFrame.Value">
      <summary>Gets or sets the key frame's target value. </summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.KeyTime" />. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.DoubleKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.DoubleKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.DoubleKeyFrame" /> objects that can be individually accessed by index. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DoubleKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.DoubleKeyFrameCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.EasingColorKeyFrame">
      <summary>Defines a property that enables you to associate an easing function with a <see cref="T:System.Windows.Media.Animation.ColorAnimationUsingKeyFrames" /> key-frame animation.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.EasingColorKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.EasingColorKeyFrame" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunction">
      <summary>Gets or sets the easing function that is applied to the key frame.</summary>
      <returns>The easing function that is applied to the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunction" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.EasingDoubleKeyFrame">
      <summary>Defines a property that enables you to associate an easing function with a <see cref="T:System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames" /> key-frame animation.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.EasingDoubleKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.EasingDoubleKeyFrame" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunction">
      <summary>Gets or sets the easing function that is applied to the key frame.</summary>
      <returns>The easing function that is applied to the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunction" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.EasingFunctionBase">
      <summary>Provides the base class for all the easing functions. You can create your own custom easing functions by inheriting from this class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.EasingFunctionBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.EasingFunctionBase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.EasingFunctionBase.Ease(System.Double)">
      <summary>Transforms normalized time to control the pace of an animation.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.EasingFunctionBase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function. </summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.EasingFunctionBase.EasingMode">
      <summary>Gets or sets a value that specifies how the animation interpolates.</summary>
      <returns>One of the enumeration values that specifies how the animation interpolates. The default is <see cref="F:System.Windows.Media.Animation.EasingMode.EaseOut" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.EasingFunctionBase.EasingMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.EasingFunctionBase.EasingMode" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.EasingMode">
      <summary>Specifies how the animation associated with an easing function interpolates.</summary>
    </member>
    <member name="F:System.Windows.Media.Animation.EasingMode.EaseOut">
      <summary>Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.</summary>
    </member>
    <member name="F:System.Windows.Media.Animation.EasingMode.EaseIn">
      <summary>Interpolation follows the mathematical formula associated with the easing function.</summary>
    </member>
    <member name="F:System.Windows.Media.Animation.EasingMode.EaseInOut">
      <summary>Interpolation uses <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> for the first half of the animation and <see cref="F:System.Windows.Media.Animation.EasingMode.EaseOut" /> for the second half.    </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.EasingPointKeyFrame">
      <summary>Defines a property that enables you to associate an easing function with a <see cref="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames" /> key-frame animation.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.EasingPointKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.EasingPointKeyFrame" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunction">
      <summary>Gets or sets the easing function that is applied to the key frame.</summary>
      <returns>The easing function that is applied to the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunction" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ElasticEase">
      <summary>Represents an easing function that creates an animation that resembles a spring oscillating back and forth until it comes to rest.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ElasticEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ElasticEase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ElasticEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.ElasticEase.Oscillations">
      <summary>Gets or sets the number of times the target slides back and forth over the animation destination.</summary>
      <returns>The number of times the target slides back and forth over the animation destination. This value must be greater than or equal to 0. The default is 3.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ElasticEase.OscillationsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ElasticEase.Oscillations" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ElasticEase.Oscillations" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ElasticEase.Springiness">
      <summary>Gets or sets the stiffness of the spring. The smaller the Springiness value is, the stiffer the spring and the faster the elasticity decreases in intensity over each oscillation.</summary>
      <returns>A positive number that specifies the stiffness of the spring. The default value is 3.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ElasticEase.SpringinessProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ElasticEase.Springiness" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ElasticEase.Springiness" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ExponentialEase">
      <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using an exponential formula (see remarks).</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ExponentialEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ExponentialEase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ExponentialEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.ExponentialEase.Exponent">
      <summary>Gets or sets the exponent used to determine the interpolation of the animation.</summary>
      <returns>The exponent used to determine the interpolation of the animation. The default is 2.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ExponentialEase.ExponentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ExponentialEase.Exponent" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ExponentialEase.Exponent" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.FillBehavior">
      <summary>Specifies how a <see cref="T:System.Windows.Media.Animation.Timeline" /> behaves when it is outside its active period but its parent is inside its active or hold period. </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.FillBehavior.HoldEnd">
      <summary>After it reaches the end of its active period, the timeline holds its progress until the end of its parent's active and hold periods. </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.FillBehavior.Stop">
      <summary>The timeline stops if it is outside its active period while its parent is inside its active period.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.IEasingFunction">
      <summary>Defines the basic functionality of an easing function. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.IEasingFunction.Ease(System.Double)">
      <summary>Transforms normalized time to control the pace of an animation.</summary>
      <returns>The transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.KeySpline">
      <summary>This class is used by a spline key frame to define animation progress. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.KeySpline.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.KeySpline" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.KeySpline.ControlPoint1">
      <summary>Gets or sets the first control point used to define a Bezier curve that describes a <see cref="T:System.Windows.Media.Animation.KeySpline" />.</summary>
      <returns>The first control point used to define a Bezier curve that describes a <see cref="T:System.Windows.Media.Animation.KeySpline" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.KeySpline.ControlPoint2">
      <summary>Gets or sets the second control point used to define a Bezier curve that describes a <see cref="T:System.Windows.Media.Animation.KeySpline" />.</summary>
      <returns>The second control point used to define a Bezier curve that describes a <see cref="T:System.Windows.Media.Animation.KeySpline" />.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.KeyTime">
      <summary>Specifies when a particular key frame should take place during an animation. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.Equals(System.Object)">
      <summary>Indicates whether a <see cref="T:System.Windows.Media.Animation.KeyTime" /> is equal to this <see cref="T:System.Windows.Media.Animation.KeyTime" />.</summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Windows.Media.Animation.KeyTime" /> that represents the same length of time as this <see cref="T:System.Windows.Media.Animation.KeyTime" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Windows.Media.Animation.KeyTime" /> to compare with this <see cref="T:System.Windows.Media.Animation.KeyTime" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.Equals(System.Windows.Media.Animation.KeyTime)">
      <summary>Indicates whether a specified <see cref="T:System.Windows.Media.Animation.KeyTime" /> is equal to this <see cref="T:System.Windows.Media.Animation.KeyTime" />.</summary>
      <returns>true if <paramref name="value" /> is equal to this <see cref="T:System.Windows.Media.Animation.KeyTime" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Windows.Media.Animation.KeyTime" />  to compare with this <see cref="T:System.Windows.Media.Animation.KeyTime" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.Equals(System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeyTime)">
      <summary>Indicates whether two <see cref="T:System.Windows.Media.Animation.KeyTime" /> values are equal.</summary>
      <returns>true if the values of <paramref name="keyTime1" /> and <paramref name="keyTime2" /> are equal; otherwise, false.</returns>
      <param name="keyTime1">The first value to compare.</param>
      <param name="keyTime2">The second value to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.FromTimeSpan(System.TimeSpan)">
      <summary>Creates a new <see cref="T:System.Windows.Media.Animation.KeyTime" />, using the supplied <see cref="T:System.TimeSpan" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.KeyTime" />, initialized to the value of <paramref name="timeSpan" />.</returns>
      <param name="timeSpan">The value of the new <see cref="T:System.Windows.Media.Animation.KeyTime" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="timeSpan" /> is outside the allowed range.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.GetHashCode">
      <summary>Returns a hash code representing this <see cref="T:System.Windows.Media.Animation.KeyTime" />.</summary>
      <returns>A hash code identifier.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.op_Equality(System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeyTime)">
      <summary>Compares two <see cref="T:System.Windows.Media.Animation.KeyTime" /> values for equality.</summary>
      <returns>true if <paramref name="keyTime1" /> and <paramref name="keyTime2" /> are equal; otherwise, false.</returns>
      <param name="keyTime1">The first value to compare.</param>
      <param name="keyTime2">The second value to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.op_Implicit(System.TimeSpan)~System.Windows.Media.Animation.KeyTime">
      <summary>Implicitly converts a <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan" /> to a <see cref="T:System.Windows.Media.Animation.KeyTime" />.</summary>
      <returns>The created <see cref="T:System.Windows.Media.Animation.KeyTime" />.</returns>
      <param name="timeSpan">The <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan" /> value to convert.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.op_Inequality(System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeyTime)">
      <summary>Compares two <see cref="T:System.Windows.Media.Animation.KeyTime" /> values for inequality.</summary>
      <returns>true if <paramref name="keyTime1" /> and <paramref name="keyTime2" /> are not equal; otherwise, false. </returns>
      <param name="keyTime1">The first value to compare.</param>
      <param name="keyTime2">The second value to compare.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.KeyTime.TimeSpan">
      <summary>Gets the time when the key frame ends, expressed as a time relative to the beginning of the animation.</summary>
      <returns>A <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan" /> value.</returns>
      <exception cref="T:System.InvalidOperationException">If this instance is not of type <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.KeyTime.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Windows.Media.Animation.KeyTime" />. </summary>
      <returns>A string representation of this <see cref="T:System.Windows.Media.Animation.KeyTime" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.KeyTime.Type">
      <summary>Gets the <see cref="T:System.Windows.Media.Animation.KeyTimeType" /> value this instance represents. </summary>
      <returns>One of the enumeration values.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.KeyTime.Uniform">
      <summary>Gets the <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" /> value which divides the allotted time of the animation evenly between key frames.</summary>
      <returns>A <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" /> value.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.KeyTimeType">
      <summary>Represents the different types that may represent a <see cref="T:System.Windows.Media.Animation.KeyTime" /> instance.</summary>
    </member>
    <member name="F:System.Windows.Media.Animation.KeyTimeType.Uniform">
      <summary>The allotted total time for an animation sequence is divided evenly amongst each of the key frames.</summary>
    </member>
    <member name="F:System.Windows.Media.Animation.KeyTimeType.TimeSpan">
      <summary>Each <see cref="T:System.Windows.Media.Animation.KeyTime" /> is expressed as a <see cref="P:System.Windows.Media.Animation.KeyTime.TimeSpan" /> value relative to the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> of an animation sequence. </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.LinearColorKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Media.Color" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> using linear interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearColorKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearColorKeyFrame" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.LinearDoubleKeyFrame">
      <summary>Animates from the <see cref="T:System.Double" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> using linear interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearDoubleKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearDoubleKeyFrame" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.LinearPointKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Point" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> using linear interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearPointKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.LinearPointKeyFrame" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames">
      <summary>Animates the value of an <see cref="T:System.Object" /> property along a set of <see cref="P:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.KeyFrames" /> over a specified <see cref="T:System.Windows.Duration" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.KeyFrames">
      <summary>Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame" /> objects that define the animation. The default is an empty collection.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ObjectKeyFrame">
      <summary>Defines an animation segment with its own target value and interpolation method for an <see cref="T:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ObjectKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime">
      <summary>Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value" /> should be reached. </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value" /> property. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ObjectKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ObjectKeyFrame.Value">
      <summary>Gets or sets the key frame's target value. </summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.KeyTime" />. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ObjectKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.ObjectKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ObjectKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.ObjectKeyFrame" /> objects that can be individually accessed by index.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ObjectKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.ObjectKeyFrameCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.PointAnimation">
      <summary>Animates the value of a <see cref="T:System.Windows.Point" /> property between two target values using linear interpolation over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PointAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointAnimation" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.PointAnimation.By">
      <summary>Gets or sets the total amount by which the animation changes its starting value.</summary>
      <returns>The total amount by which the animation changes its starting value.  The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointAnimation.ByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.PointAnimation.By" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.PointAnimation.By" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.PointAnimation.EasingFunction">
      <summary>Gets or sets the easing function you are applying to the animation.</summary>
      <returns>The easing function you are applying to the animation. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointAnimation.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.PointAnimation.EasingFunction" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.PointAnimation.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.PointAnimation.From">
      <summary>Gets or sets the animation's starting value.</summary>
      <returns>The starting value of the animation. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointAnimation.FromProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.PointAnimation.From" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.PointAnimation.From" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.PointAnimation.To">
      <summary>Gets or sets the animation's ending value.</summary>
      <returns>The ending value of the animation. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointAnimation.ToProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.PointAnimation.To" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.PointAnimation.To" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames">
      <summary>Animates the value of a <see cref="T:System.Windows.Point" /> property along a set of <see cref="P:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.KeyFrames" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.PointAnimationUsingKeyFrames.KeyFrames">
      <summary>Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.PointKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.PointKeyFrame" /> objects that define the animation. The default is an empty collection.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.PointKeyFrame">
      <summary>Defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PointKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointKeyFrame" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime">
      <summary>Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> should be reached. </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> property. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.PointKeyFrame.Value">
      <summary>Gets or sets the key frame's target value.</summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.PointKeyFrame.KeyTime" />. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PointKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.PointKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.PointKeyFrame" /> objects that can be individually accessed by index. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PointKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PointKeyFrameCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.PowerEase">
      <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using the formula f(t) = tp where p is equal to the <see cref="P:System.Windows.Media.Animation.PowerEase.Power" /> property.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PowerEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.PowerEase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PowerEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.PowerEase.Power">
      <summary>Gets or sets the exponential power of the animation interpolation. For example, a value of 7 creates an animation interpolation curve that follows the formula f(t) = t7.</summary>
      <returns>The exponential power of the animation interpolation. This value must be greater or equal to 0. The default is 2.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.PowerEase.PowerProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.PowerEase.Power" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.PowerEase.Power" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.QuadraticEase">
      <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using the formula f(t) = t2</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuadraticEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.QuadraticEase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuadraticEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.QuarticEase">
      <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using the formula f(t) = t4.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuarticEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.QuarticEase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuarticEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.QuinticEase">
      <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using the formula f(t) = t5.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuinticEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.QuinticEase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuinticEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.RepeatBehavior">
      <summary>Describes how a <see cref="T:System.Windows.Media.Animation.Timeline" /> repeats its simple duration.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> structure with the specified iteration count. </summary>
      <param name="count">A number greater than or equal to 0 that specifies the number of iterations for an animation. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> evaluates to infinity, a value that is not a number, or is negative.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> structure with the specified repeat duration. </summary>
      <param name="duration">The total length of time that the <see cref="T:System.Windows.Media.Animation.Timeline" /> should play (its active duration). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> evaluates to a negative number.</exception>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.Count">
      <summary>Gets the number of times a <see cref="T:System.Windows.Media.Animation.Timeline" /> should repeat. </summary>
      <returns>The number of iterations to repeat.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> describes a repeat duration, not an iteration count.</exception>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.Duration">
      <summary>Gets the total length of time a <see cref="T:System.Windows.Media.Animation.Timeline" /> should play. </summary>
      <returns>The total length of time a timeline should play. </returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> describes an iteration count, not a repeat duration.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Object)">
      <summary>Indicates whether the specified object is equal to this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />. </summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> that represents the same repeat behavior as this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />; otherwise, false.</returns>
      <param name="value">The object to compare with this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Windows.Media.Animation.RepeatBehavior)">
      <summary>Returns a value that indicates whether the specified <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> is equal to this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />. </summary>
      <returns>true if both the type and repeat behavior of <paramref name="repeatBehavior" /> are equal to this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />; otherwise, false.</returns>
      <param name="repeatBehavior">The value to compare to this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>Indicates whether the two specified <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> values are equal. </summary>
      <returns>true if both the type and repeat behavior of <paramref name="repeatBehavior1" /> are equal to that of <paramref name="repeatBehavior2" />; otherwise, false.</returns>
      <param name="repeatBehavior1">The first value to compare.</param>
      <param name="repeatBehavior2">The second value to compare.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.Forever">
      <summary>Gets a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> that specifies an infinite number of repetitions.  </summary>
      <returns>A <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> that specifies an infinite number of repetitions.   </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.GetHashCode">
      <summary>Returns the hash code of this instance.</summary>
      <returns>A hash code.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.HasCount">
      <summary>Gets a value that indicates whether the repeat behavior has a specified iteration count.</summary>
      <returns>true if the instance represents an iteration count; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.HasDuration">
      <summary>Gets a value that indicates whether the repeat behavior has a specified repeat duration. </summary>
      <returns>true if the instance represents a repeat duration; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.op_Equality(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>Indicates whether the two specified <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> values are equal. </summary>
      <returns>true if both the type and repeat behavior of <paramref name="repeatBehavior1" /> are equal to that of <paramref name="repeatBehavior2" />; otherwise, false.</returns>
      <param name="repeatBehavior1">The first value to compare.</param>
      <param name="repeatBehavior2">The second value to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.op_Inequality(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>Indicates whether the two <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> values are not equal. </summary>
      <returns>true if <paramref name="repeatBehavior1" /> and <paramref name="repeatBehavior2" /> are different types or the repeat behavior properties are not equal; otherwise, false.</returns>
      <param name="repeatBehavior1">The first value to compare.</param>
      <param name="repeatBehavior2">The second value to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format.</returns>
      <param name="format">The string specifying the format to use, or null to use the default format defined for the type of the IFormattable implementation. </param>
      <param name="formatProvider">The IFormatProvider to use to format the value, or null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />. </summary>
      <returns>A string representation of this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.ToString(System.IFormatProvider)">
      <summary>Returns a string representation of this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> with the specified format. </summary>
      <returns>A string representation of this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />.</returns>
      <param name="formatProvider">The format used to construct the return value.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.SineEase">
      <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using a sine formula (see remarks below).</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SineEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SineEase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SineEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineColorKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Media.Color" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineColorKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame. </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineColorKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineColorKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineColorKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineDoubleKeyFrame">
      <summary>Animates from the <see cref="T:System.Double" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.</summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplinePointKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Point" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.SplinePointKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame. </summary>
      <returns>The two control points that specify the cubic Bezier curve that defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplinePointKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplinePointKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplinePointKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.Storyboard">
      <summary>Controls animations with a timeline, and provides object and property targeting information for its child animations. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Storyboard" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin">
      <summary>Initiates the set of animations associated with the storyboard.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Storyboard.Children">
      <summary>Gets the collection of child <see cref="T:System.Windows.Media.Animation.Timeline" /> objects.</summary>
      <returns>The collection of child <see cref="T:System.Windows.Media.Animation.Timeline" /> objects. The default is an empty collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentState">
      <summary>Gets the clock state of the storyboard.</summary>
      <returns>One of the enumeration values: <see cref="F:System.Windows.Media.Animation.ClockState.Active" />, <see cref="F:System.Windows.Media.Animation.ClockState.Filling" />, or <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime">
      <summary>Gets the current time of the storyboard.</summary>
      <returns>The current time of the storyboard, or null if the storyboard's clock is <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetTargetName(System.Windows.Media.Animation.Timeline)">
      <summary>Gets the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> of the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> object.</summary>
      <returns>The string name of the target object.</returns>
      <param name="element">The <see cref="T:System.Windows.Media.Animation.Timeline" /> object to get the target name from.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetTargetProperty(System.Windows.Media.Animation.Timeline)">
      <summary>Gets the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> of the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> object. </summary>
      <returns>The property path information for the animated property.</returns>
      <param name="element">The <see cref="T:System.Windows.Media.Animation.Timeline" /> object to get the target property from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Pause">
      <summary>Pauses the animation clock associated with the storyboard. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Resume">
      <summary>Resumes the animation clock, or run-time state, associated with the storyboard. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan)">
      <summary>Moves the storyboard to the specified animation position. The storyboard performs the requested seek when the next clock tick occurs. </summary>
      <param name="offset">A positive or negative time value that describes the amount by which the timeline should move forward or backward from the beginning of the animation. By using the <see cref="T:System.TimeSpan" /> Parse behavior, a <see cref="T:System.TimeSpan" /> can be specified as a string in the following format (in this syntax, the [] characters denote optional components of the string, but the quotes, colons, and periods are all a literal part of the syntax):"[days.]hours:minutes:seconds[.fractionalSeconds]"- or -"days"</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan)">
      <summary>Moves the storyboard to the specified animation position immediately (synchronously). </summary>
      <param name="offset">A positive or negative time value that describes the amount by which the timeline should move forward or backward from the beginning of the animation. By using the <see cref="T:System.TimeSpan" /> Parse behavior, a <see cref="T:System.TimeSpan" /> can be specified as a string in the following format (in this syntax, the [] characters denote optional components of the string, but the quotes, colons, and periods are all a literal part of the syntax):"[days.]hours:minutes:seconds[.fractionalSeconds]"- or -"days"</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetTarget(System.Windows.Media.Animation.Timeline,System.Windows.DependencyObject)">
      <summary>Causes the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> to target the specified object.</summary>
      <param name="timeline">The timeline that targets the specified dependency object.</param>
      <param name="target">The actual instance of the object to target.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters is null.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetTargetName(System.Windows.Media.Animation.Timeline,System.String)">
      <summary>Causes the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> to target the object with the specified name.</summary>
      <param name="element">The timeline that targets the specified dependency object.</param>
      <param name="name">The name of the object to target.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetTargetProperty(System.Windows.Media.Animation.Timeline,System.Windows.PropertyPath)">
      <summary>Causes the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> to target the specified dependency property.</summary>
      <param name="element">The timeline with which to associate the specified dependency property.</param>
      <param name="path">A path that describe the dependency property to be animated.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters is null.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SkipToFill">
      <summary>Advances the current time of the storyboard's clock to the end of its active period.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Stop">
      <summary>Stops the storyboard.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Storyboard.TargetName">
      <summary>Gets or sets the name of the object to animate.</summary>
      <returns>The name of the object to animate.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Storyboard.TargetNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Storyboard.TargetProperty">
      <summary>Gets or sets the name of the property that should be animated. </summary>
      <returns>The property to animate.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Storyboard.TargetPropertyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> attached property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.Timeline">
      <summary>Defines a segment of time. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Timeline" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.AutoReverse">
      <summary>Gets or sets a value that indicates whether the timeline plays in reverse after it completes a forward iteration.</summary>
      <returns>true if the timeline plays in reverse at the end of each iteration; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.AutoReverseProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.AutoReverse" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.AutoReverse" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.BeginTime">
      <summary>Gets or sets the time at which this <see cref="T:System.Windows.Media.Animation.Timeline" /> should begin. </summary>
      <returns>The start time of the time line. The default value is zero.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.BeginTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Media.Animation.Timeline.Completed">
      <summary>Occurs when the <see cref="T:System.Windows.Media.Animation.Storyboard" /> object has completed playing. </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.Duration">
      <summary>Gets or sets the length of time for which this timeline plays, not counting repetitions.</summary>
      <returns>The timeline's simple duration: the amount of time this timeline takes to complete a single forward iteration. The default value is <see cref="P:System.Windows.Duration.Automatic" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.DurationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.FillBehavior">
      <summary>Gets or sets a value that specifies how the animation behaves after it reaches the end of its active period.</summary>
      <returns>A value that specifies how the timeline behaves after it reaches the end of its active period but its parent is inside its active or fill period. The default value is <see cref="F:System.Windows.Media.Animation.FillBehavior.HoldEnd" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.FillBehaviorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.RepeatBehavior">
      <summary>Gets or sets the repeating behavior of this timeline. </summary>
      <returns>An iteration <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Count" /> that specifies the number of times the timeline should play, a <see cref="T:System.TimeSpan" /> value that specifies the total length of this timeline's active period, or the special value <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Forever" />, which specifies that the timeline should repeat indefinitely. The default value is a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> with a <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Count" /> of 1, which indicates that the timeline plays once.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.SpeedRatio">
      <summary>Gets or sets the rate, relative to its parent, at which time progresses for this <see cref="T:System.Windows.Media.Animation.Timeline" />. </summary>
      <returns>A finite value greater than 0 that specifies the rate at which time progresses for this timeline, relative to the speed of the timeline's parent. If this timeline is a root timeline, specifies the default timeline speed. The value is expressed as a factor where 1 represents normal speed, 2 is double speed, 0.5 is half speed, and so on. The default value is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.SpeedRatioProperty">
      <summary>Identifies for the <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.TimelineCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.Timeline" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Effects.BlurEffect">
      <summary>Represents an effect that you can apply to an object that simulates looking at the object through an out-of-focus lens.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BlurEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BlurEffect" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Effects.BlurEffect.Radius">
      <summary>Gets or sets the amount of blurring applied by the <see cref="T:System.Windows.Media.Effects.BlurEffect" />.</summary>
      <returns>The radius used in the blur kernel, in DIU (1/96 of an inch). The default is 5.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BlurEffect.RadiusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BlurEffect.Radius" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BlurEffect.Radius" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.DropShadowEffect">
      <summary>Applies a shadow behind a visual object at a slight offset. The offset is determined by mimicking a casting shadow from an imaginary light source.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.DropShadowEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.DropShadowEffect" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.BlurRadius">
      <summary>Gets or sets how defined the edges of the shadow are (how blurry the shadow is).</summary>
      <returns>How blurry the shadow is. The default is 5.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.BlurRadiusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.BlurRadius" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.BlurRadius" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.Color">
      <summary>Gets or sets the color of the shadow.</summary>
      <returns>The color of the shadow. The default is FF000000 (black).</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.ColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Color" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Color" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.Direction">
      <summary>Gets or sets the angle at which the shadow is cast.</summary>
      <returns>The angle at which the shadow is cast, where 0 is immediately to the right of the object and positive values move the shadow counterclockwise. The default is 315.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.DirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Direction" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Direction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.Opacity">
      <summary>Gets or sets the degree of opacity of the shadow.</summary>
      <returns>The degree of opacity. The valid range of values is from 0 through 1, where 0 is completely transparent and 1 is completely opaque. The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Opacity" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Opacity" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.ShadowDepth">
      <summary>Gets or sets the distance between the object and the shadow that it casts.</summary>
      <returns>The distance between the plane of the object casting the shadow and the shadow plane measured in device-independent units (1/96th inch per unit). The valid range of values is from 0 through 300. The default is 5.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.ShadowDepthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.ShadowDepth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.ShadowDepth" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.Effect">
      <summary>Provides a base class for all bitmap effects.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.Effect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.Effect" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Effects.Effect.EffectMapping">
      <summary>When overridden in a derived class, transforms mouse input and coordinate systems through the effect.</summary>
      <returns>The transform to apply. The default is the identity transform.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.Effect.ImplicitInput">
      <summary>Gets a <see cref="T:System.Windows.Media.Brush" /> that, when it is used as an input for an <see cref="T:System.Windows.Media.Effects.Effect" />, causes the bitmap of the <see cref="T:System.Windows.UIElement" /> that the <see cref="T:System.Windows.Media.Effects.Effect" /> is applied to be that input. </summary>
      <returns>The <see cref="T:System.Windows.Media.Brush" /> that acts as the input.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.PixelShader">
      <summary>Provides a managed wrapper around a High Level Shading Language (HLSL) pixel shader.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.PixelShader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.PixelShader" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Effects.PixelShader.UriSource">
      <summary>Gets or sets a URI reference to HLSL bytecode in the assembly.</summary>
      <returns>The URI reference to HLSL bytecode in the assembly.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.PixelShader.UriSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.PixelShader.UriSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.PixelShader.UriSource" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.SamplingMode">
      <summary>Specifies how  dependency properties with <see cref="T:System.Windows.Media.Brush" /> values are sampled in a custom shader effect.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.SamplingMode.Auto">
      <summary>The system selects the most appropriate sampling mode.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.SamplingMode.NearestNeighbor">
      <summary>Use nearest neighbor sampling.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.SamplingMode.Bilinear">
      <summary>Use bilinear sampling.</summary>
    </member>
    <member name="T:System.Windows.Media.Effects.ShaderEffect">
      <summary>Provides a custom bitmap effect by using a <see cref="T:System.Windows.Media.Effects.PixelShader" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.ShaderEffect" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndex">
      <summary>Gets or sets a value that indicates the shader register to use for the partial derivatives of the texture coordinates with respect to screen space.</summary>
      <returns>The index of the register that contains the partial derivatives. </returns>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.PaddingBottom">
      <summary>Gets or sets the amount by which the effect's output texture is larger than its input texture along the bottom edge of the effect.</summary>
      <returns>The padding along the bottom edge of the effect.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.PaddingLeft">
      <summary>Gets or sets the amount by which the effect's output texture is larger than its input texture along the left edge.</summary>
      <returns>The padding along the left edge of the effect.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.PaddingRight">
      <summary>Gets or sets the amount by which the effect's output texture is larger than its input texture along the right edge.</summary>
      <returns>The padding along the right edge of the effect.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.PaddingTop">
      <summary>Gets or sets the amount by which the effect's output texture is larger than its input texture along the top edge.</summary>
      <returns>The padding along the top edge of the effect.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.PixelShader">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Effects.PixelShader" /> to use for the effect.</summary>
      <returns>The <see cref="T:System.Windows.Media.Effects.PixelShader" /> for the effect.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback(System.Int32)">
      <summary>Associates a dependency property value with a pixel shader's float constant register.</summary>
      <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> delegate that associates a dependency property and the shader constant register specified by <paramref name="register" />.</returns>
      <param name="register">The index of the shader register associated with the dependency property.</param>
    </member>
    <member name="F:System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.ShaderEffect.PixelShader" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.ShaderEffect.PixelShader" /> dependency property. </returns>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(System.Int32)">
      <summary>Associates a dependency property value with a pixel shader's sampler register.</summary>
      <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> delegate that associates a dependency property and the shader sampler register specified by <paramref name="register" />.</returns>
      <param name="register">The index of the shader sampler associated with the dependency property.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(System.Int32,System.Windows.Media.Effects.SamplingMode)">
      <summary>Associates a dependency property value with a pixel shader's sampler register and a <see cref="T:System.Windows.Media.Effects.SamplingMode" />.</summary>
      <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> delegate that associates a dependency property and the shader sampler register specified by <paramref name="register" />.</returns>
      <param name="register">The index of the shader sampler associated with the dependency property.</param>
      <param name="samplingMode">The <see cref="T:System.Windows.Media.Effects.SamplingMode" /> for the shader sampler.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32)">
      <summary>Associates a dependency property with a shader sampler register.</summary>
      <returns>A dependency property associated with the shader sampler specified by <paramref name="samplerRegisterIndex" />.</returns>
      <param name="dpName">The name of the dependency property.</param>
      <param name="ownerType">The type of the effect that has the dependency property.</param>
      <param name="samplerRegisterIndex">The index of the shader sampler associated with the dependency property.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32,System.Windows.Media.Effects.SamplingMode)">
      <summary>Associates a dependency property with a shader sampler register and a sampling mode.</summary>
      <returns>A dependency property associated with the shader sampler specified by <paramref name="samplerRegisterIndex" />. </returns>
      <param name="dpName">The name of the dependency property.</param>
      <param name="ownerType">The type of the effect that has the dependency property.</param>
      <param name="samplerRegisterIndex">The index of the shader sampler associated with the dependency property.</param>
      <param name="samplingMode">One of the enumeration values that specifies the sampling mode for the shader.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.UpdateShaderValue(System.Windows.DependencyProperty)">
      <summary>Notifies the effect that the shader constant or sampler corresponding to the specified dependency property should be updated.</summary>
      <param name="dp">The dependency property to be updated.</param>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapCreateOptions">
      <summary>Specifies initialization options for a bitmap image.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.None">
      <summary>No options are specified. This is the default value for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CreateOptions" /> property.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.DelayCreation">
      <summary>Causes a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object to delay initialization until it is necessary. This is useful when dealing with collections of images.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.IgnoreImageCache">
      <summary>Loads images without using an existing image cache. This option should only be selected when images in a cache need to be refreshed.</summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapImage">
      <summary>Provides the practical object source type for the <see cref="P:System.Windows.Controls.Image.Source" /> and <see cref="P:System.Windows.Media.ImageBrush.ImageSource" /> properties.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> class, using the supplied URI. </summary>
      <param name="uriSource">The URI that references the source graphics file for the image.</param>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.CreateOptions">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> for a <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.</summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> used for this <see cref="T:System.Windows.Media.Imaging.BitmapImage" />. The default is <see cref="F:System.Windows.Media.Imaging.BitmapCreateOptions.None" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.CreateOptionsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CreateOptions" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CreateOptions" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapImage.DownloadProgress">
      <summary>Occurs when a significant change has occurred in the download progress of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> content.</summary>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapImage.ImageFailed">
      <summary>Occurs when there is an error associated with image retrieval or format.</summary>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapImage.ImageOpened">
      <summary>Occurs when the image source is downloaded and decoded with no failure. You can use this event to determine the size of an image before rendering it.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.UriSource">
      <summary>Gets or sets the URI of the graphics source file that generated this <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.</summary>
      <returns>The URI of the graphics source file that generated this <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.UriSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriSource" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapSource">
      <summary>Provides a source object for properties that use a bitmap.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.PixelHeight">
      <summary>Gets the height of the bitmap in pixels.</summary>
      <returns>The height of the bitmap in pixels.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapSource.PixelHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapSource.PixelHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapSource.PixelHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.PixelWidth">
      <summary>Gets the width of the bitmap in pixels.</summary>
      <returns>The width of the bitmap in pixels.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapSource.PixelWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapSource.PixelWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapSource.PixelWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.SetSource(System.IO.Stream)">
      <summary>Sets the source of the <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
      <param name="streamSource">The stream to set the source to.</param>
    </member>
    <member name="T:System.Windows.Media.Imaging.DownloadProgressEventArgs">
      <summary>Provides event data for the <see cref="E:System.Windows.Media.Imaging.BitmapImage.DownloadProgress" /> event.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.DownloadProgressEventArgs.Progress">
      <summary>Gets download progress as a value that is between 0 and 100.</summary>
      <returns>The download progress. A value of 0 indicates no progress; 100 indicates the download is complete. </returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.WriteableBitmap">
      <summary>Provides a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that can be written to and updated.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" /> class using the given dimensions.</summary>
      <param name="pixelWidth">The width of the bitmap.</param>
      <param name="pixelHeight">The height of the bitmap.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pixelWidth" /> or <paramref name="pixelHeight" /> is zero or less.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" /> class using the given <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> to use for initialization. The download for Silverlight is asynchronous. Until the image is loaded, the dimensions of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" /> are 1x1.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Windows.UIElement,System.Windows.Media.Transform)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" /> class using the given element and transform.</summary>
      <param name="element">The desired element to be rendered within the bitmap. </param>
      <param name="transform">The transform the user wants to apply to the element as the last step before drawing into the bitmap. This is particularly interesting for you if you want the bitmap to respect its transform. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The element size is invalid. This happens when the pixel width or pixel height is not greater than zero.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.Invalidate">
      <summary>Requests a draw of the entire bitmap.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.WriteableBitmap.Pixels">
      <summary>Gets an array representing the 2d texture of the bitmap length in pixels.</summary>
      <returns>Gets an array representing the 2d texture of the bitmap length in pixels.</returns>
      <exception cref="T:System.SecurityException">Returned if pixels are null.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.Render(System.Windows.UIElement,System.Windows.Media.Transform)">
      <summary>Renders an element within the bitmap.</summary>
      <param name="element">The element to be rendered within the bitmap.</param>
      <param name="transform">The transform to apply to the element before drawing into the bitmap. If an empty transform is supplied, the bits representing the element show up at the same offset as if they were placed within their parent.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Media.Media3D.Matrix3D">
      <summary>Represents a 4 x 4 matrix used for transformations in 3D space.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Constructor that sets matrix's initial values.</summary>
      <param name="m11">Value of the (1,1) field of the new matrix.</param>
      <param name="m12">Value of the (1,2) field of the new matrix.</param>
      <param name="m13">Value of the (1,3) field of the new matrix.</param>
      <param name="m14">Value of the (1,4) field of the new matrix.</param>
      <param name="m21">Value of the (2,1) field of the new matrix.</param>
      <param name="m22">Value of the (2,2) field of the new matrix.</param>
      <param name="m23">Value of the (2,3) field of the new matrix.</param>
      <param name="m24">Value of the (2,4) field of the new matrix.</param>
      <param name="m31">Value of the (3,1) field of the new matrix.</param>
      <param name="m32">Value of the (3,2) field of the new matrix.</param>
      <param name="m33">Value of the (3,3) field of the new matrix.</param>
      <param name="m34">Value of the (3,4) field of the new matrix.</param>
      <param name="offsetX">Value of the X offset field of the new matrix.</param>
      <param name="offsetY">Value of the Y offset field of the new matrix.</param>
      <param name="offsetZ">Value of the Z offset field of the new matrix.</param>
      <param name="m44">Value of the (4,4) field of the new matrix.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Equals(System.Object)">
      <summary>Tests equality between two matrices.</summary>
      <returns>
        <see cref="T:System.Boolean" /> that indicates whether the matrices are equal.</returns>
      <param name="o">Object to test for equality.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Equals(System.Windows.Media.Media3D.Matrix3D)">
      <summary>Tests equality between two matrices.</summary>
      <returns>
        <see cref="T:System.Boolean" /> that indicates whether the matrices are equal.</returns>
      <param name="value">The Matrix3D to which to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.GetHashCode">
      <summary>Returns the hash code for this matrix.</summary>
      <returns>Integer that specifies the hash code for this matrix.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.HasInverse">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> is invertible.</summary>
      <returns>true if the Matrix3D structure has an inverse; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.Identity">
      <summary>Changes a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure into an identity <see cref="T:System.Windows.Media.Media3D.Matrix3D" />.</summary>
      <returns>The identity Matrix3D.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Invert">
      <summary>Inverts this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <exception cref="T:System.InvalidOperationException">Throws <see cref="T:System.InvalidOperationException" /> if the matrix is not invertible.</exception>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.IsIdentity">
      <summary>Determines whether this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure is an identity Matrix3D.</summary>
      <returns>true if the Matrix3D structure is an identity Matrix3D; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M11">
      <summary>Gets or sets the value of the first row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the first row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M12">
      <summary>Gets or sets the value of the first row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the first row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M13">
      <summary>Gets or sets the value of the first row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the first row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M14">
      <summary>Gets or sets the value of the first row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the first row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M21">
      <summary>Gets or sets the value of the second row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the second row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M22">
      <summary>Gets or sets the value of the second row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the second row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M23">
      <summary>Gets or sets the value of the second row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the second row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M24">
      <summary>Gets or sets the value of the second row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the second row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M31">
      <summary>Gets or sets the value of the third row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the third row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M32">
      <summary>Gets or sets the value of the third row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the third row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M33">
      <summary>Gets or sets the value of the third row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the third row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M34">
      <summary>Gets or sets the value of the third row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the third row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M44">
      <summary>Gets or sets the value of the fourth row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the fourth row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.OffsetX">
      <summary>Gets or sets the value of the fourth row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the fourth row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.OffsetY">
      <summary>Gets or sets the value of the fourth row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the fourth row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.OffsetZ">
      <summary>Gets or sets the value of the fourth row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the fourth row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.op_Equality(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> instances for exact equality.</summary>
      <returns>
        <see cref="T:System.Boolean" /> that indicates whether the two matrix instances are equal.</returns>
      <param name="matrix1">The first matrix to compare.</param>
      <param name="matrix2">The second matrix to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.op_Inequality(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> instances for exact inequality.</summary>
      <returns>
        <see cref="T:System.Boolean" /> that indicates whether the two matrix instances are inequal.</returns>
      <param name="matrix1">The first matrix to compare.</param>
      <param name="matrix2">The second matrix to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.op_Multiply(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Multiplies the specified matrices.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> that is the result of multiplication.</returns>
      <param name="matrix1">Matrix to multiply.</param>
      <param name="matrix2">Matrix by which the first matrix is multiplied.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure using the specified format.</summary>
      <returns>The value of the current instance in the specified format.</returns>
      <param name="format">The format to use or a null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The provider to use to format the value or a null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.ToString">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>String representation of this Matrix3D structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>String representation of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
      <param name="provider">Culture-specified formatting information.</param>
    </member>
    <member name="T:System.Windows.Messaging.ListenFailedException">
      <summary>Represents an exception that can occur when a <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> fails to receive a message.</summary>
    </member>
    <member name="T:System.Windows.Messaging.LocalMessageReceiver">
      <summary>Represents the receiving end of a local messaging channel between two Silverlight-based applications. </summary>
    </member>
    <member name="M:System.Windows.Messaging.LocalMessageReceiver.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> class and configures it with the specified name.</summary>
      <param name="receiverName">The name of the receiver.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="receiverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="receiverName" /> is longer than 256 characters.</exception>
    </member>
    <member name="M:System.Windows.Messaging.LocalMessageReceiver.#ctor(System.String,System.Windows.Messaging.ReceiverNameScope,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> class and configures it with the specified name, namescope requirement, and allowed sender domains.</summary>
      <param name="receiverName">The name of the receiver, which must be unique either within the global namescope or the receiver's domain, depending on the value of the <paramref name="nameScope" /> parameter. </param>
      <param name="nameScope">A value that indicates whether the <paramref name="receiverName" /> is scoped to the global namescope or to the receiver's specific domain. </param>
      <param name="allowedSenderDomains">The domains that the receiver can receive messages from, or <see cref="F:System.Windows.Messaging.LocalMessageReceiver.AnyDomain" /> to receive from any domain.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="receiverName" /> is null.-or-<paramref name="allowedSenderDomains" /> is null.-or-<paramref name="allowedSenderDomains" /> contains one or more null entries.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="receiverName" /> is longer than 256 characters.-or-<paramref name="allowedSenderDomains" /> contains one or more entries longer than 256 characters.-or-<paramref name="allowedSenderDomains" /> contains one or more entries with invalid characters ("," and ":").</exception>
    </member>
    <member name="P:System.Windows.Messaging.LocalMessageReceiver.AllowedSenderDomains">
      <summary>Gets the domains that the receiver can receive messages from.</summary>
      <returns>The domains that the receiver can receive messages from, or <see cref="F:System.Windows.Messaging.LocalMessageReceiver.AnyDomain" /> if the receiver can receive messages from any domain.</returns>
    </member>
    <member name="F:System.Windows.Messaging.LocalMessageReceiver.AnyDomain">
      <summary>A value that represents any domain.</summary>
    </member>
    <member name="P:System.Windows.Messaging.LocalMessageReceiver.DisableSenderTrustCheck">
      <summary>Gets or sets a value that indicates whether the receiver can receive messages from a sender with a different Protected Mode setting. </summary>
      <returns>true if the receiver can receive messages regardless of the sender's Protected Mode setting; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property, the <see cref="M:System.Windows.Messaging.LocalMessageReceiver.Listen" /> method has already been called.</exception>
      <exception cref="T:System.ObjectDisposedException">When setting this property, the <see cref="M:System.Windows.Messaging.LocalMessageReceiver.Dispose" /> method has already been called.</exception>
    </member>
    <member name="M:System.Windows.Messaging.LocalMessageReceiver.Dispose">
      <summary>Stops the receiver from receiving messages and releases all resources used by the receiver. </summary>
    </member>
    <member name="M:System.Windows.Messaging.LocalMessageReceiver.Listen">
      <summary>Starts listening for messages from a <see cref="T:System.Windows.Messaging.LocalMessageSender" />.</summary>
      <exception cref="T:System.InvalidOperationException">When setting this property, the <see cref="M:System.Windows.Messaging.LocalMessageReceiver.Listen" /> method has already been called.</exception>
      <exception cref="T:System.ObjectDisposedException">When setting this property, the <see cref="M:System.Windows.Messaging.LocalMessageReceiver.Dispose" /> method has already been called.</exception>
    </member>
    <member name="E:System.Windows.Messaging.LocalMessageReceiver.MessageReceived">
      <summary>Occurs when a message is received from a <see cref="T:System.Windows.Messaging.LocalMessageSender" />.</summary>
    </member>
    <member name="P:System.Windows.Messaging.LocalMessageReceiver.NameScope">
      <summary>Gets a value that indicates whether the <see cref="P:System.Windows.Messaging.LocalMessageReceiver.ReceiverName" /> is scoped to the global namescope or to the receiver's specific domain. </summary>
      <returns>A value that indicates whether the <see cref="P:System.Windows.Messaging.LocalMessageReceiver.ReceiverName" /> is scoped to the global namescope or to the receiver's specific domain. </returns>
    </member>
    <member name="P:System.Windows.Messaging.LocalMessageReceiver.ReceiverName">
      <summary>Gets the name of the receiver. </summary>
      <returns>The name of the receiver. </returns>
    </member>
    <member name="T:System.Windows.Messaging.LocalMessageSender">
      <summary>Represents the sending end of a local messaging channel between two Silverlight-based applications.</summary>
    </member>
    <member name="M:System.Windows.Messaging.LocalMessageSender.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Messaging.LocalMessageSender" /> class and configures it to send messages to the receiver with the specified name.</summary>
      <param name="receiverName">The <see cref="P:System.Windows.Messaging.LocalMessageReceiver.ReceiverName" /> property value of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that this sender will send messages to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="receiverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="receiverName" /> is longer than 256 characters.</exception>
    </member>
    <member name="M:System.Windows.Messaging.LocalMessageSender.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Messaging.LocalMessageSender" /> class and configures it to send messages to the receiver with the specified name and domain. </summary>
      <param name="receiverName">The <see cref="P:System.Windows.Messaging.LocalMessageReceiver.ReceiverName" /> property value of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that this sender will send messages to.</param>
      <param name="receiverDomain">The domain of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that this sender will send messages to, or <see cref="F:System.Windows.Messaging.LocalMessageSender.Global" /> if the receiver is not scoped to a domain.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="receiverName" /> is null.-or-<paramref name="receiverDomain" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="receiverName" /> is longer than 256 characters.-or-<paramref name="receiverDomain" /> is longer than 256 characters.-or-<paramref name="receiverDomain" /> contains one or more invalid characters ("," and ":").</exception>
    </member>
    <member name="F:System.Windows.Messaging.LocalMessageSender.Global">
      <summary>A value that represents the global domain. </summary>
    </member>
    <member name="P:System.Windows.Messaging.LocalMessageSender.ReceiverDomain">
      <summary>Gets the domain of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that this sender will send messages to.</summary>
      <returns>The domain of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that this sender will send messages to.</returns>
    </member>
    <member name="P:System.Windows.Messaging.LocalMessageSender.ReceiverName">
      <summary>Gets the name of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that this sender will send messages to.</summary>
      <returns>The name of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that this sender will send messages to.</returns>
    </member>
    <member name="M:System.Windows.Messaging.LocalMessageSender.SendAsync(System.String)">
      <summary>Sends the specified message to the configured receiver asynchronously.</summary>
      <param name="message">The message to send.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="message" /> is longer than 40,960 characters.</exception>
    </member>
    <member name="M:System.Windows.Messaging.LocalMessageSender.SendAsync(System.String,System.Object)">
      <summary>Sends the specified messages to the configured receiver asynchronously.</summary>
      <param name="message">The message to send.</param>
      <param name="userState">A unique user-state object that functions as a task ID for the message transfer. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="message" /> is longer than 40,960 characters.</exception>
    </member>
    <member name="E:System.Windows.Messaging.LocalMessageSender.SendCompleted">
      <summary>Occurs when the message has been successfully sent. </summary>
    </member>
    <member name="T:System.Windows.Messaging.MessageReceivedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Messaging.LocalMessageReceiver.MessageReceived" /> event.</summary>
    </member>
    <member name="P:System.Windows.Messaging.MessageReceivedEventArgs.Message">
      <summary>Gets the message sent from a <see cref="T:System.Windows.Messaging.LocalMessageSender" /> to a <see cref="T:System.Windows.Messaging.LocalMessageReceiver" />. </summary>
      <returns>The message that was sent. </returns>
    </member>
    <member name="P:System.Windows.Messaging.MessageReceivedEventArgs.NameScope">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> is configured to receive messages from the global namescope or from a specific domain.</summary>
      <returns>A value that indicates whether the receiver is configured for a global or domain namescope.</returns>
    </member>
    <member name="P:System.Windows.Messaging.MessageReceivedEventArgs.ReceiverName">
      <summary>Gets the name of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that received the message.</summary>
      <returns>The name of the message receiver. </returns>
    </member>
    <member name="P:System.Windows.Messaging.MessageReceivedEventArgs.Response">
      <summary>Gets or sets a response message to be sent to the <see cref="T:System.Windows.Messaging.LocalMessageSender" /> that sent the original message.</summary>
      <returns>The response message to be sent to the sender of the original message. </returns>
    </member>
    <member name="P:System.Windows.Messaging.MessageReceivedEventArgs.SenderDomain">
      <summary>Gets the domain of the <see cref="T:System.Windows.Messaging.LocalMessageSender" /> that sent the message.</summary>
      <returns>The domain of the <see cref="T:System.Windows.Messaging.LocalMessageSender" /> that sent the message.</returns>
    </member>
    <member name="T:System.Windows.Messaging.ReceiverNameScope">
      <summary>Defines values that indicate whether a <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> name is scoped to the global domain or to a specific domain. </summary>
    </member>
    <member name="F:System.Windows.Messaging.ReceiverNameScope.Domain">
      <summary>The receiver name is scoped to the domain of the receiver. </summary>
    </member>
    <member name="F:System.Windows.Messaging.ReceiverNameScope.Global">
      <summary>The receiver name is scoped to the global domain.</summary>
    </member>
    <member name="T:System.Windows.Messaging.SendCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Messaging.LocalMessageSender.SendCompleted" /> event.</summary>
    </member>
    <member name="P:System.Windows.Messaging.SendCompletedEventArgs.Message">
      <summary>Gets the message sent from a <see cref="T:System.Windows.Messaging.LocalMessageSender" /> to a <see cref="T:System.Windows.Messaging.LocalMessageReceiver" />. </summary>
      <returns>The message that was sent. </returns>
    </member>
    <member name="P:System.Windows.Messaging.SendCompletedEventArgs.ReceiverDomain">
      <summary>Gets the domain of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that received the message.</summary>
      <returns>The domain of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that received the message.</returns>
    </member>
    <member name="P:System.Windows.Messaging.SendCompletedEventArgs.ReceiverName">
      <summary>Gets the name of the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that received the message.</summary>
      <returns>The name of the message receiver. </returns>
    </member>
    <member name="P:System.Windows.Messaging.SendCompletedEventArgs.Response">
      <summary>Gets the response message sent to the <see cref="T:System.Windows.Messaging.LocalMessageSender" /> from the <see cref="T:System.Windows.Messaging.LocalMessageReceiver" /> that received the original message.</summary>
      <returns>The response message sent to the sender of the original message. </returns>
    </member>
    <member name="T:System.Windows.Messaging.SendFailedException">
      <summary>Represents an exception that can occur when a <see cref="T:System.Windows.Messaging.LocalMessageSender" /> fails to send a message.</summary>
    </member>
    <member name="T:System.Windows.Resources.StreamResourceInfo">
      <summary>Provides resource stream information for application resources or other packages obtained through the <see cref="M:System.Windows.Application.GetResourceStream(System.Windows.Resources.StreamResourceInfo,System.Uri)" /> method. </summary>
    </member>
    <member name="M:System.Windows.Resources.StreamResourceInfo.#ctor(System.IO.Stream,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Resources.StreamResourceInfo" /> class.</summary>
      <param name="stream">The stream to use to create the resource.</param>
      <param name="contentType">The MIME type of the content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Resources.StreamResourceInfo.ContentType">
      <summary>Gets the MIME type of the content in the stream.</summary>
      <returns>The MIME type of the content in the stream, as a string.</returns>
    </member>
    <member name="P:System.Windows.Resources.StreamResourceInfo.Stream">
      <summary>Gets the stream that is contained by the resource.</summary>
      <returns>The stream that is contained by the resource.</returns>
    </member>
    <member name="T:System.Windows.Shapes.Ellipse">
      <summary>Draws an ellipse. </summary>
    </member>
    <member name="M:System.Windows.Shapes.Ellipse.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Shapes.Ellipse" /> class.</summary>
    </member>
    <member name="T:System.Windows.Shapes.Line">
      <summary>Draws a straight line between two points. </summary>
    </member>
    <member name="M:System.Windows.Shapes.Line.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Shapes.Line" /> class. </summary>
    </member>
    <member name="P:System.Windows.Shapes.Line.X1">
      <summary>Gets or sets the x-coordinate of the <see cref="T:System.Windows.Shapes.Line" /> start point.</summary>
      <returns>The x-coordinate for the start point of the line, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Line.X1Property">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Line.X1" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Line.X1" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Line.X2">
      <summary>Gets or sets the x-coordinate of the <see cref="T:System.Windows.Shapes.Line" /> end point.  </summary>
      <returns>The x-coordinate for the end point of the line, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Line.X2Property">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Line.X2" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Line.X2" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Line.Y1">
      <summary>Gets or sets the y-coordinate of the <see cref="T:System.Windows.Shapes.Line" /> start point. </summary>
      <returns>The y-coordinate for the start point of the line, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Line.Y1Property">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Line.Y1" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Line.Y1" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Line.Y2">
      <summary>Gets or sets the y-coordinate of the <see cref="T:System.Windows.Shapes.Line" /> end point. </summary>
      <returns>The y-coordinate for the end point of the line, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Line.Y2Property">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Line.Y2" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Line.Y2" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Shapes.Path">
      <summary>Draws a series of connected lines and curves. The line and curve dimensions are declared through the <see cref="P:System.Windows.Shapes.Path.Data" /> property, and can be specified either with a Path-specific mini-language, or with an object model.</summary>
    </member>
    <member name="M:System.Windows.Shapes.Path.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Shapes.Path" /> class.</summary>
    </member>
    <member name="P:System.Windows.Shapes.Path.Data">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Geometry" /> that specifies the shape to be drawn.</summary>
      <returns>A description of the shape to be drawn.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Path.DataProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Path.Data" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Path.Data" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Shapes.Polygon">
      <summary>Draws a polygon, which is a connected series of lines that form a closed shape.</summary>
    </member>
    <member name="M:System.Windows.Shapes.Polygon.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Shapes.Polygon" /> class.</summary>
    </member>
    <member name="P:System.Windows.Shapes.Polygon.FillRule">
      <summary>Gets or sets a value that specifies how the interior fill of the shape is determined.</summary>
      <returns>A value of the enumeration. The default is <see cref="F:System.Windows.Media.FillRule.EvenOdd" />.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Polygon.FillRuleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Polygon.FillRule" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Polygon.FillRule" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Polygon.Points">
      <summary>Gets or sets a collection that contains the vertex points of the polygon.</summary>
      <returns>A collection of <see cref="T:System.Windows.Point" /> structures that describes the vertex points of the polygon. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Polygon.PointsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Polygon.Points" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Polygon.Points" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Shapes.Polyline">
      <summary>Draws a series of connected straight lines. </summary>
    </member>
    <member name="M:System.Windows.Shapes.Polyline.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Shapes.Polyline" /> class.</summary>
    </member>
    <member name="P:System.Windows.Shapes.Polyline.FillRule">
      <summary>Gets or sets a value that specifies how the interior fill of the shape is determined.</summary>
      <returns>A value of the enumeration that specifies the fill behavior. The default is <see cref="F:System.Windows.Media.FillRule.EvenOdd" />.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Polyline.FillRuleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Polyline.FillRule" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Polyline.FillRule" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Polyline.Points">
      <summary>Gets or sets a collection that contains the vertex points of the <see cref="T:System.Windows.Shapes.Polyline" />.</summary>
      <returns>A collection of <see cref="T:System.Windows.Point" /> structures that describe the vertex points of the <see cref="T:System.Windows.Shapes.Polyline" />. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Polyline.PointsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Polyline.Points" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Polyline.Points" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Shapes.Rectangle">
      <summary>Draws a rectangle shape, which can have a stroke and a fill.</summary>
    </member>
    <member name="M:System.Windows.Shapes.Rectangle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Shapes.Rectangle" /> class.</summary>
    </member>
    <member name="P:System.Windows.Shapes.Rectangle.RadiusX">
      <summary>Gets or sets the x-axis radius of the ellipse that is used to round the corners of the rectangle.</summary>
      <returns>The x-axis radius of the ellipse that is used to round the corners of the rectangle.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Rectangle.RadiusXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Rectangle.RadiusX" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Rectangle.RadiusX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Rectangle.RadiusY">
      <summary>Gets or sets the y-axis radius of the ellipse that is used to round the corners of the rectangle. </summary>
      <returns>The y-axis radius of the ellipse that is used to round the corners of the rectangle. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Rectangle.RadiusYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Rectangle.RadiusY" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Rectangle.RadiusY" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Shapes.Shape">
      <summary>Provides a base class for shape elements, such as <see cref="T:System.Windows.Shapes.Ellipse" />, <see cref="T:System.Windows.Shapes.Polygon" />, and <see cref="T:System.Windows.Shapes.Rectangle" />.</summary>
    </member>
    <member name="M:System.Windows.Shapes.Shape.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Shapes.Shape" /> class.</summary>
    </member>
    <member name="P:System.Windows.Shapes.Shape.Fill">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.FillProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.Fill" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.Fill" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.GeometryTransform">
      <summary>Gets a value that represents a <see cref="T:System.Windows.Media.Transform" /> that is applied to the geometry of a <see cref="T:System.Windows.Shapes.Shape" /> prior to when it is drawn.</summary>
      <returns>A <see cref="T:System.Windows.Media.Transform" /> that is applied to the geometry of a <see cref="T:System.Windows.Shapes.Shape" /> prior to when it is drawn.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.Stretch">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
      <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.Stretch" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.Stretch" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.Stroke">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeDashArray">
      <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
      <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeDashArrayProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeDashArray" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeDashArray" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeDashCap">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
      <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeDashCapProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeDashCap" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeDashCap" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeDashOffset">
      <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeDashOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeDashOffset" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeDashOffset" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeEndLineCap">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
      <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeEndLineCapProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeEndLineCap" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeEndLineCap" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeLineJoin">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
      <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. The default value is <see cref="F:System.Windows.Media.PenLineJoin.Miter" />. </returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeLineJoinProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeLineJoin" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeLineJoin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeMiterLimit">
      <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
      <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeMiterLimitProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeMiterLimit" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeMiterLimit" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.Stroke" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.Stroke" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeStartLineCap">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
      <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeStartLineCapProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeStartLineCap" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeStartLineCap" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Shapes.Shape.StrokeThickness">
      <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
      <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Shapes.Shape.StrokeThicknessProperty">
      <summary>Identifies the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>Provides services for managing the queue of work items for a thread. </summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Action)">
      <summary>Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that represents the operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</returns>
      <param name="a">A delegate to a method that takes no arguments and does not return a value, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>Executes the specified delegate asynchronously with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that represents the operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</returns>
      <param name="d">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="args">An array of objects to pass as arguments to the specified method.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />. </summary>
      <returns>true if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>Represents an operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" /> queue. </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>Provides a synchronization context for Silverlight.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the current <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the specified <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="dispatcher">The <see cref="T:System.Windows.Threading.Dispatcher" /> to associate this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>Creates a copy of this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</summary>
      <returns>The copy of this synchronization context.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invokes the callback in the synchronization context asynchronously.</summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invokes the callback in the synchronization context synchronously. </summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>A timer that is integrated into the <see cref="T:System.Windows.Threading.Dispatcher" /> queue, which is processed at a specified interval of time and at a specified priority. </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class. </summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>Gets or sets the amount of time between timer ticks. </summary>
      <returns>The amount of time between ticks. The default is 00:00:00.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property represents a negative time interval. </exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>Gets a value that indicates whether the timer is running. </summary>
      <returns>true if the timer is enabled; otherwise, false.  </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>Starts the <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>Stops the <see cref="T:System.Windows.Threading.DispatcherTimer" />. </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>Occurs when the timer interval has elapsed. </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Aug09\Binaries\System.Windows.Controls.DataVisualization.Toolkit.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.DataVisualization.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1">
            <summary>
            Aggregated observable collection.
            </summary>
            <typeparam name="T">The type of the items in the observable collections.
            </typeparam>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1">
            <summary>
            An observable collection that can only be written to by internal 
            classes.
            </summary>
            <typeparam name="T">The type of object in the observable collection.
            </typeparam>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.NoResetObservableCollection`1">
            <summary>
            An observable collection that cannot be reset.  When clear is called
            items are removed individually, giving listeners the chance to detect
            each remove event and perform operations such as unhooking event 
            handlers.
            </summary>
            <typeparam name="T">The type of item in the collection.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.NoResetObservableCollection`1.#ctor">
            <summary>
            Instantiates a new instance of the NoResetObservableCollection 
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.NoResetObservableCollection`1.ClearItems">
            <summary>
            Clears all items in the collection by removing them individually.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.Mutate(System.Action{System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection{`0}})">
            <summary>
            A method that mutates the collection.
            </summary>
            <param name="action">The action to mutate the collection.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the collection at an index.
            </summary>
            <param name="index">The index to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets an item at a particular location in the collection.
            </summary>
            <param name="index">The location to set an item.</param>
            <param name="item">The item to set.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item in the collection.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.ClearItems">
            <summary>
            Clears the items from the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.IsMutating">
            <summary>
            Gets or sets a value indicating whether the owner is writing to the 
            collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of an aggregated observable collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.ChildCollectionsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Rebuilds the list if a collection changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.ChildCollectionCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Synchronizes the collection with changes made in a child collection.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.GetStartingIndexOfCollectionAtIndex(System.Int32)">
            <summary>
            Returns the starting index of a collection in the aggregate
            collection.
            </summary>
            <param name="index">The starting index of a collection.</param>
            <returns>The starting index of the collection in the aggregate 
            collection.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.Rebuild">
            <summary>
            Rebuild the list in the correct order when a child collection 
            changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.ChildCollections">
            <summary>
            Gets child collections of the aggregated collection.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IAnchoredToOrigin">
            <summary>
            Range axes look for this interface on series to determine whether to
            anchor the origin to the bottom or top of the screen where possible.
            </summary>
            <remarks>
            Implementing this interface ensures that value margins will not cause
            an origin to float above the bottom or top of the screen if no
            data exists below or above.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAnchoredToOrigin.AnchoredAxis">
            <summary>
            Gets the axis to which the data is anchored.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AreaDataPoint">
            <summary>
            Represents a data point used for Area series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPoint">
            <summary>
            Represents a control that displays a data point.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.GroupCommonStates">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateCommonNormal">
            <summary>
            Normal state of the Common group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateCommonMouseOver">
            <summary>
            MouseOver state of the Common group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.GroupSelectionStates">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateSelectionUnselected">
            <summary>
            Unselected state of the Selection group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateSelectionSelected">
            <summary>
            Selected state of the Selection group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.GroupRevealStates">
            <summary>
            Reveal state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateRevealShown">
            <summary>
            Shown state of the Reveal group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateRevealHidden">
            <summary>
            Hidden state of the Reveal group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectionEnabledProperty">
            <summary>
            Identifies the IsSelectionEnabled dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectionEnabledPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="d">Control that changed its IsSelectionEnabled.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectionEnabledPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._isHovered">
            <summary>
            A value indicating whether the mouse is hovering over the data 
            point.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsHoveredPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsHoveredProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectedProperty property changed handler.
            </summary>
            <param name="d">Control that changed its IsSelected.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectedPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsSelectedProperty property changed handler.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualDependentValueProperty">
            <summary>
            Identifies the ActualDependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualDependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ActualDependentValue property changes.
            </summary>
            <param name="d">Control that changed its ActualDependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._isCoercingActualDependentValue">
            <summary>
            A value indicating whether the actual independent value is being
            coerced.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._oldActualDependentValueBeforeCoercion">
            <summary>
            The preserved previous actual dependent value before coercion.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualDependentValuePropertyChanged(System.IComparable,System.IComparable)">
            <summary>
            Called when the value of the ActualDependentValue property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueProperty">
            <summary>
            Identifies the DependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DependentValue property changes.
            </summary>
            <param name="d">Control that changed its DependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValuePropertyChanged(System.IComparable,System.IComparable)">
            <summary>
            Called when the DependentValue property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueStringFormatProperty">
            <summary>
            Identifies the DependentValueStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValueStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DependentValueStringFormat property changes.
            </summary>
            <param name="d">Control that changed its DependentValueStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValueStringFormatPropertyChanged(System.String,System.String)">
            <summary>
            Called when DependentValueStringFormat property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedDependentValueProperty">
            <summary>
            Identifies the FormattedDependentValue dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedIndependentValueProperty">
            <summary>
            Identifies the FormattedIndependentValue dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueProperty">
            <summary>
            Identifies the IndependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the IndependentValue property changes.
            </summary>
            <param name="d">Control that changed its IndependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValuePropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the IndependentValue property changes.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueStringFormatProperty">
            <summary>
            Identifies the IndependentValueStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValueStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the IndependentValueStringFormat property changes.
            </summary>
            <param name="d">Control that changed its IndependentValueStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValueStringFormatPropertyChanged(System.String,System.String)">
            <summary>
            Called when the value of the IndependentValueStringFormat property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._isCoercingActualIndependentValue">
            <summary>
            A value indicating whether the actual independent value is being
            coerced.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._oldActualIndependentValueBeforeCoercion">
            <summary>
            The preserved previous actual dependent value before coercion.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualIndependentValueProperty">
            <summary>
            Identifies the ActualIndependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualIndependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the ActualIndependentValue property changes.
            </summary>
            <param name="d">Control that changed its ActualIndependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualIndependentValuePropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the ActualIndependentValue property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateProperty">
            <summary>
            Identifies the State dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnStatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the State property changes.
            </summary>
            <param name="d">Control that changed its State.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnStatePropertyChanged(System.Windows.Controls.DataVisualization.Charting.DataPointState,System.Windows.Controls.DataVisualization.Charting.DataPointState)">
            <summary>
            Called when the value of the State property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._haveStateRevealShown">
            <summary>
            Tracks whether the Reveal/Shown VisualState is available.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._haveStateRevealHidden">
            <summary>
            Tracks whether the Reveal/Hidden VisualState is available.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._templateApplied">
            <summary>
            Tracks whether the template has been applied yet.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.#ctor">
            <summary>
            Initializes a new instance of the DataPoint class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.GoToCurrentRevealState">
            <summary>
            Updates the Control's visuals to reflect the current state(s).
            </summary>
            <returns>True if a state transition was started.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnApplyTemplate">
            <summary>
            Builds the visual tree for the DataPoint when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnCurrentStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Changes the DataPoint object's state after one of the VSM state animations completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Control's Loaded event.
            </summary>
            <param name="sender">The Control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.SetFormattedProperty(System.Windows.DependencyProperty,System.String,System.Object)">
            <summary>
            Sets a dependency property with the specified format.
            </summary>
            <param name="property">The DependencyProperty to set.</param>
            <param name="format">The Format string to apply to the value.</param>
            <param name="value">The value of the dependency property to be formatted.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectionEnabled">
            <summary>
            Gets or sets a value indicating whether selection is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsActive">
            <summary>
            Gets a value indicating whether the data point is active.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectedChanged">
            <summary>
            An event raised when the IsSelected property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsHovered">
            <summary>
            Gets a value indicating whether the mouse is hovering over
            the data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsCoercingIsSelected">
            <summary>
            Gets or sets a value indicating whether the IsSelected property is 
            being coerced.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelected">
            <summary>
            Gets or sets a value indicating whether the data point is selected.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualDependentValueChanged">
            <summary>
            Event raised when the actual dependent value of the data point is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualDependentValue">
            <summary>
            Gets or sets the actual dependent value displayed in the chart.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueChanged">
            <summary>
            This event is raised when the dependent value of the data point is 
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValue">
            <summary>
            Gets or sets the dependent value of the Control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueStringFormat">
            <summary>
            Gets or sets the format string for the FormattedDependentValue property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedDependentValue">
            <summary>
            Gets the DependentValue as formatted by the DependentValueStringFormat property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedIndependentValue">
            <summary>
            Gets the IndependentValue as formatted by the IndependentValueStringFormat property.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueChanged">
            <summary>
            Called when the independent value of the data point is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValue">
            <summary>
            Gets or sets the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueStringFormat">
            <summary>
            Gets or sets the format string for the FormattedIndependentValue property.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualIndependentValueChanged">
            <summary>
            Occurs when the actual independent value of the data point is 
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualIndependentValue">
            <summary>
            Gets or sets the actual independent value.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateChanged">
            <summary>
            Occurs when the state of a data point is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsCoercingState">
            <summary>
            Gets or sets a value indicating whether the State property is being
            coerced to its previous value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.State">
            <summary>
            Gets or sets the state of the data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.ImplementationRoot">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaDataPoint.#ctor">
            <summary>
            Initializes a new instance of the AreaDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.FrameworkElementExtensions">
            <summary>
            A set of extension methods for the DataPoint class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.FrameworkElementExtensions.GetActualMargin(System.Windows.FrameworkElement,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Returns the actual margin for a given framework element and axis.
            </summary>
            <param name="element">The framework element.</param>
            <param name="axis">The axis along which to return the margin.
            </param>
            <returns>The margin for a given framework element and axis.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.FrameworkElementExtensions.GetMargin(System.Windows.FrameworkElement,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Returns the margin for a given framework element and axis.
            </summary>
            <param name="element">The framework element.</param>
            <param name="axis">The axis along which to return the margin.
            </param>
            <returns>The margin for a given framework element and axis.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge">
            <summary>
            Specifies the edge position of a child element that is inside an
            EdgePanel.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Center">
            <summary>
            A child element that is positioned in the center of a EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Left">
            <summary>
            A child element that is positioned on the left side of the
            EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Top">
            <summary>
            A child element that is positioned at the top of the EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Right">
            <summary>
            A child element that is positioned on the right side of the
            EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Bottom">
            <summary>
            A child element that is positioned at the bottom of the EdgePanel.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel">
            <summary>
            Defines an area where you can arrange child elements either horizontally
            or vertically, relative to each other.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.MaximumIterations">
            <summary>
            The maximum number of iterations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._ignorePropertyChange">
            <summary>
            A flag that ignores a property change when set.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.GetEdge(System.Windows.UIElement)">
            <summary>
            Gets the value of the Edge attached property for a specified
            UIElement.
            </summary>
            <param name="element">
            The element from which the property value is read.
            </param>
            <returns>The Edge property value for the element.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.SetEdge(System.Windows.UIElement,System.Windows.Controls.DataVisualization.Charting.Primitives.Edge)">
            <summary>
            Sets the value of the Edge attached property to a specified element.
            </summary>
            <param name="element">
            The element to which the attached property is written.
            </param>
            <param name="edge">The needed Edge value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.EdgeProperty">
            <summary>
            Identifies the Edge dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.OnEdgePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            EdgeProperty property changed handler.
            </summary>
            <param name="d">UIElement that changed its Edge.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.#ctor">
            <summary>
            Initializes a new instance of the EdgePanel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.EdgePanelSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Invalidate measure when edge panel is resized.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._leftRect">
            <summary>
            The left rectangle in which to render left elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._rightRect">
            <summary>
            The right rectangle in which to render right elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._topRect">
            <summary>
            The top rectangle in which to render top elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._bottomRect">
            <summary>
            The bottom rectangle in which to render bottom elements.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a EdgePanel in anticipation of arranging
            them during the ArrangeOverride pass.
            </summary>
            <param name="constraint">A maximum Size to not exceed.</param>
            <returns>The desired size of the EdgePanel.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content (child elements) of a EdgePanel element.
            </summary>
            <param name="arrangeSize">
            The Size the EdgePanel uses to arrange its child elements.
            </param>
            <returns>The arranged size of the EdgePanel.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.SafeCreateRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a Rect safely by forcing width/height to be valid.
            </summary>
            <param name="left">Rect left parameter.</param>
            <param name="top">Rect top parameter.</param>
            <param name="width">Rect width parameter.</param>
            <param name="height">Rect height parameter.</param>
            <returns>New Rect struct.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Axis">
            <summary>
            An axis class used to determine the plot area coordinate of values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IAxis">
            <summary>
            An axis class used to determine the plot area coordinate of values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether the axis can plot a value.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether the axis can plot a value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IAxis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="value">The value for which to retrieve the plot area 
            coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAxis.Orientation">
            <summary>
            Gets or sets the orientation of the axis.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.IAxis.OrientationChanged">
            <summary>
            This event is raised when the Orientation property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAxis.RegisteredListeners">
            <summary>
            Gets the registered IAxisListeners.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAxis.DependentAxes">
            <summary>
            Gets the collection of child axes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Axis.LocationProperty">
            <summary>
            Identifies the Location dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnLocationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LocationProperty property changed handler.
            </summary>
            <param name="d">Axis that changed its Location.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnLocationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisLocation,System.Windows.Controls.DataVisualization.Charting.AxisLocation)">
            <summary>
            LocationProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Axis.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnOrientationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">Axis that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnOrientationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisOrientation,System.Windows.Controls.DataVisualization.Charting.AxisOrientation)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnInvalidated(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the invalidated event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether the axis can plot a value.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether the axis can plot a value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="value">The value for which to retrieve the plot area 
            coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.#ctor">
            <summary>
            Instantiates a new instance of the Axis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnChildAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Child axes collection changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnDependentAxesCollectionChanged">
            <summary>
            Child axes collection changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.RegisteredListenersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This event is raised when the registered listeners collection is
            changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnObjectRegistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            This method is invoked when a series is registered.
            </summary>
            <param name="series">The series that has been registered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnObjectUnregistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            This method is invoked when a series is unregistered.
            </summary>
            <param name="series">The series that has been unregistered.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.Location">
            <summary>
            Gets or sets the axis location.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.Axis.LocationChanged">
            <summary>
            This event is raised when the location property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.DependentAxes">
            <summary>
            Gets the list of child axes belonging to this axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.Orientation">
            <summary>
            Gets or sets the orientation of the axis.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.Axis.OrientationChanged">
            <summary>
            This event is raised when the Orientation property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.RegisteredListeners">
            <summary>
            Gets or the collection of series that are using the Axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisLabel">
            <summary>
            A label used to display data in an axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLabel.StringFormatProperty">
            <summary>
            Identifies the StringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.OnStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            StringFormatProperty property changed handler.
            </summary>
            <param name="d">AxisLabel that changed its StringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.OnStringFormatPropertyChanged(System.String)">
            <summary>
            StringFormatProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLabel.FormattedContentProperty">
            <summary>
            Identifies the FormattedContent dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.#ctor">
            <summary>
            Instantiates a new instance of the AxisLabel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.UpdateFormattedContent">
            <summary>
            Updates the formatted text.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AxisLabel.StringFormat">
            <summary>
            Gets or sets the text string format.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AxisLabel.FormattedContent">
            <summary>
            Gets the formatted content property.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisLocation">
            <summary>
            Axis position.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Auto">
            <summary>
            Location is determined automatically.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Left">
            <summary>
            Left in the series host area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Top">
            <summary>
            Top in the series host area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Right">
            <summary>
            Right in the series host area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Bottom">
            <summary>
            Bottom of the series host area.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.CategoryAxis">
            <summary>
            An axis that displays categories.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DisplayAxis">
            <summary>
            An axis that has a range.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRequireSeriesHost">
            <summary>
            An object that implements this interface requires a series host.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IRequireSeriesHost.SeriesHost">
            <summary>
            Gets or sets the series host.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MaximumAxisIntervalsPer200Pixels">
            <summary>
            Maximum intervals per 200 pixels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisGridName">
            <summary>
            The name of the axis grid template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisTitleName">
            <summary>
            The name of the axis title template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisLabelStyleProperty">
            <summary>
            Identifies the AxisLabelStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnAxisLabelStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AxisLabelStyleProperty property changed handler.
            </summary>
            <param name="d">DisplayAxis that changed its AxisLabelStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnAxisLabelStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            AxisLabelStyleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GetLength(System.Windows.Size)">
            <summary>
            Returns the length of the axis given an available size.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The length of the axis given an available size.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._gridLines">
            <summary>
            This field stores the grid lines element.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnGridLinesPropertyChanged(System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines,System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines)">
            <summary>
            GridLinesProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MajorTickMarkStyleProperty">
            <summary>
            Identifies the MajorTickMarkStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnMajorTickMarkStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MajorTickMarkStyleProperty property changed handler.
            </summary>
            <param name="d">DisplayAxis that changed its MajorTickMarkStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnMajorTickMarkStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            MajorTickMarkStyleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnTitlePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TitleProperty property changed handler.
            </summary>
            <param name="d">DisplayAxis that changed its Title.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnTitlePropertyChanged(System.Object,System.Object)">
            <summary>
            TitleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleStyleProperty">
            <summary>
            Identifies the TitleStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ShowGridLinesProperty">
            <summary>
            Identifies the ShowGridLines dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnShowGridLinesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ShowGridLinesProperty property changed handler.
            </summary>
            <param name="d">Axis that changed its ShowGridLines.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnShowGridLinesPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            ShowGridLinesProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.SetShowGridLines(System.Boolean)">
            <summary>
            Creates and destroys a grid lines element based on the specified
            value.
            </summary>
            <param name="newValue">A value indicating whether to display grid 
            lines or not.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GridLineStyleProperty">
            <summary>
            Identifies the GridlineStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._grid">
            <summary>
            The grid used to layout the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._axisTitle">
            <summary>
            The control used to display the axis title.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.CreateMajorTickMark">
            <summary>
            Creates a major axis tick mark.
            </summary>
            <returns>A line to used to render a tick mark.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.CreateTickMark(System.Windows.Style)">
            <summary>
            Creates a tick mark and applies a style to it.
            </summary>
            <param name="style">The style to apply.</param>
            <returns>The newly created tick mark.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.InternalGetMajorGridLinePositions">
            <summary>
            This method is used to share the grid line coordinates with the
            internal grid lines control.
            </summary>
            <returns>A sequence of the major grid line coordinates.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GetMajorGridLineCoordinates(System.Windows.Size)">
            <summary>
            Returns the coordinates to use for the grid line control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of coordinates at which to draw grid lines.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.#ctor">
            <summary>
            Instantiates a new instance of the DisplayAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.DisplayAxisSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            If display axis has just become visible, invalidate.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.CreateAxisLabel">
            <summary>
            Creates an axis label.
            </summary>
            <returns>The new axis label.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnDependentAxesCollectionChanged">
            <summary>
            Updates the grid lines element if a suitable dependent axis has
            been added to a radial axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.PrepareAxisLabel(System.Windows.Controls.Control,System.Object)">
            <summary>
            Prepares an axis label to be plotted.
            </summary>
            <param name="label">The axis label to prepare.</param>
            <param name="dataContext">The data context to use for the axis 
            label.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnApplyTemplate">
            <summary>
            Retrieves template parts and configures layout.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnOrientedPanelSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            When the size of the oriented panel changes invalidate the axis.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnLocationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisLocation,System.Windows.Controls.DataVisualization.Charting.AxisLocation)">
            <summary>
            Arranges the grid when the location property is changed.
            </summary>
            <param name="oldValue">The old location.</param>
            <param name="newValue">The new location.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ArrangeAxisGrid">
            <summary>
            Arranges the elements in the axis grid.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MeasureOverride(System.Windows.Size)">
            <summary>
            Renders the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The required size.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnOrientationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisOrientation,System.Windows.Controls.DataVisualization.Charting.AxisOrientation)">
            <summary>
            Reformulates the grid when the orientation is changed.  Grid is
            either separated into two columns or two rows.  The title is 
            inserted with the outermost section from the edge and an oriented
            panel is inserted into the innermost section.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnInvalidated(System.Windows.RoutedEventArgs)">
            <summary>
            Updates the visual appearance of the axis when it is invalidated.
            </summary>
            <param name="args">Information for the invalidated event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.RenderAxis(System.Windows.Size)">
            <summary>
            Renders the axis if there is a valid value for orientation.
            </summary>
            <param name="availableSize">The available size in which to render 
            the axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.Render(System.Windows.Size)">
            <summary>
            Renders the axis labels, tick marks, and other visual elements.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.Invalidate">
            <summary>
            Invalidates the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._seriesHost">
            <summary>
            The series host.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            This method is run when the series host property is changed.
            </summary>
            <param name="oldValue">The old series host.</param>
            <param name="newValue">The new series host.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisLabelStyle">
            <summary>
            Gets or sets the style used for the axis labels.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ActualLength">
            <summary>
            Gets the actual length.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GridLines">
            <summary>
            Gets or sets the grid lines property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MajorTickMarkStyle">
            <summary>
            Gets or sets the style applied to the Axis tick marks.
            </summary>
            <value>The Style applied to the Axis tick marks.</value>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.Title">
            <summary>
            Gets or sets the title property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleLayoutTransformControl">
            <summary>
            Gets or sets the LayoutTransformControl used to rotate the title.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleStyle">
            <summary>
            Gets or sets the style applied to the Axis title.
            </summary>
            <value>The Style applied to the Axis title.</value>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ShowGridLines">
            <summary>
            Gets or sets a value indicating whether grid lines should be shown.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GridLineStyle">
            <summary>
            Gets or sets the Style of the Axis's gridlines.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisGrid">
            <summary>
            Gets or sets the grid used to layout the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.DependentAxisGrid">
            <summary>
            Gets or sets a grid to lay out the dependent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OrientedPanel">
            <summary>
            Gets the oriented panel used to layout the axis labels.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisTitle">
            <summary>
            Gets or sets the title control used to display the title.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.SeriesHost">
            <summary>
            Gets or sets the series host.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ICategoryAxis">
            <summary>
            An axis that is arranged by category.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IDataConsumer">
            <summary>
            An object that consumes data.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IDataConsumer.DataChanged(System.Windows.Controls.DataVisualization.Charting.IDataProvider,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Supplies the consumer with data.
            </summary>
            <param name="dataProvider">The data provider.</param>
            <param name="data">The data used by the consumer.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ICategoryAxis.GetPlotAreaCoordinateRange(System.Object)">
            <summary>
            Accepts a category and returns the coordinate range of that category
            on the axis.
            </summary>
            <param name="category">A category for which to retrieve the 
            coordinate location.</param>
            <returns>The coordinate range of the category on the axis.</returns>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ICategoryAxis.GetCategoryAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the category at a given coordinate.
            </summary>
            <param name="position">The plot are coordinate.</param>
            <returns>The category at the given plot area coordinate.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategoryAxis._majorTickMarkPool">
            <summary>
            A pool of major tick marks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategoryAxis._labelPool">
            <summary>
            A pool of labels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.SortOrderProperty">
            <summary>
            Identifies the SortOrder dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnSortOrderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SortOrderProperty property changed handler.
            </summary>
            <param name="d">CategoryAxis that changed its SortOrder.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnSortOrderPropertyChanged">
            <summary>
            SortOrderProperty property changed handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.#ctor">
            <summary>
            Instantiates a new instance of the CategoryAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnDependentAxesCollectionChanged">
            <summary>
            Child axes collection changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnObjectRegistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            Updates categories when a series is registered.
            </summary>
            <param name="series">The series to be registered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnObjectUnregistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            Updates categories when a series is unregistered.
            </summary>
            <param name="series">The series to be unregistered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetPlotAreaCoordinateRange(System.Object)">
            <summary>
            Returns range of coordinates for a given category.
            </summary>
            <param name="category">The category to return the range for.</param>
            <returns>The range of coordinates corresponding to the category.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetCategoryAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the category at a given coordinate.
            </summary>
            <param name="position">The plot area position.</param>
            <returns>The category at the given plot area position.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.DataChanged(System.Windows.Controls.DataVisualization.Charting.IDataProvider,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates the categories in response to an update from a registered
            axis data provider.
            </summary>
            <param name="dataProvider">The category axis information
            provider.</param>
            <param name="data">A sequence of categories.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.UpdateCategories">
            <summary>
            Updates the list of categories.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetMajorGridLineCoordinates(System.Windows.Size)">
            <summary>
            Returns the major axis grid line coordinates.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of the major grid line coordinates.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="value">The value for which to retrieve the plot area 
            coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.CreateAndPrepareAxisLabel(System.Object)">
            <summary>
            Creates and prepares a new axis label.
            </summary>
            <param name="value">The axis label value.</param>
            <returns>The axis label content control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.RenderOriented(System.Windows.Size)">
            <summary>
            Renders as an oriented axis.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.Render(System.Windows.Size)">
            <summary>
            Renders the axis labels, tick marks, and other visual elements.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether a value can be plotted on the
            axis.
            </summary>
            <param name="value">A value which may or may not be able to be
            plotted.</param>
            <returns>A value indicating whether a value can be plotted on the
            axis.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.SortOrder">
            <summary>
            Gets or sets the sort order used for the categories.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.Categories">
            <summary>
            Gets or sets a list of categories to display.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GridLineCoordinatesToDisplay">
            <summary>
            Gets or sets the grid line coordinates to display.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder">
            <summary>
            The sort order to use when sorting categories.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder.None">
            <summary>
            No sort order.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder.Ascending">
            <summary>
            Ascending sort order.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder.Descending">
            <summary>
            Descending sort order.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines">
            <summary>
            This control draws gridlines with the help of an axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IAxisListener">
            <summary>
            An object that listens for changes in an axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IAxisListener.AxisInvalidated(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            This method is called when the axis is invalidated.
            </summary>
            <param name="axis">The axis that has been invalidated.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines._axis">
            <summary>
            The field that stores the axis that the grid lines are connected to.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.OnAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.DisplayAxis,System.Windows.Controls.DataVisualization.Charting.DisplayAxis)">
            <summary>
            AxisProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.#ctor(System.Windows.Controls.DataVisualization.Charting.DisplayAxis)">
            <summary>
            Instantiates a new instance of the DisplayAxisGridLines class.
            </summary>
            <param name="axis">The axis used by the DisplayAxisGridLines.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Redraws grid lines when the size of the control changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.AxisInvalidated(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Redraws grid lines when the axis is invalidated.
            </summary>
            <param name="axis">The invalidated axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.Invalidate">
            <summary>
            Draws the grid lines.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.Axis">
            <summary>
            Gets the axis that the grid lines are connected to.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRangeConsumer">
            <summary>
            An object that consumes a range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRangeConsumer.RangeChanged(System.Windows.Controls.DataVisualization.Charting.IRangeProvider,System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Informs a range consumer that a provider's range has changed.
            </summary>
            <param name="provider">The range provider.</param>
            <param name="range">The range of data.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer">
            <summary>
            Consumes value margins and uses them to lay out objects.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer.ValueMarginsChanged(System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider,System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.ValueMargin})">
            <summary>
            Updates layout to accommodate for value margins.
            </summary>
            <param name="provider">A value margin provider.</param>
            <param name="valueMargins">A sequence of value margins.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider">
            <summary>
            Provides information about margins necessary for values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Gets the margins required for values.
            </summary>
            <param name="consumer">The axis to retrieve the value margins 
            for.</param>
            <returns>The margins required for values.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ValueMargin">
            <summary>
            A margin specified for a given value.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.#ctor(System.Object,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ValueMargin class.
            </summary>
            <param name="value">The value the margin is associated with.</param>
            <param name="lowMargin">The lower margin.</param>
            <param name="highMargin">The higher margin.</param> 
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.Equals(System.Object)">
            <summary>
            Determines whether two value margins are equal.
            </summary>
            <param name="obj">The value margin to compare with this one.</param>
            <returns>A value indicating whether the two value margins are equal.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.op_Equality(System.Windows.Controls.DataVisualization.Charting.ValueMargin,System.Windows.Controls.DataVisualization.Charting.ValueMargin)">
            <summary>
            Determines whether two unit value objects are equal.
            </summary>
            <param name="left">The left value margin.</param>
            <param name="right">The right value margin.</param>
            <returns>A value indicating  whether two value margins objects are 
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.op_Inequality(System.Windows.Controls.DataVisualization.Charting.ValueMargin,System.Windows.Controls.DataVisualization.Charting.ValueMargin)">
            <summary>
            Determines whether two value margin objects are not equal.
            </summary>
            <param name="left">The left value margin.</param>
            <param name="right">The right value margin.</param>
            <returns>A value indicating whether two value margin objects are not
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.GetHashCode">
            <summary>
            Returns the hash code of the value margin object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMargin.Value">
            <summary>
            Gets the value that the margin is associated with.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMargin.LowMargin">
            <summary>
            Gets the low margin for a value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMargin.HighMargin">
            <summary>
            Gets the high margin for a value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis">
            <summary>
            An axis that displays numeric values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.RangeAxis">
            <summary>
            An axis that has a range.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRangeAxis">
            <summary>
            An axis with a range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRangeAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="position">The position at which to retrieve the plot 
            area coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IRangeAxis.Range">
            <summary>
            Gets the range of values displayed on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IRangeAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._majorTickMarkPool">
            <summary>
            A pool of major tick marks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._minorTickMarkPool">
            <summary>
            A pool of major tick marks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._labelPool">
            <summary>
            A pool of labels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis.MinorTickMarkStyleProperty">
            <summary>
            Identifies the MinorTickMarkStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._actualRange">
            <summary>
            The actual range of values.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._protectedMaximum">
            <summary>
            The maximum value displayed in the range axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._protectedMinimum">
            <summary>
            The minimum value displayed in the range axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.#ctor">
            <summary>
            Instantiates a new instance of the RangeAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.CreateMinorTickMark">
            <summary>
            Creates a minor axis tick mark.
            </summary>
            <returns>A line to used to render a tick mark.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OnActualRangeChanged(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Invalidates axis when the actual range changes.
            </summary>
            <param name="range">The new actual range.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            Returns the plot area coordinate of a given value.
            </summary>
            <param name="value">The value to return the plot area coordinate
            for.</param>
            <returns>The plot area coordinate of the given value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.IComparable},System.Double)">
            <summary>
            Returns the plot area coordinate of a given value.
            </summary>
            <param name="value">The value to return the plot area coordinate
            for.</param>
            <param name="currentRange">The value range to use when calculating 
            the plot area coordinate.</param>
            <param name="length">The length of the axis.</param>
            <returns>The plot area coordinate of the given value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the data range.
            </summary>
            <param name="range">The range to potentially override.</param>
            <returns>The overridden range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.EnforceMaximumAndMinimum(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Modifies a range to respect the minimum and maximum axis values.
            </summary>
            <param name="range">The range of data.</param>
            <returns>A range modified to  respect the minimum and maximum axis 
            values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.UpdateActualRange">
            <summary>
            Updates the actual range displayed on the axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.RenderOriented(System.Windows.Size)">
            <summary>
            Renders the axis as an oriented axis.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.Render(System.Windows.Size)">
            <summary>
            Renders the axis labels, tick marks, and other visual elements.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMajorGridLineCoordinates(System.Windows.Size)">
            <summary>
            Returns a sequence of the major grid line coordinates.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of the major grid line coordinates.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMajorGridLineValues(System.Windows.Size)">
            <summary>
            Returns a sequence of the values at which to plot major grid lines.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of the values at which to plot major grid lines.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMajorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMinorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetLabelValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The plot area coordinate.</param>
            <returns>A range of values at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeAxis#GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The plot area coordinate.</param>
            <returns>A range of values at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeConsumer#RangeChanged(System.Windows.Controls.DataVisualization.Charting.IRangeProvider,System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Updates the axis with information about a provider's data range.
            </summary>
            <param name="usesRangeAxis">The information provider.</param>
            <param name="range">The range of data in the information provider.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IValueMarginConsumer#ValueMarginsChanged(System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider,System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.ValueMargin})">
            <summary>
            Updates the layout of the axis to accommodate a sequence of value
            margins.
            </summary>
            <param name="provider">A value margin provider.</param>
            <param name="valueMargins">A sequence of value margins.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OnObjectRegistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            If a new range provider is registered, update actual range.
            </summary>
            <param name="series">The axis listener being registered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OnObjectUnregistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            If a range provider is unregistered, update actual range.
            </summary>
            <param name="series">The axis listener being unregistered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.UpdateValueMargins(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap},System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Create function that when given a range will return the 
            amount in pixels by which the value margin range 
            overlaps.  Positive numbers represent values outside the
            range.
            </summary>
            <param name="valueMargins">The list of value margins, coordinates, and overlaps.</param>
            <param name="comparableRange">The new range to use to calculate coordinates.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMaxLeftAndRightOverlap(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap},System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap@,System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap@)">
            <summary>
            Returns the value margin, coordinate, and overlap triples that have the largest left and right overlap.
            </summary>
            <param name="valueMargins">The list of value margin, coordinate, and 
            overlap triples.</param>
            <param name="maxLeftOverlapValueMargin">The value margin, 
            coordinate, and overlap triple that has the largest left overlap.
            </param>
            <param name="maxRightOverlapValueMargin">The value margin, 
            coordinate, and overlap triple that has the largest right overlap.
            </param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.MinorTickMarkStyle">
            <summary>
            Gets or sets the minor tick mark style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.ActualRange">
            <summary>
            Gets or sets the actual range of values.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.ProtectedMaximum">
            <summary>
            Gets or sets the maximum value displayed in the range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.ProtectedMinimum">
            <summary>
            Gets or sets the minimum value displayed in the range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeAxis#Range">
            <summary>
            Gets the actual maximum value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeAxis#Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMaximumProperty">
            <summary>
            Identifies the ActualMaximum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMinimumProperty">
            <summary>
            Identifies the ActualMinimum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis2 that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMaximumPropertyChanged(System.Nullable{System.DateTime})">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis2 that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMinimumPropertyChanged(System.Nullable{System.DateTime})">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis2 that changed its Interval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalPropertyChanged">
            <summary>
            IntervalProperty property changed handler.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualIntervalProperty">
            <summary>
            Identifies the ActualInterval dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IntervalTypeProperty">
            <summary>
            Identifies the InternalIntervalType dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalTypePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis that changed its InternalIntervalType.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalTypePropertyChanged(System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualIntervalTypeProperty">
            <summary>
            Identifies the ActualIntervalType dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.#ctor">
            <summary>
            Instantiates a new instance of the DateTimeAxis2 class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ToDateTimeRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Converts a range to a range of type DateTime.
            </summary>
            <param name="range">A range to be converted.</param>
            <returns>A range that has been converted.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CreateAxisLabel">
            <summary>
            Creates a new instance of the DateTimeAxisLabel class.
            </summary>
            <returns>Returns  a new instance of the DateTimeAxisLabel class.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.PrepareAxisLabel(System.Windows.Controls.Control,System.Object)">
            <summary>
            Prepares an instance of the DateTimeAxisLabel class by setting its
            IntervalType property.
            </summary>
            <param name="label">An instance of the DateTimeAxisLabel class.
            </param>
            <param name="dataContext">The data context to assign to the label.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnActualRangeChanged(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Updates the typed actual maximum and minimum properties when the
            actual range changes.
            </summary>
            <param name="range">The actual range.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether a value can plot.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether a value can plot.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.IComparable},System.Double)">
            <summary>
            Returns the plot area coordinate of a value.
            </summary>
            <param name="value">The value to plot.</param>
            <param name="range">The range to use determine the coordinate.</param>
            <param name="length">The length of the axis.</param>
            <returns>The plot area coordinate of a value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CalculateActualInterval(System.Windows.Size)">
            <summary>
            Returns the actual interval to use to determine which values are 
            displayed in the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The actual interval to use to determine which values are 
            displayed in the axis.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetMajorAxisValues(System.Windows.Size)">
            <summary>
            Returns a sequence of major values.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of major values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetMajorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to create major tick marks for.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to create major tick marks for.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetLabelValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IncrementDateTime(System.DateTime,System.Double)">
            <summary>
            This method accepts a date time and increments it.
            </summary>
            <param name="date">A date time.</param>
            <param name="interval">The interval used to increment the date time.
            </param>
            <returns>The new date time.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.AlignIntervalStart(System.DateTime,System.Double,System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType)">
            <summary>
            Adjusts the beginning of the first interval depending on the type and size.
            </summary>
            <param name="start">Original start point.</param>
            <param name="intervalSize">Interval size.</param>
            <param name="type">Type of the interval (Month, Year, ...).</param>
            <returns>
            Adjusted interval start position.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The position.</param>
            <returns>A range of values at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CalculateDateTimeInterval(System.DateTime,System.DateTime,System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType@,System.Windows.Size)">
            <summary>
            Recalculates a DateTime interval obtained from maximum and minimum.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="type">Date time interval type.</param>
            <param name="availableSize">The available size.</param>
            <returns>Auto Interval.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the actual range to ensure that it is never set to an
            empty range.
            </summary>
            <param name="range">The range to override.</param>
            <returns>The overridden range.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMaximum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMinimum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Maximum">
            <summary>
            Gets or sets the maximum value plotted on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Minimum">
            <summary>
            Gets or sets the minimum value to plot on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Interval">
            <summary>
            Gets or sets the axis interval.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualInterval">
            <summary>
            Gets the actual interval.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IntervalType">
            <summary>
            Gets or sets the interval to use for the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualIntervalType">
            <summary>
            Gets or sets the actual interval type.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel">
            <summary>
            An axis label for displaying DateTime values.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.IntervalTypeProperty">
            <summary>
            Identifies the IntervalType dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnIntervalTypePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its IntervalType.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnIntervalTypePropertyChanged(System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType,System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.YearsIntervalStringFormatProperty">
            <summary>
            Identifies the YearsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnYearsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            YearsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its YearsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnYearsIntervalStringFormatPropertyChanged">
            <summary>
            YearsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MonthsIntervalStringFormatProperty">
            <summary>
            Identifies the MonthsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMonthsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MonthsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its MonthsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMonthsIntervalStringFormatPropertyChanged">
            <summary>
            MonthsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.WeeksIntervalStringFormatProperty">
            <summary>
            Identifies the WeeksIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnWeeksIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            WeeksIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its WeeksIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnWeeksIntervalStringFormatPropertyChanged">
            <summary>
            WeeksIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.DaysIntervalStringFormatProperty">
            <summary>
            Identifies the DaysIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnDaysIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DaysIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its DaysIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnDaysIntervalStringFormatPropertyChanged">
            <summary>
            DaysIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.HoursIntervalStringFormatProperty">
            <summary>
            Identifies the HoursIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnHoursIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HoursIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its HoursIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnHoursIntervalStringFormatPropertyChanged">
            <summary>
            HoursIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MinutesIntervalStringFormatProperty">
            <summary>
            Identifies the MinutesIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMinutesIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinutesIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its MinutesIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMinutesIntervalStringFormatPropertyChanged">
            <summary>
            MinutesIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.SecondsIntervalStringFormatProperty">
            <summary>
            Identifies the SecondsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnSecondsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SecondsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its SecondsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnSecondsIntervalStringFormatPropertyChanged">
            <summary>
            SecondsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MillisecondsIntervalStringFormatProperty">
            <summary>
            Identifies the MillisecondsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMillisecondsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MillisecondsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its MillisecondsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMillisecondsIntervalStringFormatPropertyChanged">
            <summary>
            MillisecondsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.#ctor">
            <summary>
            Instantiates a new instance of the DateTimeAxisLabel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.UpdateFormattedContent">
            <summary>
            Updates the formatted text.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.IntervalType">
            <summary>
            Gets or sets the interval type of the DateTimeAxis2.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.YearsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MonthsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.WeeksIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.DaysIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.HoursIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MinutesIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.SecondsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MillisecondsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType">
            <summary>
            A date time interval.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Auto">
            <summary>
            Automatically determine interval.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Milliseconds">
            <summary>
            Interval type is milliseconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Seconds">
            <summary>
            Interval type is seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Minutes">
            <summary>
            Interval type is minutes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Hours">
            <summary>
            Interval type is hours.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Days">
            <summary>
            Interval type is days.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Weeks">
            <summary>
            Interval type is weeks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Months">
            <summary>
            Interval type is months.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Years">
            <summary>
            Interval type is years.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines">
            <summary>
            This control draws gridlines with the help of an axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines._gridLinePool">
            <summary>
            A pool of grid lines.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines.#ctor(System.Windows.Controls.DataVisualization.Charting.DisplayAxis)">
            <summary>
            Initializes a new instance of the OrientedAxisGridLines class.
            </summary>
            <param name="displayAxis">The axis to draw grid lines for.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines.Invalidate">
            <summary>
            Draws the grid lines.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IDataProvider">
            <summary>
            Provides information to a category axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IDataProvider.GetData(System.Windows.Controls.DataVisualization.Charting.IDataConsumer)">
            <summary>
            Retrieves the data to be plotted on the axis.
            </summary>
            <param name="axis">The axis to retrieve the data for.</param>
            <returns>The data to plot on the axis.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRangeProvider">
            <summary>
            Provides information to a RangeConsumer.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRangeProvider.GetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the range of values.
            </summary>
            <param name="rangeConsumer">The range consumer requesting the data 
            range.</param>
            <returns>A data range.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LinearAxis">
            <summary>
            An axis that displays numeric values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.NumericAxis">
            <summary>
            An axis that displays numeric values.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMaximumProperty">
            <summary>
            Identifies the ActualMaximum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMinimumProperty">
            <summary>
            Identifies the ActualMinimum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">BaseNumericAxis that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMaximumPropertyChanged(System.Nullable{System.Double})">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">BaseNumericAxis that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMinimumPropertyChanged(System.Nullable{System.Double})">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ExtendRangeToOriginProperty">
            <summary>
            Identifies the ExtendRangeToOrigin dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnExtendRangeToOriginPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExtendRangeToOriginProperty property changed handler.
            </summary>
            <param name="d">NumericAxis that changed its ExtendRangeToOrigin.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnExtendRangeToOriginPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            ExtendRangeToOriginProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.#ctor">
            <summary>
            Instantiates a new instance of the BaseNumericAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnActualRangeChanged(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Updates the typed actual maximum and minimum properties when the
            actual range changes.
            </summary>
            <param name="range">The actual range.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether a value can plot.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether a value can plot.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.CreateAxisLabel">
            <summary>
            Returns a numeric axis label.
            </summary>
            <returns>A numeric axis label.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the data value range and returns a range that takes the
            margins of the values into account.
            </summary>
            <param name="range">The range of data values.</param>
            <returns>A range that can store both the data values and their 
            margins.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMaximum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMinimum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.Maximum">
            <summary>
            Gets or sets the maximum value plotted on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.Minimum">
            <summary>
            Gets or sets the minimum value to plot on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ExtendRangeToOrigin">
            <summary>
            Gets or sets a value indicating whether to always show the origin.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LinearAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.OnIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalProperty property changed handler.
            </summary>
            <param name="d">LinearAxis that changed its Interval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.OnIntervalPropertyChanged">
            <summary>
            IntervalProperty property changed handler.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LinearAxis.ActualIntervalProperty">
            <summary>
            Identifies the ActualInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.#ctor">
            <summary>
            Instantiates a new instance of the LinearAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.IComparable},System.Double)">
            <summary>
            Returns the plot area coordinate of a value.
            </summary>
            <param name="value">The value to plot.</param>
            <param name="range">The range of values.</param>
            <param name="length">The length of axis.</param>
            <returns>The plot area coordinate of a value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.CalculateActualInterval(System.Windows.Size)">
            <summary>
            Returns the actual interval to use to determine which values are 
            displayed in the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>Actual interval to use to determine which values are 
            displayed in the axis.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetMajorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to create major tick marks for.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to create major tick marks for.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetMajorValues(System.Windows.Size)">
            <summary>
            Returns a sequence of major axis values.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of major axis values.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetLabelValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.AlignToInterval(System.Double,System.Double)">
            <summary>
            Aligns a value to the provided interval value.  The aligned value
            should always be smaller than or equal to than the provided value.
            </summary>
            <param name="value">The value to align to the interval.</param>
            <param name="interval">The interval to align to.</param>
            <returns>The aligned value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The plot area position.</param>
            <returns>The value at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.LengthToRange(System.Double,System.Double)">
            <summary>
            Function that uses the mid point of all the data values
            in the value margins to convert a length into a range
            of data with the mid point as the center of that range.
            </summary>
            <param name="midPoint">The mid point of the range.</param>
            <param name="length">The length of the range.</param>
            <returns>The range object.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the actual range to ensure that it is never set to an
            empty range.
            </summary>
            <param name="range">The range to override.</param>
            <returns>Returns the overridden range.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LinearAxis.Interval">
            <summary>
            Gets or sets the axis interval.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LinearAxis.ActualInterval">
            <summary>
            Gets the actual interval of the axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.NumericAxisLabel">
            <summary>
            A label used to display numeric axis values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxisLabel.#ctor">
            <summary>
            Instantiates a new instance of the NumericAxisLabel class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BarDataPoint">
            <summary>
            Represents a data point used for bar series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarDataPoint.#ctor">
            <summary>
            Initializes a new instance of the BarDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint">
            <summary>
            Represents a data point used for bar series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.SizeProperty">
            <summary>
            Identifies the Size dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SizeProperty property changed handler.
            </summary>
            <param name="d">BubbleDataPoint that changed its Size.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnSizePropertyChanged(System.Double,System.Double)">
            <summary>
            SizeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.ActualSizeProperty">
            <summary>
            Identifies the ActualSize dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnActualSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ActualSizeProperty property changed handler.
            </summary>
            <param name="d">BubbleDataPoint that changed its ActualSize.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnActualSizePropertyChanged(System.Double,System.Double)">
            <summary>
            ActualSizeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.#ctor">
            <summary>
            Initializes a new instance of the bubble data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.Size">
            <summary>
            Gets or sets the size value of the bubble data point.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.SizePropertyChanged">
            <summary>
            This event is raised when the size property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.ActualSize">
            <summary>
            Gets or sets the actual size of the bubble data point.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.ActualSizePropertyChanged">
            <summary>
            This event is raised when the actual size property is changed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ColumnDataPoint">
            <summary>
            Represents a data point used for column series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnDataPoint.#ctor">
            <summary>
            Initializes a new instance of the ColumnDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ISeriesHost">
            <summary>
            Defines properties, methods and events for classes that host a 
            collection of Series objects.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.IStyleDispenser">
            <summary>
            Represents a service that dispenses Styles.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.IStyleDispenser.GetStylesWhere(System.Func{System.Windows.Style,System.Boolean})">
            <summary>
            Returns a rotating enumerator of Style objects that coordinates with 
            the style dispenser object to ensure that no two enumerators are
            currently on the same style if possible.  If the style
            dispenser is reset or its collection of styles is changed then
            the enumerators will also be reset.
            </summary>
            <param name="stylePredicate">A predicate that returns a value
            indicating whether to return a style.</param>
            <returns>An enumerator of styles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.IStyleDispenser.ResetStyles">
            <summary>
            Resets the style dispenser.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.Axes">
            <summary>
            Gets the collection of axes the series host has available.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.Series">
            <summary>
            Gets the collection of series the series host has available.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.ForegroundElements">
            <summary>
            Gets the foreground elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.BackgroundElements">
            <summary>
            Gets the background elements.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.GlobalSeriesIndexesInvalidated">
            <summary>
            Occurs when the series descendents in the series host have changed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ISeriesHostExtensions">
            <summary>
            Extension methods for series hosts.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ISeriesHostExtensions.GetDescendentSeries(System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Gets all series that track their global indexes recursively.
            </summary>
            <param name="rootSeriesHost">The root series host.</param>
            <returns>A sequence of series.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ISeriesHostExtensions.IsUsedByASeries(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Gets a value indicating whether an axis is in use by the series 
            host.
            </summary>
            <param name="that">The series host.</param>
            <param name="axis">The axis that may or may not be used by a 
            series.</param>
            <returns>A value indicating whether an axis is in use by the series 
            host.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection">
            <summary>
            An axes collection used by a series host.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1">
            <summary>
            An observable collection that does not allow duplicates.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item at an index. Throws if the item already exists in the collection.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets an item at a given index. Throws if the item already exists at another index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1.ClearItems">
            <summary>
            Clears all items in the collection by removing them individually.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.#ctor(System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Instantiates a new instance of the SeriesHostAxesCollection class.
            </summary>
            <param name="seriesHost">The series host.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.#ctor(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.UniqueObservableCollection{System.Windows.Controls.DataVisualization.Charting.IAxis})">
            <summary>
            Instantiates a new instance of the SeriesHostAxesCollection class.
            </summary>
            <param name="seriesHost">The series host.</param>
            <param name="persistentAxes">A collection of axes that can never be 
            removed from the chart.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.ThisCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            A method that attaches and removes listeners to axes added to this
            collection.
            </summary>
            <param name="sender">This object.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.AxisRegisteredListenersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Remove an axis from the collection if it is no longer used.
            </summary>
            <param name="sender">The axis that has had its registered 
            listeners collection changed.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.PersistentAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method synchronizes the collection with the persistent axes 
            collection when it is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the axes collection but throws an exception
            if a series in the series host is listening to it.
            </summary>
            <param name="index">The index of the item being removed.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.SeriesHost">
            <summary>
            Gets or sets the series host field.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.PersistentAxes">
            <summary>
            Gets or sets a collection of axes cannot be removed under any 
            circumstances.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AreaSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y 
            line format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1">
            <summary>
            A base class that contains methods used by both the line and area series.
            </summary>
            <typeparam name="T">The type of data point used by the series.</typeparam>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes">
            <summary>
            A dynamic series with axes and only one legend item and style for all 
            data points.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes">
            <summary>
            Represents a dynamic series that uses axes to display data points.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointSeries">
            <summary>
            Represents a control that contains a dynamic data series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Series">
            <summary>
            Represents a control that contains a data series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Series._seriesHost">
            <summary>
            Stores the Parent instance the Series belongs to.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Called when the value of the SeriesHost property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new series host value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Series.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.OnTitleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TitleProperty property changed callback.
            </summary>
            <param name="o">Series for which the Title changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.OnTitleChanged(System.Object,System.Object)">
            <summary>
            Called when the Title property changes.
            </summary>
            <param name="oldValue">The old value of the Title property.</param>
            <param name="newValue">The new value of the Title property.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.#ctor">
            <summary>
            Initializes a new instance of the Series class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.Refresh">
            <summary>
            Refreshes data from data source and renders the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.RefreshStyles">
            <summary>
            Refreshes styles from style dispenser and renders the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Series.SeriesHost">
            <summary>
            Gets or sets the parent instance the Series belongs to.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Series.LegendItems">
            <summary>
            Gets the legend items to be added to the legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Series.Title">
            <summary>
            Gets or sets the title content of the Series.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PlotAreaName">
            <summary>
            The name of the template part with the plot area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._storyBoardQueue">
            <summary>
            Queue of hide/reveal storyboards to play.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._dependentValueBinding">
            <summary>
            The binding used to identify the dependent value binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._dataPointsByObject">
            <summary>
            Data points collection sorted by object.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._independentValueBinding">
            <summary>
            The binding used to identify the independent value binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnItemsSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed callback.
            </summary>
            <param name="o">Series for which the ItemsSource changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the ItemsSource property changes.
            </summary>
            <param name="oldValue">Old value of the ItemsSource property.</param>
            <param name="newValue">New value of the ItemsSource property.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionEasingFunctionProperty">
            <summary>
            Identifies the TransitionEasingFunction dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IsSelectionEnabledProperty">
            <summary>
            Identifies the IsSelectionEnabled dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnIsSelectionEnabledPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="d">DynamicSeries that changed its IsSelectionEnabled.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnIsSelectionEnabledPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AnimationSequenceProperty">
            <summary>
            Identifies the AnimationSequence dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._weakEventListener">
            <summary>
            WeakEventListener used to handle INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._plotArea">
            <summary>
            The plot area canvas.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._processingOnSelectedItemPropertyChanged">
            <summary>
            Tracks whether a call to OnSelectedItemPropertyChanged is already in progress.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="d">DynamicSeries that changed its SelectedItem.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSelectedItemPropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="oldValue">The old selected index.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.LegendItemStyleProperty">
            <summary>
            Identifies the LegendItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnLegendItemStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LegendItemStyleProperty property changed handler.
            </summary>
            <param name="d">DataPointSeries that changed its LegendItemStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnLegendItemStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when the value of the LegendItemStyle property changes.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._needRefreshWhenSizeChanged">
            <summary>
            Indicates whether a call to Refresh is required when the control's
            size changes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionDurationProperty">
            <summary>
            Identifies the TransitionDuration dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.#ctor">
            <summary>
            Initializes a new instance of the Series class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AddObject(System.Object)">
            <summary>
            Adds an object to the series host by creating a corresponding data point
            for it.
            </summary>
            <param name="dataContext">The object to add to the series host.</param>
            <returns>The data point created for the object.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ShouldCreateDataPoint(System.Object)">
            <summary>
            Returns whether a data point should be created for the data context.
            </summary>
            <param name="dataContext">The data context that will be used for the
            data point.</param>
            <returns>A value indicating whether a data point should be created
            for the data context.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.GetInsertionIndex(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Returns the index at which to insert data point in the plot area
            child collection.
            </summary>
            <param name="dataPoint">The data point to retrieve the insertion
            index for.</param>
            <returns>The insertion index.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AddDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Adds a data point to the plot area.
            </summary>
            <param name="dataPoint">The data point to add to the plot area.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.GetDataPoint(System.Object)">
            <summary>
            Retrieves the data point corresponding to the object passed as the
            parameter.
            </summary>
            <param name="dataContext">The data context used for the point.
            </param>
            <returns>The data point associated with the object.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.CreateAndPrepareDataPoint(System.Object)">
            <summary>
            Creates and prepares a data point.
            </summary>
            <param name="dataContext">The object to use as the data context
            of the data point.</param>
            <returns>The newly created data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.CreateDataPoint">
            <summary>
            Returns a Control suitable for the Series.
            </summary>
            <returns>The DataPoint instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.CreateLegendItem">
            <summary>
            Creates a legend item.
            </summary>
            <returns>A legend item for insertion in the legend items collection.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ItemsSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that handles the ObservableCollection.CollectionChanged event for the ItemsSource property.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.LoadDataPoints(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Updates data points collection with items retrieved from items
            source and removes the old items.
            </summary>
            <param name="newItems">The items to load.</param>
            <param name="oldItems">The items to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnApplyTemplate">
            <summary>
            Attaches handler plot area after loading it from XAML.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.InvokeOnLayoutUpdated(System.Action)">
            <summary>
            Invokes an action when the plot area's layout is updated.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Handles changes to the SeriesHost property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnItemsSourceCollectionChanged(System.Collections.IEnumerable,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method called when the ItemsSource collection changes.
            </summary>
            <param name="collection">New value of the collection.</param>
            <param name="e">Information about the change.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnPlotAreaChanged(System.Windows.Controls.Panel,System.Windows.Controls.Panel)">
            <summary>
            Removes items from the existing plot area and adds items to new
            plot area.
            </summary>
            <param name="oldValue">The previous plot area.</param>
            <param name="newValue">The new plot area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Updates the visual appearance of all the data points when the size
            changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.Refresh">
            <summary>
            Refreshes data from data source and renders the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.RemoveObject(System.Object)">
            <summary>
            Removes an object from the series host by removing its corresponding
            data point.
            </summary>
            <param name="dataContext">The object to remove from the series data
            source.</param>
            <returns>The data point corresponding to the removed object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.RemoveDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Removes a data point from the plot area.
            </summary>
            <param name="dataPoint">The data point to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.UpdateDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Updates the visual representation of all data points in the plot
            area.
            </summary>
            <param name="dataPoints">A sequence of data points to update.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AttachEventHandlersToDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Attaches event handlers to the data points.
            </summary>
            <param name="dataPoints">A sequence of data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DetachEventHandlersFromDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Detaches event handlers from the data points.
            </summary>
            <param name="dataPoints">A sequence of data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AttachEventHandlersToDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Attaches event handlers to a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.Unselect(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Unselects a data point.
            </summary>
            <param name="dataPoint">The data point to unselect.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.Select(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Selects a data point.
            </summary>
            <param name="dataPoint">The data point to select.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointIsSelectedChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Method executed when a data point is either selected or unselected.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DetachEventHandlersFromDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Detaches event handlers from a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnBeforeUpdateDataPoints">
            <summary>
            This method that executes before data points are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnAfterUpdateDataPoints">
            <summary>
            This method that executes after data points are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the visual representation of a single data point in the plot
            area.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object)">
            <summary>
            Prepares a data point by extracting binding it to a data context
            object.
            </summary>
            <param name="dataPoint">A data point.</param>
            <param name="dataContext">A data context object.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.StaggeredStateChange(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Int32,System.Windows.Controls.DataVisualization.Charting.DataPointState)">
            <summary>
            Reveals data points using a storyboard.
            </summary>
            <param name="dataPoints">The data points to change the state of.
            </param>
            <param name="dataPointCount">The number of data points in the sequence.</param>
            <param name="newState">The state to change to.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointStateChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Controls.DataVisualization.Charting.DataPointState})">
            <summary>
            Handles data point state property change.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointStateChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Windows.Controls.DataVisualization.Charting.DataPointState,System.Windows.Controls.DataVisualization.Charting.DataPointState)">
            <summary>
            Handles data point state property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualDependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.IComparable})">
            <summary>
            Handles data point actual dependent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Handles data point actual dependent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualIndependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handles data point actual independent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Handles data point actual independent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointDependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.IComparable})">
            <summary>
            Handles data point dependent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Handles data point dependent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointIndependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handles data point independent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Handles data point independent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DependentValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DependentValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IndependentValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IndependentValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ItemsSource">
            <summary>
            Gets or sets a collection used to contain the data points of the Series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AnimationSequence">
            <summary>
            Gets or sets the animation sequence to use for the DataPoints of the Series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ActiveDataPoints">
            <summary>
            Gets a stream of the active data points in the plot area.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ActiveDataPointCount">
            <summary>
            Gets the number of active data points in the plot area.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionEasingFunction">
            <summary>
            Gets or sets the easing function to use when transitioning the
            data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IsSelectionEnabled">
            <summary>
            Gets or sets a value indicating whether elements in the series can
            be selected.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PlotArea">
            <summary>
            Gets the plot area canvas.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PlotAreaSize">
            <summary>
            Gets the size of the plot area.
            </summary>
            <remarks>
            Use this method instead of PlotArea.ActualWidth/ActualHeight
            because the ActualWidth and ActualHeight properties are set after
            the SizeChanged handler runs.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.SelectionChanged">
            <summary>
            Event raised when selection has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TemplateApplied">
            <summary>
            Gets or sets a value indicating whether the template has been
            applied.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.LegendItemStyle">
            <summary>
            Gets or sets the style to use for the legend items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ClipGeometry">
            <summary>
            Gets or sets the Geometry used to clip DataPoints to the PlotArea bounds.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionDuration">
            <summary>
            Gets or sets the duration of the value Transition animation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.UpdatingDataPoints">
            <summary>
            Gets a value indicating whether all data points are being
            updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.CreateRangeAxisFromData(System.Object)">
            <summary>
            Creates the correct range axis based on the data.
            </summary>
            <param name="value">The value to evaluate to determine which type of
            axis to create.</param>
            <returns>The range axis appropriate that can plot the provided
            value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetActualDataPointAxisValue(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Retrieves the value for a given access from a data point.
            </summary>
            <param name="dataPoint">The data point to retrieve the value from.</param>
            <param name="axis">The axis to retrieve the value for.</param>
            <returns>A function that returns a value appropriate for the axis
            when provided a DataPoint.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes._internalDependentAxis">
            <summary>
            Stores the internal dependent axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnInternalDependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            DependentAxisProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes._internalIndependentAxis">
            <summary>
            The internal independent axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnInternalIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.#ctor">
            <summary>
            Initializes a new instance of the DynamicSeriesWithAxes class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointActualDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Update the axes when the specified data point's ActualDependentValue property changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Update the axes when the specified data point's DependentValue property changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdateActualDependentAxis">
            <summary>
            Update axes when the specified data point's effective dependent value changes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointActualIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Update axes when the specified data point's actual independent value changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Update axes when the specified data point's independent value changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdateActualIndependentAxis">
            <summary>
            Update axes when a data point's effective independent value changes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdateDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Only updates all data points if series has axes.
            </summary>
            <param name="dataPoints">A sequence of data points to update.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetAxes">
            <summary>
            Method called to get series to acquire the axes it needs.  Acquires
            no axes by default.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Method called to get series to acquire the axes it needs.  Acquires
            no axes by default.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis,System.Boolean},System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis},System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis,System.Boolean},System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis})">
            <summary>
            Method called to get the axes that the series needs.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
            <param name="independentAxisPredicate">A predicate that returns
            a value indicating whether an axis is an acceptable candidate for
            the series independent axis.</param>
            <param name="independentAxisFactory">A function that creates an
            acceptable independent axis.</param>
            <param name="dependentAxisPredicate">A predicate that returns
            a value indicating whether an axis is an acceptable candidate for
            the series dependent axis.</param>
            <param name="dependentAxisFactory">A function that creates an
            acceptable dependent axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IAxisListener#AxisInvalidated(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Updates data points when the axis is invalidated.
            </summary>
            <param name="axis">The axis that was invalidated.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the actual range of data for a given axis.
            </summary>
            <param name="consumer">The axis to retrieve the range for.</param>
            <returns>The actual range of data.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for a given axis.
            </summary>
            <param name="consumer">The axis to retrieve the value margins for.
            </param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IDataProvider#GetData(System.Windows.Controls.DataVisualization.Charting.IDataConsumer)">
            <summary>
            Returns data to a data consumer.
            </summary>
            <param name="dataConsumer">The data consumer requesting the data.
            </param>
            <returns>The data for a given data consumer.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Called when the value of the SeriesHost property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new series host value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IRangeProvider#GetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the data range.
            </summary>
            <param name="rangeConsumer">The consumer requesting the range.</param>
            <returns>The data range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IValueMarginProvider#GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for a given axis.
            </summary>
            <param name="axis">The axis to retrieve the value margins for.
            </param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.DataPointsByActualDependentValue">
            <summary>
            Gets or sets the data points by dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalActualDependentAxis">
            <summary>
            Gets or sets the actual dependent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalDependentAxis">
            <summary>
            Gets or sets the value of the internal dependent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalActualIndependentAxis">
            <summary>
            Gets or sets the actual independent axis value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalIndependentAxis">
            <summary>
            Gets or sets the value of the internal independent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdatingAllAxes">
            <summary>
            Gets or sets a value indicating whether to the axes are being 
            updated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.AxesInvalidated">
            <summary>
            Gets or sets a value indicating whether the axes have been 
            invalidated.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRequireGlobalSeriesIndex">
            <summary>
            Defines methods on classes that contain a global index.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRequireGlobalSeriesIndex.GlobalSeriesIndexChanged(System.Nullable{System.Int32})">
            <summary>
            Occurs when a global series index changes.
            </summary>
            <param name="globalIndex">The global index that has changed.
            </param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.DataPointStyleProperty">
            <summary>
            Identifies the DataPointStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GlobalSeriesIndexProperty">
            <summary>
            Identifies the GlobalSeriesIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnGlobalSeriesIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            GlobalSeriesIndexProperty property changed handler.
            </summary>
            <param name="d">Series that changed its Index.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnGlobalSeriesIndexPropertyChanged(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            GlobalSeriesIndexProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnTitleChanged(System.Object,System.Object)">
            <summary>
            Called when the Title property changes.
            </summary>
            <param name="oldValue">Old value of the Title property.</param>
            <param name="newValue">New value of the Title property.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.#ctor">
            <summary>
            Initializes a new instance of the DynamicSingleSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GetStyleEnumeratorFromHost">
            <summary>
            Returns the data point style to use for all data points in the 
            series.
            </summary>
            <returns>The data point style to use for all charts in the series.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnPlotAreaChanged(System.Windows.Controls.Panel,System.Windows.Controls.Panel)">
            <summary>
            Insert grid containing data point used for legend item into the 
            plot area.
            </summary>
            <param name="oldValue">The old plot area.</param>
            <param name="newValue">The new plot area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            When the series host property is set retrieves a style to use for all the
            data points.
            </summary>
            <param name="oldValue">The old series host value.</param>
            <param name="newValue">The new series host value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.CreateLegendItemDataPoint">
            <summary>
            Creates the LegendItem Control if conditions are right.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object)">
            <summary>
            Sets the style of the data point to the single style used for all
            data points.
            </summary>
            <param name="dataPoint">The data point to apply the style to.
            </param>
            <param name="dataContext">The object associated with the data point.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GlobalSeriesIndexChanged(System.Nullable{System.Int32})">
            <summary>
            This method updates the global series index property.
            </summary>
            <param name="globalIndex">The global index of the series.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.RefreshStyles">
            <summary>
            Refreshes the styles in the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.LegendItem">
            <summary>
            Gets the single legend item associated with the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.CustomTitleInUse">
            <summary>
            Gets or sets a value indicating whether a custom title is in use.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.DataPointStyle">
            <summary>
            Gets or sets the style to use for the data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.ActualDataPointStyle">
            <summary>
            Gets or sets the actual style of used for the data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GlobalSeriesIndex">
            <summary>
            Gets the index of the series in the Parent's series collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.#ctor">
            <summary>
            Initializes a new instance of the LineAreaBaseSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnAfterUpdateDataPoints">
            <summary>
            This method executes after all data points have been updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Repositions line data point in the sorted collection if the actual 
            independent axis is a range axis.
            </summary>
            <param name="dataPoint">The data point that has changed.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.CreateDataPoint">
            <summary>
            Creates a new line data point.
            </summary>
            <returns>A line data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.GetStyleEnumeratorFromHost">
            <summary>
            Returns the style to use for all data points.
            </summary>
            <returns>The style to use for all data points.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.UpdateShape">
            <summary>
            Updates the point collection object.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.DataPointsByIndependentValue">
            <summary>
            Gets data points collection sorted by independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AreaSeries.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AreaSeries.PathStyleProperty">
            <summary>
            Identifies the PathStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.#ctor">
            <summary>
            Initializes a new instance of the AreaSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.OnApplyTemplate">
            <summary>
            Creates a DataPoint for determining the line color.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AreaSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">AreaSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AreaSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">AreaSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the visual representation of the data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.UpdateShape">
            <summary>
            Updates the point collection object.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Remove value margins from the side of the data points to ensure
            that area chart is flush against the edge of the chart.
            </summary>
            <param name="consumer">The value margin consumer.</param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.Geometry">
            <summary>
            Gets the geometry property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.PathStyle">
            <summary>
            Gets or sets the style of the Path object that follows the data 
            points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.IndependentAxis">
            <summary>
            Gets or sets the independent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.System#Windows#Controls#DataVisualization#Charting#IAnchoredToOrigin#AnchoredAxis">
            <summary>
            Gets the axis to which the series is anchored.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs">
            <summary>
            Information describing the style dispensed when a StyleDispensed event 
            is raised.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs.#ctor(System.Int32,System.Windows.Style)">
            <summary>
            Initializes a new instance of the StyleDispensedEventArgs class.
            </summary>
            <param name="index">The index of the style dispensed.</param>
            <param name="style">The style dispensed.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs.Equals(System.Object)">
            <summary>
            Returns a value indicating whether two style dispenser arguments are 
            equal.
            </summary>
            <param name="obj">The other StyleDispenser object.</param>
            <returns>A value indicating whether two style dispenser arguments 
            are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs.Index">
            <summary>
            Gets the index of the style dispensed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs.Style">
            <summary>
            Gets the style dispensed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator">
            <summary>
            An enumerator that dispenses styles sequentially by coordinating with
            related enumerators.  Enumerators are related through an association
            with a parent StyleDispenser class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.index">
            <summary>
            The index of current item in the StyleDispenser's list.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator._parentEnumerator">
            <summary>
            The parent enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.#ctor(System.Windows.Controls.DataVisualization.Charting.StyleDispenser,System.Func{System.Windows.Style,System.Boolean})">
            <summary>
            Initializes a new instance of a StyleEnumerator.
            </summary>
            <param name="dispenser">The style dispenser that dispensed this
            StyleEnumerator.</param>
            <param name="stylePredicate">A predicate used to determine which
            styles to return.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.StyleDispenserParentChanged">
            <summary>
            The style dispenser parent has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.GetIndexOfNextSuitableStyle(System.Int32)">
            <summary>
            Returns the index of the next suitable style in the style dispenser
            list.
            </summary>
            <param name="startIndex">The index at which to start looking.</param>
            <returns>The index of the next suitable style.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.StyleDispenserResetting">
            <summary>
            Resets the style dispenser.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.StyleDispenserStyleDispensed(System.Object,System.Windows.Controls.DataVisualization.StyleDispensedEventArgs)">
            <summary>
            This method is invoked when one of the related style enumerator's 
            dispenses a style.  The enumerator checks to see if the style 
            dispensed would've been the next style it would have returned.  If
            so it updates it's index to the position after the previously
            returned style.
            </summary>
            <param name="sender">The style dispenser.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.OnStyleDispensed(System.Windows.Controls.DataVisualization.StyleDispensedEventArgs)">
            <summary>
            Raises the style dispensed event.
            </summary>
            <param name="args">Information about the style dispensed.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.MoveNext">
            <summary>
            Moves to the next style.
            </summary>
            <returns>A value indicating whether there are any more suitable
            styles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.Reset">
            <summary>
            Resets the style enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.Dispose">
            <summary>
            Stops listening to style dispenser.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.CurrentStyle">
            <summary>
            Gets or sets the current style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.ParentEnumerator">
            <summary>
            Gets the parent enumerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.StylePredicate">
            <summary>
            Gets or sets a predicate that returns a value indicating whether a 
            style should be returned by this enumerator.
            </summary>
            <returns>A value indicating whether a style can be returned by this
            enumerator.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.StyleDispenser">
            <summary>
            Gets the style dispenser that dispensed this enumerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.Current">
            <summary>
            Gets the current style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.ShouldRetrieveFromParentEnumerator">
            <summary>
            Gets a value indicating whether a enumerator should return styles
            from its parent enumerator.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap">
            <summary>
            A class used to calculate axis range. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.#ctor">
            <summary>
            Initializes a new instance of the ValueMarginCoordinateAndOverlap 
            class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.ValueMargin">
            <summary>
            Gets or sets the value margin object.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.Coordinate">
            <summary>
            Gets or sets the coordinate.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.LeftOverlap">
            <summary>
            Gets or sets the left overlap.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.RightOverlap">
            <summary>
            Gets or sets the right overlap.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2">
            <summary>
            Implements a left-leaning red-black tree.
            </summary>
            <remarks>
            Based on the research paper "Left-leaning Red-Black Trees"
            by Robert Sedgewick. More information available at:
            http://www.cs.princeton.edu/~rs/talks/LLRB/RedBlack.pdf
            http://www.cs.princeton.edu/~rs/talks/LLRB/08Penn.pdf
            </remarks>
            <typeparam name="TKey">Type of keys.</typeparam>
            <typeparam name="TValue">Type of values.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2._keyComparison">
            <summary>
            Stores the key comparison function.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2._valueComparison">
            <summary>
            Stores the value comparison function.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2._rootNode">
            <summary>
            Stores the root node of the tree.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the LeftLeaningRedBlackTree class implementing a normal dictionary.
            </summary>
            <param name="keyComparison">The key comparison function.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.#ctor(System.Comparison{`0},System.Comparison{`1})">
            <summary>
            Initializes a new instance of the LeftLeaningRedBlackTree class implementing an ordered multi-dictionary.
            </summary>
            <param name="keyComparison">The key comparison function.</param>
            <param name="valueComparison">The value comparison function.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Add(`0,`1)">
            <summary>
            Adds a key/value pair to the tree.
            </summary>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Remove(`0)">
            <summary>
            Removes a key (and its associated value) from a normal (non-multi) dictionary.
            </summary>
            <param name="key">Key to remove.</param>
            <returns>True if key present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Remove(`0,`1)">
            <summary>
            Removes a key/value pair from the tree.
            </summary>
            <param name="key">Key to remove.</param>
            <param name="value">Value to remove.</param>
            <returns>True if key/value present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Clear">
            <summary>
            Removes all nodes in the tree.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetKeys">
            <summary>
            Gets a sorted list of keys in the tree.
            </summary>
            <returns>Sorted list of keys.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetValueForKey(`0)">
            <summary>
            Gets the value associated with the specified key in a normal (non-multi) dictionary.
            </summary>
            <param name="key">Specified key.</param>
            <returns>Value associated with the specified key.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetValuesForKey(`0)">
            <summary>
            Gets a sequence of the values associated with the specified key.
            </summary>
            <param name="key">Specified key.</param>
            <returns>Sequence of values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetValuesForAllKeys">
            <summary>
            Gets a sequence of all the values in the tree.
            </summary>
            <returns>Sequence of all values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.IsRed(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Returns true if the specified node is red.
            </summary>
            <param name="node">Specified node.</param>
            <returns>True if specified node is red.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Add(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,`0,`1)">
            <summary>
            Adds the specified key/value pair below the specified root node.
            </summary>
            <param name="node">Specified node.</param>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Remove(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,`0,`1)">
            <summary>
            Removes the specified key/value pair from below the specified node.
            </summary>
            <param name="node">Specified node.</param>
            <param name="key">Key to remove.</param>
            <param name="value">Value to remove.</param>
            <returns>True if key/value present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.FlipColor(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Flip the colors of the specified node and its direct children.
            </summary>
            <param name="node">Specified node.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.RotateLeft(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Rotate the specified node "left".
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.RotateRight(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Rotate the specified node "right".
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MoveRedLeft(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Moves a red node from the right child to the left child.
            </summary>
            <param name="node">Parent node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MoveRedRight(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Moves a red node from the left child to the right child.
            </summary>
            <param name="node">Parent node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.DeleteMinimum(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Deletes the minimum node under the specified node.
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.FixUp(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Maintains invariants by adjusting the specified nodes children.
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetNodeForKey(`0)">
            <summary>
            Gets the (first) node corresponding to the specified key.
            </summary>
            <param name="key">Key to search for.</param>
            <returns>Corresponding node or null if none found.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetExtreme``1(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node},System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,``0})">
            <summary>
            Gets an extreme (ex: minimum/maximum) value.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="node">Node to start from.</param>
            <param name="successor">Successor function.</param>
            <param name="selector">Selector function.</param>
            <returns>Extreme value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Traverse``1(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Boolean},System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,``0})">
            <summary>
            Traverses a subset of the sequence of nodes in order and selects the specified nodes.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="node">Starting node.</param>
            <param name="condition">Condition method.</param>
            <param name="selector">Selector method.</param>
            <returns>Sequence of selected nodes.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.KeyAndValueComparison(`0,`1,`0,`1)">
            <summary>
            Compares the specified keys (primary) and values (secondary).
            </summary>
            <param name="leftKey">The left key.</param>
            <param name="leftValue">The left value.</param>
            <param name="rightKey">The right key.</param>
            <param name="rightValue">The right value.</param>
            <returns>CompareTo-style results: -1 if left is less, 0 if equal, and 1 if greater than right.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.IsMultiDictionary">
            <summary>
            Gets a value indicating whether the tree is acting as an ordered multi-dictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Count">
            <summary>
            Gets the count of key/value pairs in the tree.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MinimumKey">
            <summary>
            Gets the minimum key in the tree.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MaximumKey">
            <summary>
            Gets the maximum key in the tree.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MinimumValue">
            <summary>
            Gets the minimum key's minimum value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MaximumValue">
            <summary>
            Gets the maximum key's maximum value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node">
            <summary>
            Represents a node of the tree.
            </summary>
            <remarks>
            Using fields instead of properties drops execution time by about 40%.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Key">
            <summary>
            Gets or sets the node's key.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Value">
            <summary>
            Gets or sets the node's value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Left">
            <summary>
            Gets or sets the left node.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Right">
            <summary>
            Gets or sets the right node.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.IsBlack">
            <summary>
            Gets or sets the color of the node.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Siblings">
            <summary>
            Gets or sets the number of "siblings" (nodes with the same key/value).
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2">
            <summary>
            Implements a dictionary that can store multiple values for the same key.
            </summary>
            <typeparam name="TKey">Type for keys.</typeparam>
            <typeparam name="TValue">Type for values.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the MultipleDictionary class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the MultipleDictionary class.
            </summary>
            <param name="allowDuplicateValues">The parameter is not used.</param>
            <param name="keyEqualityComparer">The parameter is not used.</param>
            <param name="valueEqualityComparer">The parameter is not used.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Add(`0,`1)">
            <summary>
            Adds a key/value pair to the dictionary.
            </summary>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a key/value pair from the dictionary.
            </summary>
            <param name="key">Key to remove.</param>
            <param name="value">Value to remove.</param>
            <returns>True if the value was present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Clear">
            <summary>
            Clears the items in the dictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.BinaryTree">
            <summary>
            Gets or sets the BinaryTree instance used to store the dictionary values.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Count">
            <summary>
            Gets the count of values in the dictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Item(`0)">
            <summary>
            Returns the collection of values corresponding to a key.
            </summary>
            <param name="key">Specified key.</param>
            <returns>Collection of values.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2">
            <summary>
            Implements a dictionary that can store multiple values for the same key and sorts the values.
            </summary>
            <typeparam name="TKey">Type for keys.</typeparam>
            <typeparam name="TValue">Type for values.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.#ctor(System.Boolean,System.Comparison{`0},System.Comparison{`1})">
            <summary>
            Initializes a new instance of the MultipleDictionary class.
            </summary>
            <param name="allowDuplicateValues">The parameter is not used.</param>
            <param name="keyComparison">Key comparison class.</param>
            <param name="valueComparison">Value comparison class.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.GetKeyRange">
            <summary>
            Gets a Range corresponding to the keys in the dictionary.
            </summary>
            <returns>Range of keys.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.GetLargestAndSmallestValues">
            <summary>
            Gets the largest and smallest key's extreme values from the dictionary.
            </summary>
            <returns>Tuple of the largest and smallest values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for the values in the dictionary.
            </summary>
            <returns>Enumerator for values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the values in the dictionary.
            </summary>
            <returns>Enumerator for the values.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1">
            <summary>
            A generic equality comparer.
            </summary>
            <typeparam name="T">The type of the objects being compared.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the GenericEqualityComparer class.
            </summary>
            <param name="equalityFunction">A function which determines whether 
            two items are equal.</param>
            <param name="hashCodeFunction">A function that returns a hash code 
            for an object.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            A function which determines whether two items are equal.
            </summary>
            <param name="x">The left object.</param>
            <param name="y">The right object.</param>
            <returns>A value indicating whether the objects. are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.GetHashCode(`0)">
            <summary>
            A function that returns a hash code for an object.
            </summary>
            <param name="obj">The object to returns a hash code for.</param>
            <returns>The hash code for the object.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.EqualityFunction">
            <summary>
            Gets or sets a function which determines whether two items are equal.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.HashCodeFunction">
            <summary>
            Gets or sets a function that returns a hash code for an object.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BubbleSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y 
            line format.  A third binding determines the size of the data point.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.MaximumBubbleSizeAsRatioOfSmallestDimension">
            <summary>
            The maximum bubble size as a ratio of the smallest dimension.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries._sizeValueBinding">
            <summary>
            The binding used to identify the size value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries._rangeOfActualSizeValues">
            <summary>
            Stores the range of ActualSize values for the BubbleDataPoints.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.#ctor">
            <summary>
            Initializes a new instance of the bubble series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.CreateDataPoint">
            <summary>
            Creates a new instance of bubble data point.
            </summary>
            <returns>A new instance of bubble data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.GetStyleEnumeratorFromHost">
            <summary>
            Returns the style enumerator used to retrieve a style to use for 
            all data points.
            </summary>
            <returns>The style enumerator used to retrieve a style to use for 
            all data points.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object)">
            <summary>
            Prepares a bubble data point by binding the size value binding to
            the size property.
            </summary>
            <param name="dataPoint">The data point to prepare.</param>
            <param name="dataContext">The data context of the data point.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.AttachEventHandlersToDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Attaches size change and actual size change event handlers to the
            data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.DetachEventHandlersFromDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Detaches size change and actual size change event handlers from the
            data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.BubbleDataPointActualSizePropertyChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates all data points when the actual size property of a data 
            point changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.BubbleDataPointSizePropertyChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Animates the value of the ActualSize property to the size property
            when it changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnBeforeUpdateDataPoints">
            <summary>
            Calculates the range of ActualSize values of all active BubbleDataPoints.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.UpdateDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Ensure that if any data points are updated, all data points are 
            updated.
            </summary>
            <param name="dataPoints">The data points to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the data point's visual representation.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnAfterUpdateDataPoints">
            <summary>
            Updates the value margins after all data points are updated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">BubbleSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">BubbleSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            The margins required for each value.
            </summary>
            <param name="consumer">The consumer to return the value margins for.</param>
            <returns>A sequence of margins for each value.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.SizeValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the size of the bubble.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.SizeValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the size of the bubble.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.IndependentAxis">
            <summary>
            Gets or sets independent range axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1">
            <summary>
            This series serves as the base class for the column and bar series.
            </summary>
            <typeparam name="T">The type of the data point.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1._categoriesWithMultipleDataPoints">
            <summary>
            Keeps a list of DataPoints that share the same category.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetDataPointGroup(System.Object)">
            <summary>
            Returns the group of data points in a given category.
            </summary>
            <param name="category">The category for which to return the data
            point group.</param>
            <returns>The group of data points in a given category.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetIsDataPointGrouped(System.Object)">
            <summary>
            Returns a value indicating whether a data point corresponding to
            a category is grouped.
            </summary>
            <param name="category">The category.</param>
            <returns>A value indicating whether a data point corresponding to
            a category is grouped.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1._dataPointlength">
            <summary>
            The length of each data point.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.#ctor">
            <summary>
            Initializes a new instance of the ColumnBarBaseSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnBeforeUpdateDataPoints">
            <summary>
            Method run before DataPoints are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetStyleEnumeratorFromHost">
            <summary>
            Returns the style enumerator used to retrieve a style to use for 
            all data points.
            </summary>
            <returns>The style enumerator used to retrieve a style to use for 
            all data points.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnDataPointActualDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Updates a data point when its actual dependent value has changed.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.RedrawOtherSeries(System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Redraws other column series to assure they allocate the right amount
            of space for their columns.
            </summary>
            <param name="seriesHost">The series host to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Redraw other column series when removed from a series host.
            </summary>
            <param name="oldValue">The old value of the series host property.</param>
            <param name="newValue">The new value of the series host property.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.CreateDataPoint">
            <summary>
            Creates the bar data point.
            </summary>
            <returns>A bar data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.CalculateDataPointLength">
            <summary>
            Calculates the length of the data points.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for a given axis.
            </summary>
            <param name="consumer">The axis to retrieve the value margins for.
            </param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetCategoryRange(System.Object)">
            <summary>
            Gets a range in which to render a data point.
            </summary>
            <param name="category">The category to retrieve the range for.
            </param>
            <returns>The range in which to render a data point.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a category axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.System#Windows#Controls#DataVisualization#Charting#IAnchoredToOrigin#AnchoredAxis">
            <summary>
            Gets the axis to which the data is anchored.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ObjectPool`1">
            <summary>
            A pool of objects that can be reused.
            </summary>
            <typeparam name="T">The type of object in the pool.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1.DefaultMinimumObjectsInThePool">
            <summary>
            The default minimum number objects to keep in the pool.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1._createObject">
            <summary>
            A function which creates objects.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1._objects">
            <summary>
            The list of objects.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1.currentIndex">
            <summary>
            The index of the current item in the list.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1.minimumObjectsInThePool">
            <summary>
            The minimum number of objects to keep in the pool.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.#ctor(System.Int32,System.Func{`0})">
            <summary>
            Initializes a new instance of the ObjectPool class.
            </summary>
            <param name="minimumObjectsInThePool">The minimum number of objects
            to keep in the pool.</param>
            <param name="createObject">The function that creates the objects.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the ObjectPool class.
            </summary>
            <param name="createObject">The function that creates the objects.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.ForEachRemaining(System.Action{`0})">
            <summary>
            Performs an operation on the subsequent, already-created objects
            in the pool.
            </summary>
            <param name="action">The action to perform on the remaining objects.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Next">
            <summary>
            Creates a new object or reuses an existing object in the pool.
            </summary>
            <returns>A new or existing object in the pool.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Reset">
            <summary>
            Resets the pool of objects.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Done">
            <summary>
            Finishes the object creation process.
            </summary>
            <remarks>
            If there are substantially more remaining objects in the pool those
            objects may be removed.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Clear">
            <summary>
            Removes the objects from the pool.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper">
            <summary>
            Represents a control that can animate the transitions between its specified
            dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.KeyFramesPerSecond">
            <summary>
            Number of key frames per second to generate the date time animations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.StoryboardKeyPattern">
            <summary>
            The pattern used to ensure unique keys for the storyboards stored in
            a framework element's resource dictionary.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.GetStoryboardKey(System.String)">
            <summary>
            Returns a unique key for a storyboard.
            </summary>
            <param name="propertyPath">The property path of the property that 
            the storyboard animates.</param>
            <returns>A unique key for a storyboard.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.BeginAnimation(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.String,System.Object,System.TimeSpan,System.Windows.Media.Animation.IEasingFunction)">
            <summary>
            Starts animating a dependency property of a framework element to a 
            target value.
            </summary>
            <param name="target">The element to animate.</param>
            <param name="animatingDependencyProperty">The dependency property to
            animate.</param>
            <param name="propertyPath">The path of the dependency property to 
            animate.</param>
            <param name="targetValue">The value to animate the dependency
            property to.</param>
            <param name="timeSpan">The duration of the animation.</param>
            <param name="easingFunction">The easing function to uses to
            transition the data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.CreateStoryboard(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.String,System.Object@,System.TimeSpan,System.Windows.Media.Animation.IEasingFunction)">
            <summary>
            Creates a story board that animates a dependency property to a 
            value.
            </summary>
            <param name="target">The element that is the target of the 
            storyboard.</param>
            <param name="animatingDependencyProperty">The dependency property
            to animate.</param>
            <param name="propertyPath">The property path of the dependency
            property to animate.</param>
            <param name="toValue">The value to animate the dependency property
            to.</param>
            <param name="durationTimeSpan">The duration of the animation.
            </param>
            <param name="easingFunction">The easing function to use to
            transition the data points.</param>
            <returns>The story board that animates the property.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.GridExtensions">
            <summary>
            A set of extension methods for the Grid container.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GridExtensions.Mirror(System.Windows.Controls.Grid,System.Windows.Controls.Orientation)">
            <summary>
            Mirrors the grid either horizontally or vertically.
            </summary>
            <param name="grid">The grid to mirror.</param>
            <param name="orientation">The orientation to mirror the grid along.
            </param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.LayoutTransformControl">
            <summary>
            Control that implements support for transformations as if applied by
            LayoutTransform (which does not exist in Silverlight).
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.AcceptableDelta">
            <summary>
            Value used to work around double arithmetic rounding issues in 
            Silverlight.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.DecimalsAfterRound">
            <summary>
            Value used to work around double arithmetic rounding issues in 
            Silverlight.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.ContentProperty">
            <summary>
            Identifies the ContentProperty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.TransformProperty">
            <summary>
            Identifies the TransformProperty dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._layoutRoot">
            <summary>
            Host panel for Child element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to layout root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._transformation">
            <summary>
            Transformation matrix corresponding to matrix transform.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._childActualSize">
            <summary>
            Actual DesiredSize of Child element.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.#ctor">
            <summary>
            Initializes a new instance of the LayoutTransformControl class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.OnApplyTemplate">
            <summary>
            Called whenever the control's template changes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ChildChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the child dependency property.
            </summary>
            <param name="o">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.OnChildChanged(System.Windows.FrameworkElement)">
            <summary>
            Updates content when the child property is changed.
            </summary>
            <param name="newContent">The new child.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.TransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Transform DependencyProperty.
            </summary>
            <param name="o">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.OnTransformChanged(System.Windows.Media.Transform)">
            <summary>
            Processes the transform when the transform is changed.
            </summary>
            <param name="newValue">The transform to process.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.TransformUpdated">
            <summary>
            Notifies the LayoutTransformControl that some aspect of its 
            Transform property has changed.
            </summary>
            <remarks>
            Call this to update the LayoutTransform in cases where 
            LayoutTransformControl wouldn't otherwise know to do so.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ProcessTransform(System.Windows.Media.Transform)">
            <summary>
            Processes the current transform to determine the corresponding 
            matrix.
            </summary>
            <param name="transform">The transform to use to determine the 
            matrix.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.GetTransformMatrix(System.Windows.Media.Transform)">
            <summary>
            Walks the Transform and returns the corresponding matrix.
            </summary>
            <param name="transform">The transform to create a matrix for.
            </param>
            <returns>The matrix calculated from the transform.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can
            give to child elements. Infinity can be specified as a value to 
            indicate that the element will size to whatever content is 
            available.</param>
            <returns>The size that this element determines it needs during 
            layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this 
            element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF paramater name finalSize instead of Silverlight's 
            finalSize for clarity.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ComputeLargestTransformedSize(System.Windows.Size)">
            <summary>
            Computes the largest usable size after applying the transformation 
            to the specified bounds.
            </summary>
            <param name="arrangeBounds">The size to arrange within.</param>
            <returns>The size required.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.IsSizeSmaller(System.Windows.Size,System.Windows.Size)">
            <summary>
            Return true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">The left size.</param>
            <param name="b">The right size.</param>
            <returns>A value indicating whether the left size is smaller than
            the right.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.RoundMatrix(System.Windows.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a matrix to avoid issues due to 
            floating point imprecision.
            </summary>
            <param name="matrix">The matrix to round.</param>
            <param name="decimalsAfterRound">The number of decimals after the
            round.</param>
            <returns>The rounded matrix.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.RectTransform(System.Windows.Rect,System.Windows.Media.Matrix)">
            <summary>
            Implement Windows Presentation Foundation's Rect.Transform on 
            Silverlight.
            </summary>
            <param name="rectangle">The rectangle to transform.</param>
            <param name="matrix">The matrix to use to transform the rectangle.
            </param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.MatrixMultiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Implements Windows Presentation Foundation's Matrix.Multiply on 
            Silverlight.
            </summary>
            <param name="matrix1">The left matrix.</param>
            <param name="matrix2">The right matrix.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.MatrixHasInverse(System.Windows.Media.Matrix)">
            <summary>
            Implements Windows Presentation Foundation's Matrix.HasInverse on
            Silverlight.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>True if matrix has an inverse.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.LayoutTransformControl.Child">
            <summary>
            Gets or sets the single child of the LayoutTransformControl.
            </summary>
            <remarks>
            Corresponds to Windows Presentation Foundation's Decorator.Child 
            property.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.LayoutTransformControl.Transform">
            <summary>
            Gets or sets the Transform of the LayoutTransformControl.
            </summary>
            <remarks>
            Corresponds to UIElement.RenderTransform.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1">
            <summary>
            An object that synchronizes changes in an observable collection to 
            a list.
            </summary>
            <typeparam name="T">The type of the objects in the collection.
            </typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1._collection">
            <summary>
            The collection to synchronize with a list.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that synchronizes the panel's child collection with the 
            contents of the observable collection when it changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.Populate">
            <summary>
            A method that populates a panel with the items in the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.ClearItems">
            <summary>
            Removes the items in the adapted list from the target list.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.Collection">
            <summary>
            Gets or sets the collection to synchronize with a list.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.TargetList">
            <summary>
            Gets or sets the panel to synchronize with the collection.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.OrientedPanel">
            <summary>
            A panel that plots elements on a one dimensional plane.  In order to 
            minimize collisions it moves elements further and further from the edge 
            of the plane based on their priority.  Elements that have the same
            priority level are always the same distance from the edge.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.ActualMinimumDistanceBetweenChildrenProperty">
            <summary>
            Identifies the ActualMinimumDistanceBetweenChildren dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.MinimumDistanceBetweenChildrenProperty">
            <summary>
            Identifies the MinimumDistanceBetweenChildren dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnMinimumDistanceBetweenChildrenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumDistanceBetweenChildrenProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its MinimumDistanceBetweenChildren.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnMinimumDistanceBetweenChildrenPropertyChanged(System.Double,System.Double)">
            <summary>
            MinimumDistanceBetweenChildrenProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.ActualLengthProperty">
            <summary>
            Identifies the ActualLength dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetCenterCoordinate(System.Windows.UIElement)">
            <summary>
            Gets the value of the CenterCoordinate attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The CenterCoordinate property value for the UIElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.SetCenterCoordinate(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the CenterCoordinate attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed CenterCoordinate value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.CenterCoordinateProperty">
            <summary>
            Identifies the CenterCoordinate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnCenterCoordinatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CenterCoordinateProperty property changed handler.
            </summary>
            <param name="dependencyObject">UIElement that changed its CenterCoordinate.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.OffsetPaddingProperty">
            <summary>
            Identifies the OffsetPadding dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOffsetPaddingPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OffsetPaddingProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its OffsetPadding.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOffsetPaddingPropertyChanged(System.Double,System.Double)">
            <summary>
            OffsetPaddingProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetPriority(System.Windows.UIElement)">
            <summary>
            Gets the value of the Priority attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The Priority property value for the UIElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.SetPriority(System.Windows.UIElement,System.Int32)">
            <summary>
            Sets the value of the Priority attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed Priority value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.PriorityProperty">
            <summary>
            Identifies the Priority dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnPriorityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PriorityProperty property changed handler.
            </summary>
            <param name="dependencyObject">UIElement that changed its Priority.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.IsInvertedProperty">
            <summary>
            Identifies the IsInverted dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsInvertedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsInvertedProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its IsInverted.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsInvertedPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsInvertedProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.IsReversedProperty">
            <summary>
            Identifies the IsReversed dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsReversedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReversedProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its IsReversed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsReversedPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReversedProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOrientationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOrientationPropertyChanged(System.Windows.Controls.Orientation)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.#ctor">
            <summary>
            Instantiates a new instance of the OrientedPanel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.UpdateActualLength">
            <summary>
            Updates the actual length property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetRanges(System.Collections.Generic.IEnumerable{System.Windows.UIElement},System.Func{System.Windows.UIElement,System.Double})">
            <summary>
            Returns a sequence of ranges for a given sequence of children and a
            length selector.
            </summary>
            <param name="children">A sequence of children.</param>
            <param name="lengthSelector">A function that returns a length given
            a UIElement.</param>
            <returns>A sequence of ranges.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures children and determines necessary size.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The necessary size.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges items according to position and priority.
            </summary>
            <param name="finalSize">The final size of the panel.</param>
            <returns>The final size of the control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetCorrectedDesiredSize(System.Windows.UIElement)">
            <summary>
            Gets the "corrected" DesiredSize (for Line instances); one that is
            more consistent with how the elements actually render.
            </summary>
            <param name="element">UIElement to get the size for.</param>
            <returns>Corrected size.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.ActualMinimumDistanceBetweenChildren">
            <summary>
            Gets the actual minimum distance between children.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.MinimumDistanceBetweenChildren">
            <summary>
            Gets or sets the minimum distance between children.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.ActualLength">
            <summary>
            Gets the actual length of the panel.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.OffsetPadding">
            <summary>
            Gets or sets the amount of offset padding to add between items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.IsInverted">
            <summary>
            Gets or sets a value indicating whether the panel is inverted.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.IsReversed">
            <summary>
            Gets or sets a value indicating whether the direction is reversed. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.Orientation">
            <summary>
            Gets or sets the orientation of the panel.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.PriorityOffsets">
            <summary>
            Gets or sets the offset of the edge to use for each priority group.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StoryboardQueue">
            <summary>
            Represents a storyboard queue that plays storyboards in sequence.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.StoryboardQueue._storyBoards">
            <summary>
            A queue of the storyboards.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StoryboardQueue.Enqueue(System.Windows.Media.Animation.Storyboard,System.EventHandler)">
            <summary>
            Accepts a new storyboard to play in sequence.
            </summary>
            <param name="storyBoard">The storyboard to play.</param>
            <param name="completedAction">An action to execute when the 
            storyboard completes.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StoryboardQueue.Dequeue">
            <summary>
            Removes the next storyboard in the queue and plays it.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisOrientation">
            <summary>
            Specifies the orientation of an axis.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisOrientation.None">
            <summary>
            Orientation is automatically set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisOrientation.X">
            <summary>
            Indicates the axis plots along the X axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisOrientation.Y">
            <summary>
            Indicates the axis plots along the Y axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType">
            <summary>
            Specifies an interval type.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Auto">
            <summary>
            Automatically determined by the ISeriesHost control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Number">
            <summary>
            The interval type is numerical.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Years">
            <summary>
            The interval type is years.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Months">
            <summary>
            The interval type is months.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Weeks">
            <summary>
            The interval type is weeks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Days">
            <summary>
            The interval type is days.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Hours">
            <summary>
            The interval type is hours.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Minutes">
            <summary>
            The interval type is minutes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Seconds">
            <summary>
            The interval type is seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Milliseconds">
            <summary>
            The interval type is milliseconds.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1">
            <summary>
            Converts a string or base value to a <see cref="T:System.Nullable"/> value.
            </summary>
            <typeparam name="T">The type should be value type.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="destinationType">The type you want to convert to.
            </param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts from the specified value to the a specified type from the
            type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <param name="destinationType">The type of convert the value to
            .</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Chart">
            <summary>
            Represents a control that displays a Chart.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaName">
            <summary>
            Specifies the name of the ChartArea TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.LegendName">
            <summary>
            Specifies the name of the legend TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._legendChildrenLegendAdapter">
            <summary>
            Stores the legend children.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._chartAreaChildrenListAdapter">
            <summary>
            An adapter that synchronizes changes to the ChartAreaChildren
            property to the ChartArea panel's children collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._axes">
            <summary>
            Stores the collection of Axes in the Chart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._foregroundElements">
            <summary>
            The collection of foreground elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._backgroundElements">
            <summary>
            The collection of background elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._edgeAxes">
            <summary>
            Axes arranged along the edges.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._series">
            <summary>
            Stores the collection of Series displayed by the Chart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaStyleProperty">
            <summary>
            Identifies the ChartAreaStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.LegendStyleProperty">
            <summary>
            Identifies the LegendStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.LegendTitleProperty">
            <summary>
            Identifies the LegendTitle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.PlotAreaStyleProperty">
            <summary>
            Identifies the PlotAreaStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.StylePaletteProperty">
            <summary>
            Identifies the StylePalette dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnStylePalettePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the StylePalette property is changed.
            </summary>
            <param name="d">Chart that contains the changed StylePalette.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnStylePalettePropertyChanged(System.Collections.ObjectModel.Collection{System.Windows.Style})">
            <summary>
            Called when the value of the StylePalette property is changed.
            </summary>
            <param name="newValue">The new value for the StylePalette.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.TitleStyleProperty">
            <summary>
            Identifies the TitleStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.#ctor">
            <summary>
            Initializes a new instance of the Chart class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.GetAutoAxisLocation(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Determines the location of an axis based on the existing axes in
            the chart.
            </summary>
            <param name="axis">The axis to determine the location of.</param>
            <returns>The location of the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AddAxisToChartArea(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Adds an axis to the ISeriesHost area.
            </summary>
            <param name="axis">The axis to add to the ISeriesHost area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AxisOrientationChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Controls.DataVisualization.Charting.AxisOrientation})">
            <summary>
            Rebuilds the chart area if an axis orientation is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.SetEdge(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Sets the Edge property of an axis based on its location and
            orientation.
            </summary>
            <param name="axis">The axis to set the edge property of.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AxisLocationChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Controls.DataVisualization.Charting.AxisLocation})">
            <summary>
            Rebuild the chart area if an axis location is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AddSeriesToPlotArea(System.Windows.Controls.DataVisualization.Charting.Series)">
            <summary>
            Adds a series to the plot area and injects chart services.
            </summary>
            <param name="series">The series to add to the plot area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Chart control when a new template
            is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.ActualAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Ensures that ISeriesHost is in a consistent state when axes collection is
            changed.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.Refresh">
            <summary>
            Causes the Chart to refresh the data obtained from its data source
            and render the resulting series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.RemoveAxisFromChartArea(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Removes an axis from the Chart area.
            </summary>
            <param name="axis">The axis to remove from the ISeriesHost area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.RemoveSeriesFromPlotArea(System.Windows.Controls.DataVisualization.Charting.Series)">
            <summary>
            Removes a series from the plot area.
            </summary>
            <param name="series">The series to remove from the plot area.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnSeriesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the ObservableCollection.CollectionChanged property
            changes.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.GetStylesWhere(System.Func{System.Windows.Style,System.Boolean})">
            <summary>
            Returns a rotating enumerator of Style objects that coordinates with 
            the style dispenser object to ensure that no two enumerators are
            currently on the same style if possible.  If the style
            dispenser is reset or its collection of styles is changed then
            the enumerators will also be reset.
            </summary>
            <param name="stylePredicate">A predicate that returns a value
            indicating whether to return a style.</param>
            <returns>An enumerator of styles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.ResetStyles">
            <summary>
            Resets the styles dispensed by the chart.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnChildSeriesGlobalSeriesIndexesInvalidated(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Method handles the event raised when a child series' global series
            indexes have changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnGlobalSeriesIndexesInvalidated(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Updates the global indexes of all descendents that require a global
            index.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.UpdateGlobalIndexes">
            <summary>
            Updates the global index property of all Series that track their
            global index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._globalSeriesIndicesInvalidated">
            <summary>
            This field is used to track listeners to the
            GlobalSeriesIndexesInvalidated event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaChildren">
            <summary>
            Gets or sets the chart area children collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Axes">
            <summary>
            Gets or sets a collection of Axes in the Chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#ForegroundElements">
            <summary>
            Gets the collection of foreground elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#BackgroundElements">
            <summary>
            Gets the collection of background elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.InternalActualAxes">
            <summary>
            Gets or sets the axes that are currently in the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ActualAxes">
            <summary>
            Gets the actual axes displayed in the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ChartArea">
            <summary>
            Gets or sets the reference to the template's ChartArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Legend">
            <summary>
            Gets or sets the reference to the Chart's Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Series">
            <summary>
            Gets or sets the collection of Series displayed by the Chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's ChartArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.LegendItems">
            <summary>
            Gets the collection of legend items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.LegendStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.LegendTitle">
            <summary>
            Gets or sets the Title content of the Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.PlotAreaStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's PlotArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.StylePalette">
            <summary>
            Gets or sets a palette of styles used by the children of the ISeriesHost.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.StyleDispenser">
            <summary>
            Gets or sets an object that rotates through the palette.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Title">
            <summary>
            Gets or sets the title displayed for the Chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.TitleStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's Title.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#IRequireSeriesHost#SeriesHost">
            <summary>
            Gets or sets the Series host of the chart.
            </summary>
            <remarks>This will always return null.</remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#Axes">
            <summary>
            Gets the axes collection of the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#Series">
            <summary>
            Gets the Series collection of the chart.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#GlobalSeriesIndexesInvalidated">
            <summary>
            This event is raised when global Series indices are invalidated.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LegendItem">
            <summary>
            Represents an item used by a Series in the Legend of a Chart.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LegendItem.#ctor">
            <summary>
            Initializes a new instance of the LegendItem class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AnimationSequence">
            <summary>
            Specifies the supported animation sequences.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AnimationSequence.Simultaneous">
            <summary>
            Animates all of the data points simultaneously.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AnimationSequence.FirstToLast">
            <summary>
            Animates the data points from first to last.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AnimationSequence.LastToFirst">
            <summary>
            Animates the data points from last to first.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointState">
            <summary>
            Describes the state a data point is in.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Created">
            <summary>
            Data point has been created.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Showing">
            <summary>
            Data point is in the process of being revealed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Normal">
            <summary>
            Data point is visible in the plot area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.PendingRemoval">
            <summary>
            Data point is in the process of being removed from the plot area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Hiding">
            <summary>
            Data point is in the process of being hidden.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Hidden">
            <summary>
            Data point is hidden.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LineDataPoint">
            <summary>
            Represents a data point used for line series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineDataPoint.#ctor">
            <summary>
            Initializes a new instance of the LineDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.PieDataPoint">
            <summary>
            Represents a data point used for pie charts.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceName">
            <summary>
            The name of the slice template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnGeometryPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the Geometry property changes.
            </summary>
            <param name="d">Control that changed its Geometry.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometrySelectionProperty">
            <summary>
            Identifies the GeometrySelection dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometryHighlightProperty">
            <summary>
            Identifies the GeometryHighlight dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualOffsetRatioProperty">
            <summary>
            Identifies the ActualOffsetRatio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualOffsetRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ActualOffsetRatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its ActualOffsetRatio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualOffsetRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the ActualOffsetRatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualRatioProperty">
            <summary>
            Identifies the ActualRatio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ActualRatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its ActualRatio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the ActualRatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.FormattedRatioProperty">
            <summary>
            Identifies the FormattedRatio dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OffsetRatioProperty">
            <summary>
            Identifies the OffsetRatio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnOffsetRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the OffsetRatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its OffsetRatio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnOffsetRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the OffsetRatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioProperty">
            <summary>
            Identifies the Ratio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the RatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its Ratio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the RatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioStringFormatProperty">
            <summary>
            Identifies the RatioStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the RatioStringFormatProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its RatioStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioStringFormatPropertyChanged(System.String)">
            <summary>
            Called when the value of the RatioStringFormatProperty property changes.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.#ctor">
            <summary>
            Initializes a new instance of the PieDataPoint.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnApplyTemplate">
            <summary>
            Builds the visual tree for the PieDataPoint when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceElement_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceElement_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.Geometry">
            <summary>
            Gets or sets the Geometry property which defines the shape of the
            data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometrySelection">
            <summary>
            Gets or sets the Geometry which defines the shape of a point. The 
            GeometrySelection property is a copy of the Geometry property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometryHighlight">
            <summary>
            Gets or sets the GeometryHighlight property which is a clone of the
            Geometry property.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualOffsetRatioChanged">
            <summary>
            Occurs when the actual offset ratio of the pie data point changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualOffsetRatio">
            <summary>
            Gets or sets the offset ratio that is displayed on the screen.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualRatioChanged">
            <summary>
            An event raised when the actual ratio of the pie data point is
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualRatio">
            <summary>
            Gets or sets the ratio displayed on the screen.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.FormattedRatio">
            <summary>
            Gets the Ratio with the value of the RatioStringFormat property applied.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OffsetRatioChanged">
            <summary>
            An event raised when the offset ratio of the pie data point is
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OffsetRatio">
            <summary>
            Gets or sets the offset ratio of the pie data point.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioChanged">
            <summary>
            An event raised when the ratio of the pie data point is
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.Ratio">
            <summary>
            Gets or sets the ratio of the total that the data point 
            represents.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioStringFormat">
            <summary>
            Gets or sets the format string for the FormattedRatio property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceElement">
            <summary>
            Gets or sets the element that represents the pie slice.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ScatterDataPoint">
            <summary>
            Represents a data point used for scatter series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterDataPoint.#ctor">
            <summary>
            Initializes a new instance of the ScatterDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BarSeries">
            <summary>
            Represents a control that contains a data series to be rendered in bar format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BarSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">ColumnBarBaseSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BarSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">ColumnBarBaseSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.#ctor">
            <summary>
            Initializes a new instance of the BarSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal category axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates each point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BarSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BarSeries.IndependentAxis">
            <summary>
            Gets or sets the independent category axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StringFormatConverter">
            <summary>
            Converts a value to a string using a format string.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StringFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to a string by formatting it.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type of the conversion.</param>
            <param name="parameter">The format string.</param>
            <param name="culture">The culture to use for conversion.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a string to a target type.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <param name="targetType">The target type of the conversion.</param>
            <param name="parameter">A parameter used during the conversion
            process.</param>
            <param name="culture">The culture to use for the conversion.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StyleDispenserExtensions">
            <summary>
            Extensions methods for the IStyleDispenser interface.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StyleDispenserExtensions.GetStylesWithTargetType(System.Windows.Controls.DataVisualization.IStyleDispenser,System.Type,System.Boolean)">
            <summary>
            Returns a style enumerator that returns styles with a specified 
            target type or styles with a target type that is an ancestor of the
            specified target type.
            </summary>
            <param name="dispenser">The style dispenser.</param>
            <param name="targetType">The target type.</param>
            <param name="takeAncestors">A value indicating whether to accept 
            ancestors of the target type.</param>
            <returns>A style enumerator.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.BindingExtractor">
            <summary>
            Helper class which can extract the value from a source object using a binding path. It 
            creates a Binding object based on the path, and calls SetBinding to a temporary 
            FrameworkElement (base class) to extract the value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.BindingExtractor.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.BindingExtractor.RetrieveProperty(System.Object,System.Windows.Data.Binding)">
            <summary>
            Returns the value of the given Binding when applied on the given object instance.
            It does that by making a copy of the binding, setting its source to be the object
            instance and the target to be the member Value property.
            </summary>
            <param name="instance">Object instance containing the property.</param>
            <param name="valueBinding">Binding to the property to be retrieved.</param>
            <returns>The value of the binding.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.BindingExtractor.Value">
            <summary>
            Gets or sets a generic Value which will be the target of the binding.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.InterpolationMode">
            <summary>
            Specifies the supported interpolation modes.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.InterpolationMode.LeafNodesOnly">
            <summary>
            Interpolation shall be applied to leaf nodes only in the tree.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.InterpolationMode.AllNodes">
            <summary>
            Interpolation shall be applied to all nodes in the tree.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.SolidColorBrushInterpolator">
            <summary>
            Interpolator which converts a numeric value from its [RangeMinimum, RangeMaximum]
            range to a color in the range [From, To].
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.RangeInterpolator`1">
            <summary>
            Abstract class representing an interpolator which projects values to
            a continuous range defined by the From and To properties.
            </summary>
            <typeparam name="T">The data type of the values in the target range.</typeparam>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Interpolator">
            <summary>
            Abstract base class for Interpolator converters.
            </summary>
            <remarks>
            <para>
            An Interpolator is used to project a value from a source range 
            [ActualDataMinimum, ActualDataMaximum] to a target range [From, To]. 
            The source range can be specified directly by setting the DataMinimum 
            and/or DataMaximum properties, or indirectly by setting DataRangeBinding.
            When the DataRangeBinding property is set,the TreeMap will evaluate the 
            binding for the entire tree, calculating the minimum and maximum values 
            automatically. The custom target range and the actual interpolation 
            logic is defined by sub-classes of this abstract class.
            </para>
            </remarks>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Interpolator._helper">
            <summary>
            Holds a helper object used to extract values using a property path.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Interpolator.DataMinimumProperty">
            <summary>
            Identifies the DataMinimum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Interpolator.DataMaximumProperty">
            <summary>
            Identifies the DataMaximum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Interpolator._actualDataMaximum">
            <summary>
            This fields contains the automatically calculated maximal value in 
            the dataset.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Interpolator._actualDataMinimum">
            <summary>
            This fields contains the automatically calculated minimal value in 
            the dataset.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Interpolator.#ctor">
            <summary>
            Initializes a new instance of the Interpolator class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Interpolator.IncludeInRange(System.Object)">
            <summary>
            If the DataRangeBinding property is set then this method updates the minimum/maximum range
            of this object by including the value passed in.
            </summary>
            <param name="data">Object to extract the value from (the Source of the DataRangeBinding).</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Interpolator.Interpolate(System.Double)">
            <summary>
            Called to interpolate the value of the given object between the DataMinimum and DataMaximum
            extremes, and to project it in a specific [From, To] range defined. The target range (and
            therefore the implementation of this method) is defined in a specific sub-class.
            </summary>
            <param name="value">Value to interpolate.</param>
            <returns>An interpolated value.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.InterpolationMode">
            <summary>
            Gets or sets a value telling to which tree nodes the interpolation 
            should be applied to. LeafNodesOnly by default.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.TargetName">
            <summary>
            Gets or sets a value representing the x:Name of the element to which
            the interpolated value will be applied.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.TargetProperty">
            <summary>
            Gets or sets a value representing the path to a property which will 
            receive the interpolated value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.DataMinimum">
            <summary>
            Gets or sets a value representing the fixed minimum value across the 
            entire set. If the value is not set directly or is NaN, the 
            ActualDataMaximum will be calculated automatically from the data set 
            by using the DataRangeBinding property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.DataMaximum">
            <summary>
            Gets or sets a value representing the fixed maximum value across the 
            entire set. If the value is not set directly or is NaN, the 
            ActualDataMinimum will be calculated automatically from the data set 
            by using the DataRangeBinding property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.ActualDataMaximum">
            <summary>
            Gets the value representing the maximal value in the data set. It is
            automatically from the data set by using the DataRangeBinding 
            property if DataMaximum is not set. If it is set, DataMaximum is 
            returned.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.ActualDataMinimum">
            <summary>
            Gets the value representing the minimal value in the data set. It is
            automatically from the data set by using the DataRangeBinding 
            property if DataMinimum is not set. If it is set, DataMinimum is 
            returned.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Interpolator.DataRangeBinding">
            <summary>
            Gets or sets a binding to a property which will be examined to retrieve the minimum and maximum range 
            values across the entire data set. If this value is null then the DataMinimum and DataMaximum values
            need be set manually.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.RangeInterpolator`1.From">
            <summary>
            Gets or sets a value representing the start value of the target range.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.RangeInterpolator`1.To">
            <summary>
            Gets or sets a value representing the end value of the target range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SolidColorBrushInterpolator.Interpolate(System.Double)">
            <summary>
            Interpolates the given value between its [RangeMinimum, RangeMaximum] range
            and returns a color in the range [From, To].
            </summary>
            <param name="value">Value to interpolate.</param>
            <returns>An interpolated color in the range [From, To].</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.DoubleInterpolator">
            <summary>
            Interpolator which converts a numeric value from its [RangeMinimum, RangeMaximum]
            range to another value in the range [From, To].
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DoubleInterpolator.Interpolate(System.Double)">
            <summary>
            Interpolates the given value between its [RangeMinimum, RangeMaximum] range
            and returns an interpolated value in the range [From, To].
            </summary>
            <param name="value">Value to interpolate.</param>
            <returns>An interpolated value in the range [From, To].</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.SquaringAlgorithm">
            <summary>
            Class encapsulating the logic of sub-dividing a parent rectangular area into child rectangles.
            It implements the squaring tree map algorithm where all child nodes are allocated
            areas proportional to their values, but the aspect ratio of each rectangle is kept 
            as close as possible to a square.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.SquaringAlgorithm._areas">
            <summary>
            Holds the list of nodes being considered by the algorithm.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.SquaringAlgorithm._currentRectangle">
            <summary>
            The current rectangle being divided.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.SquaringAlgorithm._currentStart">
            <summary>
            Internal index in the list of nodes being divided.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.SquaringAlgorithm._factor">
            <summary>
            Temporary variable used during the algorithm. Represents the ratio between 
            the real area of the rectangle and the virtual value associated with the node.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SquaringAlgorithm.Split(System.Windows.Rect,System.Windows.Controls.DataVisualization.TreeMapNode,System.Windows.Thickness)">
            <summary>
            Subdivides the parent rectangle using squaring tree map algorithm into
            rectangles with areas specified by the children. The areas must add up 
            to at most the area of the rectangle.
            </summary>
            <param name="parentRectangle">Total area being split.</param>
            <param name="parentNode">The node associated with the total area. The 
            children of this node will be allocated small chunks of the parent rectangle.</param>
            <param name="margin">How much of a gap should be left between the parent rectangle and the children.</param>
            <returns>A list of RectangularArea objects describing areas associated with each of the children of parentNode.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SquaringAlgorithm.BuildTreeMap">
            <summary>
            This function returns an IEnumerable over the rectangles associated with the children,
            as divided using the tree map algorithm.
            </summary>
            <returns>A list of RectangularArea objects describing areas associated with each of the children.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SquaringAlgorithm.BuildTreeMapStep">
            <summary>
            Performs one step of the body of the squaring tree map algorithm.
            </summary>
            <returns>List of rectangles calculated by this step.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SquaringAlgorithm.GetArea(System.Int32)">
            <summary>
            Returns the calculated area of the node at the given index.
            </summary>
            <param name="i">Index of the node to consider.</param>
            <returns>Area of the node, calculated based on the node's value multiplied by the current factor.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.SquaringAlgorithm.GetAspect(System.Int32,System.Double)">
            <summary>
            Returns the aspect ratio of the area associated with the node at the given index.
            </summary>
            <param name="i">Index of the node to consider.</param>
            <param name="wh">Width of the area.</param>
            <returns>Positive supra-unitary ratio of the given area.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.TreeMapNode">
            <summary>
            Holds the information needed by the tree map layout algorithm, such as the area
            associated with this node and the list of children. The class also contains
            an DataContext object which is the real user context, and a reference to the UI
            container associated with this node.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.Area">
            <summary>
            Gets or sets a value representing the area associated with this node.
            This value is relative to all the other values in the hierarchy; the layout
            algorithm will allocated a real area proportional to this value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.Children">
            <summary>
            Gets or sets the list of children under this node.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.WeakEventListener">
            <summary>
            Gets or sets a value representing the WeakEventListener associated with the
            ItemsSource that created the children of this node.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.DataContext">
            <summary>
            Gets or sets a value representing a reference to the user's custom data object.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.Element">
            <summary>
            Gets or sets a value representing the associated Silverlight UI element.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.ItemDefinition">
            <summary>
            Gets or sets a value representing the TreeMapItemDefinition used to describe 
            properties of this item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.ChildItemPadding">
            <summary>
            Gets or sets a value representing the padding between this node and its children.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapNode.Level">
            <summary>
            Gets or sets a value representing the level of this node in the tree (the
            root node is at level 0).
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.TreeMap">
            <summary>
            Represents a control which can display hierarchical data as a set of nested rectangles. 
            Each item in the hierarchy is laid out in a rectangular area of a size proportional to 
            the value associated with the item.
            </summary>
            <remarks>
            You populate a TreeMap by setting its ItemsSource property to the root of the hierarchy 
            you would like to display. The ItemDefinition property must be set to an instance of a 
            TreeMapItemDefinition with appropriate bindings for Value (identifying the value to be used
            when calculating relative item sizes) and ItemsSource (identifying the collection of 
            children for each item).
            </remarks>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.ContainerName">
            <summary>
            The name of the Container template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.InterpolatorValueProperty">
            <summary>
            Identifies the InterpolatorValue dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap._helper">
            <summary>
            Holds a helper object used to extract values using a property path.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap._nodeRoots">
            <summary>
            The roots of the pre-calculated parallel tree of TreeMapNodes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap._getTreeMapNodesCache">
            <summary>
            Cached sequence of all TreeMapNodes used by GetTreeMapNodes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.ItemDefinitionSelectorProperty">
            <summary>
            Identifies the ItemDefinitionSelector dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemDefinitionSelectorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the TreeMapItemDefinitionSelectorProperty property changes.
            </summary>
            <param name="d">Reference to the TreeMap object.</param>
            <param name="e">Event handler arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemDefinitionSelectorPropertyChanged(System.Windows.Controls.DataVisualization.TreeMapItemDefinitionSelector,System.Windows.Controls.DataVisualization.TreeMapItemDefinitionSelector)">
            <summary>
            Called when the value of the ItemDefinitionSelectorProperty property changes.
            Triggers a recalculation of the layout.
            </summary>
            <param name="oldValue">The old selector.</param>
            <param name="newValue">The new selector.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.ItemDefinitionProperty">
            <summary>
            Identifies the ItemDefinition dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemDefinitionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ItemDefinitionProperty property changes.
            </summary>
            <param name="d">Reference to the TreeMap object.</param>
            <param name="e">Event handler arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemDefinitionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This callback ensures that any change in TreeMapItemDefinition.
            </summary>
            <param name="sender">Source TreeMapItemDefinition object.</param>
            <param name="e">Event handler arguments (parameter name).</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemDefinitionPropertyChanged(System.Windows.Controls.DataVisualization.TreeMapItemDefinition,System.Windows.Controls.DataVisualization.TreeMapItemDefinition)">
            <summary>
            Called when the value of the ItemDefinitionProperty property changes.
            Triggers a recalculation of the layout.
            </summary>
            <param name="oldValue">The old item definition.</param>
            <param name="newValue">The new item definition.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ItemsSourceProperty property changes.
            </summary>
            <param name="d">Reference to the TreeMap object.</param>
            <param name="e">Event handler arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnItemsSourcePropertyChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the value of the ItemsSourceProperty property changes.
            </summary>
            <param name="oldValue">The old ItemsSource collection.</param>
            <param name="newValue">The new ItemsSource collection.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap._weakEventListener">
            <summary>
            WeakEventListener used to handle INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.ItemsSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that handles the ObservableCollection.CollectionChanged event for the ItemsSource property.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap.InterpolatorsProperty">
            <summary>
            Identifies the Interpolators dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnInterpolatorsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the InterpolatorsProperty property changes.
            </summary>
            <param name="d">Reference to the TreeMap object.</param>
            <param name="e">Event handler arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnInterpolatorsPropertyChanged(System.Collections.ObjectModel.Collection{System.Windows.Controls.DataVisualization.Interpolator},System.Collections.ObjectModel.Collection{System.Windows.Controls.DataVisualization.Interpolator})">
            <summary>
            Called when the value of the InterpolatorsProperty property changes.
            Triggers a recalculation of the layout.
            </summary>
            <param name="oldValue">The old Interpolators collection.</param>
            <param name="newValue">The new Interpolators collection.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMap._containerElement">
            <summary>
            The Container template part is used to hold all the items inside
            a TreeMap.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.#ctor">
            <summary>
            Initializes a new instance of the TreeMap class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call ApplyTemplate. Gets references
            to the template parts required by this control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.GetContainerForItemOverride(System.Object,System.Int32)">
            <summary>
            Constructs a new instance of an element used to display an item in the tree. 
            </summary>
            <remarks>
            By default TreeMap will use the template set in its ItemDefinition property, or the value 
            returned from GetTemplateForItemOverride if overridden. Override this method to build a 
            custom element.
            </remarks>
            <param name="data">One of the items in the ItemsSource hierarchy.</param>
            <param name="level">The level of the item in the hierarchy.</param>
            <returns>A new FrameworkElement which will be added to the TreeMap control. If this
            method returns null the TreeMap will create the item using the ItemDefinition property,
            or the value returned by TreeMapItemDefinitionSelector if specified.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.ArrangeOverride(System.Windows.Size)">
            <summary>
            Performs the Arrange pass of the layout.
            </summary>
            <remarks>
            We round rectangles to snap to nearest pixels. We do that to avoid 
            anti-aliasing which results in better appearance. Moreover to get
            correct layout we would need to use UseLayoutRounding=false which
            is Silverlight specific. A side effect is that areas for rectangles 
            in the visual tree no longer can be used to compare them as dimensions
            are not rounded and therefore not precise. 
            </remarks>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.OnInterpolatorsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Triggers a recalculation of the layout when items are added/removed from the Interpolators collection.
            </summary>
            <param name="sender">Reference to the Interpolators collection.</param>
            <param name="e">Event handler arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.GetTreeMapNodes">
            <summary>
            Returns a sequence of TreeMapNodes in breadth-first order.
            </summary>
            <returns>Sequence of TreeMapNodes.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.ComputeRectangles(System.Windows.Controls.DataVisualization.TreeMapNode,System.Windows.Rect)">
            <summary>
            Recursively computes TreeMap rectangles given the root node and the bounding rectangle as start.
            </summary>
            <param name="root">Root of the TreeMapNode tree.</param>
            <param name="boundingRectangle">Bounding rectangle which will be sub-divided.</param>
            <returns>A list of RectangularAreas containing a rectangle for each node in the tree.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.BuildTreeMapTree(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Builds the parallel trees of TreeMapNodes with references to the original user's trees.
            </summary>
            <param name="nodes">The list of roots of the user hierarchies (whatever was passed through ItemsSource).</param>
            <param name="level">Level being processed at this recursive call (the root node is at level 0).</param>
            <returns>The list of roots of the internal trees of TreeMapNodes.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.CreateChildren">
            <summary>
            Extracts all children from the user's trees (ItemsSource) into a flat list, and 
            creates UI elements for them.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMap.RebuildTree">
            <summary>
            Called internally whenever a property of TreeMap is changed and the internal 
            structures need to be rebuilt in order to recalculate the layout.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.InterpolatorValue">
            <summary>
            Gets or sets a generic value used as a temporary storage used as a source for TargetName/TargetProperty binding.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.ItemDefinitionSelector">
            <summary>
            Gets or sets the selector used to choose the item template dynamically.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.ItemDefinition">
            <summary>
            Gets or sets a value representing the template used to display each item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.ItemsSource">
            <summary>
            Gets or sets a value representing the list of hierarchies used to generate
            content for the TreeMap.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.Interpolators">
            <summary>
            Gets a value representing a collection of interpolators to use in TreeMap.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMap.ContainerElement">
            <summary>
            Gets the Container template part that is used to hold all the items inside
            a TreeMap.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.TreeMapItemDefinition">
            <summary>
            Represents a class that defines various aspects of TreeMap items.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMapItemDefinition._itemTemplate">
            <summary>
            A value representing the DataTemplate to instantiate in 
            order to create a representation of each TreeMap item.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMapItemDefinition._valueBinding">
            <summary>
            A value representing a binding which can be used 
            to retrieve the value associated with each item, needed to calculate 
            relative areas of TreeMap items.        
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMapItemDefinition._itemsSource">
            <summary>
            The binding that indicates where to find the collection
            that represents the next level in the data hierarchy.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.TreeMapItemDefinition._childItemPadding">
            <summary>
            A property representing the amount of space to leave 
            between a parent item and its children.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.#ctor">
            <summary>
            Initializes a new instance of the TreeMapItemDefinition class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.NotifyPropertyChanged(System.String)">
            <summary>
            Updates the TreeMap if one of properties changes.
            </summary>
            <param name="parameterName">The parameter name.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.ItemTemplate">
            <summary>
            Gets or sets a value representing the DataTemplate to instantiate in 
            order to create a representation of each TreeMap item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.ValueBinding">
            <summary>
            Gets or sets a value representing a binding which can be used 
            to retrieve the value associated with each item, needed to calculate 
            relative areas of TreeMap items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.ValuePath">
            <summary>
            Gets or sets the Value Path used to set ValueBinding for retrieving 
            the value associated with each item, needed to calculate relative 
            areas of TreeMap items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.ItemsSource">
            <summary>
            Gets or sets the binding that indicates where to find the collection
            that represents the next level in the data hierarchy.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.ChildItemPadding">
            <summary>
            Gets or sets a property representing the amount of space to leave 
            between a parent item and its children.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.TreeMapItemDefinition.PropertyChanged">
            <summary>
            PropertyChanged event required by INotifyPropertyChanged.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.TreeMapItemDefinitionSelector">
            <summary>
            Provides a way to choose a TreeMapItemDefinition based on the data item and 
            the level of the item in the tree.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMapItemDefinitionSelector.#ctor">
            <summary>
            Initializes a new instance of the TreeMapItemDefinitionSelector class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.TreeMapItemDefinitionSelector.SelectItemDefinition(System.Windows.Controls.DataVisualization.TreeMap,System.Object,System.Int32)">
            <summary>
            Returns an instance of a TreeMapItemDefinition class used to specify properties for the
            current item.
            </summary>
            <param name="treeMap">Reference to the TreeMap class.</param>
            <param name="item">One of the nodes in the ItemsSource hierarchy.</param>
            <param name="level">The level of the node in the hierarchy.</param>
            <returns>The TreeMapItemDefinition to be used for this node. If this method returns null
            the TreeMap will use the value of its ItemDefinition property.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Tuple`2">
            <summary>
            A structure that groups two values.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Tuple structure.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Tuple`2.First">
            <summary>
            Gets the first value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Tuple`2.Second">
            <summary>
            Gets the second value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Unit">
            <summary>
            Units of measure.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Unit.Pixels">
            <summary>
            The corresponding value is in pixels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Unit.Degrees">
            <summary>
            The corresponding value is in degrees.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.UnitValue">
            <summary>
            A value in units.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.#ctor(System.Double,System.Windows.Controls.DataVisualization.Unit)">
            <summary>
            Instantiates a new instance of the UnitValue struct.
            </summary>
            <param name="value">The value associated with the units.</param>
            <param name="unit">The units associated with the value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.CompareTo(System.Object)">
            <summary>
            Compares two unit values to determine if they are equal or not.
            </summary>
            <param name="obj">The object being compared.</param>
            <returns>A number smaller than zero if the obj is larger than this
            object.  A number equal to 0 if they are equal.  A number greater 
            than zero if this unit value is greater than obj.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.Equals(System.Object)">
            <summary>
            Determines if two values are equal.
            </summary>
            <param name="obj">The other value.</param>
            <returns>A value indicating whether values are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_Equality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether two unit value objects are equal.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating  whether two unit value objects are 
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_Inequality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether two unit value objects are not equal.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating whether two unit value objects are not
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_LessThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether the left value is smaller than the right.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating whether the left value is smaller than
            the right.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_GreaterThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether the left value is larger than the right.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating whether the left value is larger than
            the right.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.GetHashCode">
            <summary>
            Returns the hash code of the unit value object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.UnitValue.Value">
            <summary>
            Gets the value associated with the units.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.UnitValue.Unit">
            <summary>
            Gets the units associated with the value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ValueHelper">
            <summary>
            A set of functions for data conversion operations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ValueHelper.Radian">
            <summary>
            The value of a single radian.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.CanGraph(System.Double)">
            <summary>
            Returns a value indicating whether this value can be graphed on a 
            linear axis.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns>A value indicating whether this value can be graphed on a 
            linear axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.TryConvert(System.Object,System.Double@)">
            <summary>
            Attempts to convert an object into a double.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="doubleValue">The double value.</param>
            <returns>A value indicating whether the value can be converted to a 
            double.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.TryConvert(System.Object,System.DateTime@)">
            <summary>
            Attempts to convert an object into a date time.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="dateTimeValue">The double value.</param>
            <returns>A value indicating whether the value can be converted to a 
            date time.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDouble(System.Object)">
            <summary>
            Converts an object into a double.
            </summary>
            <param name="value">The value to convert to a double.</param>
            <returns>The converted double value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDateTime(System.Object)">
            <summary>
            Converts a value to a date.
            </summary>
            <param name="value">The value to convert to a date.</param>
            <returns>The converted date value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetDateTimesBetweenInclusive(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Returns a sequence of date time values from a start and end date 
            time inclusive.
            </summary>
            <param name="start">The start date time.</param>
            <param name="end">The end date time.</param>
            <param name="count">The number of values to return.</param>
            <returns>A sequence of date time values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetTimeSpanIntervalsInclusive(System.TimeSpan,System.Int64)">
            <summary>
            Returns a sequence of time span values within a time span inclusive.
            </summary>
            <param name="timeSpan">The time span to split.</param>
            <param name="count">The number of time spans to return.</param>
            <returns>A sequence of time spans.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetIntervalsInclusive(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns that intervals between a start and end value, including those
            start and end values.
            </summary>
            <param name="start">The start value.</param>
            <param name="end">The end value.</param>
            <param name="count">The total number of intervals.</param>
            <returns>A sequence of intervals.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.RemoveNoiseFromDoubleMath(System.Double)">
            <summary>
            Removes the noise from double math.
            </summary>
            <param name="value">The value.</param>
            <returns>A double without a noise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDoubleRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Converts a range into a double range.
            </summary>
            <param name="range">The range to convert.</param>
            <returns>A range with its members converted to doubles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDateTimeRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Converts a range into a date time range.
            </summary>
            <param name="range">The range to convert.</param>
            <returns>A range with its members converted to date times.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.Compare(System.IComparable,System.IComparable)">
            <summary>
            Compares two IComparables returning -1 if the left is null and 1 if
            the right is null.
            </summary>
            <param name="left">The left comparable.</param>
            <param name="right">The right comparable.</param>
            <returns>A value indicating which is larger.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.Translate(System.Windows.Point,System.Windows.Point)">
            <summary>
            Applies the translate transform to a point.
            </summary>
            <param name="origin">The origin point.</param>
            <param name="offset">The offset point.</param>
            <returns>The translated point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToComparableRange(System.Windows.Controls.DataVisualization.Range{System.Double})">
            <summary>
            Converts any range to a range of IComparable.
            </summary>
            <param name="range">The range to be converted.</param>
            <returns>The new range type.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.LeftOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the left value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The left value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.RightOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the right value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The right value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.WidthOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the width value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The width value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.HeightOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the height value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The height value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.BottomOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the bottom value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The bottom value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.TopOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the top value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The top value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToComparableRange(System.Windows.Controls.DataVisualization.Range{System.DateTime})">
            <summary>
            Converts any range to a range of IComparable.
            </summary>
            <param name="range">The range to be converted.</param>
            <returns>The new range type.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetLength(System.Windows.Controls.DataVisualization.Range{System.DateTime})">
            <summary>
            Returns the time span of a date range.
            </summary>
            <param name="range">The range of values.</param>
            <returns>The length of the range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetLength(System.Windows.Controls.DataVisualization.Range{System.Double})">
            <summary>
            Returns the time span of a date range.
            </summary>
            <param name="range">The range of values.</param>
            <returns>The length of the range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.IsEmptyOrHasNoSize(System.Windows.Rect)">
            <summary>
            Returns a value indicating whether a rectangle is empty or has
            no width or height.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns>A value indicating whether a rectangle is empty or has
            no width or height.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.SetStyle(System.Windows.FrameworkElement,System.Windows.Style)">
            <summary>
            Sets the style property of an element.
            </summary>
            <param name="element">The element.</param>
            <param name="style">The style.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Range`1">
            <summary>
            A range of values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Range`1._hasData">
            <summary>
            A flag that determines whether the range is empty or not.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Range`1._maximum">
            <summary>
            The maximum value in the range.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Range`1._minimum">
            <summary>
            The minimum value in the range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the Range class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.op_Equality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Compare two ranges and return a value indicating whether they are
            equal.
            </summary>
            <param name="leftRange">Left-hand side range.</param>
            <param name="rightRange">Right-hand side range.</param>
            <returns>A value indicating whether the ranges are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.op_Inequality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Compare two ranges and return a value indicating whether they are
            not equal.
            </summary>
            <param name="leftRange">Left-hand side range.</param>
            <param name="rightRange">Right-hand side range.</param>
            <returns>A value indicating whether the ranges are not equal.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Add(System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Adds a range to the current range.
            </summary>
            <param name="range">A range to add to the current range.</param>
            <returns>A new range that encompasses the instance range and the
            range parameter.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Equals(System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Compares the range to another range.
            </summary>
            <param name="range">A different range.</param>
            <returns>A value indicating whether the ranges are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Equals(System.Object)">
            <summary>
            Compares the range to an object.
            </summary>
            <param name="obj">Another object.</param>
            <returns>A value indicating whether the other object is a range,
            and if so, whether that range is equal to the instance range.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Contains(`0)">
            <summary>
            Returns a value indicating whether a value is within a range.
            </summary>
            <param name="value">The value.</param>
            <returns>Whether the value is within the range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.IntersectsWith(System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Returns a value indicating whether two ranges intersect.
            </summary>
            <param name="range">The range to compare against this range.</param>
            <returns>A value indicating whether the ranges intersect.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.GetHashCode">
            <summary>
            Computes a hash code value.
            </summary>
            <returns>A hash code value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.ToString">
            <summary>
            Returns the string representation of the range.
            </summary>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Range`1.HasData">
            <summary>
            Gets a value indicating whether the range is empty or not.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Range`1.Maximum">
            <summary>
            Gets the maximum value in the range.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Range`1.Minimum">
            <summary>
            Gets the minimum value in the range.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ColumnSeries">
            <summary>
            Represents a control that contains a data series to be rendered in column format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">ColumnBarBaseSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">ColumnBarBaseSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the ColumnSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal category axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates each point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.IndependentAxis">
            <summary>
            Gets or sets the independent category axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LineSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y 
            line format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineSeries.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineSeries.PolylineStyleProperty">
            <summary>
            Identifies the PolylineStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">LineSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">LineSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.#ctor">
            <summary>
            Initializes a new instance of the LineSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.OnApplyTemplate">
            <summary>
            Creates a DataPoint for determining the line color.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the visual representation of the data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.UpdateShape">
            <summary>
            Updates the point collection object.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineSeries.Points">
            <summary>
            Gets the collection of points that make up the line.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineSeries.PolylineStyle">
            <summary>
            Gets or sets the style of the Polyline object that follows the data 
            points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineSeries.IndependentAxis">
            <summary>
            Gets or sets the independent range axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ScatterSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y scatter format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.#ctor">
            <summary>
            Initializes a new instance of the ScatterSeries class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">ScatterSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">ScatterSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.CreateDataPoint">
            <summary>
            Creates a new scatter data point.
            </summary>
            <returns>A scatter data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.GetStyleEnumeratorFromHost">
            <summary>
            Returns the style enumerator used to retrieve a style to use for 
            all data points.
            </summary>
            <returns>The style enumerator used to retrieve a style to use for 
            all data points.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            This method updates a single data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.IndependentAxis">
            <summary>
            Gets or sets the independent range axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.PieSeries">
            <summary>
            Represents a control that contains a data series to be rendered in pie
            format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieSeries.StylePaletteProperty">
            <summary>
            Identifies the StylePalette dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnStylePalettePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            StylePaletteProperty property changed handler.
            </summary>
            <param name="d">Parent that changed its StylePalette.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnStylePalettePropertyChanged(System.Collections.ObjectModel.Collection{System.Windows.Style})">
            <summary>
            StylePaletteProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieSeries._styleEnumerator">
            <summary>
            The pie data point style enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.#ctor">
            <summary>
            Initializes a new instance of the PieSeries class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieSeries._dataPointLegendItems">
            <summary>
            A dictionary that links data points to their legend items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.ConvertRatioOfRotationToPoint(System.Double,System.Double,System.Double)">
            <summary>
            Accepts a ratio of a full rotation, the x and y length and returns
            the 2D point using trigonometric functions.
            </summary>
            <param name="ratio">The ratio of a full rotation [0..1].</param>
            <param name="radiusX">The x radius.</param>
            <param name="radiusY">The y radius.</param>
            <returns>The corresponding 2D point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.AddDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Creates a legend item for each data point.
            </summary>
            <param name="dataPoint">The data point added.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.RemoveDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Removes data point's legend item when the data point is removed.
            </summary>
            <param name="dataPoint">The data point to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.CreateDataPoint">
            <summary>
            Creates a data point.
            </summary>
            <returns>A data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnBeforeUpdateDataPoints">
            <summary>
            Updates all ratios before data points are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdateLegendItemIndexes">
            <summary>
            Updates the indexes of all legend items when a change is made to the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdateRatios">
            <summary>
            Updates the ratios of each data point.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates a data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdatePieDataPointGeometry(System.Windows.Controls.DataVisualization.Charting.PieDataPoint,System.Double,System.Double)">
            <summary>
            Updates the PieDataPoint's Geometry property.
            </summary>
            <param name="pieDataPoint">PieDataPoint instance.</param>
            <param name="plotAreaWidth">PlotArea width.</param>
            <param name="plotAreaHeight">PlotArea height.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.CreatePieLegendItem(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Int32)">
            <summary>
            Creates a legend item from a data point.
            </summary>
            <param name="dataPoint">The data point to use to create the legend item.</param>
            <param name="index">The 1-based index of the Control.</param>
            <returns>The series host legend item.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.AttachEventHandlersToDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Attach event handlers to a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.DetachEventHandlersFromDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Detaches event handlers from a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.GlobalSeriesIndexChanged(System.Nullable{System.Int32})">
            <summary>
            This method updates the global series index property.
            </summary>
            <param name="globalIndex">The global index of the series.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnDataPointDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Updates the data point when the dependent value is changed.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Updates the data point when the independent value is changed.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointActualRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's actual ratio is
            changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointActualOffsetRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's actual offset ratio
            is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's ratio is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointOffsetRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's offset ratio is 
            changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.GetStylesWhere(System.Func{System.Windows.Style,System.Boolean})">
            <summary>
            Returns a rotating enumerator of Style objects that coordinates with 
            the style dispenser object to ensure that no two enumerators are
            currently on the same style if possible.  If the style
            dispenser is reset or its collection of styles is changed then
            the enumerators will also be reset.
            </summary>
            <param name="stylePredicate">A predicate that returns a value
            indicating whether to return a style.</param>
            <returns>An enumerator of styles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.ResetStyles">
            <summary>
            Resets the styles dispensed by the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Sets the new series host to be the parent style dispenser of the
            local style dispenser object.
            </summary>
            <param name="oldValue">The new series host value.</param>
            <param name="newValue">The old series host value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.RefreshStyles">
            <summary>
            Refreshes styles in the pie series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieSeries.StylePalette">
            <summary>
            Gets or sets a palette of styles used by the pie series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieSeries.ActivePieDataPoints">
            <summary>
            Gets the active pie data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieSeries.StyleDispenser">
            <summary>
            Gets or sets an object used to dispense styles from the style 
            palette.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.StyleDispenser">
            <summary>
            A class that rotates through a list of styles.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleDispenser._stylesDispensed">
            <summary>
            A linked list of styles dispensed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleDispenser._styleEnumerators">
            <summary>
            A bag of weak references to connected style enumerators.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleDispenser._ignoreStyleDispensedByEnumerator">
            <summary>
            Value indicating whether to ignore that the style enumerator has 
            dispensed a style.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleDispenser._styles">
            <summary>
            The list of styles of rotate.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.StylesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method is raised when the styles collection is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleDispenser._parent">
            <summary>
            The parent of the style dispenser.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.#ctor">
            <summary>
            Initializes a new instance of the StyleDispenser class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.ResetStyles">
            <summary>
            Resets the state of the StyleDispenser and its style enumerators.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.Unregister(System.Windows.Controls.DataVisualization.Charting.StyleEnumerator)">
            <summary>
            Unregisters a style enumerator so that it can be garbage collected.
            </summary>
            <param name="enumerator">The style enumerator.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.GetStylesWhere(System.Func{System.Windows.Style,System.Boolean})">
            <summary>
            Returns a rotating enumerator of Style objects that coordinates with 
            the style dispenser object to ensure that no two enumerators are
            currently on the same style if possible.  If the style
            dispenser is reset or its collection of styles is changed then
            the enumerators will also be reset.
            </summary>
            <param name="stylePredicate">A predicate that returns a value
            indicating whether to return a style.</param>
            <returns>An enumerator of styles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.EnumeratorStyleDispensed(System.Object,System.Windows.Controls.DataVisualization.StyleDispensedEventArgs)">
            <summary>
            This method is raised when an enumerator dispenses a style.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.OnParentChanged">
            <summary>
            Raises the ParentChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.OnEnumeratorStyleDispensed(System.Object,System.Windows.Controls.DataVisualization.StyleDispensedEventArgs)">
            <summary>
            Raises the EnumeratorStyleDispensed event.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.OnResetting">
            <summary>
            This method raises the EnumeratorsResetting event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.Styles">
            <summary>
            Gets or sets the list of styles to rotate.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.Parent">
            <summary>
            Gets or sets the parent of the style dispenser.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.EnumerableFunctions">
            <summary>
            This class contains general purpose functions to manipulate the generic
            IEnumerable type.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.FastCount(System.Collections.IEnumerable)">
            <summary>
            Attempts to cast IEnumerable to a list in order to retrieve a count 
            in order one.  It attempts to cast fail the sequence is enumerated.
            </summary>
            <param name="that">The sequence.</param>
            <returns>The number of elements in the sequence.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns whether a sequence is empty.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <returns>Whether the sequence is empty or not.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.MinOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Returns the minimum value in the stream based on the result of a
            project function.
            </summary>
            <typeparam name="T">The stream type.</typeparam>
            <param name="that">The stream.</param>
            <param name="projectionFunction">The function that transforms the
            item.</param>
            <returns>The minimum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.SumOrDefault(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the sum of all values in the sequence or the default value.
            </summary>
            <param name="that">The stream.</param>
            <returns>The sum of all values or the default value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.MaxOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Returns the maximum value in the stream based on the result of a
            project function.
            </summary>
            <typeparam name="T">The stream type.</typeparam>
            <param name="that">The stream.</param>
            <param name="projectionFunction">The function that transforms the
            item.</param>
            <returns>The maximum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Accepts two sequences and applies a function to the corresponding 
            values in the two sequences.
            </summary>
            <typeparam name="T0">The type of the first sequence.</typeparam>
            <typeparam name="T1">The type of the second sequence.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
            <param name="enumerable0">The first sequence.</param>
            <param name="enumerable1">The second sequence.</param>
            <param name="func">The function to apply to the corresponding values
            from the two sequences.</param>
            <returns>A sequence of transformed values from both sequences.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.Iterate``1(``0,System.Func{``0,``0})">
            <summary>
            Creates a sequence of values by accepting an initial value, an 
            iteration function, and apply the iteration function recursively.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="value">The initial value.</param>
            <param name="nextFunction">The function to apply to the value.
            </param>
            <returns>A sequence of the iterated values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.IndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the index of an item in a sequence.
            </summary>
            <param name="that">The sequence.</param>
            <param name="value">The item to search for.</param>
            <returns>The index of the item or -1 if not found.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.ForEachWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Executes an action for each item and a sequence, passing in the 
            index of that item to the action procedure.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <param name="action">A function that accepts a sequence item and its
            index in the sequence.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.MaxOrNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the maximum value or null if sequence is empty.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to retrieve the maximum value from.
            </param>
            <returns>The maximum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.MinOrNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum value or null if sequence is empty.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to retrieve the minimum value from.
            </param>
            <returns>The minimum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.FastElementAt``1(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Attempts to retrieve an element at an index by testing whether a 
            sequence is randomly accessible.  If not, performance degrades to a 
            linear search.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <param name="index">The index of the element in the sequence.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Legend">
            <summary>
            Represents a control that displays a list of items and has a title.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Legend.LegendItemsAreaName">
            <summary>
            Legend area name.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Legend.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.OnTitlePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TitleProperty property changed handler.
            </summary>
            <param name="d">Legend that changed its Title.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Legend.TitleStyleProperty">
            <summary>
            Identifies the TitleStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.#ctor">
            <summary>
            Initializes a new instance of the Legend class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.OnApplyTemplate">
            <summary>
            Loads template parts when template is applied.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Legend._legendItemsLegendItemsAreaAdapter">
            <summary>
            Object that synchronizes the collection of legend items with the 
            children in the legend items area container.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event for ItemsSource.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.UpdateLegendVisibility">
            <summary>
            Updates the Legend's Visibility property according to whether it has anything to display.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Legend.Title">
            <summary>
            Gets or sets the title content of the Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Legend.TitleStyle">
            <summary>
            Gets or sets the style applied to the Title property of the Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Legend.LegendItemsArea">
            <summary>
            Gets or sets the reference to the LegendItemsArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Legend.Items">
            <summary>
            Gets a collection of legend items to insert into the legend 
            area.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.RangeEnumerableExtensions">
            <summary>
            Collection of functions that manipulate streams of ranges.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.RangeEnumerableExtensions.GetRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum and maximum values in a stream.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="that">The stream.</param>
            <returns>The range of values in the stream.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.RangeEnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Range{``0}})">
            <summary>
            Returns a range encompassing all ranges in a stream.
            </summary>
            <typeparam name="T">The type of the minimum and maximum values.
            </typeparam>
            <param name="that">The stream.</param>
            <returns>A range encompassing all ranges in a stream.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StylePalette">
            <summary>
            Represents a collection of Style objects.
            </summary>
            <remarks>
            For more information, see System.Windows.Controls.ObjectCollection.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StylePalette.#ctor">
            <summary>
            Initializes a new instance of the StylePalette class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Title">
            <summary>
            Represents the title of a data visualization control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Title.#ctor">
            <summary>
            Initializes a new instance of the Title class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Chart_Axes_SetterNotSupported">
            <summary>
              Looks up a localized string similar to Changing the Chart&apos;s Axes property is not supported; changes to the collection should be made with its .Add/.Remove methods instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Chart_AxisLocationChanged_CantBeChangedToAutoWhenHostedInsideOfASeriesHost">
            <summary>
              Looks up a localized string similar to Axis location cannot be changed to auto when hosted inside of a series host..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Chart_Series_SetterNotSupported">
            <summary>
              Looks up a localized string similar to Changing the Chart&apos;s Series property is not supported; changes to the collection should be made with its .Add/.Remove methods instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_GetAxes_AssignedDependentAxisCannotBeUsed">
            <summary>
              Looks up a localized string similar to Assigned dependent axis cannot be used.  The data may not be able to be rendered on the provided axis or the series may require that they axis has an origin..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_GetAxes_AssignedIndependentAxisCannotBeUsed">
            <summary>
              Looks up a localized string similar to Assigned independent axis cannot be used..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue">
            <summary>
              Looks up a localized string similar to No suitable axis is available for plotting the dependent value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_ThisSeriesDoesNotSupportRadialAxes">
            <summary>
              Looks up a localized string similar to This series does not support radial axes..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DisplayAxis_GetLength_CannotDetermineTheLengthOfAnAxisWithAnOrientationOfNone">
            <summary>
              Looks up a localized string similar to Cannot determine the size of an axis without an orientation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.EdgePanel_OnEdgePropertyChanged">
            <summary>
              Looks up a localized string similar to Attempt to set Edge property to an invalid value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Interpolator_IncludeInRange_DataRangeBindingNotIConvertible">
            <summary>
              Looks up a localized string similar to The DataRangeBinding property of the Interpolator must be bound to an IConvertible object..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_ctor_MaximumValueMustBeLargerThanOrEqualToMinimumValue">
            <summary>
              Looks up a localized string similar to The maximum value must be larger than or equal to the minimum value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_get_Maximum_CannotReadTheMaximumOfAnEmptyRange">
            <summary>
              Looks up a localized string similar to &quot;Cannot read the Maximum of an empty range.&quot;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_get_Minimum_CannotReadTheMinimumOfAnEmptyRange">
            <summary>
              Looks up a localized string similar to &quot;Cannot read the Minimum of an empty range.&quot;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_ToString_Data">
            <summary>
              Looks up a localized string similar to [{0},{1}].
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_ToString_NoData">
            <summary>
              Looks up a localized string similar to No Data..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.RangeAxis_MaximumValueMustBeLargerThanOrEqualToMinimumValue">
            <summary>
              Looks up a localized string similar to The maximum value must be larger than or equal to the minimum value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.RangeAxis_MinimumValueMustBeLargerThanOrEqualToMaximumValue">
            <summary>
              Looks up a localized string similar to The minimum value must be smaller than or equal to the maximum value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.ReadOnlyObservableCollection_CollectionIsReadOnly">
            <summary>
              Looks up a localized string similar to Collection is read-only..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Series_OnGlobalSeriesIndexPropertyChanged_UntitledSeriesFormatString">
            <summary>
              Looks up a localized string similar to Series {0}.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Series_SeriesHost_SeriesHostPropertyNotNull">
            <summary>
              Looks up a localized string similar to A series cannot be added to more than one series host..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.SeriesHostAxesCollection_InvalidAttemptToRemovePermanentAxisFromSeriesHost">
            <summary>
              Looks up a localized string similar to Invalid attempt to remove permanent axis from axis collection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.SeriesHostAxesCollection_RemoveItem_AxisCannotBeRemovedFromASeriesHostWhenOneOrMoreSeriesAreListeningToIt">
            <summary>
              Looks up a localized string similar to An axis cannot be removed from a series host when one or more hosted series is listening to it..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.StyleEnumerator_CantResetEnumeratorResetStyleDispenserInstead">
            <summary>
              Looks up a localized string similar to Cannot reset a style enumerator.  Reset style dispenser instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.TreeMap_BuildTreeMapTree_TemplateNotSet">
            <summary>
              Looks up a localized string similar to Either ItemTemplate must be set or TreeMapItemDefinitionSelector must return a non-null template..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.TreeMap_CreateChildren_InterpolatorBindingNotSet">
            <summary>
              Looks up a localized string similar to The value of PropertyBinding property of an interpolator cannot be null..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.UniqueObservableCollection_InvalidAttemptToInsertADuplicateItem">
            <summary>
              Looks up a localized string similar to Invalid attempt to insert a duplicate item..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.WeakReferenceBag`1">
            <summary>
            A bag of weak references to items.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.#ctor">
            <summary>
            Initializes a new instance of the WeakEvent class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.Add(`0)">
            <summary>
            Adds an item to the bag.
            </summary>
            <param name="item">The item to add to the bag.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.Remove(`0)">
            <summary>
            Removes an item from the bag.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.GetEnumerator">
            <summary>
            Returns a sequence of the elements in the bag.
            </summary>
            <returns>A sequence of the elements in the bag.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a sequence of the elements in the bag.
            </summary>
            <returns>A sequence of the elements in the bag.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.Items">
            <summary>
            Gets or sets the list of event listeners.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Aug09\Binaries\System.Windows.Controls.Data.Input.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Data.Input</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer">
            <summary>
            Exposes <see cref="T:System.Windows.Controls.DescriptionViewer" /> types to UI Automation.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer.#ctor(System.Windows.Controls.DescriptionViewer)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer" /> class.
            </summary>
            <param name="owner">
            The <see cref="T:System.Windows.Controls.DescriptionViewer" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer" />.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer.GetNameCore">
            <summary>
            Called by GetName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DescriptionViewerAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer">
            <summary>
            Exposes <see cref="T:System.Windows.Controls.ValidationSummary" /> types to UI Automation.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.#ctor(System.Windows.Controls.ValidationSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer" /> class.
            </summary>
            <param name="owner">
            The <see cref="T:System.Windows.Controls.ValidationSummary" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer" />.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.GetNameCore">
            <summary>
            Called by GetName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern that is associated with the specified System.Windows.Automation.Peers.PatternInterface.
            </summary>
            <param name="patternInterface">A value from the System.Windows.Automation.Peers.PatternInterface enumeration.</param>
            <returns>The object that supports the specified pattern, or null if unsupported.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ValidationSummaryAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
            <summary>
            Invoke a selection on the current item, simulating a click.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Common.Extensions">
            <summary>
            Utility class for operations.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Data.Input.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.Input.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.Input.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.Input.Resources.UnderlyingPropertyIsReadOnly">
            <summary>
              Looks up a localized string similar to {0} cannot be set because the underlying property is read only..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.Input.Resources.ValidationSummaryHeaderError">
            <summary>
              Looks up a localized string similar to 1 Error.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.Input.Resources.ValidationSummaryHeaderErrors">
            <summary>
              Looks up a localized string similar to {0} Errors.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.Input.Resources.ValidationSummaryItem">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.Input.Resources.ValidationSummarySampleError">
            <summary>
              Looks up a localized string similar to Sample Error.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DescriptionViewer">
            <summary>
            Displays a description and tracks error state for a control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.#ctor">
            <summary>
            Initializes a new instance of the DescriptionViewer class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DescriptionViewer.DataContextProperty">
            <summary>
            Identifies the DataContext dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DescriptionViewer.DescriptionProperty">
            <summary>
            Identifies the Description dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.OnDescriptionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle the Description field property change event.  This will update the the VSM state.
            </summary>
            <param name="depObj">The DescriptionViewer that changed its Description value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DescriptionViewer.GlyphTemplateProperty">
            <summary>
            Identifies the GlyphTemplate dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DescriptionViewer.ToolTipStyleProperty">
            <summary>
            Identifies the ToolTipStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DescriptionViewer.IsFocusedProperty">
            <summary>
            Identifies the IsFocused dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DescriptionViewer.IsValidProperty">
            <summary>
            Identifies the IsValid dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DescriptionViewer.PropertyPathProperty">
            <summary>
            Identifies the PropertyPath dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DescriptionViewer.TargetProperty">
            <summary>
            Identifies the Target dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.OnApplyTemplate">
            <summary>
            When the template is applied, this loads all the template parts
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.Refresh">
            <summary>
            Reload the metadata from the source target or DomainContext
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
            <returns>The AutomationPeer associated with this DescriptionViewer.</returns>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.DescriptionViewer_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Perform initialization code
            </summary>
            <param name="sender">The DescriptionViewer that has loaded.</param>
            <param name="e">The RoutedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.DescriptionViewer_IsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsEnabled property change handler
            </summary>
            <param name="sender">The DescriptionViewer that had its IsEnabled value changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.LoadMetadata(System.Boolean)">
            <summary>
            Load meta data and update the UI. 
            </summary>
            <param name="forceUpdate">If true, metadata will not be loaded from cache.</param>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.ParseTargetValidState">
            <summary>
            Parse the target error state and update the IsValid property
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.Target_BindingValidationError(System.Object,System.Windows.Controls.ValidationErrorEventArgs)">
            <summary>
            Event handler for target control's BindingValidationError event.
            </summary>
            <param name="sender">The sender of the BindingValidationError event.</param>
            <param name="e">The ValidationErrorEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.Target_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for the target control's GotFocus event.
            </summary>
            <param name="sender">The sender of the GotFocus event.</param>
            <param name="e">The RoutedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.Target_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for the target control's LostFocus event.
            </summary>
            <param name="sender">The sender of the LostFocus event.</param>
            <param name="e">The RoutedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.UpdateCommonState">
            <summary>
            Update the Common VSM state
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.UpdateDescriptionState">
            <summary>
            Update the required field VSM state based on the description property.  
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DescriptionViewer.UpdateValidationState">
            <summary>
            When updating the validation state, check the focus state and update the VSM accordingly
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DescriptionViewer.Description">
            <summary>
            Gets or sets the description text displayed by the viewer.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DescriptionViewer.GlyphTemplate">
            <summary>
            Gets or sets the template that is used to display the description viewer glyph.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DescriptionViewer.ToolTipStyle">
            <summary>
            Gets or sets the style used to display tooltips.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DescriptionViewer.IsFocused">
            <summary>
              Gets a value that indicates whether the <see cref="P:System.Windows.Controls.DescriptionViewer.Target"/> 
              of the <see cref="T:System.Windows.Controls.DescriptionViewer"/> has focus. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DescriptionViewer.IsValid">
            <summary>
              Gets a value that indicates whether the <see cref="P:System.Windows.Controls.DescriptionViewer.Target"/> field data is valid. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DescriptionViewer.PropertyPath">
            <summary>
              Gets or sets the path to the dependency property on the <see cref="P:System.Windows.FrameworkElement.DataContext" /> 
              of the <see cref="P:System.Windows.Controls.Label.Target" /> control that 
              this <see cref="T:System.Windows.Controls.DescriptionViewer" /> is associated with. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DescriptionViewer.Target">
            <summary>
              Gets or sets the control that this <see cref="T:System.Windows.Controls.DescriptionViewer" /> is associated with. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DescriptionViewer.ValidationMetadata">
            <summary>
            Internally get or set the ValidationMetadata.  
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DescriptionViewer.Initialized">
            <summary>
            Gets a value indicating whether the control has been initialized.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidationSummary">
            <summary>
            Displays a summary of validation errors on a form.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.#ctor">
            <summary>
            Initializes a new instance of the ValidationSummary class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummary.ShowErrorsInSummaryProperty">
            <summary>
            Gets or sets a value indicating whether the field errors belonging to the input control should be shown in the ValidationSummary. 
            Errors are added to the DisplayedErrors list depending on this flag.  The base Errors list, however, will always contain all
            the errors.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.GetShowErrorsInSummary(System.Windows.DependencyObject)">
            <summary>
            Gets the ShowErrorsInSummary property of the specified DependencyObject.
            </summary>
            <param name="inputControl">The input control to get the ShowErrorsInSummary property from.</param>
            <returns>The value indicating whether errors on the input control should be shown.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.SetShowErrorsInSummary(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the ShowErrorsInSummary property of the specified DependencyObject.
            </summary>
            <param name="inputControl">The input control with which to associate the specified dependency property.</param>
            <param name="value">The value indicating whether errors on the input control should be shown.</param>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummary.ErrorStyleProperty">
            <summary>
            Identifies the ErrorStyle dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummary.FilterProperty">
            <summary>
            Identifies the Filter dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummary.FocusControlsOnClickProperty">
            <summary>
            Identifies the FocusControlsOnClick dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummary.HasErrorsProperty">
            <summary>
            Identifies the HasErrors dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummary.HasDisplayedErrorsProperty">
            <summary>
            Identifies the HasDisplayedErrors dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummary.HeaderProperty">
            <summary>
            Identifies the Header dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummary.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummary.SummaryListBoxStyleProperty">
            <summary>
            Identifies the SummaryListBoxStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummary.TargetProperty">
            <summary>
            Identifies the Target dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.CompareValidationSummaryItems(System.Windows.Controls.ValidationSummaryItem,System.Windows.Controls.ValidationSummaryItem)">
            <summary>
            Compare ValidationSummaryItems for display in the ValidationSummary
            </summary>
            <param name="x">The first reference used for comparison.</param>
            <param name="y">The second reference used for comparison.</param>
            <returns>The result of the comparison check between the two references.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.TryCompareReferences(System.Object,System.Object,System.Int32@)">
            <summary>
            Try to compare two references, but only if they they are comparable
            </summary>
            <param name="x">The first reference to compare.</param>
            <param name="y">The second reference to compare.</param>
            <param name="returnVal">The comparison value.</param>
            <returns>Returns true if the two references were able to be compared.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.ReferencesAreValid(System.Object,System.Object,System.Int32@)">
            <summary>
            Perform a null comparison check if one (or both) are null
            </summary>
            <param name="x">The first reference to compare.</param>
            <param name="y">The second reference to compare.</param>
            <param name="val">The comparison value.</param>
            <returns>Returns true if both references are non-null</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.UpdateDisplayedErrorsOnAllValidationSummaries(System.Windows.DependencyObject)">
            <summary>
            When one of the input controls has its ShowErrorsInSummary property changed, we have to go through all the ValidationSummaries on the page and update them
            </summary>
            <param name="parent">The parent ValidationSummary</param>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.OnApplyTemplate">
            <summary>
            When the template is applied, this loads all the template parts
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.OnFocusingInvalidControl(System.Windows.Controls.FocusingInvalidControlEventArgs)">
            <summary>
            OnErrorClicked is invoked when an error in the ValidationSummary is clicked, via either the mouse or keyboard.
            </summary>
            <param name="e">The FocusingInvalidControlEventArgs for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
            <returns>The AutomationPeer associated with this ValidationSummary.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.ExecuteClickInternal">
            <summary>
            Simulate a click
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummary.SortByVisualTreeOrdering(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Sort two dependency objects based on their relative positions within the VisualTree.  
            </summary>
            <param name="controlX">The first control being compared.</param>
            <param name="controlY">The second value being compared.</param>
            <returns>The sort value indicating the ordering between the two controls.</returns>
        </member>
        <member name="E:System.Windows.Controls.ValidationSummary.FocusingInvalidControl">
            <summary>
            Event triggered when an Error is clicked on.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ValidationSummary.SelectionChanged">
            <summary>
            Event triggered when the selected error has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.ErrorStyle">
            <summary>
            Gets or sets the style used for the error's item container.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.Filter">
            <summary>
            Gets or sets a value that indicates which types of errors are displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.FocusControlsOnClick">
            <summary>
            Gets or sets a value that indicates whether focus is set on the 
            input control when an error message is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.HasErrors">
            <summary>
              Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.ValidationSummary" /> has errors. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.HasDisplayedErrors">
            <summary>
              Gets or sets a value that indicates whether the 
              <see cref="T:System.Windows.Controls.ValidationSummary" /> has displayed errors. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.Header">
            <summary>
            Gets or sets the content of the <see cref="T:System.Windows.Controls.ValidationSummary" /> header. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.HeaderTemplate">
            <summary>
            Gets or sets the template that is used to display the content of the header.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.SummaryListBoxStyle">
            <summary>
            Gets or sets the style applied to the <see cref="T:System.Windows.Controls.ListBox" /> that displays the errors. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.Target">
            <summary>
            Gets or sets the <see cref="T:System.Windows.UIElement" /> for 
            which validation errors will be displayed in the summary. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.Errors">
            <summary>
            Gets the collection of errors.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.DisplayedErrors">
            <summary>
            Gets the collection of errors that are displayed after 
            the <see cref="P:System.Windows.Controls.ValidationSummary.Filter" /> is applied. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.Initialized">
            <summary>
            Gets a value indicating whether the ValidationSummary is initialized.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.ErrorsListBoxInternal">
            <summary>
            Gets the ErrorsListBox template part
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummary.HeaderContentControlInternal">
            <summary>
            Gets the HeaderContentControl template part
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidationSummaryFilters">
            <summary>
            An enum to specify the error filtering level.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummaryFilters.None">
            <summary>
            None of the errors are displayed in the ValidationSummary
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummaryFilters.ObjectErrors">
            <summary>
            ValidationSummary only displays the object level errors
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummaryFilters.PropertyErrors">
            <summary>
            ValidationSummary only displays the property level errors
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummaryFilters.All">
            <summary>
            ValidationSummary displays all errors
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidationSummaryItem">
            <summary>
            Represents an individual validation error.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummaryItem.#ctor">
            <summary>
            Initializes a new instance of the ValidationSummaryItem class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummaryItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ValidationSummaryItem class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummaryItem.#ctor(System.String,System.String,System.Windows.Controls.ValidationSummaryItemType,System.Windows.Controls.ValidationSummaryItemSource,System.Object)">
            <summary>
            Initializes a new instance of the ValidationSummaryItem class.
            </summary>
            <param name="message">The error message.</param>
            <param name="messageHeader">The header/prefix of the item, such as the property name.</param>
            <param name="itemType">The type of error, such as Property or Entity level.</param>
            <param name="source">The source of the error message, including the originating control and/or property name.</param>
            <param name="context">Context from which the error occurred.  This general property can be used as a container to keep track of the entity, for instance.</param>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummaryItem.ToString">
            <summary>
            The string representation of the error.
            </summary>
            <returns>The string representation of the ValidationSummaryItem.</returns>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummaryItem.Context">
            <summary>
            Gets or sets the object that is the context in which the error occurred.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummaryItem.ItemType">
            <summary>
            Gets a value that specifies whether the error originated from an object or a property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummaryItem.Message">
            <summary>
            Gets or sets the text of the error message.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummaryItem.MessageHeader">
            <summary>
            Gets the reference to the input control that resulted in this error
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummaryItem.Sources">
            <summary>
            Gets the sources of the error.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ValidationSummaryItem.PropertyChanged">
            <summary>
            This event is raised when any of the properties on the object change
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidationSummaryItemSource">
            <summary>
            The source of a ValidationSummaryItem, indicating the PropertyName and/or Control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummaryItemSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ValidationSummaryItemSource class.
            </summary>
            <param name="propertyName">The name of the property associated with this error.</param>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummaryItemSource.#ctor(System.String,System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the ValidationSummaryItemS